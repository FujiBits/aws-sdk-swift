// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension IotClientTypes {
    public enum AbortAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancel
        case sdkUnknown(Swift.String)

        public static var allCases: [AbortAction] {
            return [
                .cancel,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancel: return "CANCEL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AbortAction(rawValue: rawValue) ?? AbortAction.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.AbortConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case criteriaList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let criteriaList = criteriaList {
            var criteriaListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .criteriaList)
            for abortcriterialist0 in criteriaList {
                try criteriaListContainer.encode(abortcriterialist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let criteriaListContainer = try containerValues.decodeIfPresent([IotClientTypes.AbortCriteria?].self, forKey: .criteriaList)
        var criteriaListDecoded0:[IotClientTypes.AbortCriteria]? = nil
        if let criteriaListContainer = criteriaListContainer {
            criteriaListDecoded0 = [IotClientTypes.AbortCriteria]()
            for structure0 in criteriaListContainer {
                if let structure0 = structure0 {
                    criteriaListDecoded0?.append(structure0)
                }
            }
        }
        criteriaList = criteriaListDecoded0
    }
}

extension IotClientTypes.AbortConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AbortConfig(criteriaList: \(Swift.String(describing: criteriaList)))"}
}

extension IotClientTypes {
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    public struct AbortConfig: Swift.Equatable {
        /// <p>The list of criteria that determine when and how to abort the job.</p>
        public let criteriaList: [IotClientTypes.AbortCriteria]?

        public init (
            criteriaList: [IotClientTypes.AbortCriteria]? = nil
        )
        {
            self.criteriaList = criteriaList
        }
    }

}

extension IotClientTypes.AbortCriteria: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case failureType
        case minNumberOfExecutedThings
        case thresholdPercentage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let failureType = failureType {
            try encodeContainer.encode(failureType.rawValue, forKey: .failureType)
        }
        if let minNumberOfExecutedThings = minNumberOfExecutedThings {
            try encodeContainer.encode(minNumberOfExecutedThings, forKey: .minNumberOfExecutedThings)
        }
        if let thresholdPercentage = thresholdPercentage {
            try encodeContainer.encode(thresholdPercentage, forKey: .thresholdPercentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failureTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobExecutionFailureType.self, forKey: .failureType)
        failureType = failureTypeDecoded
        let actionDecoded = try containerValues.decodeIfPresent(IotClientTypes.AbortAction.self, forKey: .action)
        action = actionDecoded
        let thresholdPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .thresholdPercentage)
        thresholdPercentage = thresholdPercentageDecoded
        let minNumberOfExecutedThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minNumberOfExecutedThings)
        minNumberOfExecutedThings = minNumberOfExecutedThingsDecoded
    }
}

extension IotClientTypes.AbortCriteria: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AbortCriteria(action: \(Swift.String(describing: action)), failureType: \(Swift.String(describing: failureType)), minNumberOfExecutedThings: \(Swift.String(describing: minNumberOfExecutedThings)), thresholdPercentage: \(Swift.String(describing: thresholdPercentage)))"}
}

extension IotClientTypes {
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    public struct AbortCriteria: Swift.Equatable {
        /// <p>The type of job action to take to initiate the job abort.</p>
        public let action: IotClientTypes.AbortAction?
        /// <p>The type of job execution failures that can initiate a job abort.</p>
        public let failureType: IotClientTypes.JobExecutionFailureType?
        /// <p>The minimum number of things which must receive job execution notifications before the job
        ///             can be aborted.</p>
        public let minNumberOfExecutedThings: Swift.Int?
        /// <p>The minimum percentage of job execution failures that must occur to initiate the job abort.</p>
        ///         <p>AWS IoT supports up to two digits after the decimal (for example, 10.9 and 10.99, but not 10.999).</p>
        public let thresholdPercentage: Swift.Double?

        public init (
            action: IotClientTypes.AbortAction? = nil,
            failureType: IotClientTypes.JobExecutionFailureType? = nil,
            minNumberOfExecutedThings: Swift.Int? = nil,
            thresholdPercentage: Swift.Double? = nil
        )
        {
            self.action = action
            self.failureType = failureType
            self.minNumberOfExecutedThings = minNumberOfExecutedThings
            self.thresholdPercentage = thresholdPercentage
        }
    }

}

extension AcceptCertificateTransferInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AcceptCertificateTransferInput(certificateId: \(Swift.String(describing: certificateId)), setAsActive: \(Swift.String(describing: setAsActive)))"}
}

extension AcceptCertificateTransferInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct AcceptCertificateTransferInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptCertificateTransferInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptCertificateTransferInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptCertificateTransferOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptCertificateTransferInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptCertificateTransferOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptCertificateTransferOutputError>
}

public struct AcceptCertificateTransferInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptCertificateTransferInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptCertificateTransferInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptCertificateTransferOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.setAsActive != false {
            let setAsActiveQueryItem = ClientRuntime.URLQueryItem(name: "setAsActive".urlPercentEncoding(), value: Swift.String(input.operationInput.setAsActive).urlPercentEncoding())
            input.builder.withQueryItem(setAsActiveQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptCertificateTransferInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptCertificateTransferOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptCertificateTransferOutputError>
}

/// <p>The input for the AcceptCertificateTransfer operation.</p>
public struct AcceptCertificateTransferInput: Swift.Equatable {
    /// <p>The ID of the certificate. (The last part of the certificate ARN contains the
    ///          certificate ID.)</p>
    public let certificateId: Swift.String?
    /// <p>Specifies whether the certificate is active.</p>
    public let setAsActive: Swift.Bool

    public init (
        certificateId: Swift.String? = nil,
        setAsActive: Swift.Bool = false
    )
    {
        self.certificateId = certificateId
        self.setAsActive = setAsActive
    }
}

struct AcceptCertificateTransferInputBody: Swift.Equatable {
}

extension AcceptCertificateTransferInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AcceptCertificateTransferOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptCertificateTransferOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransferAlreadyCompletedException" : self = .transferAlreadyCompletedException(try TransferAlreadyCompletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AcceptCertificateTransferOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case transferAlreadyCompletedException(TransferAlreadyCompletedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptCertificateTransferOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AcceptCertificateTransferOutputResponse()"}
}

extension AcceptCertificateTransferOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AcceptCertificateTransferOutputResponse: Swift.Equatable {

    public init() {}
}

struct AcceptCertificateTransferOutputResponseBody: Swift.Equatable {
}

extension AcceptCertificateTransferOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes.Action: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudwatchAlarm
        case cloudwatchLogs
        case cloudwatchMetric
        case dynamoDB
        case dynamoDBv2
        case elasticsearch
        case firehose
        case http
        case iotAnalytics
        case iotEvents
        case iotSiteWise
        case kafka
        case kinesis
        case lambda
        case republish
        case s3
        case salesforce
        case sns
        case sqs
        case stepFunctions
        case timestream
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudwatchAlarm = cloudwatchAlarm {
            try encodeContainer.encode(cloudwatchAlarm, forKey: .cloudwatchAlarm)
        }
        if let cloudwatchLogs = cloudwatchLogs {
            try encodeContainer.encode(cloudwatchLogs, forKey: .cloudwatchLogs)
        }
        if let cloudwatchMetric = cloudwatchMetric {
            try encodeContainer.encode(cloudwatchMetric, forKey: .cloudwatchMetric)
        }
        if let dynamoDB = dynamoDB {
            try encodeContainer.encode(dynamoDB, forKey: .dynamoDB)
        }
        if let dynamoDBv2 = dynamoDBv2 {
            try encodeContainer.encode(dynamoDBv2, forKey: .dynamoDBv2)
        }
        if let elasticsearch = elasticsearch {
            try encodeContainer.encode(elasticsearch, forKey: .elasticsearch)
        }
        if let firehose = firehose {
            try encodeContainer.encode(firehose, forKey: .firehose)
        }
        if let http = http {
            try encodeContainer.encode(http, forKey: .http)
        }
        if let iotAnalytics = iotAnalytics {
            try encodeContainer.encode(iotAnalytics, forKey: .iotAnalytics)
        }
        if let iotEvents = iotEvents {
            try encodeContainer.encode(iotEvents, forKey: .iotEvents)
        }
        if let iotSiteWise = iotSiteWise {
            try encodeContainer.encode(iotSiteWise, forKey: .iotSiteWise)
        }
        if let kafka = kafka {
            try encodeContainer.encode(kafka, forKey: .kafka)
        }
        if let kinesis = kinesis {
            try encodeContainer.encode(kinesis, forKey: .kinesis)
        }
        if let lambda = lambda {
            try encodeContainer.encode(lambda, forKey: .lambda)
        }
        if let republish = republish {
            try encodeContainer.encode(republish, forKey: .republish)
        }
        if let s3 = s3 {
            try encodeContainer.encode(s3, forKey: .s3)
        }
        if let salesforce = salesforce {
            try encodeContainer.encode(salesforce, forKey: .salesforce)
        }
        if let sns = sns {
            try encodeContainer.encode(sns, forKey: .sns)
        }
        if let sqs = sqs {
            try encodeContainer.encode(sqs, forKey: .sqs)
        }
        if let stepFunctions = stepFunctions {
            try encodeContainer.encode(stepFunctions, forKey: .stepFunctions)
        }
        if let timestream = timestream {
            try encodeContainer.encode(timestream, forKey: .timestream)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dynamoDBDecoded = try containerValues.decodeIfPresent(IotClientTypes.DynamoDBAction.self, forKey: .dynamoDB)
        dynamoDB = dynamoDBDecoded
        let dynamoDBv2Decoded = try containerValues.decodeIfPresent(IotClientTypes.DynamoDBv2Action.self, forKey: .dynamoDBv2)
        dynamoDBv2 = dynamoDBv2Decoded
        let lambdaDecoded = try containerValues.decodeIfPresent(IotClientTypes.LambdaAction.self, forKey: .lambda)
        lambda = lambdaDecoded
        let snsDecoded = try containerValues.decodeIfPresent(IotClientTypes.SnsAction.self, forKey: .sns)
        sns = snsDecoded
        let sqsDecoded = try containerValues.decodeIfPresent(IotClientTypes.SqsAction.self, forKey: .sqs)
        sqs = sqsDecoded
        let kinesisDecoded = try containerValues.decodeIfPresent(IotClientTypes.KinesisAction.self, forKey: .kinesis)
        kinesis = kinesisDecoded
        let republishDecoded = try containerValues.decodeIfPresent(IotClientTypes.RepublishAction.self, forKey: .republish)
        republish = republishDecoded
        let s3Decoded = try containerValues.decodeIfPresent(IotClientTypes.S3Action.self, forKey: .s3)
        s3 = s3Decoded
        let firehoseDecoded = try containerValues.decodeIfPresent(IotClientTypes.FirehoseAction.self, forKey: .firehose)
        firehose = firehoseDecoded
        let cloudwatchMetricDecoded = try containerValues.decodeIfPresent(IotClientTypes.CloudwatchMetricAction.self, forKey: .cloudwatchMetric)
        cloudwatchMetric = cloudwatchMetricDecoded
        let cloudwatchAlarmDecoded = try containerValues.decodeIfPresent(IotClientTypes.CloudwatchAlarmAction.self, forKey: .cloudwatchAlarm)
        cloudwatchAlarm = cloudwatchAlarmDecoded
        let cloudwatchLogsDecoded = try containerValues.decodeIfPresent(IotClientTypes.CloudwatchLogsAction.self, forKey: .cloudwatchLogs)
        cloudwatchLogs = cloudwatchLogsDecoded
        let elasticsearchDecoded = try containerValues.decodeIfPresent(IotClientTypes.ElasticsearchAction.self, forKey: .elasticsearch)
        elasticsearch = elasticsearchDecoded
        let salesforceDecoded = try containerValues.decodeIfPresent(IotClientTypes.SalesforceAction.self, forKey: .salesforce)
        salesforce = salesforceDecoded
        let iotAnalyticsDecoded = try containerValues.decodeIfPresent(IotClientTypes.IotAnalyticsAction.self, forKey: .iotAnalytics)
        iotAnalytics = iotAnalyticsDecoded
        let iotEventsDecoded = try containerValues.decodeIfPresent(IotClientTypes.IotEventsAction.self, forKey: .iotEvents)
        iotEvents = iotEventsDecoded
        let iotSiteWiseDecoded = try containerValues.decodeIfPresent(IotClientTypes.IotSiteWiseAction.self, forKey: .iotSiteWise)
        iotSiteWise = iotSiteWiseDecoded
        let stepFunctionsDecoded = try containerValues.decodeIfPresent(IotClientTypes.StepFunctionsAction.self, forKey: .stepFunctions)
        stepFunctions = stepFunctionsDecoded
        let timestreamDecoded = try containerValues.decodeIfPresent(IotClientTypes.TimestreamAction.self, forKey: .timestream)
        timestream = timestreamDecoded
        let httpDecoded = try containerValues.decodeIfPresent(IotClientTypes.HttpAction.self, forKey: .http)
        http = httpDecoded
        let kafkaDecoded = try containerValues.decodeIfPresent(IotClientTypes.KafkaAction.self, forKey: .kafka)
        kafka = kafkaDecoded
    }
}

extension IotClientTypes.Action: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Action(cloudwatchAlarm: \(Swift.String(describing: cloudwatchAlarm)), cloudwatchLogs: \(Swift.String(describing: cloudwatchLogs)), cloudwatchMetric: \(Swift.String(describing: cloudwatchMetric)), dynamoDB: \(Swift.String(describing: dynamoDB)), dynamoDBv2: \(Swift.String(describing: dynamoDBv2)), elasticsearch: \(Swift.String(describing: elasticsearch)), firehose: \(Swift.String(describing: firehose)), http: \(Swift.String(describing: http)), iotAnalytics: \(Swift.String(describing: iotAnalytics)), iotEvents: \(Swift.String(describing: iotEvents)), iotSiteWise: \(Swift.String(describing: iotSiteWise)), kafka: \(Swift.String(describing: kafka)), kinesis: \(Swift.String(describing: kinesis)), lambda: \(Swift.String(describing: lambda)), republish: \(Swift.String(describing: republish)), s3: \(Swift.String(describing: s3)), salesforce: \(Swift.String(describing: salesforce)), sns: \(Swift.String(describing: sns)), sqs: \(Swift.String(describing: sqs)), stepFunctions: \(Swift.String(describing: stepFunctions)), timestream: \(Swift.String(describing: timestream)))"}
}

extension IotClientTypes {
    /// <p>Describes the actions associated with a rule.</p>
    public struct Action: Swift.Equatable {
        /// <p>Change the state of a CloudWatch alarm.</p>
        public let cloudwatchAlarm: IotClientTypes.CloudwatchAlarmAction?
        /// <p>Send data to CloudWatch Logs.</p>
        public let cloudwatchLogs: IotClientTypes.CloudwatchLogsAction?
        /// <p>Capture a CloudWatch metric.</p>
        public let cloudwatchMetric: IotClientTypes.CloudwatchMetricAction?
        /// <p>Write to a DynamoDB table.</p>
        public let dynamoDB: IotClientTypes.DynamoDBAction?
        /// <p>Write to a DynamoDB table. This is a new version of the DynamoDB action. It allows
        ///          you to write each attribute in an MQTT message payload into a separate DynamoDB
        ///          column.</p>
        public let dynamoDBv2: IotClientTypes.DynamoDBv2Action?
        /// <p>Write data to an Amazon Elasticsearch Service domain.</p>
        public let elasticsearch: IotClientTypes.ElasticsearchAction?
        /// <p>Write to an Amazon Kinesis Firehose stream.</p>
        public let firehose: IotClientTypes.FirehoseAction?
        /// <p>Send data to an HTTPS endpoint.</p>
        public let http: IotClientTypes.HttpAction?
        /// <p>Sends message data to an AWS IoT Analytics channel.</p>
        public let iotAnalytics: IotClientTypes.IotAnalyticsAction?
        /// <p>Sends an input to an AWS IoT Events detector.</p>
        public let iotEvents: IotClientTypes.IotEventsAction?
        /// <p>Sends data from the MQTT message that triggered the rule to AWS IoT SiteWise asset
        ///       properties.</p>
        public let iotSiteWise: IotClientTypes.IotSiteWiseAction?
        /// <p>Send messages to an Amazon Managed Streaming for Apache Kafka (Amazon MSK) or self-managed Apache Kafka cluster.</p>
        public let kafka: IotClientTypes.KafkaAction?
        /// <p>Write data to an Amazon Kinesis stream.</p>
        public let kinesis: IotClientTypes.KinesisAction?
        /// <p>Invoke a Lambda function.</p>
        public let lambda: IotClientTypes.LambdaAction?
        /// <p>Publish to another MQTT topic.</p>
        public let republish: IotClientTypes.RepublishAction?
        /// <p>Write to an Amazon S3 bucket.</p>
        public let s3: IotClientTypes.S3Action?
        /// <p>Send a message to a Salesforce IoT Cloud Input Stream.</p>
        public let salesforce: IotClientTypes.SalesforceAction?
        /// <p>Publish to an Amazon SNS topic.</p>
        public let sns: IotClientTypes.SnsAction?
        /// <p>Publish to an Amazon SQS queue.</p>
        public let sqs: IotClientTypes.SqsAction?
        /// <p>Starts execution of a Step Functions state machine.</p>
        public let stepFunctions: IotClientTypes.StepFunctionsAction?
        /// <p>The Timestream rule action writes attributes (measures) from an MQTT message
        ///          into an Amazon Timestream table. For more information, see the <a href="https://docs.aws.amazon.com/iot/latest/developerguide/timestream-rule-action.html">Timestream</a>
        ///             topic rule action documentation.</p>
        public let timestream: IotClientTypes.TimestreamAction?

        public init (
            cloudwatchAlarm: IotClientTypes.CloudwatchAlarmAction? = nil,
            cloudwatchLogs: IotClientTypes.CloudwatchLogsAction? = nil,
            cloudwatchMetric: IotClientTypes.CloudwatchMetricAction? = nil,
            dynamoDB: IotClientTypes.DynamoDBAction? = nil,
            dynamoDBv2: IotClientTypes.DynamoDBv2Action? = nil,
            elasticsearch: IotClientTypes.ElasticsearchAction? = nil,
            firehose: IotClientTypes.FirehoseAction? = nil,
            http: IotClientTypes.HttpAction? = nil,
            iotAnalytics: IotClientTypes.IotAnalyticsAction? = nil,
            iotEvents: IotClientTypes.IotEventsAction? = nil,
            iotSiteWise: IotClientTypes.IotSiteWiseAction? = nil,
            kafka: IotClientTypes.KafkaAction? = nil,
            kinesis: IotClientTypes.KinesisAction? = nil,
            lambda: IotClientTypes.LambdaAction? = nil,
            republish: IotClientTypes.RepublishAction? = nil,
            s3: IotClientTypes.S3Action? = nil,
            salesforce: IotClientTypes.SalesforceAction? = nil,
            sns: IotClientTypes.SnsAction? = nil,
            sqs: IotClientTypes.SqsAction? = nil,
            stepFunctions: IotClientTypes.StepFunctionsAction? = nil,
            timestream: IotClientTypes.TimestreamAction? = nil
        )
        {
            self.cloudwatchAlarm = cloudwatchAlarm
            self.cloudwatchLogs = cloudwatchLogs
            self.cloudwatchMetric = cloudwatchMetric
            self.dynamoDB = dynamoDB
            self.dynamoDBv2 = dynamoDBv2
            self.elasticsearch = elasticsearch
            self.firehose = firehose
            self.http = http
            self.iotAnalytics = iotAnalytics
            self.iotEvents = iotEvents
            self.iotSiteWise = iotSiteWise
            self.kafka = kafka
            self.kinesis = kinesis
            self.lambda = lambda
            self.republish = republish
            self.s3 = s3
            self.salesforce = salesforce
            self.sns = sns
            self.sqs = sqs
            self.stepFunctions = stepFunctions
            self.timestream = timestream
        }
    }

}

extension IotClientTypes {
    public enum ActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case connect
        case publish
        case receive
        case subscribe
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionType] {
            return [
                .connect,
                .publish,
                .receive,
                .subscribe,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .connect: return "CONNECT"
            case .publish: return "PUBLISH"
            case .receive: return "RECEIVE"
            case .subscribe: return "SUBSCRIBE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionType(rawValue: rawValue) ?? ActionType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.ActiveViolation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behavior
        case lastViolationTime
        case lastViolationValue
        case securityProfileName
        case thingName
        case violationEventAdditionalInfo
        case violationId
        case violationStartTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behavior = behavior {
            try encodeContainer.encode(behavior, forKey: .behavior)
        }
        if let lastViolationTime = lastViolationTime {
            try encodeContainer.encode(lastViolationTime.timeIntervalSince1970, forKey: .lastViolationTime)
        }
        if let lastViolationValue = lastViolationValue {
            try encodeContainer.encode(lastViolationValue, forKey: .lastViolationValue)
        }
        if let securityProfileName = securityProfileName {
            try encodeContainer.encode(securityProfileName, forKey: .securityProfileName)
        }
        if let thingName = thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
        if let violationEventAdditionalInfo = violationEventAdditionalInfo {
            try encodeContainer.encode(violationEventAdditionalInfo, forKey: .violationEventAdditionalInfo)
        }
        if let violationId = violationId {
            try encodeContainer.encode(violationId, forKey: .violationId)
        }
        if let violationStartTime = violationStartTime {
            try encodeContainer.encode(violationStartTime.timeIntervalSince1970, forKey: .violationStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let violationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .violationId)
        violationId = violationIdDecoded
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let securityProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityProfileName)
        securityProfileName = securityProfileNameDecoded
        let behaviorDecoded = try containerValues.decodeIfPresent(IotClientTypes.Behavior.self, forKey: .behavior)
        behavior = behaviorDecoded
        let lastViolationValueDecoded = try containerValues.decodeIfPresent(IotClientTypes.MetricValue.self, forKey: .lastViolationValue)
        lastViolationValue = lastViolationValueDecoded
        let violationEventAdditionalInfoDecoded = try containerValues.decodeIfPresent(IotClientTypes.ViolationEventAdditionalInfo.self, forKey: .violationEventAdditionalInfo)
        violationEventAdditionalInfo = violationEventAdditionalInfoDecoded
        let lastViolationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastViolationTime)
        lastViolationTime = lastViolationTimeDecoded
        let violationStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .violationStartTime)
        violationStartTime = violationStartTimeDecoded
    }
}

extension IotClientTypes.ActiveViolation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActiveViolation(behavior: \(Swift.String(describing: behavior)), lastViolationTime: \(Swift.String(describing: lastViolationTime)), lastViolationValue: \(Swift.String(describing: lastViolationValue)), securityProfileName: \(Swift.String(describing: securityProfileName)), thingName: \(Swift.String(describing: thingName)), violationEventAdditionalInfo: \(Swift.String(describing: violationEventAdditionalInfo)), violationId: \(Swift.String(describing: violationId)), violationStartTime: \(Swift.String(describing: violationStartTime)))"}
}

extension IotClientTypes {
    /// <p>Information about an active Device Defender security profile behavior violation.</p>
    public struct ActiveViolation: Swift.Equatable {
        /// <p>The behavior that is being violated.</p>
        public let behavior: IotClientTypes.Behavior?
        /// <p>The time the most recent violation occurred.</p>
        public let lastViolationTime: ClientRuntime.Date?
        /// <p>The value of the metric (the measurement) that caused the most recent violation.</p>
        public let lastViolationValue: IotClientTypes.MetricValue?
        /// <p>The security profile with the behavior is in violation.</p>
        public let securityProfileName: Swift.String?
        /// <p>The name of the thing responsible for the active violation.</p>
        public let thingName: Swift.String?
        /// <p>
        ///             The details of a violation event.
        ///         </p>
        public let violationEventAdditionalInfo: IotClientTypes.ViolationEventAdditionalInfo?
        /// <p>The ID of the active violation.</p>
        public let violationId: Swift.String?
        /// <p>The time the violation started.</p>
        public let violationStartTime: ClientRuntime.Date?

        public init (
            behavior: IotClientTypes.Behavior? = nil,
            lastViolationTime: ClientRuntime.Date? = nil,
            lastViolationValue: IotClientTypes.MetricValue? = nil,
            securityProfileName: Swift.String? = nil,
            thingName: Swift.String? = nil,
            violationEventAdditionalInfo: IotClientTypes.ViolationEventAdditionalInfo? = nil,
            violationId: Swift.String? = nil,
            violationStartTime: ClientRuntime.Date? = nil
        )
        {
            self.behavior = behavior
            self.lastViolationTime = lastViolationTime
            self.lastViolationValue = lastViolationValue
            self.securityProfileName = securityProfileName
            self.thingName = thingName
            self.violationEventAdditionalInfo = violationEventAdditionalInfo
            self.violationId = violationId
            self.violationStartTime = violationStartTime
        }
    }

}

public struct AddThingToBillingGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddThingToBillingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddThingToBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddThingToBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddThingToBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddThingToBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddThingToBillingGroupOutputError>
}

extension AddThingToBillingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddThingToBillingGroupInput(billingGroupArn: \(Swift.String(describing: billingGroupArn)), billingGroupName: \(Swift.String(describing: billingGroupName)), thingArn: \(Swift.String(describing: thingArn)), thingName: \(Swift.String(describing: thingName)))"}
}

extension AddThingToBillingGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingGroupArn
        case billingGroupName
        case thingArn
        case thingName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingGroupArn = billingGroupArn {
            try encodeContainer.encode(billingGroupArn, forKey: .billingGroupArn)
        }
        if let billingGroupName = billingGroupName {
            try encodeContainer.encode(billingGroupName, forKey: .billingGroupName)
        }
        if let thingArn = thingArn {
            try encodeContainer.encode(thingArn, forKey: .thingArn)
        }
        if let thingName = thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
    }
}

public struct AddThingToBillingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddThingToBillingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddThingToBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddThingToBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddThingToBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddThingToBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddThingToBillingGroupOutputError>
}

public struct AddThingToBillingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddThingToBillingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddThingToBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddThingToBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddThingToBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddThingToBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddThingToBillingGroupOutputError>
}

public struct AddThingToBillingGroupInput: Swift.Equatable {
    /// <p>The ARN of the billing group.</p>
    public let billingGroupArn: Swift.String?
    /// <p>The name of the billing group.</p>
    public let billingGroupName: Swift.String?
    /// <p>The ARN of the thing to be added to the billing group.</p>
    public let thingArn: Swift.String?
    /// <p>The name of the thing to be added to the billing group.</p>
    public let thingName: Swift.String?

    public init (
        billingGroupArn: Swift.String? = nil,
        billingGroupName: Swift.String? = nil,
        thingArn: Swift.String? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.billingGroupArn = billingGroupArn
        self.billingGroupName = billingGroupName
        self.thingArn = thingArn
        self.thingName = thingName
    }
}

struct AddThingToBillingGroupInputBody: Swift.Equatable {
    public let billingGroupName: Swift.String?
    public let billingGroupArn: Swift.String?
    public let thingName: Swift.String?
    public let thingArn: Swift.String?
}

extension AddThingToBillingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingGroupArn
        case billingGroupName
        case thingArn
        case thingName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let billingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupName)
        billingGroupName = billingGroupNameDecoded
        let billingGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupArn)
        billingGroupArn = billingGroupArnDecoded
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let thingArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingArn)
        thingArn = thingArnDecoded
    }
}

extension AddThingToBillingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddThingToBillingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddThingToBillingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddThingToBillingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddThingToBillingGroupOutputResponse()"}
}

extension AddThingToBillingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AddThingToBillingGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct AddThingToBillingGroupOutputResponseBody: Swift.Equatable {
}

extension AddThingToBillingGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct AddThingToThingGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddThingToThingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddThingToThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddThingToThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddThingToThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddThingToThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddThingToThingGroupOutputError>
}

extension AddThingToThingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddThingToThingGroupInput(overrideDynamicGroups: \(Swift.String(describing: overrideDynamicGroups)), thingArn: \(Swift.String(describing: thingArn)), thingGroupArn: \(Swift.String(describing: thingGroupArn)), thingGroupName: \(Swift.String(describing: thingGroupName)), thingName: \(Swift.String(describing: thingName)))"}
}

extension AddThingToThingGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case overrideDynamicGroups
        case thingArn
        case thingGroupArn
        case thingGroupName
        case thingName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if overrideDynamicGroups != false {
            try encodeContainer.encode(overrideDynamicGroups, forKey: .overrideDynamicGroups)
        }
        if let thingArn = thingArn {
            try encodeContainer.encode(thingArn, forKey: .thingArn)
        }
        if let thingGroupArn = thingGroupArn {
            try encodeContainer.encode(thingGroupArn, forKey: .thingGroupArn)
        }
        if let thingGroupName = thingGroupName {
            try encodeContainer.encode(thingGroupName, forKey: .thingGroupName)
        }
        if let thingName = thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
    }
}

public struct AddThingToThingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddThingToThingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddThingToThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddThingToThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddThingToThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddThingToThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddThingToThingGroupOutputError>
}

public struct AddThingToThingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddThingToThingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddThingToThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddThingToThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddThingToThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddThingToThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddThingToThingGroupOutputError>
}

public struct AddThingToThingGroupInput: Swift.Equatable {
    /// <p>Override dynamic thing groups with static thing groups when 10-group limit is
    /// 			reached. If a thing belongs to 10 thing groups, and one or more of those groups are
    /// 			dynamic thing groups, adding a thing to a static group removes the thing from the last
    /// 			dynamic group.</p>
    public let overrideDynamicGroups: Swift.Bool
    /// <p>The ARN of the thing to add to a group.</p>
    public let thingArn: Swift.String?
    /// <p>The ARN of the group to which you are adding a thing.</p>
    public let thingGroupArn: Swift.String?
    /// <p>The name of the group to which you are adding a thing.</p>
    public let thingGroupName: Swift.String?
    /// <p>The name of the thing to add to a group.</p>
    public let thingName: Swift.String?

    public init (
        overrideDynamicGroups: Swift.Bool = false,
        thingArn: Swift.String? = nil,
        thingGroupArn: Swift.String? = nil,
        thingGroupName: Swift.String? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.overrideDynamicGroups = overrideDynamicGroups
        self.thingArn = thingArn
        self.thingGroupArn = thingGroupArn
        self.thingGroupName = thingGroupName
        self.thingName = thingName
    }
}

struct AddThingToThingGroupInputBody: Swift.Equatable {
    public let thingGroupName: Swift.String?
    public let thingGroupArn: Swift.String?
    public let thingName: Swift.String?
    public let thingArn: Swift.String?
    public let overrideDynamicGroups: Swift.Bool
}

extension AddThingToThingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case overrideDynamicGroups
        case thingArn
        case thingGroupArn
        case thingGroupName
        case thingName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupName)
        thingGroupName = thingGroupNameDecoded
        let thingGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupArn)
        thingGroupArn = thingGroupArnDecoded
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let thingArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingArn)
        thingArn = thingArnDecoded
        let overrideDynamicGroupsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .overrideDynamicGroups)
        overrideDynamicGroups = overrideDynamicGroupsDecoded
    }
}

extension AddThingToThingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddThingToThingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddThingToThingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddThingToThingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddThingToThingGroupOutputResponse()"}
}

extension AddThingToThingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AddThingToThingGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct AddThingToThingGroupOutputResponseBody: Swift.Equatable {
}

extension AddThingToThingGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes.AddThingsToThingGroupParams: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case overrideDynamicGroups
        case thingGroupNames
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if overrideDynamicGroups != false {
            try encodeContainer.encode(overrideDynamicGroups, forKey: .overrideDynamicGroups)
        }
        if let thingGroupNames = thingGroupNames {
            var thingGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .thingGroupNames)
            for thinggroupnames0 in thingGroupNames {
                try thingGroupNamesContainer.encode(thinggroupnames0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .thingGroupNames)
        var thingGroupNamesDecoded0:[Swift.String]? = nil
        if let thingGroupNamesContainer = thingGroupNamesContainer {
            thingGroupNamesDecoded0 = [Swift.String]()
            for string0 in thingGroupNamesContainer {
                if let string0 = string0 {
                    thingGroupNamesDecoded0?.append(string0)
                }
            }
        }
        thingGroupNames = thingGroupNamesDecoded0
        let overrideDynamicGroupsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .overrideDynamicGroups)
        overrideDynamicGroups = overrideDynamicGroupsDecoded
    }
}

extension IotClientTypes.AddThingsToThingGroupParams: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddThingsToThingGroupParams(overrideDynamicGroups: \(Swift.String(describing: overrideDynamicGroups)), thingGroupNames: \(Swift.String(describing: thingGroupNames)))"}
}

extension IotClientTypes {
    /// <p>Parameters used when defining a mitigation action that move a set of things to a thing group.</p>
    public struct AddThingsToThingGroupParams: Swift.Equatable {
        /// <p>Specifies if this mitigation action can move the things that triggered the mitigation action even if they are part of one or more dynamic thing groups.</p>
        public let overrideDynamicGroups: Swift.Bool
        /// <p>The list of groups to which you want to add the things that triggered the mitigation action. You can add a thing to a maximum of 10 groups, but you can't add a thing to more than one group in the same hierarchy.</p>
        public let thingGroupNames: [Swift.String]?

        public init (
            overrideDynamicGroups: Swift.Bool = false,
            thingGroupNames: [Swift.String]? = nil
        )
        {
            self.overrideDynamicGroups = overrideDynamicGroups
            self.thingGroupNames = thingGroupNames
        }
    }

}

extension IotClientTypes.AlertTarget: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alertTargetArn
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alertTargetArn = alertTargetArn {
            try encodeContainer.encode(alertTargetArn, forKey: .alertTargetArn)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alertTargetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alertTargetArn)
        alertTargetArn = alertTargetArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IotClientTypes.AlertTarget: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AlertTarget(alertTargetArn: \(Swift.String(describing: alertTargetArn)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension IotClientTypes {
    /// <p>A structure containing the alert target ARN and the role ARN.</p>
    public struct AlertTarget: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the notification target to which alerts are sent.</p>
        public let alertTargetArn: Swift.String?
        /// <p>The ARN of the role that grants permission to send alerts to the
        ///         notification target.</p>
        public let roleArn: Swift.String?

        public init (
            alertTargetArn: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.alertTargetArn = alertTargetArn
            self.roleArn = roleArn
        }
    }

}

extension IotClientTypes {
    /// <p>The type of alert target: one of "SNS".</p>
    public enum AlertTargetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sns
        case sdkUnknown(Swift.String)

        public static var allCases: [AlertTargetType] {
            return [
                .sns,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sns: return "SNS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AlertTargetType(rawValue: rawValue) ?? AlertTargetType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.Allowed: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policies
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policies = policies {
            var policiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policies)
            for policies0 in policies {
                try policiesContainer.encode(policies0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policiesContainer = try containerValues.decodeIfPresent([IotClientTypes.Policy?].self, forKey: .policies)
        var policiesDecoded0:[IotClientTypes.Policy]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [IotClientTypes.Policy]()
            for structure0 in policiesContainer {
                if let structure0 = structure0 {
                    policiesDecoded0?.append(structure0)
                }
            }
        }
        policies = policiesDecoded0
    }
}

extension IotClientTypes.Allowed: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Allowed(policies: \(Swift.String(describing: policies)))"}
}

extension IotClientTypes {
    /// <p>Contains information that allowed the authorization.</p>
    public struct Allowed: Swift.Equatable {
        /// <p>A list of policies that allowed the authentication.</p>
        public let policies: [IotClientTypes.Policy]?

        public init (
            policies: [IotClientTypes.Policy]? = nil
        )
        {
            self.policies = policies
        }
    }

}

extension IotClientTypes.AssetPropertyTimestamp: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case offsetInNanos
        case timeInSeconds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let offsetInNanos = offsetInNanos {
            try encodeContainer.encode(offsetInNanos, forKey: .offsetInNanos)
        }
        if let timeInSeconds = timeInSeconds {
            try encodeContainer.encode(timeInSeconds, forKey: .timeInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeInSeconds)
        timeInSeconds = timeInSecondsDecoded
        let offsetInNanosDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offsetInNanos)
        offsetInNanos = offsetInNanosDecoded
    }
}

extension IotClientTypes.AssetPropertyTimestamp: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssetPropertyTimestamp(offsetInNanos: \(Swift.String(describing: offsetInNanos)), timeInSeconds: \(Swift.String(describing: timeInSeconds)))"}
}

extension IotClientTypes {
    /// <p>An asset property timestamp entry containing the following information.</p>
    public struct AssetPropertyTimestamp: Swift.Equatable {
        /// <p>Optional. A string that contains the nanosecond time offset. Accepts substitution
        ///       templates.</p>
        public let offsetInNanos: Swift.String?
        /// <p>A string that contains the time in seconds since epoch. Accepts substitution
        ///       templates.</p>
        public let timeInSeconds: Swift.String?

        public init (
            offsetInNanos: Swift.String? = nil,
            timeInSeconds: Swift.String? = nil
        )
        {
            self.offsetInNanos = offsetInNanos
            self.timeInSeconds = timeInSeconds
        }
    }

}

extension IotClientTypes.AssetPropertyValue: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case quality
        case timestamp
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let quality = quality {
            try encodeContainer.encode(quality, forKey: .quality)
        }
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(IotClientTypes.AssetPropertyVariant.self, forKey: .value)
        value = valueDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(IotClientTypes.AssetPropertyTimestamp.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let qualityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quality)
        quality = qualityDecoded
    }
}

extension IotClientTypes.AssetPropertyValue: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssetPropertyValue(quality: \(Swift.String(describing: quality)), timestamp: \(Swift.String(describing: timestamp)), value: \(Swift.String(describing: value)))"}
}

extension IotClientTypes {
    /// <p>An asset property value entry containing the following information.</p>
    public struct AssetPropertyValue: Swift.Equatable {
        /// <p>Optional. A string that describes the quality of the value. Accepts substitution
        ///       templates. Must be <code>GOOD</code>, <code>BAD</code>, or <code>UNCERTAIN</code>.</p>
        public let quality: Swift.String?
        /// <p>The asset property value timestamp.</p>
        public let timestamp: IotClientTypes.AssetPropertyTimestamp?
        /// <p>The value of the asset property.</p>
        public let value: IotClientTypes.AssetPropertyVariant?

        public init (
            quality: Swift.String? = nil,
            timestamp: IotClientTypes.AssetPropertyTimestamp? = nil,
            value: IotClientTypes.AssetPropertyVariant? = nil
        )
        {
            self.quality = quality
            self.timestamp = timestamp
            self.value = value
        }
    }

}

extension IotClientTypes.AssetPropertyVariant: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case booleanvalue = "booleanValue"
        case doublevalue = "doubleValue"
        case integervalue = "integerValue"
        case sdkUnknown
        case stringvalue = "stringValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .booleanvalue(booleanvalue):
                try container.encode(booleanvalue, forKey: .booleanvalue)
            case let .doublevalue(doublevalue):
                try container.encode(doublevalue, forKey: .doublevalue)
            case let .integervalue(integervalue):
                try container.encode(integervalue, forKey: .integervalue)
            case let .stringvalue(stringvalue):
                try container.encode(stringvalue, forKey: .stringvalue)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let stringvalueDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .stringvalue)
        if let stringvalue = stringvalueDecoded {
            self = .stringvalue(stringvalue)
            return
        }
        let integervalueDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .integervalue)
        if let integervalue = integervalueDecoded {
            self = .integervalue(integervalue)
            return
        }
        let doublevalueDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .doublevalue)
        if let doublevalue = doublevalueDecoded {
            self = .doublevalue(doublevalue)
            return
        }
        let booleanvalueDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .booleanvalue)
        if let booleanvalue = booleanvalueDecoded {
            self = .booleanvalue(booleanvalue)
            return
        }
        self = .sdkUnknown("")
    }
}

extension IotClientTypes {
    /// <p>Contains an asset property value (of a single type).</p>
    public enum AssetPropertyVariant: Swift.Equatable, Swift.Hashable {
        /// <p>Optional. The string value of the value entry. Accepts substitution templates.</p>
        case stringvalue(Swift.String)
        /// <p>Optional. A string that contains the integer value of the value entry. Accepts
        ///       substitution templates.</p>
        case integervalue(Swift.String)
        /// <p>Optional. A string that contains the double value of the value entry. Accepts substitution
        ///       templates.</p>
        case doublevalue(Swift.String)
        /// <p>Optional. A string that contains the boolean value (<code>true</code> or
        ///         <code>false</code>) of the value entry. Accepts substitution templates.</p>
        case booleanvalue(Swift.String)
        case sdkUnknown(Swift.String)
    }

}

public struct AssociateTargetsWithJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateTargetsWithJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateTargetsWithJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateTargetsWithJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateTargetsWithJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateTargetsWithJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateTargetsWithJobOutputError>
}

extension AssociateTargetsWithJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateTargetsWithJobInput(comment: \(Swift.String(describing: comment)), jobId: \(Swift.String(describing: jobId)), namespaceId: \(Swift.String(describing: namespaceId)), targets: \(Swift.String(describing: targets)))"}
}

extension AssociateTargetsWithJobInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment
        case targets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comment = comment {
            try encodeContainer.encode(comment, forKey: .comment)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for jobtargets0 in targets {
                try targetsContainer.encode(jobtargets0)
            }
        }
    }
}

public struct AssociateTargetsWithJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateTargetsWithJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateTargetsWithJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateTargetsWithJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateTargetsWithJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateTargetsWithJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateTargetsWithJobOutputError>
}

public struct AssociateTargetsWithJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateTargetsWithJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateTargetsWithJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateTargetsWithJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let namespaceId = input.operationInput.namespaceId {
            let namespaceIdQueryItem = ClientRuntime.URLQueryItem(name: "namespaceId".urlPercentEncoding(), value: Swift.String(namespaceId).urlPercentEncoding())
            input.builder.withQueryItem(namespaceIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateTargetsWithJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateTargetsWithJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateTargetsWithJobOutputError>
}

public struct AssociateTargetsWithJobInput: Swift.Equatable {
    /// <p>An optional comment string describing why the job was associated with the targets.</p>
    public let comment: Swift.String?
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    public let jobId: Swift.String?
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    ///         <p>When you specify a value for this parameter, AWS IoT Core sends jobs notifications to MQTT topics that
    ///             contain the value in the following format.</p>
    ///         <p>
    ///             <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code>
    ///          </p>
    ///         <note>
    ///             <p>The <code>namespaceId</code> feature is in public preview.</p>
    ///          </note>
    public let namespaceId: Swift.String?
    /// <p>A list of thing group ARNs that define the targets of the job.</p>
    public let targets: [Swift.String]?

    public init (
        comment: Swift.String? = nil,
        jobId: Swift.String? = nil,
        namespaceId: Swift.String? = nil,
        targets: [Swift.String]? = nil
    )
    {
        self.comment = comment
        self.jobId = jobId
        self.namespaceId = namespaceId
        self.targets = targets
    }
}

struct AssociateTargetsWithJobInputBody: Swift.Equatable {
    public let targets: [Swift.String]?
    public let comment: Swift.String?
}

extension AssociateTargetsWithJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment
        case targets
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targets)
        var targetsDecoded0:[Swift.String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Swift.String]()
            for string0 in targetsContainer {
                if let string0 = string0 {
                    targetsDecoded0?.append(string0)
                }
            }
        }
        targets = targetsDecoded0
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
    }
}

extension AssociateTargetsWithJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateTargetsWithJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateTargetsWithJobOutputError: Swift.Error, Swift.Equatable {
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateTargetsWithJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateTargetsWithJobOutputResponse(description: \(Swift.String(describing: description)), jobArn: \(Swift.String(describing: jobArn)), jobId: \(Swift.String(describing: jobId)))"}
}

extension AssociateTargetsWithJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AssociateTargetsWithJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.description = output.description
            self.jobArn = output.jobArn
            self.jobId = output.jobId
        } else {
            self.description = nil
            self.jobArn = nil
            self.jobId = nil
        }
    }
}

public struct AssociateTargetsWithJobOutputResponse: Swift.Equatable {
    /// <p>A short text description of the job.</p>
    public let description: Swift.String?
    /// <p>An ARN identifying the job.</p>
    public let jobArn: Swift.String?
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    public let jobId: Swift.String?

    public init (
        description: Swift.String? = nil,
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.description = description
        self.jobArn = jobArn
        self.jobId = jobId
    }
}

struct AssociateTargetsWithJobOutputResponseBody: Swift.Equatable {
    public let jobArn: Swift.String?
    public let jobId: Swift.String?
    public let description: Swift.String?
}

extension AssociateTargetsWithJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case jobArn
        case jobId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

public struct AttachPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachPolicyOutputError>
}

extension AttachPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachPolicyInput(policyName: \(Swift.String(describing: policyName)), target: \(Swift.String(describing: target)))"}
}

extension AttachPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case target
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
    }
}

public struct AttachPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachPolicyOutputError>
}

public struct AttachPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachPolicyOutputError>
}

public struct AttachPolicyInput: Swift.Equatable {
    /// <p>The name of the policy to attach.</p>
    public let policyName: Swift.String?
    /// <p>The <a href="https://docs.aws.amazon.com/iot/latest/developerguide/security-iam.html">identity</a> to which the policy is attached. For example, a thing group or a certificate.</p>
    public let target: Swift.String?

    public init (
        policyName: Swift.String? = nil,
        target: Swift.String? = nil
    )
    {
        self.policyName = policyName
        self.target = target
    }
}

struct AttachPolicyInputBody: Swift.Equatable {
    public let target: Swift.String?
}

extension AttachPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case target
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .target)
        target = targetDecoded
    }
}

extension AttachPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachPolicyOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachPolicyOutputResponse()"}
}

extension AttachPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AttachPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct AttachPolicyOutputResponseBody: Swift.Equatable {
}

extension AttachPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AttachPrincipalPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachPrincipalPolicyInput(policyName: \(Swift.String(describing: policyName)), principal: \(Swift.String(describing: principal)))"}
}

extension AttachPrincipalPolicyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct AttachPrincipalPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachPrincipalPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachPrincipalPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachPrincipalPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let principal = input.operationInput.principal {
            input.builder.withHeader(name: "x-amzn-iot-principal", value: Swift.String(principal))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachPrincipalPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachPrincipalPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachPrincipalPolicyOutputError>
}

public struct AttachPrincipalPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachPrincipalPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachPrincipalPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachPrincipalPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachPrincipalPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachPrincipalPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachPrincipalPolicyOutputError>
}

/// <p>The input for the AttachPrincipalPolicy operation.</p>
public struct AttachPrincipalPolicyInput: Swift.Equatable {
    /// <p>The policy name.</p>
    public let policyName: Swift.String?
    /// <p>The principal, which can be a certificate ARN (as returned from the CreateCertificate
    ///          operation) or an Amazon Cognito ID.</p>
    public let principal: Swift.String?

    public init (
        policyName: Swift.String? = nil,
        principal: Swift.String? = nil
    )
    {
        self.policyName = policyName
        self.principal = principal
    }
}

struct AttachPrincipalPolicyInputBody: Swift.Equatable {
}

extension AttachPrincipalPolicyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AttachPrincipalPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachPrincipalPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachPrincipalPolicyOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachPrincipalPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachPrincipalPolicyOutputResponse()"}
}

extension AttachPrincipalPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AttachPrincipalPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct AttachPrincipalPolicyOutputResponseBody: Swift.Equatable {
}

extension AttachPrincipalPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AttachSecurityProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachSecurityProfileInput(securityProfileName: \(Swift.String(describing: securityProfileName)), securityProfileTargetArn: \(Swift.String(describing: securityProfileTargetArn)))"}
}

extension AttachSecurityProfileInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct AttachSecurityProfileInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachSecurityProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachSecurityProfileOutputError>
}

public struct AttachSecurityProfileInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachSecurityProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let securityProfileTargetArn = input.operationInput.securityProfileTargetArn {
            let securityProfileTargetArnQueryItem = ClientRuntime.URLQueryItem(name: "securityProfileTargetArn".urlPercentEncoding(), value: Swift.String(securityProfileTargetArn).urlPercentEncoding())
            input.builder.withQueryItem(securityProfileTargetArnQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachSecurityProfileOutputError>
}

public struct AttachSecurityProfileInput: Swift.Equatable {
    /// <p>The security profile that is attached.</p>
    public let securityProfileName: Swift.String?
    /// <p>The ARN of the target (thing group) to which the security profile is attached.</p>
    public let securityProfileTargetArn: Swift.String?

    public init (
        securityProfileName: Swift.String? = nil,
        securityProfileTargetArn: Swift.String? = nil
    )
    {
        self.securityProfileName = securityProfileName
        self.securityProfileTargetArn = securityProfileTargetArn
    }
}

struct AttachSecurityProfileInputBody: Swift.Equatable {
}

extension AttachSecurityProfileInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AttachSecurityProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachSecurityProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionConflictException" : self = .versionConflictException(try VersionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachSecurityProfileOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case versionConflictException(VersionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachSecurityProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachSecurityProfileOutputResponse()"}
}

extension AttachSecurityProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AttachSecurityProfileOutputResponse: Swift.Equatable {

    public init() {}
}

struct AttachSecurityProfileOutputResponseBody: Swift.Equatable {
}

extension AttachSecurityProfileOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AttachThingPrincipalInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachThingPrincipalInput(principal: \(Swift.String(describing: principal)), thingName: \(Swift.String(describing: thingName)))"}
}

extension AttachThingPrincipalInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct AttachThingPrincipalInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachThingPrincipalInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachThingPrincipalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachThingPrincipalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let principal = input.operationInput.principal {
            input.builder.withHeader(name: "x-amzn-principal", value: Swift.String(principal))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachThingPrincipalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachThingPrincipalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachThingPrincipalOutputError>
}

public struct AttachThingPrincipalInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachThingPrincipalInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachThingPrincipalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachThingPrincipalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachThingPrincipalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachThingPrincipalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachThingPrincipalOutputError>
}

/// <p>The input for the AttachThingPrincipal operation.</p>
public struct AttachThingPrincipalInput: Swift.Equatable {
    /// <p>The principal, which can be a certificate ARN (as returned from the
    /// 			CreateCertificate operation) or an Amazon Cognito ID.</p>
    public let principal: Swift.String?
    /// <p>The name of the thing.</p>
    public let thingName: Swift.String?

    public init (
        principal: Swift.String? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.principal = principal
        self.thingName = thingName
    }
}

struct AttachThingPrincipalInputBody: Swift.Equatable {
}

extension AttachThingPrincipalInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AttachThingPrincipalOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachThingPrincipalOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachThingPrincipalOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachThingPrincipalOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachThingPrincipalOutputResponse()"}
}

extension AttachThingPrincipalOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The output from the AttachThingPrincipal operation.</p>
public struct AttachThingPrincipalOutputResponse: Swift.Equatable {

    public init() {}
}

struct AttachThingPrincipalOutputResponseBody: Swift.Equatable {
}

extension AttachThingPrincipalOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes.AttributePayload: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case merge
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributes0) in attributes {
                try attributesContainer.encode(attributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if merge != false {
            try encodeContainer.encode(merge, forKey: .merge)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let mergeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .merge)
        merge = mergeDecoded
    }
}

extension IotClientTypes.AttributePayload: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttributePayload(attributes: \(Swift.String(describing: attributes)), merge: \(Swift.String(describing: merge)))"}
}

extension IotClientTypes {
    /// <p>The attribute payload.</p>
    public struct AttributePayload: Swift.Equatable {
        /// <p>A JSON string containing up to three key-value pair in JSON format. For example:</p>
        /// 		       <p>
        /// 			         <code>{\"attributes\":{\"string1\":\"string2\"}}</code>
        /// 		       </p>
        public let attributes: [Swift.String:Swift.String]?
        /// <p>Specifies whether the list of attributes provided in the <code>AttributePayload</code> is merged with
        /// 			the attributes stored in the registry, instead of overwriting them.</p>
        /// 		       <p>To remove an attribute, call <code>UpdateThing</code> with an empty attribute value.</p>
        /// 		       <note>
        /// 			         <p>The <code>merge</code> attribute is only valid when calling <code>UpdateThing</code> or <code>UpdateThingGroup</code>.</p>
        /// 		       </note>
        public let merge: Swift.Bool

        public init (
            attributes: [Swift.String:Swift.String]? = nil,
            merge: Swift.Bool = false
        )
        {
            self.attributes = attributes
            self.merge = merge
        }
    }

}

extension IotClientTypes.AuditCheckConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension IotClientTypes.AuditCheckConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuditCheckConfiguration(enabled: \(Swift.String(describing: enabled)))"}
}

extension IotClientTypes {
    /// <p>Which audit checks are enabled and disabled for this account.</p>
    public struct AuditCheckConfiguration: Swift.Equatable {
        /// <p>True if this audit check is enabled for this account.</p>
        public let enabled: Swift.Bool

        public init (
            enabled: Swift.Bool = false
        )
        {
            self.enabled = enabled
        }
    }

}

extension IotClientTypes.AuditCheckDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkCompliant
        case checkRunStatus
        case errorCode
        case message
        case nonCompliantResourcesCount
        case suppressedNonCompliantResourcesCount
        case totalResourcesCount
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkCompliant = checkCompliant {
            try encodeContainer.encode(checkCompliant, forKey: .checkCompliant)
        }
        if let checkRunStatus = checkRunStatus {
            try encodeContainer.encode(checkRunStatus.rawValue, forKey: .checkRunStatus)
        }
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let nonCompliantResourcesCount = nonCompliantResourcesCount {
            try encodeContainer.encode(nonCompliantResourcesCount, forKey: .nonCompliantResourcesCount)
        }
        if let suppressedNonCompliantResourcesCount = suppressedNonCompliantResourcesCount {
            try encodeContainer.encode(suppressedNonCompliantResourcesCount, forKey: .suppressedNonCompliantResourcesCount)
        }
        if let totalResourcesCount = totalResourcesCount {
            try encodeContainer.encode(totalResourcesCount, forKey: .totalResourcesCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checkRunStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditCheckRunStatus.self, forKey: .checkRunStatus)
        checkRunStatus = checkRunStatusDecoded
        let checkCompliantDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .checkCompliant)
        checkCompliant = checkCompliantDecoded
        let totalResourcesCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalResourcesCount)
        totalResourcesCount = totalResourcesCountDecoded
        let nonCompliantResourcesCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nonCompliantResourcesCount)
        nonCompliantResourcesCount = nonCompliantResourcesCountDecoded
        let suppressedNonCompliantResourcesCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .suppressedNonCompliantResourcesCount)
        suppressedNonCompliantResourcesCount = suppressedNonCompliantResourcesCountDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes.AuditCheckDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuditCheckDetails(checkCompliant: \(Swift.String(describing: checkCompliant)), checkRunStatus: \(Swift.String(describing: checkRunStatus)), errorCode: \(Swift.String(describing: errorCode)), message: \(Swift.String(describing: message)), nonCompliantResourcesCount: \(Swift.String(describing: nonCompliantResourcesCount)), suppressedNonCompliantResourcesCount: \(Swift.String(describing: suppressedNonCompliantResourcesCount)), totalResourcesCount: \(Swift.String(describing: totalResourcesCount)))"}
}

extension IotClientTypes {
    /// <p>Information about the audit check.</p>
    public struct AuditCheckDetails: Swift.Equatable {
        /// <p>True if the check is complete and found all resources compliant.</p>
        public let checkCompliant: Swift.Bool?
        /// <p>The completion status of this check. One of "IN_PROGRESS", "WAITING_FOR_DATA_COLLECTION",
        ///         "CANCELED", "COMPLETED_COMPLIANT", "COMPLETED_NON_COMPLIANT", or "FAILED".</p>
        public let checkRunStatus: IotClientTypes.AuditCheckRunStatus?
        /// <p>The code of any error encountered when this check is performed during this audit.
        ///           One of "INSUFFICIENT_PERMISSIONS" or "AUDIT_CHECK_DISABLED".</p>
        public let errorCode: Swift.String?
        /// <p>The message associated with any error encountered when this check is performed during this audit.</p>
        public let message: Swift.String?
        /// <p>The number of resources that were found noncompliant during the check.</p>
        public let nonCompliantResourcesCount: Swift.Int?
        /// <p>
        ///             Describes how many of the non-compliant resources created during the evaluation of an audit check were marked as suppressed.
        ///         </p>
        public let suppressedNonCompliantResourcesCount: Swift.Int?
        /// <p>The number of resources on which the check was performed.</p>
        public let totalResourcesCount: Swift.Int?

        public init (
            checkCompliant: Swift.Bool? = nil,
            checkRunStatus: IotClientTypes.AuditCheckRunStatus? = nil,
            errorCode: Swift.String? = nil,
            message: Swift.String? = nil,
            nonCompliantResourcesCount: Swift.Int? = nil,
            suppressedNonCompliantResourcesCount: Swift.Int? = nil,
            totalResourcesCount: Swift.Int? = nil
        )
        {
            self.checkCompliant = checkCompliant
            self.checkRunStatus = checkRunStatus
            self.errorCode = errorCode
            self.message = message
            self.nonCompliantResourcesCount = nonCompliantResourcesCount
            self.suppressedNonCompliantResourcesCount = suppressedNonCompliantResourcesCount
            self.totalResourcesCount = totalResourcesCount
        }
    }

}

extension IotClientTypes {
    public enum AuditCheckRunStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceled
        case completedCompliant
        case completedNonCompliant
        case failed
        case inProgress
        case waitingForDataCollection
        case sdkUnknown(Swift.String)

        public static var allCases: [AuditCheckRunStatus] {
            return [
                .canceled,
                .completedCompliant,
                .completedNonCompliant,
                .failed,
                .inProgress,
                .waitingForDataCollection,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .completedCompliant: return "COMPLETED_COMPLIANT"
            case .completedNonCompliant: return "COMPLETED_NON_COMPLIANT"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .waitingForDataCollection: return "WAITING_FOR_DATA_COLLECTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuditCheckRunStatus(rawValue: rawValue) ?? AuditCheckRunStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.AuditFinding: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkName
        case findingId
        case findingTime
        case isSuppressed
        case nonCompliantResource
        case reasonForNonCompliance
        case reasonForNonComplianceCode
        case relatedResources
        case severity
        case taskId
        case taskStartTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkName = checkName {
            try encodeContainer.encode(checkName, forKey: .checkName)
        }
        if let findingId = findingId {
            try encodeContainer.encode(findingId, forKey: .findingId)
        }
        if let findingTime = findingTime {
            try encodeContainer.encode(findingTime.timeIntervalSince1970, forKey: .findingTime)
        }
        if let isSuppressed = isSuppressed {
            try encodeContainer.encode(isSuppressed, forKey: .isSuppressed)
        }
        if let nonCompliantResource = nonCompliantResource {
            try encodeContainer.encode(nonCompliantResource, forKey: .nonCompliantResource)
        }
        if let reasonForNonCompliance = reasonForNonCompliance {
            try encodeContainer.encode(reasonForNonCompliance, forKey: .reasonForNonCompliance)
        }
        if let reasonForNonComplianceCode = reasonForNonComplianceCode {
            try encodeContainer.encode(reasonForNonComplianceCode, forKey: .reasonForNonComplianceCode)
        }
        if let relatedResources = relatedResources {
            var relatedResourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedResources)
            for relatedresources0 in relatedResources {
                try relatedResourcesContainer.encode(relatedresources0)
            }
        }
        if let severity = severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let taskStartTime = taskStartTime {
            try encodeContainer.encode(taskStartTime.timeIntervalSince1970, forKey: .taskStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .findingId)
        findingId = findingIdDecoded
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let checkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkName)
        checkName = checkNameDecoded
        let taskStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .taskStartTime)
        taskStartTime = taskStartTimeDecoded
        let findingTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .findingTime)
        findingTime = findingTimeDecoded
        let severityDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditFindingSeverity.self, forKey: .severity)
        severity = severityDecoded
        let nonCompliantResourceDecoded = try containerValues.decodeIfPresent(IotClientTypes.NonCompliantResource.self, forKey: .nonCompliantResource)
        nonCompliantResource = nonCompliantResourceDecoded
        let relatedResourcesContainer = try containerValues.decodeIfPresent([IotClientTypes.RelatedResource?].self, forKey: .relatedResources)
        var relatedResourcesDecoded0:[IotClientTypes.RelatedResource]? = nil
        if let relatedResourcesContainer = relatedResourcesContainer {
            relatedResourcesDecoded0 = [IotClientTypes.RelatedResource]()
            for structure0 in relatedResourcesContainer {
                if let structure0 = structure0 {
                    relatedResourcesDecoded0?.append(structure0)
                }
            }
        }
        relatedResources = relatedResourcesDecoded0
        let reasonForNonComplianceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reasonForNonCompliance)
        reasonForNonCompliance = reasonForNonComplianceDecoded
        let reasonForNonComplianceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reasonForNonComplianceCode)
        reasonForNonComplianceCode = reasonForNonComplianceCodeDecoded
        let isSuppressedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isSuppressed)
        isSuppressed = isSuppressedDecoded
    }
}

extension IotClientTypes.AuditFinding: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuditFinding(checkName: \(Swift.String(describing: checkName)), findingId: \(Swift.String(describing: findingId)), findingTime: \(Swift.String(describing: findingTime)), isSuppressed: \(Swift.String(describing: isSuppressed)), nonCompliantResource: \(Swift.String(describing: nonCompliantResource)), reasonForNonCompliance: \(Swift.String(describing: reasonForNonCompliance)), reasonForNonComplianceCode: \(Swift.String(describing: reasonForNonComplianceCode)), relatedResources: \(Swift.String(describing: relatedResources)), severity: \(Swift.String(describing: severity)), taskId: \(Swift.String(describing: taskId)), taskStartTime: \(Swift.String(describing: taskStartTime)))"}
}

extension IotClientTypes {
    /// <p>The findings (results) of the audit.</p>
    public struct AuditFinding: Swift.Equatable {
        /// <p>The audit check that generated this result.</p>
        public let checkName: Swift.String?
        /// <p>A unique identifier for this set of audit findings. This identifier is used to apply
        ///       mitigation tasks to one or more sets of findings.</p>
        public let findingId: Swift.String?
        /// <p>The time the result (finding) was discovered.</p>
        public let findingTime: ClientRuntime.Date?
        /// <p>
        ///             Indicates whether the audit finding was suppressed or not during reporting.
        ///         </p>
        public let isSuppressed: Swift.Bool?
        /// <p>The resource that was found to be noncompliant with the
        ///         audit check.</p>
        public let nonCompliantResource: IotClientTypes.NonCompliantResource?
        /// <p>The reason the resource was noncompliant.</p>
        public let reasonForNonCompliance: Swift.String?
        /// <p>A code that indicates the reason that the resource was noncompliant.</p>
        public let reasonForNonComplianceCode: Swift.String?
        /// <p>The list of related resources.</p>
        public let relatedResources: [IotClientTypes.RelatedResource]?
        /// <p>The severity of the result (finding).</p>
        public let severity: IotClientTypes.AuditFindingSeverity?
        /// <p>The ID of the audit that generated this result (finding).</p>
        public let taskId: Swift.String?
        /// <p>The time the audit started.</p>
        public let taskStartTime: ClientRuntime.Date?

        public init (
            checkName: Swift.String? = nil,
            findingId: Swift.String? = nil,
            findingTime: ClientRuntime.Date? = nil,
            isSuppressed: Swift.Bool? = nil,
            nonCompliantResource: IotClientTypes.NonCompliantResource? = nil,
            reasonForNonCompliance: Swift.String? = nil,
            reasonForNonComplianceCode: Swift.String? = nil,
            relatedResources: [IotClientTypes.RelatedResource]? = nil,
            severity: IotClientTypes.AuditFindingSeverity? = nil,
            taskId: Swift.String? = nil,
            taskStartTime: ClientRuntime.Date? = nil
        )
        {
            self.checkName = checkName
            self.findingId = findingId
            self.findingTime = findingTime
            self.isSuppressed = isSuppressed
            self.nonCompliantResource = nonCompliantResource
            self.reasonForNonCompliance = reasonForNonCompliance
            self.reasonForNonComplianceCode = reasonForNonComplianceCode
            self.relatedResources = relatedResources
            self.severity = severity
            self.taskId = taskId
            self.taskStartTime = taskStartTime
        }
    }

}

extension IotClientTypes {
    public enum AuditFindingSeverity: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case critical
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [AuditFindingSeverity] {
            return [
                .critical,
                .high,
                .low,
                .medium,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .critical: return "CRITICAL"
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuditFindingSeverity(rawValue: rawValue) ?? AuditFindingSeverity.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes {
    public enum AuditFrequency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case biweekly
        case daily
        case monthly
        case weekly
        case sdkUnknown(Swift.String)

        public static var allCases: [AuditFrequency] {
            return [
                .biweekly,
                .daily,
                .monthly,
                .weekly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .biweekly: return "BIWEEKLY"
            case .daily: return "DAILY"
            case .monthly: return "MONTHLY"
            case .weekly: return "WEEKLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuditFrequency(rawValue: rawValue) ?? AuditFrequency.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.AuditMitigationActionExecutionMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionId
        case actionName
        case endTime
        case errorCode
        case findingId
        case message
        case startTime
        case status
        case taskId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionId = actionId {
            try encodeContainer.encode(actionId, forKey: .actionId)
        }
        if let actionName = actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let findingId = findingId {
            try encodeContainer.encode(findingId, forKey: .findingId)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let findingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .findingId)
        findingId = findingIdDecoded
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let actionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionId)
        actionId = actionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditMitigationActionsExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes.AuditMitigationActionExecutionMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuditMitigationActionExecutionMetadata(actionId: \(Swift.String(describing: actionId)), actionName: \(Swift.String(describing: actionName)), endTime: \(Swift.String(describing: endTime)), errorCode: \(Swift.String(describing: errorCode)), findingId: \(Swift.String(describing: findingId)), message: \(Swift.String(describing: message)), startTime: \(Swift.String(describing: startTime)), status: \(Swift.String(describing: status)), taskId: \(Swift.String(describing: taskId)))"}
}

extension IotClientTypes {
    /// <p>Returned by ListAuditMitigationActionsTask, this object contains information that describes a mitigation action that has been started.</p>
    public struct AuditMitigationActionExecutionMetadata: Swift.Equatable {
        /// <p>The unique identifier for the mitigation action being applied by the task.</p>
        public let actionId: Swift.String?
        /// <p>The friendly name of the mitigation action being applied by the task.</p>
        public let actionName: Swift.String?
        /// <p>The date and time when the task was completed or canceled. Blank if the task is still running.</p>
        public let endTime: ClientRuntime.Date?
        /// <p>If an error occurred, the code that indicates which type of error occurred.</p>
        public let errorCode: Swift.String?
        /// <p>The unique identifier for the findings to which the task and associated mitigation action are applied.</p>
        public let findingId: Swift.String?
        /// <p>If an error occurred, a message that describes the error.</p>
        public let message: Swift.String?
        /// <p>The date and time when the task was started.</p>
        public let startTime: ClientRuntime.Date?
        /// <p>The current status of the task being executed.</p>
        public let status: IotClientTypes.AuditMitigationActionsExecutionStatus?
        /// <p>The unique identifier for the task that applies the mitigation action.</p>
        public let taskId: Swift.String?

        public init (
            actionId: Swift.String? = nil,
            actionName: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            errorCode: Swift.String? = nil,
            findingId: Swift.String? = nil,
            message: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: IotClientTypes.AuditMitigationActionsExecutionStatus? = nil,
            taskId: Swift.String? = nil
        )
        {
            self.actionId = actionId
            self.actionName = actionName
            self.endTime = endTime
            self.errorCode = errorCode
            self.findingId = findingId
            self.message = message
            self.startTime = startTime
            self.status = status
            self.taskId = taskId
        }
    }

}

extension IotClientTypes {
    public enum AuditMitigationActionsExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceled
        case completed
        case failed
        case inProgress
        case pending
        case skipped
        case sdkUnknown(Swift.String)

        public static var allCases: [AuditMitigationActionsExecutionStatus] {
            return [
                .canceled,
                .completed,
                .failed,
                .inProgress,
                .pending,
                .skipped,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .skipped: return "SKIPPED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuditMitigationActionsExecutionStatus(rawValue: rawValue) ?? AuditMitigationActionsExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.AuditMitigationActionsTaskMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case startTime
        case taskId
        case taskStatus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let taskStatus = taskStatus {
            try encodeContainer.encode(taskStatus.rawValue, forKey: .taskStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let taskStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditMitigationActionsTaskStatus.self, forKey: .taskStatus)
        taskStatus = taskStatusDecoded
    }
}

extension IotClientTypes.AuditMitigationActionsTaskMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuditMitigationActionsTaskMetadata(startTime: \(Swift.String(describing: startTime)), taskId: \(Swift.String(describing: taskId)), taskStatus: \(Swift.String(describing: taskStatus)))"}
}

extension IotClientTypes {
    /// <p>Information about an audit mitigation actions task that is returned by <code>ListAuditMitigationActionsTasks</code>.</p>
    public struct AuditMitigationActionsTaskMetadata: Swift.Equatable {
        /// <p>The time at which the audit mitigation actions task was started.</p>
        public let startTime: ClientRuntime.Date?
        /// <p>The unique identifier for the task.</p>
        public let taskId: Swift.String?
        /// <p>The current state of the audit mitigation actions task.</p>
        public let taskStatus: IotClientTypes.AuditMitigationActionsTaskStatus?

        public init (
            startTime: ClientRuntime.Date? = nil,
            taskId: Swift.String? = nil,
            taskStatus: IotClientTypes.AuditMitigationActionsTaskStatus? = nil
        )
        {
            self.startTime = startTime
            self.taskId = taskId
            self.taskStatus = taskStatus
        }
    }

}

extension IotClientTypes {
    public enum AuditMitigationActionsTaskStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceled
        case completed
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [AuditMitigationActionsTaskStatus] {
            return [
                .canceled,
                .completed,
                .failed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuditMitigationActionsTaskStatus(rawValue: rawValue) ?? AuditMitigationActionsTaskStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.AuditMitigationActionsTaskTarget: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditCheckToReasonCodeFilter
        case auditTaskId
        case findingIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auditCheckToReasonCodeFilter = auditCheckToReasonCodeFilter {
            var auditCheckToReasonCodeFilterContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .auditCheckToReasonCodeFilter)
            for (dictKey0, auditchecktoreasoncodefilter0) in auditCheckToReasonCodeFilter {
                try auditCheckToReasonCodeFilterContainer.encode(auditchecktoreasoncodefilter0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let auditTaskId = auditTaskId {
            try encodeContainer.encode(auditTaskId, forKey: .auditTaskId)
        }
        if let findingIds = findingIds {
            var findingIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingIds)
            for findingids0 in findingIds {
                try findingIdsContainer.encode(findingids0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let auditTaskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .auditTaskId)
        auditTaskId = auditTaskIdDecoded
        let findingIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .findingIds)
        var findingIdsDecoded0:[Swift.String]? = nil
        if let findingIdsContainer = findingIdsContainer {
            findingIdsDecoded0 = [Swift.String]()
            for string0 in findingIdsContainer {
                if let string0 = string0 {
                    findingIdsDecoded0?.append(string0)
                }
            }
        }
        findingIds = findingIdsDecoded0
        let auditCheckToReasonCodeFilterContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .auditCheckToReasonCodeFilter)
        var auditCheckToReasonCodeFilterDecoded0: [Swift.String:[Swift.String]]? = nil
        if let auditCheckToReasonCodeFilterContainer = auditCheckToReasonCodeFilterContainer {
            auditCheckToReasonCodeFilterDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, reasonfornoncompliancecodes0) in auditCheckToReasonCodeFilterContainer {
                var reasonfornoncompliancecodes0Decoded0: [Swift.String]? = nil
                if let reasonfornoncompliancecodes0 = reasonfornoncompliancecodes0 {
                    reasonfornoncompliancecodes0Decoded0 = [Swift.String]()
                    for string1 in reasonfornoncompliancecodes0 {
                        if let string1 = string1 {
                            reasonfornoncompliancecodes0Decoded0?.append(string1)
                        }
                    }
                }
                auditCheckToReasonCodeFilterDecoded0?[key0] = reasonfornoncompliancecodes0Decoded0
            }
        }
        auditCheckToReasonCodeFilter = auditCheckToReasonCodeFilterDecoded0
    }
}

extension IotClientTypes.AuditMitigationActionsTaskTarget: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuditMitigationActionsTaskTarget(auditCheckToReasonCodeFilter: \(Swift.String(describing: auditCheckToReasonCodeFilter)), auditTaskId: \(Swift.String(describing: auditTaskId)), findingIds: \(Swift.String(describing: findingIds)))"}
}

extension IotClientTypes {
    /// <p>Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears.</p>
    public struct AuditMitigationActionsTaskTarget: Swift.Equatable {
        /// <p>Specifies a filter in the form of an audit check and set of reason codes that identify the findings from the audit to which the audit mitigation actions task apply.</p>
        public let auditCheckToReasonCodeFilter: [Swift.String:[Swift.String]]?
        /// <p>If the task will apply a mitigation action to findings from a specific audit, this value uniquely identifies the audit.</p>
        public let auditTaskId: Swift.String?
        /// <p>If the task will apply a mitigation action to one or more listed findings, this value uniquely identifies those findings.</p>
        public let findingIds: [Swift.String]?

        public init (
            auditCheckToReasonCodeFilter: [Swift.String:[Swift.String]]? = nil,
            auditTaskId: Swift.String? = nil,
            findingIds: [Swift.String]? = nil
        )
        {
            self.auditCheckToReasonCodeFilter = auditCheckToReasonCodeFilter
            self.auditTaskId = auditTaskId
            self.findingIds = findingIds
        }
    }

}

extension IotClientTypes.AuditNotificationTarget: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled
        case roleArn
        case targetArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let targetArn = targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension IotClientTypes.AuditNotificationTarget: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuditNotificationTarget(enabled: \(Swift.String(describing: enabled)), roleArn: \(Swift.String(describing: roleArn)), targetArn: \(Swift.String(describing: targetArn)))"}
}

extension IotClientTypes {
    /// <p>Information about the targets to which audit notifications are sent.</p>
    public struct AuditNotificationTarget: Swift.Equatable {
        /// <p>True if notifications to the target are enabled.</p>
        public let enabled: Swift.Bool
        /// <p>The ARN of the role that grants permission to send notifications to the target.</p>
        public let roleArn: Swift.String?
        /// <p>The ARN of the target (SNS topic) to which audit notifications are sent.</p>
        public let targetArn: Swift.String?

        public init (
            enabled: Swift.Bool = false,
            roleArn: Swift.String? = nil,
            targetArn: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.roleArn = roleArn
            self.targetArn = targetArn
        }
    }

}

extension IotClientTypes {
    public enum AuditNotificationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sns
        case sdkUnknown(Swift.String)

        public static var allCases: [AuditNotificationType] {
            return [
                .sns,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sns: return "SNS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuditNotificationType(rawValue: rawValue) ?? AuditNotificationType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.AuditSuppression: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkName
        case description
        case expirationDate
        case resourceIdentifier
        case suppressIndefinitely
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkName = checkName {
            try encodeContainer.encode(checkName, forKey: .checkName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let expirationDate = expirationDate {
            try encodeContainer.encode(expirationDate.timeIntervalSince1970, forKey: .expirationDate)
        }
        if let resourceIdentifier = resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
        if let suppressIndefinitely = suppressIndefinitely {
            try encodeContainer.encode(suppressIndefinitely, forKey: .suppressIndefinitely)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkName)
        checkName = checkNameDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(IotClientTypes.ResourceIdentifier.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let suppressIndefinitelyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .suppressIndefinitely)
        suppressIndefinitely = suppressIndefinitelyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension IotClientTypes.AuditSuppression: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuditSuppression(checkName: \(Swift.String(describing: checkName)), description: \(Swift.String(describing: description)), expirationDate: \(Swift.String(describing: expirationDate)), resourceIdentifier: \(Swift.String(describing: resourceIdentifier)), suppressIndefinitely: \(Swift.String(describing: suppressIndefinitely)))"}
}

extension IotClientTypes {
    /// <p> Filters out specific findings of a Device Defender audit. </p>
    public struct AuditSuppression: Swift.Equatable {
        /// <p>An audit check name. Checks must be enabled
        ///         for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list
        ///         of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code>
        ///         to select which checks are enabled.)</p>
        public let checkName: Swift.String?
        /// <p>
        ///             The description of the audit suppression.
        ///         </p>
        public let description: Swift.String?
        /// <p>
        ///             The expiration date (epoch timestamp in seconds) that you want the suppression to adhere to.
        ///         </p>
        public let expirationDate: ClientRuntime.Date?
        /// <p>Information that identifies the noncompliant resource.</p>
        public let resourceIdentifier: IotClientTypes.ResourceIdentifier?
        /// <p>
        ///             Indicates whether a suppression should exist indefinitely or not.
        ///         </p>
        public let suppressIndefinitely: Swift.Bool?

        public init (
            checkName: Swift.String? = nil,
            description: Swift.String? = nil,
            expirationDate: ClientRuntime.Date? = nil,
            resourceIdentifier: IotClientTypes.ResourceIdentifier? = nil,
            suppressIndefinitely: Swift.Bool? = nil
        )
        {
            self.checkName = checkName
            self.description = description
            self.expirationDate = expirationDate
            self.resourceIdentifier = resourceIdentifier
            self.suppressIndefinitely = suppressIndefinitely
        }
    }

}

extension IotClientTypes.AuditTaskMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskId
        case taskStatus
        case taskType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let taskStatus = taskStatus {
            try encodeContainer.encode(taskStatus.rawValue, forKey: .taskStatus)
        }
        if let taskType = taskType {
            try encodeContainer.encode(taskType.rawValue, forKey: .taskType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let taskStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditTaskStatus.self, forKey: .taskStatus)
        taskStatus = taskStatusDecoded
        let taskTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditTaskType.self, forKey: .taskType)
        taskType = taskTypeDecoded
    }
}

extension IotClientTypes.AuditTaskMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuditTaskMetadata(taskId: \(Swift.String(describing: taskId)), taskStatus: \(Swift.String(describing: taskStatus)), taskType: \(Swift.String(describing: taskType)))"}
}

extension IotClientTypes {
    /// <p>The audits that were performed.</p>
    public struct AuditTaskMetadata: Swift.Equatable {
        /// <p>The ID of this audit.</p>
        public let taskId: Swift.String?
        /// <p>The status of this audit. One of "IN_PROGRESS", "COMPLETED",
        ///         "FAILED", or "CANCELED".</p>
        public let taskStatus: IotClientTypes.AuditTaskStatus?
        /// <p>The type of this audit. One of "ON_DEMAND_AUDIT_TASK" or "SCHEDULED_AUDIT_TASK".</p>
        public let taskType: IotClientTypes.AuditTaskType?

        public init (
            taskId: Swift.String? = nil,
            taskStatus: IotClientTypes.AuditTaskStatus? = nil,
            taskType: IotClientTypes.AuditTaskType? = nil
        )
        {
            self.taskId = taskId
            self.taskStatus = taskStatus
            self.taskType = taskType
        }
    }

}

extension IotClientTypes {
    public enum AuditTaskStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceled
        case completed
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [AuditTaskStatus] {
            return [
                .canceled,
                .completed,
                .failed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuditTaskStatus(rawValue: rawValue) ?? AuditTaskStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes {
    public enum AuditTaskType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case onDemandAuditTask
        case scheduledAuditTask
        case sdkUnknown(Swift.String)

        public static var allCases: [AuditTaskType] {
            return [
                .onDemandAuditTask,
                .scheduledAuditTask,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .onDemandAuditTask: return "ON_DEMAND_AUDIT_TASK"
            case .scheduledAuditTask: return "SCHEDULED_AUDIT_TASK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuditTaskType(rawValue: rawValue) ?? AuditTaskType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes {
    public enum AuthDecision: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allowed
        case explicitDeny
        case implicitDeny
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthDecision] {
            return [
                .allowed,
                .explicitDeny,
                .implicitDeny,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allowed: return "ALLOWED"
            case .explicitDeny: return "EXPLICIT_DENY"
            case .implicitDeny: return "IMPLICIT_DENY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthDecision(rawValue: rawValue) ?? AuthDecision.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.AuthInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionType
        case resources
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionType = actionType {
            try encodeContainer.encode(actionType.rawValue, forKey: .actionType)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for resources0 in resources {
                try resourcesContainer.encode(resources0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let resourcesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resources)
        var resourcesDecoded0:[Swift.String]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [Swift.String]()
            for string0 in resourcesContainer {
                if let string0 = string0 {
                    resourcesDecoded0?.append(string0)
                }
            }
        }
        resources = resourcesDecoded0
    }
}

extension IotClientTypes.AuthInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuthInfo(actionType: \(Swift.String(describing: actionType)), resources: \(Swift.String(describing: resources)))"}
}

extension IotClientTypes {
    /// <p>A collection of authorization information.</p>
    public struct AuthInfo: Swift.Equatable {
        /// <p>The type of action for which the principal is being authorized.</p>
        public let actionType: IotClientTypes.ActionType?
        /// <p>The resources for which the principal is being authorized to perform the specified
        ///          action.</p>
        public let resources: [Swift.String]?

        public init (
            actionType: IotClientTypes.ActionType? = nil,
            resources: [Swift.String]? = nil
        )
        {
            self.actionType = actionType
            self.resources = resources
        }
    }

}

extension IotClientTypes.AuthResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowed
        case authDecision
        case authInfo
        case denied
        case missingContextValues
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowed = allowed {
            try encodeContainer.encode(allowed, forKey: .allowed)
        }
        if let authDecision = authDecision {
            try encodeContainer.encode(authDecision.rawValue, forKey: .authDecision)
        }
        if let authInfo = authInfo {
            try encodeContainer.encode(authInfo, forKey: .authInfo)
        }
        if let denied = denied {
            try encodeContainer.encode(denied, forKey: .denied)
        }
        if let missingContextValues = missingContextValues {
            var missingContextValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .missingContextValues)
            for missingcontextvalues0 in missingContextValues {
                try missingContextValuesContainer.encode(missingcontextvalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authInfoDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthInfo.self, forKey: .authInfo)
        authInfo = authInfoDecoded
        let allowedDecoded = try containerValues.decodeIfPresent(IotClientTypes.Allowed.self, forKey: .allowed)
        allowed = allowedDecoded
        let deniedDecoded = try containerValues.decodeIfPresent(IotClientTypes.Denied.self, forKey: .denied)
        denied = deniedDecoded
        let authDecisionDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthDecision.self, forKey: .authDecision)
        authDecision = authDecisionDecoded
        let missingContextValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .missingContextValues)
        var missingContextValuesDecoded0:[Swift.String]? = nil
        if let missingContextValuesContainer = missingContextValuesContainer {
            missingContextValuesDecoded0 = [Swift.String]()
            for string0 in missingContextValuesContainer {
                if let string0 = string0 {
                    missingContextValuesDecoded0?.append(string0)
                }
            }
        }
        missingContextValues = missingContextValuesDecoded0
    }
}

extension IotClientTypes.AuthResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuthResult(allowed: \(Swift.String(describing: allowed)), authDecision: \(Swift.String(describing: authDecision)), authInfo: \(Swift.String(describing: authInfo)), denied: \(Swift.String(describing: denied)), missingContextValues: \(Swift.String(describing: missingContextValues)))"}
}

extension IotClientTypes {
    /// <p>The authorizer result.</p>
    public struct AuthResult: Swift.Equatable {
        /// <p>The policies and statements that allowed the specified action.</p>
        public let allowed: IotClientTypes.Allowed?
        /// <p>The final authorization decision of this scenario. Multiple statements are taken into
        ///          account when determining the authorization decision. An explicit deny statement can
        ///          override multiple allow statements.</p>
        public let authDecision: IotClientTypes.AuthDecision?
        /// <p>Authorization information.</p>
        public let authInfo: IotClientTypes.AuthInfo?
        /// <p>The policies and statements that denied the specified action.</p>
        public let denied: IotClientTypes.Denied?
        /// <p>Contains any missing context values found while evaluating policy.</p>
        public let missingContextValues: [Swift.String]?

        public init (
            allowed: IotClientTypes.Allowed? = nil,
            authDecision: IotClientTypes.AuthDecision? = nil,
            authInfo: IotClientTypes.AuthInfo? = nil,
            denied: IotClientTypes.Denied? = nil,
            missingContextValues: [Swift.String]? = nil
        )
        {
            self.allowed = allowed
            self.authDecision = authDecision
            self.authInfo = authInfo
            self.denied = denied
            self.missingContextValues = missingContextValues
        }
    }

}

extension IotClientTypes.AuthorizerConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowAuthorizerOverride
        case defaultAuthorizerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allowAuthorizerOverride != false {
            try encodeContainer.encode(allowAuthorizerOverride, forKey: .allowAuthorizerOverride)
        }
        if let defaultAuthorizerName = defaultAuthorizerName {
            try encodeContainer.encode(defaultAuthorizerName, forKey: .defaultAuthorizerName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultAuthorizerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultAuthorizerName)
        defaultAuthorizerName = defaultAuthorizerNameDecoded
        let allowAuthorizerOverrideDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowAuthorizerOverride)
        allowAuthorizerOverride = allowAuthorizerOverrideDecoded
    }
}

extension IotClientTypes.AuthorizerConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuthorizerConfig(allowAuthorizerOverride: \(Swift.String(describing: allowAuthorizerOverride)), defaultAuthorizerName: \(Swift.String(describing: defaultAuthorizerName)))"}
}

extension IotClientTypes {
    /// <p>An object that specifies the authorization service for a domain.</p>
    public struct AuthorizerConfig: Swift.Equatable {
        /// <p>A Boolean that specifies whether the domain configuration's authorization service can be overridden.</p>
        public let allowAuthorizerOverride: Swift.Bool
        /// <p>The name of the authorization service for a domain configuration.</p>
        public let defaultAuthorizerName: Swift.String?

        public init (
            allowAuthorizerOverride: Swift.Bool = false,
            defaultAuthorizerName: Swift.String? = nil
        )
        {
            self.allowAuthorizerOverride = allowAuthorizerOverride
            self.defaultAuthorizerName = defaultAuthorizerName
        }
    }

}

extension IotClientTypes.AuthorizerDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerArn
        case authorizerFunctionArn
        case authorizerName
        case creationDate
        case lastModifiedDate
        case signingDisabled
        case status
        case tokenKeyName
        case tokenSigningPublicKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizerArn = authorizerArn {
            try encodeContainer.encode(authorizerArn, forKey: .authorizerArn)
        }
        if let authorizerFunctionArn = authorizerFunctionArn {
            try encodeContainer.encode(authorizerFunctionArn, forKey: .authorizerFunctionArn)
        }
        if let authorizerName = authorizerName {
            try encodeContainer.encode(authorizerName, forKey: .authorizerName)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let signingDisabled = signingDisabled {
            try encodeContainer.encode(signingDisabled, forKey: .signingDisabled)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tokenKeyName = tokenKeyName {
            try encodeContainer.encode(tokenKeyName, forKey: .tokenKeyName)
        }
        if let tokenSigningPublicKeys = tokenSigningPublicKeys {
            var tokenSigningPublicKeysContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tokenSigningPublicKeys)
            for (dictKey0, publickeymap0) in tokenSigningPublicKeys {
                try tokenSigningPublicKeysContainer.encode(publickeymap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerName)
        authorizerName = authorizerNameDecoded
        let authorizerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerArn)
        authorizerArn = authorizerArnDecoded
        let authorizerFunctionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerFunctionArn)
        authorizerFunctionArn = authorizerFunctionArnDecoded
        let tokenKeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenKeyName)
        tokenKeyName = tokenKeyNameDecoded
        let tokenSigningPublicKeysContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tokenSigningPublicKeys)
        var tokenSigningPublicKeysDecoded0: [Swift.String:Swift.String]? = nil
        if let tokenSigningPublicKeysContainer = tokenSigningPublicKeysContainer {
            tokenSigningPublicKeysDecoded0 = [Swift.String:Swift.String]()
            for (key0, keyvalue0) in tokenSigningPublicKeysContainer {
                if let keyvalue0 = keyvalue0 {
                    tokenSigningPublicKeysDecoded0?[key0] = keyvalue0
                }
            }
        }
        tokenSigningPublicKeys = tokenSigningPublicKeysDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthorizerStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let signingDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .signingDisabled)
        signingDisabled = signingDisabledDecoded
    }
}

extension IotClientTypes.AuthorizerDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuthorizerDescription(authorizerArn: \(Swift.String(describing: authorizerArn)), authorizerFunctionArn: \(Swift.String(describing: authorizerFunctionArn)), authorizerName: \(Swift.String(describing: authorizerName)), creationDate: \(Swift.String(describing: creationDate)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), signingDisabled: \(Swift.String(describing: signingDisabled)), status: \(Swift.String(describing: status)), tokenKeyName: \(Swift.String(describing: tokenKeyName)), tokenSigningPublicKeys: \(Swift.String(describing: tokenSigningPublicKeys)))"}
}

extension IotClientTypes {
    /// <p>The authorizer description.</p>
    public struct AuthorizerDescription: Swift.Equatable {
        /// <p>The authorizer ARN.</p>
        public let authorizerArn: Swift.String?
        /// <p>The authorizer's Lambda function ARN.</p>
        public let authorizerFunctionArn: Swift.String?
        /// <p>The authorizer name.</p>
        public let authorizerName: Swift.String?
        /// <p>The UNIX timestamp of when the authorizer was created.</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>The UNIX timestamp of when the authorizer was last updated.</p>
        public let lastModifiedDate: ClientRuntime.Date?
        /// <p>Specifies whether AWS IoT validates the token signature in an authorization request.</p>
        public let signingDisabled: Swift.Bool?
        /// <p>The status of the authorizer.</p>
        public let status: IotClientTypes.AuthorizerStatus?
        /// <p>The key used to extract the token from the HTTP headers.</p>
        public let tokenKeyName: Swift.String?
        /// <p>The public keys used to validate the token signature returned by your custom
        ///          authentication service.</p>
        public let tokenSigningPublicKeys: [Swift.String:Swift.String]?

        public init (
            authorizerArn: Swift.String? = nil,
            authorizerFunctionArn: Swift.String? = nil,
            authorizerName: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            signingDisabled: Swift.Bool? = nil,
            status: IotClientTypes.AuthorizerStatus? = nil,
            tokenKeyName: Swift.String? = nil,
            tokenSigningPublicKeys: [Swift.String:Swift.String]? = nil
        )
        {
            self.authorizerArn = authorizerArn
            self.authorizerFunctionArn = authorizerFunctionArn
            self.authorizerName = authorizerName
            self.creationDate = creationDate
            self.lastModifiedDate = lastModifiedDate
            self.signingDisabled = signingDisabled
            self.status = status
            self.tokenKeyName = tokenKeyName
            self.tokenSigningPublicKeys = tokenSigningPublicKeys
        }
    }

}

extension IotClientTypes {
    public enum AuthorizerStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthorizerStatus] {
            return [
                .active,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthorizerStatus(rawValue: rawValue) ?? AuthorizerStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.AuthorizerSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerArn
        case authorizerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizerArn = authorizerArn {
            try encodeContainer.encode(authorizerArn, forKey: .authorizerArn)
        }
        if let authorizerName = authorizerName {
            try encodeContainer.encode(authorizerName, forKey: .authorizerName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerName)
        authorizerName = authorizerNameDecoded
        let authorizerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerArn)
        authorizerArn = authorizerArnDecoded
    }
}

extension IotClientTypes.AuthorizerSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuthorizerSummary(authorizerArn: \(Swift.String(describing: authorizerArn)), authorizerName: \(Swift.String(describing: authorizerName)))"}
}

extension IotClientTypes {
    /// <p>The authorizer summary.</p>
    public struct AuthorizerSummary: Swift.Equatable {
        /// <p>The authorizer ARN.</p>
        public let authorizerArn: Swift.String?
        /// <p>The authorizer name.</p>
        public let authorizerName: Swift.String?

        public init (
            authorizerArn: Swift.String? = nil,
            authorizerName: Swift.String? = nil
        )
        {
            self.authorizerArn = authorizerArn
            self.authorizerName = authorizerName
        }
    }

}

extension IotClientTypes {
    public enum AutoRegistrationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disable
        case enable
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoRegistrationStatus] {
            return [
                .disable,
                .enable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disable: return "DISABLE"
            case .enable: return "ENABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoRegistrationStatus(rawValue: rawValue) ?? AutoRegistrationStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.AwsJobAbortConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortCriteriaList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let abortCriteriaList = abortCriteriaList {
            var abortCriteriaListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .abortCriteriaList)
            for awsjobabortcriterialist0 in abortCriteriaList {
                try abortCriteriaListContainer.encode(awsjobabortcriterialist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let abortCriteriaListContainer = try containerValues.decodeIfPresent([IotClientTypes.AwsJobAbortCriteria?].self, forKey: .abortCriteriaList)
        var abortCriteriaListDecoded0:[IotClientTypes.AwsJobAbortCriteria]? = nil
        if let abortCriteriaListContainer = abortCriteriaListContainer {
            abortCriteriaListDecoded0 = [IotClientTypes.AwsJobAbortCriteria]()
            for structure0 in abortCriteriaListContainer {
                if let structure0 = structure0 {
                    abortCriteriaListDecoded0?.append(structure0)
                }
            }
        }
        abortCriteriaList = abortCriteriaListDecoded0
    }
}

extension IotClientTypes.AwsJobAbortConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsJobAbortConfig(abortCriteriaList: \(Swift.String(describing: abortCriteriaList)))"}
}

extension IotClientTypes {
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    public struct AwsJobAbortConfig: Swift.Equatable {
        /// <p>The list of criteria that determine when and how to abort the job.</p>
        public let abortCriteriaList: [IotClientTypes.AwsJobAbortCriteria]?

        public init (
            abortCriteriaList: [IotClientTypes.AwsJobAbortCriteria]? = nil
        )
        {
            self.abortCriteriaList = abortCriteriaList
        }
    }

}

extension IotClientTypes.AwsJobAbortCriteria: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case failureType
        case minNumberOfExecutedThings
        case thresholdPercentage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let failureType = failureType {
            try encodeContainer.encode(failureType.rawValue, forKey: .failureType)
        }
        if let minNumberOfExecutedThings = minNumberOfExecutedThings {
            try encodeContainer.encode(minNumberOfExecutedThings, forKey: .minNumberOfExecutedThings)
        }
        if let thresholdPercentage = thresholdPercentage {
            try encodeContainer.encode(thresholdPercentage, forKey: .thresholdPercentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failureTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.AwsJobAbortCriteriaFailureType.self, forKey: .failureType)
        failureType = failureTypeDecoded
        let actionDecoded = try containerValues.decodeIfPresent(IotClientTypes.AwsJobAbortCriteriaAbortAction.self, forKey: .action)
        action = actionDecoded
        let thresholdPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .thresholdPercentage)
        thresholdPercentage = thresholdPercentageDecoded
        let minNumberOfExecutedThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minNumberOfExecutedThings)
        minNumberOfExecutedThings = minNumberOfExecutedThingsDecoded
    }
}

extension IotClientTypes.AwsJobAbortCriteria: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsJobAbortCriteria(action: \(Swift.String(describing: action)), failureType: \(Swift.String(describing: failureType)), minNumberOfExecutedThings: \(Swift.String(describing: minNumberOfExecutedThings)), thresholdPercentage: \(Swift.String(describing: thresholdPercentage)))"}
}

extension IotClientTypes {
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    public struct AwsJobAbortCriteria: Swift.Equatable {
        /// <p>The type of job action to take to initiate the job abort.</p>
        public let action: IotClientTypes.AwsJobAbortCriteriaAbortAction?
        /// <p>The type of job execution failures that can initiate a job abort.</p>
        public let failureType: IotClientTypes.AwsJobAbortCriteriaFailureType?
        /// <p>The minimum number of things which must receive job execution notifications before the job
        ///           can be aborted.</p>
        public let minNumberOfExecutedThings: Swift.Int?
        /// <p>The minimum percentage of job execution failures that must occur to initiate the job abort.</p>
        ///          <p>AWS IoT supports up to two digits after the decimal (for example, 10.9 and 10.99, but not 10.999).</p>
        public let thresholdPercentage: Swift.Double?

        public init (
            action: IotClientTypes.AwsJobAbortCriteriaAbortAction? = nil,
            failureType: IotClientTypes.AwsJobAbortCriteriaFailureType? = nil,
            minNumberOfExecutedThings: Swift.Int? = nil,
            thresholdPercentage: Swift.Double? = nil
        )
        {
            self.action = action
            self.failureType = failureType
            self.minNumberOfExecutedThings = minNumberOfExecutedThings
            self.thresholdPercentage = thresholdPercentage
        }
    }

}

extension IotClientTypes {
    public enum AwsJobAbortCriteriaAbortAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancel
        case sdkUnknown(Swift.String)

        public static var allCases: [AwsJobAbortCriteriaAbortAction] {
            return [
                .cancel,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancel: return "CANCEL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AwsJobAbortCriteriaAbortAction(rawValue: rawValue) ?? AwsJobAbortCriteriaAbortAction.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes {
    public enum AwsJobAbortCriteriaFailureType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case failed
        case rejected
        case timedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [AwsJobAbortCriteriaFailureType] {
            return [
                .all,
                .failed,
                .rejected,
                .timedOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .failed: return "FAILED"
            case .rejected: return "REJECTED"
            case .timedOut: return "TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AwsJobAbortCriteriaFailureType(rawValue: rawValue) ?? AwsJobAbortCriteriaFailureType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.AwsJobExecutionsRolloutConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exponentialRate
        case maximumPerMinute
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exponentialRate = exponentialRate {
            try encodeContainer.encode(exponentialRate, forKey: .exponentialRate)
        }
        if let maximumPerMinute = maximumPerMinute {
            try encodeContainer.encode(maximumPerMinute, forKey: .maximumPerMinute)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumPerMinuteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPerMinute)
        maximumPerMinute = maximumPerMinuteDecoded
        let exponentialRateDecoded = try containerValues.decodeIfPresent(IotClientTypes.AwsJobExponentialRolloutRate.self, forKey: .exponentialRate)
        exponentialRate = exponentialRateDecoded
    }
}

extension IotClientTypes.AwsJobExecutionsRolloutConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsJobExecutionsRolloutConfig(exponentialRate: \(Swift.String(describing: exponentialRate)), maximumPerMinute: \(Swift.String(describing: maximumPerMinute)))"}
}

extension IotClientTypes {
    /// <p>Configuration for the rollout of OTA updates.</p>
    public struct AwsJobExecutionsRolloutConfig: Swift.Equatable {
        /// <p>The rate of increase for a job rollout. This parameter allows you to define an exponential rate
        ///             increase for a job rollout.</p>
        public let exponentialRate: IotClientTypes.AwsJobExponentialRolloutRate?
        /// <p>The maximum number of OTA update job executions started per minute.</p>
        public let maximumPerMinute: Swift.Int?

        public init (
            exponentialRate: IotClientTypes.AwsJobExponentialRolloutRate? = nil,
            maximumPerMinute: Swift.Int? = nil
        )
        {
            self.exponentialRate = exponentialRate
            self.maximumPerMinute = maximumPerMinute
        }
    }

}

extension IotClientTypes.AwsJobExponentialRolloutRate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseRatePerMinute
        case incrementFactor
        case rateIncreaseCriteria
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseRatePerMinute = baseRatePerMinute {
            try encodeContainer.encode(baseRatePerMinute, forKey: .baseRatePerMinute)
        }
        if incrementFactor != 0.0 {
            try encodeContainer.encode(incrementFactor, forKey: .incrementFactor)
        }
        if let rateIncreaseCriteria = rateIncreaseCriteria {
            try encodeContainer.encode(rateIncreaseCriteria, forKey: .rateIncreaseCriteria)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baseRatePerMinuteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .baseRatePerMinute)
        baseRatePerMinute = baseRatePerMinuteDecoded
        let incrementFactorDecoded = try containerValues.decode(Swift.Double.self, forKey: .incrementFactor)
        incrementFactor = incrementFactorDecoded
        let rateIncreaseCriteriaDecoded = try containerValues.decodeIfPresent(IotClientTypes.AwsJobRateIncreaseCriteria.self, forKey: .rateIncreaseCriteria)
        rateIncreaseCriteria = rateIncreaseCriteriaDecoded
    }
}

extension IotClientTypes.AwsJobExponentialRolloutRate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsJobExponentialRolloutRate(baseRatePerMinute: \(Swift.String(describing: baseRatePerMinute)), incrementFactor: \(Swift.String(describing: incrementFactor)), rateIncreaseCriteria: \(Swift.String(describing: rateIncreaseCriteria)))"}
}

extension IotClientTypes {
    /// <p>The rate of increase for a job rollout. This parameter allows you to define an exponential rate
    ///             increase for a job rollout.</p>
    public struct AwsJobExponentialRolloutRate: Swift.Equatable {
        /// <p>The minimum number of things that will be notified of a pending job, per minute, at the start
        ///             of the job rollout. This is the initial rate of the rollout.</p>
        public let baseRatePerMinute: Swift.Int?
        /// <p>The rate of increase for a job rollout. The number of things notified is multiplied by this
        ///             factor.</p>
        public let incrementFactor: Swift.Double
        /// <p>The criteria to initiate the increase in rate of rollout for a job.</p>
        ///         <p>AWS IoT supports up to one digit after the decimal (for example, 1.5, but not 1.55).</p>
        public let rateIncreaseCriteria: IotClientTypes.AwsJobRateIncreaseCriteria?

        public init (
            baseRatePerMinute: Swift.Int? = nil,
            incrementFactor: Swift.Double = 0.0,
            rateIncreaseCriteria: IotClientTypes.AwsJobRateIncreaseCriteria? = nil
        )
        {
            self.baseRatePerMinute = baseRatePerMinute
            self.incrementFactor = incrementFactor
            self.rateIncreaseCriteria = rateIncreaseCriteria
        }
    }

}

extension IotClientTypes.AwsJobPresignedUrlConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expiresInSec
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expiresInSec = expiresInSec {
            try encodeContainer.encode(expiresInSec, forKey: .expiresInSec)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expiresInSecDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expiresInSec)
        expiresInSec = expiresInSecDecoded
    }
}

extension IotClientTypes.AwsJobPresignedUrlConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsJobPresignedUrlConfig(expiresInSec: \(Swift.String(describing: expiresInSec)))"}
}

extension IotClientTypes {
    /// <p>Configuration information for pre-signed URLs. Valid when <code>protocols</code>
    ///            contains HTTP.</p>
    public struct AwsJobPresignedUrlConfig: Swift.Equatable {
        /// <p>How long (in seconds) pre-signed URLs are valid. Valid values are 60 - 3600, the default value is 1800
        ///             seconds. Pre-signed URLs are generated when a request for the job document is received.</p>
        public let expiresInSec: Swift.Int?

        public init (
            expiresInSec: Swift.Int? = nil
        )
        {
            self.expiresInSec = expiresInSec
        }
    }

}

extension IotClientTypes.AwsJobRateIncreaseCriteria: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numberOfNotifiedThings
        case numberOfSucceededThings
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let numberOfNotifiedThings = numberOfNotifiedThings {
            try encodeContainer.encode(numberOfNotifiedThings, forKey: .numberOfNotifiedThings)
        }
        if let numberOfSucceededThings = numberOfSucceededThings {
            try encodeContainer.encode(numberOfSucceededThings, forKey: .numberOfSucceededThings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numberOfNotifiedThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNotifiedThings)
        numberOfNotifiedThings = numberOfNotifiedThingsDecoded
        let numberOfSucceededThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfSucceededThings)
        numberOfSucceededThings = numberOfSucceededThingsDecoded
    }
}

extension IotClientTypes.AwsJobRateIncreaseCriteria: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsJobRateIncreaseCriteria(numberOfNotifiedThings: \(Swift.String(describing: numberOfNotifiedThings)), numberOfSucceededThings: \(Swift.String(describing: numberOfSucceededThings)))"}
}

extension IotClientTypes {
    /// <p>The criteria to initiate the increase in rate of rollout for a job.</p>
    public struct AwsJobRateIncreaseCriteria: Swift.Equatable {
        /// <p>When this number of things have been notified, it will initiate an increase in the rollout
        ///             rate.</p>
        public let numberOfNotifiedThings: Swift.Int?
        /// <p>When this number of things have succeeded in their job execution, it will initiate an
        ///             increase in the rollout rate.</p>
        public let numberOfSucceededThings: Swift.Int?

        public init (
            numberOfNotifiedThings: Swift.Int? = nil,
            numberOfSucceededThings: Swift.Int? = nil
        )
        {
            self.numberOfNotifiedThings = numberOfNotifiedThings
            self.numberOfSucceededThings = numberOfSucceededThings
        }
    }

}

extension IotClientTypes.AwsJobTimeoutConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inProgressTimeoutInMinutes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inProgressTimeoutInMinutes = inProgressTimeoutInMinutes {
            try encodeContainer.encode(inProgressTimeoutInMinutes, forKey: .inProgressTimeoutInMinutes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inProgressTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inProgressTimeoutInMinutes)
        inProgressTimeoutInMinutes = inProgressTimeoutInMinutesDecoded
    }
}

extension IotClientTypes.AwsJobTimeoutConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsJobTimeoutConfig(inProgressTimeoutInMinutes: \(Swift.String(describing: inProgressTimeoutInMinutes)))"}
}

extension IotClientTypes {
    /// <p>Specifies the amount of time each device has to finish its execution of the job.  A timer is
    ///             started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution
    ///             status is not set to another terminal state before the timer expires, it will be automatically
    ///             set to <code>TIMED_OUT</code>.</p>
    public struct AwsJobTimeoutConfig: Swift.Equatable {
        /// <p>Specifies the amount of time, in minutes, this device has to finish execution of this job. The
        ///             timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes). The in progress
        ///             timer can't be updated and will apply to all job executions for the job. Whenever a job execution
        ///             remains in the IN_PROGRESS status for longer than this interval, the job execution will fail and
        ///             switch to the terminal <code>TIMED_OUT</code> status.</p>
        public let inProgressTimeoutInMinutes: Swift.Int?

        public init (
            inProgressTimeoutInMinutes: Swift.Int? = nil
        )
        {
            self.inProgressTimeoutInMinutes = inProgressTimeoutInMinutes
        }
    }

}

extension IotClientTypes.Behavior: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case criteria
        case metric
        case metricDimension
        case name
        case suppressAlerts
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let criteria = criteria {
            try encodeContainer.encode(criteria, forKey: .criteria)
        }
        if let metric = metric {
            try encodeContainer.encode(metric, forKey: .metric)
        }
        if let metricDimension = metricDimension {
            try encodeContainer.encode(metricDimension, forKey: .metricDimension)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let suppressAlerts = suppressAlerts {
            try encodeContainer.encode(suppressAlerts, forKey: .suppressAlerts)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let metricDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metric)
        metric = metricDecoded
        let metricDimensionDecoded = try containerValues.decodeIfPresent(IotClientTypes.MetricDimension.self, forKey: .metricDimension)
        metricDimension = metricDimensionDecoded
        let criteriaDecoded = try containerValues.decodeIfPresent(IotClientTypes.BehaviorCriteria.self, forKey: .criteria)
        criteria = criteriaDecoded
        let suppressAlertsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .suppressAlerts)
        suppressAlerts = suppressAlertsDecoded
    }
}

extension IotClientTypes.Behavior: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Behavior(criteria: \(Swift.String(describing: criteria)), metric: \(Swift.String(describing: metric)), metricDimension: \(Swift.String(describing: metricDimension)), name: \(Swift.String(describing: name)), suppressAlerts: \(Swift.String(describing: suppressAlerts)))"}
}

extension IotClientTypes {
    /// <p>A Device Defender security profile behavior.</p>
    public struct Behavior: Swift.Equatable {
        /// <p>The criteria that determine if a device is behaving normally in regard to
        ///           the <code>metric</code>.</p>
        public let criteria: IotClientTypes.BehaviorCriteria?
        /// <p>What is measured by the behavior.</p>
        public let metric: Swift.String?
        /// <p>The dimension for a metric in your behavior. For example, using a
        ///                 <code>TOPIC_FILTER</code> dimension, you can narrow down the scope of the metric to only MQTT topics where the name matches the pattern specified in the dimension. This can't be used with custom metrics.</p>
        public let metricDimension: IotClientTypes.MetricDimension?
        /// <p>The name
        ///       you've given to the behavior.</p>
        public let name: Swift.String?
        /// <p>
        ///             Suppresses alerts.
        ///         </p>
        public let suppressAlerts: Swift.Bool?

        public init (
            criteria: IotClientTypes.BehaviorCriteria? = nil,
            metric: Swift.String? = nil,
            metricDimension: IotClientTypes.MetricDimension? = nil,
            name: Swift.String? = nil,
            suppressAlerts: Swift.Bool? = nil
        )
        {
            self.criteria = criteria
            self.metric = metric
            self.metricDimension = metricDimension
            self.name = name
            self.suppressAlerts = suppressAlerts
        }
    }

}

extension IotClientTypes.BehaviorCriteria: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparisonOperator
        case consecutiveDatapointsToAlarm
        case consecutiveDatapointsToClear
        case durationSeconds
        case mlDetectionConfig
        case statisticalThreshold
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let consecutiveDatapointsToAlarm = consecutiveDatapointsToAlarm {
            try encodeContainer.encode(consecutiveDatapointsToAlarm, forKey: .consecutiveDatapointsToAlarm)
        }
        if let consecutiveDatapointsToClear = consecutiveDatapointsToClear {
            try encodeContainer.encode(consecutiveDatapointsToClear, forKey: .consecutiveDatapointsToClear)
        }
        if let durationSeconds = durationSeconds {
            try encodeContainer.encode(durationSeconds, forKey: .durationSeconds)
        }
        if let mlDetectionConfig = mlDetectionConfig {
            try encodeContainer.encode(mlDetectionConfig, forKey: .mlDetectionConfig)
        }
        if let statisticalThreshold = statisticalThreshold {
            try encodeContainer.encode(statisticalThreshold, forKey: .statisticalThreshold)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(IotClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let valueDecoded = try containerValues.decodeIfPresent(IotClientTypes.MetricValue.self, forKey: .value)
        value = valueDecoded
        let durationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationSeconds)
        durationSeconds = durationSecondsDecoded
        let consecutiveDatapointsToAlarmDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .consecutiveDatapointsToAlarm)
        consecutiveDatapointsToAlarm = consecutiveDatapointsToAlarmDecoded
        let consecutiveDatapointsToClearDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .consecutiveDatapointsToClear)
        consecutiveDatapointsToClear = consecutiveDatapointsToClearDecoded
        let statisticalThresholdDecoded = try containerValues.decodeIfPresent(IotClientTypes.StatisticalThreshold.self, forKey: .statisticalThreshold)
        statisticalThreshold = statisticalThresholdDecoded
        let mlDetectionConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.MachineLearningDetectionConfig.self, forKey: .mlDetectionConfig)
        mlDetectionConfig = mlDetectionConfigDecoded
    }
}

extension IotClientTypes.BehaviorCriteria: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BehaviorCriteria(comparisonOperator: \(Swift.String(describing: comparisonOperator)), consecutiveDatapointsToAlarm: \(Swift.String(describing: consecutiveDatapointsToAlarm)), consecutiveDatapointsToClear: \(Swift.String(describing: consecutiveDatapointsToClear)), durationSeconds: \(Swift.String(describing: durationSeconds)), mlDetectionConfig: \(Swift.String(describing: mlDetectionConfig)), statisticalThreshold: \(Swift.String(describing: statisticalThreshold)), value: \(Swift.String(describing: value)))"}
}

extension IotClientTypes {
    /// <p>The criteria by which the behavior is determined to be normal.</p>
    public struct BehaviorCriteria: Swift.Equatable {
        /// <p>The operator that relates the thing measured (<code>metric</code>) to the criteria
        ///           (containing a <code>value</code> or <code>statisticalThreshold</code>). Valid operators include:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>string-list</code>: <code>in-set</code> and <code>not-in-set</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>number-list</code>: <code>in-set</code> and <code>not-in-set</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>ip-address-list</code>: <code>in-cidr-set</code> and <code>not-in-cidr-set</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>number</code>: <code>less-than</code>, <code>less-than-equals</code>, <code>greater-than</code>, and <code>greater-than-equals</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let comparisonOperator: IotClientTypes.ComparisonOperator?
        /// <p>If a device is in violation of the behavior for the specified number of consecutive
        ///           datapoints, an alarm occurs. If not specified, the default is 1.</p>
        public let consecutiveDatapointsToAlarm: Swift.Int?
        /// <p>If an alarm has occurred and the offending device is no longer in violation of the behavior
        ///           for the specified number of consecutive datapoints, the alarm is cleared. If not specified,
        ///           the default is 1.</p>
        public let consecutiveDatapointsToClear: Swift.Int?
        /// <p>Use this to specify the time duration over which the behavior is evaluated, for those criteria that
        ///       have a time dimension (for example, <code>NUM_MESSAGES_SENT</code>). For a
        ///         <code>statisticalThreshhold</code> metric comparison, measurements from all devices are
        ///       accumulated over this time duration before being used to calculate percentiles, and later,
        ///       measurements from an individual device are also accumulated over this time duration before
        ///       being given a percentile rank. Cannot be used with list-based metric datatypes.</p>
        public let durationSeconds: Swift.Int?
        /// <p>
        ///             The configuration of an ML Detect
        ///         </p>
        public let mlDetectionConfig: IotClientTypes.MachineLearningDetectionConfig?
        /// <p>A statistical ranking (percentile)that
        ///       indicates a threshold value by which a behavior is determined to be in compliance or in
        ///       violation of the behavior.</p>
        public let statisticalThreshold: IotClientTypes.StatisticalThreshold?
        /// <p>The value to be compared with the <code>metric</code>.</p>
        public let value: IotClientTypes.MetricValue?

        public init (
            comparisonOperator: IotClientTypes.ComparisonOperator? = nil,
            consecutiveDatapointsToAlarm: Swift.Int? = nil,
            consecutiveDatapointsToClear: Swift.Int? = nil,
            durationSeconds: Swift.Int? = nil,
            mlDetectionConfig: IotClientTypes.MachineLearningDetectionConfig? = nil,
            statisticalThreshold: IotClientTypes.StatisticalThreshold? = nil,
            value: IotClientTypes.MetricValue? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.consecutiveDatapointsToAlarm = consecutiveDatapointsToAlarm
            self.consecutiveDatapointsToClear = consecutiveDatapointsToClear
            self.durationSeconds = durationSeconds
            self.mlDetectionConfig = mlDetectionConfig
            self.statisticalThreshold = statisticalThreshold
            self.value = value
        }
    }

}

extension IotClientTypes {
    public enum BehaviorCriteriaType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case machineLearning
        case `static`
        case statistical
        case sdkUnknown(Swift.String)

        public static var allCases: [BehaviorCriteriaType] {
            return [
                .machineLearning,
                .static,
                .statistical,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .machineLearning: return "MACHINE_LEARNING"
            case .static: return "STATIC"
            case .statistical: return "STATISTICAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BehaviorCriteriaType(rawValue: rawValue) ?? BehaviorCriteriaType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.BehaviorModelTrainingSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorName
        case datapointsCollectionPercentage
        case lastModelRefreshDate
        case modelStatus
        case securityProfileName
        case trainingDataCollectionStartDate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behaviorName = behaviorName {
            try encodeContainer.encode(behaviorName, forKey: .behaviorName)
        }
        if let datapointsCollectionPercentage = datapointsCollectionPercentage {
            try encodeContainer.encode(datapointsCollectionPercentage, forKey: .datapointsCollectionPercentage)
        }
        if let lastModelRefreshDate = lastModelRefreshDate {
            try encodeContainer.encode(lastModelRefreshDate.timeIntervalSince1970, forKey: .lastModelRefreshDate)
        }
        if let modelStatus = modelStatus {
            try encodeContainer.encode(modelStatus.rawValue, forKey: .modelStatus)
        }
        if let securityProfileName = securityProfileName {
            try encodeContainer.encode(securityProfileName, forKey: .securityProfileName)
        }
        if let trainingDataCollectionStartDate = trainingDataCollectionStartDate {
            try encodeContainer.encode(trainingDataCollectionStartDate.timeIntervalSince1970, forKey: .trainingDataCollectionStartDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityProfileName)
        securityProfileName = securityProfileNameDecoded
        let behaviorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .behaviorName)
        behaviorName = behaviorNameDecoded
        let trainingDataCollectionStartDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingDataCollectionStartDate)
        trainingDataCollectionStartDate = trainingDataCollectionStartDateDecoded
        let modelStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.ModelStatus.self, forKey: .modelStatus)
        modelStatus = modelStatusDecoded
        let datapointsCollectionPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .datapointsCollectionPercentage)
        datapointsCollectionPercentage = datapointsCollectionPercentageDecoded
        let lastModelRefreshDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModelRefreshDate)
        lastModelRefreshDate = lastModelRefreshDateDecoded
    }
}

extension IotClientTypes.BehaviorModelTrainingSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BehaviorModelTrainingSummary(behaviorName: \(Swift.String(describing: behaviorName)), datapointsCollectionPercentage: \(Swift.String(describing: datapointsCollectionPercentage)), lastModelRefreshDate: \(Swift.String(describing: lastModelRefreshDate)), modelStatus: \(Swift.String(describing: modelStatus)), securityProfileName: \(Swift.String(describing: securityProfileName)), trainingDataCollectionStartDate: \(Swift.String(describing: trainingDataCollectionStartDate)))"}
}

extension IotClientTypes {
    /// <p>
    ///             The summary of an ML Detect behavior model.
    ///         </p>
    public struct BehaviorModelTrainingSummary: Swift.Equatable {
        /// <p>
        ///             The name of the behavior.
        ///         </p>
        public let behaviorName: Swift.String?
        /// <p>
        ///             The percentage of datapoints collected.
        ///         </p>
        public let datapointsCollectionPercentage: Swift.Double?
        /// <p>
        ///             The date the model was last refreshed.
        ///         </p>
        public let lastModelRefreshDate: ClientRuntime.Date?
        /// <p>
        ///             The status of the behavior model.
        ///         </p>
        public let modelStatus: IotClientTypes.ModelStatus?
        /// <p>
        ///             The name of the security profile.
        ///         </p>
        public let securityProfileName: Swift.String?
        /// <p>
        ///             The date a training model started collecting data.
        ///         </p>
        public let trainingDataCollectionStartDate: ClientRuntime.Date?

        public init (
            behaviorName: Swift.String? = nil,
            datapointsCollectionPercentage: Swift.Double? = nil,
            lastModelRefreshDate: ClientRuntime.Date? = nil,
            modelStatus: IotClientTypes.ModelStatus? = nil,
            securityProfileName: Swift.String? = nil,
            trainingDataCollectionStartDate: ClientRuntime.Date? = nil
        )
        {
            self.behaviorName = behaviorName
            self.datapointsCollectionPercentage = datapointsCollectionPercentage
            self.lastModelRefreshDate = lastModelRefreshDate
            self.modelStatus = modelStatus
            self.securityProfileName = securityProfileName
            self.trainingDataCollectionStartDate = trainingDataCollectionStartDate
        }
    }

}

extension IotClientTypes.BillingGroupMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension IotClientTypes.BillingGroupMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BillingGroupMetadata(creationDate: \(Swift.String(describing: creationDate)))"}
}

extension IotClientTypes {
    /// <p>Additional information about the billing group.</p>
    public struct BillingGroupMetadata: Swift.Equatable {
        /// <p>The date the billing group was created.</p>
        public let creationDate: ClientRuntime.Date?

        public init (
            creationDate: ClientRuntime.Date? = nil
        )
        {
            self.creationDate = creationDate
        }
    }

}

extension IotClientTypes.BillingGroupProperties: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingGroupDescription
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingGroupDescription = billingGroupDescription {
            try encodeContainer.encode(billingGroupDescription, forKey: .billingGroupDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let billingGroupDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupDescription)
        billingGroupDescription = billingGroupDescriptionDecoded
    }
}

extension IotClientTypes.BillingGroupProperties: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BillingGroupProperties(billingGroupDescription: \(Swift.String(describing: billingGroupDescription)))"}
}

extension IotClientTypes {
    /// <p>The properties of a billing group.</p>
    public struct BillingGroupProperties: Swift.Equatable {
        /// <p>The description of the billing group.</p>
        public let billingGroupDescription: Swift.String?

        public init (
            billingGroupDescription: Swift.String? = nil
        )
        {
            self.billingGroupDescription = billingGroupDescription
        }
    }

}

extension IotClientTypes.CACertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn
        case certificateId
        case creationDate
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let certificateId = certificateId {
            try encodeContainer.encode(certificateId, forKey: .certificateId)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.CACertificateStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension IotClientTypes.CACertificate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CACertificate(certificateArn: \(Swift.String(describing: certificateArn)), certificateId: \(Swift.String(describing: certificateId)), creationDate: \(Swift.String(describing: creationDate)), status: \(Swift.String(describing: status)))"}
}

extension IotClientTypes {
    /// <p>A CA certificate.</p>
    public struct CACertificate: Swift.Equatable {
        /// <p>The ARN of the CA certificate.</p>
        public let certificateArn: Swift.String?
        /// <p>The ID of the CA certificate.</p>
        public let certificateId: Swift.String?
        /// <p>The date the CA certificate was created.</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>The status of the CA certificate.</p>
        ///          <p>The status value REGISTER_INACTIVE is deprecated and should not be used.</p>
        public let status: IotClientTypes.CACertificateStatus?

        public init (
            certificateArn: Swift.String? = nil,
            certificateId: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            status: IotClientTypes.CACertificateStatus? = nil
        )
        {
            self.certificateArn = certificateArn
            self.certificateId = certificateId
            self.creationDate = creationDate
            self.status = status
        }
    }

}

extension IotClientTypes.CACertificateDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoRegistrationStatus
        case certificateArn
        case certificateId
        case certificatePem
        case creationDate
        case customerVersion
        case generationId
        case lastModifiedDate
        case ownedBy
        case status
        case validity
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoRegistrationStatus = autoRegistrationStatus {
            try encodeContainer.encode(autoRegistrationStatus.rawValue, forKey: .autoRegistrationStatus)
        }
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let certificateId = certificateId {
            try encodeContainer.encode(certificateId, forKey: .certificateId)
        }
        if let certificatePem = certificatePem {
            try encodeContainer.encode(certificatePem, forKey: .certificatePem)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let customerVersion = customerVersion {
            try encodeContainer.encode(customerVersion, forKey: .customerVersion)
        }
        if let generationId = generationId {
            try encodeContainer.encode(generationId, forKey: .generationId)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let ownedBy = ownedBy {
            try encodeContainer.encode(ownedBy, forKey: .ownedBy)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let validity = validity {
            try encodeContainer.encode(validity, forKey: .validity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.CACertificateStatus.self, forKey: .status)
        status = statusDecoded
        let certificatePemDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificatePem)
        certificatePem = certificatePemDecoded
        let ownedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownedBy)
        ownedBy = ownedByDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let autoRegistrationStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.AutoRegistrationStatus.self, forKey: .autoRegistrationStatus)
        autoRegistrationStatus = autoRegistrationStatusDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let customerVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .customerVersion)
        customerVersion = customerVersionDecoded
        let generationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .generationId)
        generationId = generationIdDecoded
        let validityDecoded = try containerValues.decodeIfPresent(IotClientTypes.CertificateValidity.self, forKey: .validity)
        validity = validityDecoded
    }
}

extension IotClientTypes.CACertificateDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CACertificateDescription(autoRegistrationStatus: \(Swift.String(describing: autoRegistrationStatus)), certificateArn: \(Swift.String(describing: certificateArn)), certificateId: \(Swift.String(describing: certificateId)), certificatePem: \(Swift.String(describing: certificatePem)), creationDate: \(Swift.String(describing: creationDate)), customerVersion: \(Swift.String(describing: customerVersion)), generationId: \(Swift.String(describing: generationId)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), ownedBy: \(Swift.String(describing: ownedBy)), status: \(Swift.String(describing: status)), validity: \(Swift.String(describing: validity)))"}
}

extension IotClientTypes {
    /// <p>Describes a CA certificate.</p>
    public struct CACertificateDescription: Swift.Equatable {
        /// <p>Whether the CA certificate configured for auto registration of device certificates.
        ///          Valid values are "ENABLE" and "DISABLE"</p>
        public let autoRegistrationStatus: IotClientTypes.AutoRegistrationStatus?
        /// <p>The CA certificate ARN.</p>
        public let certificateArn: Swift.String?
        /// <p>The CA certificate ID.</p>
        public let certificateId: Swift.String?
        /// <p>The CA certificate data, in PEM format.</p>
        public let certificatePem: Swift.String?
        /// <p>The date the CA certificate was created.</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>The customer version of the CA certificate.</p>
        public let customerVersion: Swift.Int?
        /// <p>The generation ID of the CA certificate.</p>
        public let generationId: Swift.String?
        /// <p>The date the CA certificate was last modified.</p>
        public let lastModifiedDate: ClientRuntime.Date?
        /// <p>The owner of the CA certificate.</p>
        public let ownedBy: Swift.String?
        /// <p>The status of a CA certificate.</p>
        public let status: IotClientTypes.CACertificateStatus?
        /// <p>When the CA certificate is valid.</p>
        public let validity: IotClientTypes.CertificateValidity?

        public init (
            autoRegistrationStatus: IotClientTypes.AutoRegistrationStatus? = nil,
            certificateArn: Swift.String? = nil,
            certificateId: Swift.String? = nil,
            certificatePem: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            customerVersion: Swift.Int? = nil,
            generationId: Swift.String? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            ownedBy: Swift.String? = nil,
            status: IotClientTypes.CACertificateStatus? = nil,
            validity: IotClientTypes.CertificateValidity? = nil
        )
        {
            self.autoRegistrationStatus = autoRegistrationStatus
            self.certificateArn = certificateArn
            self.certificateId = certificateId
            self.certificatePem = certificatePem
            self.creationDate = creationDate
            self.customerVersion = customerVersion
            self.generationId = generationId
            self.lastModifiedDate = lastModifiedDate
            self.ownedBy = ownedBy
            self.status = status
            self.validity = validity
        }
    }

}

extension IotClientTypes {
    public enum CACertificateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [CACertificateStatus] {
            return [
                .active,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CACertificateStatus(rawValue: rawValue) ?? CACertificateStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes {
    public enum CACertificateUpdateAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deactivate
        case sdkUnknown(Swift.String)

        public static var allCases: [CACertificateUpdateAction] {
            return [
                .deactivate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deactivate: return "DEACTIVATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CACertificateUpdateAction(rawValue: rawValue) ?? CACertificateUpdateAction.sdkUnknown(rawValue)
        }
    }
}

extension CancelAuditMitigationActionsTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelAuditMitigationActionsTaskInput(taskId: \(Swift.String(describing: taskId)))"}
}

extension CancelAuditMitigationActionsTaskInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct CancelAuditMitigationActionsTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelAuditMitigationActionsTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelAuditMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelAuditMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelAuditMitigationActionsTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelAuditMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelAuditMitigationActionsTaskOutputError>
}

public struct CancelAuditMitigationActionsTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelAuditMitigationActionsTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelAuditMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelAuditMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelAuditMitigationActionsTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelAuditMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelAuditMitigationActionsTaskOutputError>
}

public struct CancelAuditMitigationActionsTaskInput: Swift.Equatable {
    /// <p>The unique identifier for the task that you want to cancel. </p>
    public let taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct CancelAuditMitigationActionsTaskInputBody: Swift.Equatable {
}

extension CancelAuditMitigationActionsTaskInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CancelAuditMitigationActionsTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelAuditMitigationActionsTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelAuditMitigationActionsTaskOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelAuditMitigationActionsTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelAuditMitigationActionsTaskOutputResponse()"}
}

extension CancelAuditMitigationActionsTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CancelAuditMitigationActionsTaskOutputResponse: Swift.Equatable {

    public init() {}
}

struct CancelAuditMitigationActionsTaskOutputResponseBody: Swift.Equatable {
}

extension CancelAuditMitigationActionsTaskOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CancelAuditTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelAuditTaskInput(taskId: \(Swift.String(describing: taskId)))"}
}

extension CancelAuditTaskInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct CancelAuditTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelAuditTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelAuditTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelAuditTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelAuditTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelAuditTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelAuditTaskOutputError>
}

public struct CancelAuditTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelAuditTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelAuditTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelAuditTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelAuditTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelAuditTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelAuditTaskOutputError>
}

public struct CancelAuditTaskInput: Swift.Equatable {
    /// <p>The ID of the audit you want to cancel. You can only cancel an
    ///               audit that is "IN_PROGRESS".</p>
    public let taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct CancelAuditTaskInputBody: Swift.Equatable {
}

extension CancelAuditTaskInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CancelAuditTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelAuditTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelAuditTaskOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelAuditTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelAuditTaskOutputResponse()"}
}

extension CancelAuditTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CancelAuditTaskOutputResponse: Swift.Equatable {

    public init() {}
}

struct CancelAuditTaskOutputResponseBody: Swift.Equatable {
}

extension CancelAuditTaskOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CancelCertificateTransferInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelCertificateTransferInput(certificateId: \(Swift.String(describing: certificateId)))"}
}

extension CancelCertificateTransferInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct CancelCertificateTransferInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelCertificateTransferInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelCertificateTransferInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelCertificateTransferOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelCertificateTransferInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelCertificateTransferOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelCertificateTransferOutputError>
}

public struct CancelCertificateTransferInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelCertificateTransferInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelCertificateTransferInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelCertificateTransferOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelCertificateTransferInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelCertificateTransferOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelCertificateTransferOutputError>
}

/// <p>The input for the CancelCertificateTransfer operation.</p>
public struct CancelCertificateTransferInput: Swift.Equatable {
    /// <p>The ID of the certificate. (The last part of the certificate ARN contains the
    ///          certificate ID.)</p>
    public let certificateId: Swift.String?

    public init (
        certificateId: Swift.String? = nil
    )
    {
        self.certificateId = certificateId
    }
}

struct CancelCertificateTransferInputBody: Swift.Equatable {
}

extension CancelCertificateTransferInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CancelCertificateTransferOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelCertificateTransferOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransferAlreadyCompletedException" : self = .transferAlreadyCompletedException(try TransferAlreadyCompletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelCertificateTransferOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case transferAlreadyCompletedException(TransferAlreadyCompletedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelCertificateTransferOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelCertificateTransferOutputResponse()"}
}

extension CancelCertificateTransferOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CancelCertificateTransferOutputResponse: Swift.Equatable {

    public init() {}
}

struct CancelCertificateTransferOutputResponseBody: Swift.Equatable {
}

extension CancelCertificateTransferOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CancelDetectMitigationActionsTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelDetectMitigationActionsTaskInput(taskId: \(Swift.String(describing: taskId)))"}
}

extension CancelDetectMitigationActionsTaskInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct CancelDetectMitigationActionsTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelDetectMitigationActionsTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelDetectMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelDetectMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelDetectMitigationActionsTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelDetectMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelDetectMitigationActionsTaskOutputError>
}

public struct CancelDetectMitigationActionsTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelDetectMitigationActionsTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelDetectMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelDetectMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelDetectMitigationActionsTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelDetectMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelDetectMitigationActionsTaskOutputError>
}

public struct CancelDetectMitigationActionsTaskInput: Swift.Equatable {
    /// <p>
    ///       The unique identifier of the task.
    ///     </p>
    public let taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct CancelDetectMitigationActionsTaskInputBody: Swift.Equatable {
}

extension CancelDetectMitigationActionsTaskInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CancelDetectMitigationActionsTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelDetectMitigationActionsTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelDetectMitigationActionsTaskOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelDetectMitigationActionsTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelDetectMitigationActionsTaskOutputResponse()"}
}

extension CancelDetectMitigationActionsTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CancelDetectMitigationActionsTaskOutputResponse: Swift.Equatable {

    public init() {}
}

struct CancelDetectMitigationActionsTaskOutputResponseBody: Swift.Equatable {
}

extension CancelDetectMitigationActionsTaskOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CancelJobExecutionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelJobExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelJobExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelJobExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelJobExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelJobExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelJobExecutionOutputError>
}

extension CancelJobExecutionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelJobExecutionInput(expectedVersion: \(Swift.String(describing: expectedVersion)), force: \(Swift.String(describing: force)), jobId: \(Swift.String(describing: jobId)), statusDetails: \(Swift.String(describing: statusDetails)), thingName: \(Swift.String(describing: thingName)))"}
}

extension CancelJobExecutionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expectedVersion
        case statusDetails
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expectedVersion = expectedVersion {
            try encodeContainer.encode(expectedVersion, forKey: .expectedVersion)
        }
        if let statusDetails = statusDetails {
            var statusDetailsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .statusDetails)
            for (dictKey0, detailsmap0) in statusDetails {
                try statusDetailsContainer.encode(detailsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CancelJobExecutionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelJobExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelJobExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelJobExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelJobExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelJobExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelJobExecutionOutputError>
}

public struct CancelJobExecutionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelJobExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelJobExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelJobExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.force != false {
            let forceQueryItem = ClientRuntime.URLQueryItem(name: "force".urlPercentEncoding(), value: Swift.String(input.operationInput.force).urlPercentEncoding())
            input.builder.withQueryItem(forceQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelJobExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelJobExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelJobExecutionOutputError>
}

public struct CancelJobExecutionInput: Swift.Equatable {
    /// <p>(Optional) The expected current version of the job execution. Each time you update the job
    ///           execution, its version is incremented. If the version of the job execution stored in Jobs does
    ///           not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that
    ///           contains the current job execution status data is returned. (This makes it unnecessary to
    ///           perform a separate DescribeJobExecution request in order to obtain the job execution status
    ///           data.)</p>
    public let expectedVersion: Swift.Int?
    /// <p>(Optional) If <code>true</code> the job execution will be canceled if it has status
    ///           IN_PROGRESS or QUEUED, otherwise the job execution will be canceled only if it has status
    ///           QUEUED. If you attempt to cancel a job execution that is IN_PROGRESS, and you do not set
    ///           <code>force</code> to <code>true</code>, then an <code>InvalidStateTransitionException</code>
    ///           will be thrown. The default is <code>false</code>.</p>
    ///         <p>Canceling a job execution which is "IN_PROGRESS", will cause the device to be unable
    ///           to update the job execution status.  Use caution and ensure that the device is able to
    ///           recover to a valid state.</p>
    public let force: Swift.Bool
    /// <p>The ID of the job to be canceled.</p>
    public let jobId: Swift.String?
    /// <p>A collection of name/value pairs that describe the status of the job execution. If not
    ///           specified, the statusDetails are unchanged. You can specify at most 10 name/value pairs.</p>
    public let statusDetails: [Swift.String:Swift.String]?
    /// <p>The name of the thing whose execution of the job will be canceled.</p>
    public let thingName: Swift.String?

    public init (
        expectedVersion: Swift.Int? = nil,
        force: Swift.Bool = false,
        jobId: Swift.String? = nil,
        statusDetails: [Swift.String:Swift.String]? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.expectedVersion = expectedVersion
        self.force = force
        self.jobId = jobId
        self.statusDetails = statusDetails
        self.thingName = thingName
    }
}

struct CancelJobExecutionInputBody: Swift.Equatable {
    public let expectedVersion: Swift.Int?
    public let statusDetails: [Swift.String:Swift.String]?
}

extension CancelJobExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expectedVersion
        case statusDetails
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expectedVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expectedVersion)
        expectedVersion = expectedVersionDecoded
        let statusDetailsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .statusDetails)
        var statusDetailsDecoded0: [Swift.String:Swift.String]? = nil
        if let statusDetailsContainer = statusDetailsContainer {
            statusDetailsDecoded0 = [Swift.String:Swift.String]()
            for (key0, detailsvalue0) in statusDetailsContainer {
                if let detailsvalue0 = detailsvalue0 {
                    statusDetailsDecoded0?[key0] = detailsvalue0
                }
            }
        }
        statusDetails = statusDetailsDecoded0
    }
}

extension CancelJobExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelJobExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidStateTransitionException" : self = .invalidStateTransitionException(try InvalidStateTransitionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionConflictException" : self = .versionConflictException(try VersionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelJobExecutionOutputError: Swift.Error, Swift.Equatable {
    case invalidRequestException(InvalidRequestException)
    case invalidStateTransitionException(InvalidStateTransitionException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case versionConflictException(VersionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelJobExecutionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelJobExecutionOutputResponse()"}
}

extension CancelJobExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CancelJobExecutionOutputResponse: Swift.Equatable {

    public init() {}
}

struct CancelJobExecutionOutputResponseBody: Swift.Equatable {
}

extension CancelJobExecutionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CancelJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelJobOutputError>
}

extension CancelJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelJobInput(comment: \(Swift.String(describing: comment)), force: \(Swift.String(describing: force)), jobId: \(Swift.String(describing: jobId)), reasonCode: \(Swift.String(describing: reasonCode)))"}
}

extension CancelJobInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment
        case reasonCode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comment = comment {
            try encodeContainer.encode(comment, forKey: .comment)
        }
        if let reasonCode = reasonCode {
            try encodeContainer.encode(reasonCode, forKey: .reasonCode)
        }
    }
}

public struct CancelJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelJobOutputError>
}

public struct CancelJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.force != false {
            let forceQueryItem = ClientRuntime.URLQueryItem(name: "force".urlPercentEncoding(), value: Swift.String(input.operationInput.force).urlPercentEncoding())
            input.builder.withQueryItem(forceQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelJobOutputError>
}

public struct CancelJobInput: Swift.Equatable {
    /// <p>An optional comment string describing why the job was canceled.</p>
    public let comment: Swift.String?
    /// <p>(Optional) If <code>true</code> job executions with status "IN_PROGRESS" and "QUEUED"
    ///           are canceled, otherwise only job executions with status "QUEUED" are canceled. The default
    ///           is <code>false</code>.</p>
    ///         <p>Canceling a job which is "IN_PROGRESS", will cause a device which is executing
    ///           the job to be unable to update the job execution status.  Use caution and ensure that each
    ///           device executing a job which is canceled is able to recover to a valid state.</p>
    public let force: Swift.Bool
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    public let jobId: Swift.String?
    /// <p>(Optional)A reason code string that explains why the job was canceled.</p>
    public let reasonCode: Swift.String?

    public init (
        comment: Swift.String? = nil,
        force: Swift.Bool = false,
        jobId: Swift.String? = nil,
        reasonCode: Swift.String? = nil
    )
    {
        self.comment = comment
        self.force = force
        self.jobId = jobId
        self.reasonCode = reasonCode
    }
}

struct CancelJobInputBody: Swift.Equatable {
    public let reasonCode: Swift.String?
    public let comment: Swift.String?
}

extension CancelJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment
        case reasonCode
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reasonCode)
        reasonCode = reasonCodeDecoded
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
    }
}

extension CancelJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelJobOutputError: Swift.Error, Swift.Equatable {
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelJobOutputResponse(description: \(Swift.String(describing: description)), jobArn: \(Swift.String(describing: jobArn)), jobId: \(Swift.String(describing: jobId)))"}
}

extension CancelJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CancelJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.description = output.description
            self.jobArn = output.jobArn
            self.jobId = output.jobId
        } else {
            self.description = nil
            self.jobArn = nil
            self.jobId = nil
        }
    }
}

public struct CancelJobOutputResponse: Swift.Equatable {
    /// <p>A short text description of the job.</p>
    public let description: Swift.String?
    /// <p>The job ARN.</p>
    public let jobArn: Swift.String?
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    public let jobId: Swift.String?

    public init (
        description: Swift.String? = nil,
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.description = description
        self.jobArn = jobArn
        self.jobId = jobId
    }
}

struct CancelJobOutputResponseBody: Swift.Equatable {
    public let jobArn: Swift.String?
    public let jobId: Swift.String?
    public let description: Swift.String?
}

extension CancelJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case jobArn
        case jobId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension IotClientTypes {
    public enum CannedAccessControlList: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case authenticatedread
        case awsexecread
        case bucketownerfullcontrol
        case bucketownerread
        case logdeliverywrite
        case `private`
        case publicread
        case publicreadwrite
        case sdkUnknown(Swift.String)

        public static var allCases: [CannedAccessControlList] {
            return [
                .authenticatedread,
                .awsexecread,
                .bucketownerfullcontrol,
                .bucketownerread,
                .logdeliverywrite,
                .private,
                .publicread,
                .publicreadwrite,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .authenticatedread: return "authenticated-read"
            case .awsexecread: return "aws-exec-read"
            case .bucketownerfullcontrol: return "bucket-owner-full-control"
            case .bucketownerread: return "bucket-owner-read"
            case .logdeliverywrite: return "log-delivery-write"
            case .private: return "private"
            case .publicread: return "public-read"
            case .publicreadwrite: return "public-read-write"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CannedAccessControlList(rawValue: rawValue) ?? CannedAccessControlList.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.Certificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn
        case certificateId
        case certificateMode
        case creationDate
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let certificateId = certificateId {
            try encodeContainer.encode(certificateId, forKey: .certificateId)
        }
        if let certificateMode = certificateMode {
            try encodeContainer.encode(certificateMode.rawValue, forKey: .certificateMode)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.CertificateStatus.self, forKey: .status)
        status = statusDecoded
        let certificateModeDecoded = try containerValues.decodeIfPresent(IotClientTypes.CertificateMode.self, forKey: .certificateMode)
        certificateMode = certificateModeDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension IotClientTypes.Certificate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Certificate(certificateArn: \(Swift.String(describing: certificateArn)), certificateId: \(Swift.String(describing: certificateId)), certificateMode: \(Swift.String(describing: certificateMode)), creationDate: \(Swift.String(describing: creationDate)), status: \(Swift.String(describing: status)))"}
}

extension IotClientTypes {
    /// <p>Information about a certificate.</p>
    public struct Certificate: Swift.Equatable {
        /// <p>The ARN of the certificate.</p>
        public let certificateArn: Swift.String?
        /// <p>The ID of the certificate. (The last part of the certificate ARN contains the
        ///          certificate ID.)</p>
        public let certificateId: Swift.String?
        /// <p>The mode of the certificate.</p>
        public let certificateMode: IotClientTypes.CertificateMode?
        /// <p>The date and time the certificate was created.</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>The status of the certificate.</p>
        ///          <p>The status value REGISTER_INACTIVE is deprecated and should not be used.</p>
        public let status: IotClientTypes.CertificateStatus?

        public init (
            certificateArn: Swift.String? = nil,
            certificateId: Swift.String? = nil,
            certificateMode: IotClientTypes.CertificateMode? = nil,
            creationDate: ClientRuntime.Date? = nil,
            status: IotClientTypes.CertificateStatus? = nil
        )
        {
            self.certificateArn = certificateArn
            self.certificateId = certificateId
            self.certificateMode = certificateMode
            self.creationDate = creationDate
            self.status = status
        }
    }

}

extension CertificateConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CertificateConflictException(message: \(Swift.String(describing: message)))"}
}

extension CertificateConflictException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CertificateConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Unable to verify the CA certificate used to sign the device certificate you are
///          attempting to register. This is happens when you have registered more than one CA
///          certificate that has the same subject field and public key.</p>
public struct CertificateConflictException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CertificateConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension CertificateConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes.CertificateDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caCertificateId
        case certificateArn
        case certificateId
        case certificateMode
        case certificatePem
        case creationDate
        case customerVersion
        case generationId
        case lastModifiedDate
        case ownedBy
        case previousOwnedBy
        case status
        case transferData
        case validity
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let caCertificateId = caCertificateId {
            try encodeContainer.encode(caCertificateId, forKey: .caCertificateId)
        }
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let certificateId = certificateId {
            try encodeContainer.encode(certificateId, forKey: .certificateId)
        }
        if let certificateMode = certificateMode {
            try encodeContainer.encode(certificateMode.rawValue, forKey: .certificateMode)
        }
        if let certificatePem = certificatePem {
            try encodeContainer.encode(certificatePem, forKey: .certificatePem)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let customerVersion = customerVersion {
            try encodeContainer.encode(customerVersion, forKey: .customerVersion)
        }
        if let generationId = generationId {
            try encodeContainer.encode(generationId, forKey: .generationId)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let ownedBy = ownedBy {
            try encodeContainer.encode(ownedBy, forKey: .ownedBy)
        }
        if let previousOwnedBy = previousOwnedBy {
            try encodeContainer.encode(previousOwnedBy, forKey: .previousOwnedBy)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let transferData = transferData {
            try encodeContainer.encode(transferData, forKey: .transferData)
        }
        if let validity = validity {
            try encodeContainer.encode(validity, forKey: .validity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let caCertificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caCertificateId)
        caCertificateId = caCertificateIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.CertificateStatus.self, forKey: .status)
        status = statusDecoded
        let certificatePemDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificatePem)
        certificatePem = certificatePemDecoded
        let ownedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownedBy)
        ownedBy = ownedByDecoded
        let previousOwnedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .previousOwnedBy)
        previousOwnedBy = previousOwnedByDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let customerVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .customerVersion)
        customerVersion = customerVersionDecoded
        let transferDataDecoded = try containerValues.decodeIfPresent(IotClientTypes.TransferData.self, forKey: .transferData)
        transferData = transferDataDecoded
        let generationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .generationId)
        generationId = generationIdDecoded
        let validityDecoded = try containerValues.decodeIfPresent(IotClientTypes.CertificateValidity.self, forKey: .validity)
        validity = validityDecoded
        let certificateModeDecoded = try containerValues.decodeIfPresent(IotClientTypes.CertificateMode.self, forKey: .certificateMode)
        certificateMode = certificateModeDecoded
    }
}

extension IotClientTypes.CertificateDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CertificateDescription(caCertificateId: \(Swift.String(describing: caCertificateId)), certificateArn: \(Swift.String(describing: certificateArn)), certificateId: \(Swift.String(describing: certificateId)), certificateMode: \(Swift.String(describing: certificateMode)), certificatePem: \(Swift.String(describing: certificatePem)), creationDate: \(Swift.String(describing: creationDate)), customerVersion: \(Swift.String(describing: customerVersion)), generationId: \(Swift.String(describing: generationId)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), ownedBy: \(Swift.String(describing: ownedBy)), previousOwnedBy: \(Swift.String(describing: previousOwnedBy)), status: \(Swift.String(describing: status)), transferData: \(Swift.String(describing: transferData)), validity: \(Swift.String(describing: validity)))"}
}

extension IotClientTypes {
    /// <p>Describes a certificate.</p>
    public struct CertificateDescription: Swift.Equatable {
        /// <p>The certificate ID of the CA certificate used to sign this certificate.</p>
        public let caCertificateId: Swift.String?
        /// <p>The ARN of the certificate.</p>
        public let certificateArn: Swift.String?
        /// <p>The ID of the certificate.</p>
        public let certificateId: Swift.String?
        /// <p>The mode of the certificate.</p>
        public let certificateMode: IotClientTypes.CertificateMode?
        /// <p>The certificate data, in PEM format.</p>
        public let certificatePem: Swift.String?
        /// <p>The date and time the certificate was created.</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>The customer version of the certificate.</p>
        public let customerVersion: Swift.Int?
        /// <p>The generation ID of the certificate.</p>
        public let generationId: Swift.String?
        /// <p>The date and time the certificate was last modified.</p>
        public let lastModifiedDate: ClientRuntime.Date?
        /// <p>The ID of the AWS account that owns the certificate.</p>
        public let ownedBy: Swift.String?
        /// <p>The ID of the AWS account of the previous owner of the certificate.</p>
        public let previousOwnedBy: Swift.String?
        /// <p>The status of the certificate.</p>
        public let status: IotClientTypes.CertificateStatus?
        /// <p>The transfer data.</p>
        public let transferData: IotClientTypes.TransferData?
        /// <p>When the certificate is valid.</p>
        public let validity: IotClientTypes.CertificateValidity?

        public init (
            caCertificateId: Swift.String? = nil,
            certificateArn: Swift.String? = nil,
            certificateId: Swift.String? = nil,
            certificateMode: IotClientTypes.CertificateMode? = nil,
            certificatePem: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            customerVersion: Swift.Int? = nil,
            generationId: Swift.String? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            ownedBy: Swift.String? = nil,
            previousOwnedBy: Swift.String? = nil,
            status: IotClientTypes.CertificateStatus? = nil,
            transferData: IotClientTypes.TransferData? = nil,
            validity: IotClientTypes.CertificateValidity? = nil
        )
        {
            self.caCertificateId = caCertificateId
            self.certificateArn = certificateArn
            self.certificateId = certificateId
            self.certificateMode = certificateMode
            self.certificatePem = certificatePem
            self.creationDate = creationDate
            self.customerVersion = customerVersion
            self.generationId = generationId
            self.lastModifiedDate = lastModifiedDate
            self.ownedBy = ownedBy
            self.previousOwnedBy = previousOwnedBy
            self.status = status
            self.transferData = transferData
            self.validity = validity
        }
    }

}

extension IotClientTypes {
    public enum CertificateMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `default`
        case sniOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateMode] {
            return [
                .default,
                .sniOnly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .sniOnly: return "SNI_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CertificateMode(rawValue: rawValue) ?? CertificateMode.sdkUnknown(rawValue)
        }
    }
}

extension CertificateStateException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CertificateStateException(message: \(Swift.String(describing: message)))"}
}

extension CertificateStateException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CertificateStateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The certificate operation is not allowed.</p>
public struct CertificateStateException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CertificateStateExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension CertificateStateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes {
    public enum CertificateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case inactive
        case pendingActivation
        case pendingTransfer
        case registerInactive
        case revoked
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateStatus] {
            return [
                .active,
                .inactive,
                .pendingActivation,
                .pendingTransfer,
                .registerInactive,
                .revoked,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case .pendingActivation: return "PENDING_ACTIVATION"
            case .pendingTransfer: return "PENDING_TRANSFER"
            case .registerInactive: return "REGISTER_INACTIVE"
            case .revoked: return "REVOKED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CertificateStatus(rawValue: rawValue) ?? CertificateStatus.sdkUnknown(rawValue)
        }
    }
}

extension CertificateValidationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CertificateValidationException(message: \(Swift.String(describing: message)))"}
}

extension CertificateValidationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CertificateValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The certificate is invalid.</p>
public struct CertificateValidationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Additional information about the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CertificateValidationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension CertificateValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes.CertificateValidity: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notAfter
        case notBefore
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notAfter = notAfter {
            try encodeContainer.encode(notAfter.timeIntervalSince1970, forKey: .notAfter)
        }
        if let notBefore = notBefore {
            try encodeContainer.encode(notBefore.timeIntervalSince1970, forKey: .notBefore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .notBefore)
        notBefore = notBeforeDecoded
        let notAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .notAfter)
        notAfter = notAfterDecoded
    }
}

extension IotClientTypes.CertificateValidity: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CertificateValidity(notAfter: \(Swift.String(describing: notAfter)), notBefore: \(Swift.String(describing: notBefore)))"}
}

extension IotClientTypes {
    /// <p>When the certificate is valid.</p>
    public struct CertificateValidity: Swift.Equatable {
        /// <p>The certificate is not valid after this date.</p>
        public let notAfter: ClientRuntime.Date?
        /// <p>The certificate is not valid before this date.</p>
        public let notBefore: ClientRuntime.Date?

        public init (
            notAfter: ClientRuntime.Date? = nil,
            notBefore: ClientRuntime.Date? = nil
        )
        {
            self.notAfter = notAfter
            self.notBefore = notBefore
        }
    }

}

extension ClearDefaultAuthorizerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ClearDefaultAuthorizerInput()"}
}

extension ClearDefaultAuthorizerInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ClearDefaultAuthorizerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ClearDefaultAuthorizerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ClearDefaultAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ClearDefaultAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ClearDefaultAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ClearDefaultAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ClearDefaultAuthorizerOutputError>
}

public struct ClearDefaultAuthorizerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ClearDefaultAuthorizerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ClearDefaultAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ClearDefaultAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ClearDefaultAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ClearDefaultAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ClearDefaultAuthorizerOutputError>
}

public struct ClearDefaultAuthorizerInput: Swift.Equatable {

    public init() {}
}

struct ClearDefaultAuthorizerInputBody: Swift.Equatable {
}

extension ClearDefaultAuthorizerInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ClearDefaultAuthorizerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ClearDefaultAuthorizerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ClearDefaultAuthorizerOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ClearDefaultAuthorizerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ClearDefaultAuthorizerOutputResponse()"}
}

extension ClearDefaultAuthorizerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ClearDefaultAuthorizerOutputResponse: Swift.Equatable {

    public init() {}
}

struct ClearDefaultAuthorizerOutputResponseBody: Swift.Equatable {
}

extension ClearDefaultAuthorizerOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes.CloudwatchAlarmAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
        case roleArn
        case stateReason
        case stateValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmName = alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stateReason = stateReason {
            try encodeContainer.encode(stateReason, forKey: .stateReason)
        }
        if let stateValue = stateValue {
            try encodeContainer.encode(stateValue, forKey: .stateValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let stateValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateValue)
        stateValue = stateValueDecoded
    }
}

extension IotClientTypes.CloudwatchAlarmAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudwatchAlarmAction(alarmName: \(Swift.String(describing: alarmName)), roleArn: \(Swift.String(describing: roleArn)), stateReason: \(Swift.String(describing: stateReason)), stateValue: \(Swift.String(describing: stateValue)))"}
}

extension IotClientTypes {
    /// <p>Describes an action that updates a CloudWatch alarm.</p>
    public struct CloudwatchAlarmAction: Swift.Equatable {
        /// <p>The CloudWatch alarm name.</p>
        public let alarmName: Swift.String?
        /// <p>The IAM role that allows access to the CloudWatch alarm.</p>
        public let roleArn: Swift.String?
        /// <p>The reason for the alarm change.</p>
        public let stateReason: Swift.String?
        /// <p>The value of the alarm state. Acceptable values are: OK, ALARM,
        ///          INSUFFICIENT_DATA.</p>
        public let stateValue: Swift.String?

        public init (
            alarmName: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            stateReason: Swift.String? = nil,
            stateValue: Swift.String? = nil
        )
        {
            self.alarmName = alarmName
            self.roleArn = roleArn
            self.stateReason = stateReason
            self.stateValue = stateValue
        }
    }

}

extension IotClientTypes.CloudwatchLogsAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension IotClientTypes.CloudwatchLogsAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudwatchLogsAction(logGroupName: \(Swift.String(describing: logGroupName)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension IotClientTypes {
    /// <p>Describes an action that sends data to CloudWatch Logs.</p>
    public struct CloudwatchLogsAction: Swift.Equatable {
        /// <p>The CloudWatch log group to which the action sends data.</p>
        public let logGroupName: Swift.String?
        /// <p>The IAM role that allows access to the CloudWatch log.</p>
        public let roleArn: Swift.String?

        public init (
            logGroupName: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.logGroupName = logGroupName
            self.roleArn = roleArn
        }
    }

}

extension IotClientTypes.CloudwatchMetricAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName
        case metricNamespace
        case metricTimestamp
        case metricUnit
        case metricValue
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let metricNamespace = metricNamespace {
            try encodeContainer.encode(metricNamespace, forKey: .metricNamespace)
        }
        if let metricTimestamp = metricTimestamp {
            try encodeContainer.encode(metricTimestamp, forKey: .metricTimestamp)
        }
        if let metricUnit = metricUnit {
            try encodeContainer.encode(metricUnit, forKey: .metricUnit)
        }
        if let metricValue = metricValue {
            try encodeContainer.encode(metricValue, forKey: .metricValue)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let metricNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricNamespace)
        metricNamespace = metricNamespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricValue)
        metricValue = metricValueDecoded
        let metricUnitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricUnit)
        metricUnit = metricUnitDecoded
        let metricTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricTimestamp)
        metricTimestamp = metricTimestampDecoded
    }
}

extension IotClientTypes.CloudwatchMetricAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudwatchMetricAction(metricName: \(Swift.String(describing: metricName)), metricNamespace: \(Swift.String(describing: metricNamespace)), metricTimestamp: \(Swift.String(describing: metricTimestamp)), metricUnit: \(Swift.String(describing: metricUnit)), metricValue: \(Swift.String(describing: metricValue)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension IotClientTypes {
    /// <p>Describes an action that captures a CloudWatch metric.</p>
    public struct CloudwatchMetricAction: Swift.Equatable {
        /// <p>The CloudWatch metric name.</p>
        public let metricName: Swift.String?
        /// <p>The CloudWatch metric namespace name.</p>
        public let metricNamespace: Swift.String?
        /// <p>An optional <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp">Unix timestamp</a>.</p>
        public let metricTimestamp: Swift.String?
        /// <p>The <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit">metric
        ///             unit</a> supported by CloudWatch.</p>
        public let metricUnit: Swift.String?
        /// <p>The CloudWatch metric value.</p>
        public let metricValue: Swift.String?
        /// <p>The IAM role that allows access to the CloudWatch metric.</p>
        public let roleArn: Swift.String?

        public init (
            metricName: Swift.String? = nil,
            metricNamespace: Swift.String? = nil,
            metricTimestamp: Swift.String? = nil,
            metricUnit: Swift.String? = nil,
            metricValue: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.metricName = metricName
            self.metricNamespace = metricNamespace
            self.metricTimestamp = metricTimestamp
            self.metricUnit = metricUnit
            self.metricValue = metricValue
            self.roleArn = roleArn
        }
    }

}

extension IotClientTypes.CodeSigning: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsSignerJobId
        case customCodeSigning
        case startSigningJobParameter
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsSignerJobId = awsSignerJobId {
            try encodeContainer.encode(awsSignerJobId, forKey: .awsSignerJobId)
        }
        if let customCodeSigning = customCodeSigning {
            try encodeContainer.encode(customCodeSigning, forKey: .customCodeSigning)
        }
        if let startSigningJobParameter = startSigningJobParameter {
            try encodeContainer.encode(startSigningJobParameter, forKey: .startSigningJobParameter)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let awsSignerJobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsSignerJobId)
        awsSignerJobId = awsSignerJobIdDecoded
        let startSigningJobParameterDecoded = try containerValues.decodeIfPresent(IotClientTypes.StartSigningJobParameter.self, forKey: .startSigningJobParameter)
        startSigningJobParameter = startSigningJobParameterDecoded
        let customCodeSigningDecoded = try containerValues.decodeIfPresent(IotClientTypes.CustomCodeSigning.self, forKey: .customCodeSigning)
        customCodeSigning = customCodeSigningDecoded
    }
}

extension IotClientTypes.CodeSigning: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CodeSigning(awsSignerJobId: \(Swift.String(describing: awsSignerJobId)), customCodeSigning: \(Swift.String(describing: customCodeSigning)), startSigningJobParameter: \(Swift.String(describing: startSigningJobParameter)))"}
}

extension IotClientTypes {
    /// <p>Describes the method to use when code signing a file.</p>
    public struct CodeSigning: Swift.Equatable {
        /// <p>The ID of the AWSSignerJob which was created to sign the file.</p>
        public let awsSignerJobId: Swift.String?
        /// <p>A custom method for code signing a file.</p>
        public let customCodeSigning: IotClientTypes.CustomCodeSigning?
        /// <p>Describes the code-signing job.</p>
        public let startSigningJobParameter: IotClientTypes.StartSigningJobParameter?

        public init (
            awsSignerJobId: Swift.String? = nil,
            customCodeSigning: IotClientTypes.CustomCodeSigning? = nil,
            startSigningJobParameter: IotClientTypes.StartSigningJobParameter? = nil
        )
        {
            self.awsSignerJobId = awsSignerJobId
            self.customCodeSigning = customCodeSigning
            self.startSigningJobParameter = startSigningJobParameter
        }
    }

}

extension IotClientTypes.CodeSigningCertificateChain: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case inlineDocument
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateName = certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let inlineDocument = inlineDocument {
            try encodeContainer.encode(inlineDocument, forKey: .inlineDocument)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let inlineDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inlineDocument)
        inlineDocument = inlineDocumentDecoded
    }
}

extension IotClientTypes.CodeSigningCertificateChain: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CodeSigningCertificateChain(certificateName: \(Swift.String(describing: certificateName)), inlineDocument: \(Swift.String(describing: inlineDocument)))"}
}

extension IotClientTypes {
    /// <p>Describes the certificate chain being used when code signing a file.</p>
    public struct CodeSigningCertificateChain: Swift.Equatable {
        /// <p>The name of the certificate.</p>
        public let certificateName: Swift.String?
        /// <p>A base64 encoded binary representation of the code signing certificate chain.</p>
        public let inlineDocument: Swift.String?

        public init (
            certificateName: Swift.String? = nil,
            inlineDocument: Swift.String? = nil
        )
        {
            self.certificateName = certificateName
            self.inlineDocument = inlineDocument
        }
    }

}

extension IotClientTypes.CodeSigningSignature: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inlineDocument
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inlineDocument = inlineDocument {
            try encodeContainer.encode(inlineDocument.base64EncodedString(), forKey: .inlineDocument)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inlineDocumentDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .inlineDocument)
        inlineDocument = inlineDocumentDecoded
    }
}

extension IotClientTypes.CodeSigningSignature: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CodeSigningSignature(inlineDocument: \(Swift.String(describing: inlineDocument)))"}
}

extension IotClientTypes {
    /// <p>Describes the signature for a file.</p>
    public struct CodeSigningSignature: Swift.Equatable {
        /// <p>A base64 encoded binary representation of the code signing signature.</p>
        public let inlineDocument: ClientRuntime.Data?

        public init (
            inlineDocument: ClientRuntime.Data? = nil
        )
        {
            self.inlineDocument = inlineDocument
        }
    }

}

extension IotClientTypes {
    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case greaterThan
        case greaterThanEquals
        case inCidrSet
        case inPortSet
        case inSet
        case lessThan
        case lessThanEquals
        case notInCidrSet
        case notInPortSet
        case notInSet
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .greaterThan,
                .greaterThanEquals,
                .inCidrSet,
                .inPortSet,
                .inSet,
                .lessThan,
                .lessThanEquals,
                .notInCidrSet,
                .notInPortSet,
                .notInSet,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .greaterThan: return "greater-than"
            case .greaterThanEquals: return "greater-than-equals"
            case .inCidrSet: return "in-cidr-set"
            case .inPortSet: return "in-port-set"
            case .inSet: return "in-set"
            case .lessThan: return "less-than"
            case .lessThanEquals: return "less-than-equals"
            case .notInCidrSet: return "not-in-cidr-set"
            case .notInPortSet: return "not-in-port-set"
            case .notInSet: return "not-in-set"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComparisonOperator(rawValue: rawValue) ?? ComparisonOperator.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes {
    public enum ConfidenceLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfidenceLevel] {
            return [
                .high,
                .low,
                .medium,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfidenceLevel(rawValue: rawValue) ?? ConfidenceLevel.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.Configuration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension IotClientTypes.Configuration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Configuration(enabled: \(Swift.String(describing: enabled)))"}
}

extension IotClientTypes {
    /// <p>Configuration.</p>
    public struct Configuration: Swift.Equatable {
        /// <p>True to enable the configuration.</p>
        public let enabled: Swift.Bool

        public init (
            enabled: Swift.Bool = false
        )
        {
            self.enabled = enabled
        }
    }

}

extension ConfirmTopicRuleDestinationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmTopicRuleDestinationInput(confirmationToken: \(Swift.String(describing: confirmationToken)))"}
}

extension ConfirmTopicRuleDestinationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ConfirmTopicRuleDestinationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConfirmTopicRuleDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConfirmTopicRuleDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConfirmTopicRuleDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConfirmTopicRuleDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConfirmTopicRuleDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConfirmTopicRuleDestinationOutputError>
}

public struct ConfirmTopicRuleDestinationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConfirmTopicRuleDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConfirmTopicRuleDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConfirmTopicRuleDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConfirmTopicRuleDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConfirmTopicRuleDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConfirmTopicRuleDestinationOutputError>
}

public struct ConfirmTopicRuleDestinationInput: Swift.Equatable {
    /// <p>The token used to confirm ownership or access to the topic rule confirmation URL.</p>
    public let confirmationToken: Swift.String?

    public init (
        confirmationToken: Swift.String? = nil
    )
    {
        self.confirmationToken = confirmationToken
    }
}

struct ConfirmTopicRuleDestinationInputBody: Swift.Equatable {
}

extension ConfirmTopicRuleDestinationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ConfirmTopicRuleDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ConfirmTopicRuleDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingResourceUpdateException" : self = .conflictingResourceUpdateException(try ConflictingResourceUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ConfirmTopicRuleDestinationOutputError: Swift.Error, Swift.Equatable {
    case conflictingResourceUpdateException(ConflictingResourceUpdateException)
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ConfirmTopicRuleDestinationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfirmTopicRuleDestinationOutputResponse()"}
}

extension ConfirmTopicRuleDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ConfirmTopicRuleDestinationOutputResponse: Swift.Equatable {

    public init() {}
}

struct ConfirmTopicRuleDestinationOutputResponseBody: Swift.Equatable {
}

extension ConfirmTopicRuleDestinationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConflictException(message: \(Swift.String(describing: message)))"}
}

extension ConflictException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A resource with the same name already exists.</p>
public struct ConflictException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConflictingResourceUpdateException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConflictingResourceUpdateException(message: \(Swift.String(describing: message)))"}
}

extension ConflictingResourceUpdateException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConflictingResourceUpdateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A conflicting resource update exception. This exception is thrown when two pending
///          updates cause a conflict.</p>
public struct ConflictingResourceUpdateException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictingResourceUpdateExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConflictingResourceUpdateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct CreateAuditSuppressionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAuditSuppressionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAuditSuppressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAuditSuppressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAuditSuppressionOutputError>
}

extension CreateAuditSuppressionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAuditSuppressionInput(checkName: \(Swift.String(describing: checkName)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), description: \(Swift.String(describing: description)), expirationDate: \(Swift.String(describing: expirationDate)), resourceIdentifier: \(Swift.String(describing: resourceIdentifier)), suppressIndefinitely: \(Swift.String(describing: suppressIndefinitely)))"}
}

extension CreateAuditSuppressionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkName
        case clientRequestToken
        case description
        case expirationDate
        case resourceIdentifier
        case suppressIndefinitely
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkName = checkName {
            try encodeContainer.encode(checkName, forKey: .checkName)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let expirationDate = expirationDate {
            try encodeContainer.encode(expirationDate.timeIntervalSince1970, forKey: .expirationDate)
        }
        if let resourceIdentifier = resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
        if let suppressIndefinitely = suppressIndefinitely {
            try encodeContainer.encode(suppressIndefinitely, forKey: .suppressIndefinitely)
        }
    }
}

public struct CreateAuditSuppressionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAuditSuppressionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAuditSuppressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAuditSuppressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAuditSuppressionOutputError>
}

public struct CreateAuditSuppressionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAuditSuppressionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAuditSuppressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAuditSuppressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAuditSuppressionOutputError>
}

public struct CreateAuditSuppressionInput: Swift.Equatable {
    /// <p>An audit check name. Checks must be enabled
    ///         for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list
    ///         of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code>
    ///         to select which checks are enabled.)</p>
    public let checkName: Swift.String?
    /// <p>
    ///       The epoch timestamp in seconds at which this suppression expires.
    ///     </p>
    public var clientRequestToken: Swift.String?
    /// <p>
    ///       The description of the audit suppression.
    ///     </p>
    public let description: Swift.String?
    /// <p>
    ///       The epoch timestamp in seconds at which this suppression expires.
    ///     </p>
    public let expirationDate: ClientRuntime.Date?
    /// <p>Information that identifies the noncompliant resource.</p>
    public let resourceIdentifier: IotClientTypes.ResourceIdentifier?
    /// <p>
    ///       Indicates whether a suppression should exist indefinitely or not.
    ///     </p>
    public let suppressIndefinitely: Swift.Bool?

    public init (
        checkName: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        description: Swift.String? = nil,
        expirationDate: ClientRuntime.Date? = nil,
        resourceIdentifier: IotClientTypes.ResourceIdentifier? = nil,
        suppressIndefinitely: Swift.Bool? = nil
    )
    {
        self.checkName = checkName
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.expirationDate = expirationDate
        self.resourceIdentifier = resourceIdentifier
        self.suppressIndefinitely = suppressIndefinitely
    }
}

struct CreateAuditSuppressionInputBody: Swift.Equatable {
    public let checkName: Swift.String?
    public let resourceIdentifier: IotClientTypes.ResourceIdentifier?
    public let expirationDate: ClientRuntime.Date?
    public let suppressIndefinitely: Swift.Bool?
    public let description: Swift.String?
    public let clientRequestToken: Swift.String?
}

extension CreateAuditSuppressionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkName
        case clientRequestToken
        case description
        case expirationDate
        case resourceIdentifier
        case suppressIndefinitely
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkName)
        checkName = checkNameDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(IotClientTypes.ResourceIdentifier.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let suppressIndefinitelyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .suppressIndefinitely)
        suppressIndefinitely = suppressIndefinitelyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension CreateAuditSuppressionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAuditSuppressionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAuditSuppressionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAuditSuppressionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAuditSuppressionOutputResponse()"}
}

extension CreateAuditSuppressionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateAuditSuppressionOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateAuditSuppressionOutputResponseBody: Swift.Equatable {
}

extension CreateAuditSuppressionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateAuthorizerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAuthorizerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAuthorizerOutputError>
}

extension CreateAuthorizerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAuthorizerInput(authorizerFunctionArn: \(Swift.String(describing: authorizerFunctionArn)), authorizerName: \(Swift.String(describing: authorizerName)), signingDisabled: \(Swift.String(describing: signingDisabled)), status: \(Swift.String(describing: status)), tags: \(Swift.String(describing: tags)), tokenKeyName: \(Swift.String(describing: tokenKeyName)), tokenSigningPublicKeys: \(Swift.String(describing: tokenSigningPublicKeys)))"}
}

extension CreateAuthorizerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerFunctionArn
        case signingDisabled
        case status
        case tags
        case tokenKeyName
        case tokenSigningPublicKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizerFunctionArn = authorizerFunctionArn {
            try encodeContainer.encode(authorizerFunctionArn, forKey: .authorizerFunctionArn)
        }
        if let signingDisabled = signingDisabled {
            try encodeContainer.encode(signingDisabled, forKey: .signingDisabled)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let tokenKeyName = tokenKeyName {
            try encodeContainer.encode(tokenKeyName, forKey: .tokenKeyName)
        }
        if let tokenSigningPublicKeys = tokenSigningPublicKeys {
            var tokenSigningPublicKeysContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tokenSigningPublicKeys)
            for (dictKey0, publickeymap0) in tokenSigningPublicKeys {
                try tokenSigningPublicKeysContainer.encode(publickeymap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateAuthorizerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAuthorizerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAuthorizerOutputError>
}

public struct CreateAuthorizerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAuthorizerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAuthorizerOutputError>
}

public struct CreateAuthorizerInput: Swift.Equatable {
    /// <p>The ARN of the authorizer's Lambda function.</p>
    public let authorizerFunctionArn: Swift.String?
    /// <p>The authorizer name.</p>
    public let authorizerName: Swift.String?
    /// <p>Specifies whether AWS IoT validates the token signature in an authorization request.</p>
    public let signingDisabled: Swift.Bool?
    /// <p>The status of the create authorizer request.</p>
    public let status: IotClientTypes.AuthorizerStatus?
    /// <p>Metadata which can be used to manage the custom authorizer.</p>
    ///          <note>
    ///             <p>For URI Request parameters use format: ...key1=value1&key2=value2...</p>
    ///             <p>For the CLI command-line parameter use format: &&tags
    ///             "key1=value1&key2=value2..."</p>
    ///             <p>For the cli-input-json file use format: "tags":
    ///             "key1=value1&key2=value2..."</p>
    ///          </note>
    public let tags: [IotClientTypes.Tag]?
    /// <p>The name of the token key used to extract the token from the HTTP headers.</p>
    public let tokenKeyName: Swift.String?
    /// <p>The public keys used to verify the digital signature returned by your custom
    ///          authentication service.</p>
    public let tokenSigningPublicKeys: [Swift.String:Swift.String]?

    public init (
        authorizerFunctionArn: Swift.String? = nil,
        authorizerName: Swift.String? = nil,
        signingDisabled: Swift.Bool? = nil,
        status: IotClientTypes.AuthorizerStatus? = nil,
        tags: [IotClientTypes.Tag]? = nil,
        tokenKeyName: Swift.String? = nil,
        tokenSigningPublicKeys: [Swift.String:Swift.String]? = nil
    )
    {
        self.authorizerFunctionArn = authorizerFunctionArn
        self.authorizerName = authorizerName
        self.signingDisabled = signingDisabled
        self.status = status
        self.tags = tags
        self.tokenKeyName = tokenKeyName
        self.tokenSigningPublicKeys = tokenSigningPublicKeys
    }
}

struct CreateAuthorizerInputBody: Swift.Equatable {
    public let authorizerFunctionArn: Swift.String?
    public let tokenKeyName: Swift.String?
    public let tokenSigningPublicKeys: [Swift.String:Swift.String]?
    public let status: IotClientTypes.AuthorizerStatus?
    public let tags: [IotClientTypes.Tag]?
    public let signingDisabled: Swift.Bool?
}

extension CreateAuthorizerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerFunctionArn
        case signingDisabled
        case status
        case tags
        case tokenKeyName
        case tokenSigningPublicKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizerFunctionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerFunctionArn)
        authorizerFunctionArn = authorizerFunctionArnDecoded
        let tokenKeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenKeyName)
        tokenKeyName = tokenKeyNameDecoded
        let tokenSigningPublicKeysContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tokenSigningPublicKeys)
        var tokenSigningPublicKeysDecoded0: [Swift.String:Swift.String]? = nil
        if let tokenSigningPublicKeysContainer = tokenSigningPublicKeysContainer {
            tokenSigningPublicKeysDecoded0 = [Swift.String:Swift.String]()
            for (key0, keyvalue0) in tokenSigningPublicKeysContainer {
                if let keyvalue0 = keyvalue0 {
                    tokenSigningPublicKeysDecoded0?[key0] = keyvalue0
                }
            }
        }
        tokenSigningPublicKeys = tokenSigningPublicKeysDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthorizerStatus.self, forKey: .status)
        status = statusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let signingDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .signingDisabled)
        signingDisabled = signingDisabledDecoded
    }
}

extension CreateAuthorizerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAuthorizerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAuthorizerOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAuthorizerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAuthorizerOutputResponse(authorizerArn: \(Swift.String(describing: authorizerArn)), authorizerName: \(Swift.String(describing: authorizerName)))"}
}

extension CreateAuthorizerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateAuthorizerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authorizerArn = output.authorizerArn
            self.authorizerName = output.authorizerName
        } else {
            self.authorizerArn = nil
            self.authorizerName = nil
        }
    }
}

public struct CreateAuthorizerOutputResponse: Swift.Equatable {
    /// <p>The authorizer ARN.</p>
    public let authorizerArn: Swift.String?
    /// <p>The authorizer's name.</p>
    public let authorizerName: Swift.String?

    public init (
        authorizerArn: Swift.String? = nil,
        authorizerName: Swift.String? = nil
    )
    {
        self.authorizerArn = authorizerArn
        self.authorizerName = authorizerName
    }
}

struct CreateAuthorizerOutputResponseBody: Swift.Equatable {
    public let authorizerName: Swift.String?
    public let authorizerArn: Swift.String?
}

extension CreateAuthorizerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerArn
        case authorizerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerName)
        authorizerName = authorizerNameDecoded
        let authorizerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerArn)
        authorizerArn = authorizerArnDecoded
    }
}

public struct CreateBillingGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBillingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBillingGroupOutputError>
}

extension CreateBillingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBillingGroupInput(billingGroupName: \(Swift.String(describing: billingGroupName)), billingGroupProperties: \(Swift.String(describing: billingGroupProperties)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateBillingGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingGroupProperties
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingGroupProperties = billingGroupProperties {
            try encodeContainer.encode(billingGroupProperties, forKey: .billingGroupProperties)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateBillingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBillingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBillingGroupOutputError>
}

public struct CreateBillingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBillingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBillingGroupOutputError>
}

public struct CreateBillingGroupInput: Swift.Equatable {
    /// <p>The name you wish to give to the billing group.</p>
    public let billingGroupName: Swift.String?
    /// <p>The properties of the billing group.</p>
    public let billingGroupProperties: IotClientTypes.BillingGroupProperties?
    /// <p>Metadata which can be used to manage the billing group.</p>
    public let tags: [IotClientTypes.Tag]?

    public init (
        billingGroupName: Swift.String? = nil,
        billingGroupProperties: IotClientTypes.BillingGroupProperties? = nil,
        tags: [IotClientTypes.Tag]? = nil
    )
    {
        self.billingGroupName = billingGroupName
        self.billingGroupProperties = billingGroupProperties
        self.tags = tags
    }
}

struct CreateBillingGroupInputBody: Swift.Equatable {
    public let billingGroupProperties: IotClientTypes.BillingGroupProperties?
    public let tags: [IotClientTypes.Tag]?
}

extension CreateBillingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingGroupProperties
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let billingGroupPropertiesDecoded = try containerValues.decodeIfPresent(IotClientTypes.BillingGroupProperties.self, forKey: .billingGroupProperties)
        billingGroupProperties = billingGroupPropertiesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateBillingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateBillingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateBillingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateBillingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBillingGroupOutputResponse(billingGroupArn: \(Swift.String(describing: billingGroupArn)), billingGroupId: \(Swift.String(describing: billingGroupId)), billingGroupName: \(Swift.String(describing: billingGroupName)))"}
}

extension CreateBillingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateBillingGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.billingGroupArn = output.billingGroupArn
            self.billingGroupId = output.billingGroupId
            self.billingGroupName = output.billingGroupName
        } else {
            self.billingGroupArn = nil
            self.billingGroupId = nil
            self.billingGroupName = nil
        }
    }
}

public struct CreateBillingGroupOutputResponse: Swift.Equatable {
    /// <p>The ARN of the billing group.</p>
    public let billingGroupArn: Swift.String?
    /// <p>The ID of the billing group.</p>
    public let billingGroupId: Swift.String?
    /// <p>The name you gave to the billing group.</p>
    public let billingGroupName: Swift.String?

    public init (
        billingGroupArn: Swift.String? = nil,
        billingGroupId: Swift.String? = nil,
        billingGroupName: Swift.String? = nil
    )
    {
        self.billingGroupArn = billingGroupArn
        self.billingGroupId = billingGroupId
        self.billingGroupName = billingGroupName
    }
}

struct CreateBillingGroupOutputResponseBody: Swift.Equatable {
    public let billingGroupName: Swift.String?
    public let billingGroupArn: Swift.String?
    public let billingGroupId: Swift.String?
}

extension CreateBillingGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingGroupArn
        case billingGroupId
        case billingGroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let billingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupName)
        billingGroupName = billingGroupNameDecoded
        let billingGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupArn)
        billingGroupArn = billingGroupArnDecoded
        let billingGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupId)
        billingGroupId = billingGroupIdDecoded
    }
}

public struct CreateCertificateFromCsrInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCertificateFromCsrInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCertificateFromCsrInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCertificateFromCsrOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCertificateFromCsrInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCertificateFromCsrOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCertificateFromCsrOutputError>
}

extension CreateCertificateFromCsrInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCertificateFromCsrInput(certificateSigningRequest: \(Swift.String(describing: certificateSigningRequest)), setAsActive: \(Swift.String(describing: setAsActive)))"}
}

extension CreateCertificateFromCsrInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateSigningRequest
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateSigningRequest = certificateSigningRequest {
            try encodeContainer.encode(certificateSigningRequest, forKey: .certificateSigningRequest)
        }
    }
}

public struct CreateCertificateFromCsrInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCertificateFromCsrInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCertificateFromCsrInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCertificateFromCsrOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCertificateFromCsrInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCertificateFromCsrOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCertificateFromCsrOutputError>
}

public struct CreateCertificateFromCsrInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCertificateFromCsrInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCertificateFromCsrInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCertificateFromCsrOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.setAsActive != false {
            let setAsActiveQueryItem = ClientRuntime.URLQueryItem(name: "setAsActive".urlPercentEncoding(), value: Swift.String(input.operationInput.setAsActive).urlPercentEncoding())
            input.builder.withQueryItem(setAsActiveQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCertificateFromCsrInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCertificateFromCsrOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCertificateFromCsrOutputError>
}

/// <p>The input for the CreateCertificateFromCsr operation.</p>
public struct CreateCertificateFromCsrInput: Swift.Equatable {
    /// <p>The certificate signing request (CSR).</p>
    public let certificateSigningRequest: Swift.String?
    /// <p>Specifies whether the certificate is active.</p>
    public let setAsActive: Swift.Bool

    public init (
        certificateSigningRequest: Swift.String? = nil,
        setAsActive: Swift.Bool = false
    )
    {
        self.certificateSigningRequest = certificateSigningRequest
        self.setAsActive = setAsActive
    }
}

struct CreateCertificateFromCsrInputBody: Swift.Equatable {
    public let certificateSigningRequest: Swift.String?
}

extension CreateCertificateFromCsrInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateSigningRequest
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateSigningRequestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateSigningRequest)
        certificateSigningRequest = certificateSigningRequestDecoded
    }
}

extension CreateCertificateFromCsrOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCertificateFromCsrOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCertificateFromCsrOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCertificateFromCsrOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCertificateFromCsrOutputResponse(certificateArn: \(Swift.String(describing: certificateArn)), certificateId: \(Swift.String(describing: certificateId)), certificatePem: \(Swift.String(describing: certificatePem)))"}
}

extension CreateCertificateFromCsrOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateCertificateFromCsrOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificateArn = output.certificateArn
            self.certificateId = output.certificateId
            self.certificatePem = output.certificatePem
        } else {
            self.certificateArn = nil
            self.certificateId = nil
            self.certificatePem = nil
        }
    }
}

/// <p>The output from the CreateCertificateFromCsr operation.</p>
public struct CreateCertificateFromCsrOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the certificate. You can use the ARN as a principal
    ///          for policy operations.</p>
    public let certificateArn: Swift.String?
    /// <p>The ID of the certificate. Certificate management operations only take a
    ///          certificateId.</p>
    public let certificateId: Swift.String?
    /// <p>The certificate data, in PEM format.</p>
    public let certificatePem: Swift.String?

    public init (
        certificateArn: Swift.String? = nil,
        certificateId: Swift.String? = nil,
        certificatePem: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
        self.certificateId = certificateId
        self.certificatePem = certificatePem
    }
}

struct CreateCertificateFromCsrOutputResponseBody: Swift.Equatable {
    public let certificateArn: Swift.String?
    public let certificateId: Swift.String?
    public let certificatePem: Swift.String?
}

extension CreateCertificateFromCsrOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn
        case certificateId
        case certificatePem
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let certificatePemDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificatePem)
        certificatePem = certificatePemDecoded
    }
}

public struct CreateCustomMetricInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCustomMetricInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCustomMetricInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCustomMetricOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCustomMetricInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCustomMetricOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCustomMetricOutputError>
}

extension CreateCustomMetricInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCustomMetricInput(clientRequestToken: \(Swift.String(describing: clientRequestToken)), displayName: \(Swift.String(describing: displayName)), metricName: \(Swift.String(describing: metricName)), metricType: \(Swift.String(describing: metricType)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateCustomMetricInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case displayName
        case metricType
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let metricType = metricType {
            try encodeContainer.encode(metricType.rawValue, forKey: .metricType)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateCustomMetricInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCustomMetricInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCustomMetricInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCustomMetricOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCustomMetricInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCustomMetricOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCustomMetricOutputError>
}

public struct CreateCustomMetricInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCustomMetricInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCustomMetricInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCustomMetricOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCustomMetricInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCustomMetricOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCustomMetricOutputError>
}

public struct CreateCustomMetricInput: Swift.Equatable {
    /// <p>Each custom
    ///       metric must have a unique client request token. If you try to create a new custom metric that
    ///       already exists with a different token,
    ///       an exception
    ///       occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. </p>
    public var clientRequestToken: Swift.String?
    /// <p>
    ///       Field
    ///       represents a friendly name in the console for the custom metric;
    ///       it
    ///       doesn't have to be unique. Don't use this name as the metric identifier in
    ///       the device metric report. Can be updated once defined.</p>
    public let displayName: Swift.String?
    /// <p> The name of the custom metric. This will be used in the metric report submitted from the device/thing. Shouldn't begin with <code>aws:</code>.
    ///       Cannot be updated
    ///       once defined.</p>
    public let metricName: Swift.String?
    /// <p>
    ///       The type of the custom metric. Types include <code>string-list</code>, <code>ip-address-list</code>, <code>number-list</code>, and <code>number</code>.
    ///     </p>
    public let metricType: IotClientTypes.CustomMetricType?
    /// <p>
    ///       Metadata that can be used to manage the custom metric.
    ///     </p>
    public let tags: [IotClientTypes.Tag]?

    public init (
        clientRequestToken: Swift.String? = nil,
        displayName: Swift.String? = nil,
        metricName: Swift.String? = nil,
        metricType: IotClientTypes.CustomMetricType? = nil,
        tags: [IotClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.displayName = displayName
        self.metricName = metricName
        self.metricType = metricType
        self.tags = tags
    }
}

struct CreateCustomMetricInputBody: Swift.Equatable {
    public let displayName: Swift.String?
    public let metricType: IotClientTypes.CustomMetricType?
    public let tags: [IotClientTypes.Tag]?
    public let clientRequestToken: Swift.String?
}

extension CreateCustomMetricInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case displayName
        case metricType
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let metricTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.CustomMetricType.self, forKey: .metricType)
        metricType = metricTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension CreateCustomMetricOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCustomMetricOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCustomMetricOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCustomMetricOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCustomMetricOutputResponse(metricArn: \(Swift.String(describing: metricArn)), metricName: \(Swift.String(describing: metricName)))"}
}

extension CreateCustomMetricOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateCustomMetricOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricArn = output.metricArn
            self.metricName = output.metricName
        } else {
            self.metricArn = nil
            self.metricName = nil
        }
    }
}

public struct CreateCustomMetricOutputResponse: Swift.Equatable {
    /// <p>
    ///       The Amazon Resource Number (ARN) of the custom metric, e.g. <code>arn:<i>aws-partition</i>:iot:<i>region</i>:<i>accountId</i>:custommetric/<i>metricName</i>
    ///             </code>
    ///          </p>
    public let metricArn: Swift.String?
    /// <p>
    ///       The name of the custom metric to be used in the metric report.
    ///     </p>
    public let metricName: Swift.String?

    public init (
        metricArn: Swift.String? = nil,
        metricName: Swift.String? = nil
    )
    {
        self.metricArn = metricArn
        self.metricName = metricName
    }
}

struct CreateCustomMetricOutputResponseBody: Swift.Equatable {
    public let metricName: Swift.String?
    public let metricArn: Swift.String?
}

extension CreateCustomMetricOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricArn
        case metricName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricArn)
        metricArn = metricArnDecoded
    }
}

public struct CreateDimensionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDimensionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDimensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDimensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDimensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDimensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDimensionOutputError>
}

extension CreateDimensionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDimensionInput(clientRequestToken: \(Swift.String(describing: clientRequestToken)), name: \(Swift.String(describing: name)), stringValues: \(Swift.String(describing: stringValues)), tags: \(Swift.String(describing: tags)), type: \(Swift.String(describing: type)))"}
}

extension CreateDimensionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case stringValues
        case tags
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let stringValues = stringValues {
            var stringValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stringValues)
            for dimensionstringvalues0 in stringValues {
                try stringValuesContainer.encode(dimensionstringvalues0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct CreateDimensionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDimensionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDimensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDimensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDimensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDimensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDimensionOutputError>
}

public struct CreateDimensionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDimensionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDimensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDimensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDimensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDimensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDimensionOutputError>
}

public struct CreateDimensionInput: Swift.Equatable {
    /// <p>Each dimension must have a unique client request token. If you try to create a new dimension with the same token as a dimension that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.</p>
    public var clientRequestToken: Swift.String?
    /// <p>A unique identifier for the dimension. Choose something that describes the type and value to make it easy to remember what it does.</p>
    public let name: Swift.String?
    /// <p>Specifies the value or list of values for the dimension. For <code>TOPIC_FILTER</code> dimensions, this is a pattern used to match the MQTT topic (for example, "admin/#").</p>
    public let stringValues: [Swift.String]?
    /// <p>Metadata that can be used to manage the dimension.</p>
    public let tags: [IotClientTypes.Tag]?
    /// <p>Specifies the type of dimension. Supported types: <code>TOPIC_FILTER.</code>
    ///          </p>
    public let type: IotClientTypes.DimensionType?

    public init (
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        stringValues: [Swift.String]? = nil,
        tags: [IotClientTypes.Tag]? = nil,
        type: IotClientTypes.DimensionType? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.stringValues = stringValues
        self.tags = tags
        self.type = type
    }
}

struct CreateDimensionInputBody: Swift.Equatable {
    public let type: IotClientTypes.DimensionType?
    public let stringValues: [Swift.String]?
    public let tags: [IotClientTypes.Tag]?
    public let clientRequestToken: Swift.String?
}

extension CreateDimensionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case stringValues
        case tags
        case type
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(IotClientTypes.DimensionType.self, forKey: .type)
        type = typeDecoded
        let stringValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stringValues)
        var stringValuesDecoded0:[Swift.String]? = nil
        if let stringValuesContainer = stringValuesContainer {
            stringValuesDecoded0 = [Swift.String]()
            for string0 in stringValuesContainer {
                if let string0 = string0 {
                    stringValuesDecoded0?.append(string0)
                }
            }
        }
        stringValues = stringValuesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension CreateDimensionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDimensionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDimensionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDimensionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDimensionOutputResponse(arn: \(Swift.String(describing: arn)), name: \(Swift.String(describing: name)))"}
}

extension CreateDimensionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDimensionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.name = output.name
        } else {
            self.arn = nil
            self.name = nil
        }
    }
}

public struct CreateDimensionOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource Name
    ///       (ARN)
    ///       of
    ///       the created dimension.</p>
    public let arn: Swift.String?
    /// <p>A unique identifier for the dimension.</p>
    public let name: Swift.String?

    public init (
        arn: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
    }
}

struct CreateDimensionOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let arn: Swift.String?
}

extension CreateDimensionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case name
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

public struct CreateDomainConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDomainConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDomainConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDomainConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDomainConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDomainConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDomainConfigurationOutputError>
}

extension CreateDomainConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDomainConfigurationInput(authorizerConfig: \(Swift.String(describing: authorizerConfig)), domainConfigurationName: \(Swift.String(describing: domainConfigurationName)), domainName: \(Swift.String(describing: domainName)), serverCertificateArns: \(Swift.String(describing: serverCertificateArns)), serviceType: \(Swift.String(describing: serviceType)), tags: \(Swift.String(describing: tags)), validationCertificateArn: \(Swift.String(describing: validationCertificateArn)))"}
}

extension CreateDomainConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerConfig
        case domainName
        case serverCertificateArns
        case serviceType
        case tags
        case validationCertificateArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizerConfig = authorizerConfig {
            try encodeContainer.encode(authorizerConfig, forKey: .authorizerConfig)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let serverCertificateArns = serverCertificateArns {
            var serverCertificateArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serverCertificateArns)
            for servercertificatearns0 in serverCertificateArns {
                try serverCertificateArnsContainer.encode(servercertificatearns0)
            }
        }
        if let serviceType = serviceType {
            try encodeContainer.encode(serviceType.rawValue, forKey: .serviceType)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let validationCertificateArn = validationCertificateArn {
            try encodeContainer.encode(validationCertificateArn, forKey: .validationCertificateArn)
        }
    }
}

public struct CreateDomainConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDomainConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDomainConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDomainConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDomainConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDomainConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDomainConfigurationOutputError>
}

public struct CreateDomainConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDomainConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDomainConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDomainConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDomainConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDomainConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDomainConfigurationOutputError>
}

public struct CreateDomainConfigurationInput: Swift.Equatable {
    /// <p>An object that specifies the authorization service for a domain.</p>
    public let authorizerConfig: IotClientTypes.AuthorizerConfig?
    /// <p>The name of the domain configuration. This value must be unique to a region.</p>
    public let domainConfigurationName: Swift.String?
    /// <p>The name of the domain.</p>
    public let domainName: Swift.String?
    /// <p>The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN.
    ///       This value is not required for AWS-managed domains.</p>
    public let serverCertificateArns: [Swift.String]?
    /// <p>The type of service delivered by the endpoint.</p>
    ///          <note>
    ///             <p>AWS IoT Core currently supports only the <code>DATA</code> service type.</p>
    ///          </note>
    public let serviceType: IotClientTypes.ServiceType?
    /// <p>Metadata which can be used to manage the domain configuration.</p>
    ///          <note>
    ///             <p>For URI Request parameters use format: ...key1=value1&key2=value2...</p>
    ///             <p>For the CLI command-line parameter use format: &&tags
    ///             "key1=value1&key2=value2..."</p>
    ///             <p>For the cli-input-json file use format: "tags":
    ///             "key1=value1&key2=value2..."</p>
    ///          </note>
    public let tags: [IotClientTypes.Tag]?
    /// <p>The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority.
    ///          This value is not required for AWS-managed domains.</p>
    public let validationCertificateArn: Swift.String?

    public init (
        authorizerConfig: IotClientTypes.AuthorizerConfig? = nil,
        domainConfigurationName: Swift.String? = nil,
        domainName: Swift.String? = nil,
        serverCertificateArns: [Swift.String]? = nil,
        serviceType: IotClientTypes.ServiceType? = nil,
        tags: [IotClientTypes.Tag]? = nil,
        validationCertificateArn: Swift.String? = nil
    )
    {
        self.authorizerConfig = authorizerConfig
        self.domainConfigurationName = domainConfigurationName
        self.domainName = domainName
        self.serverCertificateArns = serverCertificateArns
        self.serviceType = serviceType
        self.tags = tags
        self.validationCertificateArn = validationCertificateArn
    }
}

struct CreateDomainConfigurationInputBody: Swift.Equatable {
    public let domainName: Swift.String?
    public let serverCertificateArns: [Swift.String]?
    public let validationCertificateArn: Swift.String?
    public let authorizerConfig: IotClientTypes.AuthorizerConfig?
    public let serviceType: IotClientTypes.ServiceType?
    public let tags: [IotClientTypes.Tag]?
}

extension CreateDomainConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerConfig
        case domainName
        case serverCertificateArns
        case serviceType
        case tags
        case validationCertificateArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let serverCertificateArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .serverCertificateArns)
        var serverCertificateArnsDecoded0:[Swift.String]? = nil
        if let serverCertificateArnsContainer = serverCertificateArnsContainer {
            serverCertificateArnsDecoded0 = [Swift.String]()
            for string0 in serverCertificateArnsContainer {
                if let string0 = string0 {
                    serverCertificateArnsDecoded0?.append(string0)
                }
            }
        }
        serverCertificateArns = serverCertificateArnsDecoded0
        let validationCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validationCertificateArn)
        validationCertificateArn = validationCertificateArnDecoded
        let authorizerConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthorizerConfig.self, forKey: .authorizerConfig)
        authorizerConfig = authorizerConfigDecoded
        let serviceTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ServiceType.self, forKey: .serviceType)
        serviceType = serviceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDomainConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDomainConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateValidationException" : self = .certificateValidationException(try CertificateValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDomainConfigurationOutputError: Swift.Error, Swift.Equatable {
    case certificateValidationException(CertificateValidationException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDomainConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDomainConfigurationOutputResponse(domainConfigurationArn: \(Swift.String(describing: domainConfigurationArn)), domainConfigurationName: \(Swift.String(describing: domainConfigurationName)))"}
}

extension CreateDomainConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDomainConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainConfigurationArn = output.domainConfigurationArn
            self.domainConfigurationName = output.domainConfigurationName
        } else {
            self.domainConfigurationArn = nil
            self.domainConfigurationName = nil
        }
    }
}

public struct CreateDomainConfigurationOutputResponse: Swift.Equatable {
    /// <p>The ARN of the domain configuration.</p>
    public let domainConfigurationArn: Swift.String?
    /// <p>The name of the domain configuration.</p>
    public let domainConfigurationName: Swift.String?

    public init (
        domainConfigurationArn: Swift.String? = nil,
        domainConfigurationName: Swift.String? = nil
    )
    {
        self.domainConfigurationArn = domainConfigurationArn
        self.domainConfigurationName = domainConfigurationName
    }
}

struct CreateDomainConfigurationOutputResponseBody: Swift.Equatable {
    public let domainConfigurationName: Swift.String?
    public let domainConfigurationArn: Swift.String?
}

extension CreateDomainConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainConfigurationArn
        case domainConfigurationName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainConfigurationName)
        domainConfigurationName = domainConfigurationNameDecoded
        let domainConfigurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainConfigurationArn)
        domainConfigurationArn = domainConfigurationArnDecoded
    }
}

public struct CreateDynamicThingGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDynamicThingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDynamicThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDynamicThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDynamicThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDynamicThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDynamicThingGroupOutputError>
}

extension CreateDynamicThingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDynamicThingGroupInput(indexName: \(Swift.String(describing: indexName)), queryString: \(Swift.String(describing: queryString)), queryVersion: \(Swift.String(describing: queryVersion)), tags: \(Swift.String(describing: tags)), thingGroupName: \(Swift.String(describing: thingGroupName)), thingGroupProperties: \(Swift.String(describing: thingGroupProperties)))"}
}

extension CreateDynamicThingGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName
        case queryString
        case queryVersion
        case tags
        case thingGroupProperties
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let queryVersion = queryVersion {
            try encodeContainer.encode(queryVersion, forKey: .queryVersion)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let thingGroupProperties = thingGroupProperties {
            try encodeContainer.encode(thingGroupProperties, forKey: .thingGroupProperties)
        }
    }
}

public struct CreateDynamicThingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDynamicThingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDynamicThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDynamicThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDynamicThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDynamicThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDynamicThingGroupOutputError>
}

public struct CreateDynamicThingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDynamicThingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDynamicThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDynamicThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDynamicThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDynamicThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDynamicThingGroupOutputError>
}

public struct CreateDynamicThingGroupInput: Swift.Equatable {
    /// <p>The dynamic thing group index name.</p>
    /// 		       <note>
    /// 			         <p>Currently one index is supported: "AWS_Things".</p>
    /// 		       </note>
    public let indexName: Swift.String?
    /// <p>The dynamic thing group search query string.</p>
    /// 		       <p>See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/query-syntax.html">Query Syntax</a> for information about query string syntax.</p>
    public let queryString: Swift.String?
    /// <p>The dynamic thing group query version.</p>
    /// 		       <note>
    /// 			         <p>Currently one query version is supported: "2017-09-30". If not specified, the
    /// 				query version defaults to this value.</p>
    /// 		       </note>
    public let queryVersion: Swift.String?
    /// <p>Metadata which can be used to manage the dynamic thing group.</p>
    public let tags: [IotClientTypes.Tag]?
    /// <p>The dynamic thing group name to create.</p>
    public let thingGroupName: Swift.String?
    /// <p>The dynamic thing group properties.</p>
    public let thingGroupProperties: IotClientTypes.ThingGroupProperties?

    public init (
        indexName: Swift.String? = nil,
        queryString: Swift.String? = nil,
        queryVersion: Swift.String? = nil,
        tags: [IotClientTypes.Tag]? = nil,
        thingGroupName: Swift.String? = nil,
        thingGroupProperties: IotClientTypes.ThingGroupProperties? = nil
    )
    {
        self.indexName = indexName
        self.queryString = queryString
        self.queryVersion = queryVersion
        self.tags = tags
        self.thingGroupName = thingGroupName
        self.thingGroupProperties = thingGroupProperties
    }
}

struct CreateDynamicThingGroupInputBody: Swift.Equatable {
    public let thingGroupProperties: IotClientTypes.ThingGroupProperties?
    public let indexName: Swift.String?
    public let queryString: Swift.String?
    public let queryVersion: Swift.String?
    public let tags: [IotClientTypes.Tag]?
}

extension CreateDynamicThingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName
        case queryString
        case queryVersion
        case tags
        case thingGroupProperties
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupPropertiesDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingGroupProperties.self, forKey: .thingGroupProperties)
        thingGroupProperties = thingGroupPropertiesDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let queryVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryVersion)
        queryVersion = queryVersionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDynamicThingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDynamicThingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidQueryException" : self = .invalidQueryException(try InvalidQueryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDynamicThingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidQueryException(InvalidQueryException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDynamicThingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDynamicThingGroupOutputResponse(indexName: \(Swift.String(describing: indexName)), queryString: \(Swift.String(describing: queryString)), queryVersion: \(Swift.String(describing: queryVersion)), thingGroupArn: \(Swift.String(describing: thingGroupArn)), thingGroupId: \(Swift.String(describing: thingGroupId)), thingGroupName: \(Swift.String(describing: thingGroupName)))"}
}

extension CreateDynamicThingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDynamicThingGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.indexName = output.indexName
            self.queryString = output.queryString
            self.queryVersion = output.queryVersion
            self.thingGroupArn = output.thingGroupArn
            self.thingGroupId = output.thingGroupId
            self.thingGroupName = output.thingGroupName
        } else {
            self.indexName = nil
            self.queryString = nil
            self.queryVersion = nil
            self.thingGroupArn = nil
            self.thingGroupId = nil
            self.thingGroupName = nil
        }
    }
}

public struct CreateDynamicThingGroupOutputResponse: Swift.Equatable {
    /// <p>The dynamic thing group index name.</p>
    public let indexName: Swift.String?
    /// <p>The dynamic thing group search query string.</p>
    public let queryString: Swift.String?
    /// <p>The dynamic thing group query version.</p>
    public let queryVersion: Swift.String?
    /// <p>The dynamic thing group ARN.</p>
    public let thingGroupArn: Swift.String?
    /// <p>The dynamic thing group ID.</p>
    public let thingGroupId: Swift.String?
    /// <p>The dynamic thing group name.</p>
    public let thingGroupName: Swift.String?

    public init (
        indexName: Swift.String? = nil,
        queryString: Swift.String? = nil,
        queryVersion: Swift.String? = nil,
        thingGroupArn: Swift.String? = nil,
        thingGroupId: Swift.String? = nil,
        thingGroupName: Swift.String? = nil
    )
    {
        self.indexName = indexName
        self.queryString = queryString
        self.queryVersion = queryVersion
        self.thingGroupArn = thingGroupArn
        self.thingGroupId = thingGroupId
        self.thingGroupName = thingGroupName
    }
}

struct CreateDynamicThingGroupOutputResponseBody: Swift.Equatable {
    public let thingGroupName: Swift.String?
    public let thingGroupArn: Swift.String?
    public let thingGroupId: Swift.String?
    public let indexName: Swift.String?
    public let queryString: Swift.String?
    public let queryVersion: Swift.String?
}

extension CreateDynamicThingGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName
        case queryString
        case queryVersion
        case thingGroupArn
        case thingGroupId
        case thingGroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupName)
        thingGroupName = thingGroupNameDecoded
        let thingGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupArn)
        thingGroupArn = thingGroupArnDecoded
        let thingGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupId)
        thingGroupId = thingGroupIdDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let queryVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryVersion)
        queryVersion = queryVersionDecoded
    }
}

public struct CreateJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateJobOutputError>
}

extension CreateJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateJobInput(abortConfig: \(Swift.String(describing: abortConfig)), description: \(Swift.String(describing: description)), document: \(Swift.String(describing: document)), documentSource: \(Swift.String(describing: documentSource)), jobExecutionsRolloutConfig: \(Swift.String(describing: jobExecutionsRolloutConfig)), jobId: \(Swift.String(describing: jobId)), jobTemplateArn: \(Swift.String(describing: jobTemplateArn)), namespaceId: \(Swift.String(describing: namespaceId)), presignedUrlConfig: \(Swift.String(describing: presignedUrlConfig)), tags: \(Swift.String(describing: tags)), targetSelection: \(Swift.String(describing: targetSelection)), targets: \(Swift.String(describing: targets)), timeoutConfig: \(Swift.String(describing: timeoutConfig)))"}
}

extension CreateJobInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortConfig
        case description
        case document
        case documentSource
        case jobExecutionsRolloutConfig
        case jobTemplateArn
        case namespaceId
        case presignedUrlConfig
        case tags
        case targetSelection
        case targets
        case timeoutConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let abortConfig = abortConfig {
            try encodeContainer.encode(abortConfig, forKey: .abortConfig)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let document = document {
            try encodeContainer.encode(document, forKey: .document)
        }
        if let documentSource = documentSource {
            try encodeContainer.encode(documentSource, forKey: .documentSource)
        }
        if let jobExecutionsRolloutConfig = jobExecutionsRolloutConfig {
            try encodeContainer.encode(jobExecutionsRolloutConfig, forKey: .jobExecutionsRolloutConfig)
        }
        if let jobTemplateArn = jobTemplateArn {
            try encodeContainer.encode(jobTemplateArn, forKey: .jobTemplateArn)
        }
        if let namespaceId = namespaceId {
            try encodeContainer.encode(namespaceId, forKey: .namespaceId)
        }
        if let presignedUrlConfig = presignedUrlConfig {
            try encodeContainer.encode(presignedUrlConfig, forKey: .presignedUrlConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let targetSelection = targetSelection {
            try encodeContainer.encode(targetSelection.rawValue, forKey: .targetSelection)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for jobtargets0 in targets {
                try targetsContainer.encode(jobtargets0)
            }
        }
        if let timeoutConfig = timeoutConfig {
            try encodeContainer.encode(timeoutConfig, forKey: .timeoutConfig)
        }
    }
}

public struct CreateJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateJobOutputError>
}

public struct CreateJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateJobOutputError>
}

public struct CreateJobInput: Swift.Equatable {
    /// <p>Allows you to create criteria to abort a job.</p>
    public let abortConfig: IotClientTypes.AbortConfig?
    /// <p>A short text description of the job.</p>
    public let description: Swift.String?
    /// <p>The job document. Required if you don't specify a value for <code>documentSource</code>.</p>
    public let document: Swift.String?
    /// <p>An S3 link to the job document. Required if you don't specify a value for <code>document</code>.</p>
    ///         <note>
    ///             <p>If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document.</p>
    ///             <p>The placeholder link is of the following form:</p>
    ///             <p>
    ///                <code>${aws:iot:s3-presigned-url:https://s3.amazonaws.com/<i>bucket</i>/<i>key</i>}</code>
    ///             </p>
    ///             <p>where <i>bucket</i> is your bucket name and <i>key</i> is the object in the bucket to which you are linking.</p>
    ///         </note>
    public let documentSource: Swift.String?
    /// <p>Allows you to create a staged rollout of the job.</p>
    public let jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig?
    /// <p>A job identifier which must be unique for your AWS account. We recommend using a UUID. Alpha-numeric
    ///             characters, "-" and "_" are valid for use here.</p>
    public let jobId: Swift.String?
    /// <p>The ARN of the job template used to create the job.</p>
    public let jobTemplateArn: Swift.String?
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    ///         <p>When you specify a value for this parameter, AWS IoT Core sends jobs notifications to MQTT topics that
    ///             contain the value in the following format.</p>
    ///         <p>
    ///             <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code>
    ///          </p>
    ///         <note>
    ///             <p>The <code>namespaceId</code> feature is in public preview.</p>
    ///          </note>
    public let namespaceId: Swift.String?
    /// <p>Configuration information for pre-signed S3 URLs.</p>
    public let presignedUrlConfig: IotClientTypes.PresignedUrlConfig?
    /// <p>Metadata which can be used to manage the job.</p>
    public let tags: [IotClientTypes.Tag]?
    /// <p>Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things
    ///             specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing
    ///             when a change is detected in a target. For example, a job will run on a thing when the thing is added to a
    ///             target group, even after the job was completed by all things originally in the group.</p>
    public let targetSelection: IotClientTypes.TargetSelection?
    /// <p>A list of things and thing groups to which the job should be sent.</p>
    public let targets: [Swift.String]?
    /// <p>Specifies the amount of time each device has to finish its execution of the job. The timer
    ///            is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job
    ///            execution status is not set to another terminal state before the time expires, it will be
    ///            automatically set to <code>TIMED_OUT</code>.</p>
    public let timeoutConfig: IotClientTypes.TimeoutConfig?

    public init (
        abortConfig: IotClientTypes.AbortConfig? = nil,
        description: Swift.String? = nil,
        document: Swift.String? = nil,
        documentSource: Swift.String? = nil,
        jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig? = nil,
        jobId: Swift.String? = nil,
        jobTemplateArn: Swift.String? = nil,
        namespaceId: Swift.String? = nil,
        presignedUrlConfig: IotClientTypes.PresignedUrlConfig? = nil,
        tags: [IotClientTypes.Tag]? = nil,
        targetSelection: IotClientTypes.TargetSelection? = nil,
        targets: [Swift.String]? = nil,
        timeoutConfig: IotClientTypes.TimeoutConfig? = nil
    )
    {
        self.abortConfig = abortConfig
        self.description = description
        self.document = document
        self.documentSource = documentSource
        self.jobExecutionsRolloutConfig = jobExecutionsRolloutConfig
        self.jobId = jobId
        self.jobTemplateArn = jobTemplateArn
        self.namespaceId = namespaceId
        self.presignedUrlConfig = presignedUrlConfig
        self.tags = tags
        self.targetSelection = targetSelection
        self.targets = targets
        self.timeoutConfig = timeoutConfig
    }
}

struct CreateJobInputBody: Swift.Equatable {
    public let targets: [Swift.String]?
    public let documentSource: Swift.String?
    public let document: Swift.String?
    public let description: Swift.String?
    public let presignedUrlConfig: IotClientTypes.PresignedUrlConfig?
    public let targetSelection: IotClientTypes.TargetSelection?
    public let jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig?
    public let abortConfig: IotClientTypes.AbortConfig?
    public let timeoutConfig: IotClientTypes.TimeoutConfig?
    public let tags: [IotClientTypes.Tag]?
    public let namespaceId: Swift.String?
    public let jobTemplateArn: Swift.String?
}

extension CreateJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortConfig
        case description
        case document
        case documentSource
        case jobExecutionsRolloutConfig
        case jobTemplateArn
        case namespaceId
        case presignedUrlConfig
        case tags
        case targetSelection
        case targets
        case timeoutConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targets)
        var targetsDecoded0:[Swift.String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Swift.String]()
            for string0 in targetsContainer {
                if let string0 = string0 {
                    targetsDecoded0?.append(string0)
                }
            }
        }
        targets = targetsDecoded0
        let documentSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentSource)
        documentSource = documentSourceDecoded
        let documentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .document)
        document = documentDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let presignedUrlConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.PresignedUrlConfig.self, forKey: .presignedUrlConfig)
        presignedUrlConfig = presignedUrlConfigDecoded
        let targetSelectionDecoded = try containerValues.decodeIfPresent(IotClientTypes.TargetSelection.self, forKey: .targetSelection)
        targetSelection = targetSelectionDecoded
        let jobExecutionsRolloutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobExecutionsRolloutConfig.self, forKey: .jobExecutionsRolloutConfig)
        jobExecutionsRolloutConfig = jobExecutionsRolloutConfigDecoded
        let abortConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AbortConfig.self, forKey: .abortConfig)
        abortConfig = abortConfigDecoded
        let timeoutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.TimeoutConfig.self, forKey: .timeoutConfig)
        timeoutConfig = timeoutConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let namespaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceId)
        namespaceId = namespaceIdDecoded
        let jobTemplateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTemplateArn)
        jobTemplateArn = jobTemplateArnDecoded
    }
}

extension CreateJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateJobOutputError: Swift.Error, Swift.Equatable {
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateJobOutputResponse(description: \(Swift.String(describing: description)), jobArn: \(Swift.String(describing: jobArn)), jobId: \(Swift.String(describing: jobId)))"}
}

extension CreateJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.description = output.description
            self.jobArn = output.jobArn
            self.jobId = output.jobId
        } else {
            self.description = nil
            self.jobArn = nil
            self.jobId = nil
        }
    }
}

public struct CreateJobOutputResponse: Swift.Equatable {
    /// <p>The job description.</p>
    public let description: Swift.String?
    /// <p>The job ARN.</p>
    public let jobArn: Swift.String?
    /// <p>The unique identifier you assigned to this job.</p>
    public let jobId: Swift.String?

    public init (
        description: Swift.String? = nil,
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.description = description
        self.jobArn = jobArn
        self.jobId = jobId
    }
}

struct CreateJobOutputResponseBody: Swift.Equatable {
    public let jobArn: Swift.String?
    public let jobId: Swift.String?
    public let description: Swift.String?
}

extension CreateJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case jobArn
        case jobId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

public struct CreateJobTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateJobTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateJobTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateJobTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateJobTemplateOutputError>
}

extension CreateJobTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateJobTemplateInput(abortConfig: \(Swift.String(describing: abortConfig)), description: \(Swift.String(describing: description)), document: \(Swift.String(describing: document)), documentSource: \(Swift.String(describing: documentSource)), jobArn: \(Swift.String(describing: jobArn)), jobExecutionsRolloutConfig: \(Swift.String(describing: jobExecutionsRolloutConfig)), jobTemplateId: \(Swift.String(describing: jobTemplateId)), presignedUrlConfig: \(Swift.String(describing: presignedUrlConfig)), tags: \(Swift.String(describing: tags)), timeoutConfig: \(Swift.String(describing: timeoutConfig)))"}
}

extension CreateJobTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortConfig
        case description
        case document
        case documentSource
        case jobArn
        case jobExecutionsRolloutConfig
        case presignedUrlConfig
        case tags
        case timeoutConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let abortConfig = abortConfig {
            try encodeContainer.encode(abortConfig, forKey: .abortConfig)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let document = document {
            try encodeContainer.encode(document, forKey: .document)
        }
        if let documentSource = documentSource {
            try encodeContainer.encode(documentSource, forKey: .documentSource)
        }
        if let jobArn = jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobExecutionsRolloutConfig = jobExecutionsRolloutConfig {
            try encodeContainer.encode(jobExecutionsRolloutConfig, forKey: .jobExecutionsRolloutConfig)
        }
        if let presignedUrlConfig = presignedUrlConfig {
            try encodeContainer.encode(presignedUrlConfig, forKey: .presignedUrlConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let timeoutConfig = timeoutConfig {
            try encodeContainer.encode(timeoutConfig, forKey: .timeoutConfig)
        }
    }
}

public struct CreateJobTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateJobTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateJobTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateJobTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateJobTemplateOutputError>
}

public struct CreateJobTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateJobTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateJobTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateJobTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateJobTemplateOutputError>
}

public struct CreateJobTemplateInput: Swift.Equatable {
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    public let abortConfig: IotClientTypes.AbortConfig?
    /// <p>A description of the job document.</p>
    public let description: Swift.String?
    /// <p>The job document. Required if you don't specify a value for <code>documentSource</code>.</p>
    public let document: Swift.String?
    /// <p>An S3 link to the job document to use in the template. Required if you don't specify a value for <code>document</code>.</p>
    ///         <note>
    ///             <p>If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document.</p>
    ///             <p>The placeholder link is of the following form:</p>
    ///             <p>
    ///                <code>${aws:iot:s3-presigned-url:https://s3.amazonaws.com/<i>bucket</i>/<i>key</i>}</code>
    ///             </p>
    ///             <p>where <i>bucket</i> is your bucket name and <i>key</i> is the object in the bucket to which you are linking.</p>
    ///         </note>
    public let documentSource: Swift.String?
    /// <p>The ARN of the job to use as the basis for the job template.</p>
    public let jobArn: Swift.String?
    /// <p>Allows you to create a staged rollout of a job.</p>
    public let jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig?
    /// <p>A unique identifier for the job template. We recommend using a UUID. Alpha-numeric
    ///         characters, "-", and "_" are valid for use here.</p>
    public let jobTemplateId: Swift.String?
    /// <p>Configuration for pre-signed S3 URLs.</p>
    public let presignedUrlConfig: IotClientTypes.PresignedUrlConfig?
    /// <p>Metadata that can be used to manage the job template.</p>
    public let tags: [IotClientTypes.Tag]?
    /// <p>Specifies the amount of time each device has to finish its execution of the job.  A timer
    ///            is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job
    ///            execution status is not set to another terminal state before the timer expires, it will
    ///            be automatically set to <code>TIMED_OUT</code>.</p>
    public let timeoutConfig: IotClientTypes.TimeoutConfig?

    public init (
        abortConfig: IotClientTypes.AbortConfig? = nil,
        description: Swift.String? = nil,
        document: Swift.String? = nil,
        documentSource: Swift.String? = nil,
        jobArn: Swift.String? = nil,
        jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig? = nil,
        jobTemplateId: Swift.String? = nil,
        presignedUrlConfig: IotClientTypes.PresignedUrlConfig? = nil,
        tags: [IotClientTypes.Tag]? = nil,
        timeoutConfig: IotClientTypes.TimeoutConfig? = nil
    )
    {
        self.abortConfig = abortConfig
        self.description = description
        self.document = document
        self.documentSource = documentSource
        self.jobArn = jobArn
        self.jobExecutionsRolloutConfig = jobExecutionsRolloutConfig
        self.jobTemplateId = jobTemplateId
        self.presignedUrlConfig = presignedUrlConfig
        self.tags = tags
        self.timeoutConfig = timeoutConfig
    }
}

struct CreateJobTemplateInputBody: Swift.Equatable {
    public let jobArn: Swift.String?
    public let documentSource: Swift.String?
    public let document: Swift.String?
    public let description: Swift.String?
    public let presignedUrlConfig: IotClientTypes.PresignedUrlConfig?
    public let jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig?
    public let abortConfig: IotClientTypes.AbortConfig?
    public let timeoutConfig: IotClientTypes.TimeoutConfig?
    public let tags: [IotClientTypes.Tag]?
}

extension CreateJobTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortConfig
        case description
        case document
        case documentSource
        case jobArn
        case jobExecutionsRolloutConfig
        case presignedUrlConfig
        case tags
        case timeoutConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let documentSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentSource)
        documentSource = documentSourceDecoded
        let documentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .document)
        document = documentDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let presignedUrlConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.PresignedUrlConfig.self, forKey: .presignedUrlConfig)
        presignedUrlConfig = presignedUrlConfigDecoded
        let jobExecutionsRolloutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobExecutionsRolloutConfig.self, forKey: .jobExecutionsRolloutConfig)
        jobExecutionsRolloutConfig = jobExecutionsRolloutConfigDecoded
        let abortConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AbortConfig.self, forKey: .abortConfig)
        abortConfig = abortConfigDecoded
        let timeoutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.TimeoutConfig.self, forKey: .timeoutConfig)
        timeoutConfig = timeoutConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateJobTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateJobTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateJobTemplateOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateJobTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateJobTemplateOutputResponse(jobTemplateArn: \(Swift.String(describing: jobTemplateArn)), jobTemplateId: \(Swift.String(describing: jobTemplateId)))"}
}

extension CreateJobTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateJobTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobTemplateArn = output.jobTemplateArn
            self.jobTemplateId = output.jobTemplateId
        } else {
            self.jobTemplateArn = nil
            self.jobTemplateId = nil
        }
    }
}

public struct CreateJobTemplateOutputResponse: Swift.Equatable {
    /// <p>The ARN of the job template.</p>
    public let jobTemplateArn: Swift.String?
    /// <p>The unique identifier of the job template.</p>
    public let jobTemplateId: Swift.String?

    public init (
        jobTemplateArn: Swift.String? = nil,
        jobTemplateId: Swift.String? = nil
    )
    {
        self.jobTemplateArn = jobTemplateArn
        self.jobTemplateId = jobTemplateId
    }
}

struct CreateJobTemplateOutputResponseBody: Swift.Equatable {
    public let jobTemplateArn: Swift.String?
    public let jobTemplateId: Swift.String?
}

extension CreateJobTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobTemplateArn
        case jobTemplateId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobTemplateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTemplateArn)
        jobTemplateArn = jobTemplateArnDecoded
        let jobTemplateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTemplateId)
        jobTemplateId = jobTemplateIdDecoded
    }
}

extension CreateKeysAndCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateKeysAndCertificateInput(setAsActive: \(Swift.String(describing: setAsActive)))"}
}

extension CreateKeysAndCertificateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct CreateKeysAndCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateKeysAndCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateKeysAndCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateKeysAndCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateKeysAndCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateKeysAndCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateKeysAndCertificateOutputError>
}

public struct CreateKeysAndCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateKeysAndCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateKeysAndCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateKeysAndCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.setAsActive != false {
            let setAsActiveQueryItem = ClientRuntime.URLQueryItem(name: "setAsActive".urlPercentEncoding(), value: Swift.String(input.operationInput.setAsActive).urlPercentEncoding())
            input.builder.withQueryItem(setAsActiveQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateKeysAndCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateKeysAndCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateKeysAndCertificateOutputError>
}

/// <p>The input for the CreateKeysAndCertificate operation.</p>
public struct CreateKeysAndCertificateInput: Swift.Equatable {
    /// <p>Specifies whether the certificate is active.</p>
    public let setAsActive: Swift.Bool

    public init (
        setAsActive: Swift.Bool = false
    )
    {
        self.setAsActive = setAsActive
    }
}

struct CreateKeysAndCertificateInputBody: Swift.Equatable {
}

extension CreateKeysAndCertificateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CreateKeysAndCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateKeysAndCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateKeysAndCertificateOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateKeysAndCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateKeysAndCertificateOutputResponse(certificateArn: \(Swift.String(describing: certificateArn)), certificateId: \(Swift.String(describing: certificateId)), certificatePem: \(Swift.String(describing: certificatePem)), keyPair: \(Swift.String(describing: keyPair)))"}
}

extension CreateKeysAndCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateKeysAndCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificateArn = output.certificateArn
            self.certificateId = output.certificateId
            self.certificatePem = output.certificatePem
            self.keyPair = output.keyPair
        } else {
            self.certificateArn = nil
            self.certificateId = nil
            self.certificatePem = nil
            self.keyPair = nil
        }
    }
}

/// <p>The output of the CreateKeysAndCertificate operation.</p>
public struct CreateKeysAndCertificateOutputResponse: Swift.Equatable {
    /// <p>The ARN of the certificate.</p>
    public let certificateArn: Swift.String?
    /// <p>The ID of the certificate. AWS IoT issues a default subject name for the certificate
    ///          (for example, AWS IoT Certificate).</p>
    public let certificateId: Swift.String?
    /// <p>The certificate data, in PEM format.</p>
    public let certificatePem: Swift.String?
    /// <p>The generated key pair.</p>
    public let keyPair: IotClientTypes.KeyPair?

    public init (
        certificateArn: Swift.String? = nil,
        certificateId: Swift.String? = nil,
        certificatePem: Swift.String? = nil,
        keyPair: IotClientTypes.KeyPair? = nil
    )
    {
        self.certificateArn = certificateArn
        self.certificateId = certificateId
        self.certificatePem = certificatePem
        self.keyPair = keyPair
    }
}

struct CreateKeysAndCertificateOutputResponseBody: Swift.Equatable {
    public let certificateArn: Swift.String?
    public let certificateId: Swift.String?
    public let certificatePem: Swift.String?
    public let keyPair: IotClientTypes.KeyPair?
}

extension CreateKeysAndCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn
        case certificateId
        case certificatePem
        case keyPair
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let certificatePemDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificatePem)
        certificatePem = certificatePemDecoded
        let keyPairDecoded = try containerValues.decodeIfPresent(IotClientTypes.KeyPair.self, forKey: .keyPair)
        keyPair = keyPairDecoded
    }
}

public struct CreateMitigationActionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMitigationActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMitigationActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMitigationActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMitigationActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMitigationActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMitigationActionOutputError>
}

extension CreateMitigationActionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMitigationActionInput(actionName: \(Swift.String(describing: actionName)), actionParams: \(Swift.String(describing: actionParams)), roleArn: \(Swift.String(describing: roleArn)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateMitigationActionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionParams
        case roleArn
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionParams = actionParams {
            try encodeContainer.encode(actionParams, forKey: .actionParams)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateMitigationActionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMitigationActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMitigationActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMitigationActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMitigationActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMitigationActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMitigationActionOutputError>
}

public struct CreateMitigationActionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMitigationActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMitigationActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMitigationActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMitigationActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMitigationActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMitigationActionOutputError>
}

public struct CreateMitigationActionInput: Swift.Equatable {
    /// <p>A friendly name for the action. Choose a friendly name that accurately describes the action (for example, <code>EnableLoggingAction</code>).</p>
    public let actionName: Swift.String?
    /// <p>Defines the type of action and the parameters for that action.</p>
    public let actionParams: IotClientTypes.MitigationActionParams?
    /// <p>The ARN of the IAM role that is used to apply the mitigation action.</p>
    public let roleArn: Swift.String?
    /// <p>Metadata that can be used to manage the mitigation action.</p>
    public let tags: [IotClientTypes.Tag]?

    public init (
        actionName: Swift.String? = nil,
        actionParams: IotClientTypes.MitigationActionParams? = nil,
        roleArn: Swift.String? = nil,
        tags: [IotClientTypes.Tag]? = nil
    )
    {
        self.actionName = actionName
        self.actionParams = actionParams
        self.roleArn = roleArn
        self.tags = tags
    }
}

struct CreateMitigationActionInputBody: Swift.Equatable {
    public let roleArn: Swift.String?
    public let actionParams: IotClientTypes.MitigationActionParams?
    public let tags: [IotClientTypes.Tag]?
}

extension CreateMitigationActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionParams
        case roleArn
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let actionParamsDecoded = try containerValues.decodeIfPresent(IotClientTypes.MitigationActionParams.self, forKey: .actionParams)
        actionParams = actionParamsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateMitigationActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMitigationActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMitigationActionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMitigationActionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMitigationActionOutputResponse(actionArn: \(Swift.String(describing: actionArn)), actionId: \(Swift.String(describing: actionId)))"}
}

extension CreateMitigationActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateMitigationActionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionArn = output.actionArn
            self.actionId = output.actionId
        } else {
            self.actionArn = nil
            self.actionId = nil
        }
    }
}

public struct CreateMitigationActionOutputResponse: Swift.Equatable {
    /// <p>The ARN for the new mitigation action.</p>
    public let actionArn: Swift.String?
    /// <p>A unique identifier for the new mitigation action.</p>
    public let actionId: Swift.String?

    public init (
        actionArn: Swift.String? = nil,
        actionId: Swift.String? = nil
    )
    {
        self.actionArn = actionArn
        self.actionId = actionId
    }
}

struct CreateMitigationActionOutputResponseBody: Swift.Equatable {
    public let actionArn: Swift.String?
    public let actionId: Swift.String?
}

extension CreateMitigationActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionArn
        case actionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionArn)
        actionArn = actionArnDecoded
        let actionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionId)
        actionId = actionIdDecoded
    }
}

public struct CreateOTAUpdateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateOTAUpdateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateOTAUpdateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateOTAUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateOTAUpdateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateOTAUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateOTAUpdateOutputError>
}

extension CreateOTAUpdateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateOTAUpdateInput(additionalParameters: \(Swift.String(describing: additionalParameters)), awsJobAbortConfig: \(Swift.String(describing: awsJobAbortConfig)), awsJobExecutionsRolloutConfig: \(Swift.String(describing: awsJobExecutionsRolloutConfig)), awsJobPresignedUrlConfig: \(Swift.String(describing: awsJobPresignedUrlConfig)), awsJobTimeoutConfig: \(Swift.String(describing: awsJobTimeoutConfig)), description: \(Swift.String(describing: description)), files: \(Swift.String(describing: files)), otaUpdateId: \(Swift.String(describing: otaUpdateId)), protocols: \(Swift.String(describing: protocols)), roleArn: \(Swift.String(describing: roleArn)), tags: \(Swift.String(describing: tags)), targetSelection: \(Swift.String(describing: targetSelection)), targets: \(Swift.String(describing: targets)))"}
}

extension CreateOTAUpdateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalParameters
        case awsJobAbortConfig
        case awsJobExecutionsRolloutConfig
        case awsJobPresignedUrlConfig
        case awsJobTimeoutConfig
        case description
        case files
        case protocols
        case roleArn
        case tags
        case targetSelection
        case targets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalParameters = additionalParameters {
            var additionalParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .additionalParameters)
            for (dictKey0, additionalparametermap0) in additionalParameters {
                try additionalParametersContainer.encode(additionalparametermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let awsJobAbortConfig = awsJobAbortConfig {
            try encodeContainer.encode(awsJobAbortConfig, forKey: .awsJobAbortConfig)
        }
        if let awsJobExecutionsRolloutConfig = awsJobExecutionsRolloutConfig {
            try encodeContainer.encode(awsJobExecutionsRolloutConfig, forKey: .awsJobExecutionsRolloutConfig)
        }
        if let awsJobPresignedUrlConfig = awsJobPresignedUrlConfig {
            try encodeContainer.encode(awsJobPresignedUrlConfig, forKey: .awsJobPresignedUrlConfig)
        }
        if let awsJobTimeoutConfig = awsJobTimeoutConfig {
            try encodeContainer.encode(awsJobTimeoutConfig, forKey: .awsJobTimeoutConfig)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let files = files {
            var filesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .files)
            for otaupdatefiles0 in files {
                try filesContainer.encode(otaupdatefiles0)
            }
        }
        if let protocols = protocols {
            var protocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protocols)
            for protocols0 in protocols {
                try protocolsContainer.encode(protocols0.rawValue)
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let targetSelection = targetSelection {
            try encodeContainer.encode(targetSelection.rawValue, forKey: .targetSelection)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for targets0 in targets {
                try targetsContainer.encode(targets0)
            }
        }
    }
}

public struct CreateOTAUpdateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateOTAUpdateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateOTAUpdateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateOTAUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateOTAUpdateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateOTAUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateOTAUpdateOutputError>
}

public struct CreateOTAUpdateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateOTAUpdateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateOTAUpdateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateOTAUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateOTAUpdateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateOTAUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateOTAUpdateOutputError>
}

public struct CreateOTAUpdateInput: Swift.Equatable {
    /// <p>A list of additional OTA update parameters which are name-value pairs.</p>
    public let additionalParameters: [Swift.String:Swift.String]?
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    public let awsJobAbortConfig: IotClientTypes.AwsJobAbortConfig?
    /// <p>Configuration for the rollout of OTA updates.</p>
    public let awsJobExecutionsRolloutConfig: IotClientTypes.AwsJobExecutionsRolloutConfig?
    /// <p>Configuration information for pre-signed URLs.</p>
    public let awsJobPresignedUrlConfig: IotClientTypes.AwsJobPresignedUrlConfig?
    /// <p>Specifies the amount of time each device has to finish its execution of the job.  A timer is
    ///             started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution
    ///             status is not set to another terminal state before the timer expires, it will be automatically
    ///             set to <code>TIMED_OUT</code>.</p>
    public let awsJobTimeoutConfig: IotClientTypes.AwsJobTimeoutConfig?
    /// <p>The description of the OTA update.</p>
    public let description: Swift.String?
    /// <p>The files to be streamed by the OTA update.</p>
    public let files: [IotClientTypes.OTAUpdateFile]?
    /// <p>The ID of the OTA update to be created.</p>
    public let otaUpdateId: Swift.String?
    /// <p>The protocol used to transfer the OTA update image. Valid values are [HTTP], [MQTT], [HTTP, MQTT]. When both
    ///            HTTP and MQTT are specified, the target device can choose the protocol.</p>
    public let protocols: [IotClientTypes.ModelProtocol]?
    /// <p>The IAM role that grants AWS IoT access to the Amazon S3, AWS IoT jobs and AWS Code Signing resources
    ///             to create an OTA update job.</p>
    public let roleArn: Swift.String?
    /// <p>Metadata which can be used to manage updates.</p>
    public let tags: [IotClientTypes.Tag]?
    /// <p>Specifies whether the update will continue to run (CONTINUOUS), or will be complete after all the things
    ///             specified as targets have completed the update (SNAPSHOT). If continuous, the update may also be run on a
    ///             thing when a change is detected in a target. For example, an update will run on a thing when the thing is
    ///             added to a target group, even after the update was completed by all things originally in the group. Valid
    ///             values: CONTINUOUS | SNAPSHOT.</p>
    public let targetSelection: IotClientTypes.TargetSelection?
    /// <p>The devices targeted to receive OTA updates.</p>
    public let targets: [Swift.String]?

    public init (
        additionalParameters: [Swift.String:Swift.String]? = nil,
        awsJobAbortConfig: IotClientTypes.AwsJobAbortConfig? = nil,
        awsJobExecutionsRolloutConfig: IotClientTypes.AwsJobExecutionsRolloutConfig? = nil,
        awsJobPresignedUrlConfig: IotClientTypes.AwsJobPresignedUrlConfig? = nil,
        awsJobTimeoutConfig: IotClientTypes.AwsJobTimeoutConfig? = nil,
        description: Swift.String? = nil,
        files: [IotClientTypes.OTAUpdateFile]? = nil,
        otaUpdateId: Swift.String? = nil,
        protocols: [IotClientTypes.ModelProtocol]? = nil,
        roleArn: Swift.String? = nil,
        tags: [IotClientTypes.Tag]? = nil,
        targetSelection: IotClientTypes.TargetSelection? = nil,
        targets: [Swift.String]? = nil
    )
    {
        self.additionalParameters = additionalParameters
        self.awsJobAbortConfig = awsJobAbortConfig
        self.awsJobExecutionsRolloutConfig = awsJobExecutionsRolloutConfig
        self.awsJobPresignedUrlConfig = awsJobPresignedUrlConfig
        self.awsJobTimeoutConfig = awsJobTimeoutConfig
        self.description = description
        self.files = files
        self.otaUpdateId = otaUpdateId
        self.protocols = protocols
        self.roleArn = roleArn
        self.tags = tags
        self.targetSelection = targetSelection
        self.targets = targets
    }
}

struct CreateOTAUpdateInputBody: Swift.Equatable {
    public let description: Swift.String?
    public let targets: [Swift.String]?
    public let protocols: [IotClientTypes.ModelProtocol]?
    public let targetSelection: IotClientTypes.TargetSelection?
    public let awsJobExecutionsRolloutConfig: IotClientTypes.AwsJobExecutionsRolloutConfig?
    public let awsJobPresignedUrlConfig: IotClientTypes.AwsJobPresignedUrlConfig?
    public let awsJobAbortConfig: IotClientTypes.AwsJobAbortConfig?
    public let awsJobTimeoutConfig: IotClientTypes.AwsJobTimeoutConfig?
    public let files: [IotClientTypes.OTAUpdateFile]?
    public let roleArn: Swift.String?
    public let additionalParameters: [Swift.String:Swift.String]?
    public let tags: [IotClientTypes.Tag]?
}

extension CreateOTAUpdateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalParameters
        case awsJobAbortConfig
        case awsJobExecutionsRolloutConfig
        case awsJobPresignedUrlConfig
        case awsJobTimeoutConfig
        case description
        case files
        case protocols
        case roleArn
        case tags
        case targetSelection
        case targets
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let targetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targets)
        var targetsDecoded0:[Swift.String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Swift.String]()
            for string0 in targetsContainer {
                if let string0 = string0 {
                    targetsDecoded0?.append(string0)
                }
            }
        }
        targets = targetsDecoded0
        let protocolsContainer = try containerValues.decodeIfPresent([IotClientTypes.ModelProtocol?].self, forKey: .protocols)
        var protocolsDecoded0:[IotClientTypes.ModelProtocol]? = nil
        if let protocolsContainer = protocolsContainer {
            protocolsDecoded0 = [IotClientTypes.ModelProtocol]()
            for string0 in protocolsContainer {
                if let string0 = string0 {
                    protocolsDecoded0?.append(string0)
                }
            }
        }
        protocols = protocolsDecoded0
        let targetSelectionDecoded = try containerValues.decodeIfPresent(IotClientTypes.TargetSelection.self, forKey: .targetSelection)
        targetSelection = targetSelectionDecoded
        let awsJobExecutionsRolloutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AwsJobExecutionsRolloutConfig.self, forKey: .awsJobExecutionsRolloutConfig)
        awsJobExecutionsRolloutConfig = awsJobExecutionsRolloutConfigDecoded
        let awsJobPresignedUrlConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AwsJobPresignedUrlConfig.self, forKey: .awsJobPresignedUrlConfig)
        awsJobPresignedUrlConfig = awsJobPresignedUrlConfigDecoded
        let awsJobAbortConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AwsJobAbortConfig.self, forKey: .awsJobAbortConfig)
        awsJobAbortConfig = awsJobAbortConfigDecoded
        let awsJobTimeoutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AwsJobTimeoutConfig.self, forKey: .awsJobTimeoutConfig)
        awsJobTimeoutConfig = awsJobTimeoutConfigDecoded
        let filesContainer = try containerValues.decodeIfPresent([IotClientTypes.OTAUpdateFile?].self, forKey: .files)
        var filesDecoded0:[IotClientTypes.OTAUpdateFile]? = nil
        if let filesContainer = filesContainer {
            filesDecoded0 = [IotClientTypes.OTAUpdateFile]()
            for structure0 in filesContainer {
                if let structure0 = structure0 {
                    filesDecoded0?.append(structure0)
                }
            }
        }
        files = filesDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let additionalParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .additionalParameters)
        var additionalParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let additionalParametersContainer = additionalParametersContainer {
            additionalParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, value0) in additionalParametersContainer {
                if let value0 = value0 {
                    additionalParametersDecoded0?[key0] = value0
                }
            }
        }
        additionalParameters = additionalParametersDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateOTAUpdateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateOTAUpdateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateOTAUpdateOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateOTAUpdateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateOTAUpdateOutputResponse(awsIotJobArn: \(Swift.String(describing: awsIotJobArn)), awsIotJobId: \(Swift.String(describing: awsIotJobId)), otaUpdateArn: \(Swift.String(describing: otaUpdateArn)), otaUpdateId: \(Swift.String(describing: otaUpdateId)), otaUpdateStatus: \(Swift.String(describing: otaUpdateStatus)))"}
}

extension CreateOTAUpdateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateOTAUpdateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.awsIotJobArn = output.awsIotJobArn
            self.awsIotJobId = output.awsIotJobId
            self.otaUpdateArn = output.otaUpdateArn
            self.otaUpdateId = output.otaUpdateId
            self.otaUpdateStatus = output.otaUpdateStatus
        } else {
            self.awsIotJobArn = nil
            self.awsIotJobId = nil
            self.otaUpdateArn = nil
            self.otaUpdateId = nil
            self.otaUpdateStatus = nil
        }
    }
}

public struct CreateOTAUpdateOutputResponse: Swift.Equatable {
    /// <p>The AWS IoT job ARN associated with the OTA update.</p>
    public let awsIotJobArn: Swift.String?
    /// <p>The AWS IoT job ID associated with the OTA update.</p>
    public let awsIotJobId: Swift.String?
    /// <p>The OTA update ARN.</p>
    public let otaUpdateArn: Swift.String?
    /// <p>The OTA update ID.</p>
    public let otaUpdateId: Swift.String?
    /// <p>The OTA update status.</p>
    public let otaUpdateStatus: IotClientTypes.OTAUpdateStatus?

    public init (
        awsIotJobArn: Swift.String? = nil,
        awsIotJobId: Swift.String? = nil,
        otaUpdateArn: Swift.String? = nil,
        otaUpdateId: Swift.String? = nil,
        otaUpdateStatus: IotClientTypes.OTAUpdateStatus? = nil
    )
    {
        self.awsIotJobArn = awsIotJobArn
        self.awsIotJobId = awsIotJobId
        self.otaUpdateArn = otaUpdateArn
        self.otaUpdateId = otaUpdateId
        self.otaUpdateStatus = otaUpdateStatus
    }
}

struct CreateOTAUpdateOutputResponseBody: Swift.Equatable {
    public let otaUpdateId: Swift.String?
    public let awsIotJobId: Swift.String?
    public let otaUpdateArn: Swift.String?
    public let awsIotJobArn: Swift.String?
    public let otaUpdateStatus: IotClientTypes.OTAUpdateStatus?
}

extension CreateOTAUpdateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsIotJobArn
        case awsIotJobId
        case otaUpdateArn
        case otaUpdateId
        case otaUpdateStatus
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let otaUpdateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .otaUpdateId)
        otaUpdateId = otaUpdateIdDecoded
        let awsIotJobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsIotJobId)
        awsIotJobId = awsIotJobIdDecoded
        let otaUpdateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .otaUpdateArn)
        otaUpdateArn = otaUpdateArnDecoded
        let awsIotJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsIotJobArn)
        awsIotJobArn = awsIotJobArnDecoded
        let otaUpdateStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.OTAUpdateStatus.self, forKey: .otaUpdateStatus)
        otaUpdateStatus = otaUpdateStatusDecoded
    }
}

public struct CreatePolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePolicyOutputError>
}

extension CreatePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePolicyInput(policyDocument: \(Swift.String(describing: policyDocument)), policyName: \(Swift.String(describing: policyName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreatePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyDocument = policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreatePolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePolicyOutputError>
}

public struct CreatePolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePolicyOutputError>
}

/// <p>The input for the CreatePolicy operation.</p>
public struct CreatePolicyInput: Swift.Equatable {
    /// <p>The JSON document that describes the policy. <b>policyDocument</b> must have a minimum length of 1, with a maximum length of
    ///          2048, excluding whitespace.</p>
    public let policyDocument: Swift.String?
    /// <p>The policy name.</p>
    public let policyName: Swift.String?
    /// <p>Metadata which can be used to manage the policy.</p>
    ///          <note>
    ///             <p>For URI Request parameters use format: ...key1=value1&key2=value2...</p>
    ///             <p>For the CLI command-line parameter use format: &&tags
    ///             "key1=value1&key2=value2..."</p>
    ///             <p>For the cli-input-json file use format: "tags":
    ///             "key1=value1&key2=value2..."</p>
    ///          </note>
    public let tags: [IotClientTypes.Tag]?

    public init (
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil,
        tags: [IotClientTypes.Tag]? = nil
    )
    {
        self.policyDocument = policyDocument
        self.policyName = policyName
        self.tags = tags
    }
}

struct CreatePolicyInputBody: Swift.Equatable {
    public let policyDocument: Swift.String?
    public let tags: [IotClientTypes.Tag]?
}

extension CreatePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreatePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyException" : self = .malformedPolicyException(try MalformedPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePolicyOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case malformedPolicyException(MalformedPolicyException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePolicyOutputResponse(policyArn: \(Swift.String(describing: policyArn)), policyDocument: \(Swift.String(describing: policyDocument)), policyName: \(Swift.String(describing: policyName)), policyVersionId: \(Swift.String(describing: policyVersionId)))"}
}

extension CreatePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreatePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policyArn = output.policyArn
            self.policyDocument = output.policyDocument
            self.policyName = output.policyName
            self.policyVersionId = output.policyVersionId
        } else {
            self.policyArn = nil
            self.policyDocument = nil
            self.policyName = nil
            self.policyVersionId = nil
        }
    }
}

/// <p>The output from the CreatePolicy operation.</p>
public struct CreatePolicyOutputResponse: Swift.Equatable {
    /// <p>The policy ARN.</p>
    public let policyArn: Swift.String?
    /// <p>The JSON document that describes the policy.</p>
    public let policyDocument: Swift.String?
    /// <p>The policy name.</p>
    public let policyName: Swift.String?
    /// <p>The policy version ID.</p>
    public let policyVersionId: Swift.String?

    public init (
        policyArn: Swift.String? = nil,
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil,
        policyVersionId: Swift.String? = nil
    )
    {
        self.policyArn = policyArn
        self.policyDocument = policyDocument
        self.policyName = policyName
        self.policyVersionId = policyVersionId
    }
}

struct CreatePolicyOutputResponseBody: Swift.Equatable {
    public let policyName: Swift.String?
    public let policyArn: Swift.String?
    public let policyDocument: Swift.String?
    public let policyVersionId: Swift.String?
}

extension CreatePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyArn
        case policyDocument
        case policyName
        case policyVersionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let policyVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyVersionId)
        policyVersionId = policyVersionIdDecoded
    }
}

public struct CreatePolicyVersionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePolicyVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePolicyVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePolicyVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePolicyVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePolicyVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePolicyVersionOutputError>
}

extension CreatePolicyVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePolicyVersionInput(policyDocument: \(Swift.String(describing: policyDocument)), policyName: \(Swift.String(describing: policyName)), setAsDefault: \(Swift.String(describing: setAsDefault)))"}
}

extension CreatePolicyVersionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyDocument = policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
    }
}

public struct CreatePolicyVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePolicyVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePolicyVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePolicyVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePolicyVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePolicyVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePolicyVersionOutputError>
}

public struct CreatePolicyVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePolicyVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePolicyVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePolicyVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.setAsDefault != false {
            let setAsDefaultQueryItem = ClientRuntime.URLQueryItem(name: "setAsDefault".urlPercentEncoding(), value: Swift.String(input.operationInput.setAsDefault).urlPercentEncoding())
            input.builder.withQueryItem(setAsDefaultQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePolicyVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePolicyVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePolicyVersionOutputError>
}

/// <p>The input for the CreatePolicyVersion operation.</p>
public struct CreatePolicyVersionInput: Swift.Equatable {
    /// <p>The JSON document that describes the policy. Minimum length of 1. Maximum length of
    ///          2048, excluding whitespace.</p>
    public let policyDocument: Swift.String?
    /// <p>The policy name.</p>
    public let policyName: Swift.String?
    /// <p>Specifies whether the policy version is set as the default. When this parameter is
    ///          true, the new policy version becomes the operative version (that is, the version that is in
    ///          effect for the certificates to which the policy is attached).</p>
    public let setAsDefault: Swift.Bool

    public init (
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil,
        setAsDefault: Swift.Bool = false
    )
    {
        self.policyDocument = policyDocument
        self.policyName = policyName
        self.setAsDefault = setAsDefault
    }
}

struct CreatePolicyVersionInputBody: Swift.Equatable {
    public let policyDocument: Swift.String?
}

extension CreatePolicyVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
    }
}

extension CreatePolicyVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePolicyVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedPolicyException" : self = .malformedPolicyException(try MalformedPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionsLimitExceededException" : self = .versionsLimitExceededException(try VersionsLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePolicyVersionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case malformedPolicyException(MalformedPolicyException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case versionsLimitExceededException(VersionsLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePolicyVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePolicyVersionOutputResponse(isDefaultVersion: \(Swift.String(describing: isDefaultVersion)), policyArn: \(Swift.String(describing: policyArn)), policyDocument: \(Swift.String(describing: policyDocument)), policyVersionId: \(Swift.String(describing: policyVersionId)))"}
}

extension CreatePolicyVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreatePolicyVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isDefaultVersion = output.isDefaultVersion
            self.policyArn = output.policyArn
            self.policyDocument = output.policyDocument
            self.policyVersionId = output.policyVersionId
        } else {
            self.isDefaultVersion = false
            self.policyArn = nil
            self.policyDocument = nil
            self.policyVersionId = nil
        }
    }
}

/// <p>The output of the CreatePolicyVersion operation.</p>
public struct CreatePolicyVersionOutputResponse: Swift.Equatable {
    /// <p>Specifies whether the policy version is the default.</p>
    public let isDefaultVersion: Swift.Bool
    /// <p>The policy ARN.</p>
    public let policyArn: Swift.String?
    /// <p>The JSON document that describes the policy.</p>
    public let policyDocument: Swift.String?
    /// <p>The policy version ID.</p>
    public let policyVersionId: Swift.String?

    public init (
        isDefaultVersion: Swift.Bool = false,
        policyArn: Swift.String? = nil,
        policyDocument: Swift.String? = nil,
        policyVersionId: Swift.String? = nil
    )
    {
        self.isDefaultVersion = isDefaultVersion
        self.policyArn = policyArn
        self.policyDocument = policyDocument
        self.policyVersionId = policyVersionId
    }
}

struct CreatePolicyVersionOutputResponseBody: Swift.Equatable {
    public let policyArn: Swift.String?
    public let policyDocument: Swift.String?
    public let policyVersionId: Swift.String?
    public let isDefaultVersion: Swift.Bool
}

extension CreatePolicyVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isDefaultVersion
        case policyArn
        case policyDocument
        case policyVersionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let policyVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyVersionId)
        policyVersionId = policyVersionIdDecoded
        let isDefaultVersionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
    }
}

extension CreateProvisioningClaimInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateProvisioningClaimInput(templateName: \(Swift.String(describing: templateName)))"}
}

extension CreateProvisioningClaimInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct CreateProvisioningClaimInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProvisioningClaimInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateProvisioningClaimInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProvisioningClaimOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateProvisioningClaimInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProvisioningClaimOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProvisioningClaimOutputError>
}

public struct CreateProvisioningClaimInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProvisioningClaimInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateProvisioningClaimInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProvisioningClaimOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateProvisioningClaimInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProvisioningClaimOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProvisioningClaimOutputError>
}

public struct CreateProvisioningClaimInput: Swift.Equatable {
    /// <p>The name of the provisioning template to use.</p>
    public let templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct CreateProvisioningClaimInputBody: Swift.Equatable {
}

extension CreateProvisioningClaimInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CreateProvisioningClaimOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateProvisioningClaimOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateProvisioningClaimOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateProvisioningClaimOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateProvisioningClaimOutputResponse(certificateId: \(Swift.String(describing: certificateId)), certificatePem: \(Swift.String(describing: certificatePem)), expiration: \(Swift.String(describing: expiration)), keyPair: \(Swift.String(describing: keyPair)))"}
}

extension CreateProvisioningClaimOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateProvisioningClaimOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificateId = output.certificateId
            self.certificatePem = output.certificatePem
            self.expiration = output.expiration
            self.keyPair = output.keyPair
        } else {
            self.certificateId = nil
            self.certificatePem = nil
            self.expiration = nil
            self.keyPair = nil
        }
    }
}

public struct CreateProvisioningClaimOutputResponse: Swift.Equatable {
    /// <p>The ID of the certificate.</p>
    public let certificateId: Swift.String?
    /// <p>The provisioning claim certificate.</p>
    public let certificatePem: Swift.String?
    /// <p>The provisioning claim expiration time.</p>
    public let expiration: ClientRuntime.Date?
    /// <p>The provisioning claim key pair.</p>
    public let keyPair: IotClientTypes.KeyPair?

    public init (
        certificateId: Swift.String? = nil,
        certificatePem: Swift.String? = nil,
        expiration: ClientRuntime.Date? = nil,
        keyPair: IotClientTypes.KeyPair? = nil
    )
    {
        self.certificateId = certificateId
        self.certificatePem = certificatePem
        self.expiration = expiration
        self.keyPair = keyPair
    }
}

struct CreateProvisioningClaimOutputResponseBody: Swift.Equatable {
    public let certificateId: Swift.String?
    public let certificatePem: Swift.String?
    public let keyPair: IotClientTypes.KeyPair?
    public let expiration: ClientRuntime.Date?
}

extension CreateProvisioningClaimOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateId
        case certificatePem
        case expiration
        case keyPair
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let certificatePemDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificatePem)
        certificatePem = certificatePemDecoded
        let keyPairDecoded = try containerValues.decodeIfPresent(IotClientTypes.KeyPair.self, forKey: .keyPair)
        keyPair = keyPairDecoded
        let expirationDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expiration)
        expiration = expirationDecoded
    }
}

public struct CreateProvisioningTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProvisioningTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateProvisioningTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProvisioningTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateProvisioningTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProvisioningTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProvisioningTemplateOutputError>
}

extension CreateProvisioningTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateProvisioningTemplateInput(description: \(Swift.String(describing: description)), enabled: \(Swift.String(describing: enabled)), preProvisioningHook: \(Swift.String(describing: preProvisioningHook)), provisioningRoleArn: \(Swift.String(describing: provisioningRoleArn)), tags: \(Swift.String(describing: tags)), templateBody: \(Swift.String(describing: templateBody)), templateName: \(Swift.String(describing: templateName)))"}
}

extension CreateProvisioningTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case enabled
        case preProvisioningHook
        case provisioningRoleArn
        case tags
        case templateBody
        case templateName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let preProvisioningHook = preProvisioningHook {
            try encodeContainer.encode(preProvisioningHook, forKey: .preProvisioningHook)
        }
        if let provisioningRoleArn = provisioningRoleArn {
            try encodeContainer.encode(provisioningRoleArn, forKey: .provisioningRoleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let templateBody = templateBody {
            try encodeContainer.encode(templateBody, forKey: .templateBody)
        }
        if let templateName = templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
    }
}

public struct CreateProvisioningTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProvisioningTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateProvisioningTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProvisioningTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateProvisioningTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProvisioningTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProvisioningTemplateOutputError>
}

public struct CreateProvisioningTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProvisioningTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateProvisioningTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProvisioningTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateProvisioningTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProvisioningTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProvisioningTemplateOutputError>
}

public struct CreateProvisioningTemplateInput: Swift.Equatable {
    /// <p>The description of the fleet provisioning template.</p>
    public let description: Swift.String?
    /// <p>True to enable the fleet provisioning template, otherwise false.</p>
    public let enabled: Swift.Bool
    /// <p>Creates a pre-provisioning hook template.</p>
    public let preProvisioningHook: IotClientTypes.ProvisioningHook?
    /// <p>The role ARN for the role associated with the fleet provisioning template. This IoT role
    ///          grants permission to provision a device.</p>
    public let provisioningRoleArn: Swift.String?
    /// <p>Metadata which can be used to manage the fleet provisioning template.</p>
    ///          <note>
    ///             <p>For URI Request parameters use format: ...key1=value1&key2=value2...</p>
    ///             <p>For the CLI command-line parameter use format: &&tags
    ///             "key1=value1&key2=value2..."</p>
    ///             <p>For the cli-input-json file use format: "tags":
    ///             "key1=value1&key2=value2..."</p>
    ///          </note>
    public let tags: [IotClientTypes.Tag]?
    /// <p>The JSON formatted contents of the fleet provisioning template.</p>
    public let templateBody: Swift.String?
    /// <p>The name of the fleet provisioning template.</p>
    public let templateName: Swift.String?

    public init (
        description: Swift.String? = nil,
        enabled: Swift.Bool = false,
        preProvisioningHook: IotClientTypes.ProvisioningHook? = nil,
        provisioningRoleArn: Swift.String? = nil,
        tags: [IotClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.description = description
        self.enabled = enabled
        self.preProvisioningHook = preProvisioningHook
        self.provisioningRoleArn = provisioningRoleArn
        self.tags = tags
        self.templateBody = templateBody
        self.templateName = templateName
    }
}

struct CreateProvisioningTemplateInputBody: Swift.Equatable {
    public let templateName: Swift.String?
    public let description: Swift.String?
    public let templateBody: Swift.String?
    public let enabled: Swift.Bool
    public let provisioningRoleArn: Swift.String?
    public let preProvisioningHook: IotClientTypes.ProvisioningHook?
    public let tags: [IotClientTypes.Tag]?
}

extension CreateProvisioningTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case enabled
        case preProvisioningHook
        case provisioningRoleArn
        case tags
        case templateBody
        case templateName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let provisioningRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provisioningRoleArn)
        provisioningRoleArn = provisioningRoleArnDecoded
        let preProvisioningHookDecoded = try containerValues.decodeIfPresent(IotClientTypes.ProvisioningHook.self, forKey: .preProvisioningHook)
        preProvisioningHook = preProvisioningHookDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateProvisioningTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateProvisioningTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateProvisioningTemplateOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateProvisioningTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateProvisioningTemplateOutputResponse(defaultVersionId: \(Swift.String(describing: defaultVersionId)), templateArn: \(Swift.String(describing: templateArn)), templateName: \(Swift.String(describing: templateName)))"}
}

extension CreateProvisioningTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateProvisioningTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.defaultVersionId = output.defaultVersionId
            self.templateArn = output.templateArn
            self.templateName = output.templateName
        } else {
            self.defaultVersionId = nil
            self.templateArn = nil
            self.templateName = nil
        }
    }
}

public struct CreateProvisioningTemplateOutputResponse: Swift.Equatable {
    /// <p>The default version of the fleet provisioning template.</p>
    public let defaultVersionId: Swift.Int?
    /// <p>The ARN that identifies the provisioning template.</p>
    public let templateArn: Swift.String?
    /// <p>The name of the fleet provisioning template.</p>
    public let templateName: Swift.String?

    public init (
        defaultVersionId: Swift.Int? = nil,
        templateArn: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.defaultVersionId = defaultVersionId
        self.templateArn = templateArn
        self.templateName = templateName
    }
}

struct CreateProvisioningTemplateOutputResponseBody: Swift.Equatable {
    public let templateArn: Swift.String?
    public let templateName: Swift.String?
    public let defaultVersionId: Swift.Int?
}

extension CreateProvisioningTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultVersionId
        case templateArn
        case templateName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
    }
}

public struct CreateProvisioningTemplateVersionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProvisioningTemplateVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateProvisioningTemplateVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProvisioningTemplateVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateProvisioningTemplateVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProvisioningTemplateVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProvisioningTemplateVersionOutputError>
}

extension CreateProvisioningTemplateVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateProvisioningTemplateVersionInput(setAsDefault: \(Swift.String(describing: setAsDefault)), templateBody: \(Swift.String(describing: templateBody)), templateName: \(Swift.String(describing: templateName)))"}
}

extension CreateProvisioningTemplateVersionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateBody
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let templateBody = templateBody {
            try encodeContainer.encode(templateBody, forKey: .templateBody)
        }
    }
}

public struct CreateProvisioningTemplateVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProvisioningTemplateVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateProvisioningTemplateVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProvisioningTemplateVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateProvisioningTemplateVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProvisioningTemplateVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProvisioningTemplateVersionOutputError>
}

public struct CreateProvisioningTemplateVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProvisioningTemplateVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateProvisioningTemplateVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProvisioningTemplateVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.setAsDefault != false {
            let setAsDefaultQueryItem = ClientRuntime.URLQueryItem(name: "setAsDefault".urlPercentEncoding(), value: Swift.String(input.operationInput.setAsDefault).urlPercentEncoding())
            input.builder.withQueryItem(setAsDefaultQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateProvisioningTemplateVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProvisioningTemplateVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProvisioningTemplateVersionOutputError>
}

public struct CreateProvisioningTemplateVersionInput: Swift.Equatable {
    /// <p>Sets a fleet provision template version as the default version.</p>
    public let setAsDefault: Swift.Bool
    /// <p>The JSON formatted contents of the fleet provisioning template.</p>
    public let templateBody: Swift.String?
    /// <p>The name of the fleet provisioning template.</p>
    public let templateName: Swift.String?

    public init (
        setAsDefault: Swift.Bool = false,
        templateBody: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.setAsDefault = setAsDefault
        self.templateBody = templateBody
        self.templateName = templateName
    }
}

struct CreateProvisioningTemplateVersionInputBody: Swift.Equatable {
    public let templateBody: Swift.String?
}

extension CreateProvisioningTemplateVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateBody
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
    }
}

extension CreateProvisioningTemplateVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateProvisioningTemplateVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingResourceUpdateException" : self = .conflictingResourceUpdateException(try ConflictingResourceUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionsLimitExceededException" : self = .versionsLimitExceededException(try VersionsLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateProvisioningTemplateVersionOutputError: Swift.Error, Swift.Equatable {
    case conflictingResourceUpdateException(ConflictingResourceUpdateException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case versionsLimitExceededException(VersionsLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateProvisioningTemplateVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateProvisioningTemplateVersionOutputResponse(isDefaultVersion: \(Swift.String(describing: isDefaultVersion)), templateArn: \(Swift.String(describing: templateArn)), templateName: \(Swift.String(describing: templateName)), versionId: \(Swift.String(describing: versionId)))"}
}

extension CreateProvisioningTemplateVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateProvisioningTemplateVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isDefaultVersion = output.isDefaultVersion
            self.templateArn = output.templateArn
            self.templateName = output.templateName
            self.versionId = output.versionId
        } else {
            self.isDefaultVersion = false
            self.templateArn = nil
            self.templateName = nil
            self.versionId = nil
        }
    }
}

public struct CreateProvisioningTemplateVersionOutputResponse: Swift.Equatable {
    /// <p>True if the fleet provisioning template version is the default version, otherwise
    ///          false.</p>
    public let isDefaultVersion: Swift.Bool
    /// <p>The ARN that identifies the provisioning template.</p>
    public let templateArn: Swift.String?
    /// <p>The name of the fleet provisioning template.</p>
    public let templateName: Swift.String?
    /// <p>The version of the fleet provisioning template.</p>
    public let versionId: Swift.Int?

    public init (
        isDefaultVersion: Swift.Bool = false,
        templateArn: Swift.String? = nil,
        templateName: Swift.String? = nil,
        versionId: Swift.Int? = nil
    )
    {
        self.isDefaultVersion = isDefaultVersion
        self.templateArn = templateArn
        self.templateName = templateName
        self.versionId = versionId
    }
}

struct CreateProvisioningTemplateVersionOutputResponseBody: Swift.Equatable {
    public let templateArn: Swift.String?
    public let templateName: Swift.String?
    public let versionId: Swift.Int?
    public let isDefaultVersion: Swift.Bool
}

extension CreateProvisioningTemplateVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isDefaultVersion
        case templateArn
        case templateName
        case versionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .versionId)
        versionId = versionIdDecoded
        let isDefaultVersionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
    }
}

public struct CreateRoleAliasInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRoleAliasInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRoleAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRoleAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRoleAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRoleAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRoleAliasOutputError>
}

extension CreateRoleAliasInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRoleAliasInput(credentialDurationSeconds: \(Swift.String(describing: credentialDurationSeconds)), roleAlias: \(Swift.String(describing: roleAlias)), roleArn: \(Swift.String(describing: roleArn)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateRoleAliasInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case credentialDurationSeconds
        case roleArn
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let credentialDurationSeconds = credentialDurationSeconds {
            try encodeContainer.encode(credentialDurationSeconds, forKey: .credentialDurationSeconds)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateRoleAliasInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRoleAliasInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRoleAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRoleAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRoleAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRoleAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRoleAliasOutputError>
}

public struct CreateRoleAliasInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRoleAliasInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRoleAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRoleAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRoleAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRoleAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRoleAliasOutputError>
}

public struct CreateRoleAliasInput: Swift.Equatable {
    /// <p>How long (in seconds) the credentials will be valid.</p>
    public let credentialDurationSeconds: Swift.Int?
    /// <p>The role alias that points to a role ARN. This allows you to change the role without
    ///          having to update the device.</p>
    public let roleAlias: Swift.String?
    /// <p>The role ARN.</p>
    public let roleArn: Swift.String?
    /// <p>Metadata which can be used to manage the role alias.</p>
    ///          <note>
    ///             <p>For URI Request parameters use format: ...key1=value1&key2=value2...</p>
    ///             <p>For the CLI command-line parameter use format: &&tags
    ///             "key1=value1&key2=value2..."</p>
    ///             <p>For the cli-input-json file use format: "tags":
    ///             "key1=value1&key2=value2..."</p>
    ///          </note>
    public let tags: [IotClientTypes.Tag]?

    public init (
        credentialDurationSeconds: Swift.Int? = nil,
        roleAlias: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [IotClientTypes.Tag]? = nil
    )
    {
        self.credentialDurationSeconds = credentialDurationSeconds
        self.roleAlias = roleAlias
        self.roleArn = roleArn
        self.tags = tags
    }
}

struct CreateRoleAliasInputBody: Swift.Equatable {
    public let roleArn: Swift.String?
    public let credentialDurationSeconds: Swift.Int?
    public let tags: [IotClientTypes.Tag]?
}

extension CreateRoleAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case credentialDurationSeconds
        case roleArn
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let credentialDurationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .credentialDurationSeconds)
        credentialDurationSeconds = credentialDurationSecondsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateRoleAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRoleAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateRoleAliasOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRoleAliasOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRoleAliasOutputResponse(roleAlias: \(Swift.String(describing: roleAlias)), roleAliasArn: \(Swift.String(describing: roleAliasArn)))"}
}

extension CreateRoleAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateRoleAliasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.roleAlias = output.roleAlias
            self.roleAliasArn = output.roleAliasArn
        } else {
            self.roleAlias = nil
            self.roleAliasArn = nil
        }
    }
}

public struct CreateRoleAliasOutputResponse: Swift.Equatable {
    /// <p>The role alias.</p>
    public let roleAlias: Swift.String?
    /// <p>The role alias ARN.</p>
    public let roleAliasArn: Swift.String?

    public init (
        roleAlias: Swift.String? = nil,
        roleAliasArn: Swift.String? = nil
    )
    {
        self.roleAlias = roleAlias
        self.roleAliasArn = roleAliasArn
    }
}

struct CreateRoleAliasOutputResponseBody: Swift.Equatable {
    public let roleAlias: Swift.String?
    public let roleAliasArn: Swift.String?
}

extension CreateRoleAliasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleAlias
        case roleAliasArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleAlias)
        roleAlias = roleAliasDecoded
        let roleAliasArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleAliasArn)
        roleAliasArn = roleAliasArnDecoded
    }
}

public struct CreateScheduledAuditInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateScheduledAuditInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateScheduledAuditInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateScheduledAuditOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateScheduledAuditInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateScheduledAuditOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateScheduledAuditOutputError>
}

extension CreateScheduledAuditInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateScheduledAuditInput(dayOfMonth: \(Swift.String(describing: dayOfMonth)), dayOfWeek: \(Swift.String(describing: dayOfWeek)), frequency: \(Swift.String(describing: frequency)), scheduledAuditName: \(Swift.String(describing: scheduledAuditName)), tags: \(Swift.String(describing: tags)), targetCheckNames: \(Swift.String(describing: targetCheckNames)))"}
}

extension CreateScheduledAuditInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dayOfMonth
        case dayOfWeek
        case frequency
        case tags
        case targetCheckNames
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dayOfMonth = dayOfMonth {
            try encodeContainer.encode(dayOfMonth, forKey: .dayOfMonth)
        }
        if let dayOfWeek = dayOfWeek {
            try encodeContainer.encode(dayOfWeek.rawValue, forKey: .dayOfWeek)
        }
        if let frequency = frequency {
            try encodeContainer.encode(frequency.rawValue, forKey: .frequency)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let targetCheckNames = targetCheckNames {
            var targetCheckNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetCheckNames)
            for targetauditchecknames0 in targetCheckNames {
                try targetCheckNamesContainer.encode(targetauditchecknames0)
            }
        }
    }
}

public struct CreateScheduledAuditInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateScheduledAuditInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateScheduledAuditInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateScheduledAuditOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateScheduledAuditInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateScheduledAuditOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateScheduledAuditOutputError>
}

public struct CreateScheduledAuditInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateScheduledAuditInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateScheduledAuditInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateScheduledAuditOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateScheduledAuditInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateScheduledAuditOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateScheduledAuditOutputError>
}

public struct CreateScheduledAuditInput: Swift.Equatable {
    /// <p>The day of the month on which the scheduled audit takes place.
    ///       This
    ///       can be "1" through "31" or "LAST". This field is required if the "frequency"
    ///       parameter is set to <code>MONTHLY</code>. If days
    ///       29
    ///       to 31 are specified, and the month
    ///       doesn't
    ///       have that many days, the audit takes place on the <code>LAST</code> day of the month.</p>
    public let dayOfMonth: Swift.String?
    /// <p>The day of the week on which the scheduled audit takes
    ///       place,
    ///       either
    ///       <code>SUN</code>,
    ///       <code>MON</code>, <code>TUE</code>, <code>WED</code>, <code>THU</code>, <code>FRI</code>, or <code>SAT</code>. This field is required if the <code>frequency</code>
    ///       parameter is set to <code>WEEKLY</code> or <code>BIWEEKLY</code>.</p>
    public let dayOfWeek: IotClientTypes.DayOfWeek?
    /// <p>How often the scheduled audit takes
    ///       place, either
    ///       <code>DAILY</code>,
    ///       <code>WEEKLY</code>, <code>BIWEEKLY</code> or <code>MONTHLY</code>. The start time of each audit is
    ///       determined by the system.</p>
    public let frequency: IotClientTypes.AuditFrequency?
    /// <p>The name you want to give to the scheduled audit. (Max. 128 chars)</p>
    public let scheduledAuditName: Swift.String?
    /// <p>Metadata that can be used to manage the scheduled audit.</p>
    public let tags: [IotClientTypes.Tag]?
    /// <p>Which checks are performed during the scheduled audit. Checks must be enabled
    ///             for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list
    ///             of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code>
    ///             to select which checks are enabled.)</p>
    public let targetCheckNames: [Swift.String]?

    public init (
        dayOfMonth: Swift.String? = nil,
        dayOfWeek: IotClientTypes.DayOfWeek? = nil,
        frequency: IotClientTypes.AuditFrequency? = nil,
        scheduledAuditName: Swift.String? = nil,
        tags: [IotClientTypes.Tag]? = nil,
        targetCheckNames: [Swift.String]? = nil
    )
    {
        self.dayOfMonth = dayOfMonth
        self.dayOfWeek = dayOfWeek
        self.frequency = frequency
        self.scheduledAuditName = scheduledAuditName
        self.tags = tags
        self.targetCheckNames = targetCheckNames
    }
}

struct CreateScheduledAuditInputBody: Swift.Equatable {
    public let frequency: IotClientTypes.AuditFrequency?
    public let dayOfMonth: Swift.String?
    public let dayOfWeek: IotClientTypes.DayOfWeek?
    public let targetCheckNames: [Swift.String]?
    public let tags: [IotClientTypes.Tag]?
}

extension CreateScheduledAuditInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dayOfMonth
        case dayOfWeek
        case frequency
        case tags
        case targetCheckNames
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let frequencyDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditFrequency.self, forKey: .frequency)
        frequency = frequencyDecoded
        let dayOfMonthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dayOfMonth)
        dayOfMonth = dayOfMonthDecoded
        let dayOfWeekDecoded = try containerValues.decodeIfPresent(IotClientTypes.DayOfWeek.self, forKey: .dayOfWeek)
        dayOfWeek = dayOfWeekDecoded
        let targetCheckNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetCheckNames)
        var targetCheckNamesDecoded0:[Swift.String]? = nil
        if let targetCheckNamesContainer = targetCheckNamesContainer {
            targetCheckNamesDecoded0 = [Swift.String]()
            for string0 in targetCheckNamesContainer {
                if let string0 = string0 {
                    targetCheckNamesDecoded0?.append(string0)
                }
            }
        }
        targetCheckNames = targetCheckNamesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateScheduledAuditOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateScheduledAuditOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateScheduledAuditOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateScheduledAuditOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateScheduledAuditOutputResponse(scheduledAuditArn: \(Swift.String(describing: scheduledAuditArn)))"}
}

extension CreateScheduledAuditOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateScheduledAuditOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.scheduledAuditArn = output.scheduledAuditArn
        } else {
            self.scheduledAuditArn = nil
        }
    }
}

public struct CreateScheduledAuditOutputResponse: Swift.Equatable {
    /// <p>The ARN of the scheduled audit.</p>
    public let scheduledAuditArn: Swift.String?

    public init (
        scheduledAuditArn: Swift.String? = nil
    )
    {
        self.scheduledAuditArn = scheduledAuditArn
    }
}

struct CreateScheduledAuditOutputResponseBody: Swift.Equatable {
    public let scheduledAuditArn: Swift.String?
}

extension CreateScheduledAuditOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduledAuditArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledAuditArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledAuditArn)
        scheduledAuditArn = scheduledAuditArnDecoded
    }
}

public struct CreateSecurityProfileInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSecurityProfileInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateSecurityProfileOutputError>
}

extension CreateSecurityProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSecurityProfileInput(additionalMetricsToRetain: \(Swift.String(describing: additionalMetricsToRetain)), additionalMetricsToRetainV2: \(Swift.String(describing: additionalMetricsToRetainV2)), alertTargets: \(Swift.String(describing: alertTargets)), behaviors: \(Swift.String(describing: behaviors)), securityProfileDescription: \(Swift.String(describing: securityProfileDescription)), securityProfileName: \(Swift.String(describing: securityProfileName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateSecurityProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalMetricsToRetain
        case additionalMetricsToRetainV2
        case alertTargets
        case behaviors
        case securityProfileDescription
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalMetricsToRetain = additionalMetricsToRetain {
            var additionalMetricsToRetainContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalMetricsToRetain)
            for additionalmetricstoretainlist0 in additionalMetricsToRetain {
                try additionalMetricsToRetainContainer.encode(additionalmetricstoretainlist0)
            }
        }
        if let additionalMetricsToRetainV2 = additionalMetricsToRetainV2 {
            var additionalMetricsToRetainV2Container = encodeContainer.nestedUnkeyedContainer(forKey: .additionalMetricsToRetainV2)
            for additionalmetricstoretainv2list0 in additionalMetricsToRetainV2 {
                try additionalMetricsToRetainV2Container.encode(additionalmetricstoretainv2list0)
            }
        }
        if let alertTargets = alertTargets {
            var alertTargetsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .alertTargets)
            for (dictKey0, alerttargets0) in alertTargets {
                try alertTargetsContainer.encode(alerttargets0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let behaviors = behaviors {
            var behaviorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .behaviors)
            for behaviors0 in behaviors {
                try behaviorsContainer.encode(behaviors0)
            }
        }
        if let securityProfileDescription = securityProfileDescription {
            try encodeContainer.encode(securityProfileDescription, forKey: .securityProfileDescription)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateSecurityProfileInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSecurityProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateSecurityProfileOutputError>
}

public struct CreateSecurityProfileInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSecurityProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateSecurityProfileOutputError>
}

public struct CreateSecurityProfileInput: Swift.Equatable {
    /// <p>
    ///             <i>Please use <a>CreateSecurityProfileRequest$additionalMetricsToRetainV2</a> instead.</i>
    ///          </p>
    ///          <p>A list of metrics whose data is retained (stored). By default, data is retained
    ///         for any metric used in the profile's <code>behaviors</code>, but it is also retained for
    ///         any metric specified here. Can be used with custom metrics; cannot be used with dimensions.</p>
    @available(*, deprecated, message: "Use additionalMetricsToRetainV2.")
    public let additionalMetricsToRetain: [Swift.String]?
    /// <p>A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's <code>behaviors</code>, but it is also retained for any metric specified here. Can be used with custom metrics; cannot be used with dimensions.</p>
    public let additionalMetricsToRetainV2: [IotClientTypes.MetricToRetain]?
    /// <p>Specifies the destinations to which alerts are sent. (Alerts are always sent to the
    ///         console.) Alerts are generated when a device (thing) violates a behavior.</p>
    public let alertTargets: [Swift.String:IotClientTypes.AlertTarget]?
    /// <p>Specifies the behaviors that, when violated by a device (thing), cause an alert.</p>
    public let behaviors: [IotClientTypes.Behavior]?
    /// <p>A description of the security profile.</p>
    public let securityProfileDescription: Swift.String?
    /// <p>The name you are giving to the security profile.</p>
    public let securityProfileName: Swift.String?
    /// <p>Metadata that can be used to manage the security profile.</p>
    public let tags: [IotClientTypes.Tag]?

    public init (
        additionalMetricsToRetain: [Swift.String]? = nil,
        additionalMetricsToRetainV2: [IotClientTypes.MetricToRetain]? = nil,
        alertTargets: [Swift.String:IotClientTypes.AlertTarget]? = nil,
        behaviors: [IotClientTypes.Behavior]? = nil,
        securityProfileDescription: Swift.String? = nil,
        securityProfileName: Swift.String? = nil,
        tags: [IotClientTypes.Tag]? = nil
    )
    {
        self.additionalMetricsToRetain = additionalMetricsToRetain
        self.additionalMetricsToRetainV2 = additionalMetricsToRetainV2
        self.alertTargets = alertTargets
        self.behaviors = behaviors
        self.securityProfileDescription = securityProfileDescription
        self.securityProfileName = securityProfileName
        self.tags = tags
    }
}

struct CreateSecurityProfileInputBody: Swift.Equatable {
    public let securityProfileDescription: Swift.String?
    public let behaviors: [IotClientTypes.Behavior]?
    public let alertTargets: [Swift.String:IotClientTypes.AlertTarget]?
    public let additionalMetricsToRetain: [Swift.String]?
    public let additionalMetricsToRetainV2: [IotClientTypes.MetricToRetain]?
    public let tags: [IotClientTypes.Tag]?
}

extension CreateSecurityProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalMetricsToRetain
        case additionalMetricsToRetainV2
        case alertTargets
        case behaviors
        case securityProfileDescription
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityProfileDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityProfileDescription)
        securityProfileDescription = securityProfileDescriptionDecoded
        let behaviorsContainer = try containerValues.decodeIfPresent([IotClientTypes.Behavior?].self, forKey: .behaviors)
        var behaviorsDecoded0:[IotClientTypes.Behavior]? = nil
        if let behaviorsContainer = behaviorsContainer {
            behaviorsDecoded0 = [IotClientTypes.Behavior]()
            for structure0 in behaviorsContainer {
                if let structure0 = structure0 {
                    behaviorsDecoded0?.append(structure0)
                }
            }
        }
        behaviors = behaviorsDecoded0
        let alertTargetsContainer = try containerValues.decodeIfPresent([Swift.String: IotClientTypes.AlertTarget?].self, forKey: .alertTargets)
        var alertTargetsDecoded0: [Swift.String:IotClientTypes.AlertTarget]? = nil
        if let alertTargetsContainer = alertTargetsContainer {
            alertTargetsDecoded0 = [Swift.String:IotClientTypes.AlertTarget]()
            for (key0, alerttarget0) in alertTargetsContainer {
                if let alerttarget0 = alerttarget0 {
                    alertTargetsDecoded0?[key0] = alerttarget0
                }
            }
        }
        alertTargets = alertTargetsDecoded0
        let additionalMetricsToRetainContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalMetricsToRetain)
        var additionalMetricsToRetainDecoded0:[Swift.String]? = nil
        if let additionalMetricsToRetainContainer = additionalMetricsToRetainContainer {
            additionalMetricsToRetainDecoded0 = [Swift.String]()
            for string0 in additionalMetricsToRetainContainer {
                if let string0 = string0 {
                    additionalMetricsToRetainDecoded0?.append(string0)
                }
            }
        }
        additionalMetricsToRetain = additionalMetricsToRetainDecoded0
        let additionalMetricsToRetainV2Container = try containerValues.decodeIfPresent([IotClientTypes.MetricToRetain?].self, forKey: .additionalMetricsToRetainV2)
        var additionalMetricsToRetainV2Decoded0:[IotClientTypes.MetricToRetain]? = nil
        if let additionalMetricsToRetainV2Container = additionalMetricsToRetainV2Container {
            additionalMetricsToRetainV2Decoded0 = [IotClientTypes.MetricToRetain]()
            for structure0 in additionalMetricsToRetainV2Container {
                if let structure0 = structure0 {
                    additionalMetricsToRetainV2Decoded0?.append(structure0)
                }
            }
        }
        additionalMetricsToRetainV2 = additionalMetricsToRetainV2Decoded0
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateSecurityProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSecurityProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateSecurityProfileOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSecurityProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSecurityProfileOutputResponse(securityProfileArn: \(Swift.String(describing: securityProfileArn)), securityProfileName: \(Swift.String(describing: securityProfileName)))"}
}

extension CreateSecurityProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateSecurityProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.securityProfileArn = output.securityProfileArn
            self.securityProfileName = output.securityProfileName
        } else {
            self.securityProfileArn = nil
            self.securityProfileName = nil
        }
    }
}

public struct CreateSecurityProfileOutputResponse: Swift.Equatable {
    /// <p>The ARN of the security profile.</p>
    public let securityProfileArn: Swift.String?
    /// <p>The name you gave to the security profile.</p>
    public let securityProfileName: Swift.String?

    public init (
        securityProfileArn: Swift.String? = nil,
        securityProfileName: Swift.String? = nil
    )
    {
        self.securityProfileArn = securityProfileArn
        self.securityProfileName = securityProfileName
    }
}

struct CreateSecurityProfileOutputResponseBody: Swift.Equatable {
    public let securityProfileName: Swift.String?
    public let securityProfileArn: Swift.String?
}

extension CreateSecurityProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityProfileArn
        case securityProfileName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityProfileName)
        securityProfileName = securityProfileNameDecoded
        let securityProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityProfileArn)
        securityProfileArn = securityProfileArnDecoded
    }
}

public struct CreateStreamInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateStreamInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateStreamOutputError>
}

extension CreateStreamInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateStreamInput(description: \(Swift.String(describing: description)), files: \(Swift.String(describing: files)), roleArn: \(Swift.String(describing: roleArn)), streamId: \(Swift.String(describing: streamId)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateStreamInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case files
        case roleArn
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let files = files {
            var filesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .files)
            for streamfiles0 in files {
                try filesContainer.encode(streamfiles0)
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateStreamInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateStreamInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateStreamOutputError>
}

public struct CreateStreamInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateStreamInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateStreamOutputError>
}

public struct CreateStreamInput: Swift.Equatable {
    /// <p>A description of the stream.</p>
    public let description: Swift.String?
    /// <p>The files to stream.</p>
    public let files: [IotClientTypes.StreamFile]?
    /// <p>An IAM role that allows the IoT service principal assumes to access your S3 files.</p>
    public let roleArn: Swift.String?
    /// <p>The stream ID.</p>
    public let streamId: Swift.String?
    /// <p>Metadata which can be used to manage streams.</p>
    public let tags: [IotClientTypes.Tag]?

    public init (
        description: Swift.String? = nil,
        files: [IotClientTypes.StreamFile]? = nil,
        roleArn: Swift.String? = nil,
        streamId: Swift.String? = nil,
        tags: [IotClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.files = files
        self.roleArn = roleArn
        self.streamId = streamId
        self.tags = tags
    }
}

struct CreateStreamInputBody: Swift.Equatable {
    public let description: Swift.String?
    public let files: [IotClientTypes.StreamFile]?
    public let roleArn: Swift.String?
    public let tags: [IotClientTypes.Tag]?
}

extension CreateStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case files
        case roleArn
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let filesContainer = try containerValues.decodeIfPresent([IotClientTypes.StreamFile?].self, forKey: .files)
        var filesDecoded0:[IotClientTypes.StreamFile]? = nil
        if let filesContainer = filesContainer {
            filesDecoded0 = [IotClientTypes.StreamFile]()
            for structure0 in filesContainer {
                if let structure0 = structure0 {
                    filesDecoded0?.append(structure0)
                }
            }
        }
        files = filesDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateStreamOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStreamOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateStreamOutputResponse(description: \(Swift.String(describing: description)), streamArn: \(Swift.String(describing: streamArn)), streamId: \(Swift.String(describing: streamId)), streamVersion: \(Swift.String(describing: streamVersion)))"}
}

extension CreateStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateStreamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.description = output.description
            self.streamArn = output.streamArn
            self.streamId = output.streamId
            self.streamVersion = output.streamVersion
        } else {
            self.description = nil
            self.streamArn = nil
            self.streamId = nil
            self.streamVersion = nil
        }
    }
}

public struct CreateStreamOutputResponse: Swift.Equatable {
    /// <p>A description of the stream.</p>
    public let description: Swift.String?
    /// <p>The stream ARN.</p>
    public let streamArn: Swift.String?
    /// <p>The stream ID.</p>
    public let streamId: Swift.String?
    /// <p>The version of the stream.</p>
    public let streamVersion: Swift.Int?

    public init (
        description: Swift.String? = nil,
        streamArn: Swift.String? = nil,
        streamId: Swift.String? = nil,
        streamVersion: Swift.Int? = nil
    )
    {
        self.description = description
        self.streamArn = streamArn
        self.streamId = streamId
        self.streamVersion = streamVersion
    }
}

struct CreateStreamOutputResponseBody: Swift.Equatable {
    public let streamId: Swift.String?
    public let streamArn: Swift.String?
    public let description: Swift.String?
    public let streamVersion: Swift.Int?
}

extension CreateStreamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case streamArn
        case streamId
        case streamVersion
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamId)
        streamId = streamIdDecoded
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let streamVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .streamVersion)
        streamVersion = streamVersionDecoded
    }
}

public struct CreateThingGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateThingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateThingGroupOutputError>
}

extension CreateThingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateThingGroupInput(parentGroupName: \(Swift.String(describing: parentGroupName)), tags: \(Swift.String(describing: tags)), thingGroupName: \(Swift.String(describing: thingGroupName)), thingGroupProperties: \(Swift.String(describing: thingGroupProperties)))"}
}

extension CreateThingGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parentGroupName
        case tags
        case thingGroupProperties
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parentGroupName = parentGroupName {
            try encodeContainer.encode(parentGroupName, forKey: .parentGroupName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let thingGroupProperties = thingGroupProperties {
            try encodeContainer.encode(thingGroupProperties, forKey: .thingGroupProperties)
        }
    }
}

public struct CreateThingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateThingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateThingGroupOutputError>
}

public struct CreateThingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateThingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateThingGroupOutputError>
}

public struct CreateThingGroupInput: Swift.Equatable {
    /// <p>The name of the parent thing group.</p>
    public let parentGroupName: Swift.String?
    /// <p>Metadata which can be used to manage the thing group.</p>
    public let tags: [IotClientTypes.Tag]?
    /// <p>The thing group name to create.</p>
    public let thingGroupName: Swift.String?
    /// <p>The thing group properties.</p>
    public let thingGroupProperties: IotClientTypes.ThingGroupProperties?

    public init (
        parentGroupName: Swift.String? = nil,
        tags: [IotClientTypes.Tag]? = nil,
        thingGroupName: Swift.String? = nil,
        thingGroupProperties: IotClientTypes.ThingGroupProperties? = nil
    )
    {
        self.parentGroupName = parentGroupName
        self.tags = tags
        self.thingGroupName = thingGroupName
        self.thingGroupProperties = thingGroupProperties
    }
}

struct CreateThingGroupInputBody: Swift.Equatable {
    public let parentGroupName: Swift.String?
    public let thingGroupProperties: IotClientTypes.ThingGroupProperties?
    public let tags: [IotClientTypes.Tag]?
}

extension CreateThingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parentGroupName
        case tags
        case thingGroupProperties
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentGroupName)
        parentGroupName = parentGroupNameDecoded
        let thingGroupPropertiesDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingGroupProperties.self, forKey: .thingGroupProperties)
        thingGroupProperties = thingGroupPropertiesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateThingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateThingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateThingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateThingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateThingGroupOutputResponse(thingGroupArn: \(Swift.String(describing: thingGroupArn)), thingGroupId: \(Swift.String(describing: thingGroupId)), thingGroupName: \(Swift.String(describing: thingGroupName)))"}
}

extension CreateThingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateThingGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.thingGroupArn = output.thingGroupArn
            self.thingGroupId = output.thingGroupId
            self.thingGroupName = output.thingGroupName
        } else {
            self.thingGroupArn = nil
            self.thingGroupId = nil
            self.thingGroupName = nil
        }
    }
}

public struct CreateThingGroupOutputResponse: Swift.Equatable {
    /// <p>The thing group ARN.</p>
    public let thingGroupArn: Swift.String?
    /// <p>The thing group ID.</p>
    public let thingGroupId: Swift.String?
    /// <p>The thing group name.</p>
    public let thingGroupName: Swift.String?

    public init (
        thingGroupArn: Swift.String? = nil,
        thingGroupId: Swift.String? = nil,
        thingGroupName: Swift.String? = nil
    )
    {
        self.thingGroupArn = thingGroupArn
        self.thingGroupId = thingGroupId
        self.thingGroupName = thingGroupName
    }
}

struct CreateThingGroupOutputResponseBody: Swift.Equatable {
    public let thingGroupName: Swift.String?
    public let thingGroupArn: Swift.String?
    public let thingGroupId: Swift.String?
}

extension CreateThingGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case thingGroupArn
        case thingGroupId
        case thingGroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupName)
        thingGroupName = thingGroupNameDecoded
        let thingGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupArn)
        thingGroupArn = thingGroupArnDecoded
        let thingGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupId)
        thingGroupId = thingGroupIdDecoded
    }
}

public struct CreateThingInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateThingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateThingOutputError>
}

extension CreateThingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateThingInput(attributePayload: \(Swift.String(describing: attributePayload)), billingGroupName: \(Swift.String(describing: billingGroupName)), thingName: \(Swift.String(describing: thingName)), thingTypeName: \(Swift.String(describing: thingTypeName)))"}
}

extension CreateThingInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributePayload
        case billingGroupName
        case thingTypeName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributePayload = attributePayload {
            try encodeContainer.encode(attributePayload, forKey: .attributePayload)
        }
        if let billingGroupName = billingGroupName {
            try encodeContainer.encode(billingGroupName, forKey: .billingGroupName)
        }
        if let thingTypeName = thingTypeName {
            try encodeContainer.encode(thingTypeName, forKey: .thingTypeName)
        }
    }
}

public struct CreateThingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateThingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateThingOutputError>
}

public struct CreateThingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateThingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateThingOutputError>
}

/// <p>The input for the CreateThing operation.</p>
public struct CreateThingInput: Swift.Equatable {
    /// <p>The attribute payload, which consists of up to three name/value pairs in a JSON
    /// 			document. For example:</p>
    /// 		       <p>
    /// 			         <code>{\"attributes\":{\"string1\":\"string2\"}}</code>
    /// 		       </p>
    public let attributePayload: IotClientTypes.AttributePayload?
    /// <p>The name of the billing group the thing will be added to.</p>
    public let billingGroupName: Swift.String?
    /// <p>The name of the thing to create.</p>
    /// 		       <p>You can't change a thing's name after you create it. To change a thing's name, you must create a
    /// 			new thing, give it the new name, and then delete the old thing.</p>
    public let thingName: Swift.String?
    /// <p>The name of the thing type associated with the new thing.</p>
    public let thingTypeName: Swift.String?

    public init (
        attributePayload: IotClientTypes.AttributePayload? = nil,
        billingGroupName: Swift.String? = nil,
        thingName: Swift.String? = nil,
        thingTypeName: Swift.String? = nil
    )
    {
        self.attributePayload = attributePayload
        self.billingGroupName = billingGroupName
        self.thingName = thingName
        self.thingTypeName = thingTypeName
    }
}

struct CreateThingInputBody: Swift.Equatable {
    public let thingTypeName: Swift.String?
    public let attributePayload: IotClientTypes.AttributePayload?
    public let billingGroupName: Swift.String?
}

extension CreateThingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributePayload
        case billingGroupName
        case thingTypeName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeName)
        thingTypeName = thingTypeNameDecoded
        let attributePayloadDecoded = try containerValues.decodeIfPresent(IotClientTypes.AttributePayload.self, forKey: .attributePayload)
        attributePayload = attributePayloadDecoded
        let billingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupName)
        billingGroupName = billingGroupNameDecoded
    }
}

extension CreateThingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateThingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateThingOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateThingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateThingOutputResponse(thingArn: \(Swift.String(describing: thingArn)), thingId: \(Swift.String(describing: thingId)), thingName: \(Swift.String(describing: thingName)))"}
}

extension CreateThingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateThingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.thingArn = output.thingArn
            self.thingId = output.thingId
            self.thingName = output.thingName
        } else {
            self.thingArn = nil
            self.thingId = nil
            self.thingName = nil
        }
    }
}

/// <p>The output of the CreateThing operation.</p>
public struct CreateThingOutputResponse: Swift.Equatable {
    /// <p>The ARN of the new thing.</p>
    public let thingArn: Swift.String?
    /// <p>The thing ID.</p>
    public let thingId: Swift.String?
    /// <p>The name of the new thing.</p>
    public let thingName: Swift.String?

    public init (
        thingArn: Swift.String? = nil,
        thingId: Swift.String? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.thingArn = thingArn
        self.thingId = thingId
        self.thingName = thingName
    }
}

struct CreateThingOutputResponseBody: Swift.Equatable {
    public let thingName: Swift.String?
    public let thingArn: Swift.String?
    public let thingId: Swift.String?
}

extension CreateThingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case thingArn
        case thingId
        case thingName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let thingArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingArn)
        thingArn = thingArnDecoded
        let thingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingId)
        thingId = thingIdDecoded
    }
}

public struct CreateThingTypeInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateThingTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateThingTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateThingTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateThingTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateThingTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateThingTypeOutputError>
}

extension CreateThingTypeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateThingTypeInput(tags: \(Swift.String(describing: tags)), thingTypeName: \(Swift.String(describing: thingTypeName)), thingTypeProperties: \(Swift.String(describing: thingTypeProperties)))"}
}

extension CreateThingTypeInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
        case thingTypeProperties
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let thingTypeProperties = thingTypeProperties {
            try encodeContainer.encode(thingTypeProperties, forKey: .thingTypeProperties)
        }
    }
}

public struct CreateThingTypeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateThingTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateThingTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateThingTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateThingTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateThingTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateThingTypeOutputError>
}

public struct CreateThingTypeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateThingTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateThingTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateThingTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateThingTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateThingTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateThingTypeOutputError>
}

/// <p>The input for the CreateThingType operation.</p>
public struct CreateThingTypeInput: Swift.Equatable {
    /// <p>Metadata which can be used to manage the thing type.</p>
    public let tags: [IotClientTypes.Tag]?
    /// <p>The name of the thing type.</p>
    public let thingTypeName: Swift.String?
    /// <p>The ThingTypeProperties for the thing type to create. It contains information about
    /// 			the new thing type including a description, and a list of searchable thing attribute
    /// 			names.</p>
    public let thingTypeProperties: IotClientTypes.ThingTypeProperties?

    public init (
        tags: [IotClientTypes.Tag]? = nil,
        thingTypeName: Swift.String? = nil,
        thingTypeProperties: IotClientTypes.ThingTypeProperties? = nil
    )
    {
        self.tags = tags
        self.thingTypeName = thingTypeName
        self.thingTypeProperties = thingTypeProperties
    }
}

struct CreateThingTypeInputBody: Swift.Equatable {
    public let thingTypeProperties: IotClientTypes.ThingTypeProperties?
    public let tags: [IotClientTypes.Tag]?
}

extension CreateThingTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
        case thingTypeProperties
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingTypePropertiesDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingTypeProperties.self, forKey: .thingTypeProperties)
        thingTypeProperties = thingTypePropertiesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateThingTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateThingTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateThingTypeOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateThingTypeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateThingTypeOutputResponse(thingTypeArn: \(Swift.String(describing: thingTypeArn)), thingTypeId: \(Swift.String(describing: thingTypeId)), thingTypeName: \(Swift.String(describing: thingTypeName)))"}
}

extension CreateThingTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateThingTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.thingTypeArn = output.thingTypeArn
            self.thingTypeId = output.thingTypeId
            self.thingTypeName = output.thingTypeName
        } else {
            self.thingTypeArn = nil
            self.thingTypeId = nil
            self.thingTypeName = nil
        }
    }
}

/// <p>The output of the CreateThingType operation.</p>
public struct CreateThingTypeOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the thing type.</p>
    public let thingTypeArn: Swift.String?
    /// <p>The thing type ID.</p>
    public let thingTypeId: Swift.String?
    /// <p>The name of the thing type.</p>
    public let thingTypeName: Swift.String?

    public init (
        thingTypeArn: Swift.String? = nil,
        thingTypeId: Swift.String? = nil,
        thingTypeName: Swift.String? = nil
    )
    {
        self.thingTypeArn = thingTypeArn
        self.thingTypeId = thingTypeId
        self.thingTypeName = thingTypeName
    }
}

struct CreateThingTypeOutputResponseBody: Swift.Equatable {
    public let thingTypeName: Swift.String?
    public let thingTypeArn: Swift.String?
    public let thingTypeId: Swift.String?
}

extension CreateThingTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case thingTypeArn
        case thingTypeId
        case thingTypeName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeName)
        thingTypeName = thingTypeNameDecoded
        let thingTypeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeArn)
        thingTypeArn = thingTypeArnDecoded
        let thingTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeId)
        thingTypeId = thingTypeIdDecoded
    }
}

public struct CreateTopicRuleDestinationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTopicRuleDestinationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTopicRuleDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTopicRuleDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTopicRuleDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTopicRuleDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTopicRuleDestinationOutputError>
}

extension CreateTopicRuleDestinationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTopicRuleDestinationInput(destinationConfiguration: \(Swift.String(describing: destinationConfiguration)))"}
}

extension CreateTopicRuleDestinationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationConfiguration = destinationConfiguration {
            try encodeContainer.encode(destinationConfiguration, forKey: .destinationConfiguration)
        }
    }
}

public struct CreateTopicRuleDestinationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTopicRuleDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTopicRuleDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTopicRuleDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTopicRuleDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTopicRuleDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTopicRuleDestinationOutputError>
}

public struct CreateTopicRuleDestinationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTopicRuleDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTopicRuleDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTopicRuleDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTopicRuleDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTopicRuleDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTopicRuleDestinationOutputError>
}

public struct CreateTopicRuleDestinationInput: Swift.Equatable {
    /// <p>The topic rule destination configuration.</p>
    public let destinationConfiguration: IotClientTypes.TopicRuleDestinationConfiguration?

    public init (
        destinationConfiguration: IotClientTypes.TopicRuleDestinationConfiguration? = nil
    )
    {
        self.destinationConfiguration = destinationConfiguration
    }
}

struct CreateTopicRuleDestinationInputBody: Swift.Equatable {
    public let destinationConfiguration: IotClientTypes.TopicRuleDestinationConfiguration?
}

extension CreateTopicRuleDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationConfiguration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationConfigurationDecoded = try containerValues.decodeIfPresent(IotClientTypes.TopicRuleDestinationConfiguration.self, forKey: .destinationConfiguration)
        destinationConfiguration = destinationConfigurationDecoded
    }
}

extension CreateTopicRuleDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTopicRuleDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingResourceUpdateException" : self = .conflictingResourceUpdateException(try ConflictingResourceUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTopicRuleDestinationOutputError: Swift.Error, Swift.Equatable {
    case conflictingResourceUpdateException(ConflictingResourceUpdateException)
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTopicRuleDestinationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTopicRuleDestinationOutputResponse(topicRuleDestination: \(Swift.String(describing: topicRuleDestination)))"}
}

extension CreateTopicRuleDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateTopicRuleDestinationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.topicRuleDestination = output.topicRuleDestination
        } else {
            self.topicRuleDestination = nil
        }
    }
}

public struct CreateTopicRuleDestinationOutputResponse: Swift.Equatable {
    /// <p>The topic rule destination.</p>
    public let topicRuleDestination: IotClientTypes.TopicRuleDestination?

    public init (
        topicRuleDestination: IotClientTypes.TopicRuleDestination? = nil
    )
    {
        self.topicRuleDestination = topicRuleDestination
    }
}

struct CreateTopicRuleDestinationOutputResponseBody: Swift.Equatable {
    public let topicRuleDestination: IotClientTypes.TopicRuleDestination?
}

extension CreateTopicRuleDestinationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicRuleDestination
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicRuleDestinationDecoded = try containerValues.decodeIfPresent(IotClientTypes.TopicRuleDestination.self, forKey: .topicRuleDestination)
        topicRuleDestination = topicRuleDestinationDecoded
    }
}

public struct CreateTopicRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTopicRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTopicRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTopicRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let topicRulePayload = input.operationInput.topicRulePayload {
            do {
                let encoder = context.getEncoder()
                let topicRulePayloaddata = try encoder.encode(topicRulePayload)
                let topicRulePayloadbody = ClientRuntime.HttpBody.data(topicRulePayloaddata)
                input.builder.withBody(topicRulePayloadbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTopicRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTopicRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTopicRuleOutputError>
}

extension CreateTopicRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTopicRuleInput(ruleName: \(Swift.String(describing: ruleName)), tags: \(Swift.String(describing: tags)), topicRulePayload: \(Swift.String(describing: topicRulePayload)))"}
}

extension CreateTopicRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicRulePayload
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let topicRulePayload = topicRulePayload {
            try encodeContainer.encode(topicRulePayload, forKey: .topicRulePayload)
        }
    }
}

public struct CreateTopicRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTopicRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTopicRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTopicRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let tags = input.operationInput.tags {
            input.builder.withHeader(name: "x-amz-tagging", value: Swift.String(tags))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTopicRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTopicRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTopicRuleOutputError>
}

public struct CreateTopicRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTopicRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTopicRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTopicRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTopicRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTopicRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTopicRuleOutputError>
}

/// <p>The input for the CreateTopicRule operation.</p>
public struct CreateTopicRuleInput: Swift.Equatable {
    /// <p>The name of the rule.</p>
    public let ruleName: Swift.String?
    /// <p>Metadata which can be used to manage the topic rule.</p>
    ///          <note>
    ///             <p>For URI Request parameters use format: ...key1=value1&key2=value2...</p>
    ///             <p>For the CLI command-line parameter use format: --tags
    ///             "key1=value1&key2=value2..."</p>
    ///             <p>For the cli-input-json file use format: "tags":
    ///             "key1=value1&key2=value2..."</p>
    ///          </note>
    public let tags: Swift.String?
    /// <p>The rule payload.</p>
    public let topicRulePayload: IotClientTypes.TopicRulePayload?

    public init (
        ruleName: Swift.String? = nil,
        tags: Swift.String? = nil,
        topicRulePayload: IotClientTypes.TopicRulePayload? = nil
    )
    {
        self.ruleName = ruleName
        self.tags = tags
        self.topicRulePayload = topicRulePayload
    }
}

struct CreateTopicRuleInputBody: Swift.Equatable {
    public let topicRulePayload: IotClientTypes.TopicRulePayload?
}

extension CreateTopicRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicRulePayload
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicRulePayloadDecoded = try containerValues.decodeIfPresent(IotClientTypes.TopicRulePayload.self, forKey: .topicRulePayload)
        topicRulePayload = topicRulePayloadDecoded
    }
}

extension CreateTopicRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTopicRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingResourceUpdateException" : self = .conflictingResourceUpdateException(try ConflictingResourceUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SqlParseException" : self = .sqlParseException(try SqlParseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTopicRuleOutputError: Swift.Error, Swift.Equatable {
    case conflictingResourceUpdateException(ConflictingResourceUpdateException)
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case sqlParseException(SqlParseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTopicRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTopicRuleOutputResponse()"}
}

extension CreateTopicRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateTopicRuleOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateTopicRuleOutputResponseBody: Swift.Equatable {
}

extension CreateTopicRuleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes.CustomCodeSigning: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateChain
        case hashAlgorithm
        case signature
        case signatureAlgorithm
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateChain = certificateChain {
            try encodeContainer.encode(certificateChain, forKey: .certificateChain)
        }
        if let hashAlgorithm = hashAlgorithm {
            try encodeContainer.encode(hashAlgorithm, forKey: .hashAlgorithm)
        }
        if let signature = signature {
            try encodeContainer.encode(signature, forKey: .signature)
        }
        if let signatureAlgorithm = signatureAlgorithm {
            try encodeContainer.encode(signatureAlgorithm, forKey: .signatureAlgorithm)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signatureDecoded = try containerValues.decodeIfPresent(IotClientTypes.CodeSigningSignature.self, forKey: .signature)
        signature = signatureDecoded
        let certificateChainDecoded = try containerValues.decodeIfPresent(IotClientTypes.CodeSigningCertificateChain.self, forKey: .certificateChain)
        certificateChain = certificateChainDecoded
        let hashAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hashAlgorithm)
        hashAlgorithm = hashAlgorithmDecoded
        let signatureAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signatureAlgorithm)
        signatureAlgorithm = signatureAlgorithmDecoded
    }
}

extension IotClientTypes.CustomCodeSigning: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomCodeSigning(certificateChain: \(Swift.String(describing: certificateChain)), hashAlgorithm: \(Swift.String(describing: hashAlgorithm)), signature: \(Swift.String(describing: signature)), signatureAlgorithm: \(Swift.String(describing: signatureAlgorithm)))"}
}

extension IotClientTypes {
    /// <p>Describes a custom method used to code sign a file.</p>
    public struct CustomCodeSigning: Swift.Equatable {
        /// <p>The certificate chain.</p>
        public let certificateChain: IotClientTypes.CodeSigningCertificateChain?
        /// <p>The hash algorithm used to code sign the file.</p>
        public let hashAlgorithm: Swift.String?
        /// <p>The signature for the file.</p>
        public let signature: IotClientTypes.CodeSigningSignature?
        /// <p>The signature algorithm used to code sign the file.</p>
        public let signatureAlgorithm: Swift.String?

        public init (
            certificateChain: IotClientTypes.CodeSigningCertificateChain? = nil,
            hashAlgorithm: Swift.String? = nil,
            signature: IotClientTypes.CodeSigningSignature? = nil,
            signatureAlgorithm: Swift.String? = nil
        )
        {
            self.certificateChain = certificateChain
            self.hashAlgorithm = hashAlgorithm
            self.signature = signature
            self.signatureAlgorithm = signatureAlgorithm
        }
    }

}

extension IotClientTypes {
    public enum CustomMetricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ipAddressList
        case number
        case numberList
        case stringList
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomMetricType] {
            return [
                .ipAddressList,
                .number,
                .numberList,
                .stringList,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ipAddressList: return "ip-address-list"
            case .number: return "number"
            case .numberList: return "number-list"
            case .stringList: return "string-list"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CustomMetricType(rawValue: rawValue) ?? CustomMetricType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes {
    public enum DayOfWeek: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fri
        case mon
        case sat
        case sun
        case thu
        case tue
        case wed
        case sdkUnknown(Swift.String)

        public static var allCases: [DayOfWeek] {
            return [
                .fri,
                .mon,
                .sat,
                .sun,
                .thu,
                .tue,
                .wed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fri: return "FRI"
            case .mon: return "MON"
            case .sat: return "SAT"
            case .sun: return "SUN"
            case .thu: return "THU"
            case .tue: return "TUE"
            case .wed: return "WED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DayOfWeek(rawValue: rawValue) ?? DayOfWeek.sdkUnknown(rawValue)
        }
    }
}

extension DeleteAccountAuditConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAccountAuditConfigurationInput(deleteScheduledAudits: \(Swift.String(describing: deleteScheduledAudits)))"}
}

extension DeleteAccountAuditConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteAccountAuditConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAccountAuditConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAccountAuditConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAccountAuditConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAccountAuditConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAccountAuditConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAccountAuditConfigurationOutputError>
}

public struct DeleteAccountAuditConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAccountAuditConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAccountAuditConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAccountAuditConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.deleteScheduledAudits != false {
            let deleteScheduledAuditsQueryItem = ClientRuntime.URLQueryItem(name: "deleteScheduledAudits".urlPercentEncoding(), value: Swift.String(input.operationInput.deleteScheduledAudits).urlPercentEncoding())
            input.builder.withQueryItem(deleteScheduledAuditsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAccountAuditConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAccountAuditConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAccountAuditConfigurationOutputError>
}

public struct DeleteAccountAuditConfigurationInput: Swift.Equatable {
    /// <p>If true, all scheduled audits are deleted.</p>
    public let deleteScheduledAudits: Swift.Bool

    public init (
        deleteScheduledAudits: Swift.Bool = false
    )
    {
        self.deleteScheduledAudits = deleteScheduledAudits
    }
}

struct DeleteAccountAuditConfigurationInputBody: Swift.Equatable {
}

extension DeleteAccountAuditConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteAccountAuditConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAccountAuditConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAccountAuditConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAccountAuditConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAccountAuditConfigurationOutputResponse()"}
}

extension DeleteAccountAuditConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAccountAuditConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteAccountAuditConfigurationOutputResponseBody: Swift.Equatable {
}

extension DeleteAccountAuditConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteAuditSuppressionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAuditSuppressionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAuditSuppressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAuditSuppressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAuditSuppressionOutputError>
}

extension DeleteAuditSuppressionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAuditSuppressionInput(checkName: \(Swift.String(describing: checkName)), resourceIdentifier: \(Swift.String(describing: resourceIdentifier)))"}
}

extension DeleteAuditSuppressionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkName
        case resourceIdentifier
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkName = checkName {
            try encodeContainer.encode(checkName, forKey: .checkName)
        }
        if let resourceIdentifier = resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
    }
}

public struct DeleteAuditSuppressionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAuditSuppressionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAuditSuppressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAuditSuppressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAuditSuppressionOutputError>
}

public struct DeleteAuditSuppressionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAuditSuppressionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAuditSuppressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAuditSuppressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAuditSuppressionOutputError>
}

public struct DeleteAuditSuppressionInput: Swift.Equatable {
    /// <p>An audit check name. Checks must be enabled
    ///         for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list
    ///         of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code>
    ///         to select which checks are enabled.)</p>
    public let checkName: Swift.String?
    /// <p>Information that identifies the noncompliant resource.</p>
    public let resourceIdentifier: IotClientTypes.ResourceIdentifier?

    public init (
        checkName: Swift.String? = nil,
        resourceIdentifier: IotClientTypes.ResourceIdentifier? = nil
    )
    {
        self.checkName = checkName
        self.resourceIdentifier = resourceIdentifier
    }
}

struct DeleteAuditSuppressionInputBody: Swift.Equatable {
    public let checkName: Swift.String?
    public let resourceIdentifier: IotClientTypes.ResourceIdentifier?
}

extension DeleteAuditSuppressionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkName
        case resourceIdentifier
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkName)
        checkName = checkNameDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(IotClientTypes.ResourceIdentifier.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
    }
}

extension DeleteAuditSuppressionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAuditSuppressionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAuditSuppressionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAuditSuppressionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAuditSuppressionOutputResponse()"}
}

extension DeleteAuditSuppressionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAuditSuppressionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteAuditSuppressionOutputResponseBody: Swift.Equatable {
}

extension DeleteAuditSuppressionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteAuthorizerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAuthorizerInput(authorizerName: \(Swift.String(describing: authorizerName)))"}
}

extension DeleteAuthorizerInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteAuthorizerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAuthorizerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAuthorizerOutputError>
}

public struct DeleteAuthorizerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAuthorizerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAuthorizerOutputError>
}

public struct DeleteAuthorizerInput: Swift.Equatable {
    /// <p>The name of the authorizer to delete.</p>
    public let authorizerName: Swift.String?

    public init (
        authorizerName: Swift.String? = nil
    )
    {
        self.authorizerName = authorizerName
    }
}

struct DeleteAuthorizerInputBody: Swift.Equatable {
}

extension DeleteAuthorizerInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteAuthorizerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAuthorizerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeleteConflictException" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAuthorizerOutputError: Swift.Error, Swift.Equatable {
    case deleteConflictException(DeleteConflictException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAuthorizerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAuthorizerOutputResponse()"}
}

extension DeleteAuthorizerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAuthorizerOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteAuthorizerOutputResponseBody: Swift.Equatable {
}

extension DeleteAuthorizerOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBillingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBillingGroupInput(billingGroupName: \(Swift.String(describing: billingGroupName)), expectedVersion: \(Swift.String(describing: expectedVersion)))"}
}

extension DeleteBillingGroupInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBillingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBillingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBillingGroupOutputError>
}

public struct DeleteBillingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBillingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedVersion = input.operationInput.expectedVersion {
            let expectedVersionQueryItem = ClientRuntime.URLQueryItem(name: "expectedVersion".urlPercentEncoding(), value: Swift.String(expectedVersion).urlPercentEncoding())
            input.builder.withQueryItem(expectedVersionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBillingGroupOutputError>
}

public struct DeleteBillingGroupInput: Swift.Equatable {
    /// <p>The name of the billing group.</p>
    public let billingGroupName: Swift.String?
    /// <p>The expected version of the billing group. If the version of the billing group does
    /// 			not match the expected version specified in the request, the
    /// 				<code>DeleteBillingGroup</code> request is rejected with a
    /// 				<code>VersionConflictException</code>.</p>
    public let expectedVersion: Swift.Int?

    public init (
        billingGroupName: Swift.String? = nil,
        expectedVersion: Swift.Int? = nil
    )
    {
        self.billingGroupName = billingGroupName
        self.expectedVersion = expectedVersion
    }
}

struct DeleteBillingGroupInputBody: Swift.Equatable {
}

extension DeleteBillingGroupInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBillingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBillingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionConflictException" : self = .versionConflictException(try VersionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBillingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case versionConflictException(VersionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBillingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBillingGroupOutputResponse()"}
}

extension DeleteBillingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBillingGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBillingGroupOutputResponseBody: Swift.Equatable {
}

extension DeleteBillingGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteCACertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCACertificateInput(certificateId: \(Swift.String(describing: certificateId)))"}
}

extension DeleteCACertificateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteCACertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCACertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCACertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCACertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCACertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCACertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCACertificateOutputError>
}

public struct DeleteCACertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCACertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCACertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCACertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCACertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCACertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCACertificateOutputError>
}

/// <p>Input for the DeleteCACertificate operation.</p>
public struct DeleteCACertificateInput: Swift.Equatable {
    /// <p>The ID of the certificate to delete. (The last part of the certificate ARN contains
    ///          the certificate ID.)</p>
    public let certificateId: Swift.String?

    public init (
        certificateId: Swift.String? = nil
    )
    {
        self.certificateId = certificateId
    }
}

struct DeleteCACertificateInputBody: Swift.Equatable {
}

extension DeleteCACertificateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteCACertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCACertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateStateException" : self = .certificateStateException(try CertificateStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCACertificateOutputError: Swift.Error, Swift.Equatable {
    case certificateStateException(CertificateStateException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCACertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCACertificateOutputResponse()"}
}

extension DeleteCACertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The output for the DeleteCACertificate operation.</p>
public struct DeleteCACertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteCACertificateOutputResponseBody: Swift.Equatable {
}

extension DeleteCACertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCertificateInput(certificateId: \(Swift.String(describing: certificateId)), forceDelete: \(Swift.String(describing: forceDelete)))"}
}

extension DeleteCertificateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCertificateOutputError>
}

public struct DeleteCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.forceDelete != false {
            let forceDeleteQueryItem = ClientRuntime.URLQueryItem(name: "forceDelete".urlPercentEncoding(), value: Swift.String(input.operationInput.forceDelete).urlPercentEncoding())
            input.builder.withQueryItem(forceDeleteQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCertificateOutputError>
}

/// <p>The input for the DeleteCertificate operation.</p>
public struct DeleteCertificateInput: Swift.Equatable {
    /// <p>The ID of the certificate. (The last part of the certificate ARN contains the
    ///          certificate ID.)</p>
    public let certificateId: Swift.String?
    /// <p>Forces the deletion of a certificate if it is inactive and is not attached to an IoT
    ///          thing.</p>
    public let forceDelete: Swift.Bool

    public init (
        certificateId: Swift.String? = nil,
        forceDelete: Swift.Bool = false
    )
    {
        self.certificateId = certificateId
        self.forceDelete = forceDelete
    }
}

struct DeleteCertificateInputBody: Swift.Equatable {
}

extension DeleteCertificateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateStateException" : self = .certificateStateException(try CertificateStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeleteConflictException" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCertificateOutputError: Swift.Error, Swift.Equatable {
    case certificateStateException(CertificateStateException)
    case deleteConflictException(DeleteConflictException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCertificateOutputResponse()"}
}

extension DeleteCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteCertificateOutputResponseBody: Swift.Equatable {
}

extension DeleteCertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConflictException(message: \(Swift.String(describing: message)))"}
}

extension DeleteConflictException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You can't delete the resource because it is attached to one or more
///          resources.</p>
public struct DeleteConflictException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeleteConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DeleteConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeleteCustomMetricInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCustomMetricInput(metricName: \(Swift.String(describing: metricName)))"}
}

extension DeleteCustomMetricInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteCustomMetricInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCustomMetricInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCustomMetricInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCustomMetricOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCustomMetricInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCustomMetricOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCustomMetricOutputError>
}

public struct DeleteCustomMetricInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCustomMetricInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCustomMetricInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCustomMetricOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCustomMetricInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCustomMetricOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCustomMetricOutputError>
}

public struct DeleteCustomMetricInput: Swift.Equatable {
    /// <p>
    ///       The name of the custom metric.
    ///     </p>
    public let metricName: Swift.String?

    public init (
        metricName: Swift.String? = nil
    )
    {
        self.metricName = metricName
    }
}

struct DeleteCustomMetricInputBody: Swift.Equatable {
}

extension DeleteCustomMetricInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteCustomMetricOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCustomMetricOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCustomMetricOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCustomMetricOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCustomMetricOutputResponse()"}
}

extension DeleteCustomMetricOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCustomMetricOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteCustomMetricOutputResponseBody: Swift.Equatable {
}

extension DeleteCustomMetricOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteDimensionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDimensionInput(name: \(Swift.String(describing: name)))"}
}

extension DeleteDimensionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteDimensionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDimensionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDimensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDimensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDimensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDimensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDimensionOutputError>
}

public struct DeleteDimensionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDimensionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDimensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDimensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDimensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDimensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDimensionOutputError>
}

public struct DeleteDimensionInput: Swift.Equatable {
    /// <p>The unique identifier for the dimension that you want to delete.</p>
    public let name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteDimensionInputBody: Swift.Equatable {
}

extension DeleteDimensionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteDimensionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDimensionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDimensionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDimensionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDimensionOutputResponse()"}
}

extension DeleteDimensionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDimensionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteDimensionOutputResponseBody: Swift.Equatable {
}

extension DeleteDimensionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteDomainConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDomainConfigurationInput(domainConfigurationName: \(Swift.String(describing: domainConfigurationName)))"}
}

extension DeleteDomainConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteDomainConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDomainConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDomainConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDomainConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDomainConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDomainConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDomainConfigurationOutputError>
}

public struct DeleteDomainConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDomainConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDomainConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDomainConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDomainConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDomainConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDomainConfigurationOutputError>
}

public struct DeleteDomainConfigurationInput: Swift.Equatable {
    /// <p>The name of the domain configuration to be deleted.</p>
    public let domainConfigurationName: Swift.String?

    public init (
        domainConfigurationName: Swift.String? = nil
    )
    {
        self.domainConfigurationName = domainConfigurationName
    }
}

struct DeleteDomainConfigurationInputBody: Swift.Equatable {
}

extension DeleteDomainConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteDomainConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDomainConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDomainConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDomainConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDomainConfigurationOutputResponse()"}
}

extension DeleteDomainConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDomainConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteDomainConfigurationOutputResponseBody: Swift.Equatable {
}

extension DeleteDomainConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteDynamicThingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDynamicThingGroupInput(expectedVersion: \(Swift.String(describing: expectedVersion)), thingGroupName: \(Swift.String(describing: thingGroupName)))"}
}

extension DeleteDynamicThingGroupInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteDynamicThingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDynamicThingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDynamicThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDynamicThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDynamicThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDynamicThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDynamicThingGroupOutputError>
}

public struct DeleteDynamicThingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDynamicThingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDynamicThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDynamicThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedVersion = input.operationInput.expectedVersion {
            let expectedVersionQueryItem = ClientRuntime.URLQueryItem(name: "expectedVersion".urlPercentEncoding(), value: Swift.String(expectedVersion).urlPercentEncoding())
            input.builder.withQueryItem(expectedVersionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDynamicThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDynamicThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDynamicThingGroupOutputError>
}

public struct DeleteDynamicThingGroupInput: Swift.Equatable {
    /// <p>The expected version of the dynamic thing group to delete.</p>
    public let expectedVersion: Swift.Int?
    /// <p>The name of the dynamic thing group to delete.</p>
    public let thingGroupName: Swift.String?

    public init (
        expectedVersion: Swift.Int? = nil,
        thingGroupName: Swift.String? = nil
    )
    {
        self.expectedVersion = expectedVersion
        self.thingGroupName = thingGroupName
    }
}

struct DeleteDynamicThingGroupInputBody: Swift.Equatable {
}

extension DeleteDynamicThingGroupInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteDynamicThingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDynamicThingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionConflictException" : self = .versionConflictException(try VersionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDynamicThingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case versionConflictException(VersionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDynamicThingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDynamicThingGroupOutputResponse()"}
}

extension DeleteDynamicThingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDynamicThingGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteDynamicThingGroupOutputResponseBody: Swift.Equatable {
}

extension DeleteDynamicThingGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteJobExecutionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteJobExecutionInput(executionNumber: \(Swift.String(describing: executionNumber)), force: \(Swift.String(describing: force)), jobId: \(Swift.String(describing: jobId)), namespaceId: \(Swift.String(describing: namespaceId)), thingName: \(Swift.String(describing: thingName)))"}
}

extension DeleteJobExecutionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteJobExecutionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteJobExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteJobExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteJobExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteJobExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteJobExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteJobExecutionOutputError>
}

public struct DeleteJobExecutionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteJobExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteJobExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteJobExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let namespaceId = input.operationInput.namespaceId {
            let namespaceIdQueryItem = ClientRuntime.URLQueryItem(name: "namespaceId".urlPercentEncoding(), value: Swift.String(namespaceId).urlPercentEncoding())
            input.builder.withQueryItem(namespaceIdQueryItem)
        }
        if input.operationInput.force != false {
            let forceQueryItem = ClientRuntime.URLQueryItem(name: "force".urlPercentEncoding(), value: Swift.String(input.operationInput.force).urlPercentEncoding())
            input.builder.withQueryItem(forceQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteJobExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteJobExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteJobExecutionOutputError>
}

public struct DeleteJobExecutionInput: Swift.Equatable {
    /// <p>The ID of the job execution to be deleted. The <code>executionNumber</code> refers to the
    ///         execution of a particular job on a particular device.</p>
    ///          <p>Note that once a job execution is deleted, the <code>executionNumber</code> may be reused
    ///         by IoT, so be sure you get and use the correct value here.</p>
    public let executionNumber: Swift.Int?
    /// <p>(Optional) When true, you can delete a job execution which is "IN_PROGRESS". Otherwise,
    ///         you can only delete a job execution which is in a terminal state ("SUCCEEDED", "FAILED",
    ///         "REJECTED", "REMOVED" or "CANCELED") or an exception will occur. The default is false.</p>
    ///          <note>
    ///             <p>Deleting a job execution which is "IN_PROGRESS", will cause the device
    ///         to be unable to access job information or update the job execution status.
    ///         Use caution and ensure that the device is able to recover to a valid state.</p>
    ///          </note>
    public let force: Swift.Bool
    /// <p>The ID of the job whose execution on a particular device will be deleted.</p>
    public let jobId: Swift.String?
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    ///         <p>When you specify a value for this parameter, AWS IoT Core sends jobs notifications to MQTT topics that
    ///             contain the value in the following format.</p>
    ///         <p>
    ///             <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code>
    ///          </p>
    ///         <note>
    ///             <p>The <code>namespaceId</code> feature is in public preview.</p>
    ///          </note>
    public let namespaceId: Swift.String?
    /// <p>The name of the thing whose job execution will be deleted.</p>
    public let thingName: Swift.String?

    public init (
        executionNumber: Swift.Int? = nil,
        force: Swift.Bool = false,
        jobId: Swift.String? = nil,
        namespaceId: Swift.String? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.executionNumber = executionNumber
        self.force = force
        self.jobId = jobId
        self.namespaceId = namespaceId
        self.thingName = thingName
    }
}

struct DeleteJobExecutionInputBody: Swift.Equatable {
}

extension DeleteJobExecutionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteJobExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteJobExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidStateTransitionException" : self = .invalidStateTransitionException(try InvalidStateTransitionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteJobExecutionOutputError: Swift.Error, Swift.Equatable {
    case invalidRequestException(InvalidRequestException)
    case invalidStateTransitionException(InvalidStateTransitionException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteJobExecutionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteJobExecutionOutputResponse()"}
}

extension DeleteJobExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteJobExecutionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteJobExecutionOutputResponseBody: Swift.Equatable {
}

extension DeleteJobExecutionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteJobInput(force: \(Swift.String(describing: force)), jobId: \(Swift.String(describing: jobId)), namespaceId: \(Swift.String(describing: namespaceId)))"}
}

extension DeleteJobInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteJobOutputError>
}

public struct DeleteJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let namespaceId = input.operationInput.namespaceId {
            let namespaceIdQueryItem = ClientRuntime.URLQueryItem(name: "namespaceId".urlPercentEncoding(), value: Swift.String(namespaceId).urlPercentEncoding())
            input.builder.withQueryItem(namespaceIdQueryItem)
        }
        if input.operationInput.force != false {
            let forceQueryItem = ClientRuntime.URLQueryItem(name: "force".urlPercentEncoding(), value: Swift.String(input.operationInput.force).urlPercentEncoding())
            input.builder.withQueryItem(forceQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteJobOutputError>
}

public struct DeleteJobInput: Swift.Equatable {
    /// <p>(Optional) When true, you can delete a job which is "IN_PROGRESS". Otherwise, you can
    ///         only delete a job which is in a terminal state ("COMPLETED" or "CANCELED") or an exception
    ///         will occur. The default is false.</p>
    ///          <note>
    ///             <p>Deleting a job which is "IN_PROGRESS", will cause a device which is executing
    ///         the job to be unable to access job information or update the job execution status.
    ///         Use caution and ensure that each device executing a job which is deleted is able to recover to
    ///         a valid state.</p>
    ///          </note>
    public let force: Swift.Bool
    /// <p>The ID of the job to be deleted.</p>
    ///          <p>After a job deletion is completed, you may reuse this jobId when you create a new job.
    ///         However, this is not recommended, and you must ensure that your devices are not using the
    ///         jobId to refer to the deleted job.</p>
    public let jobId: Swift.String?
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    ///         <p>When you specify a value for this parameter, AWS IoT Core sends jobs notifications to MQTT topics that
    ///             contain the value in the following format.</p>
    ///         <p>
    ///             <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code>
    ///          </p>
    ///         <note>
    ///             <p>The <code>namespaceId</code> feature is in public preview.</p>
    ///          </note>
    public let namespaceId: Swift.String?

    public init (
        force: Swift.Bool = false,
        jobId: Swift.String? = nil,
        namespaceId: Swift.String? = nil
    )
    {
        self.force = force
        self.jobId = jobId
        self.namespaceId = namespaceId
    }
}

struct DeleteJobInputBody: Swift.Equatable {
}

extension DeleteJobInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidStateTransitionException" : self = .invalidStateTransitionException(try InvalidStateTransitionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteJobOutputError: Swift.Error, Swift.Equatable {
    case invalidRequestException(InvalidRequestException)
    case invalidStateTransitionException(InvalidStateTransitionException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteJobOutputResponse()"}
}

extension DeleteJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteJobOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteJobOutputResponseBody: Swift.Equatable {
}

extension DeleteJobOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteJobTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteJobTemplateInput(jobTemplateId: \(Swift.String(describing: jobTemplateId)))"}
}

extension DeleteJobTemplateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteJobTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteJobTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteJobTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteJobTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteJobTemplateOutputError>
}

public struct DeleteJobTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteJobTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteJobTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteJobTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteJobTemplateOutputError>
}

public struct DeleteJobTemplateInput: Swift.Equatable {
    /// <p>The unique identifier of the job template to delete.</p>
    public let jobTemplateId: Swift.String?

    public init (
        jobTemplateId: Swift.String? = nil
    )
    {
        self.jobTemplateId = jobTemplateId
    }
}

struct DeleteJobTemplateInputBody: Swift.Equatable {
}

extension DeleteJobTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteJobTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteJobTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteJobTemplateOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteJobTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteJobTemplateOutputResponse()"}
}

extension DeleteJobTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteJobTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteJobTemplateOutputResponseBody: Swift.Equatable {
}

extension DeleteJobTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteMitigationActionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMitigationActionInput(actionName: \(Swift.String(describing: actionName)))"}
}

extension DeleteMitigationActionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteMitigationActionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMitigationActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMitigationActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMitigationActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMitigationActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMitigationActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMitigationActionOutputError>
}

public struct DeleteMitigationActionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMitigationActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMitigationActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMitigationActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMitigationActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMitigationActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMitigationActionOutputError>
}

public struct DeleteMitigationActionInput: Swift.Equatable {
    /// <p>The name of the mitigation action that you want to delete.</p>
    public let actionName: Swift.String?

    public init (
        actionName: Swift.String? = nil
    )
    {
        self.actionName = actionName
    }
}

struct DeleteMitigationActionInputBody: Swift.Equatable {
}

extension DeleteMitigationActionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteMitigationActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMitigationActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMitigationActionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMitigationActionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMitigationActionOutputResponse()"}
}

extension DeleteMitigationActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMitigationActionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteMitigationActionOutputResponseBody: Swift.Equatable {
}

extension DeleteMitigationActionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteOTAUpdateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteOTAUpdateInput(deleteStream: \(Swift.String(describing: deleteStream)), forceDeleteAWSJob: \(Swift.String(describing: forceDeleteAWSJob)), otaUpdateId: \(Swift.String(describing: otaUpdateId)))"}
}

extension DeleteOTAUpdateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteOTAUpdateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteOTAUpdateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteOTAUpdateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteOTAUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteOTAUpdateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteOTAUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteOTAUpdateOutputError>
}

public struct DeleteOTAUpdateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteOTAUpdateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteOTAUpdateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteOTAUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.deleteStream != false {
            let deleteStreamQueryItem = ClientRuntime.URLQueryItem(name: "deleteStream".urlPercentEncoding(), value: Swift.String(input.operationInput.deleteStream).urlPercentEncoding())
            input.builder.withQueryItem(deleteStreamQueryItem)
        }
        if input.operationInput.forceDeleteAWSJob != false {
            let forceDeleteAWSJobQueryItem = ClientRuntime.URLQueryItem(name: "forceDeleteAWSJob".urlPercentEncoding(), value: Swift.String(input.operationInput.forceDeleteAWSJob).urlPercentEncoding())
            input.builder.withQueryItem(forceDeleteAWSJobQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteOTAUpdateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteOTAUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteOTAUpdateOutputError>
}

public struct DeleteOTAUpdateInput: Swift.Equatable {
    /// <p>When true, the stream created by the OTAUpdate process is deleted when the OTA update is deleted.
    ///             Ignored if the stream specified in the OTAUpdate is supplied by the user.</p>
    public let deleteStream: Swift.Bool
    /// <p>When true, deletes the AWS job created by the OTAUpdate process even if it is "IN_PROGRESS". Otherwise, if the
    ///             job is not in a terminal state ("COMPLETED" or "CANCELED") an exception will occur. The default is false.</p>
    public let forceDeleteAWSJob: Swift.Bool
    /// <p>The ID of the OTA update to delete.</p>
    public let otaUpdateId: Swift.String?

    public init (
        deleteStream: Swift.Bool = false,
        forceDeleteAWSJob: Swift.Bool = false,
        otaUpdateId: Swift.String? = nil
    )
    {
        self.deleteStream = deleteStream
        self.forceDeleteAWSJob = forceDeleteAWSJob
        self.otaUpdateId = otaUpdateId
    }
}

struct DeleteOTAUpdateInputBody: Swift.Equatable {
}

extension DeleteOTAUpdateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteOTAUpdateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteOTAUpdateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionConflictException" : self = .versionConflictException(try VersionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteOTAUpdateOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case versionConflictException(VersionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteOTAUpdateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteOTAUpdateOutputResponse()"}
}

extension DeleteOTAUpdateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteOTAUpdateOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteOTAUpdateOutputResponseBody: Swift.Equatable {
}

extension DeleteOTAUpdateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeletePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePolicyInput(policyName: \(Swift.String(describing: policyName)))"}
}

extension DeletePolicyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeletePolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePolicyOutputError>
}

public struct DeletePolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePolicyOutputError>
}

/// <p>The input for the DeletePolicy operation.</p>
public struct DeletePolicyInput: Swift.Equatable {
    /// <p>The name of the policy to delete.</p>
    public let policyName: Swift.String?

    public init (
        policyName: Swift.String? = nil
    )
    {
        self.policyName = policyName
    }
}

struct DeletePolicyInputBody: Swift.Equatable {
}

extension DeletePolicyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeletePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeleteConflictException" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePolicyOutputError: Swift.Error, Swift.Equatable {
    case deleteConflictException(DeleteConflictException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePolicyOutputResponse()"}
}

extension DeletePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeletePolicyOutputResponseBody: Swift.Equatable {
}

extension DeletePolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeletePolicyVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePolicyVersionInput(policyName: \(Swift.String(describing: policyName)), policyVersionId: \(Swift.String(describing: policyVersionId)))"}
}

extension DeletePolicyVersionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeletePolicyVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePolicyVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePolicyVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePolicyVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePolicyVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePolicyVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePolicyVersionOutputError>
}

public struct DeletePolicyVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePolicyVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePolicyVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePolicyVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePolicyVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePolicyVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePolicyVersionOutputError>
}

/// <p>The input for the DeletePolicyVersion operation.</p>
public struct DeletePolicyVersionInput: Swift.Equatable {
    /// <p>The name of the policy.</p>
    public let policyName: Swift.String?
    /// <p>The policy version ID.</p>
    public let policyVersionId: Swift.String?

    public init (
        policyName: Swift.String? = nil,
        policyVersionId: Swift.String? = nil
    )
    {
        self.policyName = policyName
        self.policyVersionId = policyVersionId
    }
}

struct DeletePolicyVersionInputBody: Swift.Equatable {
}

extension DeletePolicyVersionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeletePolicyVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePolicyVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeleteConflictException" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePolicyVersionOutputError: Swift.Error, Swift.Equatable {
    case deleteConflictException(DeleteConflictException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePolicyVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePolicyVersionOutputResponse()"}
}

extension DeletePolicyVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePolicyVersionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeletePolicyVersionOutputResponseBody: Swift.Equatable {
}

extension DeletePolicyVersionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteProvisioningTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteProvisioningTemplateInput(templateName: \(Swift.String(describing: templateName)))"}
}

extension DeleteProvisioningTemplateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteProvisioningTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteProvisioningTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteProvisioningTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteProvisioningTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteProvisioningTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteProvisioningTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteProvisioningTemplateOutputError>
}

public struct DeleteProvisioningTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteProvisioningTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteProvisioningTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteProvisioningTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteProvisioningTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteProvisioningTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteProvisioningTemplateOutputError>
}

public struct DeleteProvisioningTemplateInput: Swift.Equatable {
    /// <p>The name of the fleet provision template to delete.</p>
    public let templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct DeleteProvisioningTemplateInputBody: Swift.Equatable {
}

extension DeleteProvisioningTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteProvisioningTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteProvisioningTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingResourceUpdateException" : self = .conflictingResourceUpdateException(try ConflictingResourceUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeleteConflictException" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteProvisioningTemplateOutputError: Swift.Error, Swift.Equatable {
    case conflictingResourceUpdateException(ConflictingResourceUpdateException)
    case deleteConflictException(DeleteConflictException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteProvisioningTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteProvisioningTemplateOutputResponse()"}
}

extension DeleteProvisioningTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteProvisioningTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteProvisioningTemplateOutputResponseBody: Swift.Equatable {
}

extension DeleteProvisioningTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteProvisioningTemplateVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteProvisioningTemplateVersionInput(templateName: \(Swift.String(describing: templateName)), versionId: \(Swift.String(describing: versionId)))"}
}

extension DeleteProvisioningTemplateVersionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteProvisioningTemplateVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteProvisioningTemplateVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteProvisioningTemplateVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteProvisioningTemplateVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteProvisioningTemplateVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteProvisioningTemplateVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteProvisioningTemplateVersionOutputError>
}

public struct DeleteProvisioningTemplateVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteProvisioningTemplateVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteProvisioningTemplateVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteProvisioningTemplateVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteProvisioningTemplateVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteProvisioningTemplateVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteProvisioningTemplateVersionOutputError>
}

public struct DeleteProvisioningTemplateVersionInput: Swift.Equatable {
    /// <p>The name of the fleet provisioning template version to delete.</p>
    public let templateName: Swift.String?
    /// <p>The fleet provisioning template version ID to delete.</p>
    public let versionId: Swift.Int?

    public init (
        templateName: Swift.String? = nil,
        versionId: Swift.Int? = nil
    )
    {
        self.templateName = templateName
        self.versionId = versionId
    }
}

struct DeleteProvisioningTemplateVersionInputBody: Swift.Equatable {
}

extension DeleteProvisioningTemplateVersionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteProvisioningTemplateVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteProvisioningTemplateVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingResourceUpdateException" : self = .conflictingResourceUpdateException(try ConflictingResourceUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeleteConflictException" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteProvisioningTemplateVersionOutputError: Swift.Error, Swift.Equatable {
    case conflictingResourceUpdateException(ConflictingResourceUpdateException)
    case deleteConflictException(DeleteConflictException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteProvisioningTemplateVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteProvisioningTemplateVersionOutputResponse()"}
}

extension DeleteProvisioningTemplateVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteProvisioningTemplateVersionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteProvisioningTemplateVersionOutputResponseBody: Swift.Equatable {
}

extension DeleteProvisioningTemplateVersionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteRegistrationCodeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRegistrationCodeInput()"}
}

extension DeleteRegistrationCodeInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteRegistrationCodeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRegistrationCodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRegistrationCodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRegistrationCodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRegistrationCodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRegistrationCodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRegistrationCodeOutputError>
}

public struct DeleteRegistrationCodeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRegistrationCodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRegistrationCodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRegistrationCodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRegistrationCodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRegistrationCodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRegistrationCodeOutputError>
}

/// <p>The input for the DeleteRegistrationCode operation.</p>
public struct DeleteRegistrationCodeInput: Swift.Equatable {

    public init() {}
}

struct DeleteRegistrationCodeInputBody: Swift.Equatable {
}

extension DeleteRegistrationCodeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteRegistrationCodeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRegistrationCodeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRegistrationCodeOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRegistrationCodeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRegistrationCodeOutputResponse()"}
}

extension DeleteRegistrationCodeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The output for the DeleteRegistrationCode operation.</p>
public struct DeleteRegistrationCodeOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteRegistrationCodeOutputResponseBody: Swift.Equatable {
}

extension DeleteRegistrationCodeOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteRoleAliasInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRoleAliasInput(roleAlias: \(Swift.String(describing: roleAlias)))"}
}

extension DeleteRoleAliasInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteRoleAliasInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRoleAliasInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRoleAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRoleAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRoleAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRoleAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRoleAliasOutputError>
}

public struct DeleteRoleAliasInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRoleAliasInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRoleAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRoleAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRoleAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRoleAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRoleAliasOutputError>
}

public struct DeleteRoleAliasInput: Swift.Equatable {
    /// <p>The role alias to delete.</p>
    public let roleAlias: Swift.String?

    public init (
        roleAlias: Swift.String? = nil
    )
    {
        self.roleAlias = roleAlias
    }
}

struct DeleteRoleAliasInputBody: Swift.Equatable {
}

extension DeleteRoleAliasInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteRoleAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRoleAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeleteConflictException" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRoleAliasOutputError: Swift.Error, Swift.Equatable {
    case deleteConflictException(DeleteConflictException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRoleAliasOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRoleAliasOutputResponse()"}
}

extension DeleteRoleAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRoleAliasOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteRoleAliasOutputResponseBody: Swift.Equatable {
}

extension DeleteRoleAliasOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteScheduledAuditInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteScheduledAuditInput(scheduledAuditName: \(Swift.String(describing: scheduledAuditName)))"}
}

extension DeleteScheduledAuditInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteScheduledAuditInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScheduledAuditInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteScheduledAuditInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScheduledAuditOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteScheduledAuditInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScheduledAuditOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScheduledAuditOutputError>
}

public struct DeleteScheduledAuditInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScheduledAuditInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteScheduledAuditInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScheduledAuditOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteScheduledAuditInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScheduledAuditOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScheduledAuditOutputError>
}

public struct DeleteScheduledAuditInput: Swift.Equatable {
    /// <p>The name of the scheduled audit you want to delete.</p>
    public let scheduledAuditName: Swift.String?

    public init (
        scheduledAuditName: Swift.String? = nil
    )
    {
        self.scheduledAuditName = scheduledAuditName
    }
}

struct DeleteScheduledAuditInputBody: Swift.Equatable {
}

extension DeleteScheduledAuditInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteScheduledAuditOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteScheduledAuditOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteScheduledAuditOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteScheduledAuditOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteScheduledAuditOutputResponse()"}
}

extension DeleteScheduledAuditOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteScheduledAuditOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteScheduledAuditOutputResponseBody: Swift.Equatable {
}

extension DeleteScheduledAuditOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSecurityProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSecurityProfileInput(expectedVersion: \(Swift.String(describing: expectedVersion)), securityProfileName: \(Swift.String(describing: securityProfileName)))"}
}

extension DeleteSecurityProfileInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteSecurityProfileInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSecurityProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSecurityProfileOutputError>
}

public struct DeleteSecurityProfileInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSecurityProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedVersion = input.operationInput.expectedVersion {
            let expectedVersionQueryItem = ClientRuntime.URLQueryItem(name: "expectedVersion".urlPercentEncoding(), value: Swift.String(expectedVersion).urlPercentEncoding())
            input.builder.withQueryItem(expectedVersionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSecurityProfileOutputError>
}

public struct DeleteSecurityProfileInput: Swift.Equatable {
    /// <p>The expected version of the security profile. A new version is generated whenever
    ///         the security profile is updated. If you specify a value that is different from the actual
    ///         version, a <code>VersionConflictException</code> is thrown.</p>
    public let expectedVersion: Swift.Int?
    /// <p>The name of the security profile to be deleted.</p>
    public let securityProfileName: Swift.String?

    public init (
        expectedVersion: Swift.Int? = nil,
        securityProfileName: Swift.String? = nil
    )
    {
        self.expectedVersion = expectedVersion
        self.securityProfileName = securityProfileName
    }
}

struct DeleteSecurityProfileInputBody: Swift.Equatable {
}

extension DeleteSecurityProfileInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSecurityProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSecurityProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionConflictException" : self = .versionConflictException(try VersionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSecurityProfileOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case versionConflictException(VersionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSecurityProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSecurityProfileOutputResponse()"}
}

extension DeleteSecurityProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteSecurityProfileOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteSecurityProfileOutputResponseBody: Swift.Equatable {
}

extension DeleteSecurityProfileOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteStreamInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteStreamInput(streamId: \(Swift.String(describing: streamId)))"}
}

extension DeleteStreamInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteStreamInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteStreamInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteStreamOutputError>
}

public struct DeleteStreamInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteStreamInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteStreamOutputError>
}

public struct DeleteStreamInput: Swift.Equatable {
    /// <p>The stream ID.</p>
    public let streamId: Swift.String?

    public init (
        streamId: Swift.String? = nil
    )
    {
        self.streamId = streamId
    }
}

struct DeleteStreamInputBody: Swift.Equatable {
}

extension DeleteStreamInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeleteConflictException" : self = .deleteConflictException(try DeleteConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteStreamOutputError: Swift.Error, Swift.Equatable {
    case deleteConflictException(DeleteConflictException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStreamOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteStreamOutputResponse()"}
}

extension DeleteStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteStreamOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteStreamOutputResponseBody: Swift.Equatable {
}

extension DeleteStreamOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteThingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteThingGroupInput(expectedVersion: \(Swift.String(describing: expectedVersion)), thingGroupName: \(Swift.String(describing: thingGroupName)))"}
}

extension DeleteThingGroupInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteThingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteThingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteThingGroupOutputError>
}

public struct DeleteThingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteThingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedVersion = input.operationInput.expectedVersion {
            let expectedVersionQueryItem = ClientRuntime.URLQueryItem(name: "expectedVersion".urlPercentEncoding(), value: Swift.String(expectedVersion).urlPercentEncoding())
            input.builder.withQueryItem(expectedVersionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteThingGroupOutputError>
}

public struct DeleteThingGroupInput: Swift.Equatable {
    /// <p>The expected version of the thing group to delete.</p>
    public let expectedVersion: Swift.Int?
    /// <p>The name of the thing group to delete.</p>
    public let thingGroupName: Swift.String?

    public init (
        expectedVersion: Swift.Int? = nil,
        thingGroupName: Swift.String? = nil
    )
    {
        self.expectedVersion = expectedVersion
        self.thingGroupName = thingGroupName
    }
}

struct DeleteThingGroupInputBody: Swift.Equatable {
}

extension DeleteThingGroupInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteThingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteThingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionConflictException" : self = .versionConflictException(try VersionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteThingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case versionConflictException(VersionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteThingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteThingGroupOutputResponse()"}
}

extension DeleteThingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteThingGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteThingGroupOutputResponseBody: Swift.Equatable {
}

extension DeleteThingGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteThingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteThingInput(expectedVersion: \(Swift.String(describing: expectedVersion)), thingName: \(Swift.String(describing: thingName)))"}
}

extension DeleteThingInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteThingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteThingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteThingOutputError>
}

public struct DeleteThingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteThingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedVersion = input.operationInput.expectedVersion {
            let expectedVersionQueryItem = ClientRuntime.URLQueryItem(name: "expectedVersion".urlPercentEncoding(), value: Swift.String(expectedVersion).urlPercentEncoding())
            input.builder.withQueryItem(expectedVersionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteThingOutputError>
}

/// <p>The input for the DeleteThing operation.</p>
public struct DeleteThingInput: Swift.Equatable {
    /// <p>The expected version of the thing record in the registry. If the version of the
    /// 			record in the registry does not match the expected version specified in the request, the
    /// 				<code>DeleteThing</code> request is rejected with a
    /// 				<code>VersionConflictException</code>.</p>
    public let expectedVersion: Swift.Int?
    /// <p>The name of the thing to delete.</p>
    public let thingName: Swift.String?

    public init (
        expectedVersion: Swift.Int? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.expectedVersion = expectedVersion
        self.thingName = thingName
    }
}

struct DeleteThingInputBody: Swift.Equatable {
}

extension DeleteThingInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteThingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteThingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionConflictException" : self = .versionConflictException(try VersionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteThingOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case versionConflictException(VersionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteThingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteThingOutputResponse()"}
}

extension DeleteThingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The output of the DeleteThing operation.</p>
public struct DeleteThingOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteThingOutputResponseBody: Swift.Equatable {
}

extension DeleteThingOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteThingTypeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteThingTypeInput(thingTypeName: \(Swift.String(describing: thingTypeName)))"}
}

extension DeleteThingTypeInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteThingTypeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteThingTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteThingTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteThingTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteThingTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteThingTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteThingTypeOutputError>
}

public struct DeleteThingTypeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteThingTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteThingTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteThingTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteThingTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteThingTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteThingTypeOutputError>
}

/// <p>The input for the DeleteThingType operation.</p>
public struct DeleteThingTypeInput: Swift.Equatable {
    /// <p>The name of the thing type.</p>
    public let thingTypeName: Swift.String?

    public init (
        thingTypeName: Swift.String? = nil
    )
    {
        self.thingTypeName = thingTypeName
    }
}

struct DeleteThingTypeInputBody: Swift.Equatable {
}

extension DeleteThingTypeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteThingTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteThingTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteThingTypeOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteThingTypeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteThingTypeOutputResponse()"}
}

extension DeleteThingTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The output for the DeleteThingType operation.</p>
public struct DeleteThingTypeOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteThingTypeOutputResponseBody: Swift.Equatable {
}

extension DeleteThingTypeOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteTopicRuleDestinationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTopicRuleDestinationInput(arn: \(Swift.String(describing: arn)))"}
}

extension DeleteTopicRuleDestinationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteTopicRuleDestinationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTopicRuleDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTopicRuleDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTopicRuleDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTopicRuleDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTopicRuleDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTopicRuleDestinationOutputError>
}

public struct DeleteTopicRuleDestinationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTopicRuleDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTopicRuleDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTopicRuleDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTopicRuleDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTopicRuleDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTopicRuleDestinationOutputError>
}

public struct DeleteTopicRuleDestinationInput: Swift.Equatable {
    /// <p>The ARN of the topic rule destination to delete.</p>
    public let arn: Swift.String?

    public init (
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

struct DeleteTopicRuleDestinationInputBody: Swift.Equatable {
}

extension DeleteTopicRuleDestinationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteTopicRuleDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTopicRuleDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingResourceUpdateException" : self = .conflictingResourceUpdateException(try ConflictingResourceUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTopicRuleDestinationOutputError: Swift.Error, Swift.Equatable {
    case conflictingResourceUpdateException(ConflictingResourceUpdateException)
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTopicRuleDestinationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTopicRuleDestinationOutputResponse()"}
}

extension DeleteTopicRuleDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTopicRuleDestinationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteTopicRuleDestinationOutputResponseBody: Swift.Equatable {
}

extension DeleteTopicRuleDestinationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteTopicRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTopicRuleInput(ruleName: \(Swift.String(describing: ruleName)))"}
}

extension DeleteTopicRuleInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteTopicRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTopicRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTopicRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTopicRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTopicRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTopicRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTopicRuleOutputError>
}

public struct DeleteTopicRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTopicRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTopicRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTopicRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTopicRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTopicRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTopicRuleOutputError>
}

/// <p>The input for the DeleteTopicRule operation.</p>
public struct DeleteTopicRuleInput: Swift.Equatable {
    /// <p>The name of the rule.</p>
    public let ruleName: Swift.String?

    public init (
        ruleName: Swift.String? = nil
    )
    {
        self.ruleName = ruleName
    }
}

struct DeleteTopicRuleInputBody: Swift.Equatable {
}

extension DeleteTopicRuleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteTopicRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTopicRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingResourceUpdateException" : self = .conflictingResourceUpdateException(try ConflictingResourceUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTopicRuleOutputError: Swift.Error, Swift.Equatable {
    case conflictingResourceUpdateException(ConflictingResourceUpdateException)
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTopicRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTopicRuleOutputResponse()"}
}

extension DeleteTopicRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTopicRuleOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteTopicRuleOutputResponseBody: Swift.Equatable {
}

extension DeleteTopicRuleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteV2LoggingLevelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteV2LoggingLevelInput(targetName: \(Swift.String(describing: targetName)), targetType: \(Swift.String(describing: targetType)))"}
}

extension DeleteV2LoggingLevelInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteV2LoggingLevelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteV2LoggingLevelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteV2LoggingLevelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteV2LoggingLevelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteV2LoggingLevelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteV2LoggingLevelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteV2LoggingLevelOutputError>
}

public struct DeleteV2LoggingLevelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteV2LoggingLevelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteV2LoggingLevelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteV2LoggingLevelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let targetName = input.operationInput.targetName {
            let targetNameQueryItem = ClientRuntime.URLQueryItem(name: "targetName".urlPercentEncoding(), value: Swift.String(targetName).urlPercentEncoding())
            input.builder.withQueryItem(targetNameQueryItem)
        }
        if let targetType = input.operationInput.targetType {
            let targetTypeQueryItem = ClientRuntime.URLQueryItem(name: "targetType".urlPercentEncoding(), value: Swift.String(targetType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(targetTypeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteV2LoggingLevelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteV2LoggingLevelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteV2LoggingLevelOutputError>
}

public struct DeleteV2LoggingLevelInput: Swift.Equatable {
    /// <p>The name of the resource for which you are configuring logging.</p>
    public let targetName: Swift.String?
    /// <p>The type of resource for which you are configuring logging. Must be
    ///             <code>THING_Group</code>.</p>
    public let targetType: IotClientTypes.LogTargetType?

    public init (
        targetName: Swift.String? = nil,
        targetType: IotClientTypes.LogTargetType? = nil
    )
    {
        self.targetName = targetName
        self.targetType = targetType
    }
}

struct DeleteV2LoggingLevelInputBody: Swift.Equatable {
}

extension DeleteV2LoggingLevelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteV2LoggingLevelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteV2LoggingLevelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteV2LoggingLevelOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteV2LoggingLevelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteV2LoggingLevelOutputResponse()"}
}

extension DeleteV2LoggingLevelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteV2LoggingLevelOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteV2LoggingLevelOutputResponseBody: Swift.Equatable {
}

extension DeleteV2LoggingLevelOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes.Denied: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case explicitDeny
        case implicitDeny
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let explicitDeny = explicitDeny {
            try encodeContainer.encode(explicitDeny, forKey: .explicitDeny)
        }
        if let implicitDeny = implicitDeny {
            try encodeContainer.encode(implicitDeny, forKey: .implicitDeny)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let implicitDenyDecoded = try containerValues.decodeIfPresent(IotClientTypes.ImplicitDeny.self, forKey: .implicitDeny)
        implicitDeny = implicitDenyDecoded
        let explicitDenyDecoded = try containerValues.decodeIfPresent(IotClientTypes.ExplicitDeny.self, forKey: .explicitDeny)
        explicitDeny = explicitDenyDecoded
    }
}

extension IotClientTypes.Denied: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Denied(explicitDeny: \(Swift.String(describing: explicitDeny)), implicitDeny: \(Swift.String(describing: implicitDeny)))"}
}

extension IotClientTypes {
    /// <p>Contains information that denied the authorization.</p>
    public struct Denied: Swift.Equatable {
        /// <p>Information that explicitly denies the authorization. </p>
        public let explicitDeny: IotClientTypes.ExplicitDeny?
        /// <p>Information that implicitly denies the authorization. When a policy doesn't
        ///          explicitly deny or allow an action on a resource it is considered an implicit
        ///          deny.</p>
        public let implicitDeny: IotClientTypes.ImplicitDeny?

        public init (
            explicitDeny: IotClientTypes.ExplicitDeny? = nil,
            implicitDeny: IotClientTypes.ImplicitDeny? = nil
        )
        {
            self.explicitDeny = explicitDeny
            self.implicitDeny = implicitDeny
        }
    }

}

public struct DeprecateThingTypeInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeprecateThingTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeprecateThingTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeprecateThingTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeprecateThingTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeprecateThingTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeprecateThingTypeOutputError>
}

extension DeprecateThingTypeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeprecateThingTypeInput(thingTypeName: \(Swift.String(describing: thingTypeName)), undoDeprecate: \(Swift.String(describing: undoDeprecate)))"}
}

extension DeprecateThingTypeInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case undoDeprecate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if undoDeprecate != false {
            try encodeContainer.encode(undoDeprecate, forKey: .undoDeprecate)
        }
    }
}

public struct DeprecateThingTypeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeprecateThingTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeprecateThingTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeprecateThingTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeprecateThingTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeprecateThingTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeprecateThingTypeOutputError>
}

public struct DeprecateThingTypeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeprecateThingTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeprecateThingTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeprecateThingTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeprecateThingTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeprecateThingTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeprecateThingTypeOutputError>
}

/// <p>The input for the DeprecateThingType operation.</p>
public struct DeprecateThingTypeInput: Swift.Equatable {
    /// <p>The name of the thing type to deprecate.</p>
    public let thingTypeName: Swift.String?
    /// <p>Whether to undeprecate a deprecated thing type. If <b>true</b>, the thing type will not be deprecated anymore and you can
    /// 			associate it with things.</p>
    public let undoDeprecate: Swift.Bool

    public init (
        thingTypeName: Swift.String? = nil,
        undoDeprecate: Swift.Bool = false
    )
    {
        self.thingTypeName = thingTypeName
        self.undoDeprecate = undoDeprecate
    }
}

struct DeprecateThingTypeInputBody: Swift.Equatable {
    public let undoDeprecate: Swift.Bool
}

extension DeprecateThingTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case undoDeprecate
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let undoDeprecateDecoded = try containerValues.decode(Swift.Bool.self, forKey: .undoDeprecate)
        undoDeprecate = undoDeprecateDecoded
    }
}

extension DeprecateThingTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeprecateThingTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeprecateThingTypeOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeprecateThingTypeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeprecateThingTypeOutputResponse()"}
}

extension DeprecateThingTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The output for the DeprecateThingType operation.</p>
public struct DeprecateThingTypeOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeprecateThingTypeOutputResponseBody: Swift.Equatable {
}

extension DeprecateThingTypeOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeAccountAuditConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAccountAuditConfigurationInput()"}
}

extension DescribeAccountAuditConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeAccountAuditConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountAuditConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAccountAuditConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountAuditConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAccountAuditConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountAuditConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountAuditConfigurationOutputError>
}

public struct DescribeAccountAuditConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountAuditConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAccountAuditConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountAuditConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAccountAuditConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountAuditConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountAuditConfigurationOutputError>
}

public struct DescribeAccountAuditConfigurationInput: Swift.Equatable {

    public init() {}
}

struct DescribeAccountAuditConfigurationInputBody: Swift.Equatable {
}

extension DescribeAccountAuditConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeAccountAuditConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAccountAuditConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAccountAuditConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAccountAuditConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAccountAuditConfigurationOutputResponse(auditCheckConfigurations: \(Swift.String(describing: auditCheckConfigurations)), auditNotificationTargetConfigurations: \(Swift.String(describing: auditNotificationTargetConfigurations)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension DescribeAccountAuditConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAccountAuditConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.auditCheckConfigurations = output.auditCheckConfigurations
            self.auditNotificationTargetConfigurations = output.auditNotificationTargetConfigurations
            self.roleArn = output.roleArn
        } else {
            self.auditCheckConfigurations = nil
            self.auditNotificationTargetConfigurations = nil
            self.roleArn = nil
        }
    }
}

public struct DescribeAccountAuditConfigurationOutputResponse: Swift.Equatable {
    /// <p>Which audit checks are enabled and disabled for this account.</p>
    public let auditCheckConfigurations: [Swift.String:IotClientTypes.AuditCheckConfiguration]?
    /// <p>Information about the targets to which audit notifications are sent for
    ///             this account.</p>
    public let auditNotificationTargetConfigurations: [Swift.String:IotClientTypes.AuditNotificationTarget]?
    /// <p>The ARN of the role that grants permission to AWS IoT to access information
    ///             about your devices, policies, certificates, and other items as required when
    ///             performing an audit.</p>
    ///           <p>On the first call to <code>UpdateAccountAuditConfiguration</code>,
    ///             this parameter is required.</p>
    public let roleArn: Swift.String?

    public init (
        auditCheckConfigurations: [Swift.String:IotClientTypes.AuditCheckConfiguration]? = nil,
        auditNotificationTargetConfigurations: [Swift.String:IotClientTypes.AuditNotificationTarget]? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.auditCheckConfigurations = auditCheckConfigurations
        self.auditNotificationTargetConfigurations = auditNotificationTargetConfigurations
        self.roleArn = roleArn
    }
}

struct DescribeAccountAuditConfigurationOutputResponseBody: Swift.Equatable {
    public let roleArn: Swift.String?
    public let auditNotificationTargetConfigurations: [Swift.String:IotClientTypes.AuditNotificationTarget]?
    public let auditCheckConfigurations: [Swift.String:IotClientTypes.AuditCheckConfiguration]?
}

extension DescribeAccountAuditConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditCheckConfigurations
        case auditNotificationTargetConfigurations
        case roleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let auditNotificationTargetConfigurationsContainer = try containerValues.decodeIfPresent([Swift.String: IotClientTypes.AuditNotificationTarget?].self, forKey: .auditNotificationTargetConfigurations)
        var auditNotificationTargetConfigurationsDecoded0: [Swift.String:IotClientTypes.AuditNotificationTarget]? = nil
        if let auditNotificationTargetConfigurationsContainer = auditNotificationTargetConfigurationsContainer {
            auditNotificationTargetConfigurationsDecoded0 = [Swift.String:IotClientTypes.AuditNotificationTarget]()
            for (key0, auditnotificationtarget0) in auditNotificationTargetConfigurationsContainer {
                if let auditnotificationtarget0 = auditnotificationtarget0 {
                    auditNotificationTargetConfigurationsDecoded0?[key0] = auditnotificationtarget0
                }
            }
        }
        auditNotificationTargetConfigurations = auditNotificationTargetConfigurationsDecoded0
        let auditCheckConfigurationsContainer = try containerValues.decodeIfPresent([Swift.String: IotClientTypes.AuditCheckConfiguration?].self, forKey: .auditCheckConfigurations)
        var auditCheckConfigurationsDecoded0: [Swift.String:IotClientTypes.AuditCheckConfiguration]? = nil
        if let auditCheckConfigurationsContainer = auditCheckConfigurationsContainer {
            auditCheckConfigurationsDecoded0 = [Swift.String:IotClientTypes.AuditCheckConfiguration]()
            for (key0, auditcheckconfiguration0) in auditCheckConfigurationsContainer {
                if let auditcheckconfiguration0 = auditcheckconfiguration0 {
                    auditCheckConfigurationsDecoded0?[key0] = auditcheckconfiguration0
                }
            }
        }
        auditCheckConfigurations = auditCheckConfigurationsDecoded0
    }
}

extension DescribeAuditFindingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAuditFindingInput(findingId: \(Swift.String(describing: findingId)))"}
}

extension DescribeAuditFindingInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeAuditFindingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAuditFindingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAuditFindingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAuditFindingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAuditFindingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAuditFindingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAuditFindingOutputError>
}

public struct DescribeAuditFindingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAuditFindingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAuditFindingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAuditFindingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAuditFindingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAuditFindingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAuditFindingOutputError>
}

public struct DescribeAuditFindingInput: Swift.Equatable {
    /// <p>A unique identifier for a single audit finding. You can use this identifier to apply mitigation actions to the finding.</p>
    public let findingId: Swift.String?

    public init (
        findingId: Swift.String? = nil
    )
    {
        self.findingId = findingId
    }
}

struct DescribeAuditFindingInputBody: Swift.Equatable {
}

extension DescribeAuditFindingInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeAuditFindingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAuditFindingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAuditFindingOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAuditFindingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAuditFindingOutputResponse(finding: \(Swift.String(describing: finding)))"}
}

extension DescribeAuditFindingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAuditFindingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.finding = output.finding
        } else {
            self.finding = nil
        }
    }
}

public struct DescribeAuditFindingOutputResponse: Swift.Equatable {
    /// <p>The findings (results) of the audit.</p>
    public let finding: IotClientTypes.AuditFinding?

    public init (
        finding: IotClientTypes.AuditFinding? = nil
    )
    {
        self.finding = finding
    }
}

struct DescribeAuditFindingOutputResponseBody: Swift.Equatable {
    public let finding: IotClientTypes.AuditFinding?
}

extension DescribeAuditFindingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case finding
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditFinding.self, forKey: .finding)
        finding = findingDecoded
    }
}

extension DescribeAuditMitigationActionsTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAuditMitigationActionsTaskInput(taskId: \(Swift.String(describing: taskId)))"}
}

extension DescribeAuditMitigationActionsTaskInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeAuditMitigationActionsTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAuditMitigationActionsTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAuditMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAuditMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAuditMitigationActionsTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAuditMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAuditMitigationActionsTaskOutputError>
}

public struct DescribeAuditMitigationActionsTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAuditMitigationActionsTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAuditMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAuditMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAuditMitigationActionsTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAuditMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAuditMitigationActionsTaskOutputError>
}

public struct DescribeAuditMitigationActionsTaskInput: Swift.Equatable {
    /// <p>The unique identifier for the audit mitigation task.</p>
    public let taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct DescribeAuditMitigationActionsTaskInputBody: Swift.Equatable {
}

extension DescribeAuditMitigationActionsTaskInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeAuditMitigationActionsTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAuditMitigationActionsTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAuditMitigationActionsTaskOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAuditMitigationActionsTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAuditMitigationActionsTaskOutputResponse(actionsDefinition: \(Swift.String(describing: actionsDefinition)), auditCheckToActionsMapping: \(Swift.String(describing: auditCheckToActionsMapping)), endTime: \(Swift.String(describing: endTime)), startTime: \(Swift.String(describing: startTime)), target: \(Swift.String(describing: target)), taskStatistics: \(Swift.String(describing: taskStatistics)), taskStatus: \(Swift.String(describing: taskStatus)))"}
}

extension DescribeAuditMitigationActionsTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAuditMitigationActionsTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionsDefinition = output.actionsDefinition
            self.auditCheckToActionsMapping = output.auditCheckToActionsMapping
            self.endTime = output.endTime
            self.startTime = output.startTime
            self.target = output.target
            self.taskStatistics = output.taskStatistics
            self.taskStatus = output.taskStatus
        } else {
            self.actionsDefinition = nil
            self.auditCheckToActionsMapping = nil
            self.endTime = nil
            self.startTime = nil
            self.target = nil
            self.taskStatistics = nil
            self.taskStatus = nil
        }
    }
}

public struct DescribeAuditMitigationActionsTaskOutputResponse: Swift.Equatable {
    /// <p>Specifies the mitigation actions and their parameters that are applied as part of this task.</p>
    public let actionsDefinition: [IotClientTypes.MitigationAction]?
    /// <p>Specifies the mitigation actions that should be applied to specific audit checks.</p>
    public let auditCheckToActionsMapping: [Swift.String:[Swift.String]]?
    /// <p>The date and time when the task was completed or canceled.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>The date and time when the task was started.</p>
    public let startTime: ClientRuntime.Date?
    /// <p>Identifies the findings to which the mitigation actions are applied. This can be by audit checks, by audit task, or a set of findings.</p>
    public let target: IotClientTypes.AuditMitigationActionsTaskTarget?
    /// <p>Aggregate counts of the results when the mitigation tasks were applied to the findings for this audit mitigation actions task.</p>
    public let taskStatistics: [Swift.String:IotClientTypes.TaskStatisticsForAuditCheck]?
    /// <p>The current status of the task.</p>
    public let taskStatus: IotClientTypes.AuditMitigationActionsTaskStatus?

    public init (
        actionsDefinition: [IotClientTypes.MitigationAction]? = nil,
        auditCheckToActionsMapping: [Swift.String:[Swift.String]]? = nil,
        endTime: ClientRuntime.Date? = nil,
        startTime: ClientRuntime.Date? = nil,
        target: IotClientTypes.AuditMitigationActionsTaskTarget? = nil,
        taskStatistics: [Swift.String:IotClientTypes.TaskStatisticsForAuditCheck]? = nil,
        taskStatus: IotClientTypes.AuditMitigationActionsTaskStatus? = nil
    )
    {
        self.actionsDefinition = actionsDefinition
        self.auditCheckToActionsMapping = auditCheckToActionsMapping
        self.endTime = endTime
        self.startTime = startTime
        self.target = target
        self.taskStatistics = taskStatistics
        self.taskStatus = taskStatus
    }
}

struct DescribeAuditMitigationActionsTaskOutputResponseBody: Swift.Equatable {
    public let taskStatus: IotClientTypes.AuditMitigationActionsTaskStatus?
    public let startTime: ClientRuntime.Date?
    public let endTime: ClientRuntime.Date?
    public let taskStatistics: [Swift.String:IotClientTypes.TaskStatisticsForAuditCheck]?
    public let target: IotClientTypes.AuditMitigationActionsTaskTarget?
    public let auditCheckToActionsMapping: [Swift.String:[Swift.String]]?
    public let actionsDefinition: [IotClientTypes.MitigationAction]?
}

extension DescribeAuditMitigationActionsTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsDefinition
        case auditCheckToActionsMapping
        case endTime
        case startTime
        case target
        case taskStatistics
        case taskStatus
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditMitigationActionsTaskStatus.self, forKey: .taskStatus)
        taskStatus = taskStatusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let taskStatisticsContainer = try containerValues.decodeIfPresent([Swift.String: IotClientTypes.TaskStatisticsForAuditCheck?].self, forKey: .taskStatistics)
        var taskStatisticsDecoded0: [Swift.String:IotClientTypes.TaskStatisticsForAuditCheck]? = nil
        if let taskStatisticsContainer = taskStatisticsContainer {
            taskStatisticsDecoded0 = [Swift.String:IotClientTypes.TaskStatisticsForAuditCheck]()
            for (key0, taskstatisticsforauditcheck0) in taskStatisticsContainer {
                if let taskstatisticsforauditcheck0 = taskstatisticsforauditcheck0 {
                    taskStatisticsDecoded0?[key0] = taskstatisticsforauditcheck0
                }
            }
        }
        taskStatistics = taskStatisticsDecoded0
        let targetDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditMitigationActionsTaskTarget.self, forKey: .target)
        target = targetDecoded
        let auditCheckToActionsMappingContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .auditCheckToActionsMapping)
        var auditCheckToActionsMappingDecoded0: [Swift.String:[Swift.String]]? = nil
        if let auditCheckToActionsMappingContainer = auditCheckToActionsMappingContainer {
            auditCheckToActionsMappingDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, mitigationactionnamelist0) in auditCheckToActionsMappingContainer {
                var mitigationactionnamelist0Decoded0: [Swift.String]? = nil
                if let mitigationactionnamelist0 = mitigationactionnamelist0 {
                    mitigationactionnamelist0Decoded0 = [Swift.String]()
                    for string1 in mitigationactionnamelist0 {
                        if let string1 = string1 {
                            mitigationactionnamelist0Decoded0?.append(string1)
                        }
                    }
                }
                auditCheckToActionsMappingDecoded0?[key0] = mitigationactionnamelist0Decoded0
            }
        }
        auditCheckToActionsMapping = auditCheckToActionsMappingDecoded0
        let actionsDefinitionContainer = try containerValues.decodeIfPresent([IotClientTypes.MitigationAction?].self, forKey: .actionsDefinition)
        var actionsDefinitionDecoded0:[IotClientTypes.MitigationAction]? = nil
        if let actionsDefinitionContainer = actionsDefinitionContainer {
            actionsDefinitionDecoded0 = [IotClientTypes.MitigationAction]()
            for structure0 in actionsDefinitionContainer {
                if let structure0 = structure0 {
                    actionsDefinitionDecoded0?.append(structure0)
                }
            }
        }
        actionsDefinition = actionsDefinitionDecoded0
    }
}

public struct DescribeAuditSuppressionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAuditSuppressionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAuditSuppressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAuditSuppressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAuditSuppressionOutputError>
}

extension DescribeAuditSuppressionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAuditSuppressionInput(checkName: \(Swift.String(describing: checkName)), resourceIdentifier: \(Swift.String(describing: resourceIdentifier)))"}
}

extension DescribeAuditSuppressionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkName
        case resourceIdentifier
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkName = checkName {
            try encodeContainer.encode(checkName, forKey: .checkName)
        }
        if let resourceIdentifier = resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
    }
}

public struct DescribeAuditSuppressionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAuditSuppressionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAuditSuppressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAuditSuppressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAuditSuppressionOutputError>
}

public struct DescribeAuditSuppressionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAuditSuppressionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAuditSuppressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAuditSuppressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAuditSuppressionOutputError>
}

public struct DescribeAuditSuppressionInput: Swift.Equatable {
    /// <p>An audit check name. Checks must be enabled
    ///         for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list
    ///         of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code>
    ///         to select which checks are enabled.)</p>
    public let checkName: Swift.String?
    /// <p>Information that identifies the noncompliant resource.</p>
    public let resourceIdentifier: IotClientTypes.ResourceIdentifier?

    public init (
        checkName: Swift.String? = nil,
        resourceIdentifier: IotClientTypes.ResourceIdentifier? = nil
    )
    {
        self.checkName = checkName
        self.resourceIdentifier = resourceIdentifier
    }
}

struct DescribeAuditSuppressionInputBody: Swift.Equatable {
    public let checkName: Swift.String?
    public let resourceIdentifier: IotClientTypes.ResourceIdentifier?
}

extension DescribeAuditSuppressionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkName
        case resourceIdentifier
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkName)
        checkName = checkNameDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(IotClientTypes.ResourceIdentifier.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
    }
}

extension DescribeAuditSuppressionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAuditSuppressionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAuditSuppressionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAuditSuppressionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAuditSuppressionOutputResponse(checkName: \(Swift.String(describing: checkName)), description: \(Swift.String(describing: description)), expirationDate: \(Swift.String(describing: expirationDate)), resourceIdentifier: \(Swift.String(describing: resourceIdentifier)), suppressIndefinitely: \(Swift.String(describing: suppressIndefinitely)))"}
}

extension DescribeAuditSuppressionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAuditSuppressionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.checkName = output.checkName
            self.description = output.description
            self.expirationDate = output.expirationDate
            self.resourceIdentifier = output.resourceIdentifier
            self.suppressIndefinitely = output.suppressIndefinitely
        } else {
            self.checkName = nil
            self.description = nil
            self.expirationDate = nil
            self.resourceIdentifier = nil
            self.suppressIndefinitely = nil
        }
    }
}

public struct DescribeAuditSuppressionOutputResponse: Swift.Equatable {
    /// <p>An audit check name. Checks must be enabled
    ///         for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list
    ///         of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code>
    ///         to select which checks are enabled.)</p>
    public let checkName: Swift.String?
    /// <p>
    ///       The description of the audit suppression.
    ///     </p>
    public let description: Swift.String?
    /// <p>
    ///       The epoch timestamp in seconds at which this suppression expires.
    ///     </p>
    public let expirationDate: ClientRuntime.Date?
    /// <p>Information that identifies the noncompliant resource.</p>
    public let resourceIdentifier: IotClientTypes.ResourceIdentifier?
    /// <p>
    ///       Indicates whether a suppression should exist indefinitely or not.
    ///     </p>
    public let suppressIndefinitely: Swift.Bool?

    public init (
        checkName: Swift.String? = nil,
        description: Swift.String? = nil,
        expirationDate: ClientRuntime.Date? = nil,
        resourceIdentifier: IotClientTypes.ResourceIdentifier? = nil,
        suppressIndefinitely: Swift.Bool? = nil
    )
    {
        self.checkName = checkName
        self.description = description
        self.expirationDate = expirationDate
        self.resourceIdentifier = resourceIdentifier
        self.suppressIndefinitely = suppressIndefinitely
    }
}

struct DescribeAuditSuppressionOutputResponseBody: Swift.Equatable {
    public let checkName: Swift.String?
    public let resourceIdentifier: IotClientTypes.ResourceIdentifier?
    public let expirationDate: ClientRuntime.Date?
    public let suppressIndefinitely: Swift.Bool?
    public let description: Swift.String?
}

extension DescribeAuditSuppressionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkName
        case description
        case expirationDate
        case resourceIdentifier
        case suppressIndefinitely
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkName)
        checkName = checkNameDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(IotClientTypes.ResourceIdentifier.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let suppressIndefinitelyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .suppressIndefinitely)
        suppressIndefinitely = suppressIndefinitelyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension DescribeAuditTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAuditTaskInput(taskId: \(Swift.String(describing: taskId)))"}
}

extension DescribeAuditTaskInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeAuditTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAuditTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAuditTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAuditTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAuditTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAuditTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAuditTaskOutputError>
}

public struct DescribeAuditTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAuditTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAuditTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAuditTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAuditTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAuditTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAuditTaskOutputError>
}

public struct DescribeAuditTaskInput: Swift.Equatable {
    /// <p>The ID of the audit whose information you want to get.</p>
    public let taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct DescribeAuditTaskInputBody: Swift.Equatable {
}

extension DescribeAuditTaskInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeAuditTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAuditTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAuditTaskOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAuditTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAuditTaskOutputResponse(auditDetails: \(Swift.String(describing: auditDetails)), scheduledAuditName: \(Swift.String(describing: scheduledAuditName)), taskStartTime: \(Swift.String(describing: taskStartTime)), taskStatistics: \(Swift.String(describing: taskStatistics)), taskStatus: \(Swift.String(describing: taskStatus)), taskType: \(Swift.String(describing: taskType)))"}
}

extension DescribeAuditTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAuditTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.auditDetails = output.auditDetails
            self.scheduledAuditName = output.scheduledAuditName
            self.taskStartTime = output.taskStartTime
            self.taskStatistics = output.taskStatistics
            self.taskStatus = output.taskStatus
            self.taskType = output.taskType
        } else {
            self.auditDetails = nil
            self.scheduledAuditName = nil
            self.taskStartTime = nil
            self.taskStatistics = nil
            self.taskStatus = nil
            self.taskType = nil
        }
    }
}

public struct DescribeAuditTaskOutputResponse: Swift.Equatable {
    /// <p>Detailed information about each check performed during this audit.</p>
    public let auditDetails: [Swift.String:IotClientTypes.AuditCheckDetails]?
    /// <p>The name of the scheduled audit (only if the audit was a scheduled audit).</p>
    public let scheduledAuditName: Swift.String?
    /// <p>The time the audit started.</p>
    public let taskStartTime: ClientRuntime.Date?
    /// <p>Statistical information about the audit.</p>
    public let taskStatistics: IotClientTypes.TaskStatistics?
    /// <p>The status of the audit: one of "IN_PROGRESS", "COMPLETED",
    ///             "FAILED", or "CANCELED".</p>
    public let taskStatus: IotClientTypes.AuditTaskStatus?
    /// <p>The type of audit: "ON_DEMAND_AUDIT_TASK" or "SCHEDULED_AUDIT_TASK".</p>
    public let taskType: IotClientTypes.AuditTaskType?

    public init (
        auditDetails: [Swift.String:IotClientTypes.AuditCheckDetails]? = nil,
        scheduledAuditName: Swift.String? = nil,
        taskStartTime: ClientRuntime.Date? = nil,
        taskStatistics: IotClientTypes.TaskStatistics? = nil,
        taskStatus: IotClientTypes.AuditTaskStatus? = nil,
        taskType: IotClientTypes.AuditTaskType? = nil
    )
    {
        self.auditDetails = auditDetails
        self.scheduledAuditName = scheduledAuditName
        self.taskStartTime = taskStartTime
        self.taskStatistics = taskStatistics
        self.taskStatus = taskStatus
        self.taskType = taskType
    }
}

struct DescribeAuditTaskOutputResponseBody: Swift.Equatable {
    public let taskStatus: IotClientTypes.AuditTaskStatus?
    public let taskType: IotClientTypes.AuditTaskType?
    public let taskStartTime: ClientRuntime.Date?
    public let taskStatistics: IotClientTypes.TaskStatistics?
    public let scheduledAuditName: Swift.String?
    public let auditDetails: [Swift.String:IotClientTypes.AuditCheckDetails]?
}

extension DescribeAuditTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditDetails
        case scheduledAuditName
        case taskStartTime
        case taskStatistics
        case taskStatus
        case taskType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditTaskStatus.self, forKey: .taskStatus)
        taskStatus = taskStatusDecoded
        let taskTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditTaskType.self, forKey: .taskType)
        taskType = taskTypeDecoded
        let taskStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .taskStartTime)
        taskStartTime = taskStartTimeDecoded
        let taskStatisticsDecoded = try containerValues.decodeIfPresent(IotClientTypes.TaskStatistics.self, forKey: .taskStatistics)
        taskStatistics = taskStatisticsDecoded
        let scheduledAuditNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledAuditName)
        scheduledAuditName = scheduledAuditNameDecoded
        let auditDetailsContainer = try containerValues.decodeIfPresent([Swift.String: IotClientTypes.AuditCheckDetails?].self, forKey: .auditDetails)
        var auditDetailsDecoded0: [Swift.String:IotClientTypes.AuditCheckDetails]? = nil
        if let auditDetailsContainer = auditDetailsContainer {
            auditDetailsDecoded0 = [Swift.String:IotClientTypes.AuditCheckDetails]()
            for (key0, auditcheckdetails0) in auditDetailsContainer {
                if let auditcheckdetails0 = auditcheckdetails0 {
                    auditDetailsDecoded0?[key0] = auditcheckdetails0
                }
            }
        }
        auditDetails = auditDetailsDecoded0
    }
}

extension DescribeAuthorizerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAuthorizerInput(authorizerName: \(Swift.String(describing: authorizerName)))"}
}

extension DescribeAuthorizerInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeAuthorizerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAuthorizerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAuthorizerOutputError>
}

public struct DescribeAuthorizerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAuthorizerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAuthorizerOutputError>
}

public struct DescribeAuthorizerInput: Swift.Equatable {
    /// <p>The name of the authorizer to describe.</p>
    public let authorizerName: Swift.String?

    public init (
        authorizerName: Swift.String? = nil
    )
    {
        self.authorizerName = authorizerName
    }
}

struct DescribeAuthorizerInputBody: Swift.Equatable {
}

extension DescribeAuthorizerInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeAuthorizerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAuthorizerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAuthorizerOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAuthorizerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAuthorizerOutputResponse(authorizerDescription: \(Swift.String(describing: authorizerDescription)))"}
}

extension DescribeAuthorizerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAuthorizerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authorizerDescription = output.authorizerDescription
        } else {
            self.authorizerDescription = nil
        }
    }
}

public struct DescribeAuthorizerOutputResponse: Swift.Equatable {
    /// <p>The authorizer description.</p>
    public let authorizerDescription: IotClientTypes.AuthorizerDescription?

    public init (
        authorizerDescription: IotClientTypes.AuthorizerDescription? = nil
    )
    {
        self.authorizerDescription = authorizerDescription
    }
}

struct DescribeAuthorizerOutputResponseBody: Swift.Equatable {
    public let authorizerDescription: IotClientTypes.AuthorizerDescription?
}

extension DescribeAuthorizerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerDescription
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizerDescriptionDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthorizerDescription.self, forKey: .authorizerDescription)
        authorizerDescription = authorizerDescriptionDecoded
    }
}

extension DescribeBillingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeBillingGroupInput(billingGroupName: \(Swift.String(describing: billingGroupName)))"}
}

extension DescribeBillingGroupInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeBillingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeBillingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeBillingGroupOutputError>
}

public struct DescribeBillingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeBillingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeBillingGroupOutputError>
}

public struct DescribeBillingGroupInput: Swift.Equatable {
    /// <p>The name of the billing group.</p>
    public let billingGroupName: Swift.String?

    public init (
        billingGroupName: Swift.String? = nil
    )
    {
        self.billingGroupName = billingGroupName
    }
}

struct DescribeBillingGroupInputBody: Swift.Equatable {
}

extension DescribeBillingGroupInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeBillingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeBillingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeBillingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeBillingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeBillingGroupOutputResponse(billingGroupArn: \(Swift.String(describing: billingGroupArn)), billingGroupId: \(Swift.String(describing: billingGroupId)), billingGroupMetadata: \(Swift.String(describing: billingGroupMetadata)), billingGroupName: \(Swift.String(describing: billingGroupName)), billingGroupProperties: \(Swift.String(describing: billingGroupProperties)), version: \(Swift.String(describing: version)))"}
}

extension DescribeBillingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeBillingGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.billingGroupArn = output.billingGroupArn
            self.billingGroupId = output.billingGroupId
            self.billingGroupMetadata = output.billingGroupMetadata
            self.billingGroupName = output.billingGroupName
            self.billingGroupProperties = output.billingGroupProperties
            self.version = output.version
        } else {
            self.billingGroupArn = nil
            self.billingGroupId = nil
            self.billingGroupMetadata = nil
            self.billingGroupName = nil
            self.billingGroupProperties = nil
            self.version = 0
        }
    }
}

public struct DescribeBillingGroupOutputResponse: Swift.Equatable {
    /// <p>The ARN of the billing group.</p>
    public let billingGroupArn: Swift.String?
    /// <p>The ID of the billing group.</p>
    public let billingGroupId: Swift.String?
    /// <p>Additional information about the billing group.</p>
    public let billingGroupMetadata: IotClientTypes.BillingGroupMetadata?
    /// <p>The name of the billing group.</p>
    public let billingGroupName: Swift.String?
    /// <p>The properties of the billing group.</p>
    public let billingGroupProperties: IotClientTypes.BillingGroupProperties?
    /// <p>The version of the billing group.</p>
    public let version: Swift.Int

    public init (
        billingGroupArn: Swift.String? = nil,
        billingGroupId: Swift.String? = nil,
        billingGroupMetadata: IotClientTypes.BillingGroupMetadata? = nil,
        billingGroupName: Swift.String? = nil,
        billingGroupProperties: IotClientTypes.BillingGroupProperties? = nil,
        version: Swift.Int = 0
    )
    {
        self.billingGroupArn = billingGroupArn
        self.billingGroupId = billingGroupId
        self.billingGroupMetadata = billingGroupMetadata
        self.billingGroupName = billingGroupName
        self.billingGroupProperties = billingGroupProperties
        self.version = version
    }
}

struct DescribeBillingGroupOutputResponseBody: Swift.Equatable {
    public let billingGroupName: Swift.String?
    public let billingGroupId: Swift.String?
    public let billingGroupArn: Swift.String?
    public let version: Swift.Int
    public let billingGroupProperties: IotClientTypes.BillingGroupProperties?
    public let billingGroupMetadata: IotClientTypes.BillingGroupMetadata?
}

extension DescribeBillingGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingGroupArn
        case billingGroupId
        case billingGroupMetadata
        case billingGroupName
        case billingGroupProperties
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let billingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupName)
        billingGroupName = billingGroupNameDecoded
        let billingGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupId)
        billingGroupId = billingGroupIdDecoded
        let billingGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupArn)
        billingGroupArn = billingGroupArnDecoded
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let billingGroupPropertiesDecoded = try containerValues.decodeIfPresent(IotClientTypes.BillingGroupProperties.self, forKey: .billingGroupProperties)
        billingGroupProperties = billingGroupPropertiesDecoded
        let billingGroupMetadataDecoded = try containerValues.decodeIfPresent(IotClientTypes.BillingGroupMetadata.self, forKey: .billingGroupMetadata)
        billingGroupMetadata = billingGroupMetadataDecoded
    }
}

extension DescribeCACertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeCACertificateInput(certificateId: \(Swift.String(describing: certificateId)))"}
}

extension DescribeCACertificateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeCACertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCACertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCACertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCACertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCACertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCACertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCACertificateOutputError>
}

public struct DescribeCACertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCACertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCACertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCACertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCACertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCACertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCACertificateOutputError>
}

/// <p>The input for the DescribeCACertificate operation.</p>
public struct DescribeCACertificateInput: Swift.Equatable {
    /// <p>The CA certificate identifier.</p>
    public let certificateId: Swift.String?

    public init (
        certificateId: Swift.String? = nil
    )
    {
        self.certificateId = certificateId
    }
}

struct DescribeCACertificateInputBody: Swift.Equatable {
}

extension DescribeCACertificateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeCACertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeCACertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCACertificateOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCACertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeCACertificateOutputResponse(certificateDescription: \(Swift.String(describing: certificateDescription)), registrationConfig: \(Swift.String(describing: registrationConfig)))"}
}

extension DescribeCACertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeCACertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificateDescription = output.certificateDescription
            self.registrationConfig = output.registrationConfig
        } else {
            self.certificateDescription = nil
            self.registrationConfig = nil
        }
    }
}

/// <p>The output from the DescribeCACertificate operation.</p>
public struct DescribeCACertificateOutputResponse: Swift.Equatable {
    /// <p>The CA certificate description.</p>
    public let certificateDescription: IotClientTypes.CACertificateDescription?
    /// <p>Information about the registration configuration.</p>
    public let registrationConfig: IotClientTypes.RegistrationConfig?

    public init (
        certificateDescription: IotClientTypes.CACertificateDescription? = nil,
        registrationConfig: IotClientTypes.RegistrationConfig? = nil
    )
    {
        self.certificateDescription = certificateDescription
        self.registrationConfig = registrationConfig
    }
}

struct DescribeCACertificateOutputResponseBody: Swift.Equatable {
    public let certificateDescription: IotClientTypes.CACertificateDescription?
    public let registrationConfig: IotClientTypes.RegistrationConfig?
}

extension DescribeCACertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateDescription
        case registrationConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateDescriptionDecoded = try containerValues.decodeIfPresent(IotClientTypes.CACertificateDescription.self, forKey: .certificateDescription)
        certificateDescription = certificateDescriptionDecoded
        let registrationConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.RegistrationConfig.self, forKey: .registrationConfig)
        registrationConfig = registrationConfigDecoded
    }
}

extension DescribeCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeCertificateInput(certificateId: \(Swift.String(describing: certificateId)))"}
}

extension DescribeCertificateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCertificateOutputError>
}

public struct DescribeCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCertificateOutputError>
}

/// <p>The input for the DescribeCertificate operation.</p>
public struct DescribeCertificateInput: Swift.Equatable {
    /// <p>The ID of the certificate. (The last part of the certificate ARN contains the
    ///          certificate ID.)</p>
    public let certificateId: Swift.String?

    public init (
        certificateId: Swift.String? = nil
    )
    {
        self.certificateId = certificateId
    }
}

struct DescribeCertificateInputBody: Swift.Equatable {
}

extension DescribeCertificateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCertificateOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeCertificateOutputResponse(certificateDescription: \(Swift.String(describing: certificateDescription)))"}
}

extension DescribeCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificateDescription = output.certificateDescription
        } else {
            self.certificateDescription = nil
        }
    }
}

/// <p>The output of the DescribeCertificate operation.</p>
public struct DescribeCertificateOutputResponse: Swift.Equatable {
    /// <p>The description of the certificate.</p>
    public let certificateDescription: IotClientTypes.CertificateDescription?

    public init (
        certificateDescription: IotClientTypes.CertificateDescription? = nil
    )
    {
        self.certificateDescription = certificateDescription
    }
}

struct DescribeCertificateOutputResponseBody: Swift.Equatable {
    public let certificateDescription: IotClientTypes.CertificateDescription?
}

extension DescribeCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateDescription
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateDescriptionDecoded = try containerValues.decodeIfPresent(IotClientTypes.CertificateDescription.self, forKey: .certificateDescription)
        certificateDescription = certificateDescriptionDecoded
    }
}

extension DescribeCustomMetricInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeCustomMetricInput(metricName: \(Swift.String(describing: metricName)))"}
}

extension DescribeCustomMetricInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeCustomMetricInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCustomMetricInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCustomMetricInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCustomMetricOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCustomMetricInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCustomMetricOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCustomMetricOutputError>
}

public struct DescribeCustomMetricInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCustomMetricInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCustomMetricInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCustomMetricOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCustomMetricInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCustomMetricOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCustomMetricOutputError>
}

public struct DescribeCustomMetricInput: Swift.Equatable {
    /// <p>
    ///       The name of the custom metric.
    ///     </p>
    public let metricName: Swift.String?

    public init (
        metricName: Swift.String? = nil
    )
    {
        self.metricName = metricName
    }
}

struct DescribeCustomMetricInputBody: Swift.Equatable {
}

extension DescribeCustomMetricInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeCustomMetricOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeCustomMetricOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCustomMetricOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCustomMetricOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeCustomMetricOutputResponse(creationDate: \(Swift.String(describing: creationDate)), displayName: \(Swift.String(describing: displayName)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), metricArn: \(Swift.String(describing: metricArn)), metricName: \(Swift.String(describing: metricName)), metricType: \(Swift.String(describing: metricType)))"}
}

extension DescribeCustomMetricOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeCustomMetricOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationDate = output.creationDate
            self.displayName = output.displayName
            self.lastModifiedDate = output.lastModifiedDate
            self.metricArn = output.metricArn
            self.metricName = output.metricName
            self.metricType = output.metricType
        } else {
            self.creationDate = nil
            self.displayName = nil
            self.lastModifiedDate = nil
            self.metricArn = nil
            self.metricName = nil
            self.metricType = nil
        }
    }
}

public struct DescribeCustomMetricOutputResponse: Swift.Equatable {
    /// <p>
    ///       The creation date of the custom metric in milliseconds since epoch.
    ///     </p>
    public let creationDate: ClientRuntime.Date?
    /// <p>
    ///       Field represents a friendly name in the console for the custom metric; doesn't have to be unique. Don't use this name as the metric identifier in the device metric report. Can be updated.
    ///     </p>
    public let displayName: Swift.String?
    /// <p>
    ///       The time the custom metric was last modified in milliseconds since epoch.
    ///     </p>
    public let lastModifiedDate: ClientRuntime.Date?
    /// <p>
    ///       The Amazon Resource Number (ARN) of the custom metric.
    ///     </p>
    public let metricArn: Swift.String?
    /// <p>
    ///       The name of the custom metric.
    ///     </p>
    public let metricName: Swift.String?
    /// <p>
    ///       The type of the custom metric. Types include <code>string-list</code>, <code>ip-address-list</code>, <code>number-list</code>, and <code>number</code>.
    ///     </p>
    public let metricType: IotClientTypes.CustomMetricType?

    public init (
        creationDate: ClientRuntime.Date? = nil,
        displayName: Swift.String? = nil,
        lastModifiedDate: ClientRuntime.Date? = nil,
        metricArn: Swift.String? = nil,
        metricName: Swift.String? = nil,
        metricType: IotClientTypes.CustomMetricType? = nil
    )
    {
        self.creationDate = creationDate
        self.displayName = displayName
        self.lastModifiedDate = lastModifiedDate
        self.metricArn = metricArn
        self.metricName = metricName
        self.metricType = metricType
    }
}

struct DescribeCustomMetricOutputResponseBody: Swift.Equatable {
    public let metricName: Swift.String?
    public let metricArn: Swift.String?
    public let metricType: IotClientTypes.CustomMetricType?
    public let displayName: Swift.String?
    public let creationDate: ClientRuntime.Date?
    public let lastModifiedDate: ClientRuntime.Date?
}

extension DescribeCustomMetricOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case displayName
        case lastModifiedDate
        case metricArn
        case metricName
        case metricType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricArn)
        metricArn = metricArnDecoded
        let metricTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.CustomMetricType.self, forKey: .metricType)
        metricType = metricTypeDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
    }
}

extension DescribeDefaultAuthorizerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDefaultAuthorizerInput()"}
}

extension DescribeDefaultAuthorizerInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeDefaultAuthorizerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDefaultAuthorizerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDefaultAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDefaultAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDefaultAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDefaultAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDefaultAuthorizerOutputError>
}

public struct DescribeDefaultAuthorizerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDefaultAuthorizerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDefaultAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDefaultAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDefaultAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDefaultAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDefaultAuthorizerOutputError>
}

public struct DescribeDefaultAuthorizerInput: Swift.Equatable {

    public init() {}
}

struct DescribeDefaultAuthorizerInputBody: Swift.Equatable {
}

extension DescribeDefaultAuthorizerInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeDefaultAuthorizerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDefaultAuthorizerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDefaultAuthorizerOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDefaultAuthorizerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDefaultAuthorizerOutputResponse(authorizerDescription: \(Swift.String(describing: authorizerDescription)))"}
}

extension DescribeDefaultAuthorizerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDefaultAuthorizerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authorizerDescription = output.authorizerDescription
        } else {
            self.authorizerDescription = nil
        }
    }
}

public struct DescribeDefaultAuthorizerOutputResponse: Swift.Equatable {
    /// <p>The default authorizer's description.</p>
    public let authorizerDescription: IotClientTypes.AuthorizerDescription?

    public init (
        authorizerDescription: IotClientTypes.AuthorizerDescription? = nil
    )
    {
        self.authorizerDescription = authorizerDescription
    }
}

struct DescribeDefaultAuthorizerOutputResponseBody: Swift.Equatable {
    public let authorizerDescription: IotClientTypes.AuthorizerDescription?
}

extension DescribeDefaultAuthorizerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerDescription
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizerDescriptionDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthorizerDescription.self, forKey: .authorizerDescription)
        authorizerDescription = authorizerDescriptionDecoded
    }
}

extension DescribeDetectMitigationActionsTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDetectMitigationActionsTaskInput(taskId: \(Swift.String(describing: taskId)))"}
}

extension DescribeDetectMitigationActionsTaskInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeDetectMitigationActionsTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDetectMitigationActionsTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDetectMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDetectMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDetectMitigationActionsTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDetectMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDetectMitigationActionsTaskOutputError>
}

public struct DescribeDetectMitigationActionsTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDetectMitigationActionsTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDetectMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDetectMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDetectMitigationActionsTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDetectMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDetectMitigationActionsTaskOutputError>
}

public struct DescribeDetectMitigationActionsTaskInput: Swift.Equatable {
    /// <p>
    ///       The unique identifier of the task.
    ///     </p>
    public let taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct DescribeDetectMitigationActionsTaskInputBody: Swift.Equatable {
}

extension DescribeDetectMitigationActionsTaskInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeDetectMitigationActionsTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDetectMitigationActionsTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDetectMitigationActionsTaskOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDetectMitigationActionsTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDetectMitigationActionsTaskOutputResponse(taskSummary: \(Swift.String(describing: taskSummary)))"}
}

extension DescribeDetectMitigationActionsTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDetectMitigationActionsTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskSummary = output.taskSummary
        } else {
            self.taskSummary = nil
        }
    }
}

public struct DescribeDetectMitigationActionsTaskOutputResponse: Swift.Equatable {
    /// <p>
    ///       The description of a task.
    ///     </p>
    public let taskSummary: IotClientTypes.DetectMitigationActionsTaskSummary?

    public init (
        taskSummary: IotClientTypes.DetectMitigationActionsTaskSummary? = nil
    )
    {
        self.taskSummary = taskSummary
    }
}

struct DescribeDetectMitigationActionsTaskOutputResponseBody: Swift.Equatable {
    public let taskSummary: IotClientTypes.DetectMitigationActionsTaskSummary?
}

extension DescribeDetectMitigationActionsTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskSummary
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskSummaryDecoded = try containerValues.decodeIfPresent(IotClientTypes.DetectMitigationActionsTaskSummary.self, forKey: .taskSummary)
        taskSummary = taskSummaryDecoded
    }
}

extension DescribeDimensionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDimensionInput(name: \(Swift.String(describing: name)))"}
}

extension DescribeDimensionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeDimensionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDimensionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDimensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDimensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDimensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDimensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDimensionOutputError>
}

public struct DescribeDimensionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDimensionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDimensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDimensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDimensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDimensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDimensionOutputError>
}

public struct DescribeDimensionInput: Swift.Equatable {
    /// <p>The unique identifier for the dimension.</p>
    public let name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DescribeDimensionInputBody: Swift.Equatable {
}

extension DescribeDimensionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeDimensionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDimensionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDimensionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDimensionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDimensionOutputResponse(arn: \(Swift.String(describing: arn)), creationDate: \(Swift.String(describing: creationDate)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), name: \(Swift.String(describing: name)), stringValues: \(Swift.String(describing: stringValues)), type: \(Swift.String(describing: type)))"}
}

extension DescribeDimensionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDimensionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.creationDate = output.creationDate
            self.lastModifiedDate = output.lastModifiedDate
            self.name = output.name
            self.stringValues = output.stringValues
            self.type = output.type
        } else {
            self.arn = nil
            self.creationDate = nil
            self.lastModifiedDate = nil
            self.name = nil
            self.stringValues = nil
            self.type = nil
        }
    }
}

public struct DescribeDimensionOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource Name
    ///       (ARN)
    ///       for
    ///       the dimension.</p>
    public let arn: Swift.String?
    /// <p>The date the dimension was created.</p>
    public let creationDate: ClientRuntime.Date?
    /// <p>The date the dimension was last modified.</p>
    public let lastModifiedDate: ClientRuntime.Date?
    /// <p>The unique identifier for the dimension.</p>
    public let name: Swift.String?
    /// <p>The value or list of values used to scope the dimension. For example, for topic filters, this is the pattern used to match the MQTT topic name.</p>
    public let stringValues: [Swift.String]?
    /// <p>The type of the dimension.</p>
    public let type: IotClientTypes.DimensionType?

    public init (
        arn: Swift.String? = nil,
        creationDate: ClientRuntime.Date? = nil,
        lastModifiedDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        stringValues: [Swift.String]? = nil,
        type: IotClientTypes.DimensionType? = nil
    )
    {
        self.arn = arn
        self.creationDate = creationDate
        self.lastModifiedDate = lastModifiedDate
        self.name = name
        self.stringValues = stringValues
        self.type = type
    }
}

struct DescribeDimensionOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let arn: Swift.String?
    public let type: IotClientTypes.DimensionType?
    public let stringValues: [Swift.String]?
    public let creationDate: ClientRuntime.Date?
    public let lastModifiedDate: ClientRuntime.Date?
}

extension DescribeDimensionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case creationDate
        case lastModifiedDate
        case name
        case stringValues
        case type
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(IotClientTypes.DimensionType.self, forKey: .type)
        type = typeDecoded
        let stringValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stringValues)
        var stringValuesDecoded0:[Swift.String]? = nil
        if let stringValuesContainer = stringValuesContainer {
            stringValuesDecoded0 = [Swift.String]()
            for string0 in stringValuesContainer {
                if let string0 = string0 {
                    stringValuesDecoded0?.append(string0)
                }
            }
        }
        stringValues = stringValuesDecoded0
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
    }
}

extension DescribeDomainConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDomainConfigurationInput(domainConfigurationName: \(Swift.String(describing: domainConfigurationName)))"}
}

extension DescribeDomainConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeDomainConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDomainConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDomainConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDomainConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDomainConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDomainConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDomainConfigurationOutputError>
}

public struct DescribeDomainConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDomainConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDomainConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDomainConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDomainConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDomainConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDomainConfigurationOutputError>
}

public struct DescribeDomainConfigurationInput: Swift.Equatable {
    /// <p>The name of the domain configuration.</p>
    public let domainConfigurationName: Swift.String?

    public init (
        domainConfigurationName: Swift.String? = nil
    )
    {
        self.domainConfigurationName = domainConfigurationName
    }
}

struct DescribeDomainConfigurationInputBody: Swift.Equatable {
}

extension DescribeDomainConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeDomainConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDomainConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDomainConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDomainConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDomainConfigurationOutputResponse(authorizerConfig: \(Swift.String(describing: authorizerConfig)), domainConfigurationArn: \(Swift.String(describing: domainConfigurationArn)), domainConfigurationName: \(Swift.String(describing: domainConfigurationName)), domainConfigurationStatus: \(Swift.String(describing: domainConfigurationStatus)), domainName: \(Swift.String(describing: domainName)), domainType: \(Swift.String(describing: domainType)), lastStatusChangeDate: \(Swift.String(describing: lastStatusChangeDate)), serverCertificates: \(Swift.String(describing: serverCertificates)), serviceType: \(Swift.String(describing: serviceType)))"}
}

extension DescribeDomainConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDomainConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authorizerConfig = output.authorizerConfig
            self.domainConfigurationArn = output.domainConfigurationArn
            self.domainConfigurationName = output.domainConfigurationName
            self.domainConfigurationStatus = output.domainConfigurationStatus
            self.domainName = output.domainName
            self.domainType = output.domainType
            self.lastStatusChangeDate = output.lastStatusChangeDate
            self.serverCertificates = output.serverCertificates
            self.serviceType = output.serviceType
        } else {
            self.authorizerConfig = nil
            self.domainConfigurationArn = nil
            self.domainConfigurationName = nil
            self.domainConfigurationStatus = nil
            self.domainName = nil
            self.domainType = nil
            self.lastStatusChangeDate = nil
            self.serverCertificates = nil
            self.serviceType = nil
        }
    }
}

public struct DescribeDomainConfigurationOutputResponse: Swift.Equatable {
    /// <p>An object that specifies the authorization service for a domain.</p>
    public let authorizerConfig: IotClientTypes.AuthorizerConfig?
    /// <p>The ARN of the domain configuration.</p>
    public let domainConfigurationArn: Swift.String?
    /// <p>The name of the domain configuration.</p>
    public let domainConfigurationName: Swift.String?
    /// <p>A Boolean value that specifies the current state of the domain configuration.</p>
    public let domainConfigurationStatus: IotClientTypes.DomainConfigurationStatus?
    /// <p>The name of the domain.</p>
    public let domainName: Swift.String?
    /// <p>The type of the domain.</p>
    public let domainType: IotClientTypes.DomainType?
    /// <p>The date and time the domain configuration's status was last changed.</p>
    public let lastStatusChangeDate: ClientRuntime.Date?
    /// <p>A list containing summary information about the server certificate included in the domain configuration.</p>
    public let serverCertificates: [IotClientTypes.ServerCertificateSummary]?
    /// <p>The type of service delivered by the endpoint.</p>
    public let serviceType: IotClientTypes.ServiceType?

    public init (
        authorizerConfig: IotClientTypes.AuthorizerConfig? = nil,
        domainConfigurationArn: Swift.String? = nil,
        domainConfigurationName: Swift.String? = nil,
        domainConfigurationStatus: IotClientTypes.DomainConfigurationStatus? = nil,
        domainName: Swift.String? = nil,
        domainType: IotClientTypes.DomainType? = nil,
        lastStatusChangeDate: ClientRuntime.Date? = nil,
        serverCertificates: [IotClientTypes.ServerCertificateSummary]? = nil,
        serviceType: IotClientTypes.ServiceType? = nil
    )
    {
        self.authorizerConfig = authorizerConfig
        self.domainConfigurationArn = domainConfigurationArn
        self.domainConfigurationName = domainConfigurationName
        self.domainConfigurationStatus = domainConfigurationStatus
        self.domainName = domainName
        self.domainType = domainType
        self.lastStatusChangeDate = lastStatusChangeDate
        self.serverCertificates = serverCertificates
        self.serviceType = serviceType
    }
}

struct DescribeDomainConfigurationOutputResponseBody: Swift.Equatable {
    public let domainConfigurationName: Swift.String?
    public let domainConfigurationArn: Swift.String?
    public let domainName: Swift.String?
    public let serverCertificates: [IotClientTypes.ServerCertificateSummary]?
    public let authorizerConfig: IotClientTypes.AuthorizerConfig?
    public let domainConfigurationStatus: IotClientTypes.DomainConfigurationStatus?
    public let serviceType: IotClientTypes.ServiceType?
    public let domainType: IotClientTypes.DomainType?
    public let lastStatusChangeDate: ClientRuntime.Date?
}

extension DescribeDomainConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerConfig
        case domainConfigurationArn
        case domainConfigurationName
        case domainConfigurationStatus
        case domainName
        case domainType
        case lastStatusChangeDate
        case serverCertificates
        case serviceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainConfigurationName)
        domainConfigurationName = domainConfigurationNameDecoded
        let domainConfigurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainConfigurationArn)
        domainConfigurationArn = domainConfigurationArnDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let serverCertificatesContainer = try containerValues.decodeIfPresent([IotClientTypes.ServerCertificateSummary?].self, forKey: .serverCertificates)
        var serverCertificatesDecoded0:[IotClientTypes.ServerCertificateSummary]? = nil
        if let serverCertificatesContainer = serverCertificatesContainer {
            serverCertificatesDecoded0 = [IotClientTypes.ServerCertificateSummary]()
            for structure0 in serverCertificatesContainer {
                if let structure0 = structure0 {
                    serverCertificatesDecoded0?.append(structure0)
                }
            }
        }
        serverCertificates = serverCertificatesDecoded0
        let authorizerConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthorizerConfig.self, forKey: .authorizerConfig)
        authorizerConfig = authorizerConfigDecoded
        let domainConfigurationStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.DomainConfigurationStatus.self, forKey: .domainConfigurationStatus)
        domainConfigurationStatus = domainConfigurationStatusDecoded
        let serviceTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ServiceType.self, forKey: .serviceType)
        serviceType = serviceTypeDecoded
        let domainTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.DomainType.self, forKey: .domainType)
        domainType = domainTypeDecoded
        let lastStatusChangeDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastStatusChangeDate)
        lastStatusChangeDate = lastStatusChangeDateDecoded
    }
}

extension DescribeEndpointInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeEndpointInput(endpointType: \(Swift.String(describing: endpointType)))"}
}

extension DescribeEndpointInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeEndpointInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeEndpointInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeEndpointInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeEndpointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeEndpointInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeEndpointOutputError>
}

public struct DescribeEndpointInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeEndpointInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeEndpointInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeEndpointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let endpointType = input.operationInput.endpointType {
            let endpointTypeQueryItem = ClientRuntime.URLQueryItem(name: "endpointType".urlPercentEncoding(), value: Swift.String(endpointType).urlPercentEncoding())
            input.builder.withQueryItem(endpointTypeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeEndpointInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeEndpointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeEndpointOutputError>
}

/// <p>The input for the DescribeEndpoint operation.</p>
public struct DescribeEndpointInput: Swift.Equatable {
    /// <p>The endpoint type. Valid endpoint types include:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>iot:Data</code> - Returns a VeriSign signed data endpoint.</p>
    ///             </li>
    ///          </ul>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>iot:Data-ATS</code> - Returns an ATS signed data endpoint.</p>
    ///             </li>
    ///          </ul>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>iot:CredentialProvider</code> - Returns an AWS IoT credentials provider API
    ///                endpoint.</p>
    ///             </li>
    ///          </ul>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>iot:Jobs</code> - Returns an AWS IoT device management Jobs API
    ///                endpoint.</p>
    ///             </li>
    ///          </ul>
    ///          <p>We strongly recommend that customers use the newer <code>iot:Data-ATS</code> endpoint type to avoid
    ///          issues related to the widespread distrust of Symantec certificate authorities.</p>
    public let endpointType: Swift.String?

    public init (
        endpointType: Swift.String? = nil
    )
    {
        self.endpointType = endpointType
    }
}

struct DescribeEndpointInputBody: Swift.Equatable {
}

extension DescribeEndpointInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEndpointOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEndpointOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeEndpointOutputResponse(endpointAddress: \(Swift.String(describing: endpointAddress)))"}
}

extension DescribeEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.endpointAddress = output.endpointAddress
        } else {
            self.endpointAddress = nil
        }
    }
}

/// <p>The output from the DescribeEndpoint operation.</p>
public struct DescribeEndpointOutputResponse: Swift.Equatable {
    /// <p>The endpoint. The format of the endpoint is as follows:
    ///             <i>identifier</i>.iot.<i>region</i>.amazonaws.com.</p>
    public let endpointAddress: Swift.String?

    public init (
        endpointAddress: Swift.String? = nil
    )
    {
        self.endpointAddress = endpointAddress
    }
}

struct DescribeEndpointOutputResponseBody: Swift.Equatable {
    public let endpointAddress: Swift.String?
}

extension DescribeEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointAddress
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointAddress)
        endpointAddress = endpointAddressDecoded
    }
}

extension DescribeEventConfigurationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeEventConfigurationsInput()"}
}

extension DescribeEventConfigurationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeEventConfigurationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeEventConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeEventConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeEventConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeEventConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeEventConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeEventConfigurationsOutputError>
}

public struct DescribeEventConfigurationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeEventConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeEventConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeEventConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeEventConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeEventConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeEventConfigurationsOutputError>
}

public struct DescribeEventConfigurationsInput: Swift.Equatable {

    public init() {}
}

struct DescribeEventConfigurationsInputBody: Swift.Equatable {
}

extension DescribeEventConfigurationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeEventConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEventConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEventConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEventConfigurationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeEventConfigurationsOutputResponse(creationDate: \(Swift.String(describing: creationDate)), eventConfigurations: \(Swift.String(describing: eventConfigurations)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)))"}
}

extension DescribeEventConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeEventConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationDate = output.creationDate
            self.eventConfigurations = output.eventConfigurations
            self.lastModifiedDate = output.lastModifiedDate
        } else {
            self.creationDate = nil
            self.eventConfigurations = nil
            self.lastModifiedDate = nil
        }
    }
}

public struct DescribeEventConfigurationsOutputResponse: Swift.Equatable {
    /// <p>The creation date of the event configuration.</p>
    public let creationDate: ClientRuntime.Date?
    /// <p>The event configurations.</p>
    public let eventConfigurations: [Swift.String:IotClientTypes.Configuration]?
    /// <p>The date the event configurations were last modified.</p>
    public let lastModifiedDate: ClientRuntime.Date?

    public init (
        creationDate: ClientRuntime.Date? = nil,
        eventConfigurations: [Swift.String:IotClientTypes.Configuration]? = nil,
        lastModifiedDate: ClientRuntime.Date? = nil
    )
    {
        self.creationDate = creationDate
        self.eventConfigurations = eventConfigurations
        self.lastModifiedDate = lastModifiedDate
    }
}

struct DescribeEventConfigurationsOutputResponseBody: Swift.Equatable {
    public let eventConfigurations: [Swift.String:IotClientTypes.Configuration]?
    public let creationDate: ClientRuntime.Date?
    public let lastModifiedDate: ClientRuntime.Date?
}

extension DescribeEventConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case eventConfigurations
        case lastModifiedDate
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventConfigurationsContainer = try containerValues.decodeIfPresent([Swift.String: IotClientTypes.Configuration?].self, forKey: .eventConfigurations)
        var eventConfigurationsDecoded0: [Swift.String:IotClientTypes.Configuration]? = nil
        if let eventConfigurationsContainer = eventConfigurationsContainer {
            eventConfigurationsDecoded0 = [Swift.String:IotClientTypes.Configuration]()
            for (key0, configuration0) in eventConfigurationsContainer {
                if let configuration0 = configuration0 {
                    eventConfigurationsDecoded0?[key0] = configuration0
                }
            }
        }
        eventConfigurations = eventConfigurationsDecoded0
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
    }
}

extension DescribeIndexInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeIndexInput(indexName: \(Swift.String(describing: indexName)))"}
}

extension DescribeIndexInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeIndexInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeIndexInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeIndexInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeIndexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeIndexInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeIndexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeIndexOutputError>
}

public struct DescribeIndexInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeIndexInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeIndexInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeIndexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeIndexInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeIndexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeIndexOutputError>
}

public struct DescribeIndexInput: Swift.Equatable {
    /// <p>The index name.</p>
    public let indexName: Swift.String?

    public init (
        indexName: Swift.String? = nil
    )
    {
        self.indexName = indexName
    }
}

struct DescribeIndexInputBody: Swift.Equatable {
}

extension DescribeIndexInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeIndexOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeIndexOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeIndexOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeIndexOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeIndexOutputResponse(indexName: \(Swift.String(describing: indexName)), indexStatus: \(Swift.String(describing: indexStatus)), schema: \(Swift.String(describing: schema)))"}
}

extension DescribeIndexOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeIndexOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.indexName = output.indexName
            self.indexStatus = output.indexStatus
            self.schema = output.schema
        } else {
            self.indexName = nil
            self.indexStatus = nil
            self.schema = nil
        }
    }
}

public struct DescribeIndexOutputResponse: Swift.Equatable {
    /// <p>The index name.</p>
    public let indexName: Swift.String?
    /// <p>The index status.</p>
    public let indexStatus: IotClientTypes.IndexStatus?
    /// <p>Contains a value that specifies the type of indexing performed. Valid values
    ///       are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>REGISTRY – Your thing index contains only registry data.</p>
    ///             </li>
    ///             <li>
    ///                <p>REGISTRY_AND_SHADOW - Your thing index contains registry data and shadow data.</p>
    ///             </li>
    ///             <li>
    ///                <p>REGISTRY_AND_CONNECTIVITY_STATUS - Your thing index contains registry data and
    ///           thing connectivity status data.</p>
    ///             </li>
    ///             <li>
    ///                <p>REGISTRY_AND_SHADOW_AND_CONNECTIVITY_STATUS - Your thing index contains registry
    ///           data, shadow data, and thing connectivity status data.</p>
    ///             </li>
    ///          </ul>
    public let schema: Swift.String?

    public init (
        indexName: Swift.String? = nil,
        indexStatus: IotClientTypes.IndexStatus? = nil,
        schema: Swift.String? = nil
    )
    {
        self.indexName = indexName
        self.indexStatus = indexStatus
        self.schema = schema
    }
}

struct DescribeIndexOutputResponseBody: Swift.Equatable {
    public let indexName: Swift.String?
    public let indexStatus: IotClientTypes.IndexStatus?
    public let schema: Swift.String?
}

extension DescribeIndexOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName
        case indexStatus
        case schema
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let indexStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.IndexStatus.self, forKey: .indexStatus)
        indexStatus = indexStatusDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
    }
}

extension DescribeJobExecutionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeJobExecutionInput(executionNumber: \(Swift.String(describing: executionNumber)), jobId: \(Swift.String(describing: jobId)), thingName: \(Swift.String(describing: thingName)))"}
}

extension DescribeJobExecutionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeJobExecutionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobExecutionOutputError>
}

public struct DescribeJobExecutionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let executionNumber = input.operationInput.executionNumber {
            let executionNumberQueryItem = ClientRuntime.URLQueryItem(name: "executionNumber".urlPercentEncoding(), value: Swift.String(executionNumber).urlPercentEncoding())
            input.builder.withQueryItem(executionNumberQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobExecutionOutputError>
}

public struct DescribeJobExecutionInput: Swift.Equatable {
    /// <p>A string (consisting of the digits "0" through "9" which is used to specify a particular job execution
    ///             on a particular device.</p>
    public let executionNumber: Swift.Int?
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    public let jobId: Swift.String?
    /// <p>The name of the thing on which the job execution is running.</p>
    public let thingName: Swift.String?

    public init (
        executionNumber: Swift.Int? = nil,
        jobId: Swift.String? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.executionNumber = executionNumber
        self.jobId = jobId
        self.thingName = thingName
    }
}

struct DescribeJobExecutionInputBody: Swift.Equatable {
}

extension DescribeJobExecutionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeJobExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeJobExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeJobExecutionOutputError: Swift.Error, Swift.Equatable {
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeJobExecutionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeJobExecutionOutputResponse(execution: \(Swift.String(describing: execution)))"}
}

extension DescribeJobExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeJobExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.execution = output.execution
        } else {
            self.execution = nil
        }
    }
}

public struct DescribeJobExecutionOutputResponse: Swift.Equatable {
    /// <p>Information about the job execution.</p>
    public let execution: IotClientTypes.JobExecution?

    public init (
        execution: IotClientTypes.JobExecution? = nil
    )
    {
        self.execution = execution
    }
}

struct DescribeJobExecutionOutputResponseBody: Swift.Equatable {
    public let execution: IotClientTypes.JobExecution?
}

extension DescribeJobExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case execution
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobExecution.self, forKey: .execution)
        execution = executionDecoded
    }
}

extension DescribeJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeJobInput(jobId: \(Swift.String(describing: jobId)))"}
}

extension DescribeJobInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobOutputError>
}

public struct DescribeJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobOutputError>
}

public struct DescribeJobInput: Swift.Equatable {
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    public let jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct DescribeJobInputBody: Swift.Equatable {
}

extension DescribeJobInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeJobOutputError: Swift.Error, Swift.Equatable {
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeJobOutputResponse(documentSource: \(Swift.String(describing: documentSource)), job: \(Swift.String(describing: job)))"}
}

extension DescribeJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.documentSource = output.documentSource
            self.job = output.job
        } else {
            self.documentSource = nil
            self.job = nil
        }
    }
}

public struct DescribeJobOutputResponse: Swift.Equatable {
    /// <p>An S3 link to the job document.</p>
    public let documentSource: Swift.String?
    /// <p>Information about the job.</p>
    public let job: IotClientTypes.Job?

    public init (
        documentSource: Swift.String? = nil,
        job: IotClientTypes.Job? = nil
    )
    {
        self.documentSource = documentSource
        self.job = job
    }
}

struct DescribeJobOutputResponseBody: Swift.Equatable {
    public let documentSource: Swift.String?
    public let job: IotClientTypes.Job?
}

extension DescribeJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentSource
        case job
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentSource)
        documentSource = documentSourceDecoded
        let jobDecoded = try containerValues.decodeIfPresent(IotClientTypes.Job.self, forKey: .job)
        job = jobDecoded
    }
}

extension DescribeJobTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeJobTemplateInput(jobTemplateId: \(Swift.String(describing: jobTemplateId)))"}
}

extension DescribeJobTemplateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeJobTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobTemplateOutputError>
}

public struct DescribeJobTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeJobTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeJobTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeJobTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeJobTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeJobTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeJobTemplateOutputError>
}

public struct DescribeJobTemplateInput: Swift.Equatable {
    /// <p>The unique identifier of the job template.</p>
    public let jobTemplateId: Swift.String?

    public init (
        jobTemplateId: Swift.String? = nil
    )
    {
        self.jobTemplateId = jobTemplateId
    }
}

struct DescribeJobTemplateInputBody: Swift.Equatable {
}

extension DescribeJobTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeJobTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeJobTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeJobTemplateOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeJobTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeJobTemplateOutputResponse(abortConfig: \(Swift.String(describing: abortConfig)), createdAt: \(Swift.String(describing: createdAt)), description: \(Swift.String(describing: description)), document: \(Swift.String(describing: document)), documentSource: \(Swift.String(describing: documentSource)), jobExecutionsRolloutConfig: \(Swift.String(describing: jobExecutionsRolloutConfig)), jobTemplateArn: \(Swift.String(describing: jobTemplateArn)), jobTemplateId: \(Swift.String(describing: jobTemplateId)), presignedUrlConfig: \(Swift.String(describing: presignedUrlConfig)), timeoutConfig: \(Swift.String(describing: timeoutConfig)))"}
}

extension DescribeJobTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeJobTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.abortConfig = output.abortConfig
            self.createdAt = output.createdAt
            self.description = output.description
            self.document = output.document
            self.documentSource = output.documentSource
            self.jobExecutionsRolloutConfig = output.jobExecutionsRolloutConfig
            self.jobTemplateArn = output.jobTemplateArn
            self.jobTemplateId = output.jobTemplateId
            self.presignedUrlConfig = output.presignedUrlConfig
            self.timeoutConfig = output.timeoutConfig
        } else {
            self.abortConfig = nil
            self.createdAt = nil
            self.description = nil
            self.document = nil
            self.documentSource = nil
            self.jobExecutionsRolloutConfig = nil
            self.jobTemplateArn = nil
            self.jobTemplateId = nil
            self.presignedUrlConfig = nil
            self.timeoutConfig = nil
        }
    }
}

public struct DescribeJobTemplateOutputResponse: Swift.Equatable {
    /// <p>The criteria that determine when and how a job abort takes place.</p>
    public let abortConfig: IotClientTypes.AbortConfig?
    /// <p>The time, in seconds since the epoch, when the job template was created.</p>
    public let createdAt: ClientRuntime.Date?
    /// <p>A description of the job template.</p>
    public let description: Swift.String?
    /// <p>The job document.</p>
    public let document: Swift.String?
    /// <p>An S3 link to the job document.</p>
    public let documentSource: Swift.String?
    /// <p>Allows you to create a staged rollout of a job.</p>
    public let jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig?
    /// <p>The ARN of the job template.</p>
    public let jobTemplateArn: Swift.String?
    /// <p>The unique identifier of the job template.</p>
    public let jobTemplateId: Swift.String?
    /// <p>Configuration for pre-signed S3 URLs.</p>
    public let presignedUrlConfig: IotClientTypes.PresignedUrlConfig?
    /// <p>Specifies the amount of time each device has to finish its execution of the job.  A timer
    ///            is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job
    ///            execution status is not set to another terminal state before the timer expires, it will
    ///            be automatically set to <code>TIMED_OUT</code>.</p>
    public let timeoutConfig: IotClientTypes.TimeoutConfig?

    public init (
        abortConfig: IotClientTypes.AbortConfig? = nil,
        createdAt: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        document: Swift.String? = nil,
        documentSource: Swift.String? = nil,
        jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig? = nil,
        jobTemplateArn: Swift.String? = nil,
        jobTemplateId: Swift.String? = nil,
        presignedUrlConfig: IotClientTypes.PresignedUrlConfig? = nil,
        timeoutConfig: IotClientTypes.TimeoutConfig? = nil
    )
    {
        self.abortConfig = abortConfig
        self.createdAt = createdAt
        self.description = description
        self.document = document
        self.documentSource = documentSource
        self.jobExecutionsRolloutConfig = jobExecutionsRolloutConfig
        self.jobTemplateArn = jobTemplateArn
        self.jobTemplateId = jobTemplateId
        self.presignedUrlConfig = presignedUrlConfig
        self.timeoutConfig = timeoutConfig
    }
}

struct DescribeJobTemplateOutputResponseBody: Swift.Equatable {
    public let jobTemplateArn: Swift.String?
    public let jobTemplateId: Swift.String?
    public let description: Swift.String?
    public let documentSource: Swift.String?
    public let document: Swift.String?
    public let createdAt: ClientRuntime.Date?
    public let presignedUrlConfig: IotClientTypes.PresignedUrlConfig?
    public let jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig?
    public let abortConfig: IotClientTypes.AbortConfig?
    public let timeoutConfig: IotClientTypes.TimeoutConfig?
}

extension DescribeJobTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortConfig
        case createdAt
        case description
        case document
        case documentSource
        case jobExecutionsRolloutConfig
        case jobTemplateArn
        case jobTemplateId
        case presignedUrlConfig
        case timeoutConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobTemplateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTemplateArn)
        jobTemplateArn = jobTemplateArnDecoded
        let jobTemplateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTemplateId)
        jobTemplateId = jobTemplateIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let documentSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentSource)
        documentSource = documentSourceDecoded
        let documentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .document)
        document = documentDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let presignedUrlConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.PresignedUrlConfig.self, forKey: .presignedUrlConfig)
        presignedUrlConfig = presignedUrlConfigDecoded
        let jobExecutionsRolloutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobExecutionsRolloutConfig.self, forKey: .jobExecutionsRolloutConfig)
        jobExecutionsRolloutConfig = jobExecutionsRolloutConfigDecoded
        let abortConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AbortConfig.self, forKey: .abortConfig)
        abortConfig = abortConfigDecoded
        let timeoutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.TimeoutConfig.self, forKey: .timeoutConfig)
        timeoutConfig = timeoutConfigDecoded
    }
}

extension DescribeMitigationActionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeMitigationActionInput(actionName: \(Swift.String(describing: actionName)))"}
}

extension DescribeMitigationActionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeMitigationActionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeMitigationActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeMitigationActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeMitigationActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeMitigationActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeMitigationActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeMitigationActionOutputError>
}

public struct DescribeMitigationActionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeMitigationActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeMitigationActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeMitigationActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeMitigationActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeMitigationActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeMitigationActionOutputError>
}

public struct DescribeMitigationActionInput: Swift.Equatable {
    /// <p>The friendly name that uniquely identifies the mitigation action.</p>
    public let actionName: Swift.String?

    public init (
        actionName: Swift.String? = nil
    )
    {
        self.actionName = actionName
    }
}

struct DescribeMitigationActionInputBody: Swift.Equatable {
}

extension DescribeMitigationActionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeMitigationActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMitigationActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeMitigationActionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMitigationActionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeMitigationActionOutputResponse(actionArn: \(Swift.String(describing: actionArn)), actionId: \(Swift.String(describing: actionId)), actionName: \(Swift.String(describing: actionName)), actionParams: \(Swift.String(describing: actionParams)), actionType: \(Swift.String(describing: actionType)), creationDate: \(Swift.String(describing: creationDate)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension DescribeMitigationActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeMitigationActionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionArn = output.actionArn
            self.actionId = output.actionId
            self.actionName = output.actionName
            self.actionParams = output.actionParams
            self.actionType = output.actionType
            self.creationDate = output.creationDate
            self.lastModifiedDate = output.lastModifiedDate
            self.roleArn = output.roleArn
        } else {
            self.actionArn = nil
            self.actionId = nil
            self.actionName = nil
            self.actionParams = nil
            self.actionType = nil
            self.creationDate = nil
            self.lastModifiedDate = nil
            self.roleArn = nil
        }
    }
}

public struct DescribeMitigationActionOutputResponse: Swift.Equatable {
    /// <p>The ARN that identifies this migration action.</p>
    public let actionArn: Swift.String?
    /// <p>A unique identifier for this action.</p>
    public let actionId: Swift.String?
    /// <p>The friendly name that uniquely identifies the mitigation action.</p>
    public let actionName: Swift.String?
    /// <p>Parameters that control how the mitigation action is applied, specific to the type of mitigation action.</p>
    public let actionParams: IotClientTypes.MitigationActionParams?
    /// <p>The type of mitigation action.</p>
    public let actionType: IotClientTypes.MitigationActionType?
    /// <p>The date and time when the mitigation action was added to your AWS account.</p>
    public let creationDate: ClientRuntime.Date?
    /// <p>The date and time when the mitigation action was last changed.</p>
    public let lastModifiedDate: ClientRuntime.Date?
    /// <p>The ARN of the IAM role used to apply this action.</p>
    public let roleArn: Swift.String?

    public init (
        actionArn: Swift.String? = nil,
        actionId: Swift.String? = nil,
        actionName: Swift.String? = nil,
        actionParams: IotClientTypes.MitigationActionParams? = nil,
        actionType: IotClientTypes.MitigationActionType? = nil,
        creationDate: ClientRuntime.Date? = nil,
        lastModifiedDate: ClientRuntime.Date? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.actionArn = actionArn
        self.actionId = actionId
        self.actionName = actionName
        self.actionParams = actionParams
        self.actionType = actionType
        self.creationDate = creationDate
        self.lastModifiedDate = lastModifiedDate
        self.roleArn = roleArn
    }
}

struct DescribeMitigationActionOutputResponseBody: Swift.Equatable {
    public let actionName: Swift.String?
    public let actionType: IotClientTypes.MitigationActionType?
    public let actionArn: Swift.String?
    public let actionId: Swift.String?
    public let roleArn: Swift.String?
    public let actionParams: IotClientTypes.MitigationActionParams?
    public let creationDate: ClientRuntime.Date?
    public let lastModifiedDate: ClientRuntime.Date?
}

extension DescribeMitigationActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionArn
        case actionId
        case actionName
        case actionParams
        case actionType
        case creationDate
        case lastModifiedDate
        case roleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.MitigationActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let actionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionArn)
        actionArn = actionArnDecoded
        let actionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionId)
        actionId = actionIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let actionParamsDecoded = try containerValues.decodeIfPresent(IotClientTypes.MitigationActionParams.self, forKey: .actionParams)
        actionParams = actionParamsDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
    }
}

extension DescribeProvisioningTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeProvisioningTemplateInput(templateName: \(Swift.String(describing: templateName)))"}
}

extension DescribeProvisioningTemplateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeProvisioningTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeProvisioningTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeProvisioningTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeProvisioningTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeProvisioningTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeProvisioningTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeProvisioningTemplateOutputError>
}

public struct DescribeProvisioningTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeProvisioningTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeProvisioningTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeProvisioningTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeProvisioningTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeProvisioningTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeProvisioningTemplateOutputError>
}

public struct DescribeProvisioningTemplateInput: Swift.Equatable {
    /// <p>The name of the fleet provisioning template.</p>
    public let templateName: Swift.String?

    public init (
        templateName: Swift.String? = nil
    )
    {
        self.templateName = templateName
    }
}

struct DescribeProvisioningTemplateInputBody: Swift.Equatable {
}

extension DescribeProvisioningTemplateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeProvisioningTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeProvisioningTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeProvisioningTemplateOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeProvisioningTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeProvisioningTemplateOutputResponse(creationDate: \(Swift.String(describing: creationDate)), defaultVersionId: \(Swift.String(describing: defaultVersionId)), description: \(Swift.String(describing: description)), enabled: \(Swift.String(describing: enabled)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), preProvisioningHook: \(Swift.String(describing: preProvisioningHook)), provisioningRoleArn: \(Swift.String(describing: provisioningRoleArn)), templateArn: \(Swift.String(describing: templateArn)), templateBody: \(Swift.String(describing: templateBody)), templateName: \(Swift.String(describing: templateName)))"}
}

extension DescribeProvisioningTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeProvisioningTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationDate = output.creationDate
            self.defaultVersionId = output.defaultVersionId
            self.description = output.description
            self.enabled = output.enabled
            self.lastModifiedDate = output.lastModifiedDate
            self.preProvisioningHook = output.preProvisioningHook
            self.provisioningRoleArn = output.provisioningRoleArn
            self.templateArn = output.templateArn
            self.templateBody = output.templateBody
            self.templateName = output.templateName
        } else {
            self.creationDate = nil
            self.defaultVersionId = nil
            self.description = nil
            self.enabled = false
            self.lastModifiedDate = nil
            self.preProvisioningHook = nil
            self.provisioningRoleArn = nil
            self.templateArn = nil
            self.templateBody = nil
            self.templateName = nil
        }
    }
}

public struct DescribeProvisioningTemplateOutputResponse: Swift.Equatable {
    /// <p>The date when the fleet provisioning template was created.</p>
    public let creationDate: ClientRuntime.Date?
    /// <p>The default fleet template version ID.</p>
    public let defaultVersionId: Swift.Int?
    /// <p>The description of the fleet provisioning template.</p>
    public let description: Swift.String?
    /// <p>True if the fleet provisioning template is enabled, otherwise false.</p>
    public let enabled: Swift.Bool
    /// <p>The date when the fleet provisioning template was last modified.</p>
    public let lastModifiedDate: ClientRuntime.Date?
    /// <p>Gets information about a pre-provisioned hook.</p>
    public let preProvisioningHook: IotClientTypes.ProvisioningHook?
    /// <p>The ARN of the role associated with the provisioning template. This IoT role grants
    ///          permission to provision a device.</p>
    public let provisioningRoleArn: Swift.String?
    /// <p>The ARN of the fleet provisioning template.</p>
    public let templateArn: Swift.String?
    /// <p>The JSON formatted contents of the fleet provisioning template.</p>
    public let templateBody: Swift.String?
    /// <p>The name of the fleet provisioning template.</p>
    public let templateName: Swift.String?

    public init (
        creationDate: ClientRuntime.Date? = nil,
        defaultVersionId: Swift.Int? = nil,
        description: Swift.String? = nil,
        enabled: Swift.Bool = false,
        lastModifiedDate: ClientRuntime.Date? = nil,
        preProvisioningHook: IotClientTypes.ProvisioningHook? = nil,
        provisioningRoleArn: Swift.String? = nil,
        templateArn: Swift.String? = nil,
        templateBody: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.creationDate = creationDate
        self.defaultVersionId = defaultVersionId
        self.description = description
        self.enabled = enabled
        self.lastModifiedDate = lastModifiedDate
        self.preProvisioningHook = preProvisioningHook
        self.provisioningRoleArn = provisioningRoleArn
        self.templateArn = templateArn
        self.templateBody = templateBody
        self.templateName = templateName
    }
}

struct DescribeProvisioningTemplateOutputResponseBody: Swift.Equatable {
    public let templateArn: Swift.String?
    public let templateName: Swift.String?
    public let description: Swift.String?
    public let creationDate: ClientRuntime.Date?
    public let lastModifiedDate: ClientRuntime.Date?
    public let defaultVersionId: Swift.Int?
    public let templateBody: Swift.String?
    public let enabled: Swift.Bool
    public let provisioningRoleArn: Swift.String?
    public let preProvisioningHook: IotClientTypes.ProvisioningHook?
}

extension DescribeProvisioningTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case defaultVersionId
        case description
        case enabled
        case lastModifiedDate
        case preProvisioningHook
        case provisioningRoleArn
        case templateArn
        case templateBody
        case templateName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let provisioningRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provisioningRoleArn)
        provisioningRoleArn = provisioningRoleArnDecoded
        let preProvisioningHookDecoded = try containerValues.decodeIfPresent(IotClientTypes.ProvisioningHook.self, forKey: .preProvisioningHook)
        preProvisioningHook = preProvisioningHookDecoded
    }
}

extension DescribeProvisioningTemplateVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeProvisioningTemplateVersionInput(templateName: \(Swift.String(describing: templateName)), versionId: \(Swift.String(describing: versionId)))"}
}

extension DescribeProvisioningTemplateVersionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeProvisioningTemplateVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeProvisioningTemplateVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeProvisioningTemplateVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeProvisioningTemplateVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeProvisioningTemplateVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeProvisioningTemplateVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeProvisioningTemplateVersionOutputError>
}

public struct DescribeProvisioningTemplateVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeProvisioningTemplateVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeProvisioningTemplateVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeProvisioningTemplateVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeProvisioningTemplateVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeProvisioningTemplateVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeProvisioningTemplateVersionOutputError>
}

public struct DescribeProvisioningTemplateVersionInput: Swift.Equatable {
    /// <p>The template name.</p>
    public let templateName: Swift.String?
    /// <p>The fleet provisioning template version ID.</p>
    public let versionId: Swift.Int?

    public init (
        templateName: Swift.String? = nil,
        versionId: Swift.Int? = nil
    )
    {
        self.templateName = templateName
        self.versionId = versionId
    }
}

struct DescribeProvisioningTemplateVersionInputBody: Swift.Equatable {
}

extension DescribeProvisioningTemplateVersionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeProvisioningTemplateVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeProvisioningTemplateVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeProvisioningTemplateVersionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeProvisioningTemplateVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeProvisioningTemplateVersionOutputResponse(creationDate: \(Swift.String(describing: creationDate)), isDefaultVersion: \(Swift.String(describing: isDefaultVersion)), templateBody: \(Swift.String(describing: templateBody)), versionId: \(Swift.String(describing: versionId)))"}
}

extension DescribeProvisioningTemplateVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeProvisioningTemplateVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationDate = output.creationDate
            self.isDefaultVersion = output.isDefaultVersion
            self.templateBody = output.templateBody
            self.versionId = output.versionId
        } else {
            self.creationDate = nil
            self.isDefaultVersion = false
            self.templateBody = nil
            self.versionId = nil
        }
    }
}

public struct DescribeProvisioningTemplateVersionOutputResponse: Swift.Equatable {
    /// <p>The date when the fleet provisioning template version was created.</p>
    public let creationDate: ClientRuntime.Date?
    /// <p>True if the fleet provisioning template version is the default version.</p>
    public let isDefaultVersion: Swift.Bool
    /// <p>The JSON formatted contents of the fleet provisioning template version.</p>
    public let templateBody: Swift.String?
    /// <p>The fleet provisioning template version ID.</p>
    public let versionId: Swift.Int?

    public init (
        creationDate: ClientRuntime.Date? = nil,
        isDefaultVersion: Swift.Bool = false,
        templateBody: Swift.String? = nil,
        versionId: Swift.Int? = nil
    )
    {
        self.creationDate = creationDate
        self.isDefaultVersion = isDefaultVersion
        self.templateBody = templateBody
        self.versionId = versionId
    }
}

struct DescribeProvisioningTemplateVersionOutputResponseBody: Swift.Equatable {
    public let versionId: Swift.Int?
    public let creationDate: ClientRuntime.Date?
    public let templateBody: Swift.String?
    public let isDefaultVersion: Swift.Bool
}

extension DescribeProvisioningTemplateVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case isDefaultVersion
        case templateBody
        case versionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .versionId)
        versionId = versionIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let isDefaultVersionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
    }
}

extension DescribeRoleAliasInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRoleAliasInput(roleAlias: \(Swift.String(describing: roleAlias)))"}
}

extension DescribeRoleAliasInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeRoleAliasInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRoleAliasInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRoleAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRoleAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRoleAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRoleAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRoleAliasOutputError>
}

public struct DescribeRoleAliasInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRoleAliasInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRoleAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRoleAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRoleAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRoleAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRoleAliasOutputError>
}

public struct DescribeRoleAliasInput: Swift.Equatable {
    /// <p>The role alias to describe.</p>
    public let roleAlias: Swift.String?

    public init (
        roleAlias: Swift.String? = nil
    )
    {
        self.roleAlias = roleAlias
    }
}

struct DescribeRoleAliasInputBody: Swift.Equatable {
}

extension DescribeRoleAliasInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeRoleAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRoleAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeRoleAliasOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRoleAliasOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRoleAliasOutputResponse(roleAliasDescription: \(Swift.String(describing: roleAliasDescription)))"}
}

extension DescribeRoleAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeRoleAliasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.roleAliasDescription = output.roleAliasDescription
        } else {
            self.roleAliasDescription = nil
        }
    }
}

public struct DescribeRoleAliasOutputResponse: Swift.Equatable {
    /// <p>The role alias description.</p>
    public let roleAliasDescription: IotClientTypes.RoleAliasDescription?

    public init (
        roleAliasDescription: IotClientTypes.RoleAliasDescription? = nil
    )
    {
        self.roleAliasDescription = roleAliasDescription
    }
}

struct DescribeRoleAliasOutputResponseBody: Swift.Equatable {
    public let roleAliasDescription: IotClientTypes.RoleAliasDescription?
}

extension DescribeRoleAliasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleAliasDescription
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleAliasDescriptionDecoded = try containerValues.decodeIfPresent(IotClientTypes.RoleAliasDescription.self, forKey: .roleAliasDescription)
        roleAliasDescription = roleAliasDescriptionDecoded
    }
}

extension DescribeScheduledAuditInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScheduledAuditInput(scheduledAuditName: \(Swift.String(describing: scheduledAuditName)))"}
}

extension DescribeScheduledAuditInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeScheduledAuditInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScheduledAuditInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScheduledAuditInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScheduledAuditOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScheduledAuditInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScheduledAuditOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScheduledAuditOutputError>
}

public struct DescribeScheduledAuditInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScheduledAuditInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScheduledAuditInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScheduledAuditOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScheduledAuditInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScheduledAuditOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScheduledAuditOutputError>
}

public struct DescribeScheduledAuditInput: Swift.Equatable {
    /// <p>The name of the scheduled audit whose information you want to get.</p>
    public let scheduledAuditName: Swift.String?

    public init (
        scheduledAuditName: Swift.String? = nil
    )
    {
        self.scheduledAuditName = scheduledAuditName
    }
}

struct DescribeScheduledAuditInputBody: Swift.Equatable {
}

extension DescribeScheduledAuditInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeScheduledAuditOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeScheduledAuditOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScheduledAuditOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScheduledAuditOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScheduledAuditOutputResponse(dayOfMonth: \(Swift.String(describing: dayOfMonth)), dayOfWeek: \(Swift.String(describing: dayOfWeek)), frequency: \(Swift.String(describing: frequency)), scheduledAuditArn: \(Swift.String(describing: scheduledAuditArn)), scheduledAuditName: \(Swift.String(describing: scheduledAuditName)), targetCheckNames: \(Swift.String(describing: targetCheckNames)))"}
}

extension DescribeScheduledAuditOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeScheduledAuditOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dayOfMonth = output.dayOfMonth
            self.dayOfWeek = output.dayOfWeek
            self.frequency = output.frequency
            self.scheduledAuditArn = output.scheduledAuditArn
            self.scheduledAuditName = output.scheduledAuditName
            self.targetCheckNames = output.targetCheckNames
        } else {
            self.dayOfMonth = nil
            self.dayOfWeek = nil
            self.frequency = nil
            self.scheduledAuditArn = nil
            self.scheduledAuditName = nil
            self.targetCheckNames = nil
        }
    }
}

public struct DescribeScheduledAuditOutputResponse: Swift.Equatable {
    /// <p>The day of the month on which the scheduled audit takes place.
    ///       This is
    ///       will be <code>1</code>
    ///             through <code>31</code> or <code>LAST</code>. If days
    ///       <code>29</code>-<code>31</code>
    ///       are specified, and the month does not have that many days, the audit takes place on the <code>LAST</code>
    ///       day of the month.</p>
    public let dayOfMonth: Swift.String?
    /// <p>The day of the week on which the scheduled audit takes
    ///       place,
    ///       either one of
    ///             <code>SUN</code>, <code>MON</code>, <code>TUE</code>, <code>WED</code>, <code>THU</code>, <code>FRI</code>, or <code>SAT</code>.</p>
    public let dayOfWeek: IotClientTypes.DayOfWeek?
    /// <p>How often the scheduled audit takes
    ///       place, either
    ///       one of <code>DAILY</code>,
    ///             <code>WEEKLY</code>, <code>BIWEEKLY</code>, or <code>MONTHLY</code>. The start time of each audit is determined by the
    ///       system.</p>
    public let frequency: IotClientTypes.AuditFrequency?
    /// <p>The ARN of the scheduled audit.</p>
    public let scheduledAuditArn: Swift.String?
    /// <p>The name of the scheduled audit.</p>
    public let scheduledAuditName: Swift.String?
    /// <p>Which checks are performed during the scheduled audit. Checks must be
    ///             enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list
    ///             of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code>
    ///             to select which checks are enabled.)</p>
    public let targetCheckNames: [Swift.String]?

    public init (
        dayOfMonth: Swift.String? = nil,
        dayOfWeek: IotClientTypes.DayOfWeek? = nil,
        frequency: IotClientTypes.AuditFrequency? = nil,
        scheduledAuditArn: Swift.String? = nil,
        scheduledAuditName: Swift.String? = nil,
        targetCheckNames: [Swift.String]? = nil
    )
    {
        self.dayOfMonth = dayOfMonth
        self.dayOfWeek = dayOfWeek
        self.frequency = frequency
        self.scheduledAuditArn = scheduledAuditArn
        self.scheduledAuditName = scheduledAuditName
        self.targetCheckNames = targetCheckNames
    }
}

struct DescribeScheduledAuditOutputResponseBody: Swift.Equatable {
    public let frequency: IotClientTypes.AuditFrequency?
    public let dayOfMonth: Swift.String?
    public let dayOfWeek: IotClientTypes.DayOfWeek?
    public let targetCheckNames: [Swift.String]?
    public let scheduledAuditName: Swift.String?
    public let scheduledAuditArn: Swift.String?
}

extension DescribeScheduledAuditOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dayOfMonth
        case dayOfWeek
        case frequency
        case scheduledAuditArn
        case scheduledAuditName
        case targetCheckNames
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let frequencyDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditFrequency.self, forKey: .frequency)
        frequency = frequencyDecoded
        let dayOfMonthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dayOfMonth)
        dayOfMonth = dayOfMonthDecoded
        let dayOfWeekDecoded = try containerValues.decodeIfPresent(IotClientTypes.DayOfWeek.self, forKey: .dayOfWeek)
        dayOfWeek = dayOfWeekDecoded
        let targetCheckNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetCheckNames)
        var targetCheckNamesDecoded0:[Swift.String]? = nil
        if let targetCheckNamesContainer = targetCheckNamesContainer {
            targetCheckNamesDecoded0 = [Swift.String]()
            for string0 in targetCheckNamesContainer {
                if let string0 = string0 {
                    targetCheckNamesDecoded0?.append(string0)
                }
            }
        }
        targetCheckNames = targetCheckNamesDecoded0
        let scheduledAuditNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledAuditName)
        scheduledAuditName = scheduledAuditNameDecoded
        let scheduledAuditArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledAuditArn)
        scheduledAuditArn = scheduledAuditArnDecoded
    }
}

extension DescribeSecurityProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeSecurityProfileInput(securityProfileName: \(Swift.String(describing: securityProfileName)))"}
}

extension DescribeSecurityProfileInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeSecurityProfileInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeSecurityProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeSecurityProfileOutputError>
}

public struct DescribeSecurityProfileInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeSecurityProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeSecurityProfileOutputError>
}

public struct DescribeSecurityProfileInput: Swift.Equatable {
    /// <p>The name of the security profile
    ///       whose information you want to get.</p>
    public let securityProfileName: Swift.String?

    public init (
        securityProfileName: Swift.String? = nil
    )
    {
        self.securityProfileName = securityProfileName
    }
}

struct DescribeSecurityProfileInputBody: Swift.Equatable {
}

extension DescribeSecurityProfileInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeSecurityProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeSecurityProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeSecurityProfileOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSecurityProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeSecurityProfileOutputResponse(additionalMetricsToRetain: \(Swift.String(describing: additionalMetricsToRetain)), additionalMetricsToRetainV2: \(Swift.String(describing: additionalMetricsToRetainV2)), alertTargets: \(Swift.String(describing: alertTargets)), behaviors: \(Swift.String(describing: behaviors)), creationDate: \(Swift.String(describing: creationDate)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), securityProfileArn: \(Swift.String(describing: securityProfileArn)), securityProfileDescription: \(Swift.String(describing: securityProfileDescription)), securityProfileName: \(Swift.String(describing: securityProfileName)), version: \(Swift.String(describing: version)))"}
}

extension DescribeSecurityProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeSecurityProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.additionalMetricsToRetain = output.additionalMetricsToRetain
            self.additionalMetricsToRetainV2 = output.additionalMetricsToRetainV2
            self.alertTargets = output.alertTargets
            self.behaviors = output.behaviors
            self.creationDate = output.creationDate
            self.lastModifiedDate = output.lastModifiedDate
            self.securityProfileArn = output.securityProfileArn
            self.securityProfileDescription = output.securityProfileDescription
            self.securityProfileName = output.securityProfileName
            self.version = output.version
        } else {
            self.additionalMetricsToRetain = nil
            self.additionalMetricsToRetainV2 = nil
            self.alertTargets = nil
            self.behaviors = nil
            self.creationDate = nil
            self.lastModifiedDate = nil
            self.securityProfileArn = nil
            self.securityProfileDescription = nil
            self.securityProfileName = nil
            self.version = 0
        }
    }
}

public struct DescribeSecurityProfileOutputResponse: Swift.Equatable {
    /// <p>
    ///             <i>Please use
    ///           <a>DescribeSecurityProfileResponse$additionalMetricsToRetainV2</a>
    ///         instead.</i>
    ///          </p>
    ///          <p>A list of metrics
    ///       whose data is retained (stored). By default, data is retained for any metric
    ///       used in the profile's <code>behaviors</code>, but
    ///       it is
    ///       also retained for any metric specified here.</p>
    @available(*, deprecated, message: "Use additionalMetricsToRetainV2.")
    public let additionalMetricsToRetain: [Swift.String]?
    /// <p>A list of metrics whose data is retained (stored). By default, data is retained for any
    ///       metric used in the profile's behaviors, but
    ///       it is
    ///       also retained for any metric specified here.</p>
    public let additionalMetricsToRetainV2: [IotClientTypes.MetricToRetain]?
    /// <p>Where the alerts are sent. (Alerts are always sent to the console.)</p>
    public let alertTargets: [Swift.String:IotClientTypes.AlertTarget]?
    /// <p>Specifies the behaviors that, when violated by a device (thing), cause an alert.</p>
    public let behaviors: [IotClientTypes.Behavior]?
    /// <p>The time the security profile was created.</p>
    public let creationDate: ClientRuntime.Date?
    /// <p>The time the security profile was last modified.</p>
    public let lastModifiedDate: ClientRuntime.Date?
    /// <p>The ARN of the security profile.</p>
    public let securityProfileArn: Swift.String?
    /// <p>A description of the security profile (associated with the security profile
    ///         when it was created or updated).</p>
    public let securityProfileDescription: Swift.String?
    /// <p>The name of the security profile.</p>
    public let securityProfileName: Swift.String?
    /// <p>The version of the security profile. A new version is generated whenever the
    ///         security profile is updated.</p>
    public let version: Swift.Int

    public init (
        additionalMetricsToRetain: [Swift.String]? = nil,
        additionalMetricsToRetainV2: [IotClientTypes.MetricToRetain]? = nil,
        alertTargets: [Swift.String:IotClientTypes.AlertTarget]? = nil,
        behaviors: [IotClientTypes.Behavior]? = nil,
        creationDate: ClientRuntime.Date? = nil,
        lastModifiedDate: ClientRuntime.Date? = nil,
        securityProfileArn: Swift.String? = nil,
        securityProfileDescription: Swift.String? = nil,
        securityProfileName: Swift.String? = nil,
        version: Swift.Int = 0
    )
    {
        self.additionalMetricsToRetain = additionalMetricsToRetain
        self.additionalMetricsToRetainV2 = additionalMetricsToRetainV2
        self.alertTargets = alertTargets
        self.behaviors = behaviors
        self.creationDate = creationDate
        self.lastModifiedDate = lastModifiedDate
        self.securityProfileArn = securityProfileArn
        self.securityProfileDescription = securityProfileDescription
        self.securityProfileName = securityProfileName
        self.version = version
    }
}

struct DescribeSecurityProfileOutputResponseBody: Swift.Equatable {
    public let securityProfileName: Swift.String?
    public let securityProfileArn: Swift.String?
    public let securityProfileDescription: Swift.String?
    public let behaviors: [IotClientTypes.Behavior]?
    public let alertTargets: [Swift.String:IotClientTypes.AlertTarget]?
    public let additionalMetricsToRetain: [Swift.String]?
    public let additionalMetricsToRetainV2: [IotClientTypes.MetricToRetain]?
    public let version: Swift.Int
    public let creationDate: ClientRuntime.Date?
    public let lastModifiedDate: ClientRuntime.Date?
}

extension DescribeSecurityProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalMetricsToRetain
        case additionalMetricsToRetainV2
        case alertTargets
        case behaviors
        case creationDate
        case lastModifiedDate
        case securityProfileArn
        case securityProfileDescription
        case securityProfileName
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityProfileName)
        securityProfileName = securityProfileNameDecoded
        let securityProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityProfileArn)
        securityProfileArn = securityProfileArnDecoded
        let securityProfileDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityProfileDescription)
        securityProfileDescription = securityProfileDescriptionDecoded
        let behaviorsContainer = try containerValues.decodeIfPresent([IotClientTypes.Behavior?].self, forKey: .behaviors)
        var behaviorsDecoded0:[IotClientTypes.Behavior]? = nil
        if let behaviorsContainer = behaviorsContainer {
            behaviorsDecoded0 = [IotClientTypes.Behavior]()
            for structure0 in behaviorsContainer {
                if let structure0 = structure0 {
                    behaviorsDecoded0?.append(structure0)
                }
            }
        }
        behaviors = behaviorsDecoded0
        let alertTargetsContainer = try containerValues.decodeIfPresent([Swift.String: IotClientTypes.AlertTarget?].self, forKey: .alertTargets)
        var alertTargetsDecoded0: [Swift.String:IotClientTypes.AlertTarget]? = nil
        if let alertTargetsContainer = alertTargetsContainer {
            alertTargetsDecoded0 = [Swift.String:IotClientTypes.AlertTarget]()
            for (key0, alerttarget0) in alertTargetsContainer {
                if let alerttarget0 = alerttarget0 {
                    alertTargetsDecoded0?[key0] = alerttarget0
                }
            }
        }
        alertTargets = alertTargetsDecoded0
        let additionalMetricsToRetainContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalMetricsToRetain)
        var additionalMetricsToRetainDecoded0:[Swift.String]? = nil
        if let additionalMetricsToRetainContainer = additionalMetricsToRetainContainer {
            additionalMetricsToRetainDecoded0 = [Swift.String]()
            for string0 in additionalMetricsToRetainContainer {
                if let string0 = string0 {
                    additionalMetricsToRetainDecoded0?.append(string0)
                }
            }
        }
        additionalMetricsToRetain = additionalMetricsToRetainDecoded0
        let additionalMetricsToRetainV2Container = try containerValues.decodeIfPresent([IotClientTypes.MetricToRetain?].self, forKey: .additionalMetricsToRetainV2)
        var additionalMetricsToRetainV2Decoded0:[IotClientTypes.MetricToRetain]? = nil
        if let additionalMetricsToRetainV2Container = additionalMetricsToRetainV2Container {
            additionalMetricsToRetainV2Decoded0 = [IotClientTypes.MetricToRetain]()
            for structure0 in additionalMetricsToRetainV2Container {
                if let structure0 = structure0 {
                    additionalMetricsToRetainV2Decoded0?.append(structure0)
                }
            }
        }
        additionalMetricsToRetainV2 = additionalMetricsToRetainV2Decoded0
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
    }
}

extension DescribeStreamInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStreamInput(streamId: \(Swift.String(describing: streamId)))"}
}

extension DescribeStreamInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeStreamInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStreamInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStreamOutputError>
}

public struct DescribeStreamInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStreamInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStreamOutputError>
}

public struct DescribeStreamInput: Swift.Equatable {
    /// <p>The stream ID.</p>
    public let streamId: Swift.String?

    public init (
        streamId: Swift.String? = nil
    )
    {
        self.streamId = streamId
    }
}

struct DescribeStreamInputBody: Swift.Equatable {
}

extension DescribeStreamInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStreamOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStreamOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStreamOutputResponse(streamInfo: \(Swift.String(describing: streamInfo)))"}
}

extension DescribeStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeStreamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.streamInfo = output.streamInfo
        } else {
            self.streamInfo = nil
        }
    }
}

public struct DescribeStreamOutputResponse: Swift.Equatable {
    /// <p>Information about the stream.</p>
    public let streamInfo: IotClientTypes.StreamInfo?

    public init (
        streamInfo: IotClientTypes.StreamInfo? = nil
    )
    {
        self.streamInfo = streamInfo
    }
}

struct DescribeStreamOutputResponseBody: Swift.Equatable {
    public let streamInfo: IotClientTypes.StreamInfo?
}

extension DescribeStreamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamInfoDecoded = try containerValues.decodeIfPresent(IotClientTypes.StreamInfo.self, forKey: .streamInfo)
        streamInfo = streamInfoDecoded
    }
}

extension DescribeThingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeThingGroupInput(thingGroupName: \(Swift.String(describing: thingGroupName)))"}
}

extension DescribeThingGroupInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeThingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeThingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeThingGroupOutputError>
}

public struct DescribeThingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeThingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeThingGroupOutputError>
}

public struct DescribeThingGroupInput: Swift.Equatable {
    /// <p>The name of the thing group.</p>
    public let thingGroupName: Swift.String?

    public init (
        thingGroupName: Swift.String? = nil
    )
    {
        self.thingGroupName = thingGroupName
    }
}

struct DescribeThingGroupInputBody: Swift.Equatable {
}

extension DescribeThingGroupInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeThingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeThingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeThingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeThingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeThingGroupOutputResponse(indexName: \(Swift.String(describing: indexName)), queryString: \(Swift.String(describing: queryString)), queryVersion: \(Swift.String(describing: queryVersion)), status: \(Swift.String(describing: status)), thingGroupArn: \(Swift.String(describing: thingGroupArn)), thingGroupId: \(Swift.String(describing: thingGroupId)), thingGroupMetadata: \(Swift.String(describing: thingGroupMetadata)), thingGroupName: \(Swift.String(describing: thingGroupName)), thingGroupProperties: \(Swift.String(describing: thingGroupProperties)), version: \(Swift.String(describing: version)))"}
}

extension DescribeThingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeThingGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.indexName = output.indexName
            self.queryString = output.queryString
            self.queryVersion = output.queryVersion
            self.status = output.status
            self.thingGroupArn = output.thingGroupArn
            self.thingGroupId = output.thingGroupId
            self.thingGroupMetadata = output.thingGroupMetadata
            self.thingGroupName = output.thingGroupName
            self.thingGroupProperties = output.thingGroupProperties
            self.version = output.version
        } else {
            self.indexName = nil
            self.queryString = nil
            self.queryVersion = nil
            self.status = nil
            self.thingGroupArn = nil
            self.thingGroupId = nil
            self.thingGroupMetadata = nil
            self.thingGroupName = nil
            self.thingGroupProperties = nil
            self.version = 0
        }
    }
}

public struct DescribeThingGroupOutputResponse: Swift.Equatable {
    /// <p>The dynamic thing group index name.</p>
    public let indexName: Swift.String?
    /// <p>The dynamic thing group search query string.</p>
    public let queryString: Swift.String?
    /// <p>The dynamic thing group query version.</p>
    public let queryVersion: Swift.String?
    /// <p>The dynamic thing group status.</p>
    public let status: IotClientTypes.DynamicGroupStatus?
    /// <p>The thing group ARN.</p>
    public let thingGroupArn: Swift.String?
    /// <p>The thing group ID.</p>
    public let thingGroupId: Swift.String?
    /// <p>Thing group metadata.</p>
    public let thingGroupMetadata: IotClientTypes.ThingGroupMetadata?
    /// <p>The name of the thing group.</p>
    public let thingGroupName: Swift.String?
    /// <p>The thing group properties.</p>
    public let thingGroupProperties: IotClientTypes.ThingGroupProperties?
    /// <p>The version of the thing group.</p>
    public let version: Swift.Int

    public init (
        indexName: Swift.String? = nil,
        queryString: Swift.String? = nil,
        queryVersion: Swift.String? = nil,
        status: IotClientTypes.DynamicGroupStatus? = nil,
        thingGroupArn: Swift.String? = nil,
        thingGroupId: Swift.String? = nil,
        thingGroupMetadata: IotClientTypes.ThingGroupMetadata? = nil,
        thingGroupName: Swift.String? = nil,
        thingGroupProperties: IotClientTypes.ThingGroupProperties? = nil,
        version: Swift.Int = 0
    )
    {
        self.indexName = indexName
        self.queryString = queryString
        self.queryVersion = queryVersion
        self.status = status
        self.thingGroupArn = thingGroupArn
        self.thingGroupId = thingGroupId
        self.thingGroupMetadata = thingGroupMetadata
        self.thingGroupName = thingGroupName
        self.thingGroupProperties = thingGroupProperties
        self.version = version
    }
}

struct DescribeThingGroupOutputResponseBody: Swift.Equatable {
    public let thingGroupName: Swift.String?
    public let thingGroupId: Swift.String?
    public let thingGroupArn: Swift.String?
    public let version: Swift.Int
    public let thingGroupProperties: IotClientTypes.ThingGroupProperties?
    public let thingGroupMetadata: IotClientTypes.ThingGroupMetadata?
    public let indexName: Swift.String?
    public let queryString: Swift.String?
    public let queryVersion: Swift.String?
    public let status: IotClientTypes.DynamicGroupStatus?
}

extension DescribeThingGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName
        case queryString
        case queryVersion
        case status
        case thingGroupArn
        case thingGroupId
        case thingGroupMetadata
        case thingGroupName
        case thingGroupProperties
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupName)
        thingGroupName = thingGroupNameDecoded
        let thingGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupId)
        thingGroupId = thingGroupIdDecoded
        let thingGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupArn)
        thingGroupArn = thingGroupArnDecoded
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let thingGroupPropertiesDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingGroupProperties.self, forKey: .thingGroupProperties)
        thingGroupProperties = thingGroupPropertiesDecoded
        let thingGroupMetadataDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingGroupMetadata.self, forKey: .thingGroupMetadata)
        thingGroupMetadata = thingGroupMetadataDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let queryVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryVersion)
        queryVersion = queryVersionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.DynamicGroupStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension DescribeThingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeThingInput(thingName: \(Swift.String(describing: thingName)))"}
}

extension DescribeThingInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeThingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeThingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeThingOutputError>
}

public struct DescribeThingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeThingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeThingOutputError>
}

/// <p>The input for the DescribeThing operation.</p>
public struct DescribeThingInput: Swift.Equatable {
    /// <p>The name of the thing.</p>
    public let thingName: Swift.String?

    public init (
        thingName: Swift.String? = nil
    )
    {
        self.thingName = thingName
    }
}

struct DescribeThingInputBody: Swift.Equatable {
}

extension DescribeThingInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeThingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeThingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeThingOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeThingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeThingOutputResponse(attributes: \(Swift.String(describing: attributes)), billingGroupName: \(Swift.String(describing: billingGroupName)), defaultClientId: \(Swift.String(describing: defaultClientId)), thingArn: \(Swift.String(describing: thingArn)), thingId: \(Swift.String(describing: thingId)), thingName: \(Swift.String(describing: thingName)), thingTypeName: \(Swift.String(describing: thingTypeName)), version: \(Swift.String(describing: version)))"}
}

extension DescribeThingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeThingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.attributes = output.attributes
            self.billingGroupName = output.billingGroupName
            self.defaultClientId = output.defaultClientId
            self.thingArn = output.thingArn
            self.thingId = output.thingId
            self.thingName = output.thingName
            self.thingTypeName = output.thingTypeName
            self.version = output.version
        } else {
            self.attributes = nil
            self.billingGroupName = nil
            self.defaultClientId = nil
            self.thingArn = nil
            self.thingId = nil
            self.thingName = nil
            self.thingTypeName = nil
            self.version = 0
        }
    }
}

/// <p>The output from the DescribeThing operation.</p>
public struct DescribeThingOutputResponse: Swift.Equatable {
    /// <p>The thing attributes.</p>
    public let attributes: [Swift.String:Swift.String]?
    /// <p>The name of the billing group the thing belongs to.</p>
    public let billingGroupName: Swift.String?
    /// <p>The default MQTT client ID. For a typical device, the thing name is also used as the default MQTT client ID.
    /// 			Although we don’t require a mapping between a thing's registry name and its use of MQTT client IDs, certificates, or
    /// 			shadow state, we recommend that you choose a thing name and use it as the MQTT client ID for the registry and the Device Shadow service.</p>
    /// 		       <p>This lets you better organize your AWS IoT fleet without removing the flexibility of the underlying device certificate model or shadows.</p>
    public let defaultClientId: Swift.String?
    /// <p>The ARN of the thing to describe.</p>
    public let thingArn: Swift.String?
    /// <p>The ID of the thing to describe.</p>
    public let thingId: Swift.String?
    /// <p>The name of the thing.</p>
    public let thingName: Swift.String?
    /// <p>The thing type name.</p>
    public let thingTypeName: Swift.String?
    /// <p>The current version of the thing record in the registry.</p>
    /// 		       <note>
    /// 			         <p>To avoid unintentional changes to the information in the registry, you can pass
    /// 				the version information in the <code>expectedVersion</code> parameter of the
    /// 					<code>UpdateThing</code> and <code>DeleteThing</code> calls.</p>
    /// 		       </note>
    public let version: Swift.Int

    public init (
        attributes: [Swift.String:Swift.String]? = nil,
        billingGroupName: Swift.String? = nil,
        defaultClientId: Swift.String? = nil,
        thingArn: Swift.String? = nil,
        thingId: Swift.String? = nil,
        thingName: Swift.String? = nil,
        thingTypeName: Swift.String? = nil,
        version: Swift.Int = 0
    )
    {
        self.attributes = attributes
        self.billingGroupName = billingGroupName
        self.defaultClientId = defaultClientId
        self.thingArn = thingArn
        self.thingId = thingId
        self.thingName = thingName
        self.thingTypeName = thingTypeName
        self.version = version
    }
}

struct DescribeThingOutputResponseBody: Swift.Equatable {
    public let defaultClientId: Swift.String?
    public let thingName: Swift.String?
    public let thingId: Swift.String?
    public let thingArn: Swift.String?
    public let thingTypeName: Swift.String?
    public let attributes: [Swift.String:Swift.String]?
    public let version: Swift.Int
    public let billingGroupName: Swift.String?
}

extension DescribeThingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case billingGroupName
        case defaultClientId
        case thingArn
        case thingId
        case thingName
        case thingTypeName
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultClientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultClientId)
        defaultClientId = defaultClientIdDecoded
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let thingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingId)
        thingId = thingIdDecoded
        let thingArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingArn)
        thingArn = thingArnDecoded
        let thingTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeName)
        thingTypeName = thingTypeNameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let billingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupName)
        billingGroupName = billingGroupNameDecoded
    }
}

extension DescribeThingRegistrationTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeThingRegistrationTaskInput(taskId: \(Swift.String(describing: taskId)))"}
}

extension DescribeThingRegistrationTaskInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeThingRegistrationTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeThingRegistrationTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeThingRegistrationTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeThingRegistrationTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeThingRegistrationTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeThingRegistrationTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeThingRegistrationTaskOutputError>
}

public struct DescribeThingRegistrationTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeThingRegistrationTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeThingRegistrationTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeThingRegistrationTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeThingRegistrationTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeThingRegistrationTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeThingRegistrationTaskOutputError>
}

public struct DescribeThingRegistrationTaskInput: Swift.Equatable {
    /// <p>The task ID.</p>
    public let taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct DescribeThingRegistrationTaskInputBody: Swift.Equatable {
}

extension DescribeThingRegistrationTaskInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeThingRegistrationTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeThingRegistrationTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeThingRegistrationTaskOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeThingRegistrationTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeThingRegistrationTaskOutputResponse(creationDate: \(Swift.String(describing: creationDate)), failureCount: \(Swift.String(describing: failureCount)), inputFileBucket: \(Swift.String(describing: inputFileBucket)), inputFileKey: \(Swift.String(describing: inputFileKey)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), message: \(Swift.String(describing: message)), percentageProgress: \(Swift.String(describing: percentageProgress)), roleArn: \(Swift.String(describing: roleArn)), status: \(Swift.String(describing: status)), successCount: \(Swift.String(describing: successCount)), taskId: \(Swift.String(describing: taskId)), templateBody: \(Swift.String(describing: templateBody)))"}
}

extension DescribeThingRegistrationTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeThingRegistrationTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationDate = output.creationDate
            self.failureCount = output.failureCount
            self.inputFileBucket = output.inputFileBucket
            self.inputFileKey = output.inputFileKey
            self.lastModifiedDate = output.lastModifiedDate
            self.message = output.message
            self.percentageProgress = output.percentageProgress
            self.roleArn = output.roleArn
            self.status = output.status
            self.successCount = output.successCount
            self.taskId = output.taskId
            self.templateBody = output.templateBody
        } else {
            self.creationDate = nil
            self.failureCount = 0
            self.inputFileBucket = nil
            self.inputFileKey = nil
            self.lastModifiedDate = nil
            self.message = nil
            self.percentageProgress = 0
            self.roleArn = nil
            self.status = nil
            self.successCount = 0
            self.taskId = nil
            self.templateBody = nil
        }
    }
}

public struct DescribeThingRegistrationTaskOutputResponse: Swift.Equatable {
    /// <p>The task creation date.</p>
    public let creationDate: ClientRuntime.Date?
    /// <p>The number of things that failed to be provisioned.</p>
    public let failureCount: Swift.Int
    /// <p>The S3 bucket that contains the input file.</p>
    public let inputFileBucket: Swift.String?
    /// <p>The input file key.</p>
    public let inputFileKey: Swift.String?
    /// <p>The date when the task was last modified.</p>
    public let lastModifiedDate: ClientRuntime.Date?
    /// <p>The message.</p>
    public let message: Swift.String?
    /// <p>The progress of the bulk provisioning task expressed as a percentage.</p>
    public let percentageProgress: Swift.Int
    /// <p>The role ARN that grants access to the input file bucket.</p>
    public let roleArn: Swift.String?
    /// <p>The status of the bulk thing provisioning task.</p>
    public let status: IotClientTypes.Status?
    /// <p>The number of things successfully provisioned.</p>
    public let successCount: Swift.Int
    /// <p>The task ID.</p>
    public let taskId: Swift.String?
    /// <p>The task's template.</p>
    public let templateBody: Swift.String?

    public init (
        creationDate: ClientRuntime.Date? = nil,
        failureCount: Swift.Int = 0,
        inputFileBucket: Swift.String? = nil,
        inputFileKey: Swift.String? = nil,
        lastModifiedDate: ClientRuntime.Date? = nil,
        message: Swift.String? = nil,
        percentageProgress: Swift.Int = 0,
        roleArn: Swift.String? = nil,
        status: IotClientTypes.Status? = nil,
        successCount: Swift.Int = 0,
        taskId: Swift.String? = nil,
        templateBody: Swift.String? = nil
    )
    {
        self.creationDate = creationDate
        self.failureCount = failureCount
        self.inputFileBucket = inputFileBucket
        self.inputFileKey = inputFileKey
        self.lastModifiedDate = lastModifiedDate
        self.message = message
        self.percentageProgress = percentageProgress
        self.roleArn = roleArn
        self.status = status
        self.successCount = successCount
        self.taskId = taskId
        self.templateBody = templateBody
    }
}

struct DescribeThingRegistrationTaskOutputResponseBody: Swift.Equatable {
    public let taskId: Swift.String?
    public let creationDate: ClientRuntime.Date?
    public let lastModifiedDate: ClientRuntime.Date?
    public let templateBody: Swift.String?
    public let inputFileBucket: Swift.String?
    public let inputFileKey: Swift.String?
    public let roleArn: Swift.String?
    public let status: IotClientTypes.Status?
    public let message: Swift.String?
    public let successCount: Swift.Int
    public let failureCount: Swift.Int
    public let percentageProgress: Swift.Int
}

extension DescribeThingRegistrationTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case failureCount
        case inputFileBucket
        case inputFileKey
        case lastModifiedDate
        case message
        case percentageProgress
        case roleArn
        case status
        case successCount
        case taskId
        case templateBody
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let inputFileBucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputFileBucket)
        inputFileBucket = inputFileBucketDecoded
        let inputFileKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputFileKey)
        inputFileKey = inputFileKeyDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let successCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .successCount)
        successCount = successCountDecoded
        let failureCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .failureCount)
        failureCount = failureCountDecoded
        let percentageProgressDecoded = try containerValues.decode(Swift.Int.self, forKey: .percentageProgress)
        percentageProgress = percentageProgressDecoded
    }
}

extension DescribeThingTypeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeThingTypeInput(thingTypeName: \(Swift.String(describing: thingTypeName)))"}
}

extension DescribeThingTypeInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeThingTypeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeThingTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeThingTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeThingTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeThingTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeThingTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeThingTypeOutputError>
}

public struct DescribeThingTypeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeThingTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeThingTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeThingTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeThingTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeThingTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeThingTypeOutputError>
}

/// <p>The input for the DescribeThingType operation.</p>
public struct DescribeThingTypeInput: Swift.Equatable {
    /// <p>The name of the thing type.</p>
    public let thingTypeName: Swift.String?

    public init (
        thingTypeName: Swift.String? = nil
    )
    {
        self.thingTypeName = thingTypeName
    }
}

struct DescribeThingTypeInputBody: Swift.Equatable {
}

extension DescribeThingTypeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeThingTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeThingTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeThingTypeOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeThingTypeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeThingTypeOutputResponse(thingTypeArn: \(Swift.String(describing: thingTypeArn)), thingTypeId: \(Swift.String(describing: thingTypeId)), thingTypeMetadata: \(Swift.String(describing: thingTypeMetadata)), thingTypeName: \(Swift.String(describing: thingTypeName)), thingTypeProperties: \(Swift.String(describing: thingTypeProperties)))"}
}

extension DescribeThingTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeThingTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.thingTypeArn = output.thingTypeArn
            self.thingTypeId = output.thingTypeId
            self.thingTypeMetadata = output.thingTypeMetadata
            self.thingTypeName = output.thingTypeName
            self.thingTypeProperties = output.thingTypeProperties
        } else {
            self.thingTypeArn = nil
            self.thingTypeId = nil
            self.thingTypeMetadata = nil
            self.thingTypeName = nil
            self.thingTypeProperties = nil
        }
    }
}

/// <p>The output for the DescribeThingType operation.</p>
public struct DescribeThingTypeOutputResponse: Swift.Equatable {
    /// <p>The thing type ARN.</p>
    public let thingTypeArn: Swift.String?
    /// <p>The thing type ID.</p>
    public let thingTypeId: Swift.String?
    /// <p>The ThingTypeMetadata contains additional information about the thing type
    /// 			including: creation date and time, a value indicating whether the thing type is
    /// 			deprecated, and a date and time when it was deprecated.</p>
    public let thingTypeMetadata: IotClientTypes.ThingTypeMetadata?
    /// <p>The name of the thing type.</p>
    public let thingTypeName: Swift.String?
    /// <p>The ThingTypeProperties contains information about the thing type including
    /// 			description, and a list of searchable thing attribute names.</p>
    public let thingTypeProperties: IotClientTypes.ThingTypeProperties?

    public init (
        thingTypeArn: Swift.String? = nil,
        thingTypeId: Swift.String? = nil,
        thingTypeMetadata: IotClientTypes.ThingTypeMetadata? = nil,
        thingTypeName: Swift.String? = nil,
        thingTypeProperties: IotClientTypes.ThingTypeProperties? = nil
    )
    {
        self.thingTypeArn = thingTypeArn
        self.thingTypeId = thingTypeId
        self.thingTypeMetadata = thingTypeMetadata
        self.thingTypeName = thingTypeName
        self.thingTypeProperties = thingTypeProperties
    }
}

struct DescribeThingTypeOutputResponseBody: Swift.Equatable {
    public let thingTypeName: Swift.String?
    public let thingTypeId: Swift.String?
    public let thingTypeArn: Swift.String?
    public let thingTypeProperties: IotClientTypes.ThingTypeProperties?
    public let thingTypeMetadata: IotClientTypes.ThingTypeMetadata?
}

extension DescribeThingTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case thingTypeArn
        case thingTypeId
        case thingTypeMetadata
        case thingTypeName
        case thingTypeProperties
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeName)
        thingTypeName = thingTypeNameDecoded
        let thingTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeId)
        thingTypeId = thingTypeIdDecoded
        let thingTypeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeArn)
        thingTypeArn = thingTypeArnDecoded
        let thingTypePropertiesDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingTypeProperties.self, forKey: .thingTypeProperties)
        thingTypeProperties = thingTypePropertiesDecoded
        let thingTypeMetadataDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingTypeMetadata.self, forKey: .thingTypeMetadata)
        thingTypeMetadata = thingTypeMetadataDecoded
    }
}

extension IotClientTypes.Destination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Destination
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Destination = s3Destination {
            try encodeContainer.encode(s3Destination, forKey: .s3Destination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3DestinationDecoded = try containerValues.decodeIfPresent(IotClientTypes.S3Destination.self, forKey: .s3Destination)
        s3Destination = s3DestinationDecoded
    }
}

extension IotClientTypes.Destination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Destination(s3Destination: \(Swift.String(describing: s3Destination)))"}
}

extension IotClientTypes {
    /// <p>Describes the location of the updated firmware.</p>
    public struct Destination: Swift.Equatable {
        /// <p>Describes the location in S3 of the updated firmware.</p>
        public let s3Destination: IotClientTypes.S3Destination?

        public init (
            s3Destination: IotClientTypes.S3Destination? = nil
        )
        {
            self.s3Destination = s3Destination
        }
    }

}

public struct DetachPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachPolicyOutputError>
}

extension DetachPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachPolicyInput(policyName: \(Swift.String(describing: policyName)), target: \(Swift.String(describing: target)))"}
}

extension DetachPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case target
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
    }
}

public struct DetachPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachPolicyOutputError>
}

public struct DetachPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachPolicyOutputError>
}

public struct DetachPolicyInput: Swift.Equatable {
    /// <p>The policy to detach.</p>
    public let policyName: Swift.String?
    /// <p>The target from which the policy will be detached.</p>
    public let target: Swift.String?

    public init (
        policyName: Swift.String? = nil,
        target: Swift.String? = nil
    )
    {
        self.policyName = policyName
        self.target = target
    }
}

struct DetachPolicyInputBody: Swift.Equatable {
    public let target: Swift.String?
}

extension DetachPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case target
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .target)
        target = targetDecoded
    }
}

extension DetachPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetachPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachPolicyOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachPolicyOutputResponse()"}
}

extension DetachPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DetachPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DetachPolicyOutputResponseBody: Swift.Equatable {
}

extension DetachPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DetachPrincipalPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachPrincipalPolicyInput(policyName: \(Swift.String(describing: policyName)), principal: \(Swift.String(describing: principal)))"}
}

extension DetachPrincipalPolicyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DetachPrincipalPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachPrincipalPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachPrincipalPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachPrincipalPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let principal = input.operationInput.principal {
            input.builder.withHeader(name: "x-amzn-iot-principal", value: Swift.String(principal))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachPrincipalPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachPrincipalPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachPrincipalPolicyOutputError>
}

public struct DetachPrincipalPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachPrincipalPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachPrincipalPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachPrincipalPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachPrincipalPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachPrincipalPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachPrincipalPolicyOutputError>
}

/// <p>The input for the DetachPrincipalPolicy operation.</p>
public struct DetachPrincipalPolicyInput: Swift.Equatable {
    /// <p>The name of the policy to detach.</p>
    public let policyName: Swift.String?
    /// <p>The principal.</p>
    ///          <p>Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).</p>
    public let principal: Swift.String?

    public init (
        policyName: Swift.String? = nil,
        principal: Swift.String? = nil
    )
    {
        self.policyName = policyName
        self.principal = principal
    }
}

struct DetachPrincipalPolicyInputBody: Swift.Equatable {
}

extension DetachPrincipalPolicyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DetachPrincipalPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetachPrincipalPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachPrincipalPolicyOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachPrincipalPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachPrincipalPolicyOutputResponse()"}
}

extension DetachPrincipalPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DetachPrincipalPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DetachPrincipalPolicyOutputResponseBody: Swift.Equatable {
}

extension DetachPrincipalPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DetachSecurityProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachSecurityProfileInput(securityProfileName: \(Swift.String(describing: securityProfileName)), securityProfileTargetArn: \(Swift.String(describing: securityProfileTargetArn)))"}
}

extension DetachSecurityProfileInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DetachSecurityProfileInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachSecurityProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachSecurityProfileOutputError>
}

public struct DetachSecurityProfileInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachSecurityProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let securityProfileTargetArn = input.operationInput.securityProfileTargetArn {
            let securityProfileTargetArnQueryItem = ClientRuntime.URLQueryItem(name: "securityProfileTargetArn".urlPercentEncoding(), value: Swift.String(securityProfileTargetArn).urlPercentEncoding())
            input.builder.withQueryItem(securityProfileTargetArnQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachSecurityProfileOutputError>
}

public struct DetachSecurityProfileInput: Swift.Equatable {
    /// <p>The security profile that is detached.</p>
    public let securityProfileName: Swift.String?
    /// <p>The ARN of the thing group from which the security profile is detached.</p>
    public let securityProfileTargetArn: Swift.String?

    public init (
        securityProfileName: Swift.String? = nil,
        securityProfileTargetArn: Swift.String? = nil
    )
    {
        self.securityProfileName = securityProfileName
        self.securityProfileTargetArn = securityProfileTargetArn
    }
}

struct DetachSecurityProfileInputBody: Swift.Equatable {
}

extension DetachSecurityProfileInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DetachSecurityProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetachSecurityProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachSecurityProfileOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachSecurityProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachSecurityProfileOutputResponse()"}
}

extension DetachSecurityProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DetachSecurityProfileOutputResponse: Swift.Equatable {

    public init() {}
}

struct DetachSecurityProfileOutputResponseBody: Swift.Equatable {
}

extension DetachSecurityProfileOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DetachThingPrincipalInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachThingPrincipalInput(principal: \(Swift.String(describing: principal)), thingName: \(Swift.String(describing: thingName)))"}
}

extension DetachThingPrincipalInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DetachThingPrincipalInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachThingPrincipalInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachThingPrincipalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachThingPrincipalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let principal = input.operationInput.principal {
            input.builder.withHeader(name: "x-amzn-principal", value: Swift.String(principal))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachThingPrincipalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachThingPrincipalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachThingPrincipalOutputError>
}

public struct DetachThingPrincipalInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachThingPrincipalInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachThingPrincipalInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachThingPrincipalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachThingPrincipalInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachThingPrincipalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachThingPrincipalOutputError>
}

/// <p>The input for the DetachThingPrincipal operation.</p>
public struct DetachThingPrincipalInput: Swift.Equatable {
    /// <p>If the principal is a certificate, this value must be ARN of the certificate. If
    /// 			the principal is an Amazon Cognito identity, this value must be the ID of the Amazon
    /// 			Cognito identity.</p>
    public let principal: Swift.String?
    /// <p>The name of the thing.</p>
    public let thingName: Swift.String?

    public init (
        principal: Swift.String? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.principal = principal
        self.thingName = thingName
    }
}

struct DetachThingPrincipalInputBody: Swift.Equatable {
}

extension DetachThingPrincipalInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DetachThingPrincipalOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetachThingPrincipalOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachThingPrincipalOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachThingPrincipalOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachThingPrincipalOutputResponse()"}
}

extension DetachThingPrincipalOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The output from the DetachThingPrincipal operation.</p>
public struct DetachThingPrincipalOutputResponse: Swift.Equatable {

    public init() {}
}

struct DetachThingPrincipalOutputResponseBody: Swift.Equatable {
}

extension DetachThingPrincipalOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes.DetectMitigationActionExecution: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName
        case errorCode
        case executionEndDate
        case executionStartDate
        case message
        case status
        case taskId
        case thingName
        case violationId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let executionEndDate = executionEndDate {
            try encodeContainer.encode(executionEndDate.timeIntervalSince1970, forKey: .executionEndDate)
        }
        if let executionStartDate = executionStartDate {
            try encodeContainer.encode(executionStartDate.timeIntervalSince1970, forKey: .executionStartDate)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let thingName = thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
        if let violationId = violationId {
            try encodeContainer.encode(violationId, forKey: .violationId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let violationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .violationId)
        violationId = violationIdDecoded
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let executionStartDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .executionStartDate)
        executionStartDate = executionStartDateDecoded
        let executionEndDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .executionEndDate)
        executionEndDate = executionEndDateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.DetectMitigationActionExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes.DetectMitigationActionExecution: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectMitigationActionExecution(actionName: \(Swift.String(describing: actionName)), errorCode: \(Swift.String(describing: errorCode)), executionEndDate: \(Swift.String(describing: executionEndDate)), executionStartDate: \(Swift.String(describing: executionStartDate)), message: \(Swift.String(describing: message)), status: \(Swift.String(describing: status)), taskId: \(Swift.String(describing: taskId)), thingName: \(Swift.String(describing: thingName)), violationId: \(Swift.String(describing: violationId)))"}
}

extension IotClientTypes {
    /// <p>
    ///             Describes which mitigation actions should be executed.
    ///         </p>
    public struct DetectMitigationActionExecution: Swift.Equatable {
        /// <p>
        ///             The friendly name that uniquely identifies the mitigation action.
        ///         </p>
        public let actionName: Swift.String?
        /// <p>
        ///             The error code of a mitigation action.
        ///         </p>
        public let errorCode: Swift.String?
        /// <p>
        ///             The date a mitigation action ended.
        ///         </p>
        public let executionEndDate: ClientRuntime.Date?
        /// <p>
        ///             The date a mitigation action was started.
        ///         </p>
        public let executionStartDate: ClientRuntime.Date?
        /// <p>
        ///             The message of a mitigation action.
        ///         </p>
        public let message: Swift.String?
        /// <p>
        ///             The status of a mitigation action.
        ///         </p>
        public let status: IotClientTypes.DetectMitigationActionExecutionStatus?
        /// <p>
        ///             The unique identifier of the task.
        ///         </p>
        public let taskId: Swift.String?
        /// <p>
        ///             The name of the thing.
        ///         </p>
        public let thingName: Swift.String?
        /// <p>
        ///             The unique identifier of the violation.
        ///         </p>
        public let violationId: Swift.String?

        public init (
            actionName: Swift.String? = nil,
            errorCode: Swift.String? = nil,
            executionEndDate: ClientRuntime.Date? = nil,
            executionStartDate: ClientRuntime.Date? = nil,
            message: Swift.String? = nil,
            status: IotClientTypes.DetectMitigationActionExecutionStatus? = nil,
            taskId: Swift.String? = nil,
            thingName: Swift.String? = nil,
            violationId: Swift.String? = nil
        )
        {
            self.actionName = actionName
            self.errorCode = errorCode
            self.executionEndDate = executionEndDate
            self.executionStartDate = executionStartDate
            self.message = message
            self.status = status
            self.taskId = taskId
            self.thingName = thingName
            self.violationId = violationId
        }
    }

}

extension IotClientTypes {
    public enum DetectMitigationActionExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case skipped
        case successful
        case sdkUnknown(Swift.String)

        public static var allCases: [DetectMitigationActionExecutionStatus] {
            return [
                .failed,
                .inProgress,
                .skipped,
                .successful,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .skipped: return "SKIPPED"
            case .successful: return "SUCCESSFUL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DetectMitigationActionExecutionStatus(rawValue: rawValue) ?? DetectMitigationActionExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.DetectMitigationActionsTaskStatistics: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsExecuted
        case actionsFailed
        case actionsSkipped
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionsExecuted = actionsExecuted {
            try encodeContainer.encode(actionsExecuted, forKey: .actionsExecuted)
        }
        if let actionsFailed = actionsFailed {
            try encodeContainer.encode(actionsFailed, forKey: .actionsFailed)
        }
        if let actionsSkipped = actionsSkipped {
            try encodeContainer.encode(actionsSkipped, forKey: .actionsSkipped)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionsExecutedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .actionsExecuted)
        actionsExecuted = actionsExecutedDecoded
        let actionsSkippedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .actionsSkipped)
        actionsSkipped = actionsSkippedDecoded
        let actionsFailedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .actionsFailed)
        actionsFailed = actionsFailedDecoded
    }
}

extension IotClientTypes.DetectMitigationActionsTaskStatistics: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectMitigationActionsTaskStatistics(actionsExecuted: \(Swift.String(describing: actionsExecuted)), actionsFailed: \(Swift.String(describing: actionsFailed)), actionsSkipped: \(Swift.String(describing: actionsSkipped)))"}
}

extension IotClientTypes {
    /// <p>
    ///             The statistics of a mitigation action task.
    ///         </p>
    public struct DetectMitigationActionsTaskStatistics: Swift.Equatable {
        /// <p>
        ///             The actions that were performed.
        ///         </p>
        public let actionsExecuted: Swift.Int?
        /// <p>
        ///             The actions that failed.
        ///         </p>
        public let actionsFailed: Swift.Int?
        /// <p>
        ///             The actions that were skipped.
        ///         </p>
        public let actionsSkipped: Swift.Int?

        public init (
            actionsExecuted: Swift.Int? = nil,
            actionsFailed: Swift.Int? = nil,
            actionsSkipped: Swift.Int? = nil
        )
        {
            self.actionsExecuted = actionsExecuted
            self.actionsFailed = actionsFailed
            self.actionsSkipped = actionsSkipped
        }
    }

}

extension IotClientTypes {
    public enum DetectMitigationActionsTaskStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceled
        case failed
        case inProgress
        case successful
        case sdkUnknown(Swift.String)

        public static var allCases: [DetectMitigationActionsTaskStatus] {
            return [
                .canceled,
                .failed,
                .inProgress,
                .successful,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .successful: return "SUCCESSFUL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DetectMitigationActionsTaskStatus(rawValue: rawValue) ?? DetectMitigationActionsTaskStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.DetectMitigationActionsTaskSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsDefinition
        case onlyActiveViolationsIncluded
        case suppressedAlertsIncluded
        case target
        case taskEndTime
        case taskId
        case taskStartTime
        case taskStatistics
        case taskStatus
        case violationEventOccurrenceRange
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionsDefinition = actionsDefinition {
            var actionsDefinitionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actionsDefinition)
            for mitigationactionlist0 in actionsDefinition {
                try actionsDefinitionContainer.encode(mitigationactionlist0)
            }
        }
        if onlyActiveViolationsIncluded != false {
            try encodeContainer.encode(onlyActiveViolationsIncluded, forKey: .onlyActiveViolationsIncluded)
        }
        if suppressedAlertsIncluded != false {
            try encodeContainer.encode(suppressedAlertsIncluded, forKey: .suppressedAlertsIncluded)
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if let taskEndTime = taskEndTime {
            try encodeContainer.encode(taskEndTime.timeIntervalSince1970, forKey: .taskEndTime)
        }
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let taskStartTime = taskStartTime {
            try encodeContainer.encode(taskStartTime.timeIntervalSince1970, forKey: .taskStartTime)
        }
        if let taskStatistics = taskStatistics {
            try encodeContainer.encode(taskStatistics, forKey: .taskStatistics)
        }
        if let taskStatus = taskStatus {
            try encodeContainer.encode(taskStatus.rawValue, forKey: .taskStatus)
        }
        if let violationEventOccurrenceRange = violationEventOccurrenceRange {
            try encodeContainer.encode(violationEventOccurrenceRange, forKey: .violationEventOccurrenceRange)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let taskStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.DetectMitigationActionsTaskStatus.self, forKey: .taskStatus)
        taskStatus = taskStatusDecoded
        let taskStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .taskStartTime)
        taskStartTime = taskStartTimeDecoded
        let taskEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .taskEndTime)
        taskEndTime = taskEndTimeDecoded
        let targetDecoded = try containerValues.decodeIfPresent(IotClientTypes.DetectMitigationActionsTaskTarget.self, forKey: .target)
        target = targetDecoded
        let violationEventOccurrenceRangeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ViolationEventOccurrenceRange.self, forKey: .violationEventOccurrenceRange)
        violationEventOccurrenceRange = violationEventOccurrenceRangeDecoded
        let onlyActiveViolationsIncludedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .onlyActiveViolationsIncluded)
        onlyActiveViolationsIncluded = onlyActiveViolationsIncludedDecoded
        let suppressedAlertsIncludedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .suppressedAlertsIncluded)
        suppressedAlertsIncluded = suppressedAlertsIncludedDecoded
        let actionsDefinitionContainer = try containerValues.decodeIfPresent([IotClientTypes.MitigationAction?].self, forKey: .actionsDefinition)
        var actionsDefinitionDecoded0:[IotClientTypes.MitigationAction]? = nil
        if let actionsDefinitionContainer = actionsDefinitionContainer {
            actionsDefinitionDecoded0 = [IotClientTypes.MitigationAction]()
            for structure0 in actionsDefinitionContainer {
                if let structure0 = structure0 {
                    actionsDefinitionDecoded0?.append(structure0)
                }
            }
        }
        actionsDefinition = actionsDefinitionDecoded0
        let taskStatisticsDecoded = try containerValues.decodeIfPresent(IotClientTypes.DetectMitigationActionsTaskStatistics.self, forKey: .taskStatistics)
        taskStatistics = taskStatisticsDecoded
    }
}

extension IotClientTypes.DetectMitigationActionsTaskSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectMitigationActionsTaskSummary(actionsDefinition: \(Swift.String(describing: actionsDefinition)), onlyActiveViolationsIncluded: \(Swift.String(describing: onlyActiveViolationsIncluded)), suppressedAlertsIncluded: \(Swift.String(describing: suppressedAlertsIncluded)), target: \(Swift.String(describing: target)), taskEndTime: \(Swift.String(describing: taskEndTime)), taskId: \(Swift.String(describing: taskId)), taskStartTime: \(Swift.String(describing: taskStartTime)), taskStatistics: \(Swift.String(describing: taskStatistics)), taskStatus: \(Swift.String(describing: taskStatus)), violationEventOccurrenceRange: \(Swift.String(describing: violationEventOccurrenceRange)))"}
}

extension IotClientTypes {
    /// <p>
    ///             The summary of the mitigation action tasks.
    ///         </p>
    public struct DetectMitigationActionsTaskSummary: Swift.Equatable {
        /// <p>
        ///             The definition of the actions.
        ///         </p>
        public let actionsDefinition: [IotClientTypes.MitigationAction]?
        /// <p>
        ///             Includes only active violations.
        ///         </p>
        public let onlyActiveViolationsIncluded: Swift.Bool
        /// <p>
        ///             Includes suppressed alerts.
        ///         </p>
        public let suppressedAlertsIncluded: Swift.Bool
        /// <p>
        ///             Specifies the ML Detect findings to which the mitigation actions are applied.
        ///         </p>
        public let target: IotClientTypes.DetectMitigationActionsTaskTarget?
        /// <p>
        ///             The date the task ended.
        ///         </p>
        public let taskEndTime: ClientRuntime.Date?
        /// <p>
        ///             The unique identifier of the task.
        ///         </p>
        public let taskId: Swift.String?
        /// <p>
        ///             The date the task started.
        ///         </p>
        public let taskStartTime: ClientRuntime.Date?
        /// <p>
        ///             The statistics of a mitigation action task.
        ///         </p>
        public let taskStatistics: IotClientTypes.DetectMitigationActionsTaskStatistics?
        /// <p>
        ///             The status of the task.
        ///         </p>
        public let taskStatus: IotClientTypes.DetectMitigationActionsTaskStatus?
        /// <p>
        ///             Specifies the time period of which violation events occurred between.
        ///         </p>
        public let violationEventOccurrenceRange: IotClientTypes.ViolationEventOccurrenceRange?

        public init (
            actionsDefinition: [IotClientTypes.MitigationAction]? = nil,
            onlyActiveViolationsIncluded: Swift.Bool = false,
            suppressedAlertsIncluded: Swift.Bool = false,
            target: IotClientTypes.DetectMitigationActionsTaskTarget? = nil,
            taskEndTime: ClientRuntime.Date? = nil,
            taskId: Swift.String? = nil,
            taskStartTime: ClientRuntime.Date? = nil,
            taskStatistics: IotClientTypes.DetectMitigationActionsTaskStatistics? = nil,
            taskStatus: IotClientTypes.DetectMitigationActionsTaskStatus? = nil,
            violationEventOccurrenceRange: IotClientTypes.ViolationEventOccurrenceRange? = nil
        )
        {
            self.actionsDefinition = actionsDefinition
            self.onlyActiveViolationsIncluded = onlyActiveViolationsIncluded
            self.suppressedAlertsIncluded = suppressedAlertsIncluded
            self.target = target
            self.taskEndTime = taskEndTime
            self.taskId = taskId
            self.taskStartTime = taskStartTime
            self.taskStatistics = taskStatistics
            self.taskStatus = taskStatus
            self.violationEventOccurrenceRange = violationEventOccurrenceRange
        }
    }

}

extension IotClientTypes.DetectMitigationActionsTaskTarget: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviorName
        case securityProfileName
        case violationIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behaviorName = behaviorName {
            try encodeContainer.encode(behaviorName, forKey: .behaviorName)
        }
        if let securityProfileName = securityProfileName {
            try encodeContainer.encode(securityProfileName, forKey: .securityProfileName)
        }
        if let violationIds = violationIds {
            var violationIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .violationIds)
            for targetviolationidsfordetectmitigationactions0 in violationIds {
                try violationIdsContainer.encode(targetviolationidsfordetectmitigationactions0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let violationIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .violationIds)
        var violationIdsDecoded0:[Swift.String]? = nil
        if let violationIdsContainer = violationIdsContainer {
            violationIdsDecoded0 = [Swift.String]()
            for string0 in violationIdsContainer {
                if let string0 = string0 {
                    violationIdsDecoded0?.append(string0)
                }
            }
        }
        violationIds = violationIdsDecoded0
        let securityProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityProfileName)
        securityProfileName = securityProfileNameDecoded
        let behaviorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .behaviorName)
        behaviorName = behaviorNameDecoded
    }
}

extension IotClientTypes.DetectMitigationActionsTaskTarget: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectMitigationActionsTaskTarget(behaviorName: \(Swift.String(describing: behaviorName)), securityProfileName: \(Swift.String(describing: securityProfileName)), violationIds: \(Swift.String(describing: violationIds)))"}
}

extension IotClientTypes {
    /// <p>
    ///             The target of a mitigation action task.
    ///         </p>
    public struct DetectMitigationActionsTaskTarget: Swift.Equatable {
        /// <p>
        ///             The name of the behavior.
        ///         </p>
        public let behaviorName: Swift.String?
        /// <p>
        ///             The name of the security profile.
        ///         </p>
        public let securityProfileName: Swift.String?
        /// <p>
        ///             The unique identifiers of the violations.
        ///         </p>
        public let violationIds: [Swift.String]?

        public init (
            behaviorName: Swift.String? = nil,
            securityProfileName: Swift.String? = nil,
            violationIds: [Swift.String]? = nil
        )
        {
            self.behaviorName = behaviorName
            self.securityProfileName = securityProfileName
            self.violationIds = violationIds
        }
    }

}

extension IotClientTypes {
    public enum DeviceCertificateUpdateAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deactivate
        case sdkUnknown(Swift.String)

        public static var allCases: [DeviceCertificateUpdateAction] {
            return [
                .deactivate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deactivate: return "DEACTIVATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeviceCertificateUpdateAction(rawValue: rawValue) ?? DeviceCertificateUpdateAction.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes {
    public enum DimensionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case topicFilter
        case sdkUnknown(Swift.String)

        public static var allCases: [DimensionType] {
            return [
                .topicFilter,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .topicFilter: return "TOPIC_FILTER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DimensionType(rawValue: rawValue) ?? DimensionType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes {
    public enum DimensionValueOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `in`
        case notIn
        case sdkUnknown(Swift.String)

        public static var allCases: [DimensionValueOperator] {
            return [
                .in,
                .notIn,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .in: return "IN"
            case .notIn: return "NOT_IN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DimensionValueOperator(rawValue: rawValue) ?? DimensionValueOperator.sdkUnknown(rawValue)
        }
    }
}

extension DisableTopicRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableTopicRuleInput(ruleName: \(Swift.String(describing: ruleName)))"}
}

extension DisableTopicRuleInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DisableTopicRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableTopicRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableTopicRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableTopicRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableTopicRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableTopicRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableTopicRuleOutputError>
}

public struct DisableTopicRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableTopicRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableTopicRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableTopicRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableTopicRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableTopicRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableTopicRuleOutputError>
}

/// <p>The input for the DisableTopicRuleRequest operation.</p>
public struct DisableTopicRuleInput: Swift.Equatable {
    /// <p>The name of the rule to disable.</p>
    public let ruleName: Swift.String?

    public init (
        ruleName: Swift.String? = nil
    )
    {
        self.ruleName = ruleName
    }
}

struct DisableTopicRuleInputBody: Swift.Equatable {
}

extension DisableTopicRuleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisableTopicRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableTopicRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingResourceUpdateException" : self = .conflictingResourceUpdateException(try ConflictingResourceUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableTopicRuleOutputError: Swift.Error, Swift.Equatable {
    case conflictingResourceUpdateException(ConflictingResourceUpdateException)
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableTopicRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableTopicRuleOutputResponse()"}
}

extension DisableTopicRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableTopicRuleOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisableTopicRuleOutputResponseBody: Swift.Equatable {
}

extension DisableTopicRuleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes {
    public enum DomainConfigurationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DomainConfigurationStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DomainConfigurationStatus(rawValue: rawValue) ?? DomainConfigurationStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.DomainConfigurationSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainConfigurationArn
        case domainConfigurationName
        case serviceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainConfigurationArn = domainConfigurationArn {
            try encodeContainer.encode(domainConfigurationArn, forKey: .domainConfigurationArn)
        }
        if let domainConfigurationName = domainConfigurationName {
            try encodeContainer.encode(domainConfigurationName, forKey: .domainConfigurationName)
        }
        if let serviceType = serviceType {
            try encodeContainer.encode(serviceType.rawValue, forKey: .serviceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainConfigurationName)
        domainConfigurationName = domainConfigurationNameDecoded
        let domainConfigurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainConfigurationArn)
        domainConfigurationArn = domainConfigurationArnDecoded
        let serviceTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ServiceType.self, forKey: .serviceType)
        serviceType = serviceTypeDecoded
    }
}

extension IotClientTypes.DomainConfigurationSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainConfigurationSummary(domainConfigurationArn: \(Swift.String(describing: domainConfigurationArn)), domainConfigurationName: \(Swift.String(describing: domainConfigurationName)), serviceType: \(Swift.String(describing: serviceType)))"}
}

extension IotClientTypes {
    /// <p>The summary of a domain configuration. A domain configuration specifies custom IoT-specific information about a domain.
    ///          A domain configuration can be associated with an AWS-managed domain
    ///          (for example, dbc123defghijk.iot.us-west-2.amazonaws.com), a customer managed domain, or a default endpoint.</p>
    ///          <ul>
    ///             <li>
    ///                <p>Data</p>
    ///             </li>
    ///             <li>
    ///                <p>Jobs</p>
    ///             </li>
    ///             <li>
    ///                <p>CredentialProvider</p>
    ///             </li>
    ///          </ul>
    public struct DomainConfigurationSummary: Swift.Equatable {
        /// <p>The ARN of the domain configuration.</p>
        public let domainConfigurationArn: Swift.String?
        /// <p>The name of the domain configuration. This value must be unique to a region.</p>
        public let domainConfigurationName: Swift.String?
        /// <p>The type of service delivered by the endpoint.</p>
        public let serviceType: IotClientTypes.ServiceType?

        public init (
            domainConfigurationArn: Swift.String? = nil,
            domainConfigurationName: Swift.String? = nil,
            serviceType: IotClientTypes.ServiceType? = nil
        )
        {
            self.domainConfigurationArn = domainConfigurationArn
            self.domainConfigurationName = domainConfigurationName
            self.serviceType = serviceType
        }
    }

}

extension IotClientTypes {
    public enum DomainType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsManaged
        case customerManaged
        case endpoint
        case sdkUnknown(Swift.String)

        public static var allCases: [DomainType] {
            return [
                .awsManaged,
                .customerManaged,
                .endpoint,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsManaged: return "AWS_MANAGED"
            case .customerManaged: return "CUSTOMER_MANAGED"
            case .endpoint: return "ENDPOINT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DomainType(rawValue: rawValue) ?? DomainType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes {
    public enum DynamicGroupStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case building
        case rebuilding
        case sdkUnknown(Swift.String)

        public static var allCases: [DynamicGroupStatus] {
            return [
                .active,
                .building,
                .rebuilding,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .building: return "BUILDING"
            case .rebuilding: return "REBUILDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DynamicGroupStatus(rawValue: rawValue) ?? DynamicGroupStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.DynamoDBAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hashKeyField
        case hashKeyType
        case hashKeyValue
        case operation
        case payloadField
        case rangeKeyField
        case rangeKeyType
        case rangeKeyValue
        case roleArn
        case tableName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hashKeyField = hashKeyField {
            try encodeContainer.encode(hashKeyField, forKey: .hashKeyField)
        }
        if let hashKeyType = hashKeyType {
            try encodeContainer.encode(hashKeyType.rawValue, forKey: .hashKeyType)
        }
        if let hashKeyValue = hashKeyValue {
            try encodeContainer.encode(hashKeyValue, forKey: .hashKeyValue)
        }
        if let operation = operation {
            try encodeContainer.encode(operation, forKey: .operation)
        }
        if let payloadField = payloadField {
            try encodeContainer.encode(payloadField, forKey: .payloadField)
        }
        if let rangeKeyField = rangeKeyField {
            try encodeContainer.encode(rangeKeyField, forKey: .rangeKeyField)
        }
        if let rangeKeyType = rangeKeyType {
            try encodeContainer.encode(rangeKeyType.rawValue, forKey: .rangeKeyType)
        }
        if let rangeKeyValue = rangeKeyValue {
            try encodeContainer.encode(rangeKeyValue, forKey: .rangeKeyValue)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let operationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operation)
        operation = operationDecoded
        let hashKeyFieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hashKeyField)
        hashKeyField = hashKeyFieldDecoded
        let hashKeyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hashKeyValue)
        hashKeyValue = hashKeyValueDecoded
        let hashKeyTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.DynamoKeyType.self, forKey: .hashKeyType)
        hashKeyType = hashKeyTypeDecoded
        let rangeKeyFieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rangeKeyField)
        rangeKeyField = rangeKeyFieldDecoded
        let rangeKeyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rangeKeyValue)
        rangeKeyValue = rangeKeyValueDecoded
        let rangeKeyTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.DynamoKeyType.self, forKey: .rangeKeyType)
        rangeKeyType = rangeKeyTypeDecoded
        let payloadFieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .payloadField)
        payloadField = payloadFieldDecoded
    }
}

extension IotClientTypes.DynamoDBAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DynamoDBAction(hashKeyField: \(Swift.String(describing: hashKeyField)), hashKeyType: \(Swift.String(describing: hashKeyType)), hashKeyValue: \(Swift.String(describing: hashKeyValue)), operation: \(Swift.String(describing: operation)), payloadField: \(Swift.String(describing: payloadField)), rangeKeyField: \(Swift.String(describing: rangeKeyField)), rangeKeyType: \(Swift.String(describing: rangeKeyType)), rangeKeyValue: \(Swift.String(describing: rangeKeyValue)), roleArn: \(Swift.String(describing: roleArn)), tableName: \(Swift.String(describing: tableName)))"}
}

extension IotClientTypes {
    /// <p>Describes an action to write to a DynamoDB table.</p>
    ///          <p>The <code>tableName</code>, <code>hashKeyField</code>, and <code>rangeKeyField</code>
    ///          values must match the values used when you created the table.</p>
    ///          <p>The <code>hashKeyValue</code> and <code>rangeKeyvalue</code> fields use a
    ///          substitution template syntax. These templates provide data at runtime. The syntax is as
    ///          follows: ${<i>sql-expression</i>}.</p>
    ///          <p>You can specify any valid expression in a WHERE or SELECT clause, including JSON
    ///          properties, comparisons, calculations, and functions. For example, the following field uses
    ///          the third level of the topic:</p>
    ///          <p>
    ///             <code>"hashKeyValue": "${topic(3)}"</code>
    ///          </p>
    ///          <p>The following field uses the timestamp:</p>
    ///          <p>
    ///             <code>"rangeKeyValue": "${timestamp()}"</code>
    ///          </p>
    public struct DynamoDBAction: Swift.Equatable {
        /// <p>The hash key name.</p>
        public let hashKeyField: Swift.String?
        /// <p>The hash key type. Valid values are "STRING" or "NUMBER"</p>
        public let hashKeyType: IotClientTypes.DynamoKeyType?
        /// <p>The hash key value.</p>
        public let hashKeyValue: Swift.String?
        /// <p>The type of operation to be performed. This follows the substitution template, so it
        ///          can be <code>${operation}</code>, but the substitution must result in one of the following:
        ///             <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>.</p>
        public let operation: Swift.String?
        /// <p>The action payload. This name can be customized.</p>
        public let payloadField: Swift.String?
        /// <p>The range key name.</p>
        public let rangeKeyField: Swift.String?
        /// <p>The range key type. Valid values are "STRING" or "NUMBER"</p>
        public let rangeKeyType: IotClientTypes.DynamoKeyType?
        /// <p>The range key value.</p>
        public let rangeKeyValue: Swift.String?
        /// <p>The ARN of the IAM role that grants access to the DynamoDB table.</p>
        public let roleArn: Swift.String?
        /// <p>The name of the DynamoDB table.</p>
        public let tableName: Swift.String?

        public init (
            hashKeyField: Swift.String? = nil,
            hashKeyType: IotClientTypes.DynamoKeyType? = nil,
            hashKeyValue: Swift.String? = nil,
            operation: Swift.String? = nil,
            payloadField: Swift.String? = nil,
            rangeKeyField: Swift.String? = nil,
            rangeKeyType: IotClientTypes.DynamoKeyType? = nil,
            rangeKeyValue: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.hashKeyField = hashKeyField
            self.hashKeyType = hashKeyType
            self.hashKeyValue = hashKeyValue
            self.operation = operation
            self.payloadField = payloadField
            self.rangeKeyField = rangeKeyField
            self.rangeKeyType = rangeKeyType
            self.rangeKeyValue = rangeKeyValue
            self.roleArn = roleArn
            self.tableName = tableName
        }
    }

}

extension IotClientTypes.DynamoDBv2Action: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case putItem
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let putItem = putItem {
            try encodeContainer.encode(putItem, forKey: .putItem)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let putItemDecoded = try containerValues.decodeIfPresent(IotClientTypes.PutItemInput.self, forKey: .putItem)
        putItem = putItemDecoded
    }
}

extension IotClientTypes.DynamoDBv2Action: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DynamoDBv2Action(putItem: \(Swift.String(describing: putItem)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension IotClientTypes {
    /// <p>Describes an action to write to a DynamoDB table.</p>
    ///          <p>This DynamoDB action writes each attribute in the message payload into it's own
    ///          column in the DynamoDB table.</p>
    public struct DynamoDBv2Action: Swift.Equatable {
        /// <p>Specifies the DynamoDB table to which the message data will be written. For
        ///          example:</p>
        ///          <p>
        ///             <code>{ "dynamoDBv2": { "roleArn": "aws:iam:12341251:my-role" "putItem": { "tableName":
        ///             "my-table" } } }</code>
        ///          </p>
        ///          <p>Each attribute in the message payload will be written to a separate column in the
        ///          DynamoDB database.</p>
        public let putItem: IotClientTypes.PutItemInput?
        /// <p>The ARN of the IAM role that grants access to the DynamoDB table.</p>
        public let roleArn: Swift.String?

        public init (
            putItem: IotClientTypes.PutItemInput? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.putItem = putItem
            self.roleArn = roleArn
        }
    }

}

extension IotClientTypes {
    public enum DynamoKeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case number
        case string
        case sdkUnknown(Swift.String)

        public static var allCases: [DynamoKeyType] {
            return [
                .number,
                .string,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .number: return "NUMBER"
            case .string: return "STRING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DynamoKeyType(rawValue: rawValue) ?? DynamoKeyType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.EffectivePolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyArn
        case policyDocument
        case policyName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyArn = policyArn {
            try encodeContainer.encode(policyArn, forKey: .policyArn)
        }
        if let policyDocument = policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
    }
}

extension IotClientTypes.EffectivePolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EffectivePolicy(policyArn: \(Swift.String(describing: policyArn)), policyDocument: \(Swift.String(describing: policyDocument)), policyName: \(Swift.String(describing: policyName)))"}
}

extension IotClientTypes {
    /// <p>The policy that has the effect on the authorization results.</p>
    public struct EffectivePolicy: Swift.Equatable {
        /// <p>The policy ARN.</p>
        public let policyArn: Swift.String?
        /// <p>The IAM policy document.</p>
        public let policyDocument: Swift.String?
        /// <p>The policy name.</p>
        public let policyName: Swift.String?

        public init (
            policyArn: Swift.String? = nil,
            policyDocument: Swift.String? = nil,
            policyName: Swift.String? = nil
        )
        {
            self.policyArn = policyArn
            self.policyDocument = policyDocument
            self.policyName = policyName
        }
    }

}

extension IotClientTypes.ElasticsearchAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpoint
        case id
        case index
        case roleArn
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpoint = endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let index = index {
            try encodeContainer.encode(index, forKey: .index)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let indexDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .index)
        index = indexDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension IotClientTypes.ElasticsearchAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ElasticsearchAction(endpoint: \(Swift.String(describing: endpoint)), id: \(Swift.String(describing: id)), index: \(Swift.String(describing: index)), roleArn: \(Swift.String(describing: roleArn)), type: \(Swift.String(describing: type)))"}
}

extension IotClientTypes {
    /// <p>Describes an action that writes data to an Amazon Elasticsearch Service
    ///          domain.</p>
    public struct ElasticsearchAction: Swift.Equatable {
        /// <p>The endpoint of your Elasticsearch domain.</p>
        public let endpoint: Swift.String?
        /// <p>The unique identifier for the document you are storing.</p>
        public let id: Swift.String?
        /// <p>The Elasticsearch index where you want to store your data.</p>
        public let index: Swift.String?
        /// <p>The IAM role ARN that has access to Elasticsearch.</p>
        public let roleArn: Swift.String?
        /// <p>The type of document you are storing.</p>
        public let type: Swift.String?

        public init (
            endpoint: Swift.String? = nil,
            id: Swift.String? = nil,
            index: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.endpoint = endpoint
            self.id = id
            self.index = index
            self.roleArn = roleArn
            self.type = type
        }
    }

}

extension IotClientTypes.EnableIoTLoggingParams: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logLevel
        case roleArnForLogging
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logLevel = logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let roleArnForLogging = roleArnForLogging {
            try encodeContainer.encode(roleArnForLogging, forKey: .roleArnForLogging)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnForLoggingDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArnForLogging)
        roleArnForLogging = roleArnForLoggingDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(IotClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
    }
}

extension IotClientTypes.EnableIoTLoggingParams: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableIoTLoggingParams(logLevel: \(Swift.String(describing: logLevel)), roleArnForLogging: \(Swift.String(describing: roleArnForLogging)))"}
}

extension IotClientTypes {
    /// <p>Parameters used when defining a mitigation action that enable AWS IoT logging.</p>
    public struct EnableIoTLoggingParams: Swift.Equatable {
        /// <p>Specifies the type of information to be logged.</p>
        public let logLevel: IotClientTypes.LogLevel?
        /// <p>The Amazon Resource Name (ARN) of the IAM role used for logging.</p>
        public let roleArnForLogging: Swift.String?

        public init (
            logLevel: IotClientTypes.LogLevel? = nil,
            roleArnForLogging: Swift.String? = nil
        )
        {
            self.logLevel = logLevel
            self.roleArnForLogging = roleArnForLogging
        }
    }

}

extension EnableTopicRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableTopicRuleInput(ruleName: \(Swift.String(describing: ruleName)))"}
}

extension EnableTopicRuleInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct EnableTopicRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableTopicRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableTopicRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableTopicRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableTopicRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableTopicRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableTopicRuleOutputError>
}

public struct EnableTopicRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableTopicRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableTopicRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableTopicRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableTopicRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableTopicRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableTopicRuleOutputError>
}

/// <p>The input for the EnableTopicRuleRequest operation.</p>
public struct EnableTopicRuleInput: Swift.Equatable {
    /// <p>The name of the topic rule to enable.</p>
    public let ruleName: Swift.String?

    public init (
        ruleName: Swift.String? = nil
    )
    {
        self.ruleName = ruleName
    }
}

struct EnableTopicRuleInputBody: Swift.Equatable {
}

extension EnableTopicRuleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension EnableTopicRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableTopicRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingResourceUpdateException" : self = .conflictingResourceUpdateException(try ConflictingResourceUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableTopicRuleOutputError: Swift.Error, Swift.Equatable {
    case conflictingResourceUpdateException(ConflictingResourceUpdateException)
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableTopicRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableTopicRuleOutputResponse()"}
}

extension EnableTopicRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableTopicRuleOutputResponse: Swift.Equatable {

    public init() {}
}

struct EnableTopicRuleOutputResponseBody: Swift.Equatable {
}

extension EnableTopicRuleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes.ErrorInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes.ErrorInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ErrorInfo(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension IotClientTypes {
    /// <p>Error information.</p>
    public struct ErrorInfo: Swift.Equatable {
        /// <p>The error code.</p>
        public let code: Swift.String?
        /// <p>The error message.</p>
        public let message: Swift.String?

        public init (
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension IotClientTypes {
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case caCertificate
        case certificate
        case job
        case jobExecution
        case policy
        case thing
        case thingGroup
        case thingGroupHierarchy
        case thingGroupMembership
        case thingType
        case thingTypeAssociation
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .caCertificate,
                .certificate,
                .job,
                .jobExecution,
                .policy,
                .thing,
                .thingGroup,
                .thingGroupHierarchy,
                .thingGroupMembership,
                .thingType,
                .thingTypeAssociation,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .caCertificate: return "CA_CERTIFICATE"
            case .certificate: return "CERTIFICATE"
            case .job: return "JOB"
            case .jobExecution: return "JOB_EXECUTION"
            case .policy: return "POLICY"
            case .thing: return "THING"
            case .thingGroup: return "THING_GROUP"
            case .thingGroupHierarchy: return "THING_GROUP_HIERARCHY"
            case .thingGroupMembership: return "THING_GROUP_MEMBERSHIP"
            case .thingType: return "THING_TYPE"
            case .thingTypeAssociation: return "THING_TYPE_ASSOCIATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.ExplicitDeny: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policies
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policies = policies {
            var policiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policies)
            for policies0 in policies {
                try policiesContainer.encode(policies0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policiesContainer = try containerValues.decodeIfPresent([IotClientTypes.Policy?].self, forKey: .policies)
        var policiesDecoded0:[IotClientTypes.Policy]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [IotClientTypes.Policy]()
            for structure0 in policiesContainer {
                if let structure0 = structure0 {
                    policiesDecoded0?.append(structure0)
                }
            }
        }
        policies = policiesDecoded0
    }
}

extension IotClientTypes.ExplicitDeny: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExplicitDeny(policies: \(Swift.String(describing: policies)))"}
}

extension IotClientTypes {
    /// <p>Information that explicitly denies authorization.</p>
    public struct ExplicitDeny: Swift.Equatable {
        /// <p>The policies that denied the authorization.</p>
        public let policies: [IotClientTypes.Policy]?

        public init (
            policies: [IotClientTypes.Policy]? = nil
        )
        {
            self.policies = policies
        }
    }

}

extension IotClientTypes.ExponentialRolloutRate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseRatePerMinute
        case incrementFactor
        case rateIncreaseCriteria
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseRatePerMinute = baseRatePerMinute {
            try encodeContainer.encode(baseRatePerMinute, forKey: .baseRatePerMinute)
        }
        if incrementFactor != 0.0 {
            try encodeContainer.encode(incrementFactor, forKey: .incrementFactor)
        }
        if let rateIncreaseCriteria = rateIncreaseCriteria {
            try encodeContainer.encode(rateIncreaseCriteria, forKey: .rateIncreaseCriteria)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baseRatePerMinuteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .baseRatePerMinute)
        baseRatePerMinute = baseRatePerMinuteDecoded
        let incrementFactorDecoded = try containerValues.decode(Swift.Double.self, forKey: .incrementFactor)
        incrementFactor = incrementFactorDecoded
        let rateIncreaseCriteriaDecoded = try containerValues.decodeIfPresent(IotClientTypes.RateIncreaseCriteria.self, forKey: .rateIncreaseCriteria)
        rateIncreaseCriteria = rateIncreaseCriteriaDecoded
    }
}

extension IotClientTypes.ExponentialRolloutRate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExponentialRolloutRate(baseRatePerMinute: \(Swift.String(describing: baseRatePerMinute)), incrementFactor: \(Swift.String(describing: incrementFactor)), rateIncreaseCriteria: \(Swift.String(describing: rateIncreaseCriteria)))"}
}

extension IotClientTypes {
    /// <p>Allows you to create an exponential rate of rollout for a job.</p>
    public struct ExponentialRolloutRate: Swift.Equatable {
        /// <p>The minimum number of things that will be notified of a pending job, per minute at the start of job rollout.
        ///             This parameter allows you to define the initial rate of rollout.</p>
        public let baseRatePerMinute: Swift.Int?
        /// <p>The exponential factor to increase the rate of rollout for a job.</p>
        ///         <p>AWS IoT supports up to one digit after the decimal (for example, 1.5, but not 1.55).</p>
        public let incrementFactor: Swift.Double
        /// <p>The criteria to initiate the increase in rate of rollout for a job.</p>
        public let rateIncreaseCriteria: IotClientTypes.RateIncreaseCriteria?

        public init (
            baseRatePerMinute: Swift.Int? = nil,
            incrementFactor: Swift.Double = 0.0,
            rateIncreaseCriteria: IotClientTypes.RateIncreaseCriteria? = nil
        )
        {
            self.baseRatePerMinute = baseRatePerMinute
            self.incrementFactor = incrementFactor
            self.rateIncreaseCriteria = rateIncreaseCriteria
        }
    }

}

extension IotClientTypes.Field: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(IotClientTypes.FieldType.self, forKey: .type)
        type = typeDecoded
    }
}

extension IotClientTypes.Field: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Field(name: \(Swift.String(describing: name)), type: \(Swift.String(describing: type)))"}
}

extension IotClientTypes {
    /// <p>Describes the name and data type at a field.</p>
    public struct Field: Swift.Equatable {
        /// <p>The name of the field.</p>
        public let name: Swift.String?
        /// <p>The datatype of the field.</p>
        public let type: IotClientTypes.FieldType?

        public init (
            name: Swift.String? = nil,
            type: IotClientTypes.FieldType? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }

}

extension IotClientTypes {
    public enum FieldType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case boolean
        case number
        case string
        case sdkUnknown(Swift.String)

        public static var allCases: [FieldType] {
            return [
                .boolean,
                .number,
                .string,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .boolean: return "Boolean"
            case .number: return "Number"
            case .string: return "String"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FieldType(rawValue: rawValue) ?? FieldType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.FileLocation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Location
        case stream
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Location = s3Location {
            try encodeContainer.encode(s3Location, forKey: .s3Location)
        }
        if let stream = stream {
            try encodeContainer.encode(stream, forKey: .stream)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamDecoded = try containerValues.decodeIfPresent(IotClientTypes.Stream.self, forKey: .stream)
        stream = streamDecoded
        let s3LocationDecoded = try containerValues.decodeIfPresent(IotClientTypes.S3Location.self, forKey: .s3Location)
        s3Location = s3LocationDecoded
    }
}

extension IotClientTypes.FileLocation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FileLocation(s3Location: \(Swift.String(describing: s3Location)), stream: \(Swift.String(describing: stream)))"}
}

extension IotClientTypes {
    /// <p>The location of the OTA update.</p>
    public struct FileLocation: Swift.Equatable {
        /// <p>The location of the updated firmware in S3.</p>
        public let s3Location: IotClientTypes.S3Location?
        /// <p>The stream that contains the OTA update.</p>
        public let stream: IotClientTypes.Stream?

        public init (
            s3Location: IotClientTypes.S3Location? = nil,
            stream: IotClientTypes.Stream? = nil
        )
        {
            self.s3Location = s3Location
            self.stream = stream
        }
    }

}

extension IotClientTypes.FirehoseAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchMode
        case deliveryStreamName
        case roleArn
        case separator
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchMode = batchMode {
            try encodeContainer.encode(batchMode, forKey: .batchMode)
        }
        if let deliveryStreamName = deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let separator = separator {
            try encodeContainer.encode(separator, forKey: .separator)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let separatorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .separator)
        separator = separatorDecoded
        let batchModeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .batchMode)
        batchMode = batchModeDecoded
    }
}

extension IotClientTypes.FirehoseAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FirehoseAction(batchMode: \(Swift.String(describing: batchMode)), deliveryStreamName: \(Swift.String(describing: deliveryStreamName)), roleArn: \(Swift.String(describing: roleArn)), separator: \(Swift.String(describing: separator)))"}
}

extension IotClientTypes {
    /// <p>Describes an action that writes data to an Amazon Kinesis Firehose stream.</p>
    public struct FirehoseAction: Swift.Equatable {
        /// <p>Whether to deliver the Kinesis Data Firehose stream as a batch by using <a href="https://docs.aws.amazon.com/firehose/latest/APIReference/API_PutRecordBatch.html">
        ///                <code>PutRecordBatch</code>
        ///             </a>.  The default value is
        ///          <code>false</code>.</p>
        ///          <p>When <code>batchMode</code> is <code>true</code> and the rule's SQL statement
        ///          evaluates to an Array, each Array element forms one record in the <a href="https://docs.aws.amazon.com/firehose/latest/APIReference/API_PutRecordBatch.html">
        ///                <code>PutRecordBatch</code>
        ///             </a> request. The resulting array can't have more
        ///          than 500 records.</p>
        public let batchMode: Swift.Bool?
        /// <p>The delivery stream name.</p>
        public let deliveryStreamName: Swift.String?
        /// <p>The IAM role that grants access to the Amazon Kinesis Firehose stream.</p>
        public let roleArn: Swift.String?
        /// <p>A character separator that will be used to separate records written to the Firehose
        ///          stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ','
        ///          (comma).</p>
        public let separator: Swift.String?

        public init (
            batchMode: Swift.Bool? = nil,
            deliveryStreamName: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            separator: Swift.String? = nil
        )
        {
            self.batchMode = batchMode
            self.deliveryStreamName = deliveryStreamName
            self.roleArn = roleArn
            self.separator = separator
        }
    }

}

extension GetBehaviorModelTrainingSummariesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBehaviorModelTrainingSummariesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), securityProfileName: \(Swift.String(describing: securityProfileName)))"}
}

extension GetBehaviorModelTrainingSummariesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBehaviorModelTrainingSummariesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBehaviorModelTrainingSummariesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBehaviorModelTrainingSummariesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBehaviorModelTrainingSummariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBehaviorModelTrainingSummariesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBehaviorModelTrainingSummariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBehaviorModelTrainingSummariesOutputError>
}

public struct GetBehaviorModelTrainingSummariesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBehaviorModelTrainingSummariesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBehaviorModelTrainingSummariesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBehaviorModelTrainingSummariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let securityProfileName = input.operationInput.securityProfileName {
            let securityProfileNameQueryItem = ClientRuntime.URLQueryItem(name: "securityProfileName".urlPercentEncoding(), value: Swift.String(securityProfileName).urlPercentEncoding())
            input.builder.withQueryItem(securityProfileNameQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBehaviorModelTrainingSummariesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBehaviorModelTrainingSummariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBehaviorModelTrainingSummariesOutputError>
}

public struct GetBehaviorModelTrainingSummariesInput: Swift.Equatable {
    /// <p>
    ///       The maximum number of results to return at one time. The default is 25.
    ///     </p>
    public let maxResults: Swift.Int?
    /// <p>
    ///       The token for the next set of results.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>
    ///       The name of the security profile.
    ///     </p>
    public let securityProfileName: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        securityProfileName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.securityProfileName = securityProfileName
    }
}

struct GetBehaviorModelTrainingSummariesInputBody: Swift.Equatable {
}

extension GetBehaviorModelTrainingSummariesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBehaviorModelTrainingSummariesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBehaviorModelTrainingSummariesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBehaviorModelTrainingSummariesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBehaviorModelTrainingSummariesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBehaviorModelTrainingSummariesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), summaries: \(Swift.String(describing: summaries)))"}
}

extension GetBehaviorModelTrainingSummariesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBehaviorModelTrainingSummariesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaries = output.summaries
        } else {
            self.nextToken = nil
            self.summaries = nil
        }
    }
}

public struct GetBehaviorModelTrainingSummariesOutputResponse: Swift.Equatable {
    /// <p>
    ///       A token that can be used to retrieve the next set of results, or <code>null</code> if there are no additional results.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>
    ///       A list of all ML Detect behaviors and their model status for a given Security Profile.
    ///     </p>
    public let summaries: [IotClientTypes.BehaviorModelTrainingSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaries: [IotClientTypes.BehaviorModelTrainingSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

struct GetBehaviorModelTrainingSummariesOutputResponseBody: Swift.Equatable {
    public let summaries: [IotClientTypes.BehaviorModelTrainingSummary]?
    public let nextToken: Swift.String?
}

extension GetBehaviorModelTrainingSummariesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case summaries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summariesContainer = try containerValues.decodeIfPresent([IotClientTypes.BehaviorModelTrainingSummary?].self, forKey: .summaries)
        var summariesDecoded0:[IotClientTypes.BehaviorModelTrainingSummary]? = nil
        if let summariesContainer = summariesContainer {
            summariesDecoded0 = [IotClientTypes.BehaviorModelTrainingSummary]()
            for structure0 in summariesContainer {
                if let structure0 = structure0 {
                    summariesDecoded0?.append(structure0)
                }
            }
        }
        summaries = summariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct GetCardinalityInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCardinalityInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCardinalityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCardinalityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCardinalityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCardinalityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCardinalityOutputError>
}

extension GetCardinalityInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCardinalityInput(aggregationField: \(Swift.String(describing: aggregationField)), indexName: \(Swift.String(describing: indexName)), queryString: \(Swift.String(describing: queryString)), queryVersion: \(Swift.String(describing: queryVersion)))"}
}

extension GetCardinalityInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregationField
        case indexName
        case queryString
        case queryVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggregationField = aggregationField {
            try encodeContainer.encode(aggregationField, forKey: .aggregationField)
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let queryVersion = queryVersion {
            try encodeContainer.encode(queryVersion, forKey: .queryVersion)
        }
    }
}

public struct GetCardinalityInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCardinalityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCardinalityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCardinalityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCardinalityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCardinalityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCardinalityOutputError>
}

public struct GetCardinalityInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCardinalityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCardinalityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCardinalityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCardinalityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCardinalityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCardinalityOutputError>
}

public struct GetCardinalityInput: Swift.Equatable {
    /// <p>The field to aggregate.</p>
    public let aggregationField: Swift.String?
    /// <p>The name of the index to search.</p>
    public let indexName: Swift.String?
    /// <p>The search query.</p>
    public let queryString: Swift.String?
    /// <p>The query version.</p>
    public let queryVersion: Swift.String?

    public init (
        aggregationField: Swift.String? = nil,
        indexName: Swift.String? = nil,
        queryString: Swift.String? = nil,
        queryVersion: Swift.String? = nil
    )
    {
        self.aggregationField = aggregationField
        self.indexName = indexName
        self.queryString = queryString
        self.queryVersion = queryVersion
    }
}

struct GetCardinalityInputBody: Swift.Equatable {
    public let indexName: Swift.String?
    public let queryString: Swift.String?
    public let aggregationField: Swift.String?
    public let queryVersion: Swift.String?
}

extension GetCardinalityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregationField
        case indexName
        case queryString
        case queryVersion
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let aggregationFieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aggregationField)
        aggregationField = aggregationFieldDecoded
        let queryVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryVersion)
        queryVersion = queryVersionDecoded
    }
}

extension GetCardinalityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCardinalityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IndexNotReadyException" : self = .indexNotReadyException(try IndexNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAggregationException" : self = .invalidAggregationException(try InvalidAggregationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidQueryException" : self = .invalidQueryException(try InvalidQueryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCardinalityOutputError: Swift.Error, Swift.Equatable {
    case indexNotReadyException(IndexNotReadyException)
    case internalFailureException(InternalFailureException)
    case invalidAggregationException(InvalidAggregationException)
    case invalidQueryException(InvalidQueryException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCardinalityOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCardinalityOutputResponse(cardinality: \(Swift.String(describing: cardinality)))"}
}

extension GetCardinalityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCardinalityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cardinality = output.cardinality
        } else {
            self.cardinality = 0
        }
    }
}

public struct GetCardinalityOutputResponse: Swift.Equatable {
    /// <p>The approximate count of unique values that match the query.</p>
    public let cardinality: Swift.Int

    public init (
        cardinality: Swift.Int = 0
    )
    {
        self.cardinality = cardinality
    }
}

struct GetCardinalityOutputResponseBody: Swift.Equatable {
    public let cardinality: Swift.Int
}

extension GetCardinalityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cardinality
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cardinalityDecoded = try containerValues.decode(Swift.Int.self, forKey: .cardinality)
        cardinality = cardinalityDecoded
    }
}

public struct GetEffectivePoliciesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEffectivePoliciesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEffectivePoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEffectivePoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEffectivePoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEffectivePoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEffectivePoliciesOutputError>
}

extension GetEffectivePoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEffectivePoliciesInput(cognitoIdentityPoolId: \(Swift.String(describing: cognitoIdentityPoolId)), principal: \(Swift.String(describing: principal)), thingName: \(Swift.String(describing: thingName)))"}
}

extension GetEffectivePoliciesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cognitoIdentityPoolId
        case principal
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cognitoIdentityPoolId = cognitoIdentityPoolId {
            try encodeContainer.encode(cognitoIdentityPoolId, forKey: .cognitoIdentityPoolId)
        }
        if let principal = principal {
            try encodeContainer.encode(principal, forKey: .principal)
        }
    }
}

public struct GetEffectivePoliciesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEffectivePoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEffectivePoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEffectivePoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEffectivePoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEffectivePoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEffectivePoliciesOutputError>
}

public struct GetEffectivePoliciesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEffectivePoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEffectivePoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEffectivePoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let thingName = input.operationInput.thingName {
            let thingNameQueryItem = ClientRuntime.URLQueryItem(name: "thingName".urlPercentEncoding(), value: Swift.String(thingName).urlPercentEncoding())
            input.builder.withQueryItem(thingNameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEffectivePoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEffectivePoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEffectivePoliciesOutputError>
}

public struct GetEffectivePoliciesInput: Swift.Equatable {
    /// <p>The Cognito identity pool ID.</p>
    public let cognitoIdentityPoolId: Swift.String?
    /// <p>The principal. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).</p>
    public let principal: Swift.String?
    /// <p>The thing name.</p>
    public let thingName: Swift.String?

    public init (
        cognitoIdentityPoolId: Swift.String? = nil,
        principal: Swift.String? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.cognitoIdentityPoolId = cognitoIdentityPoolId
        self.principal = principal
        self.thingName = thingName
    }
}

struct GetEffectivePoliciesInputBody: Swift.Equatable {
    public let principal: Swift.String?
    public let cognitoIdentityPoolId: Swift.String?
}

extension GetEffectivePoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cognitoIdentityPoolId
        case principal
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principal)
        principal = principalDecoded
        let cognitoIdentityPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cognitoIdentityPoolId)
        cognitoIdentityPoolId = cognitoIdentityPoolIdDecoded
    }
}

extension GetEffectivePoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEffectivePoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetEffectivePoliciesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEffectivePoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEffectivePoliciesOutputResponse(effectivePolicies: \(Swift.String(describing: effectivePolicies)))"}
}

extension GetEffectivePoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetEffectivePoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.effectivePolicies = output.effectivePolicies
        } else {
            self.effectivePolicies = nil
        }
    }
}

public struct GetEffectivePoliciesOutputResponse: Swift.Equatable {
    /// <p>The effective policies.</p>
    public let effectivePolicies: [IotClientTypes.EffectivePolicy]?

    public init (
        effectivePolicies: [IotClientTypes.EffectivePolicy]? = nil
    )
    {
        self.effectivePolicies = effectivePolicies
    }
}

struct GetEffectivePoliciesOutputResponseBody: Swift.Equatable {
    public let effectivePolicies: [IotClientTypes.EffectivePolicy]?
}

extension GetEffectivePoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case effectivePolicies
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let effectivePoliciesContainer = try containerValues.decodeIfPresent([IotClientTypes.EffectivePolicy?].self, forKey: .effectivePolicies)
        var effectivePoliciesDecoded0:[IotClientTypes.EffectivePolicy]? = nil
        if let effectivePoliciesContainer = effectivePoliciesContainer {
            effectivePoliciesDecoded0 = [IotClientTypes.EffectivePolicy]()
            for structure0 in effectivePoliciesContainer {
                if let structure0 = structure0 {
                    effectivePoliciesDecoded0?.append(structure0)
                }
            }
        }
        effectivePolicies = effectivePoliciesDecoded0
    }
}

extension GetIndexingConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIndexingConfigurationInput()"}
}

extension GetIndexingConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetIndexingConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIndexingConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIndexingConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIndexingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIndexingConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIndexingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIndexingConfigurationOutputError>
}

public struct GetIndexingConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIndexingConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIndexingConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIndexingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIndexingConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIndexingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIndexingConfigurationOutputError>
}

public struct GetIndexingConfigurationInput: Swift.Equatable {

    public init() {}
}

struct GetIndexingConfigurationInputBody: Swift.Equatable {
}

extension GetIndexingConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetIndexingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetIndexingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetIndexingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIndexingConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIndexingConfigurationOutputResponse(thingGroupIndexingConfiguration: \(Swift.String(describing: thingGroupIndexingConfiguration)), thingIndexingConfiguration: \(Swift.String(describing: thingIndexingConfiguration)))"}
}

extension GetIndexingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetIndexingConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.thingGroupIndexingConfiguration = output.thingGroupIndexingConfiguration
            self.thingIndexingConfiguration = output.thingIndexingConfiguration
        } else {
            self.thingGroupIndexingConfiguration = nil
            self.thingIndexingConfiguration = nil
        }
    }
}

public struct GetIndexingConfigurationOutputResponse: Swift.Equatable {
    /// <p>The index configuration.</p>
    public let thingGroupIndexingConfiguration: IotClientTypes.ThingGroupIndexingConfiguration?
    /// <p>Thing indexing configuration.</p>
    public let thingIndexingConfiguration: IotClientTypes.ThingIndexingConfiguration?

    public init (
        thingGroupIndexingConfiguration: IotClientTypes.ThingGroupIndexingConfiguration? = nil,
        thingIndexingConfiguration: IotClientTypes.ThingIndexingConfiguration? = nil
    )
    {
        self.thingGroupIndexingConfiguration = thingGroupIndexingConfiguration
        self.thingIndexingConfiguration = thingIndexingConfiguration
    }
}

struct GetIndexingConfigurationOutputResponseBody: Swift.Equatable {
    public let thingIndexingConfiguration: IotClientTypes.ThingIndexingConfiguration?
    public let thingGroupIndexingConfiguration: IotClientTypes.ThingGroupIndexingConfiguration?
}

extension GetIndexingConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case thingGroupIndexingConfiguration
        case thingIndexingConfiguration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingIndexingConfigurationDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingIndexingConfiguration.self, forKey: .thingIndexingConfiguration)
        thingIndexingConfiguration = thingIndexingConfigurationDecoded
        let thingGroupIndexingConfigurationDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingGroupIndexingConfiguration.self, forKey: .thingGroupIndexingConfiguration)
        thingGroupIndexingConfiguration = thingGroupIndexingConfigurationDecoded
    }
}

extension GetJobDocumentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetJobDocumentInput(jobId: \(Swift.String(describing: jobId)))"}
}

extension GetJobDocumentInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetJobDocumentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetJobDocumentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetJobDocumentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetJobDocumentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetJobDocumentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetJobDocumentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetJobDocumentOutputError>
}

public struct GetJobDocumentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetJobDocumentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetJobDocumentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetJobDocumentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetJobDocumentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetJobDocumentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetJobDocumentOutputError>
}

public struct GetJobDocumentInput: Swift.Equatable {
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    public let jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct GetJobDocumentInputBody: Swift.Equatable {
}

extension GetJobDocumentInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetJobDocumentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetJobDocumentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetJobDocumentOutputError: Swift.Error, Swift.Equatable {
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetJobDocumentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetJobDocumentOutputResponse(document: \(Swift.String(describing: document)))"}
}

extension GetJobDocumentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetJobDocumentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.document = output.document
        } else {
            self.document = nil
        }
    }
}

public struct GetJobDocumentOutputResponse: Swift.Equatable {
    /// <p>The job document content.</p>
    public let document: Swift.String?

    public init (
        document: Swift.String? = nil
    )
    {
        self.document = document
    }
}

struct GetJobDocumentOutputResponseBody: Swift.Equatable {
    public let document: Swift.String?
}

extension GetJobDocumentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case document
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .document)
        document = documentDecoded
    }
}

extension GetLoggingOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLoggingOptionsInput()"}
}

extension GetLoggingOptionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetLoggingOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoggingOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoggingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoggingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoggingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoggingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoggingOptionsOutputError>
}

public struct GetLoggingOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoggingOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoggingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoggingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoggingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoggingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoggingOptionsOutputError>
}

/// <p>The input for the GetLoggingOptions operation.</p>
public struct GetLoggingOptionsInput: Swift.Equatable {

    public init() {}
}

struct GetLoggingOptionsInputBody: Swift.Equatable {
}

extension GetLoggingOptionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetLoggingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLoggingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetLoggingOptionsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLoggingOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLoggingOptionsOutputResponse(logLevel: \(Swift.String(describing: logLevel)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension GetLoggingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetLoggingOptionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.logLevel = output.logLevel
            self.roleArn = output.roleArn
        } else {
            self.logLevel = nil
            self.roleArn = nil
        }
    }
}

/// <p>The output from the GetLoggingOptions operation.</p>
public struct GetLoggingOptionsOutputResponse: Swift.Equatable {
    /// <p>The logging level.</p>
    public let logLevel: IotClientTypes.LogLevel?
    /// <p>The ARN of the IAM role that grants access.</p>
    public let roleArn: Swift.String?

    public init (
        logLevel: IotClientTypes.LogLevel? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.logLevel = logLevel
        self.roleArn = roleArn
    }
}

struct GetLoggingOptionsOutputResponseBody: Swift.Equatable {
    public let roleArn: Swift.String?
    public let logLevel: IotClientTypes.LogLevel?
}

extension GetLoggingOptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logLevel
        case roleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(IotClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
    }
}

extension GetOTAUpdateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOTAUpdateInput(otaUpdateId: \(Swift.String(describing: otaUpdateId)))"}
}

extension GetOTAUpdateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetOTAUpdateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOTAUpdateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOTAUpdateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOTAUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOTAUpdateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOTAUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOTAUpdateOutputError>
}

public struct GetOTAUpdateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOTAUpdateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOTAUpdateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOTAUpdateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOTAUpdateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOTAUpdateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOTAUpdateOutputError>
}

public struct GetOTAUpdateInput: Swift.Equatable {
    /// <p>The OTA update ID.</p>
    public let otaUpdateId: Swift.String?

    public init (
        otaUpdateId: Swift.String? = nil
    )
    {
        self.otaUpdateId = otaUpdateId
    }
}

struct GetOTAUpdateInputBody: Swift.Equatable {
}

extension GetOTAUpdateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetOTAUpdateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetOTAUpdateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetOTAUpdateOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetOTAUpdateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOTAUpdateOutputResponse(otaUpdateInfo: \(Swift.String(describing: otaUpdateInfo)))"}
}

extension GetOTAUpdateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetOTAUpdateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.otaUpdateInfo = output.otaUpdateInfo
        } else {
            self.otaUpdateInfo = nil
        }
    }
}

public struct GetOTAUpdateOutputResponse: Swift.Equatable {
    /// <p>The OTA update info.</p>
    public let otaUpdateInfo: IotClientTypes.OTAUpdateInfo?

    public init (
        otaUpdateInfo: IotClientTypes.OTAUpdateInfo? = nil
    )
    {
        self.otaUpdateInfo = otaUpdateInfo
    }
}

struct GetOTAUpdateOutputResponseBody: Swift.Equatable {
    public let otaUpdateInfo: IotClientTypes.OTAUpdateInfo?
}

extension GetOTAUpdateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case otaUpdateInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let otaUpdateInfoDecoded = try containerValues.decodeIfPresent(IotClientTypes.OTAUpdateInfo.self, forKey: .otaUpdateInfo)
        otaUpdateInfo = otaUpdateInfoDecoded
    }
}

public struct GetPercentilesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPercentilesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPercentilesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPercentilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPercentilesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPercentilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPercentilesOutputError>
}

extension GetPercentilesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPercentilesInput(aggregationField: \(Swift.String(describing: aggregationField)), indexName: \(Swift.String(describing: indexName)), percents: \(Swift.String(describing: percents)), queryString: \(Swift.String(describing: queryString)), queryVersion: \(Swift.String(describing: queryVersion)))"}
}

extension GetPercentilesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregationField
        case indexName
        case percents
        case queryString
        case queryVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggregationField = aggregationField {
            try encodeContainer.encode(aggregationField, forKey: .aggregationField)
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let percents = percents {
            var percentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .percents)
            for percentlist0 in percents {
                try percentsContainer.encode(percentlist0)
            }
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let queryVersion = queryVersion {
            try encodeContainer.encode(queryVersion, forKey: .queryVersion)
        }
    }
}

public struct GetPercentilesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPercentilesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPercentilesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPercentilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPercentilesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPercentilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPercentilesOutputError>
}

public struct GetPercentilesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPercentilesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPercentilesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPercentilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPercentilesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPercentilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPercentilesOutputError>
}

public struct GetPercentilesInput: Swift.Equatable {
    /// <p>The field to aggregate.</p>
    public let aggregationField: Swift.String?
    /// <p>The name of the index to search.</p>
    public let indexName: Swift.String?
    /// <p>The percentile groups returned.</p>
    public let percents: [Swift.Double]?
    /// <p>The query string.</p>
    public let queryString: Swift.String?
    /// <p>The query version.</p>
    public let queryVersion: Swift.String?

    public init (
        aggregationField: Swift.String? = nil,
        indexName: Swift.String? = nil,
        percents: [Swift.Double]? = nil,
        queryString: Swift.String? = nil,
        queryVersion: Swift.String? = nil
    )
    {
        self.aggregationField = aggregationField
        self.indexName = indexName
        self.percents = percents
        self.queryString = queryString
        self.queryVersion = queryVersion
    }
}

struct GetPercentilesInputBody: Swift.Equatable {
    public let indexName: Swift.String?
    public let queryString: Swift.String?
    public let aggregationField: Swift.String?
    public let queryVersion: Swift.String?
    public let percents: [Swift.Double]?
}

extension GetPercentilesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregationField
        case indexName
        case percents
        case queryString
        case queryVersion
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let aggregationFieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aggregationField)
        aggregationField = aggregationFieldDecoded
        let queryVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryVersion)
        queryVersion = queryVersionDecoded
        let percentsContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .percents)
        var percentsDecoded0:[Swift.Double]? = nil
        if let percentsContainer = percentsContainer {
            percentsDecoded0 = [Swift.Double]()
            for double0 in percentsContainer {
                if let double0 = double0 {
                    percentsDecoded0?.append(double0)
                }
            }
        }
        percents = percentsDecoded0
    }
}

extension GetPercentilesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPercentilesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IndexNotReadyException" : self = .indexNotReadyException(try IndexNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAggregationException" : self = .invalidAggregationException(try InvalidAggregationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidQueryException" : self = .invalidQueryException(try InvalidQueryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPercentilesOutputError: Swift.Error, Swift.Equatable {
    case indexNotReadyException(IndexNotReadyException)
    case internalFailureException(InternalFailureException)
    case invalidAggregationException(InvalidAggregationException)
    case invalidQueryException(InvalidQueryException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPercentilesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPercentilesOutputResponse(percentiles: \(Swift.String(describing: percentiles)))"}
}

extension GetPercentilesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetPercentilesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.percentiles = output.percentiles
        } else {
            self.percentiles = nil
        }
    }
}

public struct GetPercentilesOutputResponse: Swift.Equatable {
    /// <p>The percentile values of the aggregated fields.</p>
    public let percentiles: [IotClientTypes.PercentPair]?

    public init (
        percentiles: [IotClientTypes.PercentPair]? = nil
    )
    {
        self.percentiles = percentiles
    }
}

struct GetPercentilesOutputResponseBody: Swift.Equatable {
    public let percentiles: [IotClientTypes.PercentPair]?
}

extension GetPercentilesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case percentiles
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let percentilesContainer = try containerValues.decodeIfPresent([IotClientTypes.PercentPair?].self, forKey: .percentiles)
        var percentilesDecoded0:[IotClientTypes.PercentPair]? = nil
        if let percentilesContainer = percentilesContainer {
            percentilesDecoded0 = [IotClientTypes.PercentPair]()
            for structure0 in percentilesContainer {
                if let structure0 = structure0 {
                    percentilesDecoded0?.append(structure0)
                }
            }
        }
        percentiles = percentilesDecoded0
    }
}

extension GetPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPolicyInput(policyName: \(Swift.String(describing: policyName)))"}
}

extension GetPolicyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPolicyOutputError>
}

public struct GetPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPolicyOutputError>
}

/// <p>The input for the GetPolicy operation.</p>
public struct GetPolicyInput: Swift.Equatable {
    /// <p>The name of the policy.</p>
    public let policyName: Swift.String?

    public init (
        policyName: Swift.String? = nil
    )
    {
        self.policyName = policyName
    }
}

struct GetPolicyInputBody: Swift.Equatable {
}

extension GetPolicyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPolicyOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPolicyOutputResponse(creationDate: \(Swift.String(describing: creationDate)), defaultVersionId: \(Swift.String(describing: defaultVersionId)), generationId: \(Swift.String(describing: generationId)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), policyArn: \(Swift.String(describing: policyArn)), policyDocument: \(Swift.String(describing: policyDocument)), policyName: \(Swift.String(describing: policyName)))"}
}

extension GetPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationDate = output.creationDate
            self.defaultVersionId = output.defaultVersionId
            self.generationId = output.generationId
            self.lastModifiedDate = output.lastModifiedDate
            self.policyArn = output.policyArn
            self.policyDocument = output.policyDocument
            self.policyName = output.policyName
        } else {
            self.creationDate = nil
            self.defaultVersionId = nil
            self.generationId = nil
            self.lastModifiedDate = nil
            self.policyArn = nil
            self.policyDocument = nil
            self.policyName = nil
        }
    }
}

/// <p>The output from the GetPolicy operation.</p>
public struct GetPolicyOutputResponse: Swift.Equatable {
    /// <p>The date the policy was created.</p>
    public let creationDate: ClientRuntime.Date?
    /// <p>The default policy version ID.</p>
    public let defaultVersionId: Swift.String?
    /// <p>The generation ID of the policy.</p>
    public let generationId: Swift.String?
    /// <p>The date the policy was last modified.</p>
    public let lastModifiedDate: ClientRuntime.Date?
    /// <p>The policy ARN.</p>
    public let policyArn: Swift.String?
    /// <p>The JSON document that describes the policy.</p>
    public let policyDocument: Swift.String?
    /// <p>The policy name.</p>
    public let policyName: Swift.String?

    public init (
        creationDate: ClientRuntime.Date? = nil,
        defaultVersionId: Swift.String? = nil,
        generationId: Swift.String? = nil,
        lastModifiedDate: ClientRuntime.Date? = nil,
        policyArn: Swift.String? = nil,
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.creationDate = creationDate
        self.defaultVersionId = defaultVersionId
        self.generationId = generationId
        self.lastModifiedDate = lastModifiedDate
        self.policyArn = policyArn
        self.policyDocument = policyDocument
        self.policyName = policyName
    }
}

struct GetPolicyOutputResponseBody: Swift.Equatable {
    public let policyName: Swift.String?
    public let policyArn: Swift.String?
    public let policyDocument: Swift.String?
    public let defaultVersionId: Swift.String?
    public let creationDate: ClientRuntime.Date?
    public let lastModifiedDate: ClientRuntime.Date?
    public let generationId: Swift.String?
}

extension GetPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case defaultVersionId
        case generationId
        case lastModifiedDate
        case policyArn
        case policyDocument
        case policyName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let generationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .generationId)
        generationId = generationIdDecoded
    }
}

extension GetPolicyVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPolicyVersionInput(policyName: \(Swift.String(describing: policyName)), policyVersionId: \(Swift.String(describing: policyVersionId)))"}
}

extension GetPolicyVersionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetPolicyVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPolicyVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPolicyVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPolicyVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPolicyVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPolicyVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPolicyVersionOutputError>
}

public struct GetPolicyVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPolicyVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPolicyVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPolicyVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPolicyVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPolicyVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPolicyVersionOutputError>
}

/// <p>The input for the GetPolicyVersion operation.</p>
public struct GetPolicyVersionInput: Swift.Equatable {
    /// <p>The name of the policy.</p>
    public let policyName: Swift.String?
    /// <p>The policy version ID.</p>
    public let policyVersionId: Swift.String?

    public init (
        policyName: Swift.String? = nil,
        policyVersionId: Swift.String? = nil
    )
    {
        self.policyName = policyName
        self.policyVersionId = policyVersionId
    }
}

struct GetPolicyVersionInputBody: Swift.Equatable {
}

extension GetPolicyVersionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetPolicyVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPolicyVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPolicyVersionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPolicyVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPolicyVersionOutputResponse(creationDate: \(Swift.String(describing: creationDate)), generationId: \(Swift.String(describing: generationId)), isDefaultVersion: \(Swift.String(describing: isDefaultVersion)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), policyArn: \(Swift.String(describing: policyArn)), policyDocument: \(Swift.String(describing: policyDocument)), policyName: \(Swift.String(describing: policyName)), policyVersionId: \(Swift.String(describing: policyVersionId)))"}
}

extension GetPolicyVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetPolicyVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationDate = output.creationDate
            self.generationId = output.generationId
            self.isDefaultVersion = output.isDefaultVersion
            self.lastModifiedDate = output.lastModifiedDate
            self.policyArn = output.policyArn
            self.policyDocument = output.policyDocument
            self.policyName = output.policyName
            self.policyVersionId = output.policyVersionId
        } else {
            self.creationDate = nil
            self.generationId = nil
            self.isDefaultVersion = false
            self.lastModifiedDate = nil
            self.policyArn = nil
            self.policyDocument = nil
            self.policyName = nil
            self.policyVersionId = nil
        }
    }
}

/// <p>The output from the GetPolicyVersion operation.</p>
public struct GetPolicyVersionOutputResponse: Swift.Equatable {
    /// <p>The date the policy was created.</p>
    public let creationDate: ClientRuntime.Date?
    /// <p>The generation ID of the policy version.</p>
    public let generationId: Swift.String?
    /// <p>Specifies whether the policy version is the default.</p>
    public let isDefaultVersion: Swift.Bool
    /// <p>The date the policy was last modified.</p>
    public let lastModifiedDate: ClientRuntime.Date?
    /// <p>The policy ARN.</p>
    public let policyArn: Swift.String?
    /// <p>The JSON document that describes the policy.</p>
    public let policyDocument: Swift.String?
    /// <p>The policy name.</p>
    public let policyName: Swift.String?
    /// <p>The policy version ID.</p>
    public let policyVersionId: Swift.String?

    public init (
        creationDate: ClientRuntime.Date? = nil,
        generationId: Swift.String? = nil,
        isDefaultVersion: Swift.Bool = false,
        lastModifiedDate: ClientRuntime.Date? = nil,
        policyArn: Swift.String? = nil,
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil,
        policyVersionId: Swift.String? = nil
    )
    {
        self.creationDate = creationDate
        self.generationId = generationId
        self.isDefaultVersion = isDefaultVersion
        self.lastModifiedDate = lastModifiedDate
        self.policyArn = policyArn
        self.policyDocument = policyDocument
        self.policyName = policyName
        self.policyVersionId = policyVersionId
    }
}

struct GetPolicyVersionOutputResponseBody: Swift.Equatable {
    public let policyArn: Swift.String?
    public let policyName: Swift.String?
    public let policyDocument: Swift.String?
    public let policyVersionId: Swift.String?
    public let isDefaultVersion: Swift.Bool
    public let creationDate: ClientRuntime.Date?
    public let lastModifiedDate: ClientRuntime.Date?
    public let generationId: Swift.String?
}

extension GetPolicyVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case generationId
        case isDefaultVersion
        case lastModifiedDate
        case policyArn
        case policyDocument
        case policyName
        case policyVersionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let policyVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyVersionId)
        policyVersionId = policyVersionIdDecoded
        let isDefaultVersionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let generationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .generationId)
        generationId = generationIdDecoded
    }
}

extension GetRegistrationCodeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRegistrationCodeInput()"}
}

extension GetRegistrationCodeInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetRegistrationCodeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRegistrationCodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRegistrationCodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRegistrationCodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRegistrationCodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRegistrationCodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRegistrationCodeOutputError>
}

public struct GetRegistrationCodeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRegistrationCodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRegistrationCodeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRegistrationCodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRegistrationCodeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRegistrationCodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRegistrationCodeOutputError>
}

/// <p>The input to the GetRegistrationCode operation.</p>
public struct GetRegistrationCodeInput: Swift.Equatable {

    public init() {}
}

struct GetRegistrationCodeInputBody: Swift.Equatable {
}

extension GetRegistrationCodeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetRegistrationCodeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRegistrationCodeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRegistrationCodeOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRegistrationCodeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRegistrationCodeOutputResponse(registrationCode: \(Swift.String(describing: registrationCode)))"}
}

extension GetRegistrationCodeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRegistrationCodeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.registrationCode = output.registrationCode
        } else {
            self.registrationCode = nil
        }
    }
}

/// <p>The output from the GetRegistrationCode operation.</p>
public struct GetRegistrationCodeOutputResponse: Swift.Equatable {
    /// <p>The CA certificate registration code.</p>
    public let registrationCode: Swift.String?

    public init (
        registrationCode: Swift.String? = nil
    )
    {
        self.registrationCode = registrationCode
    }
}

struct GetRegistrationCodeOutputResponseBody: Swift.Equatable {
    public let registrationCode: Swift.String?
}

extension GetRegistrationCodeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registrationCode
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registrationCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registrationCode)
        registrationCode = registrationCodeDecoded
    }
}

public struct GetStatisticsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStatisticsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStatisticsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStatisticsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStatisticsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStatisticsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStatisticsOutputError>
}

extension GetStatisticsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetStatisticsInput(aggregationField: \(Swift.String(describing: aggregationField)), indexName: \(Swift.String(describing: indexName)), queryString: \(Swift.String(describing: queryString)), queryVersion: \(Swift.String(describing: queryVersion)))"}
}

extension GetStatisticsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregationField
        case indexName
        case queryString
        case queryVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggregationField = aggregationField {
            try encodeContainer.encode(aggregationField, forKey: .aggregationField)
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let queryVersion = queryVersion {
            try encodeContainer.encode(queryVersion, forKey: .queryVersion)
        }
    }
}

public struct GetStatisticsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStatisticsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStatisticsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStatisticsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStatisticsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStatisticsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStatisticsOutputError>
}

public struct GetStatisticsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStatisticsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStatisticsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStatisticsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStatisticsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStatisticsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStatisticsOutputError>
}

public struct GetStatisticsInput: Swift.Equatable {
    /// <p>The aggregation field name.</p>
    public let aggregationField: Swift.String?
    /// <p>The name of the index to search. The default value is <code>AWS_Things</code>.</p>
    public let indexName: Swift.String?
    /// <p>The query used to search. You can specify "*" for the query string to get the count of all
    ///       indexed things in your AWS account.</p>
    public let queryString: Swift.String?
    /// <p>The version of the query used to search.</p>
    public let queryVersion: Swift.String?

    public init (
        aggregationField: Swift.String? = nil,
        indexName: Swift.String? = nil,
        queryString: Swift.String? = nil,
        queryVersion: Swift.String? = nil
    )
    {
        self.aggregationField = aggregationField
        self.indexName = indexName
        self.queryString = queryString
        self.queryVersion = queryVersion
    }
}

struct GetStatisticsInputBody: Swift.Equatable {
    public let indexName: Swift.String?
    public let queryString: Swift.String?
    public let aggregationField: Swift.String?
    public let queryVersion: Swift.String?
}

extension GetStatisticsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregationField
        case indexName
        case queryString
        case queryVersion
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let aggregationFieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aggregationField)
        aggregationField = aggregationFieldDecoded
        let queryVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryVersion)
        queryVersion = queryVersionDecoded
    }
}

extension GetStatisticsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetStatisticsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IndexNotReadyException" : self = .indexNotReadyException(try IndexNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAggregationException" : self = .invalidAggregationException(try InvalidAggregationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidQueryException" : self = .invalidQueryException(try InvalidQueryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetStatisticsOutputError: Swift.Error, Swift.Equatable {
    case indexNotReadyException(IndexNotReadyException)
    case internalFailureException(InternalFailureException)
    case invalidAggregationException(InvalidAggregationException)
    case invalidQueryException(InvalidQueryException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetStatisticsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetStatisticsOutputResponse(statistics: \(Swift.String(describing: statistics)))"}
}

extension GetStatisticsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetStatisticsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.statistics = output.statistics
        } else {
            self.statistics = nil
        }
    }
}

public struct GetStatisticsOutputResponse: Swift.Equatable {
    /// <p>The statistics returned by the Fleet Indexing service based on the query and aggregation
    ///       field.</p>
    public let statistics: IotClientTypes.Statistics?

    public init (
        statistics: IotClientTypes.Statistics? = nil
    )
    {
        self.statistics = statistics
    }
}

struct GetStatisticsOutputResponseBody: Swift.Equatable {
    public let statistics: IotClientTypes.Statistics?
}

extension GetStatisticsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case statistics
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statisticsDecoded = try containerValues.decodeIfPresent(IotClientTypes.Statistics.self, forKey: .statistics)
        statistics = statisticsDecoded
    }
}

extension GetTopicRuleDestinationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTopicRuleDestinationInput(arn: \(Swift.String(describing: arn)))"}
}

extension GetTopicRuleDestinationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetTopicRuleDestinationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTopicRuleDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTopicRuleDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTopicRuleDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTopicRuleDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTopicRuleDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTopicRuleDestinationOutputError>
}

public struct GetTopicRuleDestinationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTopicRuleDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTopicRuleDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTopicRuleDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTopicRuleDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTopicRuleDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTopicRuleDestinationOutputError>
}

public struct GetTopicRuleDestinationInput: Swift.Equatable {
    /// <p>The ARN of the topic rule destination.</p>
    public let arn: Swift.String?

    public init (
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

struct GetTopicRuleDestinationInputBody: Swift.Equatable {
}

extension GetTopicRuleDestinationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetTopicRuleDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTopicRuleDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTopicRuleDestinationOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTopicRuleDestinationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTopicRuleDestinationOutputResponse(topicRuleDestination: \(Swift.String(describing: topicRuleDestination)))"}
}

extension GetTopicRuleDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTopicRuleDestinationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.topicRuleDestination = output.topicRuleDestination
        } else {
            self.topicRuleDestination = nil
        }
    }
}

public struct GetTopicRuleDestinationOutputResponse: Swift.Equatable {
    /// <p>The topic rule destination.</p>
    public let topicRuleDestination: IotClientTypes.TopicRuleDestination?

    public init (
        topicRuleDestination: IotClientTypes.TopicRuleDestination? = nil
    )
    {
        self.topicRuleDestination = topicRuleDestination
    }
}

struct GetTopicRuleDestinationOutputResponseBody: Swift.Equatable {
    public let topicRuleDestination: IotClientTypes.TopicRuleDestination?
}

extension GetTopicRuleDestinationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicRuleDestination
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicRuleDestinationDecoded = try containerValues.decodeIfPresent(IotClientTypes.TopicRuleDestination.self, forKey: .topicRuleDestination)
        topicRuleDestination = topicRuleDestinationDecoded
    }
}

extension GetTopicRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTopicRuleInput(ruleName: \(Swift.String(describing: ruleName)))"}
}

extension GetTopicRuleInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetTopicRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTopicRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTopicRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTopicRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTopicRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTopicRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTopicRuleOutputError>
}

public struct GetTopicRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTopicRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTopicRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTopicRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTopicRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTopicRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTopicRuleOutputError>
}

/// <p>The input for the GetTopicRule operation.</p>
public struct GetTopicRuleInput: Swift.Equatable {
    /// <p>The name of the rule.</p>
    public let ruleName: Swift.String?

    public init (
        ruleName: Swift.String? = nil
    )
    {
        self.ruleName = ruleName
    }
}

struct GetTopicRuleInputBody: Swift.Equatable {
}

extension GetTopicRuleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetTopicRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTopicRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTopicRuleOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTopicRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTopicRuleOutputResponse(rule: \(Swift.String(describing: rule)), ruleArn: \(Swift.String(describing: ruleArn)))"}
}

extension GetTopicRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTopicRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.rule = output.rule
            self.ruleArn = output.ruleArn
        } else {
            self.rule = nil
            self.ruleArn = nil
        }
    }
}

/// <p>The output from the GetTopicRule operation.</p>
public struct GetTopicRuleOutputResponse: Swift.Equatable {
    /// <p>The rule.</p>
    public let rule: IotClientTypes.TopicRule?
    /// <p>The rule ARN.</p>
    public let ruleArn: Swift.String?

    public init (
        rule: IotClientTypes.TopicRule? = nil,
        ruleArn: Swift.String? = nil
    )
    {
        self.rule = rule
        self.ruleArn = ruleArn
    }
}

struct GetTopicRuleOutputResponseBody: Swift.Equatable {
    public let ruleArn: Swift.String?
    public let rule: IotClientTypes.TopicRule?
}

extension GetTopicRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rule
        case ruleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleArn)
        ruleArn = ruleArnDecoded
        let ruleDecoded = try containerValues.decodeIfPresent(IotClientTypes.TopicRule.self, forKey: .rule)
        rule = ruleDecoded
    }
}

extension GetV2LoggingOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetV2LoggingOptionsInput()"}
}

extension GetV2LoggingOptionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetV2LoggingOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetV2LoggingOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetV2LoggingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetV2LoggingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetV2LoggingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetV2LoggingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetV2LoggingOptionsOutputError>
}

public struct GetV2LoggingOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetV2LoggingOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetV2LoggingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetV2LoggingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetV2LoggingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetV2LoggingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetV2LoggingOptionsOutputError>
}

public struct GetV2LoggingOptionsInput: Swift.Equatable {

    public init() {}
}

struct GetV2LoggingOptionsInputBody: Swift.Equatable {
}

extension GetV2LoggingOptionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetV2LoggingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetV2LoggingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotConfiguredException" : self = .notConfiguredException(try NotConfiguredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetV2LoggingOptionsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case notConfiguredException(NotConfiguredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetV2LoggingOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetV2LoggingOptionsOutputResponse(defaultLogLevel: \(Swift.String(describing: defaultLogLevel)), disableAllLogs: \(Swift.String(describing: disableAllLogs)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension GetV2LoggingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetV2LoggingOptionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.defaultLogLevel = output.defaultLogLevel
            self.disableAllLogs = output.disableAllLogs
            self.roleArn = output.roleArn
        } else {
            self.defaultLogLevel = nil
            self.disableAllLogs = false
            self.roleArn = nil
        }
    }
}

public struct GetV2LoggingOptionsOutputResponse: Swift.Equatable {
    /// <p>The default log level.</p>
    public let defaultLogLevel: IotClientTypes.LogLevel?
    /// <p>Disables all logs.</p>
    public let disableAllLogs: Swift.Bool
    /// <p>The IAM role ARN AWS IoT uses to write to your CloudWatch logs.</p>
    public let roleArn: Swift.String?

    public init (
        defaultLogLevel: IotClientTypes.LogLevel? = nil,
        disableAllLogs: Swift.Bool = false,
        roleArn: Swift.String? = nil
    )
    {
        self.defaultLogLevel = defaultLogLevel
        self.disableAllLogs = disableAllLogs
        self.roleArn = roleArn
    }
}

struct GetV2LoggingOptionsOutputResponseBody: Swift.Equatable {
    public let roleArn: Swift.String?
    public let defaultLogLevel: IotClientTypes.LogLevel?
    public let disableAllLogs: Swift.Bool
}

extension GetV2LoggingOptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultLogLevel
        case disableAllLogs
        case roleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let defaultLogLevelDecoded = try containerValues.decodeIfPresent(IotClientTypes.LogLevel.self, forKey: .defaultLogLevel)
        defaultLogLevel = defaultLogLevelDecoded
        let disableAllLogsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .disableAllLogs)
        disableAllLogs = disableAllLogsDecoded
    }
}

extension IotClientTypes.GroupNameAndArn: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupArn
        case groupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupArn = groupArn {
            try encodeContainer.encode(groupArn, forKey: .groupArn)
        }
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupArn)
        groupArn = groupArnDecoded
    }
}

extension IotClientTypes.GroupNameAndArn: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GroupNameAndArn(groupArn: \(Swift.String(describing: groupArn)), groupName: \(Swift.String(describing: groupName)))"}
}

extension IotClientTypes {
    /// <p>The name and ARN of a group.</p>
    public struct GroupNameAndArn: Swift.Equatable {
        /// <p>The group ARN.</p>
        public let groupArn: Swift.String?
        /// <p>The group name.</p>
        public let groupName: Swift.String?

        public init (
            groupArn: Swift.String? = nil,
            groupName: Swift.String? = nil
        )
        {
            self.groupArn = groupArn
            self.groupName = groupName
        }
    }

}

extension IotClientTypes.HttpAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auth
        case confirmationUrl
        case headers
        case url
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auth = auth {
            try encodeContainer.encode(auth, forKey: .auth)
        }
        if let confirmationUrl = confirmationUrl {
            try encodeContainer.encode(confirmationUrl, forKey: .confirmationUrl)
        }
        if let headers = headers {
            var headersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .headers)
            for headerlist0 in headers {
                try headersContainer.encode(headerlist0)
            }
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let confirmationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .confirmationUrl)
        confirmationUrl = confirmationUrlDecoded
        let headersContainer = try containerValues.decodeIfPresent([IotClientTypes.HttpActionHeader?].self, forKey: .headers)
        var headersDecoded0:[IotClientTypes.HttpActionHeader]? = nil
        if let headersContainer = headersContainer {
            headersDecoded0 = [IotClientTypes.HttpActionHeader]()
            for structure0 in headersContainer {
                if let structure0 = structure0 {
                    headersDecoded0?.append(structure0)
                }
            }
        }
        headers = headersDecoded0
        let authDecoded = try containerValues.decodeIfPresent(IotClientTypes.HttpAuthorization.self, forKey: .auth)
        auth = authDecoded
    }
}

extension IotClientTypes.HttpAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpAction(auth: \(Swift.String(describing: auth)), confirmationUrl: \(Swift.String(describing: confirmationUrl)), headers: \(Swift.String(describing: headers)), url: \(Swift.String(describing: url)))"}
}

extension IotClientTypes {
    /// <p>Send data to an HTTPS endpoint.</p>
    public struct HttpAction: Swift.Equatable {
        /// <p>The authentication method to use when sending data to an HTTPS endpoint.</p>
        public let auth: IotClientTypes.HttpAuthorization?
        /// <p>The URL to which AWS IoT sends a confirmation message. The value of the confirmation URL
        ///          must be a prefix of the endpoint URL. If you do not specify a confirmation URL AWS IoT uses
        ///          the endpoint URL as the confirmation URL. If you use substitution templates in the
        ///          confirmationUrl, you must create and enable topic rule destinations that match each
        ///          possible value of the substitution template before traffic is allowed to your endpoint
        ///          URL.</p>
        public let confirmationUrl: Swift.String?
        /// <p>The HTTP headers to send with the message data.</p>
        public let headers: [IotClientTypes.HttpActionHeader]?
        /// <p>The endpoint URL. If substitution templates are used in the URL, you must also specify a
        ///             <code>confirmationUrl</code>. If this is a new destination, a new
        ///             <code>TopicRuleDestination</code> is created if possible.</p>
        public let url: Swift.String?

        public init (
            auth: IotClientTypes.HttpAuthorization? = nil,
            confirmationUrl: Swift.String? = nil,
            headers: [IotClientTypes.HttpActionHeader]? = nil,
            url: Swift.String? = nil
        )
        {
            self.auth = auth
            self.confirmationUrl = confirmationUrl
            self.headers = headers
            self.url = url
        }
    }

}

extension IotClientTypes.HttpActionHeader: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension IotClientTypes.HttpActionHeader: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpActionHeader(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension IotClientTypes {
    /// <p>The HTTP action header.</p>
    public struct HttpActionHeader: Swift.Equatable {
        /// <p>The HTTP header key.</p>
        public let key: Swift.String?
        /// <p>The HTTP header value. Substitution templates are supported.</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension IotClientTypes.HttpAuthorization: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sigv4
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sigv4 = sigv4 {
            try encodeContainer.encode(sigv4, forKey: .sigv4)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sigv4Decoded = try containerValues.decodeIfPresent(IotClientTypes.SigV4Authorization.self, forKey: .sigv4)
        sigv4 = sigv4Decoded
    }
}

extension IotClientTypes.HttpAuthorization: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpAuthorization(sigv4: \(Swift.String(describing: sigv4)))"}
}

extension IotClientTypes {
    /// <p>The authorization method used to send messages.</p>
    public struct HttpAuthorization: Swift.Equatable {
        /// <p>Use Sig V4 authorization. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
        ///             Version 4 Signing Process</a>.</p>
        public let sigv4: IotClientTypes.SigV4Authorization?

        public init (
            sigv4: IotClientTypes.SigV4Authorization? = nil
        )
        {
            self.sigv4 = sigv4
        }
    }

}

extension IotClientTypes.HttpContext: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case headers
        case queryString
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let headers = headers {
            var headersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .headers)
            for (dictKey0, httpheaders0) in headers {
                try headersContainer.encode(httpheaders0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let headersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .headers)
        var headersDecoded0: [Swift.String:Swift.String]? = nil
        if let headersContainer = headersContainer {
            headersDecoded0 = [Swift.String:Swift.String]()
            for (key0, httpheadervalue0) in headersContainer {
                if let httpheadervalue0 = httpheadervalue0 {
                    headersDecoded0?[key0] = httpheadervalue0
                }
            }
        }
        headers = headersDecoded0
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
    }
}

extension IotClientTypes.HttpContext: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpContext(headers: \(Swift.String(describing: headers)), queryString: \(Swift.String(describing: queryString)))"}
}

extension IotClientTypes {
    /// <p>Specifies the HTTP context to use for the test authorizer request.</p>
    public struct HttpContext: Swift.Equatable {
        /// <p>The header keys and values in an HTTP authorization request.</p>
        public let headers: [Swift.String:Swift.String]?
        /// <p>The query string keys and values in an HTTP authorization request.</p>
        public let queryString: Swift.String?

        public init (
            headers: [Swift.String:Swift.String]? = nil,
            queryString: Swift.String? = nil
        )
        {
            self.headers = headers
            self.queryString = queryString
        }
    }

}

extension IotClientTypes.HttpUrlDestinationConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confirmationUrl
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confirmationUrl = confirmationUrl {
            try encodeContainer.encode(confirmationUrl, forKey: .confirmationUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let confirmationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .confirmationUrl)
        confirmationUrl = confirmationUrlDecoded
    }
}

extension IotClientTypes.HttpUrlDestinationConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpUrlDestinationConfiguration(confirmationUrl: \(Swift.String(describing: confirmationUrl)))"}
}

extension IotClientTypes {
    /// <p>HTTP URL destination configuration used by the topic rule's HTTP action.</p>
    public struct HttpUrlDestinationConfiguration: Swift.Equatable {
        /// <p>The URL AWS IoT uses to confirm ownership of or access to the topic rule destination
        ///          URL.</p>
        public let confirmationUrl: Swift.String?

        public init (
            confirmationUrl: Swift.String? = nil
        )
        {
            self.confirmationUrl = confirmationUrl
        }
    }

}

extension IotClientTypes.HttpUrlDestinationProperties: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confirmationUrl
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confirmationUrl = confirmationUrl {
            try encodeContainer.encode(confirmationUrl, forKey: .confirmationUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let confirmationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .confirmationUrl)
        confirmationUrl = confirmationUrlDecoded
    }
}

extension IotClientTypes.HttpUrlDestinationProperties: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpUrlDestinationProperties(confirmationUrl: \(Swift.String(describing: confirmationUrl)))"}
}

extension IotClientTypes {
    /// <p>HTTP URL destination properties.</p>
    public struct HttpUrlDestinationProperties: Swift.Equatable {
        /// <p>The URL used to confirm the HTTP topic rule destination URL.</p>
        public let confirmationUrl: Swift.String?

        public init (
            confirmationUrl: Swift.String? = nil
        )
        {
            self.confirmationUrl = confirmationUrl
        }
    }

}

extension IotClientTypes.HttpUrlDestinationSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confirmationUrl
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confirmationUrl = confirmationUrl {
            try encodeContainer.encode(confirmationUrl, forKey: .confirmationUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let confirmationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .confirmationUrl)
        confirmationUrl = confirmationUrlDecoded
    }
}

extension IotClientTypes.HttpUrlDestinationSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HttpUrlDestinationSummary(confirmationUrl: \(Swift.String(describing: confirmationUrl)))"}
}

extension IotClientTypes {
    /// <p>Information about an HTTP URL destination.</p>
    public struct HttpUrlDestinationSummary: Swift.Equatable {
        /// <p>The URL used to confirm ownership of or access to the HTTP topic rule destination
        ///          URL.</p>
        public let confirmationUrl: Swift.String?

        public init (
            confirmationUrl: Swift.String? = nil
        )
        {
            self.confirmationUrl = confirmationUrl
        }
    }

}

extension IotClientTypes.ImplicitDeny: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policies
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policies = policies {
            var policiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policies)
            for policies0 in policies {
                try policiesContainer.encode(policies0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policiesContainer = try containerValues.decodeIfPresent([IotClientTypes.Policy?].self, forKey: .policies)
        var policiesDecoded0:[IotClientTypes.Policy]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [IotClientTypes.Policy]()
            for structure0 in policiesContainer {
                if let structure0 = structure0 {
                    policiesDecoded0?.append(structure0)
                }
            }
        }
        policies = policiesDecoded0
    }
}

extension IotClientTypes.ImplicitDeny: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImplicitDeny(policies: \(Swift.String(describing: policies)))"}
}

extension IotClientTypes {
    /// <p>Information that implicitly denies authorization. When policy doesn't explicitly deny
    ///          or allow an action on a resource it is considered an implicit deny.</p>
    public struct ImplicitDeny: Swift.Equatable {
        /// <p>Policies that don't contain a matching allow or deny statement for the specified
        ///          action on the specified resource. </p>
        public let policies: [IotClientTypes.Policy]?

        public init (
            policies: [IotClientTypes.Policy]? = nil
        )
        {
            self.policies = policies
        }
    }

}

extension IndexNotReadyException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IndexNotReadyException(message: \(Swift.String(describing: message)))"}
}

extension IndexNotReadyException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: IndexNotReadyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The index is not ready.</p>
public struct IndexNotReadyException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IndexNotReadyExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension IndexNotReadyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes {
    public enum IndexStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case building
        case rebuilding
        case sdkUnknown(Swift.String)

        public static var allCases: [IndexStatus] {
            return [
                .active,
                .building,
                .rebuilding,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .building: return "BUILDING"
            case .rebuilding: return "REBUILDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IndexStatus(rawValue: rawValue) ?? IndexStatus.sdkUnknown(rawValue)
        }
    }
}

extension InternalException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalException(message: \(Swift.String(describing: message)))"}
}

extension InternalException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An unexpected error has occurred.</p>
public struct InternalException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InternalFailureException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalFailureException(message: \(Swift.String(describing: message)))"}
}

extension InternalFailureException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalFailureExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An unexpected error has occurred.</p>
public struct InternalFailureException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalFailureExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalFailureExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidAggregationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidAggregationException(message: \(Swift.String(describing: message)))"}
}

extension InvalidAggregationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidAggregationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The aggregation is invalid.</p>
public struct InvalidAggregationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidAggregationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidAggregationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidQueryException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidQueryException(message: \(Swift.String(describing: message)))"}
}

extension InvalidQueryException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidQueryExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The query is invalid.</p>
public struct InvalidQueryException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidQueryExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidQueryExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRequestException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidRequestException(message: \(Swift.String(describing: message)))"}
}

extension InvalidRequestException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request is not valid.</p>
public struct InvalidRequestException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidResponseException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidResponseException(message: \(Swift.String(describing: message)))"}
}

extension InvalidResponseException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidResponseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The response is invalid.</p>
public struct InvalidResponseException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidResponseExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidResponseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidStateTransitionException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidStateTransitionException(message: \(Swift.String(describing: message)))"}
}

extension InvalidStateTransitionException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidStateTransitionExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An attempt was made to change to an invalid state, for example by deleting a job or a
///          job execution which is "IN_PROGRESS" without setting the <code>force</code>
///          parameter.</p>
public struct InvalidStateTransitionException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidStateTransitionExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidStateTransitionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes.IotAnalyticsAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchMode
        case channelArn
        case channelName
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchMode = batchMode {
            try encodeContainer.encode(batchMode, forKey: .batchMode)
        }
        if let channelArn = channelArn {
            try encodeContainer.encode(channelArn, forKey: .channelArn)
        }
        if let channelName = channelName {
            try encodeContainer.encode(channelName, forKey: .channelName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelArn)
        channelArn = channelArnDecoded
        let channelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let batchModeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .batchMode)
        batchMode = batchModeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IotClientTypes.IotAnalyticsAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IotAnalyticsAction(batchMode: \(Swift.String(describing: batchMode)), channelArn: \(Swift.String(describing: channelArn)), channelName: \(Swift.String(describing: channelName)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension IotClientTypes {
    /// <p>Sends message data to an AWS IoT Analytics channel.</p>
    public struct IotAnalyticsAction: Swift.Equatable {
        /// <p>Whether to process the action as a batch. The default value is
        ///          <code>false</code>.</p>
        ///          <p>When <code>batchMode</code> is <code>true</code> and the rule SQL statement evaluates
        ///          to an Array, each Array element is delivered as a separate message when passed by <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_BatchPutMessage.html">
        ///                <code>BatchPutMessage</code>
        ///             </a> to the AWS IoT Analytics channel. The resulting array can't have more
        ///          than 100 messages.</p>
        public let batchMode: Swift.Bool?
        /// <p>(deprecated) The ARN of the IoT Analytics channel to which message data will be
        ///          sent.</p>
        public let channelArn: Swift.String?
        /// <p>The name of the IoT Analytics channel to which message data will be sent.</p>
        public let channelName: Swift.String?
        /// <p>The ARN of the role which has a policy that grants IoT Analytics permission to send
        ///          message data via IoT Analytics (iotanalytics:BatchPutMessage).</p>
        public let roleArn: Swift.String?

        public init (
            batchMode: Swift.Bool? = nil,
            channelArn: Swift.String? = nil,
            channelName: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.batchMode = batchMode
            self.channelArn = channelArn
            self.channelName = channelName
            self.roleArn = roleArn
        }
    }

}

extension IotClientTypes.IotEventsAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchMode
        case inputName
        case messageId
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchMode = batchMode {
            try encodeContainer.encode(batchMode, forKey: .batchMode)
        }
        if let inputName = inputName {
            try encodeContainer.encode(inputName, forKey: .inputName)
        }
        if let messageId = messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputName)
        inputName = inputNameDecoded
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let batchModeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .batchMode)
        batchMode = batchModeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IotClientTypes.IotEventsAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IotEventsAction(batchMode: \(Swift.String(describing: batchMode)), inputName: \(Swift.String(describing: inputName)), messageId: \(Swift.String(describing: messageId)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension IotClientTypes {
    /// <p>Sends an input to an AWS IoT Events detector.</p>
    public struct IotEventsAction: Swift.Equatable {
        /// <p>Whether to process the event actions as a batch. The default value is
        ///             <code>false</code>.</p>
        ///          <p>When <code>batchMode</code> is <code>true</code>, you can't specify a
        ///             <code>messageId</code>. </p>
        ///          <p>When <code>batchMode</code> is <code>true</code> and the rule SQL statement evaluates
        ///          to an Array, each Array element is treated as a separate message when it's sent to AWS IoT
        ///          Events by calling <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchPutMessage.html">
        ///                <code>BatchPutMessage</code>
        ///             </a>.  The resulting array can't have more
        ///          than 10 messages.</p>
        public let batchMode: Swift.Bool?
        /// <p>The name of the AWS IoT Events input.</p>
        public let inputName: Swift.String?
        /// <p>The ID of the message. The default <code>messageId</code> is a new UUID value.</p>
        ///          <p>When <code>batchMode</code> is <code>true</code>, you can't specify a
        ///         <code>messageId</code>--a new UUID value will be assigned.</p>
        ///          <p>Assign a value to this property to ensure that only one input (message) with a given
        ///             <code>messageId</code> will be processed by an AWS IoT Events detector.</p>
        public let messageId: Swift.String?
        /// <p>The ARN of the role that grants AWS IoT permission to send an input to an AWS IoT
        ///       Events detector. ("Action":"iotevents:BatchPutMessage").</p>
        public let roleArn: Swift.String?

        public init (
            batchMode: Swift.Bool? = nil,
            inputName: Swift.String? = nil,
            messageId: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.batchMode = batchMode
            self.inputName = inputName
            self.messageId = messageId
            self.roleArn = roleArn
        }
    }

}

extension IotClientTypes.IotSiteWiseAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case putAssetPropertyValueEntries
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let putAssetPropertyValueEntries = putAssetPropertyValueEntries {
            var putAssetPropertyValueEntriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .putAssetPropertyValueEntries)
            for putassetpropertyvalueentrylist0 in putAssetPropertyValueEntries {
                try putAssetPropertyValueEntriesContainer.encode(putassetpropertyvalueentrylist0)
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let putAssetPropertyValueEntriesContainer = try containerValues.decodeIfPresent([IotClientTypes.PutAssetPropertyValueEntry?].self, forKey: .putAssetPropertyValueEntries)
        var putAssetPropertyValueEntriesDecoded0:[IotClientTypes.PutAssetPropertyValueEntry]? = nil
        if let putAssetPropertyValueEntriesContainer = putAssetPropertyValueEntriesContainer {
            putAssetPropertyValueEntriesDecoded0 = [IotClientTypes.PutAssetPropertyValueEntry]()
            for structure0 in putAssetPropertyValueEntriesContainer {
                if let structure0 = structure0 {
                    putAssetPropertyValueEntriesDecoded0?.append(structure0)
                }
            }
        }
        putAssetPropertyValueEntries = putAssetPropertyValueEntriesDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IotClientTypes.IotSiteWiseAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IotSiteWiseAction(putAssetPropertyValueEntries: \(Swift.String(describing: putAssetPropertyValueEntries)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension IotClientTypes {
    /// <p>Describes an action to send data from an MQTT message that triggered the rule to AWS IoT
    ///       SiteWise asset properties.</p>
    public struct IotSiteWiseAction: Swift.Equatable {
        /// <p>A list of asset property value entries.</p>
        public let putAssetPropertyValueEntries: [IotClientTypes.PutAssetPropertyValueEntry]?
        /// <p>The ARN of the role that grants AWS IoT permission to send an asset property value to AWS
        ///       IoTSiteWise. (<code>"Action": "iotsitewise:BatchPutAssetPropertyValue"</code>). The trust
        ///       policy can restrict access to specific asset hierarchy paths.</p>
        public let roleArn: Swift.String?

        public init (
            putAssetPropertyValueEntries: [IotClientTypes.PutAssetPropertyValueEntry]? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.putAssetPropertyValueEntries = putAssetPropertyValueEntries
            self.roleArn = roleArn
        }
    }

}

extension IotClientTypes.Job: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortConfig
        case comment
        case completedAt
        case createdAt
        case description
        case forceCanceled
        case jobArn
        case jobExecutionsRolloutConfig
        case jobId
        case jobProcessDetails
        case jobTemplateArn
        case lastUpdatedAt
        case namespaceId
        case presignedUrlConfig
        case reasonCode
        case status
        case targetSelection
        case targets
        case timeoutConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let abortConfig = abortConfig {
            try encodeContainer.encode(abortConfig, forKey: .abortConfig)
        }
        if let comment = comment {
            try encodeContainer.encode(comment, forKey: .comment)
        }
        if let completedAt = completedAt {
            try encodeContainer.encode(completedAt.timeIntervalSince1970, forKey: .completedAt)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let forceCanceled = forceCanceled {
            try encodeContainer.encode(forceCanceled, forKey: .forceCanceled)
        }
        if let jobArn = jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobExecutionsRolloutConfig = jobExecutionsRolloutConfig {
            try encodeContainer.encode(jobExecutionsRolloutConfig, forKey: .jobExecutionsRolloutConfig)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobProcessDetails = jobProcessDetails {
            try encodeContainer.encode(jobProcessDetails, forKey: .jobProcessDetails)
        }
        if let jobTemplateArn = jobTemplateArn {
            try encodeContainer.encode(jobTemplateArn, forKey: .jobTemplateArn)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let namespaceId = namespaceId {
            try encodeContainer.encode(namespaceId, forKey: .namespaceId)
        }
        if let presignedUrlConfig = presignedUrlConfig {
            try encodeContainer.encode(presignedUrlConfig, forKey: .presignedUrlConfig)
        }
        if let reasonCode = reasonCode {
            try encodeContainer.encode(reasonCode, forKey: .reasonCode)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetSelection = targetSelection {
            try encodeContainer.encode(targetSelection.rawValue, forKey: .targetSelection)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for jobtargets0 in targets {
                try targetsContainer.encode(jobtargets0)
            }
        }
        if let timeoutConfig = timeoutConfig {
            try encodeContainer.encode(timeoutConfig, forKey: .timeoutConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let targetSelectionDecoded = try containerValues.decodeIfPresent(IotClientTypes.TargetSelection.self, forKey: .targetSelection)
        targetSelection = targetSelectionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobStatus.self, forKey: .status)
        status = statusDecoded
        let forceCanceledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceCanceled)
        forceCanceled = forceCanceledDecoded
        let reasonCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reasonCode)
        reasonCode = reasonCodeDecoded
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
        let targetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targets)
        var targetsDecoded0:[Swift.String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Swift.String]()
            for string0 in targetsContainer {
                if let string0 = string0 {
                    targetsDecoded0?.append(string0)
                }
            }
        }
        targets = targetsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let presignedUrlConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.PresignedUrlConfig.self, forKey: .presignedUrlConfig)
        presignedUrlConfig = presignedUrlConfigDecoded
        let jobExecutionsRolloutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobExecutionsRolloutConfig.self, forKey: .jobExecutionsRolloutConfig)
        jobExecutionsRolloutConfig = jobExecutionsRolloutConfigDecoded
        let abortConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AbortConfig.self, forKey: .abortConfig)
        abortConfig = abortConfigDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let completedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completedAt)
        completedAt = completedAtDecoded
        let jobProcessDetailsDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobProcessDetails.self, forKey: .jobProcessDetails)
        jobProcessDetails = jobProcessDetailsDecoded
        let timeoutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.TimeoutConfig.self, forKey: .timeoutConfig)
        timeoutConfig = timeoutConfigDecoded
        let namespaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceId)
        namespaceId = namespaceIdDecoded
        let jobTemplateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTemplateArn)
        jobTemplateArn = jobTemplateArnDecoded
    }
}

extension IotClientTypes.Job: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Job(abortConfig: \(Swift.String(describing: abortConfig)), comment: \(Swift.String(describing: comment)), completedAt: \(Swift.String(describing: completedAt)), createdAt: \(Swift.String(describing: createdAt)), description: \(Swift.String(describing: description)), forceCanceled: \(Swift.String(describing: forceCanceled)), jobArn: \(Swift.String(describing: jobArn)), jobExecutionsRolloutConfig: \(Swift.String(describing: jobExecutionsRolloutConfig)), jobId: \(Swift.String(describing: jobId)), jobProcessDetails: \(Swift.String(describing: jobProcessDetails)), jobTemplateArn: \(Swift.String(describing: jobTemplateArn)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), namespaceId: \(Swift.String(describing: namespaceId)), presignedUrlConfig: \(Swift.String(describing: presignedUrlConfig)), reasonCode: \(Swift.String(describing: reasonCode)), status: \(Swift.String(describing: status)), targetSelection: \(Swift.String(describing: targetSelection)), targets: \(Swift.String(describing: targets)), timeoutConfig: \(Swift.String(describing: timeoutConfig)))"}
}

extension IotClientTypes {
    /// <p>The <code>Job</code> object contains details about a job.</p>
    public struct Job: Swift.Equatable {
        /// <p>Configuration for criteria to abort the job.</p>
        public let abortConfig: IotClientTypes.AbortConfig?
        /// <p>If the job was updated, describes the reason for the update.</p>
        public let comment: Swift.String?
        /// <p>The time, in seconds since the epoch, when the job was completed.</p>
        public let completedAt: ClientRuntime.Date?
        /// <p>The time, in seconds since the epoch, when the job was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>A short text description of the job.</p>
        public let description: Swift.String?
        /// <p>Will be <code>true</code> if the job was canceled with the optional <code>force</code> parameter set to
        ///           <code>true</code>.</p>
        public let forceCanceled: Swift.Bool?
        /// <p>An ARN identifying the job with format "arn:aws:iot:region:account:job/jobId".</p>
        public let jobArn: Swift.String?
        /// <p>Allows you to create a staged rollout of a job.</p>
        public let jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig?
        /// <p>The unique identifier you assigned to this job when it was created.</p>
        public let jobId: Swift.String?
        /// <p>Details about the job process.</p>
        public let jobProcessDetails: IotClientTypes.JobProcessDetails?
        /// <p>The ARN of the job template used to create the job.</p>
        public let jobTemplateArn: Swift.String?
        /// <p>The time, in seconds since the epoch, when the job was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
        ///         <p>When you specify a value for this parameter, AWS IoT Core sends jobs notifications to MQTT topics that
        ///             contain the value in the following format.</p>
        ///         <p>
        ///             <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code>
        ///          </p>
        ///         <note>
        ///             <p>The <code>namespaceId</code> feature is in public preview.</p>
        ///          </note>
        public let namespaceId: Swift.String?
        /// <p>Configuration for pre-signed S3 URLs.</p>
        public let presignedUrlConfig: IotClientTypes.PresignedUrlConfig?
        /// <p>If the job was updated, provides the reason code for the update.</p>
        public let reasonCode: Swift.String?
        /// <p>The status of the job, one of <code>IN_PROGRESS</code>, <code>CANCELED</code>,
        ///             <code>DELETION_IN_PROGRESS</code> or <code>COMPLETED</code>. </p>
        public let status: IotClientTypes.JobStatus?
        /// <p>Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things
        ///             specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing
        ///             when a change is detected in a target. For example, a job will run on a device when the thing representing
        ///             the device is added to a target group, even after the job was completed by all things originally in the
        ///             group. </p>
        public let targetSelection: IotClientTypes.TargetSelection?
        /// <p>A list of IoT things and thing groups to which the job should be sent.</p>
        public let targets: [Swift.String]?
        /// <p>Specifies the amount of time each device has to finish its execution of the job.  A timer
        ///            is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job
        ///            execution status is not set to another terminal state before the timer expires, it will
        ///            be automatically set to <code>TIMED_OUT</code>.</p>
        public let timeoutConfig: IotClientTypes.TimeoutConfig?

        public init (
            abortConfig: IotClientTypes.AbortConfig? = nil,
            comment: Swift.String? = nil,
            completedAt: ClientRuntime.Date? = nil,
            createdAt: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            forceCanceled: Swift.Bool? = nil,
            jobArn: Swift.String? = nil,
            jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig? = nil,
            jobId: Swift.String? = nil,
            jobProcessDetails: IotClientTypes.JobProcessDetails? = nil,
            jobTemplateArn: Swift.String? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            namespaceId: Swift.String? = nil,
            presignedUrlConfig: IotClientTypes.PresignedUrlConfig? = nil,
            reasonCode: Swift.String? = nil,
            status: IotClientTypes.JobStatus? = nil,
            targetSelection: IotClientTypes.TargetSelection? = nil,
            targets: [Swift.String]? = nil,
            timeoutConfig: IotClientTypes.TimeoutConfig? = nil
        )
        {
            self.abortConfig = abortConfig
            self.comment = comment
            self.completedAt = completedAt
            self.createdAt = createdAt
            self.description = description
            self.forceCanceled = forceCanceled
            self.jobArn = jobArn
            self.jobExecutionsRolloutConfig = jobExecutionsRolloutConfig
            self.jobId = jobId
            self.jobProcessDetails = jobProcessDetails
            self.jobTemplateArn = jobTemplateArn
            self.lastUpdatedAt = lastUpdatedAt
            self.namespaceId = namespaceId
            self.presignedUrlConfig = presignedUrlConfig
            self.reasonCode = reasonCode
            self.status = status
            self.targetSelection = targetSelection
            self.targets = targets
            self.timeoutConfig = timeoutConfig
        }
    }

}

extension IotClientTypes.JobExecution: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approximateSecondsBeforeTimedOut
        case executionNumber
        case forceCanceled
        case jobId
        case lastUpdatedAt
        case queuedAt
        case startedAt
        case status
        case statusDetails
        case thingArn
        case versionNumber
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approximateSecondsBeforeTimedOut = approximateSecondsBeforeTimedOut {
            try encodeContainer.encode(approximateSecondsBeforeTimedOut, forKey: .approximateSecondsBeforeTimedOut)
        }
        if let executionNumber = executionNumber {
            try encodeContainer.encode(executionNumber, forKey: .executionNumber)
        }
        if let forceCanceled = forceCanceled {
            try encodeContainer.encode(forceCanceled, forKey: .forceCanceled)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let queuedAt = queuedAt {
            try encodeContainer.encode(queuedAt.timeIntervalSince1970, forKey: .queuedAt)
        }
        if let startedAt = startedAt {
            try encodeContainer.encode(startedAt.timeIntervalSince1970, forKey: .startedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusDetails = statusDetails {
            try encodeContainer.encode(statusDetails, forKey: .statusDetails)
        }
        if let thingArn = thingArn {
            try encodeContainer.encode(thingArn, forKey: .thingArn)
        }
        if versionNumber != 0 {
            try encodeContainer.encode(versionNumber, forKey: .versionNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let forceCanceledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceCanceled)
        forceCanceled = forceCanceledDecoded
        let statusDetailsDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobExecutionStatusDetails.self, forKey: .statusDetails)
        statusDetails = statusDetailsDecoded
        let thingArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingArn)
        thingArn = thingArnDecoded
        let queuedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .queuedAt)
        queuedAt = queuedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let executionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .executionNumber)
        executionNumber = executionNumberDecoded
        let versionNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .versionNumber)
        versionNumber = versionNumberDecoded
        let approximateSecondsBeforeTimedOutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .approximateSecondsBeforeTimedOut)
        approximateSecondsBeforeTimedOut = approximateSecondsBeforeTimedOutDecoded
    }
}

extension IotClientTypes.JobExecution: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobExecution(approximateSecondsBeforeTimedOut: \(Swift.String(describing: approximateSecondsBeforeTimedOut)), executionNumber: \(Swift.String(describing: executionNumber)), forceCanceled: \(Swift.String(describing: forceCanceled)), jobId: \(Swift.String(describing: jobId)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), queuedAt: \(Swift.String(describing: queuedAt)), startedAt: \(Swift.String(describing: startedAt)), status: \(Swift.String(describing: status)), statusDetails: \(Swift.String(describing: statusDetails)), thingArn: \(Swift.String(describing: thingArn)), versionNumber: \(Swift.String(describing: versionNumber)))"}
}

extension IotClientTypes {
    /// <p>The job execution object represents the execution of a job on a particular device.</p>
    public struct JobExecution: Swift.Equatable {
        /// <p>The estimated number of seconds that remain before the job execution status will be
        ///            changed to <code>TIMED_OUT</code>. The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes).
        ///            The actual job execution timeout can occur up to 60 seconds later than the estimated duration.
        ///        This value will not be included if the job execution has reached a terminal status.</p>
        public let approximateSecondsBeforeTimedOut: Swift.Int?
        /// <p>A string (consisting of the digits "0" through "9") which identifies this particular job execution on
        ///             this particular device. It can be used in commands which return or update job execution information.
        ///         </p>
        public let executionNumber: Swift.Int?
        /// <p>Will be <code>true</code> if the job execution was canceled with the optional <code>force</code>
        ///           parameter set to <code>true</code>.</p>
        public let forceCanceled: Swift.Bool?
        /// <p>The unique identifier you assigned to the job when it was created.</p>
        public let jobId: Swift.String?
        /// <p>The time, in seconds since the epoch, when the job execution was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The time, in seconds since the epoch, when the job execution was queued.</p>
        public let queuedAt: ClientRuntime.Date?
        /// <p>The time, in seconds since the epoch, when the job execution started.</p>
        public let startedAt: ClientRuntime.Date?
        /// <p>The status of the job execution (IN_PROGRESS, QUEUED, FAILED, SUCCEEDED, TIMED_OUT,
        ///             CANCELED, or REJECTED).</p>
        public let status: IotClientTypes.JobExecutionStatus?
        /// <p>A collection of name/value pairs that describe the status of the job execution.</p>
        public let statusDetails: IotClientTypes.JobExecutionStatusDetails?
        /// <p>The ARN of the thing on which the job execution is running.</p>
        public let thingArn: Swift.String?
        /// <p>The version of the job execution. Job execution versions are incremented each time they are updated
        ///       by a device.</p>
        public let versionNumber: Swift.Int

        public init (
            approximateSecondsBeforeTimedOut: Swift.Int? = nil,
            executionNumber: Swift.Int? = nil,
            forceCanceled: Swift.Bool? = nil,
            jobId: Swift.String? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            queuedAt: ClientRuntime.Date? = nil,
            startedAt: ClientRuntime.Date? = nil,
            status: IotClientTypes.JobExecutionStatus? = nil,
            statusDetails: IotClientTypes.JobExecutionStatusDetails? = nil,
            thingArn: Swift.String? = nil,
            versionNumber: Swift.Int = 0
        )
        {
            self.approximateSecondsBeforeTimedOut = approximateSecondsBeforeTimedOut
            self.executionNumber = executionNumber
            self.forceCanceled = forceCanceled
            self.jobId = jobId
            self.lastUpdatedAt = lastUpdatedAt
            self.queuedAt = queuedAt
            self.startedAt = startedAt
            self.status = status
            self.statusDetails = statusDetails
            self.thingArn = thingArn
            self.versionNumber = versionNumber
        }
    }

}

extension IotClientTypes {
    public enum JobExecutionFailureType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case failed
        case rejected
        case timedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [JobExecutionFailureType] {
            return [
                .all,
                .failed,
                .rejected,
                .timedOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .failed: return "FAILED"
            case .rejected: return "REJECTED"
            case .timedOut: return "TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobExecutionFailureType(rawValue: rawValue) ?? JobExecutionFailureType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes {
    public enum JobExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceled
        case failed
        case inProgress
        case queued
        case rejected
        case removed
        case succeeded
        case timedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [JobExecutionStatus] {
            return [
                .canceled,
                .failed,
                .inProgress,
                .queued,
                .rejected,
                .removed,
                .succeeded,
                .timedOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .queued: return "QUEUED"
            case .rejected: return "REJECTED"
            case .removed: return "REMOVED"
            case .succeeded: return "SUCCEEDED"
            case .timedOut: return "TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobExecutionStatus(rawValue: rawValue) ?? JobExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.JobExecutionStatusDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detailsMap
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let detailsMap = detailsMap {
            var detailsMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .detailsMap)
            for (dictKey0, detailsmap0) in detailsMap {
                try detailsMapContainer.encode(detailsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailsMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .detailsMap)
        var detailsMapDecoded0: [Swift.String:Swift.String]? = nil
        if let detailsMapContainer = detailsMapContainer {
            detailsMapDecoded0 = [Swift.String:Swift.String]()
            for (key0, detailsvalue0) in detailsMapContainer {
                if let detailsvalue0 = detailsvalue0 {
                    detailsMapDecoded0?[key0] = detailsvalue0
                }
            }
        }
        detailsMap = detailsMapDecoded0
    }
}

extension IotClientTypes.JobExecutionStatusDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobExecutionStatusDetails(detailsMap: \(Swift.String(describing: detailsMap)))"}
}

extension IotClientTypes {
    /// <p>Details of the job execution status.</p>
    public struct JobExecutionStatusDetails: Swift.Equatable {
        /// <p>The job execution status.</p>
        public let detailsMap: [Swift.String:Swift.String]?

        public init (
            detailsMap: [Swift.String:Swift.String]? = nil
        )
        {
            self.detailsMap = detailsMap
        }
    }

}

extension IotClientTypes.JobExecutionSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionNumber
        case lastUpdatedAt
        case queuedAt
        case startedAt
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionNumber = executionNumber {
            try encodeContainer.encode(executionNumber, forKey: .executionNumber)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let queuedAt = queuedAt {
            try encodeContainer.encode(queuedAt.timeIntervalSince1970, forKey: .queuedAt)
        }
        if let startedAt = startedAt {
            try encodeContainer.encode(startedAt.timeIntervalSince1970, forKey: .startedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let queuedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .queuedAt)
        queuedAt = queuedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let executionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .executionNumber)
        executionNumber = executionNumberDecoded
    }
}

extension IotClientTypes.JobExecutionSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobExecutionSummary(executionNumber: \(Swift.String(describing: executionNumber)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), queuedAt: \(Swift.String(describing: queuedAt)), startedAt: \(Swift.String(describing: startedAt)), status: \(Swift.String(describing: status)))"}
}

extension IotClientTypes {
    /// <p>The job execution summary.</p>
    public struct JobExecutionSummary: Swift.Equatable {
        /// <p>A string (consisting of the digits "0" through "9") which identifies this particular job execution on
        ///             this particular device. It can be used later in commands which return or update job execution
        ///             information.</p>
        public let executionNumber: Swift.Int?
        /// <p>The time, in seconds since the epoch, when the job execution was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The time, in seconds since the epoch, when the job execution was queued.</p>
        public let queuedAt: ClientRuntime.Date?
        /// <p>The time, in seconds since the epoch, when the job execution started.</p>
        public let startedAt: ClientRuntime.Date?
        /// <p>The status of the job execution.</p>
        public let status: IotClientTypes.JobExecutionStatus?

        public init (
            executionNumber: Swift.Int? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            queuedAt: ClientRuntime.Date? = nil,
            startedAt: ClientRuntime.Date? = nil,
            status: IotClientTypes.JobExecutionStatus? = nil
        )
        {
            self.executionNumber = executionNumber
            self.lastUpdatedAt = lastUpdatedAt
            self.queuedAt = queuedAt
            self.startedAt = startedAt
            self.status = status
        }
    }

}

extension IotClientTypes.JobExecutionSummaryForJob: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobExecutionSummary
        case thingArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobExecutionSummary = jobExecutionSummary {
            try encodeContainer.encode(jobExecutionSummary, forKey: .jobExecutionSummary)
        }
        if let thingArn = thingArn {
            try encodeContainer.encode(thingArn, forKey: .thingArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingArn)
        thingArn = thingArnDecoded
        let jobExecutionSummaryDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobExecutionSummary.self, forKey: .jobExecutionSummary)
        jobExecutionSummary = jobExecutionSummaryDecoded
    }
}

extension IotClientTypes.JobExecutionSummaryForJob: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobExecutionSummaryForJob(jobExecutionSummary: \(Swift.String(describing: jobExecutionSummary)), thingArn: \(Swift.String(describing: thingArn)))"}
}

extension IotClientTypes {
    /// <p>Contains a summary of information about job executions for a specific job.</p>
    public struct JobExecutionSummaryForJob: Swift.Equatable {
        /// <p>Contains a subset of information about a job execution.</p>
        public let jobExecutionSummary: IotClientTypes.JobExecutionSummary?
        /// <p>The ARN of the thing on which the job execution is running.</p>
        public let thingArn: Swift.String?

        public init (
            jobExecutionSummary: IotClientTypes.JobExecutionSummary? = nil,
            thingArn: Swift.String? = nil
        )
        {
            self.jobExecutionSummary = jobExecutionSummary
            self.thingArn = thingArn
        }
    }

}

extension IotClientTypes.JobExecutionSummaryForThing: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobExecutionSummary
        case jobId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobExecutionSummary = jobExecutionSummary {
            try encodeContainer.encode(jobExecutionSummary, forKey: .jobExecutionSummary)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobExecutionSummaryDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobExecutionSummary.self, forKey: .jobExecutionSummary)
        jobExecutionSummary = jobExecutionSummaryDecoded
    }
}

extension IotClientTypes.JobExecutionSummaryForThing: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobExecutionSummaryForThing(jobExecutionSummary: \(Swift.String(describing: jobExecutionSummary)), jobId: \(Swift.String(describing: jobId)))"}
}

extension IotClientTypes {
    /// <p>The job execution summary for a thing.</p>
    public struct JobExecutionSummaryForThing: Swift.Equatable {
        /// <p>Contains a subset of information about a job execution.</p>
        public let jobExecutionSummary: IotClientTypes.JobExecutionSummary?
        /// <p>The unique identifier you assigned to this job when it was created.</p>
        public let jobId: Swift.String?

        public init (
            jobExecutionSummary: IotClientTypes.JobExecutionSummary? = nil,
            jobId: Swift.String? = nil
        )
        {
            self.jobExecutionSummary = jobExecutionSummary
            self.jobId = jobId
        }
    }

}

extension IotClientTypes.JobExecutionsRolloutConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exponentialRate
        case maximumPerMinute
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exponentialRate = exponentialRate {
            try encodeContainer.encode(exponentialRate, forKey: .exponentialRate)
        }
        if let maximumPerMinute = maximumPerMinute {
            try encodeContainer.encode(maximumPerMinute, forKey: .maximumPerMinute)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumPerMinuteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPerMinute)
        maximumPerMinute = maximumPerMinuteDecoded
        let exponentialRateDecoded = try containerValues.decodeIfPresent(IotClientTypes.ExponentialRolloutRate.self, forKey: .exponentialRate)
        exponentialRate = exponentialRateDecoded
    }
}

extension IotClientTypes.JobExecutionsRolloutConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobExecutionsRolloutConfig(exponentialRate: \(Swift.String(describing: exponentialRate)), maximumPerMinute: \(Swift.String(describing: maximumPerMinute)))"}
}

extension IotClientTypes {
    /// <p>Allows you to create a staged rollout of a job.</p>
    public struct JobExecutionsRolloutConfig: Swift.Equatable {
        /// <p>The rate of increase for a job rollout.
        ///             This parameter allows you to define an exponential rate for a job rollout.</p>
        public let exponentialRate: IotClientTypes.ExponentialRolloutRate?
        /// <p>The maximum number of things that will be notified of a pending job, per minute.
        ///         This parameter allows you to create a staged rollout.</p>
        public let maximumPerMinute: Swift.Int?

        public init (
            exponentialRate: IotClientTypes.ExponentialRolloutRate? = nil,
            maximumPerMinute: Swift.Int? = nil
        )
        {
            self.exponentialRate = exponentialRate
            self.maximumPerMinute = maximumPerMinute
        }
    }

}

extension IotClientTypes.JobProcessDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numberOfCanceledThings
        case numberOfFailedThings
        case numberOfInProgressThings
        case numberOfQueuedThings
        case numberOfRejectedThings
        case numberOfRemovedThings
        case numberOfSucceededThings
        case numberOfTimedOutThings
        case processingTargets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let numberOfCanceledThings = numberOfCanceledThings {
            try encodeContainer.encode(numberOfCanceledThings, forKey: .numberOfCanceledThings)
        }
        if let numberOfFailedThings = numberOfFailedThings {
            try encodeContainer.encode(numberOfFailedThings, forKey: .numberOfFailedThings)
        }
        if let numberOfInProgressThings = numberOfInProgressThings {
            try encodeContainer.encode(numberOfInProgressThings, forKey: .numberOfInProgressThings)
        }
        if let numberOfQueuedThings = numberOfQueuedThings {
            try encodeContainer.encode(numberOfQueuedThings, forKey: .numberOfQueuedThings)
        }
        if let numberOfRejectedThings = numberOfRejectedThings {
            try encodeContainer.encode(numberOfRejectedThings, forKey: .numberOfRejectedThings)
        }
        if let numberOfRemovedThings = numberOfRemovedThings {
            try encodeContainer.encode(numberOfRemovedThings, forKey: .numberOfRemovedThings)
        }
        if let numberOfSucceededThings = numberOfSucceededThings {
            try encodeContainer.encode(numberOfSucceededThings, forKey: .numberOfSucceededThings)
        }
        if let numberOfTimedOutThings = numberOfTimedOutThings {
            try encodeContainer.encode(numberOfTimedOutThings, forKey: .numberOfTimedOutThings)
        }
        if let processingTargets = processingTargets {
            var processingTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processingTargets)
            for processingtargetnamelist0 in processingTargets {
                try processingTargetsContainer.encode(processingtargetnamelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingTargetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .processingTargets)
        var processingTargetsDecoded0:[Swift.String]? = nil
        if let processingTargetsContainer = processingTargetsContainer {
            processingTargetsDecoded0 = [Swift.String]()
            for string0 in processingTargetsContainer {
                if let string0 = string0 {
                    processingTargetsDecoded0?.append(string0)
                }
            }
        }
        processingTargets = processingTargetsDecoded0
        let numberOfCanceledThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfCanceledThings)
        numberOfCanceledThings = numberOfCanceledThingsDecoded
        let numberOfSucceededThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfSucceededThings)
        numberOfSucceededThings = numberOfSucceededThingsDecoded
        let numberOfFailedThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfFailedThings)
        numberOfFailedThings = numberOfFailedThingsDecoded
        let numberOfRejectedThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfRejectedThings)
        numberOfRejectedThings = numberOfRejectedThingsDecoded
        let numberOfQueuedThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfQueuedThings)
        numberOfQueuedThings = numberOfQueuedThingsDecoded
        let numberOfInProgressThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfInProgressThings)
        numberOfInProgressThings = numberOfInProgressThingsDecoded
        let numberOfRemovedThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfRemovedThings)
        numberOfRemovedThings = numberOfRemovedThingsDecoded
        let numberOfTimedOutThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfTimedOutThings)
        numberOfTimedOutThings = numberOfTimedOutThingsDecoded
    }
}

extension IotClientTypes.JobProcessDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobProcessDetails(numberOfCanceledThings: \(Swift.String(describing: numberOfCanceledThings)), numberOfFailedThings: \(Swift.String(describing: numberOfFailedThings)), numberOfInProgressThings: \(Swift.String(describing: numberOfInProgressThings)), numberOfQueuedThings: \(Swift.String(describing: numberOfQueuedThings)), numberOfRejectedThings: \(Swift.String(describing: numberOfRejectedThings)), numberOfRemovedThings: \(Swift.String(describing: numberOfRemovedThings)), numberOfSucceededThings: \(Swift.String(describing: numberOfSucceededThings)), numberOfTimedOutThings: \(Swift.String(describing: numberOfTimedOutThings)), processingTargets: \(Swift.String(describing: processingTargets)))"}
}

extension IotClientTypes {
    /// <p>The job process details.</p>
    public struct JobProcessDetails: Swift.Equatable {
        /// <p>The number of things that cancelled the job.</p>
        public let numberOfCanceledThings: Swift.Int?
        /// <p>The number of things that failed executing the job.</p>
        public let numberOfFailedThings: Swift.Int?
        /// <p>The number of things currently executing the job.</p>
        public let numberOfInProgressThings: Swift.Int?
        /// <p>The number of things that are awaiting execution of the job.</p>
        public let numberOfQueuedThings: Swift.Int?
        /// <p>The number of things that rejected the job.</p>
        public let numberOfRejectedThings: Swift.Int?
        /// <p>The number of things that are no longer scheduled to execute the job because they have been deleted or
        ///             have been removed from the group that was a target of the job.</p>
        public let numberOfRemovedThings: Swift.Int?
        /// <p>The number of things which successfully completed the job.</p>
        public let numberOfSucceededThings: Swift.Int?
        /// <p>The number of things whose job execution status is <code>TIMED_OUT</code>.</p>
        public let numberOfTimedOutThings: Swift.Int?
        /// <p>The target devices to which the job execution is being rolled out. This value will be null after the job execution has finished rolling out to all the target devices.</p>
        public let processingTargets: [Swift.String]?

        public init (
            numberOfCanceledThings: Swift.Int? = nil,
            numberOfFailedThings: Swift.Int? = nil,
            numberOfInProgressThings: Swift.Int? = nil,
            numberOfQueuedThings: Swift.Int? = nil,
            numberOfRejectedThings: Swift.Int? = nil,
            numberOfRemovedThings: Swift.Int? = nil,
            numberOfSucceededThings: Swift.Int? = nil,
            numberOfTimedOutThings: Swift.Int? = nil,
            processingTargets: [Swift.String]? = nil
        )
        {
            self.numberOfCanceledThings = numberOfCanceledThings
            self.numberOfFailedThings = numberOfFailedThings
            self.numberOfInProgressThings = numberOfInProgressThings
            self.numberOfQueuedThings = numberOfQueuedThings
            self.numberOfRejectedThings = numberOfRejectedThings
            self.numberOfRemovedThings = numberOfRemovedThings
            self.numberOfSucceededThings = numberOfSucceededThings
            self.numberOfTimedOutThings = numberOfTimedOutThings
            self.processingTargets = processingTargets
        }
    }

}

extension IotClientTypes {
    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceled
        case completed
        case deletionInProgress
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .canceled,
                .completed,
                .deletionInProgress,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .completed: return "COMPLETED"
            case .deletionInProgress: return "DELETION_IN_PROGRESS"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobStatus(rawValue: rawValue) ?? JobStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.JobSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completedAt
        case createdAt
        case jobArn
        case jobId
        case lastUpdatedAt
        case status
        case targetSelection
        case thingGroupId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completedAt = completedAt {
            try encodeContainer.encode(completedAt.timeIntervalSince1970, forKey: .completedAt)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let jobArn = jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetSelection = targetSelection {
            try encodeContainer.encode(targetSelection.rawValue, forKey: .targetSelection)
        }
        if let thingGroupId = thingGroupId {
            try encodeContainer.encode(thingGroupId, forKey: .thingGroupId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let thingGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupId)
        thingGroupId = thingGroupIdDecoded
        let targetSelectionDecoded = try containerValues.decodeIfPresent(IotClientTypes.TargetSelection.self, forKey: .targetSelection)
        targetSelection = targetSelectionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let completedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completedAt)
        completedAt = completedAtDecoded
    }
}

extension IotClientTypes.JobSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobSummary(completedAt: \(Swift.String(describing: completedAt)), createdAt: \(Swift.String(describing: createdAt)), jobArn: \(Swift.String(describing: jobArn)), jobId: \(Swift.String(describing: jobId)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), status: \(Swift.String(describing: status)), targetSelection: \(Swift.String(describing: targetSelection)), thingGroupId: \(Swift.String(describing: thingGroupId)))"}
}

extension IotClientTypes {
    /// <p>The job summary.</p>
    public struct JobSummary: Swift.Equatable {
        /// <p>The time, in seconds since the epoch, when the job completed.</p>
        public let completedAt: ClientRuntime.Date?
        /// <p>The time, in seconds since the epoch, when the job was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The job ARN.</p>
        public let jobArn: Swift.String?
        /// <p>The unique identifier you assigned to this job when it was created.</p>
        public let jobId: Swift.String?
        /// <p>The time, in seconds since the epoch, when the job was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The job summary status.</p>
        public let status: IotClientTypes.JobStatus?
        /// <p>Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things
        ///             specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing
        ///             when a change is detected in a target. For example, a job will run on a thing when the thing is added to a
        ///             target group, even after the job was completed by all things originally in the group.</p>
        public let targetSelection: IotClientTypes.TargetSelection?
        /// <p>The ID of the thing group.</p>
        public let thingGroupId: Swift.String?

        public init (
            completedAt: ClientRuntime.Date? = nil,
            createdAt: ClientRuntime.Date? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            status: IotClientTypes.JobStatus? = nil,
            targetSelection: IotClientTypes.TargetSelection? = nil,
            thingGroupId: Swift.String? = nil
        )
        {
            self.completedAt = completedAt
            self.createdAt = createdAt
            self.jobArn = jobArn
            self.jobId = jobId
            self.lastUpdatedAt = lastUpdatedAt
            self.status = status
            self.targetSelection = targetSelection
            self.thingGroupId = thingGroupId
        }
    }

}

extension IotClientTypes.JobTemplateSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case description
        case jobTemplateArn
        case jobTemplateId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let jobTemplateArn = jobTemplateArn {
            try encodeContainer.encode(jobTemplateArn, forKey: .jobTemplateArn)
        }
        if let jobTemplateId = jobTemplateId {
            try encodeContainer.encode(jobTemplateId, forKey: .jobTemplateId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobTemplateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTemplateArn)
        jobTemplateArn = jobTemplateArnDecoded
        let jobTemplateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTemplateId)
        jobTemplateId = jobTemplateIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension IotClientTypes.JobTemplateSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobTemplateSummary(createdAt: \(Swift.String(describing: createdAt)), description: \(Swift.String(describing: description)), jobTemplateArn: \(Swift.String(describing: jobTemplateArn)), jobTemplateId: \(Swift.String(describing: jobTemplateId)))"}
}

extension IotClientTypes {
    /// <p>An object that contains information about the job template.</p>
    public struct JobTemplateSummary: Swift.Equatable {
        /// <p>The time, in seconds since the epoch, when the job template was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>A description of the job template.</p>
        public let description: Swift.String?
        /// <p>The ARN of the job template.</p>
        public let jobTemplateArn: Swift.String?
        /// <p>The unique identifier of the job template.</p>
        public let jobTemplateId: Swift.String?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            jobTemplateArn: Swift.String? = nil,
            jobTemplateId: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.description = description
            self.jobTemplateArn = jobTemplateArn
            self.jobTemplateId = jobTemplateId
        }
    }

}

extension IotClientTypes.KafkaAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientProperties
        case destinationArn
        case key
        case partition
        case topic
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientProperties = clientProperties {
            var clientPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientProperties)
            for (dictKey0, clientproperties0) in clientProperties {
                try clientPropertiesContainer.encode(clientproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let destinationArn = destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let partition = partition {
            try encodeContainer.encode(partition, forKey: .partition)
        }
        if let topic = topic {
            try encodeContainer.encode(topic, forKey: .topic)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let topicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topic)
        topic = topicDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let partitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partition)
        partition = partitionDecoded
        let clientPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientProperties)
        var clientPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let clientPropertiesContainer = clientPropertiesContainer {
            clientPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in clientPropertiesContainer {
                if let string0 = string0 {
                    clientPropertiesDecoded0?[key0] = string0
                }
            }
        }
        clientProperties = clientPropertiesDecoded0
    }
}

extension IotClientTypes.KafkaAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KafkaAction(clientProperties: \(Swift.String(describing: clientProperties)), destinationArn: \(Swift.String(describing: destinationArn)), key: \(Swift.String(describing: key)), partition: \(Swift.String(describing: partition)), topic: \(Swift.String(describing: topic)))"}
}

extension IotClientTypes {
    /// <p>Send messages to an Amazon Managed Streaming for Apache Kafka (Amazon MSK) or self-managed Apache Kafka cluster.</p>
    public struct KafkaAction: Swift.Equatable {
        /// <p>Properties of the Apache Kafka producer client.</p>
        public let clientProperties: [Swift.String:Swift.String]?
        /// <p>The ARN of Kafka action's VPC <code>TopicRuleDestination</code>.</p>
        public let destinationArn: Swift.String?
        /// <p>The Kafka message key.</p>
        public let key: Swift.String?
        /// <p>The Kafka message partition.</p>
        public let partition: Swift.String?
        /// <p>The Kafka topic for messages to be sent to the Kafka broker.</p>
        public let topic: Swift.String?

        public init (
            clientProperties: [Swift.String:Swift.String]? = nil,
            destinationArn: Swift.String? = nil,
            key: Swift.String? = nil,
            partition: Swift.String? = nil,
            topic: Swift.String? = nil
        )
        {
            self.clientProperties = clientProperties
            self.destinationArn = destinationArn
            self.key = key
            self.partition = partition
            self.topic = topic
        }
    }

}

extension IotClientTypes.KeyPair: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case privateKey = "PrivateKey"
        case publicKey = "PublicKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let privateKey = privateKey {
            try encodeContainer.encode(privateKey, forKey: .privateKey)
        }
        if let publicKey = publicKey {
            try encodeContainer.encode(publicKey, forKey: .publicKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
    }
}

extension IotClientTypes.KeyPair: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KeyPair(privateKey: \(Swift.String(describing: privateKey)), publicKey: \(Swift.String(describing: publicKey)))"}
}

extension IotClientTypes {
    /// <p>Describes a key pair.</p>
    public struct KeyPair: Swift.Equatable {
        /// <p>The private key.</p>
        public let privateKey: Swift.String?
        /// <p>The public key.</p>
        public let publicKey: Swift.String?

        public init (
            privateKey: Swift.String? = nil,
            publicKey: Swift.String? = nil
        )
        {
            self.privateKey = privateKey
            self.publicKey = publicKey
        }
    }

}

extension IotClientTypes.KinesisAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case partitionKey
        case roleArn
        case streamName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let partitionKey = partitionKey {
            try encodeContainer.encode(partitionKey, forKey: .partitionKey)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let streamName = streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let partitionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partitionKey)
        partitionKey = partitionKeyDecoded
    }
}

extension IotClientTypes.KinesisAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KinesisAction(partitionKey: \(Swift.String(describing: partitionKey)), roleArn: \(Swift.String(describing: roleArn)), streamName: \(Swift.String(describing: streamName)))"}
}

extension IotClientTypes {
    /// <p>Describes an action to write data to an Amazon Kinesis stream.</p>
    public struct KinesisAction: Swift.Equatable {
        /// <p>The partition key.</p>
        public let partitionKey: Swift.String?
        /// <p>The ARN of the IAM role that grants access to the Amazon Kinesis stream.</p>
        public let roleArn: Swift.String?
        /// <p>The name of the Amazon Kinesis stream.</p>
        public let streamName: Swift.String?

        public init (
            partitionKey: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            streamName: Swift.String? = nil
        )
        {
            self.partitionKey = partitionKey
            self.roleArn = roleArn
            self.streamName = streamName
        }
    }

}

extension IotClientTypes.LambdaAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case functionArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let functionArn = functionArn {
            try encodeContainer.encode(functionArn, forKey: .functionArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionArn)
        functionArn = functionArnDecoded
    }
}

extension IotClientTypes.LambdaAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LambdaAction(functionArn: \(Swift.String(describing: functionArn)))"}
}

extension IotClientTypes {
    /// <p>Describes an action to invoke a Lambda function.</p>
    public struct LambdaAction: Swift.Equatable {
        /// <p>The ARN of the Lambda function.</p>
        public let functionArn: Swift.String?

        public init (
            functionArn: Swift.String? = nil
        )
        {
            self.functionArn = functionArn
        }
    }

}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A limit has been exceeded.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListActiveViolationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListActiveViolationsInput(behaviorCriteriaType: \(Swift.String(describing: behaviorCriteriaType)), listSuppressedAlerts: \(Swift.String(describing: listSuppressedAlerts)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), securityProfileName: \(Swift.String(describing: securityProfileName)), thingName: \(Swift.String(describing: thingName)))"}
}

extension ListActiveViolationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListActiveViolationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListActiveViolationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListActiveViolationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListActiveViolationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListActiveViolationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListActiveViolationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListActiveViolationsOutputError>
}

public struct ListActiveViolationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListActiveViolationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListActiveViolationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListActiveViolationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let securityProfileName = input.operationInput.securityProfileName {
            let securityProfileNameQueryItem = ClientRuntime.URLQueryItem(name: "securityProfileName".urlPercentEncoding(), value: Swift.String(securityProfileName).urlPercentEncoding())
            input.builder.withQueryItem(securityProfileNameQueryItem)
        }
        if let listSuppressedAlerts = input.operationInput.listSuppressedAlerts {
            let listSuppressedAlertsQueryItem = ClientRuntime.URLQueryItem(name: "listSuppressedAlerts".urlPercentEncoding(), value: Swift.String(listSuppressedAlerts).urlPercentEncoding())
            input.builder.withQueryItem(listSuppressedAlertsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let behaviorCriteriaType = input.operationInput.behaviorCriteriaType {
            let behaviorCriteriaTypeQueryItem = ClientRuntime.URLQueryItem(name: "behaviorCriteriaType".urlPercentEncoding(), value: Swift.String(behaviorCriteriaType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(behaviorCriteriaTypeQueryItem)
        }
        if let thingName = input.operationInput.thingName {
            let thingNameQueryItem = ClientRuntime.URLQueryItem(name: "thingName".urlPercentEncoding(), value: Swift.String(thingName).urlPercentEncoding())
            input.builder.withQueryItem(thingNameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListActiveViolationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListActiveViolationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListActiveViolationsOutputError>
}

public struct ListActiveViolationsInput: Swift.Equatable {
    /// <p>
    ///       The criteria for a behavior.
    ///     </p>
    public let behaviorCriteriaType: IotClientTypes.BehaviorCriteriaType?
    /// <p>
    ///       A list of all suppressed alerts.
    ///     </p>
    public let listSuppressedAlerts: Swift.Bool?
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The name of the Device Defender security profile for which violations are listed.</p>
    public let securityProfileName: Swift.String?
    /// <p>The name of the thing whose active violations are listed.</p>
    public let thingName: Swift.String?

    public init (
        behaviorCriteriaType: IotClientTypes.BehaviorCriteriaType? = nil,
        listSuppressedAlerts: Swift.Bool? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        securityProfileName: Swift.String? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.behaviorCriteriaType = behaviorCriteriaType
        self.listSuppressedAlerts = listSuppressedAlerts
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.securityProfileName = securityProfileName
        self.thingName = thingName
    }
}

struct ListActiveViolationsInputBody: Swift.Equatable {
}

extension ListActiveViolationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListActiveViolationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListActiveViolationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListActiveViolationsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListActiveViolationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListActiveViolationsOutputResponse(activeViolations: \(Swift.String(describing: activeViolations)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListActiveViolationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListActiveViolationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activeViolations = output.activeViolations
            self.nextToken = output.nextToken
        } else {
            self.activeViolations = nil
            self.nextToken = nil
        }
    }
}

public struct ListActiveViolationsOutputResponse: Swift.Equatable {
    /// <p>The list of active violations.</p>
    public let activeViolations: [IotClientTypes.ActiveViolation]?
    /// <p>A token that can be used to retrieve the next set of results,
    ///             or <code>null</code> if there are no additional results.</p>
    public let nextToken: Swift.String?

    public init (
        activeViolations: [IotClientTypes.ActiveViolation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.activeViolations = activeViolations
        self.nextToken = nextToken
    }
}

struct ListActiveViolationsOutputResponseBody: Swift.Equatable {
    public let activeViolations: [IotClientTypes.ActiveViolation]?
    public let nextToken: Swift.String?
}

extension ListActiveViolationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeViolations
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeViolationsContainer = try containerValues.decodeIfPresent([IotClientTypes.ActiveViolation?].self, forKey: .activeViolations)
        var activeViolationsDecoded0:[IotClientTypes.ActiveViolation]? = nil
        if let activeViolationsContainer = activeViolationsContainer {
            activeViolationsDecoded0 = [IotClientTypes.ActiveViolation]()
            for structure0 in activeViolationsContainer {
                if let structure0 = structure0 {
                    activeViolationsDecoded0?.append(structure0)
                }
            }
        }
        activeViolations = activeViolationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAttachedPoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAttachedPoliciesInput(marker: \(Swift.String(describing: marker)), pageSize: \(Swift.String(describing: pageSize)), recursive: \(Swift.String(describing: recursive)), target: \(Swift.String(describing: target)))"}
}

extension ListAttachedPoliciesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListAttachedPoliciesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAttachedPoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAttachedPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAttachedPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAttachedPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAttachedPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAttachedPoliciesOutputError>
}

public struct ListAttachedPoliciesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAttachedPoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAttachedPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAttachedPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "pageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        if input.operationInput.recursive != false {
            let recursiveQueryItem = ClientRuntime.URLQueryItem(name: "recursive".urlPercentEncoding(), value: Swift.String(input.operationInput.recursive).urlPercentEncoding())
            input.builder.withQueryItem(recursiveQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAttachedPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAttachedPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAttachedPoliciesOutputError>
}

public struct ListAttachedPoliciesInput: Swift.Equatable {
    /// <p>The token to retrieve the next set of results.</p>
    public let marker: Swift.String?
    /// <p>The maximum number of results to be returned per request.</p>
    public let pageSize: Swift.Int?
    /// <p>When true, recursively list attached policies.</p>
    public let recursive: Swift.Bool
    /// <p>The group or principal for which the policies will be listed. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).</p>
    public let target: Swift.String?

    public init (
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        recursive: Swift.Bool = false,
        target: Swift.String? = nil
    )
    {
        self.marker = marker
        self.pageSize = pageSize
        self.recursive = recursive
        self.target = target
    }
}

struct ListAttachedPoliciesInputBody: Swift.Equatable {
}

extension ListAttachedPoliciesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListAttachedPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAttachedPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAttachedPoliciesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAttachedPoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAttachedPoliciesOutputResponse(nextMarker: \(Swift.String(describing: nextMarker)), policies: \(Swift.String(describing: policies)))"}
}

extension ListAttachedPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAttachedPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.policies = output.policies
        } else {
            self.nextMarker = nil
            self.policies = nil
        }
    }
}

public struct ListAttachedPoliciesOutputResponse: Swift.Equatable {
    /// <p>The token to retrieve the next set of results, or ``null`` if there are no more
    ///          results.</p>
    public let nextMarker: Swift.String?
    /// <p>The policies.</p>
    public let policies: [IotClientTypes.Policy]?

    public init (
        nextMarker: Swift.String? = nil,
        policies: [IotClientTypes.Policy]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.policies = policies
    }
}

struct ListAttachedPoliciesOutputResponseBody: Swift.Equatable {
    public let policies: [IotClientTypes.Policy]?
    public let nextMarker: Swift.String?
}

extension ListAttachedPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker
        case policies
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policiesContainer = try containerValues.decodeIfPresent([IotClientTypes.Policy?].self, forKey: .policies)
        var policiesDecoded0:[IotClientTypes.Policy]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [IotClientTypes.Policy]()
            for structure0 in policiesContainer {
                if let structure0 = structure0 {
                    policiesDecoded0?.append(structure0)
                }
            }
        }
        policies = policiesDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

public struct ListAuditFindingsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAuditFindingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAuditFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAuditFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAuditFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAuditFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAuditFindingsOutputError>
}

extension ListAuditFindingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAuditFindingsInput(checkName: \(Swift.String(describing: checkName)), endTime: \(Swift.String(describing: endTime)), listSuppressedFindings: \(Swift.String(describing: listSuppressedFindings)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), resourceIdentifier: \(Swift.String(describing: resourceIdentifier)), startTime: \(Swift.String(describing: startTime)), taskId: \(Swift.String(describing: taskId)))"}
}

extension ListAuditFindingsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkName
        case endTime
        case listSuppressedFindings
        case maxResults
        case nextToken
        case resourceIdentifier
        case startTime
        case taskId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkName = checkName {
            try encodeContainer.encode(checkName, forKey: .checkName)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if listSuppressedFindings != false {
            try encodeContainer.encode(listSuppressedFindings, forKey: .listSuppressedFindings)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceIdentifier = resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
    }
}

public struct ListAuditFindingsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAuditFindingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAuditFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAuditFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAuditFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAuditFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAuditFindingsOutputError>
}

public struct ListAuditFindingsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAuditFindingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAuditFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAuditFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAuditFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAuditFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAuditFindingsOutputError>
}

public struct ListAuditFindingsInput: Swift.Equatable {
    /// <p>A filter to limit results to the findings for the specified audit check.</p>
    public let checkName: Swift.String?
    /// <p>A filter to limit results to those found before the specified time. You must
    ///             specify either the startTime and endTime or the taskId, but not both.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>
    ///       Boolean flag indicating whether only the suppressed findings or the unsuppressed findings should be listed. If this parameter isn't provided, the response will list both suppressed and unsuppressed findings.
    ///     </p>
    public let listSuppressedFindings: Swift.Bool
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>Information identifying the noncompliant resource.</p>
    public let resourceIdentifier: IotClientTypes.ResourceIdentifier?
    /// <p>A filter to limit results to those found after the specified time. You must
    ///             specify either the startTime and endTime or the taskId, but not both.</p>
    public let startTime: ClientRuntime.Date?
    /// <p>A filter to limit results to the audit with the specified ID. You must
    ///             specify either the taskId or the startTime and endTime, but not both.</p>
    public let taskId: Swift.String?

    public init (
        checkName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        listSuppressedFindings: Swift.Bool = false,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceIdentifier: IotClientTypes.ResourceIdentifier? = nil,
        startTime: ClientRuntime.Date? = nil,
        taskId: Swift.String? = nil
    )
    {
        self.checkName = checkName
        self.endTime = endTime
        self.listSuppressedFindings = listSuppressedFindings
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceIdentifier = resourceIdentifier
        self.startTime = startTime
        self.taskId = taskId
    }
}

struct ListAuditFindingsInputBody: Swift.Equatable {
    public let taskId: Swift.String?
    public let checkName: Swift.String?
    public let resourceIdentifier: IotClientTypes.ResourceIdentifier?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
    public let startTime: ClientRuntime.Date?
    public let endTime: ClientRuntime.Date?
    public let listSuppressedFindings: Swift.Bool
}

extension ListAuditFindingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkName
        case endTime
        case listSuppressedFindings
        case maxResults
        case nextToken
        case resourceIdentifier
        case startTime
        case taskId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let checkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkName)
        checkName = checkNameDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(IotClientTypes.ResourceIdentifier.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let listSuppressedFindingsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .listSuppressedFindings)
        listSuppressedFindings = listSuppressedFindingsDecoded
    }
}

extension ListAuditFindingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAuditFindingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAuditFindingsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAuditFindingsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAuditFindingsOutputResponse(findings: \(Swift.String(describing: findings)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListAuditFindingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAuditFindingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.findings = output.findings
            self.nextToken = output.nextToken
        } else {
            self.findings = nil
            self.nextToken = nil
        }
    }
}

public struct ListAuditFindingsOutputResponse: Swift.Equatable {
    /// <p>The findings (results) of the audit.</p>
    public let findings: [IotClientTypes.AuditFinding]?
    /// <p>A token that can be used to retrieve the next set of results, or <code>null</code>
    ///             if there are no additional results.</p>
    public let nextToken: Swift.String?

    public init (
        findings: [IotClientTypes.AuditFinding]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.findings = findings
        self.nextToken = nextToken
    }
}

struct ListAuditFindingsOutputResponseBody: Swift.Equatable {
    public let findings: [IotClientTypes.AuditFinding]?
    public let nextToken: Swift.String?
}

extension ListAuditFindingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case findings
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingsContainer = try containerValues.decodeIfPresent([IotClientTypes.AuditFinding?].self, forKey: .findings)
        var findingsDecoded0:[IotClientTypes.AuditFinding]? = nil
        if let findingsContainer = findingsContainer {
            findingsDecoded0 = [IotClientTypes.AuditFinding]()
            for structure0 in findingsContainer {
                if let structure0 = structure0 {
                    findingsDecoded0?.append(structure0)
                }
            }
        }
        findings = findingsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAuditMitigationActionsExecutionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAuditMitigationActionsExecutionsInput(actionStatus: \(Swift.String(describing: actionStatus)), findingId: \(Swift.String(describing: findingId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), taskId: \(Swift.String(describing: taskId)))"}
}

extension ListAuditMitigationActionsExecutionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListAuditMitigationActionsExecutionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAuditMitigationActionsExecutionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAuditMitigationActionsExecutionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAuditMitigationActionsExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAuditMitigationActionsExecutionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAuditMitigationActionsExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAuditMitigationActionsExecutionsOutputError>
}

public struct ListAuditMitigationActionsExecutionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAuditMitigationActionsExecutionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAuditMitigationActionsExecutionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAuditMitigationActionsExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let actionStatus = input.operationInput.actionStatus {
            let actionStatusQueryItem = ClientRuntime.URLQueryItem(name: "actionStatus".urlPercentEncoding(), value: Swift.String(actionStatus.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(actionStatusQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let findingId = input.operationInput.findingId {
            let findingIdQueryItem = ClientRuntime.URLQueryItem(name: "findingId".urlPercentEncoding(), value: Swift.String(findingId).urlPercentEncoding())
            input.builder.withQueryItem(findingIdQueryItem)
        }
        if let taskId = input.operationInput.taskId {
            let taskIdQueryItem = ClientRuntime.URLQueryItem(name: "taskId".urlPercentEncoding(), value: Swift.String(taskId).urlPercentEncoding())
            input.builder.withQueryItem(taskIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAuditMitigationActionsExecutionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAuditMitigationActionsExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAuditMitigationActionsExecutionsOutputError>
}

public struct ListAuditMitigationActionsExecutionsInput: Swift.Equatable {
    /// <p>Specify this filter to limit results to those with a specific status.</p>
    public let actionStatus: IotClientTypes.AuditMitigationActionsExecutionStatus?
    /// <p>Specify this filter to limit results to those that were applied to a specific audit finding.</p>
    public let findingId: Swift.String?
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>Specify this filter to limit results to actions for a specific audit mitigation actions task.</p>
    public let taskId: Swift.String?

    public init (
        actionStatus: IotClientTypes.AuditMitigationActionsExecutionStatus? = nil,
        findingId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        taskId: Swift.String? = nil
    )
    {
        self.actionStatus = actionStatus
        self.findingId = findingId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.taskId = taskId
    }
}

struct ListAuditMitigationActionsExecutionsInputBody: Swift.Equatable {
}

extension ListAuditMitigationActionsExecutionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListAuditMitigationActionsExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAuditMitigationActionsExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAuditMitigationActionsExecutionsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAuditMitigationActionsExecutionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAuditMitigationActionsExecutionsOutputResponse(actionsExecutions: \(Swift.String(describing: actionsExecutions)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListAuditMitigationActionsExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAuditMitigationActionsExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionsExecutions = output.actionsExecutions
            self.nextToken = output.nextToken
        } else {
            self.actionsExecutions = nil
            self.nextToken = nil
        }
    }
}

public struct ListAuditMitigationActionsExecutionsOutputResponse: Swift.Equatable {
    /// <p>A set of task execution results based on the input parameters. Details include the mitigation action applied, start time, and task status.</p>
    public let actionsExecutions: [IotClientTypes.AuditMitigationActionExecutionMetadata]?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?

    public init (
        actionsExecutions: [IotClientTypes.AuditMitigationActionExecutionMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.actionsExecutions = actionsExecutions
        self.nextToken = nextToken
    }
}

struct ListAuditMitigationActionsExecutionsOutputResponseBody: Swift.Equatable {
    public let actionsExecutions: [IotClientTypes.AuditMitigationActionExecutionMetadata]?
    public let nextToken: Swift.String?
}

extension ListAuditMitigationActionsExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsExecutions
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionsExecutionsContainer = try containerValues.decodeIfPresent([IotClientTypes.AuditMitigationActionExecutionMetadata?].self, forKey: .actionsExecutions)
        var actionsExecutionsDecoded0:[IotClientTypes.AuditMitigationActionExecutionMetadata]? = nil
        if let actionsExecutionsContainer = actionsExecutionsContainer {
            actionsExecutionsDecoded0 = [IotClientTypes.AuditMitigationActionExecutionMetadata]()
            for structure0 in actionsExecutionsContainer {
                if let structure0 = structure0 {
                    actionsExecutionsDecoded0?.append(structure0)
                }
            }
        }
        actionsExecutions = actionsExecutionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAuditMitigationActionsTasksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAuditMitigationActionsTasksInput(auditTaskId: \(Swift.String(describing: auditTaskId)), endTime: \(Swift.String(describing: endTime)), findingId: \(Swift.String(describing: findingId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), startTime: \(Swift.String(describing: startTime)), taskStatus: \(Swift.String(describing: taskStatus)))"}
}

extension ListAuditMitigationActionsTasksInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListAuditMitigationActionsTasksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAuditMitigationActionsTasksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAuditMitigationActionsTasksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAuditMitigationActionsTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAuditMitigationActionsTasksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAuditMitigationActionsTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAuditMitigationActionsTasksOutputError>
}

public struct ListAuditMitigationActionsTasksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAuditMitigationActionsTasksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAuditMitigationActionsTasksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAuditMitigationActionsTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let findingId = input.operationInput.findingId {
            let findingIdQueryItem = ClientRuntime.URLQueryItem(name: "findingId".urlPercentEncoding(), value: Swift.String(findingId).urlPercentEncoding())
            input.builder.withQueryItem(findingIdQueryItem)
        }
        if let startTime = input.operationInput.startTime {
            let startTimeQueryItem = ClientRuntime.URLQueryItem(name: "startTime".urlPercentEncoding(), value: Swift.String(startTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(startTimeQueryItem)
        }
        if let endTime = input.operationInput.endTime {
            let endTimeQueryItem = ClientRuntime.URLQueryItem(name: "endTime".urlPercentEncoding(), value: Swift.String(endTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(endTimeQueryItem)
        }
        if let auditTaskId = input.operationInput.auditTaskId {
            let auditTaskIdQueryItem = ClientRuntime.URLQueryItem(name: "auditTaskId".urlPercentEncoding(), value: Swift.String(auditTaskId).urlPercentEncoding())
            input.builder.withQueryItem(auditTaskIdQueryItem)
        }
        if let taskStatus = input.operationInput.taskStatus {
            let taskStatusQueryItem = ClientRuntime.URLQueryItem(name: "taskStatus".urlPercentEncoding(), value: Swift.String(taskStatus.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(taskStatusQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAuditMitigationActionsTasksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAuditMitigationActionsTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAuditMitigationActionsTasksOutputError>
}

public struct ListAuditMitigationActionsTasksInput: Swift.Equatable {
    /// <p>Specify this filter to limit results to tasks that were applied to results for a specific audit.</p>
    public let auditTaskId: Swift.String?
    /// <p>Specify this filter to limit results to tasks that were completed or canceled on or before a specific date and time.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>Specify this filter to limit results to tasks that were applied to a specific audit finding.</p>
    public let findingId: Swift.String?
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>Specify this filter to limit results to tasks that began on or after a specific date and time.</p>
    public let startTime: ClientRuntime.Date?
    /// <p>Specify this filter to limit results to tasks that are in a specific state.</p>
    public let taskStatus: IotClientTypes.AuditMitigationActionsTaskStatus?

    public init (
        auditTaskId: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        findingId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        taskStatus: IotClientTypes.AuditMitigationActionsTaskStatus? = nil
    )
    {
        self.auditTaskId = auditTaskId
        self.endTime = endTime
        self.findingId = findingId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.startTime = startTime
        self.taskStatus = taskStatus
    }
}

struct ListAuditMitigationActionsTasksInputBody: Swift.Equatable {
}

extension ListAuditMitigationActionsTasksInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListAuditMitigationActionsTasksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAuditMitigationActionsTasksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAuditMitigationActionsTasksOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAuditMitigationActionsTasksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAuditMitigationActionsTasksOutputResponse(nextToken: \(Swift.String(describing: nextToken)), tasks: \(Swift.String(describing: tasks)))"}
}

extension ListAuditMitigationActionsTasksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAuditMitigationActionsTasksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tasks = output.tasks
        } else {
            self.nextToken = nil
            self.tasks = nil
        }
    }
}

public struct ListAuditMitigationActionsTasksOutputResponse: Swift.Equatable {
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The collection of audit mitigation tasks that matched the filter criteria.</p>
    public let tasks: [IotClientTypes.AuditMitigationActionsTaskMetadata]?

    public init (
        nextToken: Swift.String? = nil,
        tasks: [IotClientTypes.AuditMitigationActionsTaskMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.tasks = tasks
    }
}

struct ListAuditMitigationActionsTasksOutputResponseBody: Swift.Equatable {
    public let tasks: [IotClientTypes.AuditMitigationActionsTaskMetadata]?
    public let nextToken: Swift.String?
}

extension ListAuditMitigationActionsTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case tasks
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tasksContainer = try containerValues.decodeIfPresent([IotClientTypes.AuditMitigationActionsTaskMetadata?].self, forKey: .tasks)
        var tasksDecoded0:[IotClientTypes.AuditMitigationActionsTaskMetadata]? = nil
        if let tasksContainer = tasksContainer {
            tasksDecoded0 = [IotClientTypes.AuditMitigationActionsTaskMetadata]()
            for structure0 in tasksContainer {
                if let structure0 = structure0 {
                    tasksDecoded0?.append(structure0)
                }
            }
        }
        tasks = tasksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListAuditSuppressionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAuditSuppressionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAuditSuppressionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAuditSuppressionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAuditSuppressionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAuditSuppressionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAuditSuppressionsOutputError>
}

extension ListAuditSuppressionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAuditSuppressionsInput(ascendingOrder: \(Swift.String(describing: ascendingOrder)), checkName: \(Swift.String(describing: checkName)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), resourceIdentifier: \(Swift.String(describing: resourceIdentifier)))"}
}

extension ListAuditSuppressionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ascendingOrder
        case checkName
        case maxResults
        case nextToken
        case resourceIdentifier
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if ascendingOrder != false {
            try encodeContainer.encode(ascendingOrder, forKey: .ascendingOrder)
        }
        if let checkName = checkName {
            try encodeContainer.encode(checkName, forKey: .checkName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceIdentifier = resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
    }
}

public struct ListAuditSuppressionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAuditSuppressionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAuditSuppressionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAuditSuppressionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAuditSuppressionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAuditSuppressionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAuditSuppressionsOutputError>
}

public struct ListAuditSuppressionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAuditSuppressionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAuditSuppressionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAuditSuppressionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAuditSuppressionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAuditSuppressionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAuditSuppressionsOutputError>
}

public struct ListAuditSuppressionsInput: Swift.Equatable {
    /// <p>
    ///       Determines whether suppressions are listed in ascending order by expiration date or not. If parameter isn't provided, <code>ascendingOrder=true</code>.
    ///     </p>
    public let ascendingOrder: Swift.Bool
    /// <p>An audit check name. Checks must be enabled
    ///         for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list
    ///         of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code>
    ///         to select which checks are enabled.)</p>
    public let checkName: Swift.String?
    /// <p>
    ///       The maximum number of results to return at one time. The default is 25.
    ///     </p>
    public let maxResults: Swift.Int?
    /// <p>
    ///       The token for the next set of results.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>Information that identifies the noncompliant resource.</p>
    public let resourceIdentifier: IotClientTypes.ResourceIdentifier?

    public init (
        ascendingOrder: Swift.Bool = false,
        checkName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceIdentifier: IotClientTypes.ResourceIdentifier? = nil
    )
    {
        self.ascendingOrder = ascendingOrder
        self.checkName = checkName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceIdentifier = resourceIdentifier
    }
}

struct ListAuditSuppressionsInputBody: Swift.Equatable {
    public let checkName: Swift.String?
    public let resourceIdentifier: IotClientTypes.ResourceIdentifier?
    public let ascendingOrder: Swift.Bool
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
}

extension ListAuditSuppressionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ascendingOrder
        case checkName
        case maxResults
        case nextToken
        case resourceIdentifier
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkName)
        checkName = checkNameDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(IotClientTypes.ResourceIdentifier.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
        let ascendingOrderDecoded = try containerValues.decode(Swift.Bool.self, forKey: .ascendingOrder)
        ascendingOrder = ascendingOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListAuditSuppressionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAuditSuppressionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAuditSuppressionsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAuditSuppressionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAuditSuppressionsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), suppressions: \(Swift.String(describing: suppressions)))"}
}

extension ListAuditSuppressionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAuditSuppressionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.suppressions = output.suppressions
        } else {
            self.nextToken = nil
            self.suppressions = nil
        }
    }
}

public struct ListAuditSuppressionsOutputResponse: Swift.Equatable {
    /// <p>
    ///       A token that can be used to retrieve the next set of results, or <code>null</code> if there are no additional results.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>
    ///       List of audit suppressions.
    ///     </p>
    public let suppressions: [IotClientTypes.AuditSuppression]?

    public init (
        nextToken: Swift.String? = nil,
        suppressions: [IotClientTypes.AuditSuppression]? = nil
    )
    {
        self.nextToken = nextToken
        self.suppressions = suppressions
    }
}

struct ListAuditSuppressionsOutputResponseBody: Swift.Equatable {
    public let suppressions: [IotClientTypes.AuditSuppression]?
    public let nextToken: Swift.String?
}

extension ListAuditSuppressionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case suppressions
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressionsContainer = try containerValues.decodeIfPresent([IotClientTypes.AuditSuppression?].self, forKey: .suppressions)
        var suppressionsDecoded0:[IotClientTypes.AuditSuppression]? = nil
        if let suppressionsContainer = suppressionsContainer {
            suppressionsDecoded0 = [IotClientTypes.AuditSuppression]()
            for structure0 in suppressionsContainer {
                if let structure0 = structure0 {
                    suppressionsDecoded0?.append(structure0)
                }
            }
        }
        suppressions = suppressionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAuditTasksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAuditTasksInput(endTime: \(Swift.String(describing: endTime)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), startTime: \(Swift.String(describing: startTime)), taskStatus: \(Swift.String(describing: taskStatus)), taskType: \(Swift.String(describing: taskType)))"}
}

extension ListAuditTasksInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListAuditTasksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAuditTasksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAuditTasksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAuditTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAuditTasksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAuditTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAuditTasksOutputError>
}

public struct ListAuditTasksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAuditTasksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAuditTasksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAuditTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let taskType = input.operationInput.taskType {
            let taskTypeQueryItem = ClientRuntime.URLQueryItem(name: "taskType".urlPercentEncoding(), value: Swift.String(taskType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(taskTypeQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let startTime = input.operationInput.startTime {
            let startTimeQueryItem = ClientRuntime.URLQueryItem(name: "startTime".urlPercentEncoding(), value: Swift.String(startTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(startTimeQueryItem)
        }
        if let endTime = input.operationInput.endTime {
            let endTimeQueryItem = ClientRuntime.URLQueryItem(name: "endTime".urlPercentEncoding(), value: Swift.String(endTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(endTimeQueryItem)
        }
        if let taskStatus = input.operationInput.taskStatus {
            let taskStatusQueryItem = ClientRuntime.URLQueryItem(name: "taskStatus".urlPercentEncoding(), value: Swift.String(taskStatus.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(taskStatusQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAuditTasksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAuditTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAuditTasksOutputError>
}

public struct ListAuditTasksInput: Swift.Equatable {
    /// <p>The end of the time period.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The beginning of the time period. Audit information is retained for a
    ///               limited time (90 days). Requesting a start time prior to what is retained
    ///               results in an "InvalidRequestException".</p>
    public let startTime: ClientRuntime.Date?
    /// <p>A filter to limit the output to audits with the specified completion
    ///             status: can be one of "IN_PROGRESS", "COMPLETED", "FAILED", or "CANCELED".</p>
    public let taskStatus: IotClientTypes.AuditTaskStatus?
    /// <p>A filter to limit the output to the specified type of audit: can be one of
    ///             "ON_DEMAND_AUDIT_TASK" or "SCHEDULED__AUDIT_TASK".</p>
    public let taskType: IotClientTypes.AuditTaskType?

    public init (
        endTime: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        taskStatus: IotClientTypes.AuditTaskStatus? = nil,
        taskType: IotClientTypes.AuditTaskType? = nil
    )
    {
        self.endTime = endTime
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.startTime = startTime
        self.taskStatus = taskStatus
        self.taskType = taskType
    }
}

struct ListAuditTasksInputBody: Swift.Equatable {
}

extension ListAuditTasksInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListAuditTasksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAuditTasksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAuditTasksOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAuditTasksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAuditTasksOutputResponse(nextToken: \(Swift.String(describing: nextToken)), tasks: \(Swift.String(describing: tasks)))"}
}

extension ListAuditTasksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAuditTasksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tasks = output.tasks
        } else {
            self.nextToken = nil
            self.tasks = nil
        }
    }
}

public struct ListAuditTasksOutputResponse: Swift.Equatable {
    /// <p>A token that can be used to retrieve the next set of results, or <code>null</code>
    ///             if there are no additional results.</p>
    public let nextToken: Swift.String?
    /// <p>The audits that were performed during the specified time period.</p>
    public let tasks: [IotClientTypes.AuditTaskMetadata]?

    public init (
        nextToken: Swift.String? = nil,
        tasks: [IotClientTypes.AuditTaskMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.tasks = tasks
    }
}

struct ListAuditTasksOutputResponseBody: Swift.Equatable {
    public let tasks: [IotClientTypes.AuditTaskMetadata]?
    public let nextToken: Swift.String?
}

extension ListAuditTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case tasks
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tasksContainer = try containerValues.decodeIfPresent([IotClientTypes.AuditTaskMetadata?].self, forKey: .tasks)
        var tasksDecoded0:[IotClientTypes.AuditTaskMetadata]? = nil
        if let tasksContainer = tasksContainer {
            tasksDecoded0 = [IotClientTypes.AuditTaskMetadata]()
            for structure0 in tasksContainer {
                if let structure0 = structure0 {
                    tasksDecoded0?.append(structure0)
                }
            }
        }
        tasks = tasksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAuthorizersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAuthorizersInput(ascendingOrder: \(Swift.String(describing: ascendingOrder)), marker: \(Swift.String(describing: marker)), pageSize: \(Swift.String(describing: pageSize)), status: \(Swift.String(describing: status)))"}
}

extension ListAuthorizersInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListAuthorizersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAuthorizersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAuthorizersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAuthorizersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAuthorizersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAuthorizersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAuthorizersOutputError>
}

public struct ListAuthorizersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAuthorizersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAuthorizersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAuthorizersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.ascendingOrder != false {
            let ascendingOrderQueryItem = ClientRuntime.URLQueryItem(name: "isAscendingOrder".urlPercentEncoding(), value: Swift.String(input.operationInput.ascendingOrder).urlPercentEncoding())
            input.builder.withQueryItem(ascendingOrderQueryItem)
        }
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "pageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        if let status = input.operationInput.status {
            let statusQueryItem = ClientRuntime.URLQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAuthorizersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAuthorizersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAuthorizersOutputError>
}

public struct ListAuthorizersInput: Swift.Equatable {
    /// <p>Return the list of authorizers in ascending alphabetical order.</p>
    public let ascendingOrder: Swift.Bool
    /// <p>A marker used to get the next set of results.</p>
    public let marker: Swift.String?
    /// <p>The maximum number of results to return at one time.</p>
    public let pageSize: Swift.Int?
    /// <p>The status of the list authorizers request.</p>
    public let status: IotClientTypes.AuthorizerStatus?

    public init (
        ascendingOrder: Swift.Bool = false,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        status: IotClientTypes.AuthorizerStatus? = nil
    )
    {
        self.ascendingOrder = ascendingOrder
        self.marker = marker
        self.pageSize = pageSize
        self.status = status
    }
}

struct ListAuthorizersInputBody: Swift.Equatable {
}

extension ListAuthorizersInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListAuthorizersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAuthorizersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAuthorizersOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAuthorizersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAuthorizersOutputResponse(authorizers: \(Swift.String(describing: authorizers)), nextMarker: \(Swift.String(describing: nextMarker)))"}
}

extension ListAuthorizersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAuthorizersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authorizers = output.authorizers
            self.nextMarker = output.nextMarker
        } else {
            self.authorizers = nil
            self.nextMarker = nil
        }
    }
}

public struct ListAuthorizersOutputResponse: Swift.Equatable {
    /// <p>The authorizers.</p>
    public let authorizers: [IotClientTypes.AuthorizerSummary]?
    /// <p>A marker used to get the next set of results.</p>
    public let nextMarker: Swift.String?

    public init (
        authorizers: [IotClientTypes.AuthorizerSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.authorizers = authorizers
        self.nextMarker = nextMarker
    }
}

struct ListAuthorizersOutputResponseBody: Swift.Equatable {
    public let authorizers: [IotClientTypes.AuthorizerSummary]?
    public let nextMarker: Swift.String?
}

extension ListAuthorizersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizers
        case nextMarker
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizersContainer = try containerValues.decodeIfPresent([IotClientTypes.AuthorizerSummary?].self, forKey: .authorizers)
        var authorizersDecoded0:[IotClientTypes.AuthorizerSummary]? = nil
        if let authorizersContainer = authorizersContainer {
            authorizersDecoded0 = [IotClientTypes.AuthorizerSummary]()
            for structure0 in authorizersContainer {
                if let structure0 = structure0 {
                    authorizersDecoded0?.append(structure0)
                }
            }
        }
        authorizers = authorizersDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension ListBillingGroupsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBillingGroupsInput(maxResults: \(Swift.String(describing: maxResults)), namePrefixFilter: \(Swift.String(describing: namePrefixFilter)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListBillingGroupsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListBillingGroupsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBillingGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBillingGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBillingGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBillingGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBillingGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBillingGroupsOutputError>
}

public struct ListBillingGroupsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBillingGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBillingGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBillingGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let namePrefixFilter = input.operationInput.namePrefixFilter {
            let namePrefixFilterQueryItem = ClientRuntime.URLQueryItem(name: "namePrefixFilter".urlPercentEncoding(), value: Swift.String(namePrefixFilter).urlPercentEncoding())
            input.builder.withQueryItem(namePrefixFilterQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBillingGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBillingGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBillingGroupsOutputError>
}

public struct ListBillingGroupsInput: Swift.Equatable {
    /// <p>The maximum number of results to return per request.</p>
    public let maxResults: Swift.Int?
    /// <p>Limit the results to billing groups whose names have the given prefix.</p>
    public let namePrefixFilter: Swift.String?
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    /// 			value from a previous response; otherwise <b>null</b> to receive
    /// 			the first set of results.</p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        namePrefixFilter: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.namePrefixFilter = namePrefixFilter
        self.nextToken = nextToken
    }
}

struct ListBillingGroupsInputBody: Swift.Equatable {
}

extension ListBillingGroupsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListBillingGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListBillingGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBillingGroupsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBillingGroupsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBillingGroupsOutputResponse(billingGroups: \(Swift.String(describing: billingGroups)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListBillingGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListBillingGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.billingGroups = output.billingGroups
            self.nextToken = output.nextToken
        } else {
            self.billingGroups = nil
            self.nextToken = nil
        }
    }
}

public struct ListBillingGroupsOutputResponse: Swift.Equatable {
    /// <p>The list of billing groups.</p>
    public let billingGroups: [IotClientTypes.GroupNameAndArn]?
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    public let nextToken: Swift.String?

    public init (
        billingGroups: [IotClientTypes.GroupNameAndArn]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.billingGroups = billingGroups
        self.nextToken = nextToken
    }
}

struct ListBillingGroupsOutputResponseBody: Swift.Equatable {
    public let billingGroups: [IotClientTypes.GroupNameAndArn]?
    public let nextToken: Swift.String?
}

extension ListBillingGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingGroups
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let billingGroupsContainer = try containerValues.decodeIfPresent([IotClientTypes.GroupNameAndArn?].self, forKey: .billingGroups)
        var billingGroupsDecoded0:[IotClientTypes.GroupNameAndArn]? = nil
        if let billingGroupsContainer = billingGroupsContainer {
            billingGroupsDecoded0 = [IotClientTypes.GroupNameAndArn]()
            for structure0 in billingGroupsContainer {
                if let structure0 = structure0 {
                    billingGroupsDecoded0?.append(structure0)
                }
            }
        }
        billingGroups = billingGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListCACertificatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCACertificatesInput(ascendingOrder: \(Swift.String(describing: ascendingOrder)), marker: \(Swift.String(describing: marker)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListCACertificatesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListCACertificatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCACertificatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCACertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCACertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCACertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCACertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCACertificatesOutputError>
}

public struct ListCACertificatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCACertificatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCACertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCACertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.ascendingOrder != false {
            let ascendingOrderQueryItem = ClientRuntime.URLQueryItem(name: "isAscendingOrder".urlPercentEncoding(), value: Swift.String(input.operationInput.ascendingOrder).urlPercentEncoding())
            input.builder.withQueryItem(ascendingOrderQueryItem)
        }
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "pageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCACertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCACertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCACertificatesOutputError>
}

/// <p>Input for the ListCACertificates operation.</p>
public struct ListCACertificatesInput: Swift.Equatable {
    /// <p>Determines the order of the results.</p>
    public let ascendingOrder: Swift.Bool
    /// <p>The marker for the next set of results.</p>
    public let marker: Swift.String?
    /// <p>The result page size.</p>
    public let pageSize: Swift.Int?

    public init (
        ascendingOrder: Swift.Bool = false,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.ascendingOrder = ascendingOrder
        self.marker = marker
        self.pageSize = pageSize
    }
}

struct ListCACertificatesInputBody: Swift.Equatable {
}

extension ListCACertificatesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListCACertificatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCACertificatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCACertificatesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCACertificatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCACertificatesOutputResponse(certificates: \(Swift.String(describing: certificates)), nextMarker: \(Swift.String(describing: nextMarker)))"}
}

extension ListCACertificatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCACertificatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificates = output.certificates
            self.nextMarker = output.nextMarker
        } else {
            self.certificates = nil
            self.nextMarker = nil
        }
    }
}

/// <p>The output from the ListCACertificates operation.</p>
public struct ListCACertificatesOutputResponse: Swift.Equatable {
    /// <p>The CA certificates registered in your AWS account.</p>
    public let certificates: [IotClientTypes.CACertificate]?
    /// <p>The current position within the list of CA certificates.</p>
    public let nextMarker: Swift.String?

    public init (
        certificates: [IotClientTypes.CACertificate]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.certificates = certificates
        self.nextMarker = nextMarker
    }
}

struct ListCACertificatesOutputResponseBody: Swift.Equatable {
    public let certificates: [IotClientTypes.CACertificate]?
    public let nextMarker: Swift.String?
}

extension ListCACertificatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificates
        case nextMarker
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificatesContainer = try containerValues.decodeIfPresent([IotClientTypes.CACertificate?].self, forKey: .certificates)
        var certificatesDecoded0:[IotClientTypes.CACertificate]? = nil
        if let certificatesContainer = certificatesContainer {
            certificatesDecoded0 = [IotClientTypes.CACertificate]()
            for structure0 in certificatesContainer {
                if let structure0 = structure0 {
                    certificatesDecoded0?.append(structure0)
                }
            }
        }
        certificates = certificatesDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension ListCertificatesByCAInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCertificatesByCAInput(ascendingOrder: \(Swift.String(describing: ascendingOrder)), caCertificateId: \(Swift.String(describing: caCertificateId)), marker: \(Swift.String(describing: marker)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListCertificatesByCAInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListCertificatesByCAInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCertificatesByCAInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCertificatesByCAInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCertificatesByCAOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCertificatesByCAInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCertificatesByCAOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCertificatesByCAOutputError>
}

public struct ListCertificatesByCAInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCertificatesByCAInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCertificatesByCAInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCertificatesByCAOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.ascendingOrder != false {
            let ascendingOrderQueryItem = ClientRuntime.URLQueryItem(name: "isAscendingOrder".urlPercentEncoding(), value: Swift.String(input.operationInput.ascendingOrder).urlPercentEncoding())
            input.builder.withQueryItem(ascendingOrderQueryItem)
        }
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "pageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCertificatesByCAInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCertificatesByCAOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCertificatesByCAOutputError>
}

/// <p>The input to the ListCertificatesByCA operation.</p>
public struct ListCertificatesByCAInput: Swift.Equatable {
    /// <p>Specifies the order for results. If True, the results are returned in ascending
    ///          order, based on the creation date.</p>
    public let ascendingOrder: Swift.Bool
    /// <p>The ID of the CA certificate. This operation will list all registered device
    ///          certificate that were signed by this CA certificate.</p>
    public let caCertificateId: Swift.String?
    /// <p>The marker for the next set of results.</p>
    public let marker: Swift.String?
    /// <p>The result page size.</p>
    public let pageSize: Swift.Int?

    public init (
        ascendingOrder: Swift.Bool = false,
        caCertificateId: Swift.String? = nil,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.ascendingOrder = ascendingOrder
        self.caCertificateId = caCertificateId
        self.marker = marker
        self.pageSize = pageSize
    }
}

struct ListCertificatesByCAInputBody: Swift.Equatable {
}

extension ListCertificatesByCAInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListCertificatesByCAOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCertificatesByCAOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCertificatesByCAOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCertificatesByCAOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCertificatesByCAOutputResponse(certificates: \(Swift.String(describing: certificates)), nextMarker: \(Swift.String(describing: nextMarker)))"}
}

extension ListCertificatesByCAOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCertificatesByCAOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificates = output.certificates
            self.nextMarker = output.nextMarker
        } else {
            self.certificates = nil
            self.nextMarker = nil
        }
    }
}

/// <p>The output of the ListCertificatesByCA operation.</p>
public struct ListCertificatesByCAOutputResponse: Swift.Equatable {
    /// <p>The device certificates signed by the specified CA certificate.</p>
    public let certificates: [IotClientTypes.Certificate]?
    /// <p>The marker for the next set of results, or null if there are no additional
    ///          results.</p>
    public let nextMarker: Swift.String?

    public init (
        certificates: [IotClientTypes.Certificate]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.certificates = certificates
        self.nextMarker = nextMarker
    }
}

struct ListCertificatesByCAOutputResponseBody: Swift.Equatable {
    public let certificates: [IotClientTypes.Certificate]?
    public let nextMarker: Swift.String?
}

extension ListCertificatesByCAOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificates
        case nextMarker
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificatesContainer = try containerValues.decodeIfPresent([IotClientTypes.Certificate?].self, forKey: .certificates)
        var certificatesDecoded0:[IotClientTypes.Certificate]? = nil
        if let certificatesContainer = certificatesContainer {
            certificatesDecoded0 = [IotClientTypes.Certificate]()
            for structure0 in certificatesContainer {
                if let structure0 = structure0 {
                    certificatesDecoded0?.append(structure0)
                }
            }
        }
        certificates = certificatesDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension ListCertificatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCertificatesInput(ascendingOrder: \(Swift.String(describing: ascendingOrder)), marker: \(Swift.String(describing: marker)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListCertificatesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListCertificatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCertificatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCertificatesOutputError>
}

public struct ListCertificatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCertificatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.ascendingOrder != false {
            let ascendingOrderQueryItem = ClientRuntime.URLQueryItem(name: "isAscendingOrder".urlPercentEncoding(), value: Swift.String(input.operationInput.ascendingOrder).urlPercentEncoding())
            input.builder.withQueryItem(ascendingOrderQueryItem)
        }
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "pageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCertificatesOutputError>
}

/// <p>The input for the ListCertificates operation.</p>
public struct ListCertificatesInput: Swift.Equatable {
    /// <p>Specifies the order for results. If True, the results are returned in ascending
    ///          order, based on the creation date.</p>
    public let ascendingOrder: Swift.Bool
    /// <p>The marker for the next set of results.</p>
    public let marker: Swift.String?
    /// <p>The result page size.</p>
    public let pageSize: Swift.Int?

    public init (
        ascendingOrder: Swift.Bool = false,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.ascendingOrder = ascendingOrder
        self.marker = marker
        self.pageSize = pageSize
    }
}

struct ListCertificatesInputBody: Swift.Equatable {
}

extension ListCertificatesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListCertificatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCertificatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCertificatesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCertificatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCertificatesOutputResponse(certificates: \(Swift.String(describing: certificates)), nextMarker: \(Swift.String(describing: nextMarker)))"}
}

extension ListCertificatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCertificatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificates = output.certificates
            self.nextMarker = output.nextMarker
        } else {
            self.certificates = nil
            self.nextMarker = nil
        }
    }
}

/// <p>The output of the ListCertificates operation.</p>
public struct ListCertificatesOutputResponse: Swift.Equatable {
    /// <p>The descriptions of the certificates.</p>
    public let certificates: [IotClientTypes.Certificate]?
    /// <p>The marker for the next set of results, or null if there are no additional
    ///          results.</p>
    public let nextMarker: Swift.String?

    public init (
        certificates: [IotClientTypes.Certificate]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.certificates = certificates
        self.nextMarker = nextMarker
    }
}

struct ListCertificatesOutputResponseBody: Swift.Equatable {
    public let certificates: [IotClientTypes.Certificate]?
    public let nextMarker: Swift.String?
}

extension ListCertificatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificates
        case nextMarker
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificatesContainer = try containerValues.decodeIfPresent([IotClientTypes.Certificate?].self, forKey: .certificates)
        var certificatesDecoded0:[IotClientTypes.Certificate]? = nil
        if let certificatesContainer = certificatesContainer {
            certificatesDecoded0 = [IotClientTypes.Certificate]()
            for structure0 in certificatesContainer {
                if let structure0 = structure0 {
                    certificatesDecoded0?.append(structure0)
                }
            }
        }
        certificates = certificatesDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension ListCustomMetricsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCustomMetricsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListCustomMetricsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListCustomMetricsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCustomMetricsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCustomMetricsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCustomMetricsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCustomMetricsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCustomMetricsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCustomMetricsOutputError>
}

public struct ListCustomMetricsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCustomMetricsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCustomMetricsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCustomMetricsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCustomMetricsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCustomMetricsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCustomMetricsOutputError>
}

public struct ListCustomMetricsInput: Swift.Equatable {
    /// <p>
    ///       The maximum number of results to return at one time. The default is 25.
    ///     </p>
    public let maxResults: Swift.Int?
    /// <p>
    ///       The token for the next set of results.
    ///     </p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListCustomMetricsInputBody: Swift.Equatable {
}

extension ListCustomMetricsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListCustomMetricsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCustomMetricsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCustomMetricsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCustomMetricsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCustomMetricsOutputResponse(metricNames: \(Swift.String(describing: metricNames)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListCustomMetricsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCustomMetricsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricNames = output.metricNames
            self.nextToken = output.nextToken
        } else {
            self.metricNames = nil
            self.nextToken = nil
        }
    }
}

public struct ListCustomMetricsOutputResponse: Swift.Equatable {
    /// <p>
    ///       The name of the custom metric.
    ///     </p>
    public let metricNames: [Swift.String]?
    /// <p>
    ///       A token that can be used to retrieve the next set of results,
    ///       or <code>null</code> if there are no additional results.
    ///     </p>
    public let nextToken: Swift.String?

    public init (
        metricNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.metricNames = metricNames
        self.nextToken = nextToken
    }
}

struct ListCustomMetricsOutputResponseBody: Swift.Equatable {
    public let metricNames: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListCustomMetricsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricNames
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .metricNames)
        var metricNamesDecoded0:[Swift.String]? = nil
        if let metricNamesContainer = metricNamesContainer {
            metricNamesDecoded0 = [Swift.String]()
            for string0 in metricNamesContainer {
                if let string0 = string0 {
                    metricNamesDecoded0?.append(string0)
                }
            }
        }
        metricNames = metricNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDetectMitigationActionsExecutionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDetectMitigationActionsExecutionsInput(endTime: \(Swift.String(describing: endTime)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), startTime: \(Swift.String(describing: startTime)), taskId: \(Swift.String(describing: taskId)), thingName: \(Swift.String(describing: thingName)), violationId: \(Swift.String(describing: violationId)))"}
}

extension ListDetectMitigationActionsExecutionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListDetectMitigationActionsExecutionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDetectMitigationActionsExecutionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDetectMitigationActionsExecutionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDetectMitigationActionsExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDetectMitigationActionsExecutionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDetectMitigationActionsExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDetectMitigationActionsExecutionsOutputError>
}

public struct ListDetectMitigationActionsExecutionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDetectMitigationActionsExecutionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDetectMitigationActionsExecutionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDetectMitigationActionsExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let thingName = input.operationInput.thingName {
            let thingNameQueryItem = ClientRuntime.URLQueryItem(name: "thingName".urlPercentEncoding(), value: Swift.String(thingName).urlPercentEncoding())
            input.builder.withQueryItem(thingNameQueryItem)
        }
        if let startTime = input.operationInput.startTime {
            let startTimeQueryItem = ClientRuntime.URLQueryItem(name: "startTime".urlPercentEncoding(), value: Swift.String(startTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(startTimeQueryItem)
        }
        if let endTime = input.operationInput.endTime {
            let endTimeQueryItem = ClientRuntime.URLQueryItem(name: "endTime".urlPercentEncoding(), value: Swift.String(endTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(endTimeQueryItem)
        }
        if let taskId = input.operationInput.taskId {
            let taskIdQueryItem = ClientRuntime.URLQueryItem(name: "taskId".urlPercentEncoding(), value: Swift.String(taskId).urlPercentEncoding())
            input.builder.withQueryItem(taskIdQueryItem)
        }
        if let violationId = input.operationInput.violationId {
            let violationIdQueryItem = ClientRuntime.URLQueryItem(name: "violationId".urlPercentEncoding(), value: Swift.String(violationId).urlPercentEncoding())
            input.builder.withQueryItem(violationIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDetectMitigationActionsExecutionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDetectMitigationActionsExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDetectMitigationActionsExecutionsOutputError>
}

public struct ListDetectMitigationActionsExecutionsInput: Swift.Equatable {
    /// <p>
    ///       The end of the time period for which ML Detect mitigation actions executions are returned.
    ///     </p>
    public let endTime: ClientRuntime.Date?
    /// <p>
    ///       The maximum number of results to return at one time. The default is 25.
    ///     </p>
    public let maxResults: Swift.Int?
    /// <p>
    ///       The token for the next set of results.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>
    ///       A filter to limit results to those found after the specified time. You must
    ///       specify either the startTime and endTime or the taskId, but not both.
    ///     </p>
    public let startTime: ClientRuntime.Date?
    /// <p>
    ///       The unique identifier of the task.
    ///     </p>
    public let taskId: Swift.String?
    /// <p>
    ///       The name of the thing whose mitigation actions are listed.
    ///     </p>
    public let thingName: Swift.String?
    /// <p>
    ///       The unique identifier of the violation.
    ///     </p>
    public let violationId: Swift.String?

    public init (
        endTime: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        taskId: Swift.String? = nil,
        thingName: Swift.String? = nil,
        violationId: Swift.String? = nil
    )
    {
        self.endTime = endTime
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.startTime = startTime
        self.taskId = taskId
        self.thingName = thingName
        self.violationId = violationId
    }
}

struct ListDetectMitigationActionsExecutionsInputBody: Swift.Equatable {
}

extension ListDetectMitigationActionsExecutionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDetectMitigationActionsExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDetectMitigationActionsExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDetectMitigationActionsExecutionsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDetectMitigationActionsExecutionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDetectMitigationActionsExecutionsOutputResponse(actionsExecutions: \(Swift.String(describing: actionsExecutions)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListDetectMitigationActionsExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDetectMitigationActionsExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionsExecutions = output.actionsExecutions
            self.nextToken = output.nextToken
        } else {
            self.actionsExecutions = nil
            self.nextToken = nil
        }
    }
}

public struct ListDetectMitigationActionsExecutionsOutputResponse: Swift.Equatable {
    /// <p>
    ///       List of actions executions.
    ///     </p>
    public let actionsExecutions: [IotClientTypes.DetectMitigationActionExecution]?
    /// <p>
    ///       A token that can be used to retrieve the next set of results, or <code>null</code> if there are no additional results.
    ///     </p>
    public let nextToken: Swift.String?

    public init (
        actionsExecutions: [IotClientTypes.DetectMitigationActionExecution]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.actionsExecutions = actionsExecutions
        self.nextToken = nextToken
    }
}

struct ListDetectMitigationActionsExecutionsOutputResponseBody: Swift.Equatable {
    public let actionsExecutions: [IotClientTypes.DetectMitigationActionExecution]?
    public let nextToken: Swift.String?
}

extension ListDetectMitigationActionsExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsExecutions
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionsExecutionsContainer = try containerValues.decodeIfPresent([IotClientTypes.DetectMitigationActionExecution?].self, forKey: .actionsExecutions)
        var actionsExecutionsDecoded0:[IotClientTypes.DetectMitigationActionExecution]? = nil
        if let actionsExecutionsContainer = actionsExecutionsContainer {
            actionsExecutionsDecoded0 = [IotClientTypes.DetectMitigationActionExecution]()
            for structure0 in actionsExecutionsContainer {
                if let structure0 = structure0 {
                    actionsExecutionsDecoded0?.append(structure0)
                }
            }
        }
        actionsExecutions = actionsExecutionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDetectMitigationActionsTasksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDetectMitigationActionsTasksInput(endTime: \(Swift.String(describing: endTime)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), startTime: \(Swift.String(describing: startTime)))"}
}

extension ListDetectMitigationActionsTasksInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListDetectMitigationActionsTasksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDetectMitigationActionsTasksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDetectMitigationActionsTasksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDetectMitigationActionsTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDetectMitigationActionsTasksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDetectMitigationActionsTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDetectMitigationActionsTasksOutputError>
}

public struct ListDetectMitigationActionsTasksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDetectMitigationActionsTasksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDetectMitigationActionsTasksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDetectMitigationActionsTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let startTime = input.operationInput.startTime {
            let startTimeQueryItem = ClientRuntime.URLQueryItem(name: "startTime".urlPercentEncoding(), value: Swift.String(startTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(startTimeQueryItem)
        }
        if let endTime = input.operationInput.endTime {
            let endTimeQueryItem = ClientRuntime.URLQueryItem(name: "endTime".urlPercentEncoding(), value: Swift.String(endTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(endTimeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDetectMitigationActionsTasksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDetectMitigationActionsTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDetectMitigationActionsTasksOutputError>
}

public struct ListDetectMitigationActionsTasksInput: Swift.Equatable {
    /// <p>
    ///       The end of the time period for which ML Detect mitigation actions tasks are returned.
    ///     </p>
    public let endTime: ClientRuntime.Date?
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    public let maxResults: Swift.Int?
    /// <p>
    ///       The token for the next set of results.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>
    ///       A filter to limit results to those found after the specified time. You must
    ///       specify either the startTime and endTime or the taskId, but not both.
    ///     </p>
    public let startTime: ClientRuntime.Date?

    public init (
        endTime: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.endTime = endTime
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.startTime = startTime
    }
}

struct ListDetectMitigationActionsTasksInputBody: Swift.Equatable {
}

extension ListDetectMitigationActionsTasksInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDetectMitigationActionsTasksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDetectMitigationActionsTasksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDetectMitigationActionsTasksOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDetectMitigationActionsTasksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDetectMitigationActionsTasksOutputResponse(nextToken: \(Swift.String(describing: nextToken)), tasks: \(Swift.String(describing: tasks)))"}
}

extension ListDetectMitigationActionsTasksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDetectMitigationActionsTasksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tasks = output.tasks
        } else {
            self.nextToken = nil
            self.tasks = nil
        }
    }
}

public struct ListDetectMitigationActionsTasksOutputResponse: Swift.Equatable {
    /// <p>
    ///       A token that can be used to retrieve the next set of results, or <code>null</code> if there are no additional results.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>
    ///       The collection of ML Detect mitigation tasks that matched the filter criteria.
    ///     </p>
    public let tasks: [IotClientTypes.DetectMitigationActionsTaskSummary]?

    public init (
        nextToken: Swift.String? = nil,
        tasks: [IotClientTypes.DetectMitigationActionsTaskSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.tasks = tasks
    }
}

struct ListDetectMitigationActionsTasksOutputResponseBody: Swift.Equatable {
    public let tasks: [IotClientTypes.DetectMitigationActionsTaskSummary]?
    public let nextToken: Swift.String?
}

extension ListDetectMitigationActionsTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case tasks
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tasksContainer = try containerValues.decodeIfPresent([IotClientTypes.DetectMitigationActionsTaskSummary?].self, forKey: .tasks)
        var tasksDecoded0:[IotClientTypes.DetectMitigationActionsTaskSummary]? = nil
        if let tasksContainer = tasksContainer {
            tasksDecoded0 = [IotClientTypes.DetectMitigationActionsTaskSummary]()
            for structure0 in tasksContainer {
                if let structure0 = structure0 {
                    tasksDecoded0?.append(structure0)
                }
            }
        }
        tasks = tasksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDimensionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDimensionsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListDimensionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListDimensionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDimensionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDimensionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDimensionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDimensionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDimensionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDimensionsOutputError>
}

public struct ListDimensionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDimensionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDimensionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDimensionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDimensionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDimensionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDimensionsOutputError>
}

public struct ListDimensionsInput: Swift.Equatable {
    /// <p>The maximum number of results to retrieve at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDimensionsInputBody: Swift.Equatable {
}

extension ListDimensionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDimensionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDimensionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDimensionsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDimensionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDimensionsOutputResponse(dimensionNames: \(Swift.String(describing: dimensionNames)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListDimensionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDimensionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dimensionNames = output.dimensionNames
            self.nextToken = output.nextToken
        } else {
            self.dimensionNames = nil
            self.nextToken = nil
        }
    }
}

public struct ListDimensionsOutputResponse: Swift.Equatable {
    /// <p>A list of the names of the defined dimensions. Use <code>DescribeDimension</code> to get details for a dimension.</p>
    public let dimensionNames: [Swift.String]?
    /// <p>A token that can be used to retrieve the next set of results, or <code>null</code> if there are no additional results.</p>
    public let nextToken: Swift.String?

    public init (
        dimensionNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dimensionNames = dimensionNames
        self.nextToken = nextToken
    }
}

struct ListDimensionsOutputResponseBody: Swift.Equatable {
    public let dimensionNames: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListDimensionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionNames
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dimensionNames)
        var dimensionNamesDecoded0:[Swift.String]? = nil
        if let dimensionNamesContainer = dimensionNamesContainer {
            dimensionNamesDecoded0 = [Swift.String]()
            for string0 in dimensionNamesContainer {
                if let string0 = string0 {
                    dimensionNamesDecoded0?.append(string0)
                }
            }
        }
        dimensionNames = dimensionNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDomainConfigurationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDomainConfigurationsInput(marker: \(Swift.String(describing: marker)), pageSize: \(Swift.String(describing: pageSize)), serviceType: \(Swift.String(describing: serviceType)))"}
}

extension ListDomainConfigurationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListDomainConfigurationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDomainConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDomainConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDomainConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDomainConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDomainConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDomainConfigurationsOutputError>
}

public struct ListDomainConfigurationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDomainConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDomainConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDomainConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let serviceType = input.operationInput.serviceType {
            let serviceTypeQueryItem = ClientRuntime.URLQueryItem(name: "serviceType".urlPercentEncoding(), value: Swift.String(serviceType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(serviceTypeQueryItem)
        }
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "pageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDomainConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDomainConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDomainConfigurationsOutputError>
}

public struct ListDomainConfigurationsInput: Swift.Equatable {
    /// <p>The marker for the next set of results.</p>
    public let marker: Swift.String?
    /// <p>The result page size.</p>
    public let pageSize: Swift.Int?
    /// <p>The type of service delivered by the endpoint.</p>
    public let serviceType: IotClientTypes.ServiceType?

    public init (
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        serviceType: IotClientTypes.ServiceType? = nil
    )
    {
        self.marker = marker
        self.pageSize = pageSize
        self.serviceType = serviceType
    }
}

struct ListDomainConfigurationsInputBody: Swift.Equatable {
}

extension ListDomainConfigurationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDomainConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDomainConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDomainConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDomainConfigurationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDomainConfigurationsOutputResponse(domainConfigurations: \(Swift.String(describing: domainConfigurations)), nextMarker: \(Swift.String(describing: nextMarker)))"}
}

extension ListDomainConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDomainConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainConfigurations = output.domainConfigurations
            self.nextMarker = output.nextMarker
        } else {
            self.domainConfigurations = nil
            self.nextMarker = nil
        }
    }
}

public struct ListDomainConfigurationsOutputResponse: Swift.Equatable {
    /// <p>A list of objects that contain summary information about the user's domain configurations.</p>
    public let domainConfigurations: [IotClientTypes.DomainConfigurationSummary]?
    /// <p>The marker for the next set of results.</p>
    public let nextMarker: Swift.String?

    public init (
        domainConfigurations: [IotClientTypes.DomainConfigurationSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.domainConfigurations = domainConfigurations
        self.nextMarker = nextMarker
    }
}

struct ListDomainConfigurationsOutputResponseBody: Swift.Equatable {
    public let domainConfigurations: [IotClientTypes.DomainConfigurationSummary]?
    public let nextMarker: Swift.String?
}

extension ListDomainConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainConfigurations
        case nextMarker
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainConfigurationsContainer = try containerValues.decodeIfPresent([IotClientTypes.DomainConfigurationSummary?].self, forKey: .domainConfigurations)
        var domainConfigurationsDecoded0:[IotClientTypes.DomainConfigurationSummary]? = nil
        if let domainConfigurationsContainer = domainConfigurationsContainer {
            domainConfigurationsDecoded0 = [IotClientTypes.DomainConfigurationSummary]()
            for structure0 in domainConfigurationsContainer {
                if let structure0 = structure0 {
                    domainConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        domainConfigurations = domainConfigurationsDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension ListIndicesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListIndicesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListIndicesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListIndicesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIndicesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIndicesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIndicesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIndicesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIndicesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIndicesOutputError>
}

public struct ListIndicesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIndicesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIndicesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIndicesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIndicesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIndicesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIndicesOutputError>
}

public struct ListIndicesInput: Swift.Equatable {
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>The token used to get the next set of results, or <code>null</code> if there are no additional
    ///       results.</p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListIndicesInputBody: Swift.Equatable {
}

extension ListIndicesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListIndicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListIndicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListIndicesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListIndicesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListIndicesOutputResponse(indexNames: \(Swift.String(describing: indexNames)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListIndicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListIndicesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.indexNames = output.indexNames
            self.nextToken = output.nextToken
        } else {
            self.indexNames = nil
            self.nextToken = nil
        }
    }
}

public struct ListIndicesOutputResponse: Swift.Equatable {
    /// <p>The index names.</p>
    public let indexNames: [Swift.String]?
    /// <p>The token used to get the next set of results, or <code>null</code> if there are no additional
    ///       results.</p>
    public let nextToken: Swift.String?

    public init (
        indexNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.indexNames = indexNames
        self.nextToken = nextToken
    }
}

struct ListIndicesOutputResponseBody: Swift.Equatable {
    public let indexNames: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListIndicesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexNames
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .indexNames)
        var indexNamesDecoded0:[Swift.String]? = nil
        if let indexNamesContainer = indexNamesContainer {
            indexNamesDecoded0 = [Swift.String]()
            for string0 in indexNamesContainer {
                if let string0 = string0 {
                    indexNamesDecoded0?.append(string0)
                }
            }
        }
        indexNames = indexNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListJobExecutionsForJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListJobExecutionsForJobInput(jobId: \(Swift.String(describing: jobId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListJobExecutionsForJobInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListJobExecutionsForJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListJobExecutionsForJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListJobExecutionsForJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListJobExecutionsForJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListJobExecutionsForJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListJobExecutionsForJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListJobExecutionsForJobOutputError>
}

public struct ListJobExecutionsForJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListJobExecutionsForJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListJobExecutionsForJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListJobExecutionsForJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let status = input.operationInput.status {
            let statusQueryItem = ClientRuntime.URLQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListJobExecutionsForJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListJobExecutionsForJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListJobExecutionsForJobOutputError>
}

public struct ListJobExecutionsForJobInput: Swift.Equatable {
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    public let jobId: Swift.String?
    /// <p>The maximum number of results to be returned per request.</p>
    public let maxResults: Swift.Int?
    /// <p>The token to retrieve the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The status of the job.</p>
    public let status: IotClientTypes.JobExecutionStatus?

    public init (
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: IotClientTypes.JobExecutionStatus? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListJobExecutionsForJobInputBody: Swift.Equatable {
}

extension ListJobExecutionsForJobInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListJobExecutionsForJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListJobExecutionsForJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListJobExecutionsForJobOutputError: Swift.Error, Swift.Equatable {
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListJobExecutionsForJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListJobExecutionsForJobOutputResponse(executionSummaries: \(Swift.String(describing: executionSummaries)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListJobExecutionsForJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListJobExecutionsForJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.executionSummaries = output.executionSummaries
            self.nextToken = output.nextToken
        } else {
            self.executionSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListJobExecutionsForJobOutputResponse: Swift.Equatable {
    /// <p>A list of job execution summaries.</p>
    public let executionSummaries: [IotClientTypes.JobExecutionSummaryForJob]?
    /// <p>The token for the next set of results, or <b>null</b> if there are no
    ///             additional results.</p>
    public let nextToken: Swift.String?

    public init (
        executionSummaries: [IotClientTypes.JobExecutionSummaryForJob]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.executionSummaries = executionSummaries
        self.nextToken = nextToken
    }
}

struct ListJobExecutionsForJobOutputResponseBody: Swift.Equatable {
    public let executionSummaries: [IotClientTypes.JobExecutionSummaryForJob]?
    public let nextToken: Swift.String?
}

extension ListJobExecutionsForJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionSummaries
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionSummariesContainer = try containerValues.decodeIfPresent([IotClientTypes.JobExecutionSummaryForJob?].self, forKey: .executionSummaries)
        var executionSummariesDecoded0:[IotClientTypes.JobExecutionSummaryForJob]? = nil
        if let executionSummariesContainer = executionSummariesContainer {
            executionSummariesDecoded0 = [IotClientTypes.JobExecutionSummaryForJob]()
            for structure0 in executionSummariesContainer {
                if let structure0 = structure0 {
                    executionSummariesDecoded0?.append(structure0)
                }
            }
        }
        executionSummaries = executionSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListJobExecutionsForThingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListJobExecutionsForThingInput(maxResults: \(Swift.String(describing: maxResults)), namespaceId: \(Swift.String(describing: namespaceId)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)), thingName: \(Swift.String(describing: thingName)))"}
}

extension ListJobExecutionsForThingInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListJobExecutionsForThingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListJobExecutionsForThingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListJobExecutionsForThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListJobExecutionsForThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListJobExecutionsForThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListJobExecutionsForThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListJobExecutionsForThingOutputError>
}

public struct ListJobExecutionsForThingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListJobExecutionsForThingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListJobExecutionsForThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListJobExecutionsForThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let namespaceId = input.operationInput.namespaceId {
            let namespaceIdQueryItem = ClientRuntime.URLQueryItem(name: "namespaceId".urlPercentEncoding(), value: Swift.String(namespaceId).urlPercentEncoding())
            input.builder.withQueryItem(namespaceIdQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let status = input.operationInput.status {
            let statusQueryItem = ClientRuntime.URLQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListJobExecutionsForThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListJobExecutionsForThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListJobExecutionsForThingOutputError>
}

public struct ListJobExecutionsForThingInput: Swift.Equatable {
    /// <p>The maximum number of results to be returned per request.</p>
    public let maxResults: Swift.Int?
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    ///         <p>When you specify a value for this parameter, AWS IoT Core sends jobs notifications to MQTT topics that
    ///             contain the value in the following format.</p>
    ///         <p>
    ///             <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code>
    ///          </p>
    ///         <note>
    ///             <p>The <code>namespaceId</code> feature is in public preview.</p>
    ///          </note>
    public let namespaceId: Swift.String?
    /// <p>The token to retrieve the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>An optional filter that lets you search for jobs that have the specified status.</p>
    public let status: IotClientTypes.JobExecutionStatus?
    /// <p>The thing name.</p>
    public let thingName: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        namespaceId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: IotClientTypes.JobExecutionStatus? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.namespaceId = namespaceId
        self.nextToken = nextToken
        self.status = status
        self.thingName = thingName
    }
}

struct ListJobExecutionsForThingInputBody: Swift.Equatable {
}

extension ListJobExecutionsForThingInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListJobExecutionsForThingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListJobExecutionsForThingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListJobExecutionsForThingOutputError: Swift.Error, Swift.Equatable {
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListJobExecutionsForThingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListJobExecutionsForThingOutputResponse(executionSummaries: \(Swift.String(describing: executionSummaries)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListJobExecutionsForThingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListJobExecutionsForThingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.executionSummaries = output.executionSummaries
            self.nextToken = output.nextToken
        } else {
            self.executionSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListJobExecutionsForThingOutputResponse: Swift.Equatable {
    /// <p>A list of job execution summaries.</p>
    public let executionSummaries: [IotClientTypes.JobExecutionSummaryForThing]?
    /// <p>The token for the next set of results, or <b>null</b> if there are no
    ///             additional results.</p>
    public let nextToken: Swift.String?

    public init (
        executionSummaries: [IotClientTypes.JobExecutionSummaryForThing]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.executionSummaries = executionSummaries
        self.nextToken = nextToken
    }
}

struct ListJobExecutionsForThingOutputResponseBody: Swift.Equatable {
    public let executionSummaries: [IotClientTypes.JobExecutionSummaryForThing]?
    public let nextToken: Swift.String?
}

extension ListJobExecutionsForThingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionSummaries
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionSummariesContainer = try containerValues.decodeIfPresent([IotClientTypes.JobExecutionSummaryForThing?].self, forKey: .executionSummaries)
        var executionSummariesDecoded0:[IotClientTypes.JobExecutionSummaryForThing]? = nil
        if let executionSummariesContainer = executionSummariesContainer {
            executionSummariesDecoded0 = [IotClientTypes.JobExecutionSummaryForThing]()
            for structure0 in executionSummariesContainer {
                if let structure0 = structure0 {
                    executionSummariesDecoded0?.append(structure0)
                }
            }
        }
        executionSummaries = executionSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListJobTemplatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListJobTemplatesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListJobTemplatesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListJobTemplatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListJobTemplatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListJobTemplatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListJobTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListJobTemplatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListJobTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListJobTemplatesOutputError>
}

public struct ListJobTemplatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListJobTemplatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListJobTemplatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListJobTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListJobTemplatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListJobTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListJobTemplatesOutputError>
}

public struct ListJobTemplatesInput: Swift.Equatable {
    /// <p>The maximum number of results to return in the list.</p>
    public let maxResults: Swift.Int?
    /// <p>The token to use to return the next set of results in the list.</p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListJobTemplatesInputBody: Swift.Equatable {
}

extension ListJobTemplatesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListJobTemplatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListJobTemplatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListJobTemplatesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListJobTemplatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListJobTemplatesOutputResponse(jobTemplates: \(Swift.String(describing: jobTemplates)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListJobTemplatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListJobTemplatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobTemplates = output.jobTemplates
            self.nextToken = output.nextToken
        } else {
            self.jobTemplates = nil
            self.nextToken = nil
        }
    }
}

public struct ListJobTemplatesOutputResponse: Swift.Equatable {
    /// <p>A list of objects that contain information about the job templates.</p>
    public let jobTemplates: [IotClientTypes.JobTemplateSummary]?
    /// <p>The token for the next set of results, or <b>null</b> if there are no
    ///             additional results.</p>
    public let nextToken: Swift.String?

    public init (
        jobTemplates: [IotClientTypes.JobTemplateSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobTemplates = jobTemplates
        self.nextToken = nextToken
    }
}

struct ListJobTemplatesOutputResponseBody: Swift.Equatable {
    public let jobTemplates: [IotClientTypes.JobTemplateSummary]?
    public let nextToken: Swift.String?
}

extension ListJobTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobTemplates
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobTemplatesContainer = try containerValues.decodeIfPresent([IotClientTypes.JobTemplateSummary?].self, forKey: .jobTemplates)
        var jobTemplatesDecoded0:[IotClientTypes.JobTemplateSummary]? = nil
        if let jobTemplatesContainer = jobTemplatesContainer {
            jobTemplatesDecoded0 = [IotClientTypes.JobTemplateSummary]()
            for structure0 in jobTemplatesContainer {
                if let structure0 = structure0 {
                    jobTemplatesDecoded0?.append(structure0)
                }
            }
        }
        jobTemplates = jobTemplatesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListJobsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListJobsInput(maxResults: \(Swift.String(describing: maxResults)), namespaceId: \(Swift.String(describing: namespaceId)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)), targetSelection: \(Swift.String(describing: targetSelection)), thingGroupId: \(Swift.String(describing: thingGroupId)), thingGroupName: \(Swift.String(describing: thingGroupName)))"}
}

extension ListJobsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListJobsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListJobsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListJobsOutputError>
}

public struct ListJobsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListJobsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let thingGroupId = input.operationInput.thingGroupId {
            let thingGroupIdQueryItem = ClientRuntime.URLQueryItem(name: "thingGroupId".urlPercentEncoding(), value: Swift.String(thingGroupId).urlPercentEncoding())
            input.builder.withQueryItem(thingGroupIdQueryItem)
        }
        if let namespaceId = input.operationInput.namespaceId {
            let namespaceIdQueryItem = ClientRuntime.URLQueryItem(name: "namespaceId".urlPercentEncoding(), value: Swift.String(namespaceId).urlPercentEncoding())
            input.builder.withQueryItem(namespaceIdQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let thingGroupName = input.operationInput.thingGroupName {
            let thingGroupNameQueryItem = ClientRuntime.URLQueryItem(name: "thingGroupName".urlPercentEncoding(), value: Swift.String(thingGroupName).urlPercentEncoding())
            input.builder.withQueryItem(thingGroupNameQueryItem)
        }
        if let status = input.operationInput.status {
            let statusQueryItem = ClientRuntime.URLQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        if let targetSelection = input.operationInput.targetSelection {
            let targetSelectionQueryItem = ClientRuntime.URLQueryItem(name: "targetSelection".urlPercentEncoding(), value: Swift.String(targetSelection.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(targetSelectionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListJobsOutputError>
}

public struct ListJobsInput: Swift.Equatable {
    /// <p>The maximum number of results to return per request.</p>
    public let maxResults: Swift.Int?
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    ///         <p>When you specify a value for this parameter, AWS IoT Core sends jobs notifications to MQTT topics that
    ///             contain the value in the following format.</p>
    ///         <p>
    ///             <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code>
    ///          </p>
    ///         <note>
    ///             <p>The <code>namespaceId</code> feature is in public preview.</p>
    ///          </note>
    public let namespaceId: Swift.String?
    /// <p>The token to retrieve the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>An optional filter that lets you search for jobs that have the specified status.</p>
    public let status: IotClientTypes.JobStatus?
    /// <p>Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things
    ///             specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing
    ///             when a change is detected in a target. For example, a job will run on a thing when the thing is added to a
    ///             target group, even after the job was completed by all things originally in the group. </p>
    public let targetSelection: IotClientTypes.TargetSelection?
    /// <p>A filter that limits the returned jobs to those for the specified group.</p>
    public let thingGroupId: Swift.String?
    /// <p>A filter that limits the returned jobs to those for the specified group.</p>
    public let thingGroupName: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        namespaceId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: IotClientTypes.JobStatus? = nil,
        targetSelection: IotClientTypes.TargetSelection? = nil,
        thingGroupId: Swift.String? = nil,
        thingGroupName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.namespaceId = namespaceId
        self.nextToken = nextToken
        self.status = status
        self.targetSelection = targetSelection
        self.thingGroupId = thingGroupId
        self.thingGroupName = thingGroupName
    }
}

struct ListJobsInputBody: Swift.Equatable {
}

extension ListJobsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListJobsOutputError: Swift.Error, Swift.Equatable {
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListJobsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListJobsOutputResponse(jobs: \(Swift.String(describing: jobs)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobs = output.jobs
            self.nextToken = output.nextToken
        } else {
            self.jobs = nil
            self.nextToken = nil
        }
    }
}

public struct ListJobsOutputResponse: Swift.Equatable {
    /// <p>A list of jobs.</p>
    public let jobs: [IotClientTypes.JobSummary]?
    /// <p>The token for the next set of results, or <b>null</b> if there are no
    ///             additional results.</p>
    public let nextToken: Swift.String?

    public init (
        jobs: [IotClientTypes.JobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobs = jobs
        self.nextToken = nextToken
    }
}

struct ListJobsOutputResponseBody: Swift.Equatable {
    public let jobs: [IotClientTypes.JobSummary]?
    public let nextToken: Swift.String?
}

extension ListJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobs
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobsContainer = try containerValues.decodeIfPresent([IotClientTypes.JobSummary?].self, forKey: .jobs)
        var jobsDecoded0:[IotClientTypes.JobSummary]? = nil
        if let jobsContainer = jobsContainer {
            jobsDecoded0 = [IotClientTypes.JobSummary]()
            for structure0 in jobsContainer {
                if let structure0 = structure0 {
                    jobsDecoded0?.append(structure0)
                }
            }
        }
        jobs = jobsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMitigationActionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMitigationActionsInput(actionType: \(Swift.String(describing: actionType)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListMitigationActionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListMitigationActionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMitigationActionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMitigationActionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMitigationActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMitigationActionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMitigationActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMitigationActionsOutputError>
}

public struct ListMitigationActionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMitigationActionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMitigationActionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMitigationActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let actionType = input.operationInput.actionType {
            let actionTypeQueryItem = ClientRuntime.URLQueryItem(name: "actionType".urlPercentEncoding(), value: Swift.String(actionType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(actionTypeQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMitigationActionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMitigationActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMitigationActionsOutputError>
}

public struct ListMitigationActionsInput: Swift.Equatable {
    /// <p>Specify a value to limit the result to mitigation actions with a specific action type.</p>
    public let actionType: IotClientTypes.MitigationActionType?
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?

    public init (
        actionType: IotClientTypes.MitigationActionType? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.actionType = actionType
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListMitigationActionsInputBody: Swift.Equatable {
}

extension ListMitigationActionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListMitigationActionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMitigationActionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMitigationActionsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMitigationActionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMitigationActionsOutputResponse(actionIdentifiers: \(Swift.String(describing: actionIdentifiers)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListMitigationActionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListMitigationActionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionIdentifiers = output.actionIdentifiers
            self.nextToken = output.nextToken
        } else {
            self.actionIdentifiers = nil
            self.nextToken = nil
        }
    }
}

public struct ListMitigationActionsOutputResponse: Swift.Equatable {
    /// <p>A set of actions that matched the specified filter criteria.</p>
    public let actionIdentifiers: [IotClientTypes.MitigationActionIdentifier]?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?

    public init (
        actionIdentifiers: [IotClientTypes.MitigationActionIdentifier]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.actionIdentifiers = actionIdentifiers
        self.nextToken = nextToken
    }
}

struct ListMitigationActionsOutputResponseBody: Swift.Equatable {
    public let actionIdentifiers: [IotClientTypes.MitigationActionIdentifier]?
    public let nextToken: Swift.String?
}

extension ListMitigationActionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionIdentifiers
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionIdentifiersContainer = try containerValues.decodeIfPresent([IotClientTypes.MitigationActionIdentifier?].self, forKey: .actionIdentifiers)
        var actionIdentifiersDecoded0:[IotClientTypes.MitigationActionIdentifier]? = nil
        if let actionIdentifiersContainer = actionIdentifiersContainer {
            actionIdentifiersDecoded0 = [IotClientTypes.MitigationActionIdentifier]()
            for structure0 in actionIdentifiersContainer {
                if let structure0 = structure0 {
                    actionIdentifiersDecoded0?.append(structure0)
                }
            }
        }
        actionIdentifiers = actionIdentifiersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListOTAUpdatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListOTAUpdatesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), otaUpdateStatus: \(Swift.String(describing: otaUpdateStatus)))"}
}

extension ListOTAUpdatesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListOTAUpdatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListOTAUpdatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListOTAUpdatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListOTAUpdatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListOTAUpdatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListOTAUpdatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListOTAUpdatesOutputError>
}

public struct ListOTAUpdatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListOTAUpdatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListOTAUpdatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListOTAUpdatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let otaUpdateStatus = input.operationInput.otaUpdateStatus {
            let otaUpdateStatusQueryItem = ClientRuntime.URLQueryItem(name: "otaUpdateStatus".urlPercentEncoding(), value: Swift.String(otaUpdateStatus.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(otaUpdateStatusQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListOTAUpdatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListOTAUpdatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListOTAUpdatesOutputError>
}

public struct ListOTAUpdatesInput: Swift.Equatable {
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>A token used to retrieve the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The OTA update job status.</p>
    public let otaUpdateStatus: IotClientTypes.OTAUpdateStatus?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        otaUpdateStatus: IotClientTypes.OTAUpdateStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.otaUpdateStatus = otaUpdateStatus
    }
}

struct ListOTAUpdatesInputBody: Swift.Equatable {
}

extension ListOTAUpdatesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListOTAUpdatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListOTAUpdatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListOTAUpdatesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListOTAUpdatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListOTAUpdatesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), otaUpdates: \(Swift.String(describing: otaUpdates)))"}
}

extension ListOTAUpdatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListOTAUpdatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.otaUpdates = output.otaUpdates
        } else {
            self.nextToken = nil
            self.otaUpdates = nil
        }
    }
}

public struct ListOTAUpdatesOutputResponse: Swift.Equatable {
    /// <p>A token to use to get the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>A list of OTA update jobs.</p>
    public let otaUpdates: [IotClientTypes.OTAUpdateSummary]?

    public init (
        nextToken: Swift.String? = nil,
        otaUpdates: [IotClientTypes.OTAUpdateSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.otaUpdates = otaUpdates
    }
}

struct ListOTAUpdatesOutputResponseBody: Swift.Equatable {
    public let otaUpdates: [IotClientTypes.OTAUpdateSummary]?
    public let nextToken: Swift.String?
}

extension ListOTAUpdatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case otaUpdates
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let otaUpdatesContainer = try containerValues.decodeIfPresent([IotClientTypes.OTAUpdateSummary?].self, forKey: .otaUpdates)
        var otaUpdatesDecoded0:[IotClientTypes.OTAUpdateSummary]? = nil
        if let otaUpdatesContainer = otaUpdatesContainer {
            otaUpdatesDecoded0 = [IotClientTypes.OTAUpdateSummary]()
            for structure0 in otaUpdatesContainer {
                if let structure0 = structure0 {
                    otaUpdatesDecoded0?.append(structure0)
                }
            }
        }
        otaUpdates = otaUpdatesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListOutgoingCertificatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListOutgoingCertificatesInput(ascendingOrder: \(Swift.String(describing: ascendingOrder)), marker: \(Swift.String(describing: marker)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListOutgoingCertificatesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListOutgoingCertificatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListOutgoingCertificatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListOutgoingCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListOutgoingCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListOutgoingCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListOutgoingCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListOutgoingCertificatesOutputError>
}

public struct ListOutgoingCertificatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListOutgoingCertificatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListOutgoingCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListOutgoingCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.ascendingOrder != false {
            let ascendingOrderQueryItem = ClientRuntime.URLQueryItem(name: "isAscendingOrder".urlPercentEncoding(), value: Swift.String(input.operationInput.ascendingOrder).urlPercentEncoding())
            input.builder.withQueryItem(ascendingOrderQueryItem)
        }
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "pageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListOutgoingCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListOutgoingCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListOutgoingCertificatesOutputError>
}

/// <p>The input to the ListOutgoingCertificates operation.</p>
public struct ListOutgoingCertificatesInput: Swift.Equatable {
    /// <p>Specifies the order for results. If True, the results are returned in ascending
    ///          order, based on the creation date.</p>
    public let ascendingOrder: Swift.Bool
    /// <p>The marker for the next set of results.</p>
    public let marker: Swift.String?
    /// <p>The result page size.</p>
    public let pageSize: Swift.Int?

    public init (
        ascendingOrder: Swift.Bool = false,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.ascendingOrder = ascendingOrder
        self.marker = marker
        self.pageSize = pageSize
    }
}

struct ListOutgoingCertificatesInputBody: Swift.Equatable {
}

extension ListOutgoingCertificatesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListOutgoingCertificatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListOutgoingCertificatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListOutgoingCertificatesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListOutgoingCertificatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListOutgoingCertificatesOutputResponse(nextMarker: \(Swift.String(describing: nextMarker)), outgoingCertificates: \(Swift.String(describing: outgoingCertificates)))"}
}

extension ListOutgoingCertificatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListOutgoingCertificatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.outgoingCertificates = output.outgoingCertificates
        } else {
            self.nextMarker = nil
            self.outgoingCertificates = nil
        }
    }
}

/// <p>The output from the ListOutgoingCertificates operation.</p>
public struct ListOutgoingCertificatesOutputResponse: Swift.Equatable {
    /// <p>The marker for the next set of results.</p>
    public let nextMarker: Swift.String?
    /// <p>The certificates that are being transferred but not yet accepted.</p>
    public let outgoingCertificates: [IotClientTypes.OutgoingCertificate]?

    public init (
        nextMarker: Swift.String? = nil,
        outgoingCertificates: [IotClientTypes.OutgoingCertificate]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.outgoingCertificates = outgoingCertificates
    }
}

struct ListOutgoingCertificatesOutputResponseBody: Swift.Equatable {
    public let outgoingCertificates: [IotClientTypes.OutgoingCertificate]?
    public let nextMarker: Swift.String?
}

extension ListOutgoingCertificatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker
        case outgoingCertificates
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outgoingCertificatesContainer = try containerValues.decodeIfPresent([IotClientTypes.OutgoingCertificate?].self, forKey: .outgoingCertificates)
        var outgoingCertificatesDecoded0:[IotClientTypes.OutgoingCertificate]? = nil
        if let outgoingCertificatesContainer = outgoingCertificatesContainer {
            outgoingCertificatesDecoded0 = [IotClientTypes.OutgoingCertificate]()
            for structure0 in outgoingCertificatesContainer {
                if let structure0 = structure0 {
                    outgoingCertificatesDecoded0?.append(structure0)
                }
            }
        }
        outgoingCertificates = outgoingCertificatesDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension ListPoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPoliciesInput(ascendingOrder: \(Swift.String(describing: ascendingOrder)), marker: \(Swift.String(describing: marker)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListPoliciesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListPoliciesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPoliciesOutputError>
}

public struct ListPoliciesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.ascendingOrder != false {
            let ascendingOrderQueryItem = ClientRuntime.URLQueryItem(name: "isAscendingOrder".urlPercentEncoding(), value: Swift.String(input.operationInput.ascendingOrder).urlPercentEncoding())
            input.builder.withQueryItem(ascendingOrderQueryItem)
        }
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "pageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPoliciesOutputError>
}

/// <p>The input for the ListPolicies operation.</p>
public struct ListPoliciesInput: Swift.Equatable {
    /// <p>Specifies the order for results. If true, the results are returned in ascending
    ///          creation order.</p>
    public let ascendingOrder: Swift.Bool
    /// <p>The marker for the next set of results.</p>
    public let marker: Swift.String?
    /// <p>The result page size.</p>
    public let pageSize: Swift.Int?

    public init (
        ascendingOrder: Swift.Bool = false,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.ascendingOrder = ascendingOrder
        self.marker = marker
        self.pageSize = pageSize
    }
}

struct ListPoliciesInputBody: Swift.Equatable {
}

extension ListPoliciesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPoliciesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPoliciesOutputResponse(nextMarker: \(Swift.String(describing: nextMarker)), policies: \(Swift.String(describing: policies)))"}
}

extension ListPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.policies = output.policies
        } else {
            self.nextMarker = nil
            self.policies = nil
        }
    }
}

/// <p>The output from the ListPolicies operation.</p>
public struct ListPoliciesOutputResponse: Swift.Equatable {
    /// <p>The marker for the next set of results, or null if there are no additional
    ///          results.</p>
    public let nextMarker: Swift.String?
    /// <p>The descriptions of the policies.</p>
    public let policies: [IotClientTypes.Policy]?

    public init (
        nextMarker: Swift.String? = nil,
        policies: [IotClientTypes.Policy]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.policies = policies
    }
}

struct ListPoliciesOutputResponseBody: Swift.Equatable {
    public let policies: [IotClientTypes.Policy]?
    public let nextMarker: Swift.String?
}

extension ListPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker
        case policies
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policiesContainer = try containerValues.decodeIfPresent([IotClientTypes.Policy?].self, forKey: .policies)
        var policiesDecoded0:[IotClientTypes.Policy]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [IotClientTypes.Policy]()
            for structure0 in policiesContainer {
                if let structure0 = structure0 {
                    policiesDecoded0?.append(structure0)
                }
            }
        }
        policies = policiesDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension ListPolicyPrincipalsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPolicyPrincipalsInput(ascendingOrder: \(Swift.String(describing: ascendingOrder)), marker: \(Swift.String(describing: marker)), pageSize: \(Swift.String(describing: pageSize)), policyName: \(Swift.String(describing: policyName)))"}
}

extension ListPolicyPrincipalsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListPolicyPrincipalsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPolicyPrincipalsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPolicyPrincipalsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPolicyPrincipalsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let policyName = input.operationInput.policyName {
            input.builder.withHeader(name: "x-amzn-iot-policy", value: Swift.String(policyName))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPolicyPrincipalsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPolicyPrincipalsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPolicyPrincipalsOutputError>
}

public struct ListPolicyPrincipalsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPolicyPrincipalsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPolicyPrincipalsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPolicyPrincipalsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.ascendingOrder != false {
            let ascendingOrderQueryItem = ClientRuntime.URLQueryItem(name: "isAscendingOrder".urlPercentEncoding(), value: Swift.String(input.operationInput.ascendingOrder).urlPercentEncoding())
            input.builder.withQueryItem(ascendingOrderQueryItem)
        }
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "pageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPolicyPrincipalsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPolicyPrincipalsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPolicyPrincipalsOutputError>
}

/// <p>The input for the ListPolicyPrincipals operation.</p>
public struct ListPolicyPrincipalsInput: Swift.Equatable {
    /// <p>Specifies the order for results. If true, the results are returned in ascending
    ///          creation order.</p>
    public let ascendingOrder: Swift.Bool
    /// <p>The marker for the next set of results.</p>
    public let marker: Swift.String?
    /// <p>The result page size.</p>
    public let pageSize: Swift.Int?
    /// <p>The policy name.</p>
    public let policyName: Swift.String?

    public init (
        ascendingOrder: Swift.Bool = false,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.ascendingOrder = ascendingOrder
        self.marker = marker
        self.pageSize = pageSize
        self.policyName = policyName
    }
}

struct ListPolicyPrincipalsInputBody: Swift.Equatable {
}

extension ListPolicyPrincipalsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListPolicyPrincipalsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPolicyPrincipalsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPolicyPrincipalsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPolicyPrincipalsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPolicyPrincipalsOutputResponse(nextMarker: \(Swift.String(describing: nextMarker)), principals: \(Swift.String(describing: principals)))"}
}

extension ListPolicyPrincipalsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPolicyPrincipalsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.principals = output.principals
        } else {
            self.nextMarker = nil
            self.principals = nil
        }
    }
}

/// <p>The output from the ListPolicyPrincipals operation.</p>
public struct ListPolicyPrincipalsOutputResponse: Swift.Equatable {
    /// <p>The marker for the next set of results, or null if there are no additional
    ///          results.</p>
    public let nextMarker: Swift.String?
    /// <p>The descriptions of the principals.</p>
    public let principals: [Swift.String]?

    public init (
        nextMarker: Swift.String? = nil,
        principals: [Swift.String]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.principals = principals
    }
}

struct ListPolicyPrincipalsOutputResponseBody: Swift.Equatable {
    public let principals: [Swift.String]?
    public let nextMarker: Swift.String?
}

extension ListPolicyPrincipalsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker
        case principals
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .principals)
        var principalsDecoded0:[Swift.String]? = nil
        if let principalsContainer = principalsContainer {
            principalsDecoded0 = [Swift.String]()
            for string0 in principalsContainer {
                if let string0 = string0 {
                    principalsDecoded0?.append(string0)
                }
            }
        }
        principals = principalsDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension ListPolicyVersionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPolicyVersionsInput(policyName: \(Swift.String(describing: policyName)))"}
}

extension ListPolicyVersionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListPolicyVersionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPolicyVersionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPolicyVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPolicyVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPolicyVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPolicyVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPolicyVersionsOutputError>
}

public struct ListPolicyVersionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPolicyVersionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPolicyVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPolicyVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPolicyVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPolicyVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPolicyVersionsOutputError>
}

/// <p>The input for the ListPolicyVersions operation.</p>
public struct ListPolicyVersionsInput: Swift.Equatable {
    /// <p>The policy name.</p>
    public let policyName: Swift.String?

    public init (
        policyName: Swift.String? = nil
    )
    {
        self.policyName = policyName
    }
}

struct ListPolicyVersionsInputBody: Swift.Equatable {
}

extension ListPolicyVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListPolicyVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPolicyVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPolicyVersionsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPolicyVersionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPolicyVersionsOutputResponse(policyVersions: \(Swift.String(describing: policyVersions)))"}
}

extension ListPolicyVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPolicyVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policyVersions = output.policyVersions
        } else {
            self.policyVersions = nil
        }
    }
}

/// <p>The output from the ListPolicyVersions operation.</p>
public struct ListPolicyVersionsOutputResponse: Swift.Equatable {
    /// <p>The policy versions.</p>
    public let policyVersions: [IotClientTypes.PolicyVersion]?

    public init (
        policyVersions: [IotClientTypes.PolicyVersion]? = nil
    )
    {
        self.policyVersions = policyVersions
    }
}

struct ListPolicyVersionsOutputResponseBody: Swift.Equatable {
    public let policyVersions: [IotClientTypes.PolicyVersion]?
}

extension ListPolicyVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyVersions
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyVersionsContainer = try containerValues.decodeIfPresent([IotClientTypes.PolicyVersion?].self, forKey: .policyVersions)
        var policyVersionsDecoded0:[IotClientTypes.PolicyVersion]? = nil
        if let policyVersionsContainer = policyVersionsContainer {
            policyVersionsDecoded0 = [IotClientTypes.PolicyVersion]()
            for structure0 in policyVersionsContainer {
                if let structure0 = structure0 {
                    policyVersionsDecoded0?.append(structure0)
                }
            }
        }
        policyVersions = policyVersionsDecoded0
    }
}

extension ListPrincipalPoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPrincipalPoliciesInput(ascendingOrder: \(Swift.String(describing: ascendingOrder)), marker: \(Swift.String(describing: marker)), pageSize: \(Swift.String(describing: pageSize)), principal: \(Swift.String(describing: principal)))"}
}

extension ListPrincipalPoliciesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListPrincipalPoliciesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPrincipalPoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPrincipalPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPrincipalPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let principal = input.operationInput.principal {
            input.builder.withHeader(name: "x-amzn-iot-principal", value: Swift.String(principal))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPrincipalPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPrincipalPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPrincipalPoliciesOutputError>
}

public struct ListPrincipalPoliciesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPrincipalPoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPrincipalPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPrincipalPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.ascendingOrder != false {
            let ascendingOrderQueryItem = ClientRuntime.URLQueryItem(name: "isAscendingOrder".urlPercentEncoding(), value: Swift.String(input.operationInput.ascendingOrder).urlPercentEncoding())
            input.builder.withQueryItem(ascendingOrderQueryItem)
        }
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "pageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPrincipalPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPrincipalPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPrincipalPoliciesOutputError>
}

/// <p>The input for the ListPrincipalPolicies operation.</p>
public struct ListPrincipalPoliciesInput: Swift.Equatable {
    /// <p>Specifies the order for results. If true, results are returned in ascending creation
    ///          order.</p>
    public let ascendingOrder: Swift.Bool
    /// <p>The marker for the next set of results.</p>
    public let marker: Swift.String?
    /// <p>The result page size.</p>
    public let pageSize: Swift.Int?
    /// <p>The principal. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).</p>
    public let principal: Swift.String?

    public init (
        ascendingOrder: Swift.Bool = false,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        principal: Swift.String? = nil
    )
    {
        self.ascendingOrder = ascendingOrder
        self.marker = marker
        self.pageSize = pageSize
        self.principal = principal
    }
}

struct ListPrincipalPoliciesInputBody: Swift.Equatable {
}

extension ListPrincipalPoliciesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListPrincipalPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPrincipalPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPrincipalPoliciesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPrincipalPoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPrincipalPoliciesOutputResponse(nextMarker: \(Swift.String(describing: nextMarker)), policies: \(Swift.String(describing: policies)))"}
}

extension ListPrincipalPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPrincipalPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.policies = output.policies
        } else {
            self.nextMarker = nil
            self.policies = nil
        }
    }
}

/// <p>The output from the ListPrincipalPolicies operation.</p>
public struct ListPrincipalPoliciesOutputResponse: Swift.Equatable {
    /// <p>The marker for the next set of results, or null if there are no additional
    ///          results.</p>
    public let nextMarker: Swift.String?
    /// <p>The policies.</p>
    public let policies: [IotClientTypes.Policy]?

    public init (
        nextMarker: Swift.String? = nil,
        policies: [IotClientTypes.Policy]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.policies = policies
    }
}

struct ListPrincipalPoliciesOutputResponseBody: Swift.Equatable {
    public let policies: [IotClientTypes.Policy]?
    public let nextMarker: Swift.String?
}

extension ListPrincipalPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker
        case policies
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policiesContainer = try containerValues.decodeIfPresent([IotClientTypes.Policy?].self, forKey: .policies)
        var policiesDecoded0:[IotClientTypes.Policy]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [IotClientTypes.Policy]()
            for structure0 in policiesContainer {
                if let structure0 = structure0 {
                    policiesDecoded0?.append(structure0)
                }
            }
        }
        policies = policiesDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension ListPrincipalThingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPrincipalThingsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), principal: \(Swift.String(describing: principal)))"}
}

extension ListPrincipalThingsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListPrincipalThingsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPrincipalThingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPrincipalThingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPrincipalThingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let principal = input.operationInput.principal {
            input.builder.withHeader(name: "x-amzn-principal", value: Swift.String(principal))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPrincipalThingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPrincipalThingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPrincipalThingsOutputError>
}

public struct ListPrincipalThingsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPrincipalThingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPrincipalThingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPrincipalThingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPrincipalThingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPrincipalThingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPrincipalThingsOutputError>
}

/// <p>The input for the ListPrincipalThings operation.</p>
public struct ListPrincipalThingsInput: Swift.Equatable {
    /// <p>The maximum number of results to return in this operation.</p>
    public let maxResults: Swift.Int?
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    /// 			value from a previous response; otherwise <b>null</b> to receive
    /// 			the first set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The principal.</p>
    public let principal: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        principal: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.principal = principal
    }
}

struct ListPrincipalThingsInputBody: Swift.Equatable {
}

extension ListPrincipalThingsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListPrincipalThingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPrincipalThingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPrincipalThingsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPrincipalThingsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPrincipalThingsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), things: \(Swift.String(describing: things)))"}
}

extension ListPrincipalThingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPrincipalThingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.things = output.things
        } else {
            self.nextToken = nil
            self.things = nil
        }
    }
}

/// <p>The output from the ListPrincipalThings operation.</p>
public struct ListPrincipalThingsOutputResponse: Swift.Equatable {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    public let nextToken: Swift.String?
    /// <p>The things.</p>
    public let things: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        things: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.things = things
    }
}

struct ListPrincipalThingsOutputResponseBody: Swift.Equatable {
    public let things: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListPrincipalThingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case things
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .things)
        var thingsDecoded0:[Swift.String]? = nil
        if let thingsContainer = thingsContainer {
            thingsDecoded0 = [Swift.String]()
            for string0 in thingsContainer {
                if let string0 = string0 {
                    thingsDecoded0?.append(string0)
                }
            }
        }
        things = thingsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListProvisioningTemplateVersionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListProvisioningTemplateVersionsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), templateName: \(Swift.String(describing: templateName)))"}
}

extension ListProvisioningTemplateVersionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListProvisioningTemplateVersionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProvisioningTemplateVersionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListProvisioningTemplateVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProvisioningTemplateVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListProvisioningTemplateVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListProvisioningTemplateVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProvisioningTemplateVersionsOutputError>
}

public struct ListProvisioningTemplateVersionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProvisioningTemplateVersionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListProvisioningTemplateVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProvisioningTemplateVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListProvisioningTemplateVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListProvisioningTemplateVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProvisioningTemplateVersionsOutputError>
}

public struct ListProvisioningTemplateVersionsInput: Swift.Equatable {
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>A token to retrieve the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The name of the fleet provisioning template.</p>
    public let templateName: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.templateName = templateName
    }
}

struct ListProvisioningTemplateVersionsInputBody: Swift.Equatable {
}

extension ListProvisioningTemplateVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListProvisioningTemplateVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListProvisioningTemplateVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListProvisioningTemplateVersionsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListProvisioningTemplateVersionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListProvisioningTemplateVersionsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), versions: \(Swift.String(describing: versions)))"}
}

extension ListProvisioningTemplateVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListProvisioningTemplateVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.versions = output.versions
        } else {
            self.nextToken = nil
            self.versions = nil
        }
    }
}

public struct ListProvisioningTemplateVersionsOutputResponse: Swift.Equatable {
    /// <p>A token to retrieve the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The list of fleet provisioning template versions.</p>
    public let versions: [IotClientTypes.ProvisioningTemplateVersionSummary]?

    public init (
        nextToken: Swift.String? = nil,
        versions: [IotClientTypes.ProvisioningTemplateVersionSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.versions = versions
    }
}

struct ListProvisioningTemplateVersionsOutputResponseBody: Swift.Equatable {
    public let versions: [IotClientTypes.ProvisioningTemplateVersionSummary]?
    public let nextToken: Swift.String?
}

extension ListProvisioningTemplateVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case versions
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionsContainer = try containerValues.decodeIfPresent([IotClientTypes.ProvisioningTemplateVersionSummary?].self, forKey: .versions)
        var versionsDecoded0:[IotClientTypes.ProvisioningTemplateVersionSummary]? = nil
        if let versionsContainer = versionsContainer {
            versionsDecoded0 = [IotClientTypes.ProvisioningTemplateVersionSummary]()
            for structure0 in versionsContainer {
                if let structure0 = structure0 {
                    versionsDecoded0?.append(structure0)
                }
            }
        }
        versions = versionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListProvisioningTemplatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListProvisioningTemplatesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListProvisioningTemplatesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListProvisioningTemplatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProvisioningTemplatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListProvisioningTemplatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProvisioningTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListProvisioningTemplatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListProvisioningTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProvisioningTemplatesOutputError>
}

public struct ListProvisioningTemplatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProvisioningTemplatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListProvisioningTemplatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProvisioningTemplatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListProvisioningTemplatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListProvisioningTemplatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProvisioningTemplatesOutputError>
}

public struct ListProvisioningTemplatesInput: Swift.Equatable {
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>A token to retrieve the next set of results.</p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListProvisioningTemplatesInputBody: Swift.Equatable {
}

extension ListProvisioningTemplatesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListProvisioningTemplatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListProvisioningTemplatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListProvisioningTemplatesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListProvisioningTemplatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListProvisioningTemplatesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), templates: \(Swift.String(describing: templates)))"}
}

extension ListProvisioningTemplatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListProvisioningTemplatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.templates = output.templates
        } else {
            self.nextToken = nil
            self.templates = nil
        }
    }
}

public struct ListProvisioningTemplatesOutputResponse: Swift.Equatable {
    /// <p>A token to retrieve the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>A list of fleet provisioning templates</p>
    public let templates: [IotClientTypes.ProvisioningTemplateSummary]?

    public init (
        nextToken: Swift.String? = nil,
        templates: [IotClientTypes.ProvisioningTemplateSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.templates = templates
    }
}

struct ListProvisioningTemplatesOutputResponseBody: Swift.Equatable {
    public let templates: [IotClientTypes.ProvisioningTemplateSummary]?
    public let nextToken: Swift.String?
}

extension ListProvisioningTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case templates
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templatesContainer = try containerValues.decodeIfPresent([IotClientTypes.ProvisioningTemplateSummary?].self, forKey: .templates)
        var templatesDecoded0:[IotClientTypes.ProvisioningTemplateSummary]? = nil
        if let templatesContainer = templatesContainer {
            templatesDecoded0 = [IotClientTypes.ProvisioningTemplateSummary]()
            for structure0 in templatesContainer {
                if let structure0 = structure0 {
                    templatesDecoded0?.append(structure0)
                }
            }
        }
        templates = templatesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListRoleAliasesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRoleAliasesInput(ascendingOrder: \(Swift.String(describing: ascendingOrder)), marker: \(Swift.String(describing: marker)), pageSize: \(Swift.String(describing: pageSize)))"}
}

extension ListRoleAliasesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListRoleAliasesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRoleAliasesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRoleAliasesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRoleAliasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRoleAliasesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRoleAliasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRoleAliasesOutputError>
}

public struct ListRoleAliasesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRoleAliasesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRoleAliasesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRoleAliasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.ascendingOrder != false {
            let ascendingOrderQueryItem = ClientRuntime.URLQueryItem(name: "isAscendingOrder".urlPercentEncoding(), value: Swift.String(input.operationInput.ascendingOrder).urlPercentEncoding())
            input.builder.withQueryItem(ascendingOrderQueryItem)
        }
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "pageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRoleAliasesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRoleAliasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRoleAliasesOutputError>
}

public struct ListRoleAliasesInput: Swift.Equatable {
    /// <p>Return the list of role aliases in ascending alphabetical order.</p>
    public let ascendingOrder: Swift.Bool
    /// <p>A marker used to get the next set of results.</p>
    public let marker: Swift.String?
    /// <p>The maximum number of results to return at one time.</p>
    public let pageSize: Swift.Int?

    public init (
        ascendingOrder: Swift.Bool = false,
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil
    )
    {
        self.ascendingOrder = ascendingOrder
        self.marker = marker
        self.pageSize = pageSize
    }
}

struct ListRoleAliasesInputBody: Swift.Equatable {
}

extension ListRoleAliasesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListRoleAliasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRoleAliasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListRoleAliasesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRoleAliasesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRoleAliasesOutputResponse(nextMarker: \(Swift.String(describing: nextMarker)), roleAliases: \(Swift.String(describing: roleAliases)))"}
}

extension ListRoleAliasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListRoleAliasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.roleAliases = output.roleAliases
        } else {
            self.nextMarker = nil
            self.roleAliases = nil
        }
    }
}

public struct ListRoleAliasesOutputResponse: Swift.Equatable {
    /// <p>A marker used to get the next set of results.</p>
    public let nextMarker: Swift.String?
    /// <p>The role aliases.</p>
    public let roleAliases: [Swift.String]?

    public init (
        nextMarker: Swift.String? = nil,
        roleAliases: [Swift.String]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.roleAliases = roleAliases
    }
}

struct ListRoleAliasesOutputResponseBody: Swift.Equatable {
    public let roleAliases: [Swift.String]?
    public let nextMarker: Swift.String?
}

extension ListRoleAliasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker
        case roleAliases
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleAliasesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .roleAliases)
        var roleAliasesDecoded0:[Swift.String]? = nil
        if let roleAliasesContainer = roleAliasesContainer {
            roleAliasesDecoded0 = [Swift.String]()
            for string0 in roleAliasesContainer {
                if let string0 = string0 {
                    roleAliasesDecoded0?.append(string0)
                }
            }
        }
        roleAliases = roleAliasesDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension ListScheduledAuditsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListScheduledAuditsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListScheduledAuditsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListScheduledAuditsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListScheduledAuditsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListScheduledAuditsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListScheduledAuditsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListScheduledAuditsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListScheduledAuditsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListScheduledAuditsOutputError>
}

public struct ListScheduledAuditsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListScheduledAuditsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListScheduledAuditsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListScheduledAuditsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListScheduledAuditsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListScheduledAuditsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListScheduledAuditsOutputError>
}

public struct ListScheduledAuditsInput: Swift.Equatable {
    /// <p>The maximum number of results to return at one time. The default is 25.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListScheduledAuditsInputBody: Swift.Equatable {
}

extension ListScheduledAuditsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListScheduledAuditsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListScheduledAuditsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListScheduledAuditsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListScheduledAuditsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListScheduledAuditsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), scheduledAudits: \(Swift.String(describing: scheduledAudits)))"}
}

extension ListScheduledAuditsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListScheduledAuditsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.scheduledAudits = output.scheduledAudits
        } else {
            self.nextToken = nil
            self.scheduledAudits = nil
        }
    }
}

public struct ListScheduledAuditsOutputResponse: Swift.Equatable {
    /// <p>A token that can be used to retrieve the next set of results,
    ///             or <code>null</code> if there are no additional results.</p>
    public let nextToken: Swift.String?
    /// <p>The list of scheduled audits.</p>
    public let scheduledAudits: [IotClientTypes.ScheduledAuditMetadata]?

    public init (
        nextToken: Swift.String? = nil,
        scheduledAudits: [IotClientTypes.ScheduledAuditMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.scheduledAudits = scheduledAudits
    }
}

struct ListScheduledAuditsOutputResponseBody: Swift.Equatable {
    public let scheduledAudits: [IotClientTypes.ScheduledAuditMetadata]?
    public let nextToken: Swift.String?
}

extension ListScheduledAuditsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case scheduledAudits
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledAuditsContainer = try containerValues.decodeIfPresent([IotClientTypes.ScheduledAuditMetadata?].self, forKey: .scheduledAudits)
        var scheduledAuditsDecoded0:[IotClientTypes.ScheduledAuditMetadata]? = nil
        if let scheduledAuditsContainer = scheduledAuditsContainer {
            scheduledAuditsDecoded0 = [IotClientTypes.ScheduledAuditMetadata]()
            for structure0 in scheduledAuditsContainer {
                if let structure0 = structure0 {
                    scheduledAuditsDecoded0?.append(structure0)
                }
            }
        }
        scheduledAudits = scheduledAuditsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSecurityProfilesForTargetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSecurityProfilesForTargetInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), recursive: \(Swift.String(describing: recursive)), securityProfileTargetArn: \(Swift.String(describing: securityProfileTargetArn)))"}
}

extension ListSecurityProfilesForTargetInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListSecurityProfilesForTargetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSecurityProfilesForTargetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSecurityProfilesForTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSecurityProfilesForTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSecurityProfilesForTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSecurityProfilesForTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSecurityProfilesForTargetOutputError>
}

public struct ListSecurityProfilesForTargetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSecurityProfilesForTargetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSecurityProfilesForTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSecurityProfilesForTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if input.operationInput.recursive != false {
            let recursiveQueryItem = ClientRuntime.URLQueryItem(name: "recursive".urlPercentEncoding(), value: Swift.String(input.operationInput.recursive).urlPercentEncoding())
            input.builder.withQueryItem(recursiveQueryItem)
        }
        if let securityProfileTargetArn = input.operationInput.securityProfileTargetArn {
            let securityProfileTargetArnQueryItem = ClientRuntime.URLQueryItem(name: "securityProfileTargetArn".urlPercentEncoding(), value: Swift.String(securityProfileTargetArn).urlPercentEncoding())
            input.builder.withQueryItem(securityProfileTargetArnQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSecurityProfilesForTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSecurityProfilesForTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSecurityProfilesForTargetOutputError>
}

public struct ListSecurityProfilesForTargetInput: Swift.Equatable {
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>If true, return child groups too.</p>
    public let recursive: Swift.Bool
    /// <p>The ARN of the target (thing group) whose attached security profiles you want to get.</p>
    public let securityProfileTargetArn: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        recursive: Swift.Bool = false,
        securityProfileTargetArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.recursive = recursive
        self.securityProfileTargetArn = securityProfileTargetArn
    }
}

struct ListSecurityProfilesForTargetInputBody: Swift.Equatable {
}

extension ListSecurityProfilesForTargetInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListSecurityProfilesForTargetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSecurityProfilesForTargetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSecurityProfilesForTargetOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSecurityProfilesForTargetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSecurityProfilesForTargetOutputResponse(nextToken: \(Swift.String(describing: nextToken)), securityProfileTargetMappings: \(Swift.String(describing: securityProfileTargetMappings)))"}
}

extension ListSecurityProfilesForTargetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSecurityProfilesForTargetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.securityProfileTargetMappings = output.securityProfileTargetMappings
        } else {
            self.nextToken = nil
            self.securityProfileTargetMappings = nil
        }
    }
}

public struct ListSecurityProfilesForTargetOutputResponse: Swift.Equatable {
    /// <p>A token that can be used to retrieve the next set of results, or <code>null</code> if there are no
    ///         additional results.</p>
    public let nextToken: Swift.String?
    /// <p>A list of security profiles and their associated targets.</p>
    public let securityProfileTargetMappings: [IotClientTypes.SecurityProfileTargetMapping]?

    public init (
        nextToken: Swift.String? = nil,
        securityProfileTargetMappings: [IotClientTypes.SecurityProfileTargetMapping]? = nil
    )
    {
        self.nextToken = nextToken
        self.securityProfileTargetMappings = securityProfileTargetMappings
    }
}

struct ListSecurityProfilesForTargetOutputResponseBody: Swift.Equatable {
    public let securityProfileTargetMappings: [IotClientTypes.SecurityProfileTargetMapping]?
    public let nextToken: Swift.String?
}

extension ListSecurityProfilesForTargetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case securityProfileTargetMappings
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityProfileTargetMappingsContainer = try containerValues.decodeIfPresent([IotClientTypes.SecurityProfileTargetMapping?].self, forKey: .securityProfileTargetMappings)
        var securityProfileTargetMappingsDecoded0:[IotClientTypes.SecurityProfileTargetMapping]? = nil
        if let securityProfileTargetMappingsContainer = securityProfileTargetMappingsContainer {
            securityProfileTargetMappingsDecoded0 = [IotClientTypes.SecurityProfileTargetMapping]()
            for structure0 in securityProfileTargetMappingsContainer {
                if let structure0 = structure0 {
                    securityProfileTargetMappingsDecoded0?.append(structure0)
                }
            }
        }
        securityProfileTargetMappings = securityProfileTargetMappingsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSecurityProfilesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSecurityProfilesInput(dimensionName: \(Swift.String(describing: dimensionName)), maxResults: \(Swift.String(describing: maxResults)), metricName: \(Swift.String(describing: metricName)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListSecurityProfilesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListSecurityProfilesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSecurityProfilesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSecurityProfilesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSecurityProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSecurityProfilesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSecurityProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSecurityProfilesOutputError>
}

public struct ListSecurityProfilesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSecurityProfilesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSecurityProfilesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSecurityProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let metricName = input.operationInput.metricName {
            let metricNameQueryItem = ClientRuntime.URLQueryItem(name: "metricName".urlPercentEncoding(), value: Swift.String(metricName).urlPercentEncoding())
            input.builder.withQueryItem(metricNameQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let dimensionName = input.operationInput.dimensionName {
            let dimensionNameQueryItem = ClientRuntime.URLQueryItem(name: "dimensionName".urlPercentEncoding(), value: Swift.String(dimensionName).urlPercentEncoding())
            input.builder.withQueryItem(dimensionNameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSecurityProfilesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSecurityProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSecurityProfilesOutputError>
}

public struct ListSecurityProfilesInput: Swift.Equatable {
    /// <p>A filter to limit results to the security profiles that use the defined dimension.
    ///       Cannot be used with <code>metricName</code>
    ///          </p>
    public let dimensionName: Swift.String?
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p> The name of the custom metric.
    ///       Cannot be used with <code>dimensionName</code>. </p>
    public let metricName: Swift.String?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?

    public init (
        dimensionName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        metricName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dimensionName = dimensionName
        self.maxResults = maxResults
        self.metricName = metricName
        self.nextToken = nextToken
    }
}

struct ListSecurityProfilesInputBody: Swift.Equatable {
}

extension ListSecurityProfilesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListSecurityProfilesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSecurityProfilesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSecurityProfilesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSecurityProfilesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSecurityProfilesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), securityProfileIdentifiers: \(Swift.String(describing: securityProfileIdentifiers)))"}
}

extension ListSecurityProfilesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSecurityProfilesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.securityProfileIdentifiers = output.securityProfileIdentifiers
        } else {
            self.nextToken = nil
            self.securityProfileIdentifiers = nil
        }
    }
}

public struct ListSecurityProfilesOutputResponse: Swift.Equatable {
    /// <p>A token that can be used to retrieve the next set of results, or <code>null</code> if there are no
    ///         additional results.</p>
    public let nextToken: Swift.String?
    /// <p>A list of security profile identifiers (names and ARNs).</p>
    public let securityProfileIdentifiers: [IotClientTypes.SecurityProfileIdentifier]?

    public init (
        nextToken: Swift.String? = nil,
        securityProfileIdentifiers: [IotClientTypes.SecurityProfileIdentifier]? = nil
    )
    {
        self.nextToken = nextToken
        self.securityProfileIdentifiers = securityProfileIdentifiers
    }
}

struct ListSecurityProfilesOutputResponseBody: Swift.Equatable {
    public let securityProfileIdentifiers: [IotClientTypes.SecurityProfileIdentifier]?
    public let nextToken: Swift.String?
}

extension ListSecurityProfilesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case securityProfileIdentifiers
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityProfileIdentifiersContainer = try containerValues.decodeIfPresent([IotClientTypes.SecurityProfileIdentifier?].self, forKey: .securityProfileIdentifiers)
        var securityProfileIdentifiersDecoded0:[IotClientTypes.SecurityProfileIdentifier]? = nil
        if let securityProfileIdentifiersContainer = securityProfileIdentifiersContainer {
            securityProfileIdentifiersDecoded0 = [IotClientTypes.SecurityProfileIdentifier]()
            for structure0 in securityProfileIdentifiersContainer {
                if let structure0 = structure0 {
                    securityProfileIdentifiersDecoded0?.append(structure0)
                }
            }
        }
        securityProfileIdentifiers = securityProfileIdentifiersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListStreamsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStreamsInput(ascendingOrder: \(Swift.String(describing: ascendingOrder)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListStreamsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListStreamsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStreamsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStreamsOutputError>
}

public struct ListStreamsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStreamsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.ascendingOrder != false {
            let ascendingOrderQueryItem = ClientRuntime.URLQueryItem(name: "isAscendingOrder".urlPercentEncoding(), value: Swift.String(input.operationInput.ascendingOrder).urlPercentEncoding())
            input.builder.withQueryItem(ascendingOrderQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStreamsOutputError>
}

public struct ListStreamsInput: Swift.Equatable {
    /// <p>Set to true to return the list of streams in ascending order.</p>
    public let ascendingOrder: Swift.Bool
    /// <p>The maximum number of results to return at a time.</p>
    public let maxResults: Swift.Int?
    /// <p>A token used to get the next set of results.</p>
    public let nextToken: Swift.String?

    public init (
        ascendingOrder: Swift.Bool = false,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.ascendingOrder = ascendingOrder
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListStreamsInputBody: Swift.Equatable {
}

extension ListStreamsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListStreamsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListStreamsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListStreamsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStreamsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStreamsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), streams: \(Swift.String(describing: streams)))"}
}

extension ListStreamsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListStreamsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.streams = output.streams
        } else {
            self.nextToken = nil
            self.streams = nil
        }
    }
}

public struct ListStreamsOutputResponse: Swift.Equatable {
    /// <p>A token used to get the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>A list of streams.</p>
    public let streams: [IotClientTypes.StreamSummary]?

    public init (
        nextToken: Swift.String? = nil,
        streams: [IotClientTypes.StreamSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.streams = streams
    }
}

struct ListStreamsOutputResponseBody: Swift.Equatable {
    public let streams: [IotClientTypes.StreamSummary]?
    public let nextToken: Swift.String?
}

extension ListStreamsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case streams
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamsContainer = try containerValues.decodeIfPresent([IotClientTypes.StreamSummary?].self, forKey: .streams)
        var streamsDecoded0:[IotClientTypes.StreamSummary]? = nil
        if let streamsContainer = streamsContainer {
            streamsDecoded0 = [IotClientTypes.StreamSummary]()
            for structure0 in streamsContainer {
                if let structure0 = structure0 {
                    streamsDecoded0?.append(structure0)
                }
            }
        }
        streams = streamsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(nextToken: \(Swift.String(describing: nextToken)), resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let resourceArn = input.operationInput.resourceArn {
            let resourceArnQueryItem = ClientRuntime.URLQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
            input.builder.withQueryItem(resourceArnQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    /// 			value from a previous response; otherwise <b>null</b> to receive
    /// 			the first set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The ARN of the resource.</p>
    public let resourceArn: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(nextToken: \(Swift.String(describing: nextToken)), tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    public let nextToken: Swift.String?
    /// <p>The list of tags assigned to the resource.</p>
    public let tags: [IotClientTypes.Tag]?

    public init (
        nextToken: Swift.String? = nil,
        tags: [IotClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let tags: [IotClientTypes.Tag]?
    public let nextToken: Swift.String?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTargetsForPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTargetsForPolicyInput(marker: \(Swift.String(describing: marker)), pageSize: \(Swift.String(describing: pageSize)), policyName: \(Swift.String(describing: policyName)))"}
}

extension ListTargetsForPolicyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTargetsForPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTargetsForPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTargetsForPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTargetsForPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTargetsForPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTargetsForPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTargetsForPolicyOutputError>
}

public struct ListTargetsForPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTargetsForPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTargetsForPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTargetsForPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = ClientRuntime.URLQueryItem(name: "pageSize".urlPercentEncoding(), value: Swift.String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTargetsForPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTargetsForPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTargetsForPolicyOutputError>
}

public struct ListTargetsForPolicyInput: Swift.Equatable {
    /// <p>A marker used to get the next set of results.</p>
    public let marker: Swift.String?
    /// <p>The maximum number of results to return at one time.</p>
    public let pageSize: Swift.Int?
    /// <p>The policy name.</p>
    public let policyName: Swift.String?

    public init (
        marker: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.pageSize = pageSize
        self.policyName = policyName
    }
}

struct ListTargetsForPolicyInputBody: Swift.Equatable {
}

extension ListTargetsForPolicyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTargetsForPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTargetsForPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTargetsForPolicyOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTargetsForPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTargetsForPolicyOutputResponse(nextMarker: \(Swift.String(describing: nextMarker)), targets: \(Swift.String(describing: targets)))"}
}

extension ListTargetsForPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTargetsForPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.targets = output.targets
        } else {
            self.nextMarker = nil
            self.targets = nil
        }
    }
}

public struct ListTargetsForPolicyOutputResponse: Swift.Equatable {
    /// <p>A marker used to get the next set of results.</p>
    public let nextMarker: Swift.String?
    /// <p>The policy targets.</p>
    public let targets: [Swift.String]?

    public init (
        nextMarker: Swift.String? = nil,
        targets: [Swift.String]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.targets = targets
    }
}

struct ListTargetsForPolicyOutputResponseBody: Swift.Equatable {
    public let targets: [Swift.String]?
    public let nextMarker: Swift.String?
}

extension ListTargetsForPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker
        case targets
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targets)
        var targetsDecoded0:[Swift.String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Swift.String]()
            for string0 in targetsContainer {
                if let string0 = string0 {
                    targetsDecoded0?.append(string0)
                }
            }
        }
        targets = targetsDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension ListTargetsForSecurityProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTargetsForSecurityProfileInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), securityProfileName: \(Swift.String(describing: securityProfileName)))"}
}

extension ListTargetsForSecurityProfileInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTargetsForSecurityProfileInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTargetsForSecurityProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTargetsForSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTargetsForSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTargetsForSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTargetsForSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTargetsForSecurityProfileOutputError>
}

public struct ListTargetsForSecurityProfileInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTargetsForSecurityProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTargetsForSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTargetsForSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTargetsForSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTargetsForSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTargetsForSecurityProfileOutputError>
}

public struct ListTargetsForSecurityProfileInput: Swift.Equatable {
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The security profile.</p>
    public let securityProfileName: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        securityProfileName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.securityProfileName = securityProfileName
    }
}

struct ListTargetsForSecurityProfileInputBody: Swift.Equatable {
}

extension ListTargetsForSecurityProfileInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTargetsForSecurityProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTargetsForSecurityProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTargetsForSecurityProfileOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTargetsForSecurityProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTargetsForSecurityProfileOutputResponse(nextToken: \(Swift.String(describing: nextToken)), securityProfileTargets: \(Swift.String(describing: securityProfileTargets)))"}
}

extension ListTargetsForSecurityProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTargetsForSecurityProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.securityProfileTargets = output.securityProfileTargets
        } else {
            self.nextToken = nil
            self.securityProfileTargets = nil
        }
    }
}

public struct ListTargetsForSecurityProfileOutputResponse: Swift.Equatable {
    /// <p>A token that can be used to retrieve the next set of results, or <code>null</code> if there are no
    ///         additional results.</p>
    public let nextToken: Swift.String?
    /// <p>The thing groups to which the security profile is attached.</p>
    public let securityProfileTargets: [IotClientTypes.SecurityProfileTarget]?

    public init (
        nextToken: Swift.String? = nil,
        securityProfileTargets: [IotClientTypes.SecurityProfileTarget]? = nil
    )
    {
        self.nextToken = nextToken
        self.securityProfileTargets = securityProfileTargets
    }
}

struct ListTargetsForSecurityProfileOutputResponseBody: Swift.Equatable {
    public let securityProfileTargets: [IotClientTypes.SecurityProfileTarget]?
    public let nextToken: Swift.String?
}

extension ListTargetsForSecurityProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case securityProfileTargets
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityProfileTargetsContainer = try containerValues.decodeIfPresent([IotClientTypes.SecurityProfileTarget?].self, forKey: .securityProfileTargets)
        var securityProfileTargetsDecoded0:[IotClientTypes.SecurityProfileTarget]? = nil
        if let securityProfileTargetsContainer = securityProfileTargetsContainer {
            securityProfileTargetsDecoded0 = [IotClientTypes.SecurityProfileTarget]()
            for structure0 in securityProfileTargetsContainer {
                if let structure0 = structure0 {
                    securityProfileTargetsDecoded0?.append(structure0)
                }
            }
        }
        securityProfileTargets = securityProfileTargetsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListThingGroupsForThingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingGroupsForThingInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), thingName: \(Swift.String(describing: thingName)))"}
}

extension ListThingGroupsForThingInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListThingGroupsForThingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingGroupsForThingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingGroupsForThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingGroupsForThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingGroupsForThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingGroupsForThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingGroupsForThingOutputError>
}

public struct ListThingGroupsForThingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingGroupsForThingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingGroupsForThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingGroupsForThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingGroupsForThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingGroupsForThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingGroupsForThingOutputError>
}

public struct ListThingGroupsForThingInput: Swift.Equatable {
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    /// 			value from a previous response; otherwise <b>null</b> to receive
    /// 			the first set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The thing name.</p>
    public let thingName: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.thingName = thingName
    }
}

struct ListThingGroupsForThingInputBody: Swift.Equatable {
}

extension ListThingGroupsForThingInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListThingGroupsForThingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListThingGroupsForThingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListThingGroupsForThingOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListThingGroupsForThingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingGroupsForThingOutputResponse(nextToken: \(Swift.String(describing: nextToken)), thingGroups: \(Swift.String(describing: thingGroups)))"}
}

extension ListThingGroupsForThingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListThingGroupsForThingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.thingGroups = output.thingGroups
        } else {
            self.nextToken = nil
            self.thingGroups = nil
        }
    }
}

public struct ListThingGroupsForThingOutputResponse: Swift.Equatable {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    public let nextToken: Swift.String?
    /// <p>The thing groups.</p>
    public let thingGroups: [IotClientTypes.GroupNameAndArn]?

    public init (
        nextToken: Swift.String? = nil,
        thingGroups: [IotClientTypes.GroupNameAndArn]? = nil
    )
    {
        self.nextToken = nextToken
        self.thingGroups = thingGroups
    }
}

struct ListThingGroupsForThingOutputResponseBody: Swift.Equatable {
    public let thingGroups: [IotClientTypes.GroupNameAndArn]?
    public let nextToken: Swift.String?
}

extension ListThingGroupsForThingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case thingGroups
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupsContainer = try containerValues.decodeIfPresent([IotClientTypes.GroupNameAndArn?].self, forKey: .thingGroups)
        var thingGroupsDecoded0:[IotClientTypes.GroupNameAndArn]? = nil
        if let thingGroupsContainer = thingGroupsContainer {
            thingGroupsDecoded0 = [IotClientTypes.GroupNameAndArn]()
            for structure0 in thingGroupsContainer {
                if let structure0 = structure0 {
                    thingGroupsDecoded0?.append(structure0)
                }
            }
        }
        thingGroups = thingGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListThingGroupsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingGroupsInput(maxResults: \(Swift.String(describing: maxResults)), namePrefixFilter: \(Swift.String(describing: namePrefixFilter)), nextToken: \(Swift.String(describing: nextToken)), parentGroup: \(Swift.String(describing: parentGroup)), recursive: \(Swift.String(describing: recursive)))"}
}

extension ListThingGroupsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListThingGroupsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingGroupsOutputError>
}

public struct ListThingGroupsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let parentGroup = input.operationInput.parentGroup {
            let parentGroupQueryItem = ClientRuntime.URLQueryItem(name: "parentGroup".urlPercentEncoding(), value: Swift.String(parentGroup).urlPercentEncoding())
            input.builder.withQueryItem(parentGroupQueryItem)
        }
        if let namePrefixFilter = input.operationInput.namePrefixFilter {
            let namePrefixFilterQueryItem = ClientRuntime.URLQueryItem(name: "namePrefixFilter".urlPercentEncoding(), value: Swift.String(namePrefixFilter).urlPercentEncoding())
            input.builder.withQueryItem(namePrefixFilterQueryItem)
        }
        if let recursive = input.operationInput.recursive {
            let recursiveQueryItem = ClientRuntime.URLQueryItem(name: "recursive".urlPercentEncoding(), value: Swift.String(recursive).urlPercentEncoding())
            input.builder.withQueryItem(recursiveQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingGroupsOutputError>
}

public struct ListThingGroupsInput: Swift.Equatable {
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>A filter that limits the results to those with the specified name prefix.</p>
    public let namePrefixFilter: Swift.String?
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    /// 			value from a previous response; otherwise <b>null</b> to receive
    /// 			the first set of results.</p>
    public let nextToken: Swift.String?
    /// <p>A filter that limits the results to those with the specified parent group.</p>
    public let parentGroup: Swift.String?
    /// <p>If true, return child groups as well.</p>
    public let recursive: Swift.Bool?

    public init (
        maxResults: Swift.Int? = nil,
        namePrefixFilter: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        parentGroup: Swift.String? = nil,
        recursive: Swift.Bool? = nil
    )
    {
        self.maxResults = maxResults
        self.namePrefixFilter = namePrefixFilter
        self.nextToken = nextToken
        self.parentGroup = parentGroup
        self.recursive = recursive
    }
}

struct ListThingGroupsInputBody: Swift.Equatable {
}

extension ListThingGroupsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListThingGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListThingGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListThingGroupsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListThingGroupsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingGroupsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), thingGroups: \(Swift.String(describing: thingGroups)))"}
}

extension ListThingGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListThingGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.thingGroups = output.thingGroups
        } else {
            self.nextToken = nil
            self.thingGroups = nil
        }
    }
}

public struct ListThingGroupsOutputResponse: Swift.Equatable {
    /// <p>The token to use to get the next set of results. Will not be returned if operation has returned all results.</p>
    public let nextToken: Swift.String?
    /// <p>The thing groups.</p>
    public let thingGroups: [IotClientTypes.GroupNameAndArn]?

    public init (
        nextToken: Swift.String? = nil,
        thingGroups: [IotClientTypes.GroupNameAndArn]? = nil
    )
    {
        self.nextToken = nextToken
        self.thingGroups = thingGroups
    }
}

struct ListThingGroupsOutputResponseBody: Swift.Equatable {
    public let thingGroups: [IotClientTypes.GroupNameAndArn]?
    public let nextToken: Swift.String?
}

extension ListThingGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case thingGroups
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupsContainer = try containerValues.decodeIfPresent([IotClientTypes.GroupNameAndArn?].self, forKey: .thingGroups)
        var thingGroupsDecoded0:[IotClientTypes.GroupNameAndArn]? = nil
        if let thingGroupsContainer = thingGroupsContainer {
            thingGroupsDecoded0 = [IotClientTypes.GroupNameAndArn]()
            for structure0 in thingGroupsContainer {
                if let structure0 = structure0 {
                    thingGroupsDecoded0?.append(structure0)
                }
            }
        }
        thingGroups = thingGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListThingPrincipalsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingPrincipalsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), thingName: \(Swift.String(describing: thingName)))"}
}

extension ListThingPrincipalsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListThingPrincipalsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingPrincipalsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingPrincipalsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingPrincipalsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingPrincipalsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingPrincipalsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingPrincipalsOutputError>
}

public struct ListThingPrincipalsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingPrincipalsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingPrincipalsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingPrincipalsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingPrincipalsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingPrincipalsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingPrincipalsOutputError>
}

/// <p>The input for the ListThingPrincipal operation.</p>
public struct ListThingPrincipalsInput: Swift.Equatable {
    /// <p>The maximum number of results to return in this operation.</p>
    public let maxResults: Swift.Int?
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    /// 			value from a previous response; otherwise <b>null</b> to receive
    /// 			the first set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The name of the thing.</p>
    public let thingName: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.thingName = thingName
    }
}

struct ListThingPrincipalsInputBody: Swift.Equatable {
}

extension ListThingPrincipalsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListThingPrincipalsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListThingPrincipalsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListThingPrincipalsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListThingPrincipalsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingPrincipalsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), principals: \(Swift.String(describing: principals)))"}
}

extension ListThingPrincipalsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListThingPrincipalsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.principals = output.principals
        } else {
            self.nextToken = nil
            self.principals = nil
        }
    }
}

/// <p>The output from the ListThingPrincipals operation.</p>
public struct ListThingPrincipalsOutputResponse: Swift.Equatable {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    public let nextToken: Swift.String?
    /// <p>The principals associated with the thing.</p>
    public let principals: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        principals: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.principals = principals
    }
}

struct ListThingPrincipalsOutputResponseBody: Swift.Equatable {
    public let principals: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListThingPrincipalsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case principals
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .principals)
        var principalsDecoded0:[Swift.String]? = nil
        if let principalsContainer = principalsContainer {
            principalsDecoded0 = [Swift.String]()
            for string0 in principalsContainer {
                if let string0 = string0 {
                    principalsDecoded0?.append(string0)
                }
            }
        }
        principals = principalsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListThingRegistrationTaskReportsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingRegistrationTaskReportsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), reportType: \(Swift.String(describing: reportType)), taskId: \(Swift.String(describing: taskId)))"}
}

extension ListThingRegistrationTaskReportsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListThingRegistrationTaskReportsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingRegistrationTaskReportsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingRegistrationTaskReportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingRegistrationTaskReportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingRegistrationTaskReportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingRegistrationTaskReportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingRegistrationTaskReportsOutputError>
}

public struct ListThingRegistrationTaskReportsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingRegistrationTaskReportsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingRegistrationTaskReportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingRegistrationTaskReportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let reportType = input.operationInput.reportType {
            let reportTypeQueryItem = ClientRuntime.URLQueryItem(name: "reportType".urlPercentEncoding(), value: Swift.String(reportType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(reportTypeQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingRegistrationTaskReportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingRegistrationTaskReportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingRegistrationTaskReportsOutputError>
}

public struct ListThingRegistrationTaskReportsInput: Swift.Equatable {
    /// <p>The maximum number of results to return per request.</p>
    public let maxResults: Swift.Int?
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    /// 			value from a previous response; otherwise <b>null</b> to receive
    /// 		the first set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The type of task report.</p>
    public let reportType: IotClientTypes.ReportType?
    /// <p>The id of the task.</p>
    public let taskId: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        reportType: IotClientTypes.ReportType? = nil,
        taskId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reportType = reportType
        self.taskId = taskId
    }
}

struct ListThingRegistrationTaskReportsInputBody: Swift.Equatable {
}

extension ListThingRegistrationTaskReportsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListThingRegistrationTaskReportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListThingRegistrationTaskReportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListThingRegistrationTaskReportsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListThingRegistrationTaskReportsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingRegistrationTaskReportsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), reportType: \(Swift.String(describing: reportType)), resourceLinks: \(Swift.String(describing: resourceLinks)))"}
}

extension ListThingRegistrationTaskReportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListThingRegistrationTaskReportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.reportType = output.reportType
            self.resourceLinks = output.resourceLinks
        } else {
            self.nextToken = nil
            self.reportType = nil
            self.resourceLinks = nil
        }
    }
}

public struct ListThingRegistrationTaskReportsOutputResponse: Swift.Equatable {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    public let nextToken: Swift.String?
    /// <p>The type of task report.</p>
    public let reportType: IotClientTypes.ReportType?
    /// <p>Links to the task resources.</p>
    public let resourceLinks: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        reportType: IotClientTypes.ReportType? = nil,
        resourceLinks: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.reportType = reportType
        self.resourceLinks = resourceLinks
    }
}

struct ListThingRegistrationTaskReportsOutputResponseBody: Swift.Equatable {
    public let resourceLinks: [Swift.String]?
    public let reportType: IotClientTypes.ReportType?
    public let nextToken: Swift.String?
}

extension ListThingRegistrationTaskReportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case reportType
        case resourceLinks
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceLinksContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceLinks)
        var resourceLinksDecoded0:[Swift.String]? = nil
        if let resourceLinksContainer = resourceLinksContainer {
            resourceLinksDecoded0 = [Swift.String]()
            for string0 in resourceLinksContainer {
                if let string0 = string0 {
                    resourceLinksDecoded0?.append(string0)
                }
            }
        }
        resourceLinks = resourceLinksDecoded0
        let reportTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ReportType.self, forKey: .reportType)
        reportType = reportTypeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListThingRegistrationTasksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingRegistrationTasksInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListThingRegistrationTasksInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListThingRegistrationTasksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingRegistrationTasksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingRegistrationTasksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingRegistrationTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingRegistrationTasksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingRegistrationTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingRegistrationTasksOutputError>
}

public struct ListThingRegistrationTasksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingRegistrationTasksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingRegistrationTasksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingRegistrationTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let status = input.operationInput.status {
            let statusQueryItem = ClientRuntime.URLQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingRegistrationTasksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingRegistrationTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingRegistrationTasksOutputError>
}

public struct ListThingRegistrationTasksInput: Swift.Equatable {
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    /// 			value from a previous response; otherwise <b>null</b> to receive
    /// 			the first set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The status of the bulk thing provisioning task.</p>
    public let status: IotClientTypes.Status?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: IotClientTypes.Status? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListThingRegistrationTasksInputBody: Swift.Equatable {
}

extension ListThingRegistrationTasksInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListThingRegistrationTasksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListThingRegistrationTasksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListThingRegistrationTasksOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListThingRegistrationTasksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingRegistrationTasksOutputResponse(nextToken: \(Swift.String(describing: nextToken)), taskIds: \(Swift.String(describing: taskIds)))"}
}

extension ListThingRegistrationTasksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListThingRegistrationTasksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.taskIds = output.taskIds
        } else {
            self.nextToken = nil
            self.taskIds = nil
        }
    }
}

public struct ListThingRegistrationTasksOutputResponse: Swift.Equatable {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    public let nextToken: Swift.String?
    /// <p>A list of bulk thing provisioning task IDs.</p>
    public let taskIds: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        taskIds: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.taskIds = taskIds
    }
}

struct ListThingRegistrationTasksOutputResponseBody: Swift.Equatable {
    public let taskIds: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListThingRegistrationTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case taskIds
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .taskIds)
        var taskIdsDecoded0:[Swift.String]? = nil
        if let taskIdsContainer = taskIdsContainer {
            taskIdsDecoded0 = [Swift.String]()
            for string0 in taskIdsContainer {
                if let string0 = string0 {
                    taskIdsDecoded0?.append(string0)
                }
            }
        }
        taskIds = taskIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListThingTypesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingTypesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), thingTypeName: \(Swift.String(describing: thingTypeName)))"}
}

extension ListThingTypesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListThingTypesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingTypesOutputError>
}

public struct ListThingTypesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let thingTypeName = input.operationInput.thingTypeName {
            let thingTypeNameQueryItem = ClientRuntime.URLQueryItem(name: "thingTypeName".urlPercentEncoding(), value: Swift.String(thingTypeName).urlPercentEncoding())
            input.builder.withQueryItem(thingTypeNameQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingTypesOutputError>
}

/// <p>The input for the ListThingTypes operation.</p>
public struct ListThingTypesInput: Swift.Equatable {
    /// <p>The maximum number of results to return in this operation.</p>
    public let maxResults: Swift.Int?
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    /// 			value from a previous response; otherwise <b>null</b> to receive
    /// 			the first set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The name of the thing type.</p>
    public let thingTypeName: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        thingTypeName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.thingTypeName = thingTypeName
    }
}

struct ListThingTypesInputBody: Swift.Equatable {
}

extension ListThingTypesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListThingTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListThingTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListThingTypesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListThingTypesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingTypesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), thingTypes: \(Swift.String(describing: thingTypes)))"}
}

extension ListThingTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListThingTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.thingTypes = output.thingTypes
        } else {
            self.nextToken = nil
            self.thingTypes = nil
        }
    }
}

/// <p>The output for the ListThingTypes operation.</p>
public struct ListThingTypesOutputResponse: Swift.Equatable {
    /// <p>The token for the next set of results. Will not be returned if operation has returned all results.</p>
    public let nextToken: Swift.String?
    /// <p>The thing types.</p>
    public let thingTypes: [IotClientTypes.ThingTypeDefinition]?

    public init (
        nextToken: Swift.String? = nil,
        thingTypes: [IotClientTypes.ThingTypeDefinition]? = nil
    )
    {
        self.nextToken = nextToken
        self.thingTypes = thingTypes
    }
}

struct ListThingTypesOutputResponseBody: Swift.Equatable {
    public let thingTypes: [IotClientTypes.ThingTypeDefinition]?
    public let nextToken: Swift.String?
}

extension ListThingTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case thingTypes
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingTypesContainer = try containerValues.decodeIfPresent([IotClientTypes.ThingTypeDefinition?].self, forKey: .thingTypes)
        var thingTypesDecoded0:[IotClientTypes.ThingTypeDefinition]? = nil
        if let thingTypesContainer = thingTypesContainer {
            thingTypesDecoded0 = [IotClientTypes.ThingTypeDefinition]()
            for structure0 in thingTypesContainer {
                if let structure0 = structure0 {
                    thingTypesDecoded0?.append(structure0)
                }
            }
        }
        thingTypes = thingTypesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListThingsInBillingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingsInBillingGroupInput(billingGroupName: \(Swift.String(describing: billingGroupName)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListThingsInBillingGroupInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListThingsInBillingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingsInBillingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingsInBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingsInBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingsInBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingsInBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingsInBillingGroupOutputError>
}

public struct ListThingsInBillingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingsInBillingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingsInBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingsInBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingsInBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingsInBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingsInBillingGroupOutputError>
}

public struct ListThingsInBillingGroupInput: Swift.Equatable {
    /// <p>The name of the billing group.</p>
    public let billingGroupName: Swift.String?
    /// <p>The maximum number of results to return per request.</p>
    public let maxResults: Swift.Int?
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    /// 			value from a previous response; otherwise <b>null</b> to receive
    /// 			the first set of results.</p>
    public let nextToken: Swift.String?

    public init (
        billingGroupName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.billingGroupName = billingGroupName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListThingsInBillingGroupInputBody: Swift.Equatable {
}

extension ListThingsInBillingGroupInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListThingsInBillingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListThingsInBillingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListThingsInBillingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListThingsInBillingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingsInBillingGroupOutputResponse(nextToken: \(Swift.String(describing: nextToken)), things: \(Swift.String(describing: things)))"}
}

extension ListThingsInBillingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListThingsInBillingGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.things = output.things
        } else {
            self.nextToken = nil
            self.things = nil
        }
    }
}

public struct ListThingsInBillingGroupOutputResponse: Swift.Equatable {
    /// <p>The token to use to get the next set of results. Will not be returned if operation has returned all results.</p>
    public let nextToken: Swift.String?
    /// <p>A list of things in the billing group.</p>
    public let things: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        things: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.things = things
    }
}

struct ListThingsInBillingGroupOutputResponseBody: Swift.Equatable {
    public let things: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListThingsInBillingGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case things
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .things)
        var thingsDecoded0:[Swift.String]? = nil
        if let thingsContainer = thingsContainer {
            thingsDecoded0 = [Swift.String]()
            for string0 in thingsContainer {
                if let string0 = string0 {
                    thingsDecoded0?.append(string0)
                }
            }
        }
        things = thingsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListThingsInThingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingsInThingGroupInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), recursive: \(Swift.String(describing: recursive)), thingGroupName: \(Swift.String(describing: thingGroupName)))"}
}

extension ListThingsInThingGroupInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListThingsInThingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingsInThingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingsInThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingsInThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingsInThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingsInThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingsInThingGroupOutputError>
}

public struct ListThingsInThingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingsInThingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingsInThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingsInThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if input.operationInput.recursive != false {
            let recursiveQueryItem = ClientRuntime.URLQueryItem(name: "recursive".urlPercentEncoding(), value: Swift.String(input.operationInput.recursive).urlPercentEncoding())
            input.builder.withQueryItem(recursiveQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingsInThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingsInThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingsInThingGroupOutputError>
}

public struct ListThingsInThingGroupInput: Swift.Equatable {
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    /// 			value from a previous response; otherwise <b>null</b> to receive
    /// 			the first set of results.</p>
    public let nextToken: Swift.String?
    /// <p>When true, list things in this thing group and in all child groups as
    /// 			well.</p>
    public let recursive: Swift.Bool
    /// <p>The thing group name.</p>
    public let thingGroupName: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        recursive: Swift.Bool = false,
        thingGroupName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.recursive = recursive
        self.thingGroupName = thingGroupName
    }
}

struct ListThingsInThingGroupInputBody: Swift.Equatable {
}

extension ListThingsInThingGroupInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListThingsInThingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListThingsInThingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListThingsInThingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListThingsInThingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingsInThingGroupOutputResponse(nextToken: \(Swift.String(describing: nextToken)), things: \(Swift.String(describing: things)))"}
}

extension ListThingsInThingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListThingsInThingGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.things = output.things
        } else {
            self.nextToken = nil
            self.things = nil
        }
    }
}

public struct ListThingsInThingGroupOutputResponse: Swift.Equatable {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    public let nextToken: Swift.String?
    /// <p>The things in the specified thing group.</p>
    public let things: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        things: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.things = things
    }
}

struct ListThingsInThingGroupOutputResponseBody: Swift.Equatable {
    public let things: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListThingsInThingGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case things
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .things)
        var thingsDecoded0:[Swift.String]? = nil
        if let thingsContainer = thingsContainer {
            thingsDecoded0 = [Swift.String]()
            for string0 in thingsContainer {
                if let string0 = string0 {
                    thingsDecoded0?.append(string0)
                }
            }
        }
        things = thingsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListThingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingsInput(attributeName: \(Swift.String(describing: attributeName)), attributeValue: \(Swift.String(describing: attributeValue)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), thingTypeName: \(Swift.String(describing: thingTypeName)), usePrefixAttributeValue: \(Swift.String(describing: usePrefixAttributeValue)))"}
}

extension ListThingsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListThingsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingsOutputError>
}

public struct ListThingsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListThingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListThingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListThingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.usePrefixAttributeValue != false {
            let usePrefixAttributeValueQueryItem = ClientRuntime.URLQueryItem(name: "usePrefixAttributeValue".urlPercentEncoding(), value: Swift.String(input.operationInput.usePrefixAttributeValue).urlPercentEncoding())
            input.builder.withQueryItem(usePrefixAttributeValueQueryItem)
        }
        if let attributeValue = input.operationInput.attributeValue {
            let attributeValueQueryItem = ClientRuntime.URLQueryItem(name: "attributeValue".urlPercentEncoding(), value: Swift.String(attributeValue).urlPercentEncoding())
            input.builder.withQueryItem(attributeValueQueryItem)
        }
        if let thingTypeName = input.operationInput.thingTypeName {
            let thingTypeNameQueryItem = ClientRuntime.URLQueryItem(name: "thingTypeName".urlPercentEncoding(), value: Swift.String(thingTypeName).urlPercentEncoding())
            input.builder.withQueryItem(thingTypeNameQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let attributeName = input.operationInput.attributeName {
            let attributeNameQueryItem = ClientRuntime.URLQueryItem(name: "attributeName".urlPercentEncoding(), value: Swift.String(attributeName).urlPercentEncoding())
            input.builder.withQueryItem(attributeNameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListThingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListThingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListThingsOutputError>
}

/// <p>The input for the ListThings operation.</p>
public struct ListThingsInput: Swift.Equatable {
    /// <p>The attribute name used to search for things.</p>
    public let attributeName: Swift.String?
    /// <p>The attribute value used to search for things.</p>
    public let attributeValue: Swift.String?
    /// <p>The maximum number of results to return in this operation.</p>
    public let maxResults: Swift.Int?
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    /// 			value from a previous response; otherwise <b>null</b> to receive
    /// 			the first set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The name of the thing type used to search for things.</p>
    public let thingTypeName: Swift.String?
    /// <p>When <code>true</code>, the action returns the thing resources with attribute values
    ///                      that start with the <code>attributeValue</code> provided.</p>
    ///             <p>When <code>false</code>, or not present, the action returns only the thing
    /// 			resources with attribute values that match the entire <code>attributeValue</code>
    /// 			provided. </p>
    public let usePrefixAttributeValue: Swift.Bool

    public init (
        attributeName: Swift.String? = nil,
        attributeValue: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        thingTypeName: Swift.String? = nil,
        usePrefixAttributeValue: Swift.Bool = false
    )
    {
        self.attributeName = attributeName
        self.attributeValue = attributeValue
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.thingTypeName = thingTypeName
        self.usePrefixAttributeValue = usePrefixAttributeValue
    }
}

struct ListThingsInputBody: Swift.Equatable {
}

extension ListThingsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListThingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListThingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListThingsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListThingsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListThingsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), things: \(Swift.String(describing: things)))"}
}

extension ListThingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListThingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.things = output.things
        } else {
            self.nextToken = nil
            self.things = nil
        }
    }
}

/// <p>The output from the ListThings operation.</p>
public struct ListThingsOutputResponse: Swift.Equatable {
    /// <p>The token to use to get the next set of results. Will not be returned if operation has returned all results.</p>
    public let nextToken: Swift.String?
    /// <p>The things.</p>
    public let things: [IotClientTypes.ThingAttribute]?

    public init (
        nextToken: Swift.String? = nil,
        things: [IotClientTypes.ThingAttribute]? = nil
    )
    {
        self.nextToken = nextToken
        self.things = things
    }
}

struct ListThingsOutputResponseBody: Swift.Equatable {
    public let things: [IotClientTypes.ThingAttribute]?
    public let nextToken: Swift.String?
}

extension ListThingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case things
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingsContainer = try containerValues.decodeIfPresent([IotClientTypes.ThingAttribute?].self, forKey: .things)
        var thingsDecoded0:[IotClientTypes.ThingAttribute]? = nil
        if let thingsContainer = thingsContainer {
            thingsDecoded0 = [IotClientTypes.ThingAttribute]()
            for structure0 in thingsContainer {
                if let structure0 = structure0 {
                    thingsDecoded0?.append(structure0)
                }
            }
        }
        things = thingsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTopicRuleDestinationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTopicRuleDestinationsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListTopicRuleDestinationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTopicRuleDestinationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTopicRuleDestinationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTopicRuleDestinationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTopicRuleDestinationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTopicRuleDestinationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTopicRuleDestinationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTopicRuleDestinationsOutputError>
}

public struct ListTopicRuleDestinationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTopicRuleDestinationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTopicRuleDestinationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTopicRuleDestinationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTopicRuleDestinationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTopicRuleDestinationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTopicRuleDestinationsOutputError>
}

public struct ListTopicRuleDestinationsInput: Swift.Equatable {
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    ///          value from a previous response; otherwise <b>null</b> to receive
    ///          the first set of results.</p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListTopicRuleDestinationsInputBody: Swift.Equatable {
}

extension ListTopicRuleDestinationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTopicRuleDestinationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTopicRuleDestinationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTopicRuleDestinationsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTopicRuleDestinationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTopicRuleDestinationsOutputResponse(destinationSummaries: \(Swift.String(describing: destinationSummaries)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListTopicRuleDestinationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTopicRuleDestinationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.destinationSummaries = output.destinationSummaries
            self.nextToken = output.nextToken
        } else {
            self.destinationSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListTopicRuleDestinationsOutputResponse: Swift.Equatable {
    /// <p>Information about a topic rule destination.</p>
    public let destinationSummaries: [IotClientTypes.TopicRuleDestinationSummary]?
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    public let nextToken: Swift.String?

    public init (
        destinationSummaries: [IotClientTypes.TopicRuleDestinationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.destinationSummaries = destinationSummaries
        self.nextToken = nextToken
    }
}

struct ListTopicRuleDestinationsOutputResponseBody: Swift.Equatable {
    public let destinationSummaries: [IotClientTypes.TopicRuleDestinationSummary]?
    public let nextToken: Swift.String?
}

extension ListTopicRuleDestinationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationSummaries
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationSummariesContainer = try containerValues.decodeIfPresent([IotClientTypes.TopicRuleDestinationSummary?].self, forKey: .destinationSummaries)
        var destinationSummariesDecoded0:[IotClientTypes.TopicRuleDestinationSummary]? = nil
        if let destinationSummariesContainer = destinationSummariesContainer {
            destinationSummariesDecoded0 = [IotClientTypes.TopicRuleDestinationSummary]()
            for structure0 in destinationSummariesContainer {
                if let structure0 = structure0 {
                    destinationSummariesDecoded0?.append(structure0)
                }
            }
        }
        destinationSummaries = destinationSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTopicRulesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTopicRulesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), ruleDisabled: \(Swift.String(describing: ruleDisabled)), topic: \(Swift.String(describing: topic)))"}
}

extension ListTopicRulesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTopicRulesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTopicRulesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTopicRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTopicRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTopicRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTopicRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTopicRulesOutputError>
}

public struct ListTopicRulesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTopicRulesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTopicRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTopicRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let ruleDisabled = input.operationInput.ruleDisabled {
            let ruleDisabledQueryItem = ClientRuntime.URLQueryItem(name: "ruleDisabled".urlPercentEncoding(), value: Swift.String(ruleDisabled).urlPercentEncoding())
            input.builder.withQueryItem(ruleDisabledQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let topic = input.operationInput.topic {
            let topicQueryItem = ClientRuntime.URLQueryItem(name: "topic".urlPercentEncoding(), value: Swift.String(topic).urlPercentEncoding())
            input.builder.withQueryItem(topicQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTopicRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTopicRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTopicRulesOutputError>
}

/// <p>The input for the ListTopicRules operation.</p>
public struct ListTopicRulesInput: Swift.Equatable {
    /// <p>The maximum number of results to return.</p>
    public let maxResults: Swift.Int?
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    ///          value from a previous response; otherwise <b>null</b> to receive
    ///          the first set of results.</p>
    public let nextToken: Swift.String?
    /// <p>Specifies whether the rule is disabled.</p>
    public let ruleDisabled: Swift.Bool?
    /// <p>The topic.</p>
    public let topic: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        ruleDisabled: Swift.Bool? = nil,
        topic: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.ruleDisabled = ruleDisabled
        self.topic = topic
    }
}

struct ListTopicRulesInputBody: Swift.Equatable {
}

extension ListTopicRulesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTopicRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTopicRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTopicRulesOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTopicRulesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTopicRulesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), rules: \(Swift.String(describing: rules)))"}
}

extension ListTopicRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTopicRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.rules = output.rules
        } else {
            self.nextToken = nil
            self.rules = nil
        }
    }
}

/// <p>The output from the ListTopicRules operation.</p>
public struct ListTopicRulesOutputResponse: Swift.Equatable {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    public let nextToken: Swift.String?
    /// <p>The rules.</p>
    public let rules: [IotClientTypes.TopicRuleListItem]?

    public init (
        nextToken: Swift.String? = nil,
        rules: [IotClientTypes.TopicRuleListItem]? = nil
    )
    {
        self.nextToken = nextToken
        self.rules = rules
    }
}

struct ListTopicRulesOutputResponseBody: Swift.Equatable {
    public let rules: [IotClientTypes.TopicRuleListItem]?
    public let nextToken: Swift.String?
}

extension ListTopicRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case rules
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rulesContainer = try containerValues.decodeIfPresent([IotClientTypes.TopicRuleListItem?].self, forKey: .rules)
        var rulesDecoded0:[IotClientTypes.TopicRuleListItem]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [IotClientTypes.TopicRuleListItem]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListV2LoggingLevelsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListV2LoggingLevelsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), targetType: \(Swift.String(describing: targetType)))"}
}

extension ListV2LoggingLevelsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListV2LoggingLevelsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListV2LoggingLevelsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListV2LoggingLevelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListV2LoggingLevelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListV2LoggingLevelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListV2LoggingLevelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListV2LoggingLevelsOutputError>
}

public struct ListV2LoggingLevelsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListV2LoggingLevelsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListV2LoggingLevelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListV2LoggingLevelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let targetType = input.operationInput.targetType {
            let targetTypeQueryItem = ClientRuntime.URLQueryItem(name: "targetType".urlPercentEncoding(), value: Swift.String(targetType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(targetTypeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListV2LoggingLevelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListV2LoggingLevelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListV2LoggingLevelsOutputError>
}

public struct ListV2LoggingLevelsInput: Swift.Equatable {
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>To retrieve the next set of results, the <code>nextToken</code>
    ///          value from a previous response; otherwise <b>null</b> to receive
    ///          the first set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The type of resource for which you are configuring logging. Must be
    ///             <code>THING_Group</code>.</p>
    public let targetType: IotClientTypes.LogTargetType?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        targetType: IotClientTypes.LogTargetType? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.targetType = targetType
    }
}

struct ListV2LoggingLevelsInputBody: Swift.Equatable {
}

extension ListV2LoggingLevelsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListV2LoggingLevelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListV2LoggingLevelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotConfiguredException" : self = .notConfiguredException(try NotConfiguredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListV2LoggingLevelsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case notConfiguredException(NotConfiguredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListV2LoggingLevelsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListV2LoggingLevelsOutputResponse(logTargetConfigurations: \(Swift.String(describing: logTargetConfigurations)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListV2LoggingLevelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListV2LoggingLevelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.logTargetConfigurations = output.logTargetConfigurations
            self.nextToken = output.nextToken
        } else {
            self.logTargetConfigurations = nil
            self.nextToken = nil
        }
    }
}

public struct ListV2LoggingLevelsOutputResponse: Swift.Equatable {
    /// <p>The logging configuration for a target.</p>
    public let logTargetConfigurations: [IotClientTypes.LogTargetConfiguration]?
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    public let nextToken: Swift.String?

    public init (
        logTargetConfigurations: [IotClientTypes.LogTargetConfiguration]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.logTargetConfigurations = logTargetConfigurations
        self.nextToken = nextToken
    }
}

struct ListV2LoggingLevelsOutputResponseBody: Swift.Equatable {
    public let logTargetConfigurations: [IotClientTypes.LogTargetConfiguration]?
    public let nextToken: Swift.String?
}

extension ListV2LoggingLevelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logTargetConfigurations
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logTargetConfigurationsContainer = try containerValues.decodeIfPresent([IotClientTypes.LogTargetConfiguration?].self, forKey: .logTargetConfigurations)
        var logTargetConfigurationsDecoded0:[IotClientTypes.LogTargetConfiguration]? = nil
        if let logTargetConfigurationsContainer = logTargetConfigurationsContainer {
            logTargetConfigurationsDecoded0 = [IotClientTypes.LogTargetConfiguration]()
            for structure0 in logTargetConfigurationsContainer {
                if let structure0 = structure0 {
                    logTargetConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        logTargetConfigurations = logTargetConfigurationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListViolationEventsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListViolationEventsInput(behaviorCriteriaType: \(Swift.String(describing: behaviorCriteriaType)), endTime: \(Swift.String(describing: endTime)), listSuppressedAlerts: \(Swift.String(describing: listSuppressedAlerts)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), securityProfileName: \(Swift.String(describing: securityProfileName)), startTime: \(Swift.String(describing: startTime)), thingName: \(Swift.String(describing: thingName)))"}
}

extension ListViolationEventsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListViolationEventsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListViolationEventsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListViolationEventsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListViolationEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListViolationEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListViolationEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListViolationEventsOutputError>
}

public struct ListViolationEventsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListViolationEventsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListViolationEventsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListViolationEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let securityProfileName = input.operationInput.securityProfileName {
            let securityProfileNameQueryItem = ClientRuntime.URLQueryItem(name: "securityProfileName".urlPercentEncoding(), value: Swift.String(securityProfileName).urlPercentEncoding())
            input.builder.withQueryItem(securityProfileNameQueryItem)
        }
        if let listSuppressedAlerts = input.operationInput.listSuppressedAlerts {
            let listSuppressedAlertsQueryItem = ClientRuntime.URLQueryItem(name: "listSuppressedAlerts".urlPercentEncoding(), value: Swift.String(listSuppressedAlerts).urlPercentEncoding())
            input.builder.withQueryItem(listSuppressedAlertsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let behaviorCriteriaType = input.operationInput.behaviorCriteriaType {
            let behaviorCriteriaTypeQueryItem = ClientRuntime.URLQueryItem(name: "behaviorCriteriaType".urlPercentEncoding(), value: Swift.String(behaviorCriteriaType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(behaviorCriteriaTypeQueryItem)
        }
        if let thingName = input.operationInput.thingName {
            let thingNameQueryItem = ClientRuntime.URLQueryItem(name: "thingName".urlPercentEncoding(), value: Swift.String(thingName).urlPercentEncoding())
            input.builder.withQueryItem(thingNameQueryItem)
        }
        if let startTime = input.operationInput.startTime {
            let startTimeQueryItem = ClientRuntime.URLQueryItem(name: "startTime".urlPercentEncoding(), value: Swift.String(startTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(startTimeQueryItem)
        }
        if let endTime = input.operationInput.endTime {
            let endTimeQueryItem = ClientRuntime.URLQueryItem(name: "endTime".urlPercentEncoding(), value: Swift.String(endTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(endTimeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListViolationEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListViolationEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListViolationEventsOutputError>
}

public struct ListViolationEventsInput: Swift.Equatable {
    /// <p>
    ///       The criteria for a behavior.
    ///     </p>
    public let behaviorCriteriaType: IotClientTypes.BehaviorCriteriaType?
    /// <p>The end time for the alerts to be listed.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>
    ///       A list of all suppressed alerts.
    ///     </p>
    public let listSuppressedAlerts: Swift.Bool?
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>A filter to limit results to those alerts generated by the specified security profile.</p>
    public let securityProfileName: Swift.String?
    /// <p>The start time for the alerts to be listed.</p>
    public let startTime: ClientRuntime.Date?
    /// <p>A filter to limit results to those alerts caused by the specified thing.</p>
    public let thingName: Swift.String?

    public init (
        behaviorCriteriaType: IotClientTypes.BehaviorCriteriaType? = nil,
        endTime: ClientRuntime.Date? = nil,
        listSuppressedAlerts: Swift.Bool? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        securityProfileName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.behaviorCriteriaType = behaviorCriteriaType
        self.endTime = endTime
        self.listSuppressedAlerts = listSuppressedAlerts
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.securityProfileName = securityProfileName
        self.startTime = startTime
        self.thingName = thingName
    }
}

struct ListViolationEventsInputBody: Swift.Equatable {
}

extension ListViolationEventsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListViolationEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListViolationEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListViolationEventsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListViolationEventsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListViolationEventsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), violationEvents: \(Swift.String(describing: violationEvents)))"}
}

extension ListViolationEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListViolationEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.violationEvents = output.violationEvents
        } else {
            self.nextToken = nil
            self.violationEvents = nil
        }
    }
}

public struct ListViolationEventsOutputResponse: Swift.Equatable {
    /// <p>A token that can be used to retrieve the next set of results, or <code>null</code> if there are no
    ///         additional results.</p>
    public let nextToken: Swift.String?
    /// <p>The security profile violation alerts issued for this account during the given time period,
    ///       potentially filtered by security profile, behavior violated, or thing (device) violating.</p>
    public let violationEvents: [IotClientTypes.ViolationEvent]?

    public init (
        nextToken: Swift.String? = nil,
        violationEvents: [IotClientTypes.ViolationEvent]? = nil
    )
    {
        self.nextToken = nextToken
        self.violationEvents = violationEvents
    }
}

struct ListViolationEventsOutputResponseBody: Swift.Equatable {
    public let violationEvents: [IotClientTypes.ViolationEvent]?
    public let nextToken: Swift.String?
}

extension ListViolationEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case violationEvents
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let violationEventsContainer = try containerValues.decodeIfPresent([IotClientTypes.ViolationEvent?].self, forKey: .violationEvents)
        var violationEventsDecoded0:[IotClientTypes.ViolationEvent]? = nil
        if let violationEventsContainer = violationEventsContainer {
            violationEventsDecoded0 = [IotClientTypes.ViolationEvent]()
            for structure0 in violationEventsContainer {
                if let structure0 = structure0 {
                    violationEventsDecoded0?.append(structure0)
                }
            }
        }
        violationEvents = violationEventsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension IotClientTypes {
    public enum LogLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case debug
        case disabled
        case error
        case info
        case warn
        case sdkUnknown(Swift.String)

        public static var allCases: [LogLevel] {
            return [
                .debug,
                .disabled,
                .error,
                .info,
                .warn,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .debug: return "DEBUG"
            case .disabled: return "DISABLED"
            case .error: return "ERROR"
            case .info: return "INFO"
            case .warn: return "WARN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogLevel(rawValue: rawValue) ?? LogLevel.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.LogTarget: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetName
        case targetType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let targetName = targetName {
            try encodeContainer.encode(targetName, forKey: .targetName)
        }
        if let targetType = targetType {
            try encodeContainer.encode(targetType.rawValue, forKey: .targetType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.LogTargetType.self, forKey: .targetType)
        targetType = targetTypeDecoded
        let targetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetName)
        targetName = targetNameDecoded
    }
}

extension IotClientTypes.LogTarget: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LogTarget(targetName: \(Swift.String(describing: targetName)), targetType: \(Swift.String(describing: targetType)))"}
}

extension IotClientTypes {
    /// <p>A log target.</p>
    public struct LogTarget: Swift.Equatable {
        /// <p>The target name.</p>
        public let targetName: Swift.String?
        /// <p>The target type.</p>
        public let targetType: IotClientTypes.LogTargetType?

        public init (
            targetName: Swift.String? = nil,
            targetType: IotClientTypes.LogTargetType? = nil
        )
        {
            self.targetName = targetName
            self.targetType = targetType
        }
    }

}

extension IotClientTypes.LogTargetConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logLevel
        case logTarget
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logLevel = logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let logTarget = logTarget {
            try encodeContainer.encode(logTarget, forKey: .logTarget)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logTargetDecoded = try containerValues.decodeIfPresent(IotClientTypes.LogTarget.self, forKey: .logTarget)
        logTarget = logTargetDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(IotClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
    }
}

extension IotClientTypes.LogTargetConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LogTargetConfiguration(logLevel: \(Swift.String(describing: logLevel)), logTarget: \(Swift.String(describing: logTarget)))"}
}

extension IotClientTypes {
    /// <p>The target configuration.</p>
    public struct LogTargetConfiguration: Swift.Equatable {
        /// <p>The logging level.</p>
        public let logLevel: IotClientTypes.LogLevel?
        /// <p>A log target</p>
        public let logTarget: IotClientTypes.LogTarget?

        public init (
            logLevel: IotClientTypes.LogLevel? = nil,
            logTarget: IotClientTypes.LogTarget? = nil
        )
        {
            self.logLevel = logLevel
            self.logTarget = logTarget
        }
    }

}

extension IotClientTypes {
    public enum LogTargetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `default`
        case thingGroup
        case sdkUnknown(Swift.String)

        public static var allCases: [LogTargetType] {
            return [
                .default,
                .thingGroup,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .thingGroup: return "THING_GROUP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogTargetType(rawValue: rawValue) ?? LogTargetType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.LoggingOptionsPayload: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logLevel
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logLevel = logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(IotClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
    }
}

extension IotClientTypes.LoggingOptionsPayload: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoggingOptionsPayload(logLevel: \(Swift.String(describing: logLevel)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension IotClientTypes {
    /// <p>Describes the logging options payload.</p>
    public struct LoggingOptionsPayload: Swift.Equatable {
        /// <p>The log level.</p>
        public let logLevel: IotClientTypes.LogLevel?
        /// <p>The ARN of the IAM role that grants access.</p>
        public let roleArn: Swift.String?

        public init (
            logLevel: IotClientTypes.LogLevel? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.logLevel = logLevel
            self.roleArn = roleArn
        }
    }

}

extension IotClientTypes.MachineLearningDetectionConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidenceLevel
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidenceLevel = confidenceLevel {
            try encodeContainer.encode(confidenceLevel.rawValue, forKey: .confidenceLevel)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let confidenceLevelDecoded = try containerValues.decodeIfPresent(IotClientTypes.ConfidenceLevel.self, forKey: .confidenceLevel)
        confidenceLevel = confidenceLevelDecoded
    }
}

extension IotClientTypes.MachineLearningDetectionConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MachineLearningDetectionConfig(confidenceLevel: \(Swift.String(describing: confidenceLevel)))"}
}

extension IotClientTypes {
    /// <p>
    ///             The configuration of an ML Detect Security Profile.
    ///         </p>
    public struct MachineLearningDetectionConfig: Swift.Equatable {
        /// <p>
        ///             The sensitivity of anomalous behavior evaluation. Can be <code>Low</code>, <code>Medium</code>, or <code>High</code>.
        ///         </p>
        public let confidenceLevel: IotClientTypes.ConfidenceLevel?

        public init (
            confidenceLevel: IotClientTypes.ConfidenceLevel? = nil
        )
        {
            self.confidenceLevel = confidenceLevel
        }
    }

}

extension MalformedPolicyException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MalformedPolicyException(message: \(Swift.String(describing: message)))"}
}

extension MalformedPolicyException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MalformedPolicyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The policy documentation is not valid.</p>
public struct MalformedPolicyException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MalformedPolicyExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MalformedPolicyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes {
    public enum MessageFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case json
        case raw
        case sdkUnknown(Swift.String)

        public static var allCases: [MessageFormat] {
            return [
                .json,
                .raw,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .json: return "JSON"
            case .raw: return "RAW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MessageFormat(rawValue: rawValue) ?? MessageFormat.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.MetricDimension: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionName
        case `operator` = "operator"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensionName = dimensionName {
            try encodeContainer.encode(dimensionName, forKey: .dimensionName)
        }
        if let `operator` = `operator` {
            try encodeContainer.encode(`operator`.rawValue, forKey: .`operator`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dimensionName)
        dimensionName = dimensionNameDecoded
        let operatorDecoded = try containerValues.decodeIfPresent(IotClientTypes.DimensionValueOperator.self, forKey: .operator)
        `operator` = operatorDecoded
    }
}

extension IotClientTypes.MetricDimension: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricDimension(dimensionName: \(Swift.String(describing: dimensionName)), operator: \(Swift.String(describing: `operator`)))"}
}

extension IotClientTypes {
    /// <p>The dimension of a metric.</p>
    public struct MetricDimension: Swift.Equatable {
        /// <p>Defines how the <code>dimensionValues</code> of a dimension are interpreted. For example, for dimension type TOPIC_FILTER, the <code>IN</code> operator, a message will be counted only if its topic matches one of the topic filters. With <code>NOT_IN</code> operator, a message will be counted only if it doesn't match any of the topic filters. The operator is optional: if it's not provided (is <code>null</code>), it will be interpreted as <code>IN</code>.</p>
        public let `operator`: IotClientTypes.DimensionValueOperator?
        /// <p>A unique identifier for the dimension.</p>
        public let dimensionName: Swift.String?

        public init (
            `operator`: IotClientTypes.DimensionValueOperator? = nil,
            dimensionName: Swift.String? = nil
        )
        {
            self.`operator` = `operator`
            self.dimensionName = dimensionName
        }
    }

}

extension IotClientTypes.MetricToRetain: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metric
        case metricDimension
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metric = metric {
            try encodeContainer.encode(metric, forKey: .metric)
        }
        if let metricDimension = metricDimension {
            try encodeContainer.encode(metricDimension, forKey: .metricDimension)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metric)
        metric = metricDecoded
        let metricDimensionDecoded = try containerValues.decodeIfPresent(IotClientTypes.MetricDimension.self, forKey: .metricDimension)
        metricDimension = metricDimensionDecoded
    }
}

extension IotClientTypes.MetricToRetain: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricToRetain(metric: \(Swift.String(describing: metric)), metricDimension: \(Swift.String(describing: metricDimension)))"}
}

extension IotClientTypes {
    /// <p>The metric you want to retain. Dimensions are optional.</p>
    public struct MetricToRetain: Swift.Equatable {
        /// <p>What is measured by the behavior.</p>
        public let metric: Swift.String?
        /// <p>The dimension of a metric. This can't be used with custom metrics.</p>
        public let metricDimension: IotClientTypes.MetricDimension?

        public init (
            metric: Swift.String? = nil,
            metricDimension: IotClientTypes.MetricDimension? = nil
        )
        {
            self.metric = metric
            self.metricDimension = metricDimension
        }
    }

}

extension IotClientTypes.MetricValue: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrs
        case count
        case number
        case numbers
        case ports
        case strings
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrs = cidrs {
            var cidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrs)
            for cidrs0 in cidrs {
                try cidrsContainer.encode(cidrs0)
            }
        }
        if let count = count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let number = number {
            try encodeContainer.encode(number, forKey: .number)
        }
        if let numbers = numbers {
            var numbersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .numbers)
            for numberlist0 in numbers {
                try numbersContainer.encode(numberlist0)
            }
        }
        if let ports = ports {
            var portsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ports)
            for ports0 in ports {
                try portsContainer.encode(ports0)
            }
        }
        if let strings = strings {
            var stringsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .strings)
            for stringlist0 in strings {
                try stringsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
        let cidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrs)
        var cidrsDecoded0:[Swift.String]? = nil
        if let cidrsContainer = cidrsContainer {
            cidrsDecoded0 = [Swift.String]()
            for string0 in cidrsContainer {
                if let string0 = string0 {
                    cidrsDecoded0?.append(string0)
                }
            }
        }
        cidrs = cidrsDecoded0
        let portsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .ports)
        var portsDecoded0:[Swift.Int]? = nil
        if let portsContainer = portsContainer {
            portsDecoded0 = [Swift.Int]()
            for integer0 in portsContainer {
                if let integer0 = integer0 {
                    portsDecoded0?.append(integer0)
                }
            }
        }
        ports = portsDecoded0
        let numberDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .number)
        number = numberDecoded
        let numbersContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .numbers)
        var numbersDecoded0:[Swift.Double]? = nil
        if let numbersContainer = numbersContainer {
            numbersDecoded0 = [Swift.Double]()
            for double0 in numbersContainer {
                if let double0 = double0 {
                    numbersDecoded0?.append(double0)
                }
            }
        }
        numbers = numbersDecoded0
        let stringsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .strings)
        var stringsDecoded0:[Swift.String]? = nil
        if let stringsContainer = stringsContainer {
            stringsDecoded0 = [Swift.String]()
            for string0 in stringsContainer {
                if let string0 = string0 {
                    stringsDecoded0?.append(string0)
                }
            }
        }
        strings = stringsDecoded0
    }
}

extension IotClientTypes.MetricValue: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricValue(cidrs: \(Swift.String(describing: cidrs)), count: \(Swift.String(describing: count)), number: \(Swift.String(describing: number)), numbers: \(Swift.String(describing: numbers)), ports: \(Swift.String(describing: ports)), strings: \(Swift.String(describing: strings)))"}
}

extension IotClientTypes {
    /// <p>The value to be compared with the <code>metric</code>.</p>
    public struct MetricValue: Swift.Equatable {
        /// <p>If the <code>comparisonOperator</code> calls for a set of CIDRs, use this
        ///           to specify that set to be compared with the <code>metric</code>.</p>
        public let cidrs: [Swift.String]?
        /// <p>If the <code>comparisonOperator</code> calls for a numeric value, use this
        ///           to specify that numeric value to be compared with the <code>metric</code>.</p>
        public let count: Swift.Int?
        /// <p>
        ///             The numeral value of a metric.
        ///         </p>
        public let number: Swift.Double?
        /// <p>
        ///             The numeral values of a metric.
        ///         </p>
        public let numbers: [Swift.Double]?
        /// <p>If the <code>comparisonOperator</code> calls for a set of ports, use this
        ///           to specify that set to be compared with the <code>metric</code>.</p>
        public let ports: [Swift.Int]?
        /// <p>
        ///             The string values of a metric.
        ///         </p>
        public let strings: [Swift.String]?

        public init (
            cidrs: [Swift.String]? = nil,
            count: Swift.Int? = nil,
            number: Swift.Double? = nil,
            numbers: [Swift.Double]? = nil,
            ports: [Swift.Int]? = nil,
            strings: [Swift.String]? = nil
        )
        {
            self.cidrs = cidrs
            self.count = count
            self.number = number
            self.numbers = numbers
            self.ports = ports
            self.strings = strings
        }
    }

}

extension IotClientTypes.MitigationAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionParams
        case id
        case name
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionParams = actionParams {
            try encodeContainer.encode(actionParams, forKey: .actionParams)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let actionParamsDecoded = try containerValues.decodeIfPresent(IotClientTypes.MitigationActionParams.self, forKey: .actionParams)
        actionParams = actionParamsDecoded
    }
}

extension IotClientTypes.MitigationAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MitigationAction(actionParams: \(Swift.String(describing: actionParams)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension IotClientTypes {
    /// <p>Describes which changes should be applied as part of a mitigation action.</p>
    public struct MitigationAction: Swift.Equatable {
        /// <p>The set of parameters for this mitigation action. The parameters vary, depending on the kind of action you apply.</p>
        public let actionParams: IotClientTypes.MitigationActionParams?
        /// <p>A unique identifier for the mitigation action.</p>
        public let id: Swift.String?
        /// <p>A user-friendly name for the mitigation action.</p>
        public let name: Swift.String?
        /// <p>The IAM role ARN used to apply this mitigation action.</p>
        public let roleArn: Swift.String?

        public init (
            actionParams: IotClientTypes.MitigationActionParams? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.actionParams = actionParams
            self.id = id
            self.name = name
            self.roleArn = roleArn
        }
    }

}

extension IotClientTypes.MitigationActionIdentifier: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionArn
        case actionName
        case creationDate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionArn = actionArn {
            try encodeContainer.encode(actionArn, forKey: .actionArn)
        }
        if let actionName = actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let actionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionArn)
        actionArn = actionArnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension IotClientTypes.MitigationActionIdentifier: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MitigationActionIdentifier(actionArn: \(Swift.String(describing: actionArn)), actionName: \(Swift.String(describing: actionName)), creationDate: \(Swift.String(describing: creationDate)))"}
}

extension IotClientTypes {
    /// <p>Information that identifies a mitigation action. This information is returned by ListMitigationActions.</p>
    public struct MitigationActionIdentifier: Swift.Equatable {
        /// <p>The IAM role ARN used to apply this mitigation action.</p>
        public let actionArn: Swift.String?
        /// <p>The friendly name of the mitigation action.</p>
        public let actionName: Swift.String?
        /// <p>The date when this mitigation action was created.</p>
        public let creationDate: ClientRuntime.Date?

        public init (
            actionArn: Swift.String? = nil,
            actionName: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil
        )
        {
            self.actionArn = actionArn
            self.actionName = actionName
            self.creationDate = creationDate
        }
    }

}

extension IotClientTypes.MitigationActionParams: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addThingsToThingGroupParams
        case enableIoTLoggingParams
        case publishFindingToSnsParams
        case replaceDefaultPolicyVersionParams
        case updateCACertificateParams
        case updateDeviceCertificateParams
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addThingsToThingGroupParams = addThingsToThingGroupParams {
            try encodeContainer.encode(addThingsToThingGroupParams, forKey: .addThingsToThingGroupParams)
        }
        if let enableIoTLoggingParams = enableIoTLoggingParams {
            try encodeContainer.encode(enableIoTLoggingParams, forKey: .enableIoTLoggingParams)
        }
        if let publishFindingToSnsParams = publishFindingToSnsParams {
            try encodeContainer.encode(publishFindingToSnsParams, forKey: .publishFindingToSnsParams)
        }
        if let replaceDefaultPolicyVersionParams = replaceDefaultPolicyVersionParams {
            try encodeContainer.encode(replaceDefaultPolicyVersionParams, forKey: .replaceDefaultPolicyVersionParams)
        }
        if let updateCACertificateParams = updateCACertificateParams {
            try encodeContainer.encode(updateCACertificateParams, forKey: .updateCACertificateParams)
        }
        if let updateDeviceCertificateParams = updateDeviceCertificateParams {
            try encodeContainer.encode(updateDeviceCertificateParams, forKey: .updateDeviceCertificateParams)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDeviceCertificateParamsDecoded = try containerValues.decodeIfPresent(IotClientTypes.UpdateDeviceCertificateParams.self, forKey: .updateDeviceCertificateParams)
        updateDeviceCertificateParams = updateDeviceCertificateParamsDecoded
        let updateCACertificateParamsDecoded = try containerValues.decodeIfPresent(IotClientTypes.UpdateCACertificateParams.self, forKey: .updateCACertificateParams)
        updateCACertificateParams = updateCACertificateParamsDecoded
        let addThingsToThingGroupParamsDecoded = try containerValues.decodeIfPresent(IotClientTypes.AddThingsToThingGroupParams.self, forKey: .addThingsToThingGroupParams)
        addThingsToThingGroupParams = addThingsToThingGroupParamsDecoded
        let replaceDefaultPolicyVersionParamsDecoded = try containerValues.decodeIfPresent(IotClientTypes.ReplaceDefaultPolicyVersionParams.self, forKey: .replaceDefaultPolicyVersionParams)
        replaceDefaultPolicyVersionParams = replaceDefaultPolicyVersionParamsDecoded
        let enableIoTLoggingParamsDecoded = try containerValues.decodeIfPresent(IotClientTypes.EnableIoTLoggingParams.self, forKey: .enableIoTLoggingParams)
        enableIoTLoggingParams = enableIoTLoggingParamsDecoded
        let publishFindingToSnsParamsDecoded = try containerValues.decodeIfPresent(IotClientTypes.PublishFindingToSnsParams.self, forKey: .publishFindingToSnsParams)
        publishFindingToSnsParams = publishFindingToSnsParamsDecoded
    }
}

extension IotClientTypes.MitigationActionParams: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MitigationActionParams(addThingsToThingGroupParams: \(Swift.String(describing: addThingsToThingGroupParams)), enableIoTLoggingParams: \(Swift.String(describing: enableIoTLoggingParams)), publishFindingToSnsParams: \(Swift.String(describing: publishFindingToSnsParams)), replaceDefaultPolicyVersionParams: \(Swift.String(describing: replaceDefaultPolicyVersionParams)), updateCACertificateParams: \(Swift.String(describing: updateCACertificateParams)), updateDeviceCertificateParams: \(Swift.String(describing: updateDeviceCertificateParams)))"}
}

extension IotClientTypes {
    /// <p>The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).</p>
    public struct MitigationActionParams: Swift.Equatable {
        /// <p>Parameters to define a mitigation action that moves devices associated with a certificate to one or more specified thing groups, typically for quarantine.</p>
        public let addThingsToThingGroupParams: IotClientTypes.AddThingsToThingGroupParams?
        /// <p>Parameters to define a mitigation action that enables AWS IoT logging at a specified level of detail.</p>
        public let enableIoTLoggingParams: IotClientTypes.EnableIoTLoggingParams?
        /// <p>Parameters to define a mitigation action that publishes findings to Amazon Simple Notification Service (Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.</p>
        public let publishFindingToSnsParams: IotClientTypes.PublishFindingToSnsParams?
        /// <p>Parameters to define a mitigation action that adds a blank policy to restrict permissions.</p>
        public let replaceDefaultPolicyVersionParams: IotClientTypes.ReplaceDefaultPolicyVersionParams?
        /// <p>Parameters to define a mitigation action that changes the state of the CA certificate to inactive.</p>
        public let updateCACertificateParams: IotClientTypes.UpdateCACertificateParams?
        /// <p>Parameters to define a mitigation action that changes the state of the device certificate to inactive.</p>
        public let updateDeviceCertificateParams: IotClientTypes.UpdateDeviceCertificateParams?

        public init (
            addThingsToThingGroupParams: IotClientTypes.AddThingsToThingGroupParams? = nil,
            enableIoTLoggingParams: IotClientTypes.EnableIoTLoggingParams? = nil,
            publishFindingToSnsParams: IotClientTypes.PublishFindingToSnsParams? = nil,
            replaceDefaultPolicyVersionParams: IotClientTypes.ReplaceDefaultPolicyVersionParams? = nil,
            updateCACertificateParams: IotClientTypes.UpdateCACertificateParams? = nil,
            updateDeviceCertificateParams: IotClientTypes.UpdateDeviceCertificateParams? = nil
        )
        {
            self.addThingsToThingGroupParams = addThingsToThingGroupParams
            self.enableIoTLoggingParams = enableIoTLoggingParams
            self.publishFindingToSnsParams = publishFindingToSnsParams
            self.replaceDefaultPolicyVersionParams = replaceDefaultPolicyVersionParams
            self.updateCACertificateParams = updateCACertificateParams
            self.updateDeviceCertificateParams = updateDeviceCertificateParams
        }
    }

}

extension IotClientTypes {
    public enum MitigationActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case addThingsToThingGroup
        case enableIotLogging
        case publishFindingToSns
        case replaceDefaultPolicyVersion
        case updateCaCertificate
        case updateDeviceCertificate
        case sdkUnknown(Swift.String)

        public static var allCases: [MitigationActionType] {
            return [
                .addThingsToThingGroup,
                .enableIotLogging,
                .publishFindingToSns,
                .replaceDefaultPolicyVersion,
                .updateCaCertificate,
                .updateDeviceCertificate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .addThingsToThingGroup: return "ADD_THINGS_TO_THING_GROUP"
            case .enableIotLogging: return "ENABLE_IOT_LOGGING"
            case .publishFindingToSns: return "PUBLISH_FINDING_TO_SNS"
            case .replaceDefaultPolicyVersion: return "REPLACE_DEFAULT_POLICY_VERSION"
            case .updateCaCertificate: return "UPDATE_CA_CERTIFICATE"
            case .updateDeviceCertificate: return "UPDATE_DEVICE_CERTIFICATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MitigationActionType(rawValue: rawValue) ?? MitigationActionType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes {
    public enum ModelStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case expired
        case pendingBuild
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelStatus] {
            return [
                .active,
                .expired,
                .pendingBuild,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .expired: return "EXPIRED"
            case .pendingBuild: return "PENDING_BUILD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelStatus(rawValue: rawValue) ?? ModelStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.MqttContext: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId
        case password
        case username
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let password = password {
            try encodeContainer.encode(password.base64EncodedString(), forKey: .password)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .password)
        password = passwordDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
    }
}

extension IotClientTypes.MqttContext: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MqttContext(clientId: \(Swift.String(describing: clientId)), password: \(Swift.String(describing: password)), username: \(Swift.String(describing: username)))"}
}

extension IotClientTypes {
    /// <p>Specifies the MQTT context to use for the test authorizer request</p>
    public struct MqttContext: Swift.Equatable {
        /// <p>The value of the <code>clientId</code> key in an MQTT authorization request.</p>
        public let clientId: Swift.String?
        /// <p>The value of the <code>password</code> key in an MQTT authorization request.</p>
        public let password: ClientRuntime.Data?
        /// <p>The value of the <code>username</code> key in an MQTT authorization request.</p>
        public let username: Swift.String?

        public init (
            clientId: Swift.String? = nil,
            password: ClientRuntime.Data? = nil,
            username: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.password = password
            self.username = username
        }
    }

}

extension IotClientTypes.NonCompliantResource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInfo
        case resourceIdentifier
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalInfo = additionalInfo {
            var additionalInfoContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .additionalInfo)
            for (dictKey0, stringmap0) in additionalInfo {
                try additionalInfoContainer.encode(stringmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let resourceIdentifier = resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(IotClientTypes.ResourceIdentifier.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
        let additionalInfoContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .additionalInfo)
        var additionalInfoDecoded0: [Swift.String:Swift.String]? = nil
        if let additionalInfoContainer = additionalInfoContainer {
            additionalInfoDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in additionalInfoContainer {
                if let string0 = string0 {
                    additionalInfoDecoded0?[key0] = string0
                }
            }
        }
        additionalInfo = additionalInfoDecoded0
    }
}

extension IotClientTypes.NonCompliantResource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NonCompliantResource(additionalInfo: \(Swift.String(describing: additionalInfo)), resourceIdentifier: \(Swift.String(describing: resourceIdentifier)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension IotClientTypes {
    /// <p>Information about the resource that was noncompliant with the audit check.</p>
    public struct NonCompliantResource: Swift.Equatable {
        /// <p>Other information about the noncompliant resource.</p>
        public let additionalInfo: [Swift.String:Swift.String]?
        /// <p>Information that identifies the noncompliant resource.</p>
        public let resourceIdentifier: IotClientTypes.ResourceIdentifier?
        /// <p>The type of the noncompliant resource.</p>
        public let resourceType: IotClientTypes.ResourceType?

        public init (
            additionalInfo: [Swift.String:Swift.String]? = nil,
            resourceIdentifier: IotClientTypes.ResourceIdentifier? = nil,
            resourceType: IotClientTypes.ResourceType? = nil
        )
        {
            self.additionalInfo = additionalInfo
            self.resourceIdentifier = resourceIdentifier
            self.resourceType = resourceType
        }
    }

}

extension NotConfiguredException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotConfiguredException(message: \(Swift.String(describing: message)))"}
}

extension NotConfiguredException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NotConfiguredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The resource is not configured.</p>
public struct NotConfiguredException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotConfiguredExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NotConfiguredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes.OTAUpdateFile: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case codeSigning
        case fileLocation
        case fileName
        case fileType
        case fileVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributesmap0) in attributes {
                try attributesContainer.encode(attributesmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let codeSigning = codeSigning {
            try encodeContainer.encode(codeSigning, forKey: .codeSigning)
        }
        if let fileLocation = fileLocation {
            try encodeContainer.encode(fileLocation, forKey: .fileLocation)
        }
        if let fileName = fileName {
            try encodeContainer.encode(fileName, forKey: .fileName)
        }
        if let fileType = fileType {
            try encodeContainer.encode(fileType, forKey: .fileType)
        }
        if let fileVersion = fileVersion {
            try encodeContainer.encode(fileVersion, forKey: .fileVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileName)
        fileName = fileNameDecoded
        let fileTypeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fileType)
        fileType = fileTypeDecoded
        let fileVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileVersion)
        fileVersion = fileVersionDecoded
        let fileLocationDecoded = try containerValues.decodeIfPresent(IotClientTypes.FileLocation.self, forKey: .fileLocation)
        fileLocation = fileLocationDecoded
        let codeSigningDecoded = try containerValues.decodeIfPresent(IotClientTypes.CodeSigning.self, forKey: .codeSigning)
        codeSigning = codeSigningDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, value0) in attributesContainer {
                if let value0 = value0 {
                    attributesDecoded0?[key0] = value0
                }
            }
        }
        attributes = attributesDecoded0
    }
}

extension IotClientTypes.OTAUpdateFile: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OTAUpdateFile(attributes: \(Swift.String(describing: attributes)), codeSigning: \(Swift.String(describing: codeSigning)), fileLocation: \(Swift.String(describing: fileLocation)), fileName: \(Swift.String(describing: fileName)), fileType: \(Swift.String(describing: fileType)), fileVersion: \(Swift.String(describing: fileVersion)))"}
}

extension IotClientTypes {
    /// <p>Describes a file to be associated with an OTA update.</p>
    public struct OTAUpdateFile: Swift.Equatable {
        /// <p>A list of name/attribute pairs.</p>
        public let attributes: [Swift.String:Swift.String]?
        /// <p>The code signing method of the file.</p>
        public let codeSigning: IotClientTypes.CodeSigning?
        /// <p>The location of the updated firmware.</p>
        public let fileLocation: IotClientTypes.FileLocation?
        /// <p>The name of the file.</p>
        public let fileName: Swift.String?
        /// <p>An integer value you can include in the job document to allow your devices to identify the type of file received
        ///             from the cloud.</p>
        public let fileType: Swift.Int?
        /// <p>The file version.</p>
        public let fileVersion: Swift.String?

        public init (
            attributes: [Swift.String:Swift.String]? = nil,
            codeSigning: IotClientTypes.CodeSigning? = nil,
            fileLocation: IotClientTypes.FileLocation? = nil,
            fileName: Swift.String? = nil,
            fileType: Swift.Int? = nil,
            fileVersion: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.codeSigning = codeSigning
            self.fileLocation = fileLocation
            self.fileName = fileName
            self.fileType = fileType
            self.fileVersion = fileVersion
        }
    }

}

extension IotClientTypes.OTAUpdateInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalParameters
        case awsIotJobArn
        case awsIotJobId
        case awsJobExecutionsRolloutConfig
        case awsJobPresignedUrlConfig
        case creationDate
        case description
        case errorInfo
        case lastModifiedDate
        case otaUpdateArn
        case otaUpdateFiles
        case otaUpdateId
        case otaUpdateStatus
        case protocols
        case targetSelection
        case targets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalParameters = additionalParameters {
            var additionalParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .additionalParameters)
            for (dictKey0, additionalparametermap0) in additionalParameters {
                try additionalParametersContainer.encode(additionalparametermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let awsIotJobArn = awsIotJobArn {
            try encodeContainer.encode(awsIotJobArn, forKey: .awsIotJobArn)
        }
        if let awsIotJobId = awsIotJobId {
            try encodeContainer.encode(awsIotJobId, forKey: .awsIotJobId)
        }
        if let awsJobExecutionsRolloutConfig = awsJobExecutionsRolloutConfig {
            try encodeContainer.encode(awsJobExecutionsRolloutConfig, forKey: .awsJobExecutionsRolloutConfig)
        }
        if let awsJobPresignedUrlConfig = awsJobPresignedUrlConfig {
            try encodeContainer.encode(awsJobPresignedUrlConfig, forKey: .awsJobPresignedUrlConfig)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let errorInfo = errorInfo {
            try encodeContainer.encode(errorInfo, forKey: .errorInfo)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let otaUpdateArn = otaUpdateArn {
            try encodeContainer.encode(otaUpdateArn, forKey: .otaUpdateArn)
        }
        if let otaUpdateFiles = otaUpdateFiles {
            var otaUpdateFilesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .otaUpdateFiles)
            for otaupdatefiles0 in otaUpdateFiles {
                try otaUpdateFilesContainer.encode(otaupdatefiles0)
            }
        }
        if let otaUpdateId = otaUpdateId {
            try encodeContainer.encode(otaUpdateId, forKey: .otaUpdateId)
        }
        if let otaUpdateStatus = otaUpdateStatus {
            try encodeContainer.encode(otaUpdateStatus.rawValue, forKey: .otaUpdateStatus)
        }
        if let protocols = protocols {
            var protocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protocols)
            for protocols0 in protocols {
                try protocolsContainer.encode(protocols0.rawValue)
            }
        }
        if let targetSelection = targetSelection {
            try encodeContainer.encode(targetSelection.rawValue, forKey: .targetSelection)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for targets0 in targets {
                try targetsContainer.encode(targets0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let otaUpdateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .otaUpdateId)
        otaUpdateId = otaUpdateIdDecoded
        let otaUpdateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .otaUpdateArn)
        otaUpdateArn = otaUpdateArnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let targetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targets)
        var targetsDecoded0:[Swift.String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Swift.String]()
            for string0 in targetsContainer {
                if let string0 = string0 {
                    targetsDecoded0?.append(string0)
                }
            }
        }
        targets = targetsDecoded0
        let protocolsContainer = try containerValues.decodeIfPresent([IotClientTypes.ModelProtocol?].self, forKey: .protocols)
        var protocolsDecoded0:[IotClientTypes.ModelProtocol]? = nil
        if let protocolsContainer = protocolsContainer {
            protocolsDecoded0 = [IotClientTypes.ModelProtocol]()
            for string0 in protocolsContainer {
                if let string0 = string0 {
                    protocolsDecoded0?.append(string0)
                }
            }
        }
        protocols = protocolsDecoded0
        let awsJobExecutionsRolloutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AwsJobExecutionsRolloutConfig.self, forKey: .awsJobExecutionsRolloutConfig)
        awsJobExecutionsRolloutConfig = awsJobExecutionsRolloutConfigDecoded
        let awsJobPresignedUrlConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AwsJobPresignedUrlConfig.self, forKey: .awsJobPresignedUrlConfig)
        awsJobPresignedUrlConfig = awsJobPresignedUrlConfigDecoded
        let targetSelectionDecoded = try containerValues.decodeIfPresent(IotClientTypes.TargetSelection.self, forKey: .targetSelection)
        targetSelection = targetSelectionDecoded
        let otaUpdateFilesContainer = try containerValues.decodeIfPresent([IotClientTypes.OTAUpdateFile?].self, forKey: .otaUpdateFiles)
        var otaUpdateFilesDecoded0:[IotClientTypes.OTAUpdateFile]? = nil
        if let otaUpdateFilesContainer = otaUpdateFilesContainer {
            otaUpdateFilesDecoded0 = [IotClientTypes.OTAUpdateFile]()
            for structure0 in otaUpdateFilesContainer {
                if let structure0 = structure0 {
                    otaUpdateFilesDecoded0?.append(structure0)
                }
            }
        }
        otaUpdateFiles = otaUpdateFilesDecoded0
        let otaUpdateStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.OTAUpdateStatus.self, forKey: .otaUpdateStatus)
        otaUpdateStatus = otaUpdateStatusDecoded
        let awsIotJobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsIotJobId)
        awsIotJobId = awsIotJobIdDecoded
        let awsIotJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsIotJobArn)
        awsIotJobArn = awsIotJobArnDecoded
        let errorInfoDecoded = try containerValues.decodeIfPresent(IotClientTypes.ErrorInfo.self, forKey: .errorInfo)
        errorInfo = errorInfoDecoded
        let additionalParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .additionalParameters)
        var additionalParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let additionalParametersContainer = additionalParametersContainer {
            additionalParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, value0) in additionalParametersContainer {
                if let value0 = value0 {
                    additionalParametersDecoded0?[key0] = value0
                }
            }
        }
        additionalParameters = additionalParametersDecoded0
    }
}

extension IotClientTypes.OTAUpdateInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OTAUpdateInfo(additionalParameters: \(Swift.String(describing: additionalParameters)), awsIotJobArn: \(Swift.String(describing: awsIotJobArn)), awsIotJobId: \(Swift.String(describing: awsIotJobId)), awsJobExecutionsRolloutConfig: \(Swift.String(describing: awsJobExecutionsRolloutConfig)), awsJobPresignedUrlConfig: \(Swift.String(describing: awsJobPresignedUrlConfig)), creationDate: \(Swift.String(describing: creationDate)), description: \(Swift.String(describing: description)), errorInfo: \(Swift.String(describing: errorInfo)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), otaUpdateArn: \(Swift.String(describing: otaUpdateArn)), otaUpdateFiles: \(Swift.String(describing: otaUpdateFiles)), otaUpdateId: \(Swift.String(describing: otaUpdateId)), otaUpdateStatus: \(Swift.String(describing: otaUpdateStatus)), protocols: \(Swift.String(describing: protocols)), targetSelection: \(Swift.String(describing: targetSelection)), targets: \(Swift.String(describing: targets)))"}
}

extension IotClientTypes {
    /// <p>Information about an OTA update.</p>
    public struct OTAUpdateInfo: Swift.Equatable {
        /// <p>A collection of name/value pairs</p>
        public let additionalParameters: [Swift.String:Swift.String]?
        /// <p>The AWS IoT job ARN associated with the OTA update.</p>
        public let awsIotJobArn: Swift.String?
        /// <p>The AWS IoT job ID associated with the OTA update.</p>
        public let awsIotJobId: Swift.String?
        /// <p>Configuration for the rollout of OTA updates.</p>
        public let awsJobExecutionsRolloutConfig: IotClientTypes.AwsJobExecutionsRolloutConfig?
        /// <p>Configuration information for pre-signed URLs. Valid when <code>protocols</code>
        ///              contains HTTP.</p>
        public let awsJobPresignedUrlConfig: IotClientTypes.AwsJobPresignedUrlConfig?
        /// <p>The date when the OTA update was created.</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>A description of the OTA update.</p>
        public let description: Swift.String?
        /// <p>Error information associated with the OTA update.</p>
        public let errorInfo: IotClientTypes.ErrorInfo?
        /// <p>The date when the OTA update was last updated.</p>
        public let lastModifiedDate: ClientRuntime.Date?
        /// <p>The OTA update ARN.</p>
        public let otaUpdateArn: Swift.String?
        /// <p>A list of files associated with the OTA update.</p>
        public let otaUpdateFiles: [IotClientTypes.OTAUpdateFile]?
        /// <p>The OTA update ID.</p>
        public let otaUpdateId: Swift.String?
        /// <p>The status of the OTA update.</p>
        public let otaUpdateStatus: IotClientTypes.OTAUpdateStatus?
        /// <p>The protocol used to transfer the OTA update image. Valid values are [HTTP], [MQTT], [HTTP, MQTT]. When both
        ///              HTTP and MQTT are specified, the target device can choose the protocol.</p>
        public let protocols: [IotClientTypes.ModelProtocol]?
        /// <p>Specifies whether the OTA update will continue to run (CONTINUOUS), or will be complete after all those
        ///             things specified as targets have completed the OTA update (SNAPSHOT). If continuous, the OTA update may also
        ///             be run on a thing when a change is detected in a target. For example, an OTA update will run on a thing when
        ///             the thing is added to a target group, even after the OTA update was completed by all things originally in
        ///             the group. </p>
        public let targetSelection: IotClientTypes.TargetSelection?
        /// <p>The targets of the OTA update.</p>
        public let targets: [Swift.String]?

        public init (
            additionalParameters: [Swift.String:Swift.String]? = nil,
            awsIotJobArn: Swift.String? = nil,
            awsIotJobId: Swift.String? = nil,
            awsJobExecutionsRolloutConfig: IotClientTypes.AwsJobExecutionsRolloutConfig? = nil,
            awsJobPresignedUrlConfig: IotClientTypes.AwsJobPresignedUrlConfig? = nil,
            creationDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            errorInfo: IotClientTypes.ErrorInfo? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            otaUpdateArn: Swift.String? = nil,
            otaUpdateFiles: [IotClientTypes.OTAUpdateFile]? = nil,
            otaUpdateId: Swift.String? = nil,
            otaUpdateStatus: IotClientTypes.OTAUpdateStatus? = nil,
            protocols: [IotClientTypes.ModelProtocol]? = nil,
            targetSelection: IotClientTypes.TargetSelection? = nil,
            targets: [Swift.String]? = nil
        )
        {
            self.additionalParameters = additionalParameters
            self.awsIotJobArn = awsIotJobArn
            self.awsIotJobId = awsIotJobId
            self.awsJobExecutionsRolloutConfig = awsJobExecutionsRolloutConfig
            self.awsJobPresignedUrlConfig = awsJobPresignedUrlConfig
            self.creationDate = creationDate
            self.description = description
            self.errorInfo = errorInfo
            self.lastModifiedDate = lastModifiedDate
            self.otaUpdateArn = otaUpdateArn
            self.otaUpdateFiles = otaUpdateFiles
            self.otaUpdateId = otaUpdateId
            self.otaUpdateStatus = otaUpdateStatus
            self.protocols = protocols
            self.targetSelection = targetSelection
            self.targets = targets
        }
    }

}

extension IotClientTypes {
    public enum OTAUpdateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createComplete
        case createFailed
        case createInProgress
        case createPending
        case sdkUnknown(Swift.String)

        public static var allCases: [OTAUpdateStatus] {
            return [
                .createComplete,
                .createFailed,
                .createInProgress,
                .createPending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .createPending: return "CREATE_PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OTAUpdateStatus(rawValue: rawValue) ?? OTAUpdateStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.OTAUpdateSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case otaUpdateArn
        case otaUpdateId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let otaUpdateArn = otaUpdateArn {
            try encodeContainer.encode(otaUpdateArn, forKey: .otaUpdateArn)
        }
        if let otaUpdateId = otaUpdateId {
            try encodeContainer.encode(otaUpdateId, forKey: .otaUpdateId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let otaUpdateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .otaUpdateId)
        otaUpdateId = otaUpdateIdDecoded
        let otaUpdateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .otaUpdateArn)
        otaUpdateArn = otaUpdateArnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension IotClientTypes.OTAUpdateSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OTAUpdateSummary(creationDate: \(Swift.String(describing: creationDate)), otaUpdateArn: \(Swift.String(describing: otaUpdateArn)), otaUpdateId: \(Swift.String(describing: otaUpdateId)))"}
}

extension IotClientTypes {
    /// <p>An OTA update summary.</p>
    public struct OTAUpdateSummary: Swift.Equatable {
        /// <p>The date when the OTA update was created.</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>The OTA update ARN.</p>
        public let otaUpdateArn: Swift.String?
        /// <p>The OTA update ID.</p>
        public let otaUpdateId: Swift.String?

        public init (
            creationDate: ClientRuntime.Date? = nil,
            otaUpdateArn: Swift.String? = nil,
            otaUpdateId: Swift.String? = nil
        )
        {
            self.creationDate = creationDate
            self.otaUpdateArn = otaUpdateArn
            self.otaUpdateId = otaUpdateId
        }
    }

}

extension IotClientTypes.OutgoingCertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn
        case certificateId
        case creationDate
        case transferDate
        case transferMessage
        case transferredTo
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let certificateId = certificateId {
            try encodeContainer.encode(certificateId, forKey: .certificateId)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let transferDate = transferDate {
            try encodeContainer.encode(transferDate.timeIntervalSince1970, forKey: .transferDate)
        }
        if let transferMessage = transferMessage {
            try encodeContainer.encode(transferMessage, forKey: .transferMessage)
        }
        if let transferredTo = transferredTo {
            try encodeContainer.encode(transferredTo, forKey: .transferredTo)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let transferredToDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transferredTo)
        transferredTo = transferredToDecoded
        let transferDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .transferDate)
        transferDate = transferDateDecoded
        let transferMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transferMessage)
        transferMessage = transferMessageDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension IotClientTypes.OutgoingCertificate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OutgoingCertificate(certificateArn: \(Swift.String(describing: certificateArn)), certificateId: \(Swift.String(describing: certificateId)), creationDate: \(Swift.String(describing: creationDate)), transferDate: \(Swift.String(describing: transferDate)), transferMessage: \(Swift.String(describing: transferMessage)), transferredTo: \(Swift.String(describing: transferredTo)))"}
}

extension IotClientTypes {
    /// <p>A certificate that has been transferred but not yet accepted.</p>
    public struct OutgoingCertificate: Swift.Equatable {
        /// <p>The certificate ARN.</p>
        public let certificateArn: Swift.String?
        /// <p>The certificate ID.</p>
        public let certificateId: Swift.String?
        /// <p>The certificate creation date.</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>The date the transfer was initiated.</p>
        public let transferDate: ClientRuntime.Date?
        /// <p>The transfer message.</p>
        public let transferMessage: Swift.String?
        /// <p>The AWS account to which the transfer was made.</p>
        public let transferredTo: Swift.String?

        public init (
            certificateArn: Swift.String? = nil,
            certificateId: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            transferDate: ClientRuntime.Date? = nil,
            transferMessage: Swift.String? = nil,
            transferredTo: Swift.String? = nil
        )
        {
            self.certificateArn = certificateArn
            self.certificateId = certificateId
            self.creationDate = creationDate
            self.transferDate = transferDate
            self.transferMessage = transferMessage
            self.transferredTo = transferredTo
        }
    }

}

extension IotClientTypes.PercentPair: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case percent
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if percent != 0.0 {
            try encodeContainer.encode(percent, forKey: .percent)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let percentDecoded = try containerValues.decode(Swift.Double.self, forKey: .percent)
        percent = percentDecoded
        let valueDecoded = try containerValues.decode(Swift.Double.self, forKey: .value)
        value = valueDecoded
    }
}

extension IotClientTypes.PercentPair: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PercentPair(percent: \(Swift.String(describing: percent)), value: \(Swift.String(describing: value)))"}
}

extension IotClientTypes {
    /// <p>Describes the percentile and percentile value.</p>
    public struct PercentPair: Swift.Equatable {
        /// <p>The percentile.</p>
        public let percent: Swift.Double
        /// <p>The value of the percentile.</p>
        public let value: Swift.Double

        public init (
            percent: Swift.Double = 0.0,
            value: Swift.Double = 0.0
        )
        {
            self.percent = percent
            self.value = value
        }
    }

}

extension IotClientTypes.Policy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyArn
        case policyName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyArn = policyArn {
            try encodeContainer.encode(policyArn, forKey: .policyArn)
        }
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
    }
}

extension IotClientTypes.Policy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Policy(policyArn: \(Swift.String(describing: policyArn)), policyName: \(Swift.String(describing: policyName)))"}
}

extension IotClientTypes {
    /// <p>Describes an AWS IoT policy.</p>
    public struct Policy: Swift.Equatable {
        /// <p>The policy ARN.</p>
        public let policyArn: Swift.String?
        /// <p>The policy name.</p>
        public let policyName: Swift.String?

        public init (
            policyArn: Swift.String? = nil,
            policyName: Swift.String? = nil
        )
        {
            self.policyArn = policyArn
            self.policyName = policyName
        }
    }

}

extension IotClientTypes {
    public enum PolicyTemplateName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case blankPolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyTemplateName] {
            return [
                .blankPolicy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .blankPolicy: return "BLANK_POLICY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PolicyTemplateName(rawValue: rawValue) ?? PolicyTemplateName.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.PolicyVersion: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createDate
        case isDefaultVersion
        case versionId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createDate = createDate {
            try encodeContainer.encode(createDate.timeIntervalSince1970, forKey: .createDate)
        }
        if isDefaultVersion != false {
            try encodeContainer.encode(isDefaultVersion, forKey: .isDefaultVersion)
        }
        if let versionId = versionId {
            try encodeContainer.encode(versionId, forKey: .versionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let isDefaultVersionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createDate)
        createDate = createDateDecoded
    }
}

extension IotClientTypes.PolicyVersion: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PolicyVersion(createDate: \(Swift.String(describing: createDate)), isDefaultVersion: \(Swift.String(describing: isDefaultVersion)), versionId: \(Swift.String(describing: versionId)))"}
}

extension IotClientTypes {
    /// <p>Describes a policy version.</p>
    public struct PolicyVersion: Swift.Equatable {
        /// <p>The date and time the policy was created.</p>
        public let createDate: ClientRuntime.Date?
        /// <p>Specifies whether the policy version is the default.</p>
        public let isDefaultVersion: Swift.Bool
        /// <p>The policy version ID.</p>
        public let versionId: Swift.String?

        public init (
            createDate: ClientRuntime.Date? = nil,
            isDefaultVersion: Swift.Bool = false,
            versionId: Swift.String? = nil
        )
        {
            self.createDate = createDate
            self.isDefaultVersion = isDefaultVersion
            self.versionId = versionId
        }
    }

}

extension IotClientTypes.PolicyVersionIdentifier: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName
        case policyVersionId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyVersionId = policyVersionId {
            try encodeContainer.encode(policyVersionId, forKey: .policyVersionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyVersionId)
        policyVersionId = policyVersionIdDecoded
    }
}

extension IotClientTypes.PolicyVersionIdentifier: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PolicyVersionIdentifier(policyName: \(Swift.String(describing: policyName)), policyVersionId: \(Swift.String(describing: policyVersionId)))"}
}

extension IotClientTypes {
    /// <p>Information about the version of the policy associated with the resource.</p>
    public struct PolicyVersionIdentifier: Swift.Equatable {
        /// <p>The name of the policy.</p>
        public let policyName: Swift.String?
        /// <p>The ID of the version of the policy associated with the resource.</p>
        public let policyVersionId: Swift.String?

        public init (
            policyName: Swift.String? = nil,
            policyVersionId: Swift.String? = nil
        )
        {
            self.policyName = policyName
            self.policyVersionId = policyVersionId
        }
    }

}

extension IotClientTypes.PresignedUrlConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expiresInSec
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expiresInSec = expiresInSec {
            try encodeContainer.encode(expiresInSec, forKey: .expiresInSec)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let expiresInSecDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expiresInSec)
        expiresInSec = expiresInSecDecoded
    }
}

extension IotClientTypes.PresignedUrlConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PresignedUrlConfig(expiresInSec: \(Swift.String(describing: expiresInSec)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension IotClientTypes {
    /// <p>Configuration for pre-signed S3 URLs.</p>
    public struct PresignedUrlConfig: Swift.Equatable {
        /// <p>How long (in seconds) pre-signed URLs are valid. Valid values are 60 - 3600, the default value is 3600
        ///             seconds. Pre-signed URLs are generated when Jobs receives an MQTT request for the job document.</p>
        public let expiresInSec: Swift.Int?
        /// <p>The ARN of an IAM role that grants grants permission to download files from the S3 bucket where the job
        ///             data/updates are stored. The role must also grant permission for IoT to download the files.</p>
        public let roleArn: Swift.String?

        public init (
            expiresInSec: Swift.Int? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.expiresInSec = expiresInSec
            self.roleArn = roleArn
        }
    }

}

extension IotClientTypes {
    public enum ModelProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case http
        case mqtt
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelProtocol] {
            return [
                .http,
                .mqtt,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .http: return "HTTP"
            case .mqtt: return "MQTT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelProtocol(rawValue: rawValue) ?? ModelProtocol.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.ProvisioningHook: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case payloadVersion
        case targetArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let payloadVersion = payloadVersion {
            try encodeContainer.encode(payloadVersion, forKey: .payloadVersion)
        }
        if let targetArn = targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let payloadVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .payloadVersion)
        payloadVersion = payloadVersionDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
    }
}

extension IotClientTypes.ProvisioningHook: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProvisioningHook(payloadVersion: \(Swift.String(describing: payloadVersion)), targetArn: \(Swift.String(describing: targetArn)))"}
}

extension IotClientTypes {
    /// <p>Structure that contains <code>payloadVersion</code> and
    ///          <code>targetArn</code>.</p>
    public struct ProvisioningHook: Swift.Equatable {
        /// <p>The payload that was sent to the target function.</p>
        ///          <p>
        ///             <i>Note:</i> Only Lambda functions are currently supported.</p>
        public let payloadVersion: Swift.String?
        /// <p>The ARN of the target function.</p>
        ///          <p>
        ///             <i>Note:</i> Only Lambda functions are currently supported.</p>
        public let targetArn: Swift.String?

        public init (
            payloadVersion: Swift.String? = nil,
            targetArn: Swift.String? = nil
        )
        {
            self.payloadVersion = payloadVersion
            self.targetArn = targetArn
        }
    }

}

extension IotClientTypes.ProvisioningTemplateSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case description
        case enabled
        case lastModifiedDate
        case templateArn
        case templateName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let templateArn = templateArn {
            try encodeContainer.encode(templateArn, forKey: .templateArn)
        }
        if let templateName = templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension IotClientTypes.ProvisioningTemplateSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProvisioningTemplateSummary(creationDate: \(Swift.String(describing: creationDate)), description: \(Swift.String(describing: description)), enabled: \(Swift.String(describing: enabled)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), templateArn: \(Swift.String(describing: templateArn)), templateName: \(Swift.String(describing: templateName)))"}
}

extension IotClientTypes {
    /// <p>A summary of information about a fleet provisioning template.</p>
    public struct ProvisioningTemplateSummary: Swift.Equatable {
        /// <p>The date when the fleet provisioning template summary was created.</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>The description of the fleet provisioning template.</p>
        public let description: Swift.String?
        /// <p>True if the fleet provision template is enabled, otherwise false.</p>
        public let enabled: Swift.Bool
        /// <p>The date when the fleet provisioning template summary was last modified.</p>
        public let lastModifiedDate: ClientRuntime.Date?
        /// <p>The ARN of the fleet provisioning template.</p>
        public let templateArn: Swift.String?
        /// <p>The name of the fleet provisioning template.</p>
        public let templateName: Swift.String?

        public init (
            creationDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            enabled: Swift.Bool = false,
            lastModifiedDate: ClientRuntime.Date? = nil,
            templateArn: Swift.String? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.creationDate = creationDate
            self.description = description
            self.enabled = enabled
            self.lastModifiedDate = lastModifiedDate
            self.templateArn = templateArn
            self.templateName = templateName
        }
    }

}

extension IotClientTypes.ProvisioningTemplateVersionSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case isDefaultVersion
        case versionId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if isDefaultVersion != false {
            try encodeContainer.encode(isDefaultVersion, forKey: .isDefaultVersion)
        }
        if let versionId = versionId {
            try encodeContainer.encode(versionId, forKey: .versionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .versionId)
        versionId = versionIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let isDefaultVersionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
    }
}

extension IotClientTypes.ProvisioningTemplateVersionSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProvisioningTemplateVersionSummary(creationDate: \(Swift.String(describing: creationDate)), isDefaultVersion: \(Swift.String(describing: isDefaultVersion)), versionId: \(Swift.String(describing: versionId)))"}
}

extension IotClientTypes {
    /// <p>A summary of information about a fleet provision template version.</p>
    public struct ProvisioningTemplateVersionSummary: Swift.Equatable {
        /// <p>The date when the fleet provisioning template version was created</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>True if the fleet provisioning template version is the default version, otherwise
        ///          false.</p>
        public let isDefaultVersion: Swift.Bool
        /// <p>The ID of the fleet privisioning template version.</p>
        public let versionId: Swift.Int?

        public init (
            creationDate: ClientRuntime.Date? = nil,
            isDefaultVersion: Swift.Bool = false,
            versionId: Swift.Int? = nil
        )
        {
            self.creationDate = creationDate
            self.isDefaultVersion = isDefaultVersion
            self.versionId = versionId
        }
    }

}

extension IotClientTypes.PublishFindingToSnsParams: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let topicArn = topicArn {
            try encodeContainer.encode(topicArn, forKey: .topicArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
    }
}

extension IotClientTypes.PublishFindingToSnsParams: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PublishFindingToSnsParams(topicArn: \(Swift.String(describing: topicArn)))"}
}

extension IotClientTypes {
    /// <p>Parameters to define a mitigation action that publishes findings to Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.</p>
    public struct PublishFindingToSnsParams: Swift.Equatable {
        /// <p>The ARN of the topic to which you want to publish the findings.</p>
        public let topicArn: Swift.String?

        public init (
            topicArn: Swift.String? = nil
        )
        {
            self.topicArn = topicArn
        }
    }

}

extension IotClientTypes.PutAssetPropertyValueEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assetId
        case entryId
        case propertyAlias
        case propertyId
        case propertyValues
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assetId = assetId {
            try encodeContainer.encode(assetId, forKey: .assetId)
        }
        if let entryId = entryId {
            try encodeContainer.encode(entryId, forKey: .entryId)
        }
        if let propertyAlias = propertyAlias {
            try encodeContainer.encode(propertyAlias, forKey: .propertyAlias)
        }
        if let propertyId = propertyId {
            try encodeContainer.encode(propertyId, forKey: .propertyId)
        }
        if let propertyValues = propertyValues {
            var propertyValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .propertyValues)
            for assetpropertyvaluelist0 in propertyValues {
                try propertyValuesContainer.encode(assetpropertyvaluelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entryId)
        entryId = entryIdDecoded
        let assetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assetId)
        assetId = assetIdDecoded
        let propertyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .propertyId)
        propertyId = propertyIdDecoded
        let propertyAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .propertyAlias)
        propertyAlias = propertyAliasDecoded
        let propertyValuesContainer = try containerValues.decodeIfPresent([IotClientTypes.AssetPropertyValue?].self, forKey: .propertyValues)
        var propertyValuesDecoded0:[IotClientTypes.AssetPropertyValue]? = nil
        if let propertyValuesContainer = propertyValuesContainer {
            propertyValuesDecoded0 = [IotClientTypes.AssetPropertyValue]()
            for structure0 in propertyValuesContainer {
                if let structure0 = structure0 {
                    propertyValuesDecoded0?.append(structure0)
                }
            }
        }
        propertyValues = propertyValuesDecoded0
    }
}

extension IotClientTypes.PutAssetPropertyValueEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAssetPropertyValueEntry(assetId: \(Swift.String(describing: assetId)), entryId: \(Swift.String(describing: entryId)), propertyAlias: \(Swift.String(describing: propertyAlias)), propertyId: \(Swift.String(describing: propertyId)), propertyValues: \(Swift.String(describing: propertyValues)))"}
}

extension IotClientTypes {
    /// <p>An asset property value entry containing the following information.</p>
    public struct PutAssetPropertyValueEntry: Swift.Equatable {
        /// <p>The ID of the AWS IoT SiteWise asset. You must specify either a <code>propertyAlias</code>
        ///       or both an <code>aliasId</code> and a <code>propertyId</code>. Accepts substitution
        ///       templates.</p>
        public let assetId: Swift.String?
        /// <p>Optional. A unique identifier for this entry that you can define to better track which
        ///       message caused an error in case of failure. Accepts substitution templates. Defaults to a new
        ///       UUID.</p>
        public let entryId: Swift.String?
        /// <p>The name of the property alias associated with your asset property. You must specify
        ///       either a <code>propertyAlias</code> or both an <code>aliasId</code> and a
        ///         <code>propertyId</code>. Accepts substitution templates.</p>
        public let propertyAlias: Swift.String?
        /// <p>The ID of the asset's property. You must specify either a <code>propertyAlias</code> or
        ///       both an <code>aliasId</code> and a <code>propertyId</code>. Accepts substitution
        ///       templates.</p>
        public let propertyId: Swift.String?
        /// <p>A list of property values to insert that each contain timestamp, quality, and value (TQV)
        ///       information.</p>
        public let propertyValues: [IotClientTypes.AssetPropertyValue]?

        public init (
            assetId: Swift.String? = nil,
            entryId: Swift.String? = nil,
            propertyAlias: Swift.String? = nil,
            propertyId: Swift.String? = nil,
            propertyValues: [IotClientTypes.AssetPropertyValue]? = nil
        )
        {
            self.assetId = assetId
            self.entryId = entryId
            self.propertyAlias = propertyAlias
            self.propertyId = propertyId
            self.propertyValues = propertyValues
        }
    }

}

extension IotClientTypes.PutItemInput: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tableName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
    }
}

extension IotClientTypes.PutItemInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutItemInput(tableName: \(Swift.String(describing: tableName)))"}
}

extension IotClientTypes {
    /// <p>The input for the DynamoActionVS action that specifies the DynamoDB table to which
    ///          the message data will be written.</p>
    public struct PutItemInput: Swift.Equatable {
        /// <p>The table where the message data will be written.</p>
        public let tableName: Swift.String?

        public init (
            tableName: Swift.String? = nil
        )
        {
            self.tableName = tableName
        }
    }

}

extension IotClientTypes.RateIncreaseCriteria: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numberOfNotifiedThings
        case numberOfSucceededThings
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let numberOfNotifiedThings = numberOfNotifiedThings {
            try encodeContainer.encode(numberOfNotifiedThings, forKey: .numberOfNotifiedThings)
        }
        if let numberOfSucceededThings = numberOfSucceededThings {
            try encodeContainer.encode(numberOfSucceededThings, forKey: .numberOfSucceededThings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numberOfNotifiedThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNotifiedThings)
        numberOfNotifiedThings = numberOfNotifiedThingsDecoded
        let numberOfSucceededThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfSucceededThings)
        numberOfSucceededThings = numberOfSucceededThingsDecoded
    }
}

extension IotClientTypes.RateIncreaseCriteria: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RateIncreaseCriteria(numberOfNotifiedThings: \(Swift.String(describing: numberOfNotifiedThings)), numberOfSucceededThings: \(Swift.String(describing: numberOfSucceededThings)))"}
}

extension IotClientTypes {
    /// <p>Allows you to define a criteria to initiate the increase in rate of rollout for a job.</p>
    public struct RateIncreaseCriteria: Swift.Equatable {
        /// <p>The threshold for number of notified things that will initiate the increase in rate of rollout.</p>
        public let numberOfNotifiedThings: Swift.Int?
        /// <p>The threshold for number of succeeded things that will initiate the increase in rate of rollout.</p>
        public let numberOfSucceededThings: Swift.Int?

        public init (
            numberOfNotifiedThings: Swift.Int? = nil,
            numberOfSucceededThings: Swift.Int? = nil
        )
        {
            self.numberOfNotifiedThings = numberOfNotifiedThings
            self.numberOfSucceededThings = numberOfSucceededThings
        }
    }

}

public struct RegisterCACertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterCACertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterCACertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterCACertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterCACertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterCACertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterCACertificateOutputError>
}

extension RegisterCACertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterCACertificateInput(allowAutoRegistration: \(Swift.String(describing: allowAutoRegistration)), caCertificate: \(Swift.String(describing: caCertificate)), registrationConfig: \(Swift.String(describing: registrationConfig)), setAsActive: \(Swift.String(describing: setAsActive)), tags: \(Swift.String(describing: tags)), verificationCertificate: \(Swift.String(describing: verificationCertificate)))"}
}

extension RegisterCACertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caCertificate
        case registrationConfig
        case tags
        case verificationCertificate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let caCertificate = caCertificate {
            try encodeContainer.encode(caCertificate, forKey: .caCertificate)
        }
        if let registrationConfig = registrationConfig {
            try encodeContainer.encode(registrationConfig, forKey: .registrationConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let verificationCertificate = verificationCertificate {
            try encodeContainer.encode(verificationCertificate, forKey: .verificationCertificate)
        }
    }
}

public struct RegisterCACertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterCACertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterCACertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterCACertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterCACertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterCACertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterCACertificateOutputError>
}

public struct RegisterCACertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterCACertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterCACertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterCACertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if input.operationInput.allowAutoRegistration != false {
            let allowAutoRegistrationQueryItem = ClientRuntime.URLQueryItem(name: "allowAutoRegistration".urlPercentEncoding(), value: Swift.String(input.operationInput.allowAutoRegistration).urlPercentEncoding())
            input.builder.withQueryItem(allowAutoRegistrationQueryItem)
        }
        if input.operationInput.setAsActive != false {
            let setAsActiveQueryItem = ClientRuntime.URLQueryItem(name: "setAsActive".urlPercentEncoding(), value: Swift.String(input.operationInput.setAsActive).urlPercentEncoding())
            input.builder.withQueryItem(setAsActiveQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterCACertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterCACertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterCACertificateOutputError>
}

/// <p>The input to the RegisterCACertificate operation.</p>
public struct RegisterCACertificateInput: Swift.Equatable {
    /// <p>Allows this CA certificate to be used for auto registration of device
    ///          certificates.</p>
    public let allowAutoRegistration: Swift.Bool
    /// <p>The CA certificate.</p>
    public let caCertificate: Swift.String?
    /// <p>Information about the registration configuration.</p>
    public let registrationConfig: IotClientTypes.RegistrationConfig?
    /// <p>A boolean value that specifies if the CA certificate is set to active.</p>
    public let setAsActive: Swift.Bool
    /// <p>Metadata which can be used to manage the CA certificate.</p>
    ///          <note>
    ///             <p>For URI Request parameters use format: ...key1=value1&key2=value2...</p>
    ///             <p>For the CLI command-line parameter use format: &&tags
    ///             "key1=value1&key2=value2..."</p>
    ///             <p>For the cli-input-json file use format: "tags":
    ///             "key1=value1&key2=value2..."</p>
    ///          </note>
    public let tags: [IotClientTypes.Tag]?
    /// <p>The private key verification certificate.</p>
    public let verificationCertificate: Swift.String?

    public init (
        allowAutoRegistration: Swift.Bool = false,
        caCertificate: Swift.String? = nil,
        registrationConfig: IotClientTypes.RegistrationConfig? = nil,
        setAsActive: Swift.Bool = false,
        tags: [IotClientTypes.Tag]? = nil,
        verificationCertificate: Swift.String? = nil
    )
    {
        self.allowAutoRegistration = allowAutoRegistration
        self.caCertificate = caCertificate
        self.registrationConfig = registrationConfig
        self.setAsActive = setAsActive
        self.tags = tags
        self.verificationCertificate = verificationCertificate
    }
}

struct RegisterCACertificateInputBody: Swift.Equatable {
    public let caCertificate: Swift.String?
    public let verificationCertificate: Swift.String?
    public let registrationConfig: IotClientTypes.RegistrationConfig?
    public let tags: [IotClientTypes.Tag]?
}

extension RegisterCACertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caCertificate
        case registrationConfig
        case tags
        case verificationCertificate
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let caCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caCertificate)
        caCertificate = caCertificateDecoded
        let verificationCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verificationCertificate)
        verificationCertificate = verificationCertificateDecoded
        let registrationConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.RegistrationConfig.self, forKey: .registrationConfig)
        registrationConfig = registrationConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension RegisterCACertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterCACertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateValidationException" : self = .certificateValidationException(try CertificateValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RegistrationCodeValidationException" : self = .registrationCodeValidationException(try RegistrationCodeValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterCACertificateOutputError: Swift.Error, Swift.Equatable {
    case certificateValidationException(CertificateValidationException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case registrationCodeValidationException(RegistrationCodeValidationException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterCACertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterCACertificateOutputResponse(certificateArn: \(Swift.String(describing: certificateArn)), certificateId: \(Swift.String(describing: certificateId)))"}
}

extension RegisterCACertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RegisterCACertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificateArn = output.certificateArn
            self.certificateId = output.certificateId
        } else {
            self.certificateArn = nil
            self.certificateId = nil
        }
    }
}

/// <p>The output from the RegisterCACertificateResponse operation.</p>
public struct RegisterCACertificateOutputResponse: Swift.Equatable {
    /// <p>The CA certificate ARN.</p>
    public let certificateArn: Swift.String?
    /// <p>The CA certificate identifier.</p>
    public let certificateId: Swift.String?

    public init (
        certificateArn: Swift.String? = nil,
        certificateId: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
        self.certificateId = certificateId
    }
}

struct RegisterCACertificateOutputResponseBody: Swift.Equatable {
    public let certificateArn: Swift.String?
    public let certificateId: Swift.String?
}

extension RegisterCACertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn
        case certificateId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
    }
}

public struct RegisterCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterCertificateOutputError>
}

extension RegisterCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterCertificateInput(caCertificatePem: \(Swift.String(describing: caCertificatePem)), certificatePem: \(Swift.String(describing: certificatePem)), setAsActive: \(Swift.String(describing: setAsActive)), status: \(Swift.String(describing: status)))"}
}

extension RegisterCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caCertificatePem
        case certificatePem
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let caCertificatePem = caCertificatePem {
            try encodeContainer.encode(caCertificatePem, forKey: .caCertificatePem)
        }
        if let certificatePem = certificatePem {
            try encodeContainer.encode(certificatePem, forKey: .certificatePem)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

public struct RegisterCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterCertificateOutputError>
}

public struct RegisterCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let setAsActive = input.operationInput.setAsActive {
            let setAsActiveQueryItem = ClientRuntime.URLQueryItem(name: "setAsActive".urlPercentEncoding(), value: Swift.String(setAsActive).urlPercentEncoding())
            input.builder.withQueryItem(setAsActiveQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterCertificateOutputError>
}

/// <p>The input to the RegisterCertificate operation.</p>
public struct RegisterCertificateInput: Swift.Equatable {
    /// <p>The CA certificate used to sign the device certificate being registered.</p>
    public let caCertificatePem: Swift.String?
    /// <p>The certificate data, in PEM format.</p>
    public let certificatePem: Swift.String?
    /// <p>A boolean value that specifies if the certificate is set to active.</p>
    @available(*, deprecated)
    public let setAsActive: Swift.Bool?
    /// <p>The status of the register certificate request.</p>
    public let status: IotClientTypes.CertificateStatus?

    public init (
        caCertificatePem: Swift.String? = nil,
        certificatePem: Swift.String? = nil,
        setAsActive: Swift.Bool? = nil,
        status: IotClientTypes.CertificateStatus? = nil
    )
    {
        self.caCertificatePem = caCertificatePem
        self.certificatePem = certificatePem
        self.setAsActive = setAsActive
        self.status = status
    }
}

struct RegisterCertificateInputBody: Swift.Equatable {
    public let certificatePem: Swift.String?
    public let caCertificatePem: Swift.String?
    public let status: IotClientTypes.CertificateStatus?
}

extension RegisterCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caCertificatePem
        case certificatePem
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificatePemDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificatePem)
        certificatePem = certificatePemDecoded
        let caCertificatePemDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caCertificatePem)
        caCertificatePem = caCertificatePemDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.CertificateStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension RegisterCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateConflictException" : self = .certificateConflictException(try CertificateConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CertificateStateException" : self = .certificateStateException(try CertificateStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CertificateValidationException" : self = .certificateValidationException(try CertificateValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterCertificateOutputError: Swift.Error, Swift.Equatable {
    case certificateConflictException(CertificateConflictException)
    case certificateStateException(CertificateStateException)
    case certificateValidationException(CertificateValidationException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterCertificateOutputResponse(certificateArn: \(Swift.String(describing: certificateArn)), certificateId: \(Swift.String(describing: certificateId)))"}
}

extension RegisterCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RegisterCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificateArn = output.certificateArn
            self.certificateId = output.certificateId
        } else {
            self.certificateArn = nil
            self.certificateId = nil
        }
    }
}

/// <p>The output from the RegisterCertificate operation.</p>
public struct RegisterCertificateOutputResponse: Swift.Equatable {
    /// <p>The certificate ARN.</p>
    public let certificateArn: Swift.String?
    /// <p>The certificate identifier.</p>
    public let certificateId: Swift.String?

    public init (
        certificateArn: Swift.String? = nil,
        certificateId: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
        self.certificateId = certificateId
    }
}

struct RegisterCertificateOutputResponseBody: Swift.Equatable {
    public let certificateArn: Swift.String?
    public let certificateId: Swift.String?
}

extension RegisterCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn
        case certificateId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
    }
}

public struct RegisterCertificateWithoutCAInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterCertificateWithoutCAInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterCertificateWithoutCAInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterCertificateWithoutCAOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterCertificateWithoutCAInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterCertificateWithoutCAOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterCertificateWithoutCAOutputError>
}

extension RegisterCertificateWithoutCAInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterCertificateWithoutCAInput(certificatePem: \(Swift.String(describing: certificatePem)), status: \(Swift.String(describing: status)))"}
}

extension RegisterCertificateWithoutCAInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificatePem
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificatePem = certificatePem {
            try encodeContainer.encode(certificatePem, forKey: .certificatePem)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

public struct RegisterCertificateWithoutCAInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterCertificateWithoutCAInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterCertificateWithoutCAInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterCertificateWithoutCAOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterCertificateWithoutCAInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterCertificateWithoutCAOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterCertificateWithoutCAOutputError>
}

public struct RegisterCertificateWithoutCAInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterCertificateWithoutCAInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterCertificateWithoutCAInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterCertificateWithoutCAOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterCertificateWithoutCAInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterCertificateWithoutCAOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterCertificateWithoutCAOutputError>
}

public struct RegisterCertificateWithoutCAInput: Swift.Equatable {
    /// <p>The certificate data, in PEM format.</p>
    public let certificatePem: Swift.String?
    /// <p>The status of the register certificate request.</p>
    public let status: IotClientTypes.CertificateStatus?

    public init (
        certificatePem: Swift.String? = nil,
        status: IotClientTypes.CertificateStatus? = nil
    )
    {
        self.certificatePem = certificatePem
        self.status = status
    }
}

struct RegisterCertificateWithoutCAInputBody: Swift.Equatable {
    public let certificatePem: Swift.String?
    public let status: IotClientTypes.CertificateStatus?
}

extension RegisterCertificateWithoutCAInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificatePem
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificatePemDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificatePem)
        certificatePem = certificatePemDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.CertificateStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension RegisterCertificateWithoutCAOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterCertificateWithoutCAOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateStateException" : self = .certificateStateException(try CertificateStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CertificateValidationException" : self = .certificateValidationException(try CertificateValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterCertificateWithoutCAOutputError: Swift.Error, Swift.Equatable {
    case certificateStateException(CertificateStateException)
    case certificateValidationException(CertificateValidationException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterCertificateWithoutCAOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterCertificateWithoutCAOutputResponse(certificateArn: \(Swift.String(describing: certificateArn)), certificateId: \(Swift.String(describing: certificateId)))"}
}

extension RegisterCertificateWithoutCAOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RegisterCertificateWithoutCAOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificateArn = output.certificateArn
            self.certificateId = output.certificateId
        } else {
            self.certificateArn = nil
            self.certificateId = nil
        }
    }
}

public struct RegisterCertificateWithoutCAOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the registered certificate.</p>
    public let certificateArn: Swift.String?
    /// <p>The ID of the registered certificate. (The last part of the certificate ARN contains the
    ///          certificate ID.</p>
    public let certificateId: Swift.String?

    public init (
        certificateArn: Swift.String? = nil,
        certificateId: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
        self.certificateId = certificateId
    }
}

struct RegisterCertificateWithoutCAOutputResponseBody: Swift.Equatable {
    public let certificateArn: Swift.String?
    public let certificateId: Swift.String?
}

extension RegisterCertificateWithoutCAOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn
        case certificateId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
    }
}

public struct RegisterThingInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterThingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterThingOutputError>
}

extension RegisterThingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterThingInput(parameters: \(Swift.String(describing: parameters)), templateBody: \(Swift.String(describing: templateBody)))"}
}

extension RegisterThingInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameters
        case templateBody
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parameters0) in parameters {
                try parametersContainer.encode(parameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let templateBody = templateBody {
            try encodeContainer.encode(templateBody, forKey: .templateBody)
        }
    }
}

public struct RegisterThingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterThingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterThingOutputError>
}

public struct RegisterThingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterThingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterThingOutputError>
}

public struct RegisterThingInput: Swift.Equatable {
    /// <p>The parameters for provisioning a thing. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html">Provisioning Templates</a> for more information.</p>
    public let parameters: [Swift.String:Swift.String]?
    /// <p>The provisioning template. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-w-cert.html">Provisioning Devices That Have Device Certificates</a> for more information.</p>
    public let templateBody: Swift.String?

    public init (
        parameters: [Swift.String:Swift.String]? = nil,
        templateBody: Swift.String? = nil
    )
    {
        self.parameters = parameters
        self.templateBody = templateBody
    }
}

struct RegisterThingInputBody: Swift.Equatable {
    public let templateBody: Swift.String?
    public let parameters: [Swift.String:Swift.String]?
}

extension RegisterThingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameters
        case templateBody
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, value0) in parametersContainer {
                if let value0 = value0 {
                    parametersDecoded0?[key0] = value0
                }
            }
        }
        parameters = parametersDecoded0
    }
}

extension RegisterThingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterThingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingResourceUpdateException" : self = .conflictingResourceUpdateException(try ConflictingResourceUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceRegistrationFailureException" : self = .resourceRegistrationFailureException(try ResourceRegistrationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterThingOutputError: Swift.Error, Swift.Equatable {
    case conflictingResourceUpdateException(ConflictingResourceUpdateException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceRegistrationFailureException(ResourceRegistrationFailureException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterThingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterThingOutputResponse(certificatePem: \(Swift.String(describing: certificatePem)), resourceArns: \(Swift.String(describing: resourceArns)))"}
}

extension RegisterThingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RegisterThingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificatePem = output.certificatePem
            self.resourceArns = output.resourceArns
        } else {
            self.certificatePem = nil
            self.resourceArns = nil
        }
    }
}

public struct RegisterThingOutputResponse: Swift.Equatable {
    /// <p>The certificate data, in PEM format.</p>
    public let certificatePem: Swift.String?
    /// <p>ARNs for the generated resources.</p>
    public let resourceArns: [Swift.String:Swift.String]?

    public init (
        certificatePem: Swift.String? = nil,
        resourceArns: [Swift.String:Swift.String]? = nil
    )
    {
        self.certificatePem = certificatePem
        self.resourceArns = resourceArns
    }
}

struct RegisterThingOutputResponseBody: Swift.Equatable {
    public let certificatePem: Swift.String?
    public let resourceArns: [Swift.String:Swift.String]?
}

extension RegisterThingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificatePem
        case resourceArns
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificatePemDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificatePem)
        certificatePem = certificatePemDecoded
        let resourceArnsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .resourceArns)
        var resourceArnsDecoded0: [Swift.String:Swift.String]? = nil
        if let resourceArnsContainer = resourceArnsContainer {
            resourceArnsDecoded0 = [Swift.String:Swift.String]()
            for (key0, resourcearn0) in resourceArnsContainer {
                if let resourcearn0 = resourcearn0 {
                    resourceArnsDecoded0?[key0] = resourcearn0
                }
            }
        }
        resourceArns = resourceArnsDecoded0
    }
}

extension RegistrationCodeValidationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegistrationCodeValidationException(message: \(Swift.String(describing: message)))"}
}

extension RegistrationCodeValidationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RegistrationCodeValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The registration code is invalid.</p>
public struct RegistrationCodeValidationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>Additional information about the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct RegistrationCodeValidationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension RegistrationCodeValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes.RegistrationConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleArn
        case templateBody
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let templateBody = templateBody {
            try encodeContainer.encode(templateBody, forKey: .templateBody)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IotClientTypes.RegistrationConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegistrationConfig(roleArn: \(Swift.String(describing: roleArn)), templateBody: \(Swift.String(describing: templateBody)))"}
}

extension IotClientTypes {
    /// <p>The registration configuration.</p>
    public struct RegistrationConfig: Swift.Equatable {
        /// <p>The ARN of the role.</p>
        public let roleArn: Swift.String?
        /// <p>The template body.</p>
        public let templateBody: Swift.String?

        public init (
            roleArn: Swift.String? = nil,
            templateBody: Swift.String? = nil
        )
        {
            self.roleArn = roleArn
            self.templateBody = templateBody
        }
    }

}

public struct RejectCertificateTransferInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RejectCertificateTransferInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RejectCertificateTransferInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RejectCertificateTransferOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RejectCertificateTransferInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RejectCertificateTransferOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RejectCertificateTransferOutputError>
}

extension RejectCertificateTransferInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RejectCertificateTransferInput(certificateId: \(Swift.String(describing: certificateId)), rejectReason: \(Swift.String(describing: rejectReason)))"}
}

extension RejectCertificateTransferInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rejectReason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rejectReason = rejectReason {
            try encodeContainer.encode(rejectReason, forKey: .rejectReason)
        }
    }
}

public struct RejectCertificateTransferInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RejectCertificateTransferInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RejectCertificateTransferInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RejectCertificateTransferOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RejectCertificateTransferInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RejectCertificateTransferOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RejectCertificateTransferOutputError>
}

public struct RejectCertificateTransferInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RejectCertificateTransferInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RejectCertificateTransferInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RejectCertificateTransferOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RejectCertificateTransferInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RejectCertificateTransferOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RejectCertificateTransferOutputError>
}

/// <p>The input for the RejectCertificateTransfer operation.</p>
public struct RejectCertificateTransferInput: Swift.Equatable {
    /// <p>The ID of the certificate. (The last part of the certificate ARN contains the
    ///          certificate ID.)</p>
    public let certificateId: Swift.String?
    /// <p>The reason the certificate transfer was rejected.</p>
    public let rejectReason: Swift.String?

    public init (
        certificateId: Swift.String? = nil,
        rejectReason: Swift.String? = nil
    )
    {
        self.certificateId = certificateId
        self.rejectReason = rejectReason
    }
}

struct RejectCertificateTransferInputBody: Swift.Equatable {
    public let rejectReason: Swift.String?
}

extension RejectCertificateTransferInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rejectReason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rejectReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rejectReason)
        rejectReason = rejectReasonDecoded
    }
}

extension RejectCertificateTransferOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RejectCertificateTransferOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransferAlreadyCompletedException" : self = .transferAlreadyCompletedException(try TransferAlreadyCompletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RejectCertificateTransferOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case transferAlreadyCompletedException(TransferAlreadyCompletedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RejectCertificateTransferOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RejectCertificateTransferOutputResponse()"}
}

extension RejectCertificateTransferOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RejectCertificateTransferOutputResponse: Swift.Equatable {

    public init() {}
}

struct RejectCertificateTransferOutputResponseBody: Swift.Equatable {
}

extension RejectCertificateTransferOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes.RelatedResource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInfo
        case resourceIdentifier
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalInfo = additionalInfo {
            var additionalInfoContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .additionalInfo)
            for (dictKey0, stringmap0) in additionalInfo {
                try additionalInfoContainer.encode(stringmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let resourceIdentifier = resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(IotClientTypes.ResourceIdentifier.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
        let additionalInfoContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .additionalInfo)
        var additionalInfoDecoded0: [Swift.String:Swift.String]? = nil
        if let additionalInfoContainer = additionalInfoContainer {
            additionalInfoDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in additionalInfoContainer {
                if let string0 = string0 {
                    additionalInfoDecoded0?[key0] = string0
                }
            }
        }
        additionalInfo = additionalInfoDecoded0
    }
}

extension IotClientTypes.RelatedResource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RelatedResource(additionalInfo: \(Swift.String(describing: additionalInfo)), resourceIdentifier: \(Swift.String(describing: resourceIdentifier)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension IotClientTypes {
    /// <p>Information about a related resource.</p>
    public struct RelatedResource: Swift.Equatable {
        /// <p>Other information about the resource.</p>
        public let additionalInfo: [Swift.String:Swift.String]?
        /// <p>Information that identifies the resource.</p>
        public let resourceIdentifier: IotClientTypes.ResourceIdentifier?
        /// <p>The type of resource.</p>
        public let resourceType: IotClientTypes.ResourceType?

        public init (
            additionalInfo: [Swift.String:Swift.String]? = nil,
            resourceIdentifier: IotClientTypes.ResourceIdentifier? = nil,
            resourceType: IotClientTypes.ResourceType? = nil
        )
        {
            self.additionalInfo = additionalInfo
            self.resourceIdentifier = resourceIdentifier
            self.resourceType = resourceType
        }
    }

}

public struct RemoveThingFromBillingGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveThingFromBillingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveThingFromBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveThingFromBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveThingFromBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveThingFromBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveThingFromBillingGroupOutputError>
}

extension RemoveThingFromBillingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveThingFromBillingGroupInput(billingGroupArn: \(Swift.String(describing: billingGroupArn)), billingGroupName: \(Swift.String(describing: billingGroupName)), thingArn: \(Swift.String(describing: thingArn)), thingName: \(Swift.String(describing: thingName)))"}
}

extension RemoveThingFromBillingGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingGroupArn
        case billingGroupName
        case thingArn
        case thingName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingGroupArn = billingGroupArn {
            try encodeContainer.encode(billingGroupArn, forKey: .billingGroupArn)
        }
        if let billingGroupName = billingGroupName {
            try encodeContainer.encode(billingGroupName, forKey: .billingGroupName)
        }
        if let thingArn = thingArn {
            try encodeContainer.encode(thingArn, forKey: .thingArn)
        }
        if let thingName = thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
    }
}

public struct RemoveThingFromBillingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveThingFromBillingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveThingFromBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveThingFromBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveThingFromBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveThingFromBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveThingFromBillingGroupOutputError>
}

public struct RemoveThingFromBillingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveThingFromBillingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveThingFromBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveThingFromBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveThingFromBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveThingFromBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveThingFromBillingGroupOutputError>
}

public struct RemoveThingFromBillingGroupInput: Swift.Equatable {
    /// <p>The ARN of the billing group.</p>
    public let billingGroupArn: Swift.String?
    /// <p>The name of the billing group.</p>
    public let billingGroupName: Swift.String?
    /// <p>The ARN of the thing to be removed from the billing group.</p>
    public let thingArn: Swift.String?
    /// <p>The name of the thing to be removed from the billing group.</p>
    public let thingName: Swift.String?

    public init (
        billingGroupArn: Swift.String? = nil,
        billingGroupName: Swift.String? = nil,
        thingArn: Swift.String? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.billingGroupArn = billingGroupArn
        self.billingGroupName = billingGroupName
        self.thingArn = thingArn
        self.thingName = thingName
    }
}

struct RemoveThingFromBillingGroupInputBody: Swift.Equatable {
    public let billingGroupName: Swift.String?
    public let billingGroupArn: Swift.String?
    public let thingName: Swift.String?
    public let thingArn: Swift.String?
}

extension RemoveThingFromBillingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingGroupArn
        case billingGroupName
        case thingArn
        case thingName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let billingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupName)
        billingGroupName = billingGroupNameDecoded
        let billingGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupArn)
        billingGroupArn = billingGroupArnDecoded
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let thingArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingArn)
        thingArn = thingArnDecoded
    }
}

extension RemoveThingFromBillingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveThingFromBillingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveThingFromBillingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveThingFromBillingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveThingFromBillingGroupOutputResponse()"}
}

extension RemoveThingFromBillingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveThingFromBillingGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct RemoveThingFromBillingGroupOutputResponseBody: Swift.Equatable {
}

extension RemoveThingFromBillingGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct RemoveThingFromThingGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveThingFromThingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveThingFromThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveThingFromThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveThingFromThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveThingFromThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveThingFromThingGroupOutputError>
}

extension RemoveThingFromThingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveThingFromThingGroupInput(thingArn: \(Swift.String(describing: thingArn)), thingGroupArn: \(Swift.String(describing: thingGroupArn)), thingGroupName: \(Swift.String(describing: thingGroupName)), thingName: \(Swift.String(describing: thingName)))"}
}

extension RemoveThingFromThingGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case thingArn
        case thingGroupArn
        case thingGroupName
        case thingName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let thingArn = thingArn {
            try encodeContainer.encode(thingArn, forKey: .thingArn)
        }
        if let thingGroupArn = thingGroupArn {
            try encodeContainer.encode(thingGroupArn, forKey: .thingGroupArn)
        }
        if let thingGroupName = thingGroupName {
            try encodeContainer.encode(thingGroupName, forKey: .thingGroupName)
        }
        if let thingName = thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
    }
}

public struct RemoveThingFromThingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveThingFromThingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveThingFromThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveThingFromThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveThingFromThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveThingFromThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveThingFromThingGroupOutputError>
}

public struct RemoveThingFromThingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveThingFromThingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveThingFromThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveThingFromThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveThingFromThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveThingFromThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveThingFromThingGroupOutputError>
}

public struct RemoveThingFromThingGroupInput: Swift.Equatable {
    /// <p>The ARN of the thing to remove from the group.</p>
    public let thingArn: Swift.String?
    /// <p>The group ARN.</p>
    public let thingGroupArn: Swift.String?
    /// <p>The group name.</p>
    public let thingGroupName: Swift.String?
    /// <p>The name of the thing to remove from the group.</p>
    public let thingName: Swift.String?

    public init (
        thingArn: Swift.String? = nil,
        thingGroupArn: Swift.String? = nil,
        thingGroupName: Swift.String? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.thingArn = thingArn
        self.thingGroupArn = thingGroupArn
        self.thingGroupName = thingGroupName
        self.thingName = thingName
    }
}

struct RemoveThingFromThingGroupInputBody: Swift.Equatable {
    public let thingGroupName: Swift.String?
    public let thingGroupArn: Swift.String?
    public let thingName: Swift.String?
    public let thingArn: Swift.String?
}

extension RemoveThingFromThingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case thingArn
        case thingGroupArn
        case thingGroupName
        case thingName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupName)
        thingGroupName = thingGroupNameDecoded
        let thingGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupArn)
        thingGroupArn = thingGroupArnDecoded
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let thingArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingArn)
        thingArn = thingArnDecoded
    }
}

extension RemoveThingFromThingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveThingFromThingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveThingFromThingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveThingFromThingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveThingFromThingGroupOutputResponse()"}
}

extension RemoveThingFromThingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveThingFromThingGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct RemoveThingFromThingGroupOutputResponseBody: Swift.Equatable {
}

extension RemoveThingFromThingGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes.ReplaceDefaultPolicyVersionParams: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let templateName = templateName {
            try encodeContainer.encode(templateName.rawValue, forKey: .templateName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(IotClientTypes.PolicyTemplateName.self, forKey: .templateName)
        templateName = templateNameDecoded
    }
}

extension IotClientTypes.ReplaceDefaultPolicyVersionParams: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReplaceDefaultPolicyVersionParams(templateName: \(Swift.String(describing: templateName)))"}
}

extension IotClientTypes {
    /// <p>Parameters to define a mitigation action that adds a blank policy to restrict permissions.</p>
    public struct ReplaceDefaultPolicyVersionParams: Swift.Equatable {
        /// <p>The name of the template to be applied. The only supported value is <code>BLANK_POLICY</code>.</p>
        public let templateName: IotClientTypes.PolicyTemplateName?

        public init (
            templateName: IotClientTypes.PolicyTemplateName? = nil
        )
        {
            self.templateName = templateName
        }
    }

}

public struct ReplaceTopicRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReplaceTopicRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReplaceTopicRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReplaceTopicRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let topicRulePayload = input.operationInput.topicRulePayload {
            do {
                let encoder = context.getEncoder()
                let topicRulePayloaddata = try encoder.encode(topicRulePayload)
                let topicRulePayloadbody = ClientRuntime.HttpBody.data(topicRulePayloaddata)
                input.builder.withBody(topicRulePayloadbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReplaceTopicRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReplaceTopicRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReplaceTopicRuleOutputError>
}

extension ReplaceTopicRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReplaceTopicRuleInput(ruleName: \(Swift.String(describing: ruleName)), topicRulePayload: \(Swift.String(describing: topicRulePayload)))"}
}

extension ReplaceTopicRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicRulePayload
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let topicRulePayload = topicRulePayload {
            try encodeContainer.encode(topicRulePayload, forKey: .topicRulePayload)
        }
    }
}

public struct ReplaceTopicRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReplaceTopicRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReplaceTopicRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReplaceTopicRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReplaceTopicRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReplaceTopicRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReplaceTopicRuleOutputError>
}

public struct ReplaceTopicRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReplaceTopicRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReplaceTopicRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReplaceTopicRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReplaceTopicRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReplaceTopicRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReplaceTopicRuleOutputError>
}

/// <p>The input for the ReplaceTopicRule operation.</p>
public struct ReplaceTopicRuleInput: Swift.Equatable {
    /// <p>The name of the rule.</p>
    public let ruleName: Swift.String?
    /// <p>The rule payload.</p>
    public let topicRulePayload: IotClientTypes.TopicRulePayload?

    public init (
        ruleName: Swift.String? = nil,
        topicRulePayload: IotClientTypes.TopicRulePayload? = nil
    )
    {
        self.ruleName = ruleName
        self.topicRulePayload = topicRulePayload
    }
}

struct ReplaceTopicRuleInputBody: Swift.Equatable {
    public let topicRulePayload: IotClientTypes.TopicRulePayload?
}

extension ReplaceTopicRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicRulePayload
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicRulePayloadDecoded = try containerValues.decodeIfPresent(IotClientTypes.TopicRulePayload.self, forKey: .topicRulePayload)
        topicRulePayload = topicRulePayloadDecoded
    }
}

extension ReplaceTopicRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ReplaceTopicRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingResourceUpdateException" : self = .conflictingResourceUpdateException(try ConflictingResourceUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SqlParseException" : self = .sqlParseException(try SqlParseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ReplaceTopicRuleOutputError: Swift.Error, Swift.Equatable {
    case conflictingResourceUpdateException(ConflictingResourceUpdateException)
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case sqlParseException(SqlParseException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ReplaceTopicRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReplaceTopicRuleOutputResponse()"}
}

extension ReplaceTopicRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ReplaceTopicRuleOutputResponse: Swift.Equatable {

    public init() {}
}

struct ReplaceTopicRuleOutputResponseBody: Swift.Equatable {
}

extension ReplaceTopicRuleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes {
    public enum ReportType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case errors
        case results
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportType] {
            return [
                .errors,
                .results,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .errors: return "ERRORS"
            case .results: return "RESULTS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportType(rawValue: rawValue) ?? ReportType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.RepublishAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case qos
        case roleArn
        case topic
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let qos = qos {
            try encodeContainer.encode(qos, forKey: .qos)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let topic = topic {
            try encodeContainer.encode(topic, forKey: .topic)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let topicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topic)
        topic = topicDecoded
        let qosDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .qos)
        qos = qosDecoded
    }
}

extension IotClientTypes.RepublishAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RepublishAction(qos: \(Swift.String(describing: qos)), roleArn: \(Swift.String(describing: roleArn)), topic: \(Swift.String(describing: topic)))"}
}

extension IotClientTypes {
    /// <p>Describes an action to republish to another topic.</p>
    public struct RepublishAction: Swift.Equatable {
        /// <p>The Quality of Service (QoS) level to use when republishing messages. The default value
        ///          is 0.</p>
        public let qos: Swift.Int?
        /// <p>The ARN of the IAM role that grants access.</p>
        public let roleArn: Swift.String?
        /// <p>The name of the MQTT topic.</p>
        public let topic: Swift.String?

        public init (
            qos: Swift.Int? = nil,
            roleArn: Swift.String? = nil,
            topic: Swift.String? = nil
        )
        {
            self.qos = qos
            self.roleArn = roleArn
            self.topic = topic
        }
    }

}

extension ResourceAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceAlreadyExistsException(message: \(Swift.String(describing: message)), resourceArn: \(Swift.String(describing: resourceArn)), resourceId: \(Swift.String(describing: resourceId)))"}
}

extension ResourceAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceArn = output.resourceArn
            self.resourceId = output.resourceId
        } else {
            self.message = nil
            self.resourceArn = nil
            self.resourceId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The resource already exists.</p>
public struct ResourceAlreadyExistsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?
    /// <p>The ARN of the resource that caused the exception.</p>
    public var resourceArn: Swift.String?
    /// <p>The ID of the resource that caused the exception.</p>
    public var resourceId: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceArn: Swift.String? = nil,
        resourceId: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceArn = resourceArn
        self.resourceId = resourceId
    }
}

struct ResourceAlreadyExistsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let resourceId: Swift.String?
    public let resourceArn: Swift.String?
}

extension ResourceAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case resourceArn
        case resourceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension IotClientTypes.ResourceIdentifier: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account
        case caCertificateId
        case clientId
        case cognitoIdentityPoolId
        case deviceCertificateId
        case iamRoleArn
        case policyVersionIdentifier
        case roleAliasArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let account = account {
            try encodeContainer.encode(account, forKey: .account)
        }
        if let caCertificateId = caCertificateId {
            try encodeContainer.encode(caCertificateId, forKey: .caCertificateId)
        }
        if let clientId = clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let cognitoIdentityPoolId = cognitoIdentityPoolId {
            try encodeContainer.encode(cognitoIdentityPoolId, forKey: .cognitoIdentityPoolId)
        }
        if let deviceCertificateId = deviceCertificateId {
            try encodeContainer.encode(deviceCertificateId, forKey: .deviceCertificateId)
        }
        if let iamRoleArn = iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
        if let policyVersionIdentifier = policyVersionIdentifier {
            try encodeContainer.encode(policyVersionIdentifier, forKey: .policyVersionIdentifier)
        }
        if let roleAliasArn = roleAliasArn {
            try encodeContainer.encode(roleAliasArn, forKey: .roleAliasArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceCertificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceCertificateId)
        deviceCertificateId = deviceCertificateIdDecoded
        let caCertificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caCertificateId)
        caCertificateId = caCertificateIdDecoded
        let cognitoIdentityPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cognitoIdentityPoolId)
        cognitoIdentityPoolId = cognitoIdentityPoolIdDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let policyVersionIdentifierDecoded = try containerValues.decodeIfPresent(IotClientTypes.PolicyVersionIdentifier.self, forKey: .policyVersionIdentifier)
        policyVersionIdentifier = policyVersionIdentifierDecoded
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let roleAliasArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleAliasArn)
        roleAliasArn = roleAliasArnDecoded
    }
}

extension IotClientTypes.ResourceIdentifier: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceIdentifier(account: \(Swift.String(describing: account)), caCertificateId: \(Swift.String(describing: caCertificateId)), clientId: \(Swift.String(describing: clientId)), cognitoIdentityPoolId: \(Swift.String(describing: cognitoIdentityPoolId)), deviceCertificateId: \(Swift.String(describing: deviceCertificateId)), iamRoleArn: \(Swift.String(describing: iamRoleArn)), policyVersionIdentifier: \(Swift.String(describing: policyVersionIdentifier)), roleAliasArn: \(Swift.String(describing: roleAliasArn)))"}
}

extension IotClientTypes {
    /// <p>Information that identifies the noncompliant resource.</p>
    public struct ResourceIdentifier: Swift.Equatable {
        /// <p>The account with which the resource is associated.</p>
        public let account: Swift.String?
        /// <p>The ID of the CA certificate used to authorize the certificate.</p>
        public let caCertificateId: Swift.String?
        /// <p>The client ID.</p>
        public let clientId: Swift.String?
        /// <p>The ID of the Amazon Cognito identity pool.</p>
        public let cognitoIdentityPoolId: Swift.String?
        /// <p>The ID of the certificate attached to the resource.</p>
        public let deviceCertificateId: Swift.String?
        /// <p>The ARN of the IAM role that has overly permissive actions.</p>
        public let iamRoleArn: Swift.String?
        /// <p>The version of the policy associated with the resource.</p>
        public let policyVersionIdentifier: IotClientTypes.PolicyVersionIdentifier?
        /// <p>The ARN of the role alias that has overly permissive actions.</p>
        public let roleAliasArn: Swift.String?

        public init (
            account: Swift.String? = nil,
            caCertificateId: Swift.String? = nil,
            clientId: Swift.String? = nil,
            cognitoIdentityPoolId: Swift.String? = nil,
            deviceCertificateId: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil,
            policyVersionIdentifier: IotClientTypes.PolicyVersionIdentifier? = nil,
            roleAliasArn: Swift.String? = nil
        )
        {
            self.account = account
            self.caCertificateId = caCertificateId
            self.clientId = clientId
            self.cognitoIdentityPoolId = cognitoIdentityPoolId
            self.deviceCertificateId = deviceCertificateId
            self.iamRoleArn = iamRoleArn
            self.policyVersionIdentifier = policyVersionIdentifier
            self.roleAliasArn = roleAliasArn
        }
    }

}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified resource does not exist.</p>
public struct ResourceNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceRegistrationFailureException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceRegistrationFailureException(message: \(Swift.String(describing: message)))"}
}

extension ResourceRegistrationFailureException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceRegistrationFailureExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The resource registration failed.</p>
public struct ResourceRegistrationFailureException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceRegistrationFailureExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceRegistrationFailureExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountSettings
        case caCertificate
        case clientId
        case cognitoIdentityPool
        case deviceCertificate
        case iamRole
        case iotPolicy
        case roleAlias
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .accountSettings,
                .caCertificate,
                .clientId,
                .cognitoIdentityPool,
                .deviceCertificate,
                .iamRole,
                .iotPolicy,
                .roleAlias,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountSettings: return "ACCOUNT_SETTINGS"
            case .caCertificate: return "CA_CERTIFICATE"
            case .clientId: return "CLIENT_ID"
            case .cognitoIdentityPool: return "COGNITO_IDENTITY_POOL"
            case .deviceCertificate: return "DEVICE_CERTIFICATE"
            case .iamRole: return "IAM_ROLE"
            case .iotPolicy: return "IOT_POLICY"
            case .roleAlias: return "ROLE_ALIAS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.RoleAliasDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case credentialDurationSeconds
        case lastModifiedDate
        case owner
        case roleAlias
        case roleAliasArn
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let credentialDurationSeconds = credentialDurationSeconds {
            try encodeContainer.encode(credentialDurationSeconds, forKey: .credentialDurationSeconds)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let owner = owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let roleAlias = roleAlias {
            try encodeContainer.encode(roleAlias, forKey: .roleAlias)
        }
        if let roleAliasArn = roleAliasArn {
            try encodeContainer.encode(roleAliasArn, forKey: .roleAliasArn)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleAlias)
        roleAlias = roleAliasDecoded
        let roleAliasArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleAliasArn)
        roleAliasArn = roleAliasArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let credentialDurationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .credentialDurationSeconds)
        credentialDurationSeconds = credentialDurationSecondsDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
    }
}

extension IotClientTypes.RoleAliasDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RoleAliasDescription(creationDate: \(Swift.String(describing: creationDate)), credentialDurationSeconds: \(Swift.String(describing: credentialDurationSeconds)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), owner: \(Swift.String(describing: owner)), roleAlias: \(Swift.String(describing: roleAlias)), roleAliasArn: \(Swift.String(describing: roleAliasArn)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension IotClientTypes {
    /// <p>Role alias description.</p>
    public struct RoleAliasDescription: Swift.Equatable {
        /// <p>The UNIX timestamp of when the role alias was created.</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>The number of seconds for which the credential is valid.</p>
        public let credentialDurationSeconds: Swift.Int?
        /// <p>The UNIX timestamp of when the role alias was last modified.</p>
        public let lastModifiedDate: ClientRuntime.Date?
        /// <p>The role alias owner.</p>
        public let owner: Swift.String?
        /// <p>The role alias.</p>
        public let roleAlias: Swift.String?
        /// <p>The ARN of the role alias.</p>
        public let roleAliasArn: Swift.String?
        /// <p>The role ARN.</p>
        public let roleArn: Swift.String?

        public init (
            creationDate: ClientRuntime.Date? = nil,
            credentialDurationSeconds: Swift.Int? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            owner: Swift.String? = nil,
            roleAlias: Swift.String? = nil,
            roleAliasArn: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.creationDate = creationDate
            self.credentialDurationSeconds = credentialDurationSeconds
            self.lastModifiedDate = lastModifiedDate
            self.owner = owner
            self.roleAlias = roleAlias
            self.roleAliasArn = roleAliasArn
            self.roleArn = roleArn
        }
    }

}

extension IotClientTypes.S3Action: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
        case cannedAcl
        case key
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketName = bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let cannedAcl = cannedAcl {
            try encodeContainer.encode(cannedAcl.rawValue, forKey: .cannedAcl)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let cannedAclDecoded = try containerValues.decodeIfPresent(IotClientTypes.CannedAccessControlList.self, forKey: .cannedAcl)
        cannedAcl = cannedAclDecoded
    }
}

extension IotClientTypes.S3Action: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "S3Action(bucketName: \(Swift.String(describing: bucketName)), cannedAcl: \(Swift.String(describing: cannedAcl)), key: \(Swift.String(describing: key)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension IotClientTypes {
    /// <p>Describes an action to write data to an Amazon S3 bucket.</p>
    public struct S3Action: Swift.Equatable {
        /// <p>The Amazon S3 bucket.</p>
        public let bucketName: Swift.String?
        /// <p>The Amazon S3 canned ACL that controls access to the object identified by the object
        ///          key. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl">S3 canned ACLs</a>.</p>
        public let cannedAcl: IotClientTypes.CannedAccessControlList?
        /// <p>The object key. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/list_amazons3.html">Actions, resources, and condition keys for Amazon S3</a>.</p>
        public let key: Swift.String?
        /// <p>The ARN of the IAM role that grants access.</p>
        public let roleArn: Swift.String?

        public init (
            bucketName: Swift.String? = nil,
            cannedAcl: IotClientTypes.CannedAccessControlList? = nil,
            key: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.bucketName = bucketName
            self.cannedAcl = cannedAcl
            self.key = key
            self.roleArn = roleArn
        }
    }

}

extension IotClientTypes.S3Destination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case prefix
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
    }
}

extension IotClientTypes.S3Destination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "S3Destination(bucket: \(Swift.String(describing: bucket)), prefix: \(Swift.String(describing: prefix)))"}
}

extension IotClientTypes {
    /// <p>Describes the location of updated firmware in S3.</p>
    public struct S3Destination: Swift.Equatable {
        /// <p>The S3 bucket that contains the updated firmware.</p>
        public let bucket: Swift.String?
        /// <p>The S3 prefix.</p>
        public let prefix: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            prefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.prefix = prefix
        }
    }

}

extension IotClientTypes.S3Location: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case key
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension IotClientTypes.S3Location: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "S3Location(bucket: \(Swift.String(describing: bucket)), key: \(Swift.String(describing: key)), version: \(Swift.String(describing: version)))"}
}

extension IotClientTypes {
    /// <p>The S3 location.</p>
    public struct S3Location: Swift.Equatable {
        /// <p>The S3 bucket.</p>
        public let bucket: Swift.String?
        /// <p>The S3 key.</p>
        public let key: Swift.String?
        /// <p>The S3 bucket version.</p>
        public let version: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            key: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
            self.version = version
        }
    }

}

extension IotClientTypes.SalesforceAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case token
        case url
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let token = token {
            try encodeContainer.encode(token, forKey: .token)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .token)
        token = tokenDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension IotClientTypes.SalesforceAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SalesforceAction(token: \(Swift.String(describing: token)), url: \(Swift.String(describing: url)))"}
}

extension IotClientTypes {
    /// <p>Describes an action to write a message to a Salesforce IoT Cloud Input
    ///          Stream.</p>
    public struct SalesforceAction: Swift.Equatable {
        /// <p>The token used to authenticate access to the Salesforce IoT Cloud Input Stream. The
        ///          token is available from the Salesforce IoT Cloud platform after creation of the Input
        ///          Stream.</p>
        public let token: Swift.String?
        /// <p>The URL exposed by the Salesforce IoT Cloud Input Stream. The URL is available from
        ///          the Salesforce IoT Cloud platform after creation of the Input Stream.</p>
        public let url: Swift.String?

        public init (
            token: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.token = token
            self.url = url
        }
    }

}

extension IotClientTypes.ScheduledAuditMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dayOfMonth
        case dayOfWeek
        case frequency
        case scheduledAuditArn
        case scheduledAuditName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dayOfMonth = dayOfMonth {
            try encodeContainer.encode(dayOfMonth, forKey: .dayOfMonth)
        }
        if let dayOfWeek = dayOfWeek {
            try encodeContainer.encode(dayOfWeek.rawValue, forKey: .dayOfWeek)
        }
        if let frequency = frequency {
            try encodeContainer.encode(frequency.rawValue, forKey: .frequency)
        }
        if let scheduledAuditArn = scheduledAuditArn {
            try encodeContainer.encode(scheduledAuditArn, forKey: .scheduledAuditArn)
        }
        if let scheduledAuditName = scheduledAuditName {
            try encodeContainer.encode(scheduledAuditName, forKey: .scheduledAuditName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledAuditNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledAuditName)
        scheduledAuditName = scheduledAuditNameDecoded
        let scheduledAuditArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledAuditArn)
        scheduledAuditArn = scheduledAuditArnDecoded
        let frequencyDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditFrequency.self, forKey: .frequency)
        frequency = frequencyDecoded
        let dayOfMonthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dayOfMonth)
        dayOfMonth = dayOfMonthDecoded
        let dayOfWeekDecoded = try containerValues.decodeIfPresent(IotClientTypes.DayOfWeek.self, forKey: .dayOfWeek)
        dayOfWeek = dayOfWeekDecoded
    }
}

extension IotClientTypes.ScheduledAuditMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScheduledAuditMetadata(dayOfMonth: \(Swift.String(describing: dayOfMonth)), dayOfWeek: \(Swift.String(describing: dayOfWeek)), frequency: \(Swift.String(describing: frequency)), scheduledAuditArn: \(Swift.String(describing: scheduledAuditArn)), scheduledAuditName: \(Swift.String(describing: scheduledAuditName)))"}
}

extension IotClientTypes {
    /// <p>Information about the scheduled audit.</p>
    public struct ScheduledAuditMetadata: Swift.Equatable {
        /// <p>The day of the month on which the scheduled audit is run (if the
        ///           <code>frequency</code> is "MONTHLY").
        ///         If days 29-31 are specified, and the month does not have that many
        ///         days, the audit takes place on the "LAST" day of the month.</p>
        public let dayOfMonth: Swift.String?
        /// <p>The day of the week on which the scheduled audit is run (if the
        ///           <code>frequency</code> is "WEEKLY" or "BIWEEKLY").</p>
        public let dayOfWeek: IotClientTypes.DayOfWeek?
        /// <p>How often the scheduled audit occurs.</p>
        public let frequency: IotClientTypes.AuditFrequency?
        /// <p>The ARN of the scheduled audit.</p>
        public let scheduledAuditArn: Swift.String?
        /// <p>The name of the scheduled audit.</p>
        public let scheduledAuditName: Swift.String?

        public init (
            dayOfMonth: Swift.String? = nil,
            dayOfWeek: IotClientTypes.DayOfWeek? = nil,
            frequency: IotClientTypes.AuditFrequency? = nil,
            scheduledAuditArn: Swift.String? = nil,
            scheduledAuditName: Swift.String? = nil
        )
        {
            self.dayOfMonth = dayOfMonth
            self.dayOfWeek = dayOfWeek
            self.frequency = frequency
            self.scheduledAuditArn = scheduledAuditArn
            self.scheduledAuditName = scheduledAuditName
        }
    }

}

public struct SearchIndexInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SearchIndexInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SearchIndexInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SearchIndexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SearchIndexInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SearchIndexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SearchIndexOutputError>
}

extension SearchIndexInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SearchIndexInput(indexName: \(Swift.String(describing: indexName)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), queryString: \(Swift.String(describing: queryString)), queryVersion: \(Swift.String(describing: queryVersion)))"}
}

extension SearchIndexInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName
        case maxResults
        case nextToken
        case queryString
        case queryVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let queryVersion = queryVersion {
            try encodeContainer.encode(queryVersion, forKey: .queryVersion)
        }
    }
}

public struct SearchIndexInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SearchIndexInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SearchIndexInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SearchIndexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SearchIndexInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SearchIndexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SearchIndexOutputError>
}

public struct SearchIndexInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SearchIndexInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SearchIndexInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SearchIndexOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SearchIndexInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SearchIndexOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SearchIndexOutputError>
}

public struct SearchIndexInput: Swift.Equatable {
    /// <p>The search index name.</p>
    public let indexName: Swift.String?
    /// <p>The maximum number of results to return at one time.</p>
    public let maxResults: Swift.Int?
    /// <p>The token used to get the next set of results, or <code>null</code> if there are no additional
    ///       results.</p>
    public let nextToken: Swift.String?
    /// <p>The search query string.</p>
    public let queryString: Swift.String?
    /// <p>The query version.</p>
    public let queryVersion: Swift.String?

    public init (
        indexName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        queryString: Swift.String? = nil,
        queryVersion: Swift.String? = nil
    )
    {
        self.indexName = indexName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queryString = queryString
        self.queryVersion = queryVersion
    }
}

struct SearchIndexInputBody: Swift.Equatable {
    public let indexName: Swift.String?
    public let queryString: Swift.String?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
    public let queryVersion: Swift.String?
}

extension SearchIndexInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName
        case maxResults
        case nextToken
        case queryString
        case queryVersion
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let queryVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryVersion)
        queryVersion = queryVersionDecoded
    }
}

extension SearchIndexOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SearchIndexOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IndexNotReadyException" : self = .indexNotReadyException(try IndexNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidQueryException" : self = .invalidQueryException(try InvalidQueryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SearchIndexOutputError: Swift.Error, Swift.Equatable {
    case indexNotReadyException(IndexNotReadyException)
    case internalFailureException(InternalFailureException)
    case invalidQueryException(InvalidQueryException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SearchIndexOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SearchIndexOutputResponse(nextToken: \(Swift.String(describing: nextToken)), thingGroups: \(Swift.String(describing: thingGroups)), things: \(Swift.String(describing: things)))"}
}

extension SearchIndexOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SearchIndexOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.thingGroups = output.thingGroups
            self.things = output.things
        } else {
            self.nextToken = nil
            self.thingGroups = nil
            self.things = nil
        }
    }
}

public struct SearchIndexOutputResponse: Swift.Equatable {
    /// <p>The token used to get the next set of results, or <code>null</code> if there are no additional
    ///       results.</p>
    public let nextToken: Swift.String?
    /// <p>The thing groups that match the search query.</p>
    public let thingGroups: [IotClientTypes.ThingGroupDocument]?
    /// <p>The things that match the search query.</p>
    public let things: [IotClientTypes.ThingDocument]?

    public init (
        nextToken: Swift.String? = nil,
        thingGroups: [IotClientTypes.ThingGroupDocument]? = nil,
        things: [IotClientTypes.ThingDocument]? = nil
    )
    {
        self.nextToken = nextToken
        self.thingGroups = thingGroups
        self.things = things
    }
}

struct SearchIndexOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let things: [IotClientTypes.ThingDocument]?
    public let thingGroups: [IotClientTypes.ThingGroupDocument]?
}

extension SearchIndexOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case thingGroups
        case things
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let thingsContainer = try containerValues.decodeIfPresent([IotClientTypes.ThingDocument?].self, forKey: .things)
        var thingsDecoded0:[IotClientTypes.ThingDocument]? = nil
        if let thingsContainer = thingsContainer {
            thingsDecoded0 = [IotClientTypes.ThingDocument]()
            for structure0 in thingsContainer {
                if let structure0 = structure0 {
                    thingsDecoded0?.append(structure0)
                }
            }
        }
        things = thingsDecoded0
        let thingGroupsContainer = try containerValues.decodeIfPresent([IotClientTypes.ThingGroupDocument?].self, forKey: .thingGroups)
        var thingGroupsDecoded0:[IotClientTypes.ThingGroupDocument]? = nil
        if let thingGroupsContainer = thingGroupsContainer {
            thingGroupsDecoded0 = [IotClientTypes.ThingGroupDocument]()
            for structure0 in thingGroupsContainer {
                if let structure0 = structure0 {
                    thingGroupsDecoded0?.append(structure0)
                }
            }
        }
        thingGroups = thingGroupsDecoded0
    }
}

extension IotClientTypes.SecurityProfileIdentifier: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension IotClientTypes.SecurityProfileIdentifier: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SecurityProfileIdentifier(arn: \(Swift.String(describing: arn)), name: \(Swift.String(describing: name)))"}
}

extension IotClientTypes {
    /// <p>Identifying information for a Device Defender security profile.</p>
    public struct SecurityProfileIdentifier: Swift.Equatable {
        /// <p>The ARN of the security profile.</p>
        public let arn: Swift.String?
        /// <p>The name you've given to the security profile.</p>
        public let name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.name = name
        }
    }

}

extension IotClientTypes.SecurityProfileTarget: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension IotClientTypes.SecurityProfileTarget: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SecurityProfileTarget(arn: \(Swift.String(describing: arn)))"}
}

extension IotClientTypes {
    /// <p>A target to which an alert is sent when a security profile behavior is
    ///           violated.</p>
    public struct SecurityProfileTarget: Swift.Equatable {
        /// <p>The ARN of the security profile.</p>
        public let arn: Swift.String?

        public init (
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension IotClientTypes.SecurityProfileTargetMapping: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityProfileIdentifier
        case target
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityProfileIdentifier = securityProfileIdentifier {
            try encodeContainer.encode(securityProfileIdentifier, forKey: .securityProfileIdentifier)
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityProfileIdentifierDecoded = try containerValues.decodeIfPresent(IotClientTypes.SecurityProfileIdentifier.self, forKey: .securityProfileIdentifier)
        securityProfileIdentifier = securityProfileIdentifierDecoded
        let targetDecoded = try containerValues.decodeIfPresent(IotClientTypes.SecurityProfileTarget.self, forKey: .target)
        target = targetDecoded
    }
}

extension IotClientTypes.SecurityProfileTargetMapping: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SecurityProfileTargetMapping(securityProfileIdentifier: \(Swift.String(describing: securityProfileIdentifier)), target: \(Swift.String(describing: target)))"}
}

extension IotClientTypes {
    /// <p>Information about a security profile and the target associated with it.</p>
    public struct SecurityProfileTargetMapping: Swift.Equatable {
        /// <p>Information that identifies the security profile.</p>
        public let securityProfileIdentifier: IotClientTypes.SecurityProfileIdentifier?
        /// <p>Information about the target (thing group) associated with the security profile.</p>
        public let target: IotClientTypes.SecurityProfileTarget?

        public init (
            securityProfileIdentifier: IotClientTypes.SecurityProfileIdentifier? = nil,
            target: IotClientTypes.SecurityProfileTarget? = nil
        )
        {
            self.securityProfileIdentifier = securityProfileIdentifier
            self.target = target
        }
    }

}

extension IotClientTypes {
    public enum ServerCertificateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case invalid
        case valid
        case sdkUnknown(Swift.String)

        public static var allCases: [ServerCertificateStatus] {
            return [
                .invalid,
                .valid,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .invalid: return "INVALID"
            case .valid: return "VALID"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServerCertificateStatus(rawValue: rawValue) ?? ServerCertificateStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.ServerCertificateSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serverCertificateArn
        case serverCertificateStatus
        case serverCertificateStatusDetail
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let serverCertificateArn = serverCertificateArn {
            try encodeContainer.encode(serverCertificateArn, forKey: .serverCertificateArn)
        }
        if let serverCertificateStatus = serverCertificateStatus {
            try encodeContainer.encode(serverCertificateStatus.rawValue, forKey: .serverCertificateStatus)
        }
        if let serverCertificateStatusDetail = serverCertificateStatusDetail {
            try encodeContainer.encode(serverCertificateStatusDetail, forKey: .serverCertificateStatusDetail)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverCertificateArn)
        serverCertificateArn = serverCertificateArnDecoded
        let serverCertificateStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.ServerCertificateStatus.self, forKey: .serverCertificateStatus)
        serverCertificateStatus = serverCertificateStatusDecoded
        let serverCertificateStatusDetailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverCertificateStatusDetail)
        serverCertificateStatusDetail = serverCertificateStatusDetailDecoded
    }
}

extension IotClientTypes.ServerCertificateSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServerCertificateSummary(serverCertificateArn: \(Swift.String(describing: serverCertificateArn)), serverCertificateStatus: \(Swift.String(describing: serverCertificateStatus)), serverCertificateStatusDetail: \(Swift.String(describing: serverCertificateStatusDetail)))"}
}

extension IotClientTypes {
    /// <p>An object that contains information about a server certificate.</p>
    public struct ServerCertificateSummary: Swift.Equatable {
        /// <p>The ARN of the server certificate.</p>
        public let serverCertificateArn: Swift.String?
        /// <p>The status of the server certificate.</p>
        public let serverCertificateStatus: IotClientTypes.ServerCertificateStatus?
        /// <p>Details that explain the status of the server certificate.</p>
        public let serverCertificateStatusDetail: Swift.String?

        public init (
            serverCertificateArn: Swift.String? = nil,
            serverCertificateStatus: IotClientTypes.ServerCertificateStatus? = nil,
            serverCertificateStatusDetail: Swift.String? = nil
        )
        {
            self.serverCertificateArn = serverCertificateArn
            self.serverCertificateStatus = serverCertificateStatus
            self.serverCertificateStatusDetail = serverCertificateStatusDetail
        }
    }

}

extension IotClientTypes {
    public enum ServiceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case credentialProvider
        case data
        case jobs
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceType] {
            return [
                .credentialProvider,
                .data,
                .jobs,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .credentialProvider: return "CREDENTIAL_PROVIDER"
            case .data: return "DATA"
            case .jobs: return "JOBS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServiceType(rawValue: rawValue) ?? ServiceType.sdkUnknown(rawValue)
        }
    }
}

extension ServiceUnavailableException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceUnavailableException(message: \(Swift.String(describing: message)))"}
}

extension ServiceUnavailableException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The service is temporarily unavailable.</p>
public struct ServiceUnavailableException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceUnavailableExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ServiceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct SetDefaultAuthorizerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetDefaultAuthorizerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetDefaultAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetDefaultAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetDefaultAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetDefaultAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetDefaultAuthorizerOutputError>
}

extension SetDefaultAuthorizerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetDefaultAuthorizerInput(authorizerName: \(Swift.String(describing: authorizerName)))"}
}

extension SetDefaultAuthorizerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizerName = authorizerName {
            try encodeContainer.encode(authorizerName, forKey: .authorizerName)
        }
    }
}

public struct SetDefaultAuthorizerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetDefaultAuthorizerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetDefaultAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetDefaultAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetDefaultAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetDefaultAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetDefaultAuthorizerOutputError>
}

public struct SetDefaultAuthorizerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetDefaultAuthorizerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetDefaultAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetDefaultAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetDefaultAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetDefaultAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetDefaultAuthorizerOutputError>
}

public struct SetDefaultAuthorizerInput: Swift.Equatable {
    /// <p>The authorizer name.</p>
    public let authorizerName: Swift.String?

    public init (
        authorizerName: Swift.String? = nil
    )
    {
        self.authorizerName = authorizerName
    }
}

struct SetDefaultAuthorizerInputBody: Swift.Equatable {
    public let authorizerName: Swift.String?
}

extension SetDefaultAuthorizerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerName)
        authorizerName = authorizerNameDecoded
    }
}

extension SetDefaultAuthorizerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetDefaultAuthorizerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetDefaultAuthorizerOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetDefaultAuthorizerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetDefaultAuthorizerOutputResponse(authorizerArn: \(Swift.String(describing: authorizerArn)), authorizerName: \(Swift.String(describing: authorizerName)))"}
}

extension SetDefaultAuthorizerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SetDefaultAuthorizerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authorizerArn = output.authorizerArn
            self.authorizerName = output.authorizerName
        } else {
            self.authorizerArn = nil
            self.authorizerName = nil
        }
    }
}

public struct SetDefaultAuthorizerOutputResponse: Swift.Equatable {
    /// <p>The authorizer ARN.</p>
    public let authorizerArn: Swift.String?
    /// <p>The authorizer name.</p>
    public let authorizerName: Swift.String?

    public init (
        authorizerArn: Swift.String? = nil,
        authorizerName: Swift.String? = nil
    )
    {
        self.authorizerArn = authorizerArn
        self.authorizerName = authorizerName
    }
}

struct SetDefaultAuthorizerOutputResponseBody: Swift.Equatable {
    public let authorizerName: Swift.String?
    public let authorizerArn: Swift.String?
}

extension SetDefaultAuthorizerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerArn
        case authorizerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerName)
        authorizerName = authorizerNameDecoded
        let authorizerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerArn)
        authorizerArn = authorizerArnDecoded
    }
}

extension SetDefaultPolicyVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetDefaultPolicyVersionInput(policyName: \(Swift.String(describing: policyName)), policyVersionId: \(Swift.String(describing: policyVersionId)))"}
}

extension SetDefaultPolicyVersionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct SetDefaultPolicyVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetDefaultPolicyVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetDefaultPolicyVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetDefaultPolicyVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetDefaultPolicyVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetDefaultPolicyVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetDefaultPolicyVersionOutputError>
}

public struct SetDefaultPolicyVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetDefaultPolicyVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetDefaultPolicyVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetDefaultPolicyVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetDefaultPolicyVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetDefaultPolicyVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetDefaultPolicyVersionOutputError>
}

/// <p>The input for the SetDefaultPolicyVersion operation.</p>
public struct SetDefaultPolicyVersionInput: Swift.Equatable {
    /// <p>The policy name.</p>
    public let policyName: Swift.String?
    /// <p>The policy version ID.</p>
    public let policyVersionId: Swift.String?

    public init (
        policyName: Swift.String? = nil,
        policyVersionId: Swift.String? = nil
    )
    {
        self.policyName = policyName
        self.policyVersionId = policyVersionId
    }
}

struct SetDefaultPolicyVersionInputBody: Swift.Equatable {
}

extension SetDefaultPolicyVersionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SetDefaultPolicyVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetDefaultPolicyVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetDefaultPolicyVersionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetDefaultPolicyVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetDefaultPolicyVersionOutputResponse()"}
}

extension SetDefaultPolicyVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetDefaultPolicyVersionOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetDefaultPolicyVersionOutputResponseBody: Swift.Equatable {
}

extension SetDefaultPolicyVersionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct SetLoggingOptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetLoggingOptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetLoggingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetLoggingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let loggingOptionsPayload = input.operationInput.loggingOptionsPayload {
            do {
                let encoder = context.getEncoder()
                let loggingOptionsPayloaddata = try encoder.encode(loggingOptionsPayload)
                let loggingOptionsPayloadbody = ClientRuntime.HttpBody.data(loggingOptionsPayloaddata)
                input.builder.withBody(loggingOptionsPayloadbody)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetLoggingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetLoggingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetLoggingOptionsOutputError>
}

extension SetLoggingOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetLoggingOptionsInput(loggingOptionsPayload: \(Swift.String(describing: loggingOptionsPayload)))"}
}

extension SetLoggingOptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingOptionsPayload
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let loggingOptionsPayload = loggingOptionsPayload {
            try encodeContainer.encode(loggingOptionsPayload, forKey: .loggingOptionsPayload)
        }
    }
}

public struct SetLoggingOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetLoggingOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetLoggingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetLoggingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetLoggingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetLoggingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetLoggingOptionsOutputError>
}

public struct SetLoggingOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetLoggingOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetLoggingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetLoggingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetLoggingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetLoggingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetLoggingOptionsOutputError>
}

/// <p>The input for the SetLoggingOptions operation.</p>
public struct SetLoggingOptionsInput: Swift.Equatable {
    /// <p>The logging options payload.</p>
    public let loggingOptionsPayload: IotClientTypes.LoggingOptionsPayload?

    public init (
        loggingOptionsPayload: IotClientTypes.LoggingOptionsPayload? = nil
    )
    {
        self.loggingOptionsPayload = loggingOptionsPayload
    }
}

struct SetLoggingOptionsInputBody: Swift.Equatable {
    public let loggingOptionsPayload: IotClientTypes.LoggingOptionsPayload?
}

extension SetLoggingOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingOptionsPayload
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingOptionsPayloadDecoded = try containerValues.decodeIfPresent(IotClientTypes.LoggingOptionsPayload.self, forKey: .loggingOptionsPayload)
        loggingOptionsPayload = loggingOptionsPayloadDecoded
    }
}

extension SetLoggingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetLoggingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetLoggingOptionsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetLoggingOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetLoggingOptionsOutputResponse()"}
}

extension SetLoggingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetLoggingOptionsOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetLoggingOptionsOutputResponseBody: Swift.Equatable {
}

extension SetLoggingOptionsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct SetV2LoggingLevelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetV2LoggingLevelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetV2LoggingLevelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetV2LoggingLevelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetV2LoggingLevelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetV2LoggingLevelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetV2LoggingLevelOutputError>
}

extension SetV2LoggingLevelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetV2LoggingLevelInput(logLevel: \(Swift.String(describing: logLevel)), logTarget: \(Swift.String(describing: logTarget)))"}
}

extension SetV2LoggingLevelInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logLevel
        case logTarget
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logLevel = logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let logTarget = logTarget {
            try encodeContainer.encode(logTarget, forKey: .logTarget)
        }
    }
}

public struct SetV2LoggingLevelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetV2LoggingLevelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetV2LoggingLevelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetV2LoggingLevelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetV2LoggingLevelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetV2LoggingLevelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetV2LoggingLevelOutputError>
}

public struct SetV2LoggingLevelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetV2LoggingLevelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetV2LoggingLevelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetV2LoggingLevelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetV2LoggingLevelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetV2LoggingLevelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetV2LoggingLevelOutputError>
}

public struct SetV2LoggingLevelInput: Swift.Equatable {
    /// <p>The log level.</p>
    public let logLevel: IotClientTypes.LogLevel?
    /// <p>The log target.</p>
    public let logTarget: IotClientTypes.LogTarget?

    public init (
        logLevel: IotClientTypes.LogLevel? = nil,
        logTarget: IotClientTypes.LogTarget? = nil
    )
    {
        self.logLevel = logLevel
        self.logTarget = logTarget
    }
}

struct SetV2LoggingLevelInputBody: Swift.Equatable {
    public let logTarget: IotClientTypes.LogTarget?
    public let logLevel: IotClientTypes.LogLevel?
}

extension SetV2LoggingLevelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logLevel
        case logTarget
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logTargetDecoded = try containerValues.decodeIfPresent(IotClientTypes.LogTarget.self, forKey: .logTarget)
        logTarget = logTargetDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(IotClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
    }
}

extension SetV2LoggingLevelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetV2LoggingLevelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotConfiguredException" : self = .notConfiguredException(try NotConfiguredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetV2LoggingLevelOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notConfiguredException(NotConfiguredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetV2LoggingLevelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetV2LoggingLevelOutputResponse()"}
}

extension SetV2LoggingLevelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetV2LoggingLevelOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetV2LoggingLevelOutputResponseBody: Swift.Equatable {
}

extension SetV2LoggingLevelOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct SetV2LoggingOptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetV2LoggingOptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetV2LoggingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetV2LoggingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetV2LoggingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetV2LoggingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetV2LoggingOptionsOutputError>
}

extension SetV2LoggingOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetV2LoggingOptionsInput(defaultLogLevel: \(Swift.String(describing: defaultLogLevel)), disableAllLogs: \(Swift.String(describing: disableAllLogs)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension SetV2LoggingOptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultLogLevel
        case disableAllLogs
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultLogLevel = defaultLogLevel {
            try encodeContainer.encode(defaultLogLevel.rawValue, forKey: .defaultLogLevel)
        }
        if disableAllLogs != false {
            try encodeContainer.encode(disableAllLogs, forKey: .disableAllLogs)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

public struct SetV2LoggingOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetV2LoggingOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetV2LoggingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetV2LoggingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetV2LoggingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetV2LoggingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetV2LoggingOptionsOutputError>
}

public struct SetV2LoggingOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetV2LoggingOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetV2LoggingOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetV2LoggingOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetV2LoggingOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetV2LoggingOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetV2LoggingOptionsOutputError>
}

public struct SetV2LoggingOptionsInput: Swift.Equatable {
    /// <p>The default logging level.</p>
    public let defaultLogLevel: IotClientTypes.LogLevel?
    /// <p>If true all logs are disabled. The default is false.</p>
    public let disableAllLogs: Swift.Bool
    /// <p>The ARN of the role that allows IoT to write to Cloudwatch logs.</p>
    public let roleArn: Swift.String?

    public init (
        defaultLogLevel: IotClientTypes.LogLevel? = nil,
        disableAllLogs: Swift.Bool = false,
        roleArn: Swift.String? = nil
    )
    {
        self.defaultLogLevel = defaultLogLevel
        self.disableAllLogs = disableAllLogs
        self.roleArn = roleArn
    }
}

struct SetV2LoggingOptionsInputBody: Swift.Equatable {
    public let roleArn: Swift.String?
    public let defaultLogLevel: IotClientTypes.LogLevel?
    public let disableAllLogs: Swift.Bool
}

extension SetV2LoggingOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultLogLevel
        case disableAllLogs
        case roleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let defaultLogLevelDecoded = try containerValues.decodeIfPresent(IotClientTypes.LogLevel.self, forKey: .defaultLogLevel)
        defaultLogLevel = defaultLogLevelDecoded
        let disableAllLogsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .disableAllLogs)
        disableAllLogs = disableAllLogsDecoded
    }
}

extension SetV2LoggingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetV2LoggingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetV2LoggingOptionsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetV2LoggingOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetV2LoggingOptionsOutputResponse()"}
}

extension SetV2LoggingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetV2LoggingOptionsOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetV2LoggingOptionsOutputResponseBody: Swift.Equatable {
}

extension SetV2LoggingOptionsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes.SigV4Authorization: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleArn
        case serviceName
        case signingRegion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
        if let signingRegion = signingRegion {
            try encodeContainer.encode(signingRegion, forKey: .signingRegion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signingRegion)
        signingRegion = signingRegionDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IotClientTypes.SigV4Authorization: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SigV4Authorization(roleArn: \(Swift.String(describing: roleArn)), serviceName: \(Swift.String(describing: serviceName)), signingRegion: \(Swift.String(describing: signingRegion)))"}
}

extension IotClientTypes {
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 signing process</a>.</p>
    public struct SigV4Authorization: Swift.Equatable {
        /// <p>The ARN of the signing role.</p>
        public let roleArn: Swift.String?
        /// <p>The service name to use while signing with Sig V4.</p>
        public let serviceName: Swift.String?
        /// <p>The signing region.</p>
        public let signingRegion: Swift.String?

        public init (
            roleArn: Swift.String? = nil,
            serviceName: Swift.String? = nil,
            signingRegion: Swift.String? = nil
        )
        {
            self.roleArn = roleArn
            self.serviceName = serviceName
            self.signingRegion = signingRegion
        }
    }

}

extension IotClientTypes.SigningProfileParameter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn
        case certificatePathOnDevice
        case platform
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let certificatePathOnDevice = certificatePathOnDevice {
            try encodeContainer.encode(certificatePathOnDevice, forKey: .certificatePathOnDevice)
        }
        if let platform = platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let certificatePathOnDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificatePathOnDevice)
        certificatePathOnDevice = certificatePathOnDeviceDecoded
    }
}

extension IotClientTypes.SigningProfileParameter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SigningProfileParameter(certificateArn: \(Swift.String(describing: certificateArn)), certificatePathOnDevice: \(Swift.String(describing: certificatePathOnDevice)), platform: \(Swift.String(describing: platform)))"}
}

extension IotClientTypes {
    /// <p>Describes the code-signing profile.</p>
    public struct SigningProfileParameter: Swift.Equatable {
        /// <p>Certificate ARN.</p>
        public let certificateArn: Swift.String?
        /// <p>The location of the code-signing certificate on your device.</p>
        public let certificatePathOnDevice: Swift.String?
        /// <p>The hardware platform of your device.</p>
        public let platform: Swift.String?

        public init (
            certificateArn: Swift.String? = nil,
            certificatePathOnDevice: Swift.String? = nil,
            platform: Swift.String? = nil
        )
        {
            self.certificateArn = certificateArn
            self.certificatePathOnDevice = certificatePathOnDevice
            self.platform = platform
        }
    }

}

extension IotClientTypes.SnsAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageFormat
        case roleArn
        case targetArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let messageFormat = messageFormat {
            try encodeContainer.encode(messageFormat.rawValue, forKey: .messageFormat)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let targetArn = targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let messageFormatDecoded = try containerValues.decodeIfPresent(IotClientTypes.MessageFormat.self, forKey: .messageFormat)
        messageFormat = messageFormatDecoded
    }
}

extension IotClientTypes.SnsAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SnsAction(messageFormat: \(Swift.String(describing: messageFormat)), roleArn: \(Swift.String(describing: roleArn)), targetArn: \(Swift.String(describing: targetArn)))"}
}

extension IotClientTypes {
    /// <p>Describes an action to publish to an Amazon SNS topic.</p>
    public struct SnsAction: Swift.Equatable {
        /// <p>(Optional) The message format of the message to publish. Accepted values are "JSON"
        ///          and "RAW". The default value of the attribute is "RAW". SNS uses this setting to determine
        ///          if the payload should be parsed and relevant platform-specific bits of the payload should
        ///          be extracted. To read more about SNS message formats, see <a href="https://docs.aws.amazon.com/sns/latest/dg/json-formats.html">https://docs.aws.amazon.com/sns/latest/dg/json-formats.html</a> refer to their official documentation.</p>
        public let messageFormat: IotClientTypes.MessageFormat?
        /// <p>The ARN of the IAM role that grants access.</p>
        public let roleArn: Swift.String?
        /// <p>The ARN of the SNS topic.</p>
        public let targetArn: Swift.String?

        public init (
            messageFormat: IotClientTypes.MessageFormat? = nil,
            roleArn: Swift.String? = nil,
            targetArn: Swift.String? = nil
        )
        {
            self.messageFormat = messageFormat
            self.roleArn = roleArn
            self.targetArn = targetArn
        }
    }

}

extension SqlParseException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SqlParseException(message: \(Swift.String(describing: message)))"}
}

extension SqlParseException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SqlParseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The Rule-SQL expression can't be parsed correctly.</p>
public struct SqlParseException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SqlParseExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension SqlParseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes.SqsAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queueUrl
        case roleArn
        case useBase64
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queueUrl = queueUrl {
            try encodeContainer.encode(queueUrl, forKey: .queueUrl)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let useBase64 = useBase64 {
            try encodeContainer.encode(useBase64, forKey: .useBase64)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let queueUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueUrl)
        queueUrl = queueUrlDecoded
        let useBase64Decoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useBase64)
        useBase64 = useBase64Decoded
    }
}

extension IotClientTypes.SqsAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SqsAction(queueUrl: \(Swift.String(describing: queueUrl)), roleArn: \(Swift.String(describing: roleArn)), useBase64: \(Swift.String(describing: useBase64)))"}
}

extension IotClientTypes {
    /// <p>Describes an action to publish data to an Amazon SQS queue.</p>
    public struct SqsAction: Swift.Equatable {
        /// <p>The URL of the Amazon SQS queue.</p>
        public let queueUrl: Swift.String?
        /// <p>The ARN of the IAM role that grants access.</p>
        public let roleArn: Swift.String?
        /// <p>Specifies whether to use Base64 encoding.</p>
        public let useBase64: Swift.Bool?

        public init (
            queueUrl: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            useBase64: Swift.Bool? = nil
        )
        {
            self.queueUrl = queueUrl
            self.roleArn = roleArn
            self.useBase64 = useBase64
        }
    }

}

public struct StartAuditMitigationActionsTaskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartAuditMitigationActionsTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartAuditMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartAuditMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartAuditMitigationActionsTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartAuditMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartAuditMitigationActionsTaskOutputError>
}

extension StartAuditMitigationActionsTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartAuditMitigationActionsTaskInput(auditCheckToActionsMapping: \(Swift.String(describing: auditCheckToActionsMapping)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), target: \(Swift.String(describing: target)), taskId: \(Swift.String(describing: taskId)))"}
}

extension StartAuditMitigationActionsTaskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditCheckToActionsMapping
        case clientRequestToken
        case target
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auditCheckToActionsMapping = auditCheckToActionsMapping {
            var auditCheckToActionsMappingContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .auditCheckToActionsMapping)
            for (dictKey0, auditchecktoactionsmapping0) in auditCheckToActionsMapping {
                try auditCheckToActionsMappingContainer.encode(auditchecktoactionsmapping0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
    }
}

public struct StartAuditMitigationActionsTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartAuditMitigationActionsTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartAuditMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartAuditMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartAuditMitigationActionsTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartAuditMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartAuditMitigationActionsTaskOutputError>
}

public struct StartAuditMitigationActionsTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartAuditMitigationActionsTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartAuditMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartAuditMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartAuditMitigationActionsTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartAuditMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartAuditMitigationActionsTaskOutputError>
}

public struct StartAuditMitigationActionsTaskInput: Swift.Equatable {
    /// <p>For an audit check, specifies which mitigation actions to apply. Those actions must be defined in your AWS account.</p>
    public let auditCheckToActionsMapping: [Swift.String:[Swift.String]]?
    /// <p>Each audit mitigation task must have a unique client request token. If you try to start a new task with the same token as a task that already exists, an exception occurs. If you omit this value, a unique client request token is generated automatically.</p>
    public var clientRequestToken: Swift.String?
    /// <p>Specifies the audit findings to which the mitigation actions are applied. You can apply
    ///       them to a type of audit check, to all findings from an audit, or to a
    ///       specific set of
    ///       findings.</p>
    public let target: IotClientTypes.AuditMitigationActionsTaskTarget?
    /// <p>A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.</p>
    public let taskId: Swift.String?

    public init (
        auditCheckToActionsMapping: [Swift.String:[Swift.String]]? = nil,
        clientRequestToken: Swift.String? = nil,
        target: IotClientTypes.AuditMitigationActionsTaskTarget? = nil,
        taskId: Swift.String? = nil
    )
    {
        self.auditCheckToActionsMapping = auditCheckToActionsMapping
        self.clientRequestToken = clientRequestToken
        self.target = target
        self.taskId = taskId
    }
}

struct StartAuditMitigationActionsTaskInputBody: Swift.Equatable {
    public let target: IotClientTypes.AuditMitigationActionsTaskTarget?
    public let auditCheckToActionsMapping: [Swift.String:[Swift.String]]?
    public let clientRequestToken: Swift.String?
}

extension StartAuditMitigationActionsTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditCheckToActionsMapping
        case clientRequestToken
        case target
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditMitigationActionsTaskTarget.self, forKey: .target)
        target = targetDecoded
        let auditCheckToActionsMappingContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .auditCheckToActionsMapping)
        var auditCheckToActionsMappingDecoded0: [Swift.String:[Swift.String]]? = nil
        if let auditCheckToActionsMappingContainer = auditCheckToActionsMappingContainer {
            auditCheckToActionsMappingDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, mitigationactionnamelist0) in auditCheckToActionsMappingContainer {
                var mitigationactionnamelist0Decoded0: [Swift.String]? = nil
                if let mitigationactionnamelist0 = mitigationactionnamelist0 {
                    mitigationactionnamelist0Decoded0 = [Swift.String]()
                    for string1 in mitigationactionnamelist0 {
                        if let string1 = string1 {
                            mitigationactionnamelist0Decoded0?.append(string1)
                        }
                    }
                }
                auditCheckToActionsMappingDecoded0?[key0] = mitigationactionnamelist0Decoded0
            }
        }
        auditCheckToActionsMapping = auditCheckToActionsMappingDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension StartAuditMitigationActionsTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartAuditMitigationActionsTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaskAlreadyExistsException" : self = .taskAlreadyExistsException(try TaskAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartAuditMitigationActionsTaskOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case taskAlreadyExistsException(TaskAlreadyExistsException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartAuditMitigationActionsTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartAuditMitigationActionsTaskOutputResponse(taskId: \(Swift.String(describing: taskId)))"}
}

extension StartAuditMitigationActionsTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartAuditMitigationActionsTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskId = output.taskId
        } else {
            self.taskId = nil
        }
    }
}

public struct StartAuditMitigationActionsTaskOutputResponse: Swift.Equatable {
    /// <p>The unique identifier for the audit mitigation task. This matches the <code>taskId</code> that you specified in the request.</p>
    public let taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct StartAuditMitigationActionsTaskOutputResponseBody: Swift.Equatable {
    public let taskId: Swift.String?
}

extension StartAuditMitigationActionsTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
    }
}

public struct StartDetectMitigationActionsTaskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartDetectMitigationActionsTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartDetectMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartDetectMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartDetectMitigationActionsTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartDetectMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartDetectMitigationActionsTaskOutputError>
}

extension StartDetectMitigationActionsTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartDetectMitigationActionsTaskInput(actions: \(Swift.String(describing: actions)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), includeOnlyActiveViolations: \(Swift.String(describing: includeOnlyActiveViolations)), includeSuppressedAlerts: \(Swift.String(describing: includeSuppressedAlerts)), target: \(Swift.String(describing: target)), taskId: \(Swift.String(describing: taskId)), violationEventOccurrenceRange: \(Swift.String(describing: violationEventOccurrenceRange)))"}
}

extension StartDetectMitigationActionsTaskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case clientRequestToken
        case includeOnlyActiveViolations
        case includeSuppressedAlerts
        case target
        case violationEventOccurrenceRange
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for detectmitigationactionstoexecutelist0 in actions {
                try actionsContainer.encode(detectmitigationactionstoexecutelist0)
            }
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let includeOnlyActiveViolations = includeOnlyActiveViolations {
            try encodeContainer.encode(includeOnlyActiveViolations, forKey: .includeOnlyActiveViolations)
        }
        if let includeSuppressedAlerts = includeSuppressedAlerts {
            try encodeContainer.encode(includeSuppressedAlerts, forKey: .includeSuppressedAlerts)
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if let violationEventOccurrenceRange = violationEventOccurrenceRange {
            try encodeContainer.encode(violationEventOccurrenceRange, forKey: .violationEventOccurrenceRange)
        }
    }
}

public struct StartDetectMitigationActionsTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartDetectMitigationActionsTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartDetectMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartDetectMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartDetectMitigationActionsTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartDetectMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartDetectMitigationActionsTaskOutputError>
}

public struct StartDetectMitigationActionsTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartDetectMitigationActionsTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartDetectMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartDetectMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartDetectMitigationActionsTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartDetectMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartDetectMitigationActionsTaskOutputError>
}

public struct StartDetectMitigationActionsTaskInput: Swift.Equatable {
    /// <p>
    ///       The actions to be performed when a device has unexpected behavior.
    ///     </p>
    public let actions: [Swift.String]?
    /// <p>
    ///       Each mitigation action task must have a unique client request token. If you try to create a new task with the same token as a task that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
    ///     </p>
    public var clientRequestToken: Swift.String?
    /// <p>
    ///       Specifies to list only active violations.
    ///     </p>
    public let includeOnlyActiveViolations: Swift.Bool?
    /// <p>
    ///       Specifies to include suppressed alerts.
    ///     </p>
    public let includeSuppressedAlerts: Swift.Bool?
    /// <p>
    ///       Specifies the ML Detect findings to which the mitigation actions are applied.
    ///     </p>
    public let target: IotClientTypes.DetectMitigationActionsTaskTarget?
    /// <p>
    ///       The unique identifier of the task.
    ///     </p>
    public let taskId: Swift.String?
    /// <p>
    ///       Specifies the time period of which violation events occurred between.
    ///     </p>
    public let violationEventOccurrenceRange: IotClientTypes.ViolationEventOccurrenceRange?

    public init (
        actions: [Swift.String]? = nil,
        clientRequestToken: Swift.String? = nil,
        includeOnlyActiveViolations: Swift.Bool? = nil,
        includeSuppressedAlerts: Swift.Bool? = nil,
        target: IotClientTypes.DetectMitigationActionsTaskTarget? = nil,
        taskId: Swift.String? = nil,
        violationEventOccurrenceRange: IotClientTypes.ViolationEventOccurrenceRange? = nil
    )
    {
        self.actions = actions
        self.clientRequestToken = clientRequestToken
        self.includeOnlyActiveViolations = includeOnlyActiveViolations
        self.includeSuppressedAlerts = includeSuppressedAlerts
        self.target = target
        self.taskId = taskId
        self.violationEventOccurrenceRange = violationEventOccurrenceRange
    }
}

struct StartDetectMitigationActionsTaskInputBody: Swift.Equatable {
    public let target: IotClientTypes.DetectMitigationActionsTaskTarget?
    public let actions: [Swift.String]?
    public let violationEventOccurrenceRange: IotClientTypes.ViolationEventOccurrenceRange?
    public let includeOnlyActiveViolations: Swift.Bool?
    public let includeSuppressedAlerts: Swift.Bool?
    public let clientRequestToken: Swift.String?
}

extension StartDetectMitigationActionsTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case clientRequestToken
        case includeOnlyActiveViolations
        case includeSuppressedAlerts
        case target
        case violationEventOccurrenceRange
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetDecoded = try containerValues.decodeIfPresent(IotClientTypes.DetectMitigationActionsTaskTarget.self, forKey: .target)
        target = targetDecoded
        let actionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .actions)
        var actionsDecoded0:[Swift.String]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [Swift.String]()
            for string0 in actionsContainer {
                if let string0 = string0 {
                    actionsDecoded0?.append(string0)
                }
            }
        }
        actions = actionsDecoded0
        let violationEventOccurrenceRangeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ViolationEventOccurrenceRange.self, forKey: .violationEventOccurrenceRange)
        violationEventOccurrenceRange = violationEventOccurrenceRangeDecoded
        let includeOnlyActiveViolationsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeOnlyActiveViolations)
        includeOnlyActiveViolations = includeOnlyActiveViolationsDecoded
        let includeSuppressedAlertsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeSuppressedAlerts)
        includeSuppressedAlerts = includeSuppressedAlertsDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension StartDetectMitigationActionsTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartDetectMitigationActionsTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaskAlreadyExistsException" : self = .taskAlreadyExistsException(try TaskAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartDetectMitigationActionsTaskOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case taskAlreadyExistsException(TaskAlreadyExistsException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartDetectMitigationActionsTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartDetectMitigationActionsTaskOutputResponse(taskId: \(Swift.String(describing: taskId)))"}
}

extension StartDetectMitigationActionsTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartDetectMitigationActionsTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskId = output.taskId
        } else {
            self.taskId = nil
        }
    }
}

public struct StartDetectMitigationActionsTaskOutputResponse: Swift.Equatable {
    /// <p>
    ///       The unique identifier of the task.
    ///     </p>
    public let taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct StartDetectMitigationActionsTaskOutputResponseBody: Swift.Equatable {
    public let taskId: Swift.String?
}

extension StartDetectMitigationActionsTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
    }
}

public struct StartOnDemandAuditTaskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartOnDemandAuditTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartOnDemandAuditTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartOnDemandAuditTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartOnDemandAuditTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartOnDemandAuditTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartOnDemandAuditTaskOutputError>
}

extension StartOnDemandAuditTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartOnDemandAuditTaskInput(targetCheckNames: \(Swift.String(describing: targetCheckNames)))"}
}

extension StartOnDemandAuditTaskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetCheckNames
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let targetCheckNames = targetCheckNames {
            var targetCheckNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetCheckNames)
            for targetauditchecknames0 in targetCheckNames {
                try targetCheckNamesContainer.encode(targetauditchecknames0)
            }
        }
    }
}

public struct StartOnDemandAuditTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartOnDemandAuditTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartOnDemandAuditTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartOnDemandAuditTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartOnDemandAuditTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartOnDemandAuditTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartOnDemandAuditTaskOutputError>
}

public struct StartOnDemandAuditTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartOnDemandAuditTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartOnDemandAuditTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartOnDemandAuditTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartOnDemandAuditTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartOnDemandAuditTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartOnDemandAuditTaskOutputError>
}

public struct StartOnDemandAuditTaskInput: Swift.Equatable {
    /// <p>Which checks are performed during the audit. The checks you specify must be enabled
    ///             for your account or an exception occurs. Use <code>DescribeAccountAuditConfiguration</code>
    ///             to see the list of all checks, including those that are enabled or
    ///             <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.</p>
    public let targetCheckNames: [Swift.String]?

    public init (
        targetCheckNames: [Swift.String]? = nil
    )
    {
        self.targetCheckNames = targetCheckNames
    }
}

struct StartOnDemandAuditTaskInputBody: Swift.Equatable {
    public let targetCheckNames: [Swift.String]?
}

extension StartOnDemandAuditTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetCheckNames
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetCheckNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetCheckNames)
        var targetCheckNamesDecoded0:[Swift.String]? = nil
        if let targetCheckNamesContainer = targetCheckNamesContainer {
            targetCheckNamesDecoded0 = [Swift.String]()
            for string0 in targetCheckNamesContainer {
                if let string0 = string0 {
                    targetCheckNamesDecoded0?.append(string0)
                }
            }
        }
        targetCheckNames = targetCheckNamesDecoded0
    }
}

extension StartOnDemandAuditTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartOnDemandAuditTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartOnDemandAuditTaskOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartOnDemandAuditTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartOnDemandAuditTaskOutputResponse(taskId: \(Swift.String(describing: taskId)))"}
}

extension StartOnDemandAuditTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartOnDemandAuditTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskId = output.taskId
        } else {
            self.taskId = nil
        }
    }
}

public struct StartOnDemandAuditTaskOutputResponse: Swift.Equatable {
    /// <p>The ID of the on-demand audit you started.</p>
    public let taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct StartOnDemandAuditTaskOutputResponseBody: Swift.Equatable {
    public let taskId: Swift.String?
}

extension StartOnDemandAuditTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
    }
}

extension IotClientTypes.StartSigningJobParameter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination
        case signingProfileName
        case signingProfileParameter
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let signingProfileName = signingProfileName {
            try encodeContainer.encode(signingProfileName, forKey: .signingProfileName)
        }
        if let signingProfileParameter = signingProfileParameter {
            try encodeContainer.encode(signingProfileParameter, forKey: .signingProfileParameter)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingProfileParameterDecoded = try containerValues.decodeIfPresent(IotClientTypes.SigningProfileParameter.self, forKey: .signingProfileParameter)
        signingProfileParameter = signingProfileParameterDecoded
        let signingProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signingProfileName)
        signingProfileName = signingProfileNameDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(IotClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
    }
}

extension IotClientTypes.StartSigningJobParameter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartSigningJobParameter(destination: \(Swift.String(describing: destination)), signingProfileName: \(Swift.String(describing: signingProfileName)), signingProfileParameter: \(Swift.String(describing: signingProfileParameter)))"}
}

extension IotClientTypes {
    /// <p>Information required to start a signing job.</p>
    public struct StartSigningJobParameter: Swift.Equatable {
        /// <p>The location to write the code-signed file.</p>
        public let destination: IotClientTypes.Destination?
        /// <p>The code-signing profile name.</p>
        public let signingProfileName: Swift.String?
        /// <p>Describes the code-signing profile.</p>
        public let signingProfileParameter: IotClientTypes.SigningProfileParameter?

        public init (
            destination: IotClientTypes.Destination? = nil,
            signingProfileName: Swift.String? = nil,
            signingProfileParameter: IotClientTypes.SigningProfileParameter? = nil
        )
        {
            self.destination = destination
            self.signingProfileName = signingProfileName
            self.signingProfileParameter = signingProfileParameter
        }
    }

}

public struct StartThingRegistrationTaskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartThingRegistrationTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartThingRegistrationTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartThingRegistrationTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartThingRegistrationTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartThingRegistrationTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartThingRegistrationTaskOutputError>
}

extension StartThingRegistrationTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartThingRegistrationTaskInput(inputFileBucket: \(Swift.String(describing: inputFileBucket)), inputFileKey: \(Swift.String(describing: inputFileKey)), roleArn: \(Swift.String(describing: roleArn)), templateBody: \(Swift.String(describing: templateBody)))"}
}

extension StartThingRegistrationTaskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputFileBucket
        case inputFileKey
        case roleArn
        case templateBody
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputFileBucket = inputFileBucket {
            try encodeContainer.encode(inputFileBucket, forKey: .inputFileBucket)
        }
        if let inputFileKey = inputFileKey {
            try encodeContainer.encode(inputFileKey, forKey: .inputFileKey)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let templateBody = templateBody {
            try encodeContainer.encode(templateBody, forKey: .templateBody)
        }
    }
}

public struct StartThingRegistrationTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartThingRegistrationTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartThingRegistrationTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartThingRegistrationTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartThingRegistrationTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartThingRegistrationTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartThingRegistrationTaskOutputError>
}

public struct StartThingRegistrationTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartThingRegistrationTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartThingRegistrationTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartThingRegistrationTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartThingRegistrationTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartThingRegistrationTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartThingRegistrationTaskOutputError>
}

public struct StartThingRegistrationTaskInput: Swift.Equatable {
    /// <p>The S3 bucket that contains the input file.</p>
    public let inputFileBucket: Swift.String?
    /// <p>The name of input file within the S3 bucket. This file contains a newline delimited
    /// 			JSON file. Each line contains the parameter values to provision one device
    /// 			(thing).</p>
    public let inputFileKey: Swift.String?
    /// <p>The IAM role ARN that grants permission the input file.</p>
    public let roleArn: Swift.String?
    /// <p>The provisioning template.</p>
    public let templateBody: Swift.String?

    public init (
        inputFileBucket: Swift.String? = nil,
        inputFileKey: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        templateBody: Swift.String? = nil
    )
    {
        self.inputFileBucket = inputFileBucket
        self.inputFileKey = inputFileKey
        self.roleArn = roleArn
        self.templateBody = templateBody
    }
}

struct StartThingRegistrationTaskInputBody: Swift.Equatable {
    public let templateBody: Swift.String?
    public let inputFileBucket: Swift.String?
    public let inputFileKey: Swift.String?
    public let roleArn: Swift.String?
}

extension StartThingRegistrationTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputFileBucket
        case inputFileKey
        case roleArn
        case templateBody
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let inputFileBucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputFileBucket)
        inputFileBucket = inputFileBucketDecoded
        let inputFileKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputFileKey)
        inputFileKey = inputFileKeyDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension StartThingRegistrationTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartThingRegistrationTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartThingRegistrationTaskOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartThingRegistrationTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartThingRegistrationTaskOutputResponse(taskId: \(Swift.String(describing: taskId)))"}
}

extension StartThingRegistrationTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartThingRegistrationTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskId = output.taskId
        } else {
            self.taskId = nil
        }
    }
}

public struct StartThingRegistrationTaskOutputResponse: Swift.Equatable {
    /// <p>The bulk thing provisioning task ID.</p>
    public let taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct StartThingRegistrationTaskOutputResponseBody: Swift.Equatable {
    public let taskId: Swift.String?
}

extension StartThingRegistrationTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
    }
}

extension IotClientTypes.StatisticalThreshold: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case statistic
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let statistic = statistic {
            try encodeContainer.encode(statistic, forKey: .statistic)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statisticDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statistic)
        statistic = statisticDecoded
    }
}

extension IotClientTypes.StatisticalThreshold: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StatisticalThreshold(statistic: \(Swift.String(describing: statistic)))"}
}

extension IotClientTypes {
    /// <p>A statistical ranking (percentile) that
    ///       indicates a threshold value by which a behavior is determined to be in compliance or in
    ///       violation of the behavior.</p>
    public struct StatisticalThreshold: Swift.Equatable {
        /// <p>The percentile that
        ///       resolves to a threshold value by which compliance with a behavior is determined. Metrics are
        ///       collected over the specified period (<code>durationSeconds</code>) from all reporting devices
        ///       in your account and statistical ranks are calculated. Then, the measurements from a device are
        ///       collected over the same period. If the accumulated measurements from the device fall above or
        ///       below (<code>comparisonOperator</code>) the value associated with the percentile specified,
        ///       then the device is considered to be in compliance with the behavior, otherwise a violation
        ///       occurs.</p>
        public let statistic: Swift.String?

        public init (
            statistic: Swift.String? = nil
        )
        {
            self.statistic = statistic
        }
    }

}

extension IotClientTypes.Statistics: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case average
        case count
        case maximum
        case minimum
        case stdDeviation
        case sum
        case sumOfSquares
        case variance
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if average != 0.0 {
            try encodeContainer.encode(average, forKey: .average)
        }
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if maximum != 0.0 {
            try encodeContainer.encode(maximum, forKey: .maximum)
        }
        if minimum != 0.0 {
            try encodeContainer.encode(minimum, forKey: .minimum)
        }
        if stdDeviation != 0.0 {
            try encodeContainer.encode(stdDeviation, forKey: .stdDeviation)
        }
        if sum != 0.0 {
            try encodeContainer.encode(sum, forKey: .sum)
        }
        if sumOfSquares != 0.0 {
            try encodeContainer.encode(sumOfSquares, forKey: .sumOfSquares)
        }
        if variance != 0.0 {
            try encodeContainer.encode(variance, forKey: .variance)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decode(Swift.Int.self, forKey: .count)
        count = countDecoded
        let averageDecoded = try containerValues.decode(Swift.Double.self, forKey: .average)
        average = averageDecoded
        let sumDecoded = try containerValues.decode(Swift.Double.self, forKey: .sum)
        sum = sumDecoded
        let minimumDecoded = try containerValues.decode(Swift.Double.self, forKey: .minimum)
        minimum = minimumDecoded
        let maximumDecoded = try containerValues.decode(Swift.Double.self, forKey: .maximum)
        maximum = maximumDecoded
        let sumOfSquaresDecoded = try containerValues.decode(Swift.Double.self, forKey: .sumOfSquares)
        sumOfSquares = sumOfSquaresDecoded
        let varianceDecoded = try containerValues.decode(Swift.Double.self, forKey: .variance)
        variance = varianceDecoded
        let stdDeviationDecoded = try containerValues.decode(Swift.Double.self, forKey: .stdDeviation)
        stdDeviation = stdDeviationDecoded
    }
}

extension IotClientTypes.Statistics: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Statistics(average: \(Swift.String(describing: average)), count: \(Swift.String(describing: count)), maximum: \(Swift.String(describing: maximum)), minimum: \(Swift.String(describing: minimum)), stdDeviation: \(Swift.String(describing: stdDeviation)), sum: \(Swift.String(describing: sum)), sumOfSquares: \(Swift.String(describing: sumOfSquares)), variance: \(Swift.String(describing: variance)))"}
}

extension IotClientTypes {
    /// <p>A map of key-value pairs for all supported statistics. Currently, only count is
    ///       supported.</p>
    public struct Statistics: Swift.Equatable {
        /// <p>The average of the aggregated field values.</p>
        public let average: Swift.Double
        /// <p>The count of things that match the query.</p>
        public let count: Swift.Int
        /// <p>The maximum aggregated field value.</p>
        public let maximum: Swift.Double
        /// <p>The minimum aggregated field value.</p>
        public let minimum: Swift.Double
        /// <p>The standard deviation of the aggregated field values.</p>
        public let stdDeviation: Swift.Double
        /// <p>The sum of the aggregated field values.</p>
        public let sum: Swift.Double
        /// <p>The sum of the squares of the aggregated field values.</p>
        public let sumOfSquares: Swift.Double
        /// <p>The variance of the aggregated field values.</p>
        public let variance: Swift.Double

        public init (
            average: Swift.Double = 0.0,
            count: Swift.Int = 0,
            maximum: Swift.Double = 0.0,
            minimum: Swift.Double = 0.0,
            stdDeviation: Swift.Double = 0.0,
            sum: Swift.Double = 0.0,
            sumOfSquares: Swift.Double = 0.0,
            variance: Swift.Double = 0.0
        )
        {
            self.average = average
            self.count = count
            self.maximum = maximum
            self.minimum = minimum
            self.stdDeviation = stdDeviation
            self.sum = sum
            self.sumOfSquares = sumOfSquares
            self.variance = variance
        }
    }

}

extension IotClientTypes {
    public enum Status: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case cancelling
        case completed
        case failed
        case inprogress
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .cancelled,
                .cancelling,
                .completed,
                .failed,
                .inprogress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .cancelling: return "Cancelling"
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Status(rawValue: rawValue) ?? Status.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.StepFunctionsAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionNamePrefix
        case roleArn
        case stateMachineName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionNamePrefix = executionNamePrefix {
            try encodeContainer.encode(executionNamePrefix, forKey: .executionNamePrefix)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stateMachineName = stateMachineName {
            try encodeContainer.encode(stateMachineName, forKey: .stateMachineName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionNamePrefix)
        executionNamePrefix = executionNamePrefixDecoded
        let stateMachineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineName)
        stateMachineName = stateMachineNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IotClientTypes.StepFunctionsAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StepFunctionsAction(executionNamePrefix: \(Swift.String(describing: executionNamePrefix)), roleArn: \(Swift.String(describing: roleArn)), stateMachineName: \(Swift.String(describing: stateMachineName)))"}
}

extension IotClientTypes {
    /// <p>Starts execution of a Step Functions state machine.</p>
    public struct StepFunctionsAction: Swift.Equatable {
        /// <p>(Optional) A name will be given to the state machine execution consisting of this
        ///       prefix followed by a UUID. Step Functions automatically creates a unique name for each state
        ///       machine execution if one is not provided.</p>
        public let executionNamePrefix: Swift.String?
        /// <p>The ARN of the role that grants IoT permission to start execution of a state machine
        ///       ("Action":"states:StartExecution").</p>
        public let roleArn: Swift.String?
        /// <p>The name of the Step Functions state machine whose execution will be started.</p>
        public let stateMachineName: Swift.String?

        public init (
            executionNamePrefix: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            stateMachineName: Swift.String? = nil
        )
        {
            self.executionNamePrefix = executionNamePrefix
            self.roleArn = roleArn
            self.stateMachineName = stateMachineName
        }
    }

}

extension StopThingRegistrationTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopThingRegistrationTaskInput(taskId: \(Swift.String(describing: taskId)))"}
}

extension StopThingRegistrationTaskInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct StopThingRegistrationTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopThingRegistrationTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopThingRegistrationTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopThingRegistrationTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopThingRegistrationTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopThingRegistrationTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopThingRegistrationTaskOutputError>
}

public struct StopThingRegistrationTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopThingRegistrationTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopThingRegistrationTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopThingRegistrationTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopThingRegistrationTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopThingRegistrationTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopThingRegistrationTaskOutputError>
}

public struct StopThingRegistrationTaskInput: Swift.Equatable {
    /// <p>The bulk thing provisioning task ID.</p>
    public let taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct StopThingRegistrationTaskInputBody: Swift.Equatable {
}

extension StopThingRegistrationTaskInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension StopThingRegistrationTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopThingRegistrationTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopThingRegistrationTaskOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopThingRegistrationTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopThingRegistrationTaskOutputResponse()"}
}

extension StopThingRegistrationTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopThingRegistrationTaskOutputResponse: Swift.Equatable {

    public init() {}
}

struct StopThingRegistrationTaskOutputResponseBody: Swift.Equatable {
}

extension StopThingRegistrationTaskOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes.Stream: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileId
        case streamId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fileId = fileId {
            try encodeContainer.encode(fileId, forKey: .fileId)
        }
        if let streamId = streamId {
            try encodeContainer.encode(streamId, forKey: .streamId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamId)
        streamId = streamIdDecoded
        let fileIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fileId)
        fileId = fileIdDecoded
    }
}

extension IotClientTypes.Stream: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Stream(fileId: \(Swift.String(describing: fileId)), streamId: \(Swift.String(describing: streamId)))"}
}

extension IotClientTypes {
    /// <p>Describes a group of files that can be streamed.</p>
    public struct Stream: Swift.Equatable {
        /// <p>The ID of a file associated with a stream.</p>
        public let fileId: Swift.Int?
        /// <p>The stream ID.</p>
        public let streamId: Swift.String?

        public init (
            fileId: Swift.Int? = nil,
            streamId: Swift.String? = nil
        )
        {
            self.fileId = fileId
            self.streamId = streamId
        }
    }

}

extension IotClientTypes.StreamFile: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileId
        case s3Location
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fileId = fileId {
            try encodeContainer.encode(fileId, forKey: .fileId)
        }
        if let s3Location = s3Location {
            try encodeContainer.encode(s3Location, forKey: .s3Location)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fileId)
        fileId = fileIdDecoded
        let s3LocationDecoded = try containerValues.decodeIfPresent(IotClientTypes.S3Location.self, forKey: .s3Location)
        s3Location = s3LocationDecoded
    }
}

extension IotClientTypes.StreamFile: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StreamFile(fileId: \(Swift.String(describing: fileId)), s3Location: \(Swift.String(describing: s3Location)))"}
}

extension IotClientTypes {
    /// <p>Represents a file to stream.</p>
    public struct StreamFile: Swift.Equatable {
        /// <p>The file ID.</p>
        public let fileId: Swift.Int?
        /// <p>The location of the file in S3.</p>
        public let s3Location: IotClientTypes.S3Location?

        public init (
            fileId: Swift.Int? = nil,
            s3Location: IotClientTypes.S3Location? = nil
        )
        {
            self.fileId = fileId
            self.s3Location = s3Location
        }
    }

}

extension IotClientTypes.StreamInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case description
        case files
        case lastUpdatedAt
        case roleArn
        case streamArn
        case streamId
        case streamVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let files = files {
            var filesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .files)
            for streamfiles0 in files {
                try filesContainer.encode(streamfiles0)
            }
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let streamArn = streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
        if let streamId = streamId {
            try encodeContainer.encode(streamId, forKey: .streamId)
        }
        if let streamVersion = streamVersion {
            try encodeContainer.encode(streamVersion, forKey: .streamVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamId)
        streamId = streamIdDecoded
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let streamVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .streamVersion)
        streamVersion = streamVersionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let filesContainer = try containerValues.decodeIfPresent([IotClientTypes.StreamFile?].self, forKey: .files)
        var filesDecoded0:[IotClientTypes.StreamFile]? = nil
        if let filesContainer = filesContainer {
            filesDecoded0 = [IotClientTypes.StreamFile]()
            for structure0 in filesContainer {
                if let structure0 = structure0 {
                    filesDecoded0?.append(structure0)
                }
            }
        }
        files = filesDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IotClientTypes.StreamInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StreamInfo(createdAt: \(Swift.String(describing: createdAt)), description: \(Swift.String(describing: description)), files: \(Swift.String(describing: files)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), roleArn: \(Swift.String(describing: roleArn)), streamArn: \(Swift.String(describing: streamArn)), streamId: \(Swift.String(describing: streamId)), streamVersion: \(Swift.String(describing: streamVersion)))"}
}

extension IotClientTypes {
    /// <p>Information about a stream.</p>
    public struct StreamInfo: Swift.Equatable {
        /// <p>The date when the stream was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The description of the stream.</p>
        public let description: Swift.String?
        /// <p>The files to stream.</p>
        public let files: [IotClientTypes.StreamFile]?
        /// <p>The date when the stream was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>An IAM role AWS IoT assumes to access your S3 files.</p>
        public let roleArn: Swift.String?
        /// <p>The stream ARN.</p>
        public let streamArn: Swift.String?
        /// <p>The stream ID.</p>
        public let streamId: Swift.String?
        /// <p>The stream version.</p>
        public let streamVersion: Swift.Int?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            files: [IotClientTypes.StreamFile]? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            roleArn: Swift.String? = nil,
            streamArn: Swift.String? = nil,
            streamId: Swift.String? = nil,
            streamVersion: Swift.Int? = nil
        )
        {
            self.createdAt = createdAt
            self.description = description
            self.files = files
            self.lastUpdatedAt = lastUpdatedAt
            self.roleArn = roleArn
            self.streamArn = streamArn
            self.streamId = streamId
            self.streamVersion = streamVersion
        }
    }

}

extension IotClientTypes.StreamSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case streamArn
        case streamId
        case streamVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let streamArn = streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
        if let streamId = streamId {
            try encodeContainer.encode(streamId, forKey: .streamId)
        }
        if let streamVersion = streamVersion {
            try encodeContainer.encode(streamVersion, forKey: .streamVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamId)
        streamId = streamIdDecoded
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let streamVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .streamVersion)
        streamVersion = streamVersionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension IotClientTypes.StreamSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StreamSummary(description: \(Swift.String(describing: description)), streamArn: \(Swift.String(describing: streamArn)), streamId: \(Swift.String(describing: streamId)), streamVersion: \(Swift.String(describing: streamVersion)))"}
}

extension IotClientTypes {
    /// <p>A summary of a stream.</p>
    public struct StreamSummary: Swift.Equatable {
        /// <p>A description of the stream.</p>
        public let description: Swift.String?
        /// <p>The stream ARN.</p>
        public let streamArn: Swift.String?
        /// <p>The stream ID.</p>
        public let streamId: Swift.String?
        /// <p>The stream version.</p>
        public let streamVersion: Swift.Int?

        public init (
            description: Swift.String? = nil,
            streamArn: Swift.String? = nil,
            streamId: Swift.String? = nil,
            streamVersion: Swift.Int? = nil
        )
        {
            self.description = description
            self.streamArn = streamArn
            self.streamId = streamId
            self.streamVersion = streamVersion
        }
    }

}

extension IotClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension IotClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension IotClientTypes {
    /// <p>A set of key/value pairs that are used to manage the resource.</p>
    public struct Tag: Swift.Equatable {
        /// <p>The tag's key.</p>
        public let key: Swift.String?
        /// <p>The tag's value.</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// <p>The ARN of the resource.</p>
    public let resourceArn: Swift.String?
    /// <p>The new or modified tags for the resource.</p>
    public let tags: [IotClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [IotClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let tags: [IotClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes {
    public enum TargetSelection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case continuous
        case snapshot
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetSelection] {
            return [
                .continuous,
                .snapshot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .continuous: return "CONTINUOUS"
            case .snapshot: return "SNAPSHOT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetSelection(rawValue: rawValue) ?? TargetSelection.sdkUnknown(rawValue)
        }
    }
}

extension TaskAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskAlreadyExistsException(message: \(Swift.String(describing: message)))"}
}

extension TaskAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TaskAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>
///             This exception occurs if you attempt to start a task with the same task-id as an existing task but with a different clientRequestToken.
///         </p>
public struct TaskAlreadyExistsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TaskAlreadyExistsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TaskAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes.TaskStatistics: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case canceledChecks
        case compliantChecks
        case failedChecks
        case inProgressChecks
        case nonCompliantChecks
        case totalChecks
        case waitingForDataCollectionChecks
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let canceledChecks = canceledChecks {
            try encodeContainer.encode(canceledChecks, forKey: .canceledChecks)
        }
        if let compliantChecks = compliantChecks {
            try encodeContainer.encode(compliantChecks, forKey: .compliantChecks)
        }
        if let failedChecks = failedChecks {
            try encodeContainer.encode(failedChecks, forKey: .failedChecks)
        }
        if let inProgressChecks = inProgressChecks {
            try encodeContainer.encode(inProgressChecks, forKey: .inProgressChecks)
        }
        if let nonCompliantChecks = nonCompliantChecks {
            try encodeContainer.encode(nonCompliantChecks, forKey: .nonCompliantChecks)
        }
        if let totalChecks = totalChecks {
            try encodeContainer.encode(totalChecks, forKey: .totalChecks)
        }
        if let waitingForDataCollectionChecks = waitingForDataCollectionChecks {
            try encodeContainer.encode(waitingForDataCollectionChecks, forKey: .waitingForDataCollectionChecks)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalChecksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalChecks)
        totalChecks = totalChecksDecoded
        let inProgressChecksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inProgressChecks)
        inProgressChecks = inProgressChecksDecoded
        let waitingForDataCollectionChecksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .waitingForDataCollectionChecks)
        waitingForDataCollectionChecks = waitingForDataCollectionChecksDecoded
        let compliantChecksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .compliantChecks)
        compliantChecks = compliantChecksDecoded
        let nonCompliantChecksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nonCompliantChecks)
        nonCompliantChecks = nonCompliantChecksDecoded
        let failedChecksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedChecks)
        failedChecks = failedChecksDecoded
        let canceledChecksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .canceledChecks)
        canceledChecks = canceledChecksDecoded
    }
}

extension IotClientTypes.TaskStatistics: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskStatistics(canceledChecks: \(Swift.String(describing: canceledChecks)), compliantChecks: \(Swift.String(describing: compliantChecks)), failedChecks: \(Swift.String(describing: failedChecks)), inProgressChecks: \(Swift.String(describing: inProgressChecks)), nonCompliantChecks: \(Swift.String(describing: nonCompliantChecks)), totalChecks: \(Swift.String(describing: totalChecks)), waitingForDataCollectionChecks: \(Swift.String(describing: waitingForDataCollectionChecks)))"}
}

extension IotClientTypes {
    /// <p>Statistics for the checks performed during the audit.</p>
    public struct TaskStatistics: Swift.Equatable {
        /// <p>The number of checks that did not run because the audit was canceled.</p>
        public let canceledChecks: Swift.Int?
        /// <p>The number of checks that found compliant resources.</p>
        public let compliantChecks: Swift.Int?
        /// <p>The number of checks.</p>
        public let failedChecks: Swift.Int?
        /// <p>The number of checks in progress.</p>
        public let inProgressChecks: Swift.Int?
        /// <p>The number of checks that found noncompliant resources.</p>
        public let nonCompliantChecks: Swift.Int?
        /// <p>The number of checks in this audit.</p>
        public let totalChecks: Swift.Int?
        /// <p>The number of checks waiting for data collection.</p>
        public let waitingForDataCollectionChecks: Swift.Int?

        public init (
            canceledChecks: Swift.Int? = nil,
            compliantChecks: Swift.Int? = nil,
            failedChecks: Swift.Int? = nil,
            inProgressChecks: Swift.Int? = nil,
            nonCompliantChecks: Swift.Int? = nil,
            totalChecks: Swift.Int? = nil,
            waitingForDataCollectionChecks: Swift.Int? = nil
        )
        {
            self.canceledChecks = canceledChecks
            self.compliantChecks = compliantChecks
            self.failedChecks = failedChecks
            self.inProgressChecks = inProgressChecks
            self.nonCompliantChecks = nonCompliantChecks
            self.totalChecks = totalChecks
            self.waitingForDataCollectionChecks = waitingForDataCollectionChecks
        }
    }

}

extension IotClientTypes.TaskStatisticsForAuditCheck: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case canceledFindingsCount
        case failedFindingsCount
        case skippedFindingsCount
        case succeededFindingsCount
        case totalFindingsCount
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let canceledFindingsCount = canceledFindingsCount {
            try encodeContainer.encode(canceledFindingsCount, forKey: .canceledFindingsCount)
        }
        if let failedFindingsCount = failedFindingsCount {
            try encodeContainer.encode(failedFindingsCount, forKey: .failedFindingsCount)
        }
        if let skippedFindingsCount = skippedFindingsCount {
            try encodeContainer.encode(skippedFindingsCount, forKey: .skippedFindingsCount)
        }
        if let succeededFindingsCount = succeededFindingsCount {
            try encodeContainer.encode(succeededFindingsCount, forKey: .succeededFindingsCount)
        }
        if let totalFindingsCount = totalFindingsCount {
            try encodeContainer.encode(totalFindingsCount, forKey: .totalFindingsCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalFindingsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalFindingsCount)
        totalFindingsCount = totalFindingsCountDecoded
        let failedFindingsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedFindingsCount)
        failedFindingsCount = failedFindingsCountDecoded
        let succeededFindingsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .succeededFindingsCount)
        succeededFindingsCount = succeededFindingsCountDecoded
        let skippedFindingsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .skippedFindingsCount)
        skippedFindingsCount = skippedFindingsCountDecoded
        let canceledFindingsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .canceledFindingsCount)
        canceledFindingsCount = canceledFindingsCountDecoded
    }
}

extension IotClientTypes.TaskStatisticsForAuditCheck: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskStatisticsForAuditCheck(canceledFindingsCount: \(Swift.String(describing: canceledFindingsCount)), failedFindingsCount: \(Swift.String(describing: failedFindingsCount)), skippedFindingsCount: \(Swift.String(describing: skippedFindingsCount)), succeededFindingsCount: \(Swift.String(describing: succeededFindingsCount)), totalFindingsCount: \(Swift.String(describing: totalFindingsCount)))"}
}

extension IotClientTypes {
    /// <p>Provides summary counts of how many tasks for findings are in a particular state. This information is included in the response from DescribeAuditMitigationActionsTask.</p>
    public struct TaskStatisticsForAuditCheck: Swift.Equatable {
        /// <p>The number of findings to which the mitigation action task was canceled when applied.</p>
        public let canceledFindingsCount: Swift.Int?
        /// <p>The number of findings for which at least one of the actions failed when applied.</p>
        public let failedFindingsCount: Swift.Int?
        /// <p>The number of findings skipped because of filter conditions provided in the parameters to the command.</p>
        public let skippedFindingsCount: Swift.Int?
        /// <p>The number of findings for which all mitigation actions succeeded when applied.</p>
        public let succeededFindingsCount: Swift.Int?
        /// <p>The total number of findings to which a task is being applied.</p>
        public let totalFindingsCount: Swift.Int?

        public init (
            canceledFindingsCount: Swift.Int? = nil,
            failedFindingsCount: Swift.Int? = nil,
            skippedFindingsCount: Swift.Int? = nil,
            succeededFindingsCount: Swift.Int? = nil,
            totalFindingsCount: Swift.Int? = nil
        )
        {
            self.canceledFindingsCount = canceledFindingsCount
            self.failedFindingsCount = failedFindingsCount
            self.skippedFindingsCount = skippedFindingsCount
            self.succeededFindingsCount = succeededFindingsCount
            self.totalFindingsCount = totalFindingsCount
        }
    }

}

public struct TestAuthorizationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestAuthorizationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestAuthorizationOutputError>
}

extension TestAuthorizationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestAuthorizationInput(authInfos: \(Swift.String(describing: authInfos)), clientId: \(Swift.String(describing: clientId)), cognitoIdentityPoolId: \(Swift.String(describing: cognitoIdentityPoolId)), policyNamesToAdd: \(Swift.String(describing: policyNamesToAdd)), policyNamesToSkip: \(Swift.String(describing: policyNamesToSkip)), principal: \(Swift.String(describing: principal)))"}
}

extension TestAuthorizationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authInfos
        case cognitoIdentityPoolId
        case policyNamesToAdd
        case policyNamesToSkip
        case principal
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authInfos = authInfos {
            var authInfosContainer = encodeContainer.nestedUnkeyedContainer(forKey: .authInfos)
            for authinfos0 in authInfos {
                try authInfosContainer.encode(authinfos0)
            }
        }
        if let cognitoIdentityPoolId = cognitoIdentityPoolId {
            try encodeContainer.encode(cognitoIdentityPoolId, forKey: .cognitoIdentityPoolId)
        }
        if let policyNamesToAdd = policyNamesToAdd {
            var policyNamesToAddContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policyNamesToAdd)
            for policynames0 in policyNamesToAdd {
                try policyNamesToAddContainer.encode(policynames0)
            }
        }
        if let policyNamesToSkip = policyNamesToSkip {
            var policyNamesToSkipContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policyNamesToSkip)
            for policynames0 in policyNamesToSkip {
                try policyNamesToSkipContainer.encode(policynames0)
            }
        }
        if let principal = principal {
            try encodeContainer.encode(principal, forKey: .principal)
        }
    }
}

public struct TestAuthorizationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestAuthorizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestAuthorizationOutputError>
}

public struct TestAuthorizationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestAuthorizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let clientId = input.operationInput.clientId {
            let clientIdQueryItem = ClientRuntime.URLQueryItem(name: "clientId".urlPercentEncoding(), value: Swift.String(clientId).urlPercentEncoding())
            input.builder.withQueryItem(clientIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestAuthorizationOutputError>
}

public struct TestAuthorizationInput: Swift.Equatable {
    /// <p>A list of authorization info objects. Simulating authorization will create a response
    ///          for each <code>authInfo</code> object in the list.</p>
    public let authInfos: [IotClientTypes.AuthInfo]?
    /// <p>The MQTT client ID.</p>
    public let clientId: Swift.String?
    /// <p>The Cognito identity pool ID.</p>
    public let cognitoIdentityPoolId: Swift.String?
    /// <p>When testing custom authorization, the policies specified here are treated as if they
    ///          are attached to the principal being authorized.</p>
    public let policyNamesToAdd: [Swift.String]?
    /// <p>When testing custom authorization, the policies specified here are treated as if they
    ///          are not attached to the principal being authorized.</p>
    public let policyNamesToSkip: [Swift.String]?
    /// <p>The principal. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).</p>
    public let principal: Swift.String?

    public init (
        authInfos: [IotClientTypes.AuthInfo]? = nil,
        clientId: Swift.String? = nil,
        cognitoIdentityPoolId: Swift.String? = nil,
        policyNamesToAdd: [Swift.String]? = nil,
        policyNamesToSkip: [Swift.String]? = nil,
        principal: Swift.String? = nil
    )
    {
        self.authInfos = authInfos
        self.clientId = clientId
        self.cognitoIdentityPoolId = cognitoIdentityPoolId
        self.policyNamesToAdd = policyNamesToAdd
        self.policyNamesToSkip = policyNamesToSkip
        self.principal = principal
    }
}

struct TestAuthorizationInputBody: Swift.Equatable {
    public let principal: Swift.String?
    public let cognitoIdentityPoolId: Swift.String?
    public let authInfos: [IotClientTypes.AuthInfo]?
    public let policyNamesToAdd: [Swift.String]?
    public let policyNamesToSkip: [Swift.String]?
}

extension TestAuthorizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authInfos
        case cognitoIdentityPoolId
        case policyNamesToAdd
        case policyNamesToSkip
        case principal
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principal)
        principal = principalDecoded
        let cognitoIdentityPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cognitoIdentityPoolId)
        cognitoIdentityPoolId = cognitoIdentityPoolIdDecoded
        let authInfosContainer = try containerValues.decodeIfPresent([IotClientTypes.AuthInfo?].self, forKey: .authInfos)
        var authInfosDecoded0:[IotClientTypes.AuthInfo]? = nil
        if let authInfosContainer = authInfosContainer {
            authInfosDecoded0 = [IotClientTypes.AuthInfo]()
            for structure0 in authInfosContainer {
                if let structure0 = structure0 {
                    authInfosDecoded0?.append(structure0)
                }
            }
        }
        authInfos = authInfosDecoded0
        let policyNamesToAddContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .policyNamesToAdd)
        var policyNamesToAddDecoded0:[Swift.String]? = nil
        if let policyNamesToAddContainer = policyNamesToAddContainer {
            policyNamesToAddDecoded0 = [Swift.String]()
            for string0 in policyNamesToAddContainer {
                if let string0 = string0 {
                    policyNamesToAddDecoded0?.append(string0)
                }
            }
        }
        policyNamesToAdd = policyNamesToAddDecoded0
        let policyNamesToSkipContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .policyNamesToSkip)
        var policyNamesToSkipDecoded0:[Swift.String]? = nil
        if let policyNamesToSkipContainer = policyNamesToSkipContainer {
            policyNamesToSkipDecoded0 = [Swift.String]()
            for string0 in policyNamesToSkipContainer {
                if let string0 = string0 {
                    policyNamesToSkipDecoded0?.append(string0)
                }
            }
        }
        policyNamesToSkip = policyNamesToSkipDecoded0
    }
}

extension TestAuthorizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TestAuthorizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TestAuthorizationOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TestAuthorizationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestAuthorizationOutputResponse(authResults: \(Swift.String(describing: authResults)))"}
}

extension TestAuthorizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TestAuthorizationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authResults = output.authResults
        } else {
            self.authResults = nil
        }
    }
}

public struct TestAuthorizationOutputResponse: Swift.Equatable {
    /// <p>The authentication results.</p>
    public let authResults: [IotClientTypes.AuthResult]?

    public init (
        authResults: [IotClientTypes.AuthResult]? = nil
    )
    {
        self.authResults = authResults
    }
}

struct TestAuthorizationOutputResponseBody: Swift.Equatable {
    public let authResults: [IotClientTypes.AuthResult]?
}

extension TestAuthorizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authResults
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authResultsContainer = try containerValues.decodeIfPresent([IotClientTypes.AuthResult?].self, forKey: .authResults)
        var authResultsDecoded0:[IotClientTypes.AuthResult]? = nil
        if let authResultsContainer = authResultsContainer {
            authResultsDecoded0 = [IotClientTypes.AuthResult]()
            for structure0 in authResultsContainer {
                if let structure0 = structure0 {
                    authResultsDecoded0?.append(structure0)
                }
            }
        }
        authResults = authResultsDecoded0
    }
}

public struct TestInvokeAuthorizerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestInvokeAuthorizerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestInvokeAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestInvokeAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestInvokeAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestInvokeAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestInvokeAuthorizerOutputError>
}

extension TestInvokeAuthorizerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestInvokeAuthorizerInput(authorizerName: \(Swift.String(describing: authorizerName)), httpContext: \(Swift.String(describing: httpContext)), mqttContext: \(Swift.String(describing: mqttContext)), tlsContext: \(Swift.String(describing: tlsContext)), token: \(Swift.String(describing: token)), tokenSignature: \(Swift.String(describing: tokenSignature)))"}
}

extension TestInvokeAuthorizerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpContext
        case mqttContext
        case tlsContext
        case token
        case tokenSignature
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let httpContext = httpContext {
            try encodeContainer.encode(httpContext, forKey: .httpContext)
        }
        if let mqttContext = mqttContext {
            try encodeContainer.encode(mqttContext, forKey: .mqttContext)
        }
        if let tlsContext = tlsContext {
            try encodeContainer.encode(tlsContext, forKey: .tlsContext)
        }
        if let token = token {
            try encodeContainer.encode(token, forKey: .token)
        }
        if let tokenSignature = tokenSignature {
            try encodeContainer.encode(tokenSignature, forKey: .tokenSignature)
        }
    }
}

public struct TestInvokeAuthorizerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestInvokeAuthorizerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestInvokeAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestInvokeAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestInvokeAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestInvokeAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestInvokeAuthorizerOutputError>
}

public struct TestInvokeAuthorizerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestInvokeAuthorizerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestInvokeAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestInvokeAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestInvokeAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestInvokeAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestInvokeAuthorizerOutputError>
}

public struct TestInvokeAuthorizerInput: Swift.Equatable {
    /// <p>The custom authorizer name.</p>
    public let authorizerName: Swift.String?
    /// <p>Specifies a test HTTP authorization request.</p>
    public let httpContext: IotClientTypes.HttpContext?
    /// <p>Specifies a test MQTT authorization request.</p>
    public let mqttContext: IotClientTypes.MqttContext?
    /// <p>Specifies a test TLS authorization request.</p>
    public let tlsContext: IotClientTypes.TlsContext?
    /// <p>The token returned by your custom authentication service.</p>
    public let token: Swift.String?
    /// <p>The signature made with the token and your custom authentication service's private
    ///          key. This value must be Base-64-encoded.</p>
    public let tokenSignature: Swift.String?

    public init (
        authorizerName: Swift.String? = nil,
        httpContext: IotClientTypes.HttpContext? = nil,
        mqttContext: IotClientTypes.MqttContext? = nil,
        tlsContext: IotClientTypes.TlsContext? = nil,
        token: Swift.String? = nil,
        tokenSignature: Swift.String? = nil
    )
    {
        self.authorizerName = authorizerName
        self.httpContext = httpContext
        self.mqttContext = mqttContext
        self.tlsContext = tlsContext
        self.token = token
        self.tokenSignature = tokenSignature
    }
}

struct TestInvokeAuthorizerInputBody: Swift.Equatable {
    public let token: Swift.String?
    public let tokenSignature: Swift.String?
    public let httpContext: IotClientTypes.HttpContext?
    public let mqttContext: IotClientTypes.MqttContext?
    public let tlsContext: IotClientTypes.TlsContext?
}

extension TestInvokeAuthorizerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpContext
        case mqttContext
        case tlsContext
        case token
        case tokenSignature
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .token)
        token = tokenDecoded
        let tokenSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenSignature)
        tokenSignature = tokenSignatureDecoded
        let httpContextDecoded = try containerValues.decodeIfPresent(IotClientTypes.HttpContext.self, forKey: .httpContext)
        httpContext = httpContextDecoded
        let mqttContextDecoded = try containerValues.decodeIfPresent(IotClientTypes.MqttContext.self, forKey: .mqttContext)
        mqttContext = mqttContextDecoded
        let tlsContextDecoded = try containerValues.decodeIfPresent(IotClientTypes.TlsContext.self, forKey: .tlsContext)
        tlsContext = tlsContextDecoded
    }
}

extension TestInvokeAuthorizerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TestInvokeAuthorizerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidResponseException" : self = .invalidResponseException(try InvalidResponseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TestInvokeAuthorizerOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case invalidResponseException(InvalidResponseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TestInvokeAuthorizerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestInvokeAuthorizerOutputResponse(disconnectAfterInSeconds: \(Swift.String(describing: disconnectAfterInSeconds)), isAuthenticated: \(Swift.String(describing: isAuthenticated)), policyDocuments: \(Swift.String(describing: policyDocuments)), principalId: \(Swift.String(describing: principalId)), refreshAfterInSeconds: \(Swift.String(describing: refreshAfterInSeconds)))"}
}

extension TestInvokeAuthorizerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TestInvokeAuthorizerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.disconnectAfterInSeconds = output.disconnectAfterInSeconds
            self.isAuthenticated = output.isAuthenticated
            self.policyDocuments = output.policyDocuments
            self.principalId = output.principalId
            self.refreshAfterInSeconds = output.refreshAfterInSeconds
        } else {
            self.disconnectAfterInSeconds = nil
            self.isAuthenticated = nil
            self.policyDocuments = nil
            self.principalId = nil
            self.refreshAfterInSeconds = nil
        }
    }
}

public struct TestInvokeAuthorizerOutputResponse: Swift.Equatable {
    /// <p>The number of seconds after which the connection is terminated.</p>
    public let disconnectAfterInSeconds: Swift.Int?
    /// <p>True if the token is authenticated, otherwise false.</p>
    public let isAuthenticated: Swift.Bool?
    /// <p>IAM policy documents.</p>
    public let policyDocuments: [Swift.String]?
    /// <p>The principal ID.</p>
    public let principalId: Swift.String?
    /// <p>The number of seconds after which the temporary credentials are refreshed.</p>
    public let refreshAfterInSeconds: Swift.Int?

    public init (
        disconnectAfterInSeconds: Swift.Int? = nil,
        isAuthenticated: Swift.Bool? = nil,
        policyDocuments: [Swift.String]? = nil,
        principalId: Swift.String? = nil,
        refreshAfterInSeconds: Swift.Int? = nil
    )
    {
        self.disconnectAfterInSeconds = disconnectAfterInSeconds
        self.isAuthenticated = isAuthenticated
        self.policyDocuments = policyDocuments
        self.principalId = principalId
        self.refreshAfterInSeconds = refreshAfterInSeconds
    }
}

struct TestInvokeAuthorizerOutputResponseBody: Swift.Equatable {
    public let isAuthenticated: Swift.Bool?
    public let principalId: Swift.String?
    public let policyDocuments: [Swift.String]?
    public let refreshAfterInSeconds: Swift.Int?
    public let disconnectAfterInSeconds: Swift.Int?
}

extension TestInvokeAuthorizerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disconnectAfterInSeconds
        case isAuthenticated
        case policyDocuments
        case principalId
        case refreshAfterInSeconds
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isAuthenticatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isAuthenticated)
        isAuthenticated = isAuthenticatedDecoded
        let principalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principalId)
        principalId = principalIdDecoded
        let policyDocumentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .policyDocuments)
        var policyDocumentsDecoded0:[Swift.String]? = nil
        if let policyDocumentsContainer = policyDocumentsContainer {
            policyDocumentsDecoded0 = [Swift.String]()
            for string0 in policyDocumentsContainer {
                if let string0 = string0 {
                    policyDocumentsDecoded0?.append(string0)
                }
            }
        }
        policyDocuments = policyDocumentsDecoded0
        let refreshAfterInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .refreshAfterInSeconds)
        refreshAfterInSeconds = refreshAfterInSecondsDecoded
        let disconnectAfterInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .disconnectAfterInSeconds)
        disconnectAfterInSeconds = disconnectAfterInSecondsDecoded
    }
}

extension IotClientTypes.ThingAttribute: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case thingArn
        case thingName
        case thingTypeName
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributes0) in attributes {
                try attributesContainer.encode(attributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let thingArn = thingArn {
            try encodeContainer.encode(thingArn, forKey: .thingArn)
        }
        if let thingName = thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
        if let thingTypeName = thingTypeName {
            try encodeContainer.encode(thingTypeName, forKey: .thingTypeName)
        }
        if version != 0 {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let thingTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeName)
        thingTypeName = thingTypeNameDecoded
        let thingArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingArn)
        thingArn = thingArnDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension IotClientTypes.ThingAttribute: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThingAttribute(attributes: \(Swift.String(describing: attributes)), thingArn: \(Swift.String(describing: thingArn)), thingName: \(Swift.String(describing: thingName)), thingTypeName: \(Swift.String(describing: thingTypeName)), version: \(Swift.String(describing: version)))"}
}

extension IotClientTypes {
    /// <p>The properties of the thing, including thing name, thing type name, and a list of thing
    /// 			attributes.</p>
    public struct ThingAttribute: Swift.Equatable {
        /// <p>A list of thing attributes which are name-value pairs.</p>
        public let attributes: [Swift.String:Swift.String]?
        /// <p>The thing ARN.</p>
        public let thingArn: Swift.String?
        /// <p>The name of the thing.</p>
        public let thingName: Swift.String?
        /// <p>The name of the thing type, if the thing has been associated with a type.</p>
        public let thingTypeName: Swift.String?
        /// <p>The version of the thing record in the registry.</p>
        public let version: Swift.Int

        public init (
            attributes: [Swift.String:Swift.String]? = nil,
            thingArn: Swift.String? = nil,
            thingName: Swift.String? = nil,
            thingTypeName: Swift.String? = nil,
            version: Swift.Int = 0
        )
        {
            self.attributes = attributes
            self.thingArn = thingArn
            self.thingName = thingName
            self.thingTypeName = thingTypeName
            self.version = version
        }
    }

}

extension IotClientTypes.ThingConnectivity: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connected
        case timestamp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if connected != false {
            try encodeContainer.encode(connected, forKey: .connected)
        }
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .connected)
        connected = connectedDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}

extension IotClientTypes.ThingConnectivity: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThingConnectivity(connected: \(Swift.String(describing: connected)), timestamp: \(Swift.String(describing: timestamp)))"}
}

extension IotClientTypes {
    /// <p>The connectivity status of the thing.</p>
    public struct ThingConnectivity: Swift.Equatable {
        /// <p>True if the thing is connected to the AWS IoT service; false if it is not
        ///       connected.</p>
        public let connected: Swift.Bool
        /// <p>The epoch time (in milliseconds) when the thing last connected or disconnected. If the
        ///       thing has been disconnected for more than a few weeks, the time value might be missing.</p>
        public let timestamp: Swift.Int?

        public init (
            connected: Swift.Bool = false,
            timestamp: Swift.Int? = nil
        )
        {
            self.connected = connected
            self.timestamp = timestamp
        }
    }

}

extension IotClientTypes {
    public enum ThingConnectivityIndexingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case off
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [ThingConnectivityIndexingMode] {
            return [
                .off,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .off: return "OFF"
            case .status: return "STATUS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ThingConnectivityIndexingMode(rawValue: rawValue) ?? ThingConnectivityIndexingMode.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.ThingDocument: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case connectivity
        case shadow
        case thingGroupNames
        case thingId
        case thingName
        case thingTypeName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributes0) in attributes {
                try attributesContainer.encode(attributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let connectivity = connectivity {
            try encodeContainer.encode(connectivity, forKey: .connectivity)
        }
        if let shadow = shadow {
            try encodeContainer.encode(shadow, forKey: .shadow)
        }
        if let thingGroupNames = thingGroupNames {
            var thingGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .thingGroupNames)
            for thinggroupnamelist0 in thingGroupNames {
                try thingGroupNamesContainer.encode(thinggroupnamelist0)
            }
        }
        if let thingId = thingId {
            try encodeContainer.encode(thingId, forKey: .thingId)
        }
        if let thingName = thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
        if let thingTypeName = thingTypeName {
            try encodeContainer.encode(thingTypeName, forKey: .thingTypeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let thingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingId)
        thingId = thingIdDecoded
        let thingTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeName)
        thingTypeName = thingTypeNameDecoded
        let thingGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .thingGroupNames)
        var thingGroupNamesDecoded0:[Swift.String]? = nil
        if let thingGroupNamesContainer = thingGroupNamesContainer {
            thingGroupNamesDecoded0 = [Swift.String]()
            for string0 in thingGroupNamesContainer {
                if let string0 = string0 {
                    thingGroupNamesDecoded0?.append(string0)
                }
            }
        }
        thingGroupNames = thingGroupNamesDecoded0
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let shadowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shadow)
        shadow = shadowDecoded
        let connectivityDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingConnectivity.self, forKey: .connectivity)
        connectivity = connectivityDecoded
    }
}

extension IotClientTypes.ThingDocument: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThingDocument(attributes: \(Swift.String(describing: attributes)), connectivity: \(Swift.String(describing: connectivity)), shadow: \(Swift.String(describing: shadow)), thingGroupNames: \(Swift.String(describing: thingGroupNames)), thingId: \(Swift.String(describing: thingId)), thingName: \(Swift.String(describing: thingName)), thingTypeName: \(Swift.String(describing: thingTypeName)))"}
}

extension IotClientTypes {
    /// <p>The thing search index document.</p>
    public struct ThingDocument: Swift.Equatable {
        /// <p>The attributes.</p>
        public let attributes: [Swift.String:Swift.String]?
        /// <p>Indicates whether the thing is connected to the AWS IoT service.</p>
        public let connectivity: IotClientTypes.ThingConnectivity?
        /// <p>The shadow.</p>
        public let shadow: Swift.String?
        /// <p>Thing group names.</p>
        public let thingGroupNames: [Swift.String]?
        /// <p>The thing ID.</p>
        public let thingId: Swift.String?
        /// <p>The thing name.</p>
        public let thingName: Swift.String?
        /// <p>The thing type name.</p>
        public let thingTypeName: Swift.String?

        public init (
            attributes: [Swift.String:Swift.String]? = nil,
            connectivity: IotClientTypes.ThingConnectivity? = nil,
            shadow: Swift.String? = nil,
            thingGroupNames: [Swift.String]? = nil,
            thingId: Swift.String? = nil,
            thingName: Swift.String? = nil,
            thingTypeName: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.connectivity = connectivity
            self.shadow = shadow
            self.thingGroupNames = thingGroupNames
            self.thingId = thingId
            self.thingName = thingName
            self.thingTypeName = thingTypeName
        }
    }

}

extension IotClientTypes.ThingGroupDocument: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case parentGroupNames
        case thingGroupDescription
        case thingGroupId
        case thingGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributes0) in attributes {
                try attributesContainer.encode(attributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let parentGroupNames = parentGroupNames {
            var parentGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parentGroupNames)
            for thinggroupnamelist0 in parentGroupNames {
                try parentGroupNamesContainer.encode(thinggroupnamelist0)
            }
        }
        if let thingGroupDescription = thingGroupDescription {
            try encodeContainer.encode(thingGroupDescription, forKey: .thingGroupDescription)
        }
        if let thingGroupId = thingGroupId {
            try encodeContainer.encode(thingGroupId, forKey: .thingGroupId)
        }
        if let thingGroupName = thingGroupName {
            try encodeContainer.encode(thingGroupName, forKey: .thingGroupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupName)
        thingGroupName = thingGroupNameDecoded
        let thingGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupId)
        thingGroupId = thingGroupIdDecoded
        let thingGroupDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupDescription)
        thingGroupDescription = thingGroupDescriptionDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let parentGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .parentGroupNames)
        var parentGroupNamesDecoded0:[Swift.String]? = nil
        if let parentGroupNamesContainer = parentGroupNamesContainer {
            parentGroupNamesDecoded0 = [Swift.String]()
            for string0 in parentGroupNamesContainer {
                if let string0 = string0 {
                    parentGroupNamesDecoded0?.append(string0)
                }
            }
        }
        parentGroupNames = parentGroupNamesDecoded0
    }
}

extension IotClientTypes.ThingGroupDocument: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThingGroupDocument(attributes: \(Swift.String(describing: attributes)), parentGroupNames: \(Swift.String(describing: parentGroupNames)), thingGroupDescription: \(Swift.String(describing: thingGroupDescription)), thingGroupId: \(Swift.String(describing: thingGroupId)), thingGroupName: \(Swift.String(describing: thingGroupName)))"}
}

extension IotClientTypes {
    /// <p>The thing group search index document.</p>
    public struct ThingGroupDocument: Swift.Equatable {
        /// <p>The thing group attributes.</p>
        public let attributes: [Swift.String:Swift.String]?
        /// <p>Parent group names.</p>
        public let parentGroupNames: [Swift.String]?
        /// <p>The thing group description.</p>
        public let thingGroupDescription: Swift.String?
        /// <p>The thing group ID.</p>
        public let thingGroupId: Swift.String?
        /// <p>The thing group name.</p>
        public let thingGroupName: Swift.String?

        public init (
            attributes: [Swift.String:Swift.String]? = nil,
            parentGroupNames: [Swift.String]? = nil,
            thingGroupDescription: Swift.String? = nil,
            thingGroupId: Swift.String? = nil,
            thingGroupName: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.parentGroupNames = parentGroupNames
            self.thingGroupDescription = thingGroupDescription
            self.thingGroupId = thingGroupId
            self.thingGroupName = thingGroupName
        }
    }

}

extension IotClientTypes.ThingGroupIndexingConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customFields
        case managedFields
        case thingGroupIndexingMode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customFields = customFields {
            var customFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customFields)
            for fields0 in customFields {
                try customFieldsContainer.encode(fields0)
            }
        }
        if let managedFields = managedFields {
            var managedFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .managedFields)
            for fields0 in managedFields {
                try managedFieldsContainer.encode(fields0)
            }
        }
        if let thingGroupIndexingMode = thingGroupIndexingMode {
            try encodeContainer.encode(thingGroupIndexingMode.rawValue, forKey: .thingGroupIndexingMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupIndexingModeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingGroupIndexingMode.self, forKey: .thingGroupIndexingMode)
        thingGroupIndexingMode = thingGroupIndexingModeDecoded
        let managedFieldsContainer = try containerValues.decodeIfPresent([IotClientTypes.Field?].self, forKey: .managedFields)
        var managedFieldsDecoded0:[IotClientTypes.Field]? = nil
        if let managedFieldsContainer = managedFieldsContainer {
            managedFieldsDecoded0 = [IotClientTypes.Field]()
            for structure0 in managedFieldsContainer {
                if let structure0 = structure0 {
                    managedFieldsDecoded0?.append(structure0)
                }
            }
        }
        managedFields = managedFieldsDecoded0
        let customFieldsContainer = try containerValues.decodeIfPresent([IotClientTypes.Field?].self, forKey: .customFields)
        var customFieldsDecoded0:[IotClientTypes.Field]? = nil
        if let customFieldsContainer = customFieldsContainer {
            customFieldsDecoded0 = [IotClientTypes.Field]()
            for structure0 in customFieldsContainer {
                if let structure0 = structure0 {
                    customFieldsDecoded0?.append(structure0)
                }
            }
        }
        customFields = customFieldsDecoded0
    }
}

extension IotClientTypes.ThingGroupIndexingConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThingGroupIndexingConfiguration(customFields: \(Swift.String(describing: customFields)), managedFields: \(Swift.String(describing: managedFields)), thingGroupIndexingMode: \(Swift.String(describing: thingGroupIndexingMode)))"}
}

extension IotClientTypes {
    /// <p>Thing group indexing configuration.</p>
    public struct ThingGroupIndexingConfiguration: Swift.Equatable {
        /// <p>A list of thing group fields to index. This list cannot contain any managed fields. Use
        ///       the GetIndexingConfiguration API to get a list of managed fields.</p>
        ///          <p>Contains custom field names and their data type.</p>
        public let customFields: [IotClientTypes.Field]?
        /// <p>Contains fields that are indexed and whose types are already known by the Fleet Indexing
        ///       service.</p>
        public let managedFields: [IotClientTypes.Field]?
        /// <p>Thing group indexing mode.</p>
        public let thingGroupIndexingMode: IotClientTypes.ThingGroupIndexingMode?

        public init (
            customFields: [IotClientTypes.Field]? = nil,
            managedFields: [IotClientTypes.Field]? = nil,
            thingGroupIndexingMode: IotClientTypes.ThingGroupIndexingMode? = nil
        )
        {
            self.customFields = customFields
            self.managedFields = managedFields
            self.thingGroupIndexingMode = thingGroupIndexingMode
        }
    }

}

extension IotClientTypes {
    public enum ThingGroupIndexingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case off
        case on
        case sdkUnknown(Swift.String)

        public static var allCases: [ThingGroupIndexingMode] {
            return [
                .off,
                .on,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .off: return "OFF"
            case .on: return "ON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ThingGroupIndexingMode(rawValue: rawValue) ?? ThingGroupIndexingMode.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.ThingGroupMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case parentGroupName
        case rootToParentThingGroups
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let parentGroupName = parentGroupName {
            try encodeContainer.encode(parentGroupName, forKey: .parentGroupName)
        }
        if let rootToParentThingGroups = rootToParentThingGroups {
            var rootToParentThingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rootToParentThingGroups)
            for thinggroupnameandarnlist0 in rootToParentThingGroups {
                try rootToParentThingGroupsContainer.encode(thinggroupnameandarnlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentGroupName)
        parentGroupName = parentGroupNameDecoded
        let rootToParentThingGroupsContainer = try containerValues.decodeIfPresent([IotClientTypes.GroupNameAndArn?].self, forKey: .rootToParentThingGroups)
        var rootToParentThingGroupsDecoded0:[IotClientTypes.GroupNameAndArn]? = nil
        if let rootToParentThingGroupsContainer = rootToParentThingGroupsContainer {
            rootToParentThingGroupsDecoded0 = [IotClientTypes.GroupNameAndArn]()
            for structure0 in rootToParentThingGroupsContainer {
                if let structure0 = structure0 {
                    rootToParentThingGroupsDecoded0?.append(structure0)
                }
            }
        }
        rootToParentThingGroups = rootToParentThingGroupsDecoded0
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension IotClientTypes.ThingGroupMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThingGroupMetadata(creationDate: \(Swift.String(describing: creationDate)), parentGroupName: \(Swift.String(describing: parentGroupName)), rootToParentThingGroups: \(Swift.String(describing: rootToParentThingGroups)))"}
}

extension IotClientTypes {
    /// <p>Thing group metadata.</p>
    public struct ThingGroupMetadata: Swift.Equatable {
        /// <p>The UNIX timestamp of when the thing group was created.</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>The parent thing group name.</p>
        public let parentGroupName: Swift.String?
        /// <p>The root parent thing group.</p>
        public let rootToParentThingGroups: [IotClientTypes.GroupNameAndArn]?

        public init (
            creationDate: ClientRuntime.Date? = nil,
            parentGroupName: Swift.String? = nil,
            rootToParentThingGroups: [IotClientTypes.GroupNameAndArn]? = nil
        )
        {
            self.creationDate = creationDate
            self.parentGroupName = parentGroupName
            self.rootToParentThingGroups = rootToParentThingGroups
        }
    }

}

extension IotClientTypes.ThingGroupProperties: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributePayload
        case thingGroupDescription
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributePayload = attributePayload {
            try encodeContainer.encode(attributePayload, forKey: .attributePayload)
        }
        if let thingGroupDescription = thingGroupDescription {
            try encodeContainer.encode(thingGroupDescription, forKey: .thingGroupDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingGroupDescription)
        thingGroupDescription = thingGroupDescriptionDecoded
        let attributePayloadDecoded = try containerValues.decodeIfPresent(IotClientTypes.AttributePayload.self, forKey: .attributePayload)
        attributePayload = attributePayloadDecoded
    }
}

extension IotClientTypes.ThingGroupProperties: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThingGroupProperties(attributePayload: \(Swift.String(describing: attributePayload)), thingGroupDescription: \(Swift.String(describing: thingGroupDescription)))"}
}

extension IotClientTypes {
    /// <p>Thing group properties.</p>
    public struct ThingGroupProperties: Swift.Equatable {
        /// <p>The thing group attributes in JSON format.</p>
        public let attributePayload: IotClientTypes.AttributePayload?
        /// <p>The thing group description.</p>
        public let thingGroupDescription: Swift.String?

        public init (
            attributePayload: IotClientTypes.AttributePayload? = nil,
            thingGroupDescription: Swift.String? = nil
        )
        {
            self.attributePayload = attributePayload
            self.thingGroupDescription = thingGroupDescription
        }
    }

}

extension IotClientTypes.ThingIndexingConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customFields
        case managedFields
        case thingConnectivityIndexingMode
        case thingIndexingMode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customFields = customFields {
            var customFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customFields)
            for fields0 in customFields {
                try customFieldsContainer.encode(fields0)
            }
        }
        if let managedFields = managedFields {
            var managedFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .managedFields)
            for fields0 in managedFields {
                try managedFieldsContainer.encode(fields0)
            }
        }
        if let thingConnectivityIndexingMode = thingConnectivityIndexingMode {
            try encodeContainer.encode(thingConnectivityIndexingMode.rawValue, forKey: .thingConnectivityIndexingMode)
        }
        if let thingIndexingMode = thingIndexingMode {
            try encodeContainer.encode(thingIndexingMode.rawValue, forKey: .thingIndexingMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingIndexingModeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingIndexingMode.self, forKey: .thingIndexingMode)
        thingIndexingMode = thingIndexingModeDecoded
        let thingConnectivityIndexingModeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingConnectivityIndexingMode.self, forKey: .thingConnectivityIndexingMode)
        thingConnectivityIndexingMode = thingConnectivityIndexingModeDecoded
        let managedFieldsContainer = try containerValues.decodeIfPresent([IotClientTypes.Field?].self, forKey: .managedFields)
        var managedFieldsDecoded0:[IotClientTypes.Field]? = nil
        if let managedFieldsContainer = managedFieldsContainer {
            managedFieldsDecoded0 = [IotClientTypes.Field]()
            for structure0 in managedFieldsContainer {
                if let structure0 = structure0 {
                    managedFieldsDecoded0?.append(structure0)
                }
            }
        }
        managedFields = managedFieldsDecoded0
        let customFieldsContainer = try containerValues.decodeIfPresent([IotClientTypes.Field?].self, forKey: .customFields)
        var customFieldsDecoded0:[IotClientTypes.Field]? = nil
        if let customFieldsContainer = customFieldsContainer {
            customFieldsDecoded0 = [IotClientTypes.Field]()
            for structure0 in customFieldsContainer {
                if let structure0 = structure0 {
                    customFieldsDecoded0?.append(structure0)
                }
            }
        }
        customFields = customFieldsDecoded0
    }
}

extension IotClientTypes.ThingIndexingConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThingIndexingConfiguration(customFields: \(Swift.String(describing: customFields)), managedFields: \(Swift.String(describing: managedFields)), thingConnectivityIndexingMode: \(Swift.String(describing: thingConnectivityIndexingMode)), thingIndexingMode: \(Swift.String(describing: thingIndexingMode)))"}
}

extension IotClientTypes {
    /// <p>The thing indexing configuration. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html">Managing
    ///         Thing Indexing</a>.</p>
    public struct ThingIndexingConfiguration: Swift.Equatable {
        /// <p>Contains custom field names and their data type.</p>
        public let customFields: [IotClientTypes.Field]?
        /// <p>Contains fields that are indexed and whose types are already known by the Fleet Indexing
        ///       service.</p>
        public let managedFields: [IotClientTypes.Field]?
        /// <p>Thing connectivity indexing mode. Valid values are: </p>
        ///          <ul>
        ///             <li>
        ///                <p>STATUS – Your thing index contains connectivity status. To enable thing
        ///           connectivity indexing, thingIndexMode must not be set to OFF.</p>
        ///             </li>
        ///             <li>
        ///                <p>OFF - Thing connectivity status indexing is disabled.</p>
        ///             </li>
        ///          </ul>
        public let thingConnectivityIndexingMode: IotClientTypes.ThingConnectivityIndexingMode?
        /// <p>Thing indexing mode. Valid values are:</p>
        ///          <ul>
        ///             <li>
        ///                <p>REGISTRY – Your thing index contains registry data only.</p>
        ///             </li>
        ///             <li>
        ///                <p>REGISTRY_AND_SHADOW - Your thing index contains registry and shadow data.</p>
        ///             </li>
        ///             <li>
        ///                <p>OFF - Thing indexing is disabled.</p>
        ///             </li>
        ///          </ul>
        public let thingIndexingMode: IotClientTypes.ThingIndexingMode?

        public init (
            customFields: [IotClientTypes.Field]? = nil,
            managedFields: [IotClientTypes.Field]? = nil,
            thingConnectivityIndexingMode: IotClientTypes.ThingConnectivityIndexingMode? = nil,
            thingIndexingMode: IotClientTypes.ThingIndexingMode? = nil
        )
        {
            self.customFields = customFields
            self.managedFields = managedFields
            self.thingConnectivityIndexingMode = thingConnectivityIndexingMode
            self.thingIndexingMode = thingIndexingMode
        }
    }

}

extension IotClientTypes {
    public enum ThingIndexingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case off
        case registry
        case registryAndShadow
        case sdkUnknown(Swift.String)

        public static var allCases: [ThingIndexingMode] {
            return [
                .off,
                .registry,
                .registryAndShadow,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .off: return "OFF"
            case .registry: return "REGISTRY"
            case .registryAndShadow: return "REGISTRY_AND_SHADOW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ThingIndexingMode(rawValue: rawValue) ?? ThingIndexingMode.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.ThingTypeDefinition: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case thingTypeArn
        case thingTypeMetadata
        case thingTypeName
        case thingTypeProperties
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let thingTypeArn = thingTypeArn {
            try encodeContainer.encode(thingTypeArn, forKey: .thingTypeArn)
        }
        if let thingTypeMetadata = thingTypeMetadata {
            try encodeContainer.encode(thingTypeMetadata, forKey: .thingTypeMetadata)
        }
        if let thingTypeName = thingTypeName {
            try encodeContainer.encode(thingTypeName, forKey: .thingTypeName)
        }
        if let thingTypeProperties = thingTypeProperties {
            try encodeContainer.encode(thingTypeProperties, forKey: .thingTypeProperties)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeName)
        thingTypeName = thingTypeNameDecoded
        let thingTypeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeArn)
        thingTypeArn = thingTypeArnDecoded
        let thingTypePropertiesDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingTypeProperties.self, forKey: .thingTypeProperties)
        thingTypeProperties = thingTypePropertiesDecoded
        let thingTypeMetadataDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingTypeMetadata.self, forKey: .thingTypeMetadata)
        thingTypeMetadata = thingTypeMetadataDecoded
    }
}

extension IotClientTypes.ThingTypeDefinition: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThingTypeDefinition(thingTypeArn: \(Swift.String(describing: thingTypeArn)), thingTypeMetadata: \(Swift.String(describing: thingTypeMetadata)), thingTypeName: \(Swift.String(describing: thingTypeName)), thingTypeProperties: \(Swift.String(describing: thingTypeProperties)))"}
}

extension IotClientTypes {
    /// <p>The definition of the thing type, including thing type name and description.</p>
    public struct ThingTypeDefinition: Swift.Equatable {
        /// <p>The thing type ARN.</p>
        public let thingTypeArn: Swift.String?
        /// <p>The ThingTypeMetadata contains additional information about the thing type including: creation date and
        /// 			time, a value indicating whether the thing type is deprecated, and a date and time when it was
        /// 			deprecated.</p>
        public let thingTypeMetadata: IotClientTypes.ThingTypeMetadata?
        /// <p>The name of the thing type.</p>
        public let thingTypeName: Swift.String?
        /// <p>The ThingTypeProperties for the thing type.</p>
        public let thingTypeProperties: IotClientTypes.ThingTypeProperties?

        public init (
            thingTypeArn: Swift.String? = nil,
            thingTypeMetadata: IotClientTypes.ThingTypeMetadata? = nil,
            thingTypeName: Swift.String? = nil,
            thingTypeProperties: IotClientTypes.ThingTypeProperties? = nil
        )
        {
            self.thingTypeArn = thingTypeArn
            self.thingTypeMetadata = thingTypeMetadata
            self.thingTypeName = thingTypeName
            self.thingTypeProperties = thingTypeProperties
        }
    }

}

extension IotClientTypes.ThingTypeMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case deprecated
        case deprecationDate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if deprecated != false {
            try encodeContainer.encode(deprecated, forKey: .deprecated)
        }
        if let deprecationDate = deprecationDate {
            try encodeContainer.encode(deprecationDate.timeIntervalSince1970, forKey: .deprecationDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deprecatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .deprecated)
        deprecated = deprecatedDecoded
        let deprecationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .deprecationDate)
        deprecationDate = deprecationDateDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension IotClientTypes.ThingTypeMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThingTypeMetadata(creationDate: \(Swift.String(describing: creationDate)), deprecated: \(Swift.String(describing: deprecated)), deprecationDate: \(Swift.String(describing: deprecationDate)))"}
}

extension IotClientTypes {
    /// <p>The ThingTypeMetadata contains additional information about the thing type including: creation date and
    /// 			time, a value indicating whether the thing type is deprecated, and a date and time when time was
    /// 			deprecated.</p>
    public struct ThingTypeMetadata: Swift.Equatable {
        /// <p>The date and time when the thing type was created.</p>
        public let creationDate: ClientRuntime.Date?
        /// <p>Whether the thing type is deprecated. If <b>true</b>, no new things could be
        /// 			associated with this type.</p>
        public let deprecated: Swift.Bool
        /// <p>The date and time when the thing type was deprecated.</p>
        public let deprecationDate: ClientRuntime.Date?

        public init (
            creationDate: ClientRuntime.Date? = nil,
            deprecated: Swift.Bool = false,
            deprecationDate: ClientRuntime.Date? = nil
        )
        {
            self.creationDate = creationDate
            self.deprecated = deprecated
            self.deprecationDate = deprecationDate
        }
    }

}

extension IotClientTypes.ThingTypeProperties: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case searchableAttributes
        case thingTypeDescription
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let searchableAttributes = searchableAttributes {
            var searchableAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .searchableAttributes)
            for searchableattributes0 in searchableAttributes {
                try searchableAttributesContainer.encode(searchableattributes0)
            }
        }
        if let thingTypeDescription = thingTypeDescription {
            try encodeContainer.encode(thingTypeDescription, forKey: .thingTypeDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingTypeDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeDescription)
        thingTypeDescription = thingTypeDescriptionDecoded
        let searchableAttributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .searchableAttributes)
        var searchableAttributesDecoded0:[Swift.String]? = nil
        if let searchableAttributesContainer = searchableAttributesContainer {
            searchableAttributesDecoded0 = [Swift.String]()
            for string0 in searchableAttributesContainer {
                if let string0 = string0 {
                    searchableAttributesDecoded0?.append(string0)
                }
            }
        }
        searchableAttributes = searchableAttributesDecoded0
    }
}

extension IotClientTypes.ThingTypeProperties: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThingTypeProperties(searchableAttributes: \(Swift.String(describing: searchableAttributes)), thingTypeDescription: \(Swift.String(describing: thingTypeDescription)))"}
}

extension IotClientTypes {
    /// <p>The ThingTypeProperties contains information about the thing type including: a thing type description,
    /// 			and a list of searchable thing attribute names.</p>
    public struct ThingTypeProperties: Swift.Equatable {
        /// <p>A list of searchable thing attribute names.</p>
        public let searchableAttributes: [Swift.String]?
        /// <p>The description of the thing type.</p>
        public let thingTypeDescription: Swift.String?

        public init (
            searchableAttributes: [Swift.String]? = nil,
            thingTypeDescription: Swift.String? = nil
        )
        {
            self.searchableAttributes = searchableAttributes
            self.thingTypeDescription = thingTypeDescription
        }
    }

}

extension ThrottlingException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThrottlingException(message: \(Swift.String(describing: message)))"}
}

extension ThrottlingException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The rate exceeds the limit.</p>
public struct ThrottlingException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes.TimeoutConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inProgressTimeoutInMinutes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inProgressTimeoutInMinutes = inProgressTimeoutInMinutes {
            try encodeContainer.encode(inProgressTimeoutInMinutes, forKey: .inProgressTimeoutInMinutes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inProgressTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inProgressTimeoutInMinutes)
        inProgressTimeoutInMinutes = inProgressTimeoutInMinutesDecoded
    }
}

extension IotClientTypes.TimeoutConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TimeoutConfig(inProgressTimeoutInMinutes: \(Swift.String(describing: inProgressTimeoutInMinutes)))"}
}

extension IotClientTypes {
    /// <p>Specifies the amount of time each device has to finish its execution of the job.  A timer
    ///            is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job
    ///            execution status is not set to another terminal state before the timer expires, it will
    ///            be automatically set to <code>TIMED_OUT</code>.</p>
    public struct TimeoutConfig: Swift.Equatable {
        /// <p>Specifies the amount of time, in minutes, this device has to finish execution of this job.
        ///            The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes). The
        ///            in progress timer can't be updated and will apply to all job executions for the job. Whenever a job
        ///            execution remains in the IN_PROGRESS status for longer than this interval, the job execution will fail
        ///            and switch to the terminal <code>TIMED_OUT</code> status.</p>
        public let inProgressTimeoutInMinutes: Swift.Int?

        public init (
            inProgressTimeoutInMinutes: Swift.Int? = nil
        )
        {
            self.inProgressTimeoutInMinutes = inProgressTimeoutInMinutes
        }
    }

}

extension IotClientTypes.TimestreamAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseName
        case dimensions
        case roleArn
        case tableName
        case timestamp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for timestreamdimensionlist0 in dimensions {
                try dimensionsContainer.encode(timestreamdimensionlist0)
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([IotClientTypes.TimestreamDimension?].self, forKey: .dimensions)
        var dimensionsDecoded0:[IotClientTypes.TimestreamDimension]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [IotClientTypes.TimestreamDimension]()
            for structure0 in dimensionsContainer {
                if let structure0 = structure0 {
                    dimensionsDecoded0?.append(structure0)
                }
            }
        }
        dimensions = dimensionsDecoded0
        let timestampDecoded = try containerValues.decodeIfPresent(IotClientTypes.TimestreamTimestamp.self, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}

extension IotClientTypes.TimestreamAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TimestreamAction(databaseName: \(Swift.String(describing: databaseName)), dimensions: \(Swift.String(describing: dimensions)), roleArn: \(Swift.String(describing: roleArn)), tableName: \(Swift.String(describing: tableName)), timestamp: \(Swift.String(describing: timestamp)))"}
}

extension IotClientTypes {
    /// <p>The Timestream rule action writes attributes (measures) from an MQTT message
    ///          into an Amazon Timestream table. For more information, see the <a href="https://docs.aws.amazon.com/iot/latest/developerguide/timestream-rule-action.html">Timestream</a>
    ///          topic rule action documentation.</p>
    public struct TimestreamAction: Swift.Equatable {
        /// <p>The name of an Amazon Timestream database.</p>
        public let databaseName: Swift.String?
        /// <p>Metadata attributes of the time series that are written in each measure record.</p>
        public let dimensions: [IotClientTypes.TimestreamDimension]?
        /// <p>The ARN of the role that grants permission to write to the
        ///          Amazon Timestream database table.</p>
        public let roleArn: Swift.String?
        /// <p>The name of the database table into which to write the measure records.</p>
        public let tableName: Swift.String?
        /// <p>Specifies an application-defined value to replace the default value assigned to the
        ///          Timestream record's timestamp in the <code>time</code> column.</p>
        ///          <p>You can use this property to specify the value and the precision of the Timestream
        ///          record's timestamp. You can specify a value from the message payload or a value computed by
        ///          a substitution template.</p>
        ///          <p>If omitted, the topic rule action assigns the timestamp, in milliseconds, at the time it
        ///          processed the rule. </p>
        public let timestamp: IotClientTypes.TimestreamTimestamp?

        public init (
            databaseName: Swift.String? = nil,
            dimensions: [IotClientTypes.TimestreamDimension]? = nil,
            roleArn: Swift.String? = nil,
            tableName: Swift.String? = nil,
            timestamp: IotClientTypes.TimestreamTimestamp? = nil
        )
        {
            self.databaseName = databaseName
            self.dimensions = dimensions
            self.roleArn = roleArn
            self.tableName = tableName
            self.timestamp = timestamp
        }
    }

}

extension IotClientTypes.TimestreamDimension: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension IotClientTypes.TimestreamDimension: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TimestreamDimension(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension IotClientTypes {
    /// <p>Metadata attributes of the time series that are written in each measure record.</p>
    public struct TimestreamDimension: Swift.Equatable {
        /// <p>The metadata dimension name. This is the name of the column in the
        ///          Amazon Timestream database table record.</p>
        ///          <p>Dimensions cannot be named: <code>measure_name</code>,
        ///          <code>measure_value</code>, or <code>time</code>.
        ///          These  names are reserved. Dimension names cannot start
        ///          with <code>ts_</code> or <code>measure_value</code> and
        ///          they cannot contain the colon (<code>:</code>)
        ///          character.</p>
        public let name: Swift.String?
        /// <p>The value to write in this column of the database record.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension IotClientTypes.TimestreamTimestamp: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case unit
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let unit = unit {
            try encodeContainer.encode(unit, forKey: .unit)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension IotClientTypes.TimestreamTimestamp: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TimestreamTimestamp(unit: \(Swift.String(describing: unit)), value: \(Swift.String(describing: value)))"}
}

extension IotClientTypes {
    /// <p>Describes how to interpret an application-defined timestamp value from an MQTT message
    ///          payload and the precision of that value.</p>
    public struct TimestreamTimestamp: Swift.Equatable {
        /// <p>The precision of the timestamp value that results from the expression
        ///          described in <code>value</code>.</p>
        ///          <p>Valid values:  <code>SECONDS</code> | <code>MILLISECONDS</code> |
        ///             <code>MICROSECONDS</code> | <code>NANOSECONDS</code>. The default is
        ///             <code>MILLISECONDS</code>.</p>
        public let unit: Swift.String?
        /// <p>An expression that returns a long epoch time value.</p>
        public let value: Swift.String?

        public init (
            unit: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.unit = unit
            self.value = value
        }
    }

}

extension IotClientTypes.TlsContext: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serverName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let serverName = serverName {
            try encodeContainer.encode(serverName, forKey: .serverName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverName)
        serverName = serverNameDecoded
    }
}

extension IotClientTypes.TlsContext: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TlsContext(serverName: \(Swift.String(describing: serverName)))"}
}

extension IotClientTypes {
    /// <p>Specifies the TLS context to use for the test authorizer request.</p>
    public struct TlsContext: Swift.Equatable {
        /// <p>The value of the <code>serverName</code> key in a TLS authorization request.</p>
        public let serverName: Swift.String?

        public init (
            serverName: Swift.String? = nil
        )
        {
            self.serverName = serverName
        }
    }

}

extension IotClientTypes.TopicRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case awsIotSqlVersion
        case createdAt
        case description
        case errorAction
        case ruleDisabled
        case ruleName
        case sql
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionlist0 in actions {
                try actionsContainer.encode(actionlist0)
            }
        }
        if let awsIotSqlVersion = awsIotSqlVersion {
            try encodeContainer.encode(awsIotSqlVersion, forKey: .awsIotSqlVersion)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let errorAction = errorAction {
            try encodeContainer.encode(errorAction, forKey: .errorAction)
        }
        if let ruleDisabled = ruleDisabled {
            try encodeContainer.encode(ruleDisabled, forKey: .ruleDisabled)
        }
        if let ruleName = ruleName {
            try encodeContainer.encode(ruleName, forKey: .ruleName)
        }
        if let sql = sql {
            try encodeContainer.encode(sql, forKey: .sql)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
        let sqlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sql)
        sql = sqlDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let actionsContainer = try containerValues.decodeIfPresent([IotClientTypes.Action?].self, forKey: .actions)
        var actionsDecoded0:[IotClientTypes.Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [IotClientTypes.Action]()
            for structure0 in actionsContainer {
                if let structure0 = structure0 {
                    actionsDecoded0?.append(structure0)
                }
            }
        }
        actions = actionsDecoded0
        let ruleDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ruleDisabled)
        ruleDisabled = ruleDisabledDecoded
        let awsIotSqlVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsIotSqlVersion)
        awsIotSqlVersion = awsIotSqlVersionDecoded
        let errorActionDecoded = try containerValues.decodeIfPresent(IotClientTypes.Action.self, forKey: .errorAction)
        errorAction = errorActionDecoded
    }
}

extension IotClientTypes.TopicRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TopicRule(actions: \(Swift.String(describing: actions)), awsIotSqlVersion: \(Swift.String(describing: awsIotSqlVersion)), createdAt: \(Swift.String(describing: createdAt)), description: \(Swift.String(describing: description)), errorAction: \(Swift.String(describing: errorAction)), ruleDisabled: \(Swift.String(describing: ruleDisabled)), ruleName: \(Swift.String(describing: ruleName)), sql: \(Swift.String(describing: sql)))"}
}

extension IotClientTypes {
    /// <p>Describes a rule.</p>
    public struct TopicRule: Swift.Equatable {
        /// <p>The actions associated with the rule.</p>
        public let actions: [IotClientTypes.Action]?
        /// <p>The version of the SQL rules engine to use when evaluating the rule.</p>
        public let awsIotSqlVersion: Swift.String?
        /// <p>The date and time the rule was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The description of the rule.</p>
        public let description: Swift.String?
        /// <p>The action to perform when an error occurs.</p>
        public let errorAction: IotClientTypes.Action?
        /// <p>Specifies whether the rule is disabled.</p>
        public let ruleDisabled: Swift.Bool?
        /// <p>The name of the rule.</p>
        public let ruleName: Swift.String?
        /// <p>The SQL statement used to query the topic. When using a SQL query with multiple
        ///          lines, be sure to escape the newline characters.</p>
        public let sql: Swift.String?

        public init (
            actions: [IotClientTypes.Action]? = nil,
            awsIotSqlVersion: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            errorAction: IotClientTypes.Action? = nil,
            ruleDisabled: Swift.Bool? = nil,
            ruleName: Swift.String? = nil,
            sql: Swift.String? = nil
        )
        {
            self.actions = actions
            self.awsIotSqlVersion = awsIotSqlVersion
            self.createdAt = createdAt
            self.description = description
            self.errorAction = errorAction
            self.ruleDisabled = ruleDisabled
            self.ruleName = ruleName
            self.sql = sql
        }
    }

}

extension IotClientTypes.TopicRuleDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case httpUrlProperties
        case lastUpdatedAt
        case status
        case statusReason
        case vpcProperties
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let httpUrlProperties = httpUrlProperties {
            try encodeContainer.encode(httpUrlProperties, forKey: .httpUrlProperties)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let vpcProperties = vpcProperties {
            try encodeContainer.encode(vpcProperties, forKey: .vpcProperties)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.TopicRuleDestinationStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let httpUrlPropertiesDecoded = try containerValues.decodeIfPresent(IotClientTypes.HttpUrlDestinationProperties.self, forKey: .httpUrlProperties)
        httpUrlProperties = httpUrlPropertiesDecoded
        let vpcPropertiesDecoded = try containerValues.decodeIfPresent(IotClientTypes.VpcDestinationProperties.self, forKey: .vpcProperties)
        vpcProperties = vpcPropertiesDecoded
    }
}

extension IotClientTypes.TopicRuleDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TopicRuleDestination(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), httpUrlProperties: \(Swift.String(describing: httpUrlProperties)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)), vpcProperties: \(Swift.String(describing: vpcProperties)))"}
}

extension IotClientTypes {
    /// <p>A topic rule destination.</p>
    public struct TopicRuleDestination: Swift.Equatable {
        /// <p>The topic rule destination URL.</p>
        public let arn: Swift.String?
        /// <p>The date and time when the topic rule destination was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>Properties of the HTTP URL.</p>
        public let httpUrlProperties: IotClientTypes.HttpUrlDestinationProperties?
        /// <p>The date and time when the topic rule destination was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The status of the topic rule destination. Valid values are:</p>
        ///          <dl>
        ///             <dt>IN_PROGRESS</dt>
        ///             <dd>
        ///                <p>A topic rule destination was created but has not been confirmed. You can set
        ///                      <code>status</code> to <code>IN_PROGRESS</code> by calling
        ///                      <code>UpdateTopicRuleDestination</code>. Calling
        ///                      <code>UpdateTopicRuleDestination</code> causes a new confirmation challenge to
        ///                   be sent to your confirmation endpoint.</p>
        ///             </dd>
        ///             <dt>ENABLED</dt>
        ///             <dd>
        ///                <p>Confirmation was completed, and traffic to this destination is allowed. You can
        ///                   set <code>status</code> to <code>DISABLED</code> by calling
        ///                      <code>UpdateTopicRuleDestination</code>.</p>
        ///             </dd>
        ///             <dt>DISABLED</dt>
        ///             <dd>
        ///                <p>Confirmation was completed, and traffic to this destination is not allowed. You
        ///                   can set <code>status</code> to <code>ENABLED</code> by calling
        ///                      <code>UpdateTopicRuleDestination</code>.</p>
        ///             </dd>
        ///             <dt>ERROR</dt>
        ///             <dd>
        ///                <p>Confirmation could not be completed, for example if the confirmation timed out.
        ///                   You can call <code>GetTopicRuleDestination</code> for details about the error. You
        ///                   can set <code>status</code> to <code>IN_PROGRESS</code> by calling
        ///                      <code>UpdateTopicRuleDestination</code>. Calling
        ///                      <code>UpdateTopicRuleDestination</code> causes a new confirmation challenge to
        ///                   be sent to your confirmation endpoint.</p>
        ///             </dd>
        ///          </dl>
        public let status: IotClientTypes.TopicRuleDestinationStatus?
        /// <p>Additional details or reason why the topic rule destination is in the current
        ///          status.</p>
        public let statusReason: Swift.String?
        /// <p>Properties of the virtual private cloud (VPC) connection.</p>
        public let vpcProperties: IotClientTypes.VpcDestinationProperties?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            httpUrlProperties: IotClientTypes.HttpUrlDestinationProperties? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            status: IotClientTypes.TopicRuleDestinationStatus? = nil,
            statusReason: Swift.String? = nil,
            vpcProperties: IotClientTypes.VpcDestinationProperties? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.httpUrlProperties = httpUrlProperties
            self.lastUpdatedAt = lastUpdatedAt
            self.status = status
            self.statusReason = statusReason
            self.vpcProperties = vpcProperties
        }
    }

}

extension IotClientTypes.TopicRuleDestinationConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpUrlConfiguration
        case vpcConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let httpUrlConfiguration = httpUrlConfiguration {
            try encodeContainer.encode(httpUrlConfiguration, forKey: .httpUrlConfiguration)
        }
        if let vpcConfiguration = vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let httpUrlConfigurationDecoded = try containerValues.decodeIfPresent(IotClientTypes.HttpUrlDestinationConfiguration.self, forKey: .httpUrlConfiguration)
        httpUrlConfiguration = httpUrlConfigurationDecoded
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(IotClientTypes.VpcDestinationConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
    }
}

extension IotClientTypes.TopicRuleDestinationConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TopicRuleDestinationConfiguration(httpUrlConfiguration: \(Swift.String(describing: httpUrlConfiguration)), vpcConfiguration: \(Swift.String(describing: vpcConfiguration)))"}
}

extension IotClientTypes {
    /// <p>Configuration of the topic rule destination.</p>
    public struct TopicRuleDestinationConfiguration: Swift.Equatable {
        /// <p>Configuration of the HTTP URL.</p>
        public let httpUrlConfiguration: IotClientTypes.HttpUrlDestinationConfiguration?
        /// <p>Configuration of the virtual private cloud (VPC) connection.</p>
        public let vpcConfiguration: IotClientTypes.VpcDestinationConfiguration?

        public init (
            httpUrlConfiguration: IotClientTypes.HttpUrlDestinationConfiguration? = nil,
            vpcConfiguration: IotClientTypes.VpcDestinationConfiguration? = nil
        )
        {
            self.httpUrlConfiguration = httpUrlConfiguration
            self.vpcConfiguration = vpcConfiguration
        }
    }

}

extension IotClientTypes {
    public enum TopicRuleDestinationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleting
        case disabled
        case enabled
        case error
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [TopicRuleDestinationStatus] {
            return [
                .deleting,
                .disabled,
                .enabled,
                .error,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "DELETING"
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case .error: return "ERROR"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TopicRuleDestinationStatus(rawValue: rawValue) ?? TopicRuleDestinationStatus.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.TopicRuleDestinationSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case httpUrlSummary
        case lastUpdatedAt
        case status
        case statusReason
        case vpcDestinationSummary
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let httpUrlSummary = httpUrlSummary {
            try encodeContainer.encode(httpUrlSummary, forKey: .httpUrlSummary)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let vpcDestinationSummary = vpcDestinationSummary {
            try encodeContainer.encode(vpcDestinationSummary, forKey: .vpcDestinationSummary)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.TopicRuleDestinationStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let httpUrlSummaryDecoded = try containerValues.decodeIfPresent(IotClientTypes.HttpUrlDestinationSummary.self, forKey: .httpUrlSummary)
        httpUrlSummary = httpUrlSummaryDecoded
        let vpcDestinationSummaryDecoded = try containerValues.decodeIfPresent(IotClientTypes.VpcDestinationSummary.self, forKey: .vpcDestinationSummary)
        vpcDestinationSummary = vpcDestinationSummaryDecoded
    }
}

extension IotClientTypes.TopicRuleDestinationSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TopicRuleDestinationSummary(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), httpUrlSummary: \(Swift.String(describing: httpUrlSummary)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)), vpcDestinationSummary: \(Swift.String(describing: vpcDestinationSummary)))"}
}

extension IotClientTypes {
    /// <p>Information about the topic rule destination.</p>
    public struct TopicRuleDestinationSummary: Swift.Equatable {
        /// <p>The topic rule destination ARN.</p>
        public let arn: Swift.String?
        /// <p>The date and time when the topic rule destination was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>Information about the HTTP URL.</p>
        public let httpUrlSummary: IotClientTypes.HttpUrlDestinationSummary?
        /// <p>The date and time when the topic rule destination was last updated.</p>
        public let lastUpdatedAt: ClientRuntime.Date?
        /// <p>The status of the topic rule destination. Valid values are:</p>
        ///          <dl>
        ///             <dt>IN_PROGRESS</dt>
        ///             <dd>
        ///                <p>A topic rule destination was created but has not been confirmed. You can set
        ///                      <code>status</code> to <code>IN_PROGRESS</code> by calling
        ///                      <code>UpdateTopicRuleDestination</code>. Calling
        ///                      <code>UpdateTopicRuleDestination</code> causes a new confirmation challenge to
        ///                   be sent to your confirmation endpoint.</p>
        ///             </dd>
        ///             <dt>ENABLED</dt>
        ///             <dd>
        ///                <p>Confirmation was completed, and traffic to this destination is allowed. You can
        ///                   set <code>status</code> to <code>DISABLED</code> by calling
        ///                      <code>UpdateTopicRuleDestination</code>.</p>
        ///             </dd>
        ///             <dt>DISABLED</dt>
        ///             <dd>
        ///                <p>Confirmation was completed, and traffic to this destination is not allowed. You
        ///                   can set <code>status</code> to <code>ENABLED</code> by calling
        ///                      <code>UpdateTopicRuleDestination</code>.</p>
        ///             </dd>
        ///             <dt>ERROR</dt>
        ///             <dd>
        ///                <p>Confirmation could not be completed, for example if the confirmation timed out.
        ///                   You can call <code>GetTopicRuleDestination</code> for details about the error. You
        ///                   can set <code>status</code> to <code>IN_PROGRESS</code> by calling
        ///                      <code>UpdateTopicRuleDestination</code>. Calling
        ///                      <code>UpdateTopicRuleDestination</code> causes a new confirmation challenge to
        ///                   be sent to your confirmation endpoint.</p>
        ///             </dd>
        ///          </dl>
        public let status: IotClientTypes.TopicRuleDestinationStatus?
        /// <p>The reason the topic rule destination is in the current status.</p>
        public let statusReason: Swift.String?
        /// <p>Information about the virtual private cloud (VPC) connection.</p>
        public let vpcDestinationSummary: IotClientTypes.VpcDestinationSummary?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            httpUrlSummary: IotClientTypes.HttpUrlDestinationSummary? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            status: IotClientTypes.TopicRuleDestinationStatus? = nil,
            statusReason: Swift.String? = nil,
            vpcDestinationSummary: IotClientTypes.VpcDestinationSummary? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.httpUrlSummary = httpUrlSummary
            self.lastUpdatedAt = lastUpdatedAt
            self.status = status
            self.statusReason = statusReason
            self.vpcDestinationSummary = vpcDestinationSummary
        }
    }

}

extension IotClientTypes.TopicRuleListItem: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case ruleArn
        case ruleDisabled
        case ruleName
        case topicPattern
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let ruleArn = ruleArn {
            try encodeContainer.encode(ruleArn, forKey: .ruleArn)
        }
        if let ruleDisabled = ruleDisabled {
            try encodeContainer.encode(ruleDisabled, forKey: .ruleDisabled)
        }
        if let ruleName = ruleName {
            try encodeContainer.encode(ruleName, forKey: .ruleName)
        }
        if let topicPattern = topicPattern {
            try encodeContainer.encode(topicPattern, forKey: .topicPattern)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleArn)
        ruleArn = ruleArnDecoded
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
        let topicPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicPattern)
        topicPattern = topicPatternDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let ruleDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ruleDisabled)
        ruleDisabled = ruleDisabledDecoded
    }
}

extension IotClientTypes.TopicRuleListItem: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TopicRuleListItem(createdAt: \(Swift.String(describing: createdAt)), ruleArn: \(Swift.String(describing: ruleArn)), ruleDisabled: \(Swift.String(describing: ruleDisabled)), ruleName: \(Swift.String(describing: ruleName)), topicPattern: \(Swift.String(describing: topicPattern)))"}
}

extension IotClientTypes {
    /// <p>Describes a rule.</p>
    public struct TopicRuleListItem: Swift.Equatable {
        /// <p>The date and time the rule was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The rule ARN.</p>
        public let ruleArn: Swift.String?
        /// <p>Specifies whether the rule is disabled.</p>
        public let ruleDisabled: Swift.Bool?
        /// <p>The name of the rule.</p>
        public let ruleName: Swift.String?
        /// <p>The pattern for the topic names that apply.</p>
        public let topicPattern: Swift.String?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            ruleArn: Swift.String? = nil,
            ruleDisabled: Swift.Bool? = nil,
            ruleName: Swift.String? = nil,
            topicPattern: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.ruleArn = ruleArn
            self.ruleDisabled = ruleDisabled
            self.ruleName = ruleName
            self.topicPattern = topicPattern
        }
    }

}

extension IotClientTypes.TopicRulePayload: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case awsIotSqlVersion
        case description
        case errorAction
        case ruleDisabled
        case sql
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionlist0 in actions {
                try actionsContainer.encode(actionlist0)
            }
        }
        if let awsIotSqlVersion = awsIotSqlVersion {
            try encodeContainer.encode(awsIotSqlVersion, forKey: .awsIotSqlVersion)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let errorAction = errorAction {
            try encodeContainer.encode(errorAction, forKey: .errorAction)
        }
        if let ruleDisabled = ruleDisabled {
            try encodeContainer.encode(ruleDisabled, forKey: .ruleDisabled)
        }
        if let sql = sql {
            try encodeContainer.encode(sql, forKey: .sql)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sql)
        sql = sqlDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let actionsContainer = try containerValues.decodeIfPresent([IotClientTypes.Action?].self, forKey: .actions)
        var actionsDecoded0:[IotClientTypes.Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [IotClientTypes.Action]()
            for structure0 in actionsContainer {
                if let structure0 = structure0 {
                    actionsDecoded0?.append(structure0)
                }
            }
        }
        actions = actionsDecoded0
        let ruleDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ruleDisabled)
        ruleDisabled = ruleDisabledDecoded
        let awsIotSqlVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsIotSqlVersion)
        awsIotSqlVersion = awsIotSqlVersionDecoded
        let errorActionDecoded = try containerValues.decodeIfPresent(IotClientTypes.Action.self, forKey: .errorAction)
        errorAction = errorActionDecoded
    }
}

extension IotClientTypes.TopicRulePayload: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TopicRulePayload(actions: \(Swift.String(describing: actions)), awsIotSqlVersion: \(Swift.String(describing: awsIotSqlVersion)), description: \(Swift.String(describing: description)), errorAction: \(Swift.String(describing: errorAction)), ruleDisabled: \(Swift.String(describing: ruleDisabled)), sql: \(Swift.String(describing: sql)))"}
}

extension IotClientTypes {
    /// <p>Describes a rule.</p>
    public struct TopicRulePayload: Swift.Equatable {
        /// <p>The actions associated with the rule.</p>
        public let actions: [IotClientTypes.Action]?
        /// <p>The version of the SQL rules engine to use when evaluating the rule.</p>
        public let awsIotSqlVersion: Swift.String?
        /// <p>The description of the rule.</p>
        public let description: Swift.String?
        /// <p>The action to take when an error occurs.</p>
        public let errorAction: IotClientTypes.Action?
        /// <p>Specifies whether the rule is disabled.</p>
        public let ruleDisabled: Swift.Bool?
        /// <p>The SQL statement used to query the topic. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-sql-reference.html">AWS IoT SQL
        ///             Reference</a> in the <i>AWS IoT Developer Guide</i>.</p>
        public let sql: Swift.String?

        public init (
            actions: [IotClientTypes.Action]? = nil,
            awsIotSqlVersion: Swift.String? = nil,
            description: Swift.String? = nil,
            errorAction: IotClientTypes.Action? = nil,
            ruleDisabled: Swift.Bool? = nil,
            sql: Swift.String? = nil
        )
        {
            self.actions = actions
            self.awsIotSqlVersion = awsIotSqlVersion
            self.description = description
            self.errorAction = errorAction
            self.ruleDisabled = ruleDisabled
            self.sql = sql
        }
    }

}

extension TransferAlreadyCompletedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TransferAlreadyCompletedException(message: \(Swift.String(describing: message)))"}
}

extension TransferAlreadyCompletedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TransferAlreadyCompletedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You can't revert the certificate transfer because the transfer is already
///          complete.</p>
public struct TransferAlreadyCompletedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TransferAlreadyCompletedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TransferAlreadyCompletedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct TransferCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TransferCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TransferCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TransferCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TransferCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TransferCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TransferCertificateOutputError>
}

extension TransferCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TransferCertificateInput(certificateId: \(Swift.String(describing: certificateId)), targetAwsAccount: \(Swift.String(describing: targetAwsAccount)), transferMessage: \(Swift.String(describing: transferMessage)))"}
}

extension TransferCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transferMessage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let transferMessage = transferMessage {
            try encodeContainer.encode(transferMessage, forKey: .transferMessage)
        }
    }
}

public struct TransferCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TransferCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TransferCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TransferCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TransferCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TransferCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TransferCertificateOutputError>
}

public struct TransferCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TransferCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TransferCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TransferCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let targetAwsAccount = input.operationInput.targetAwsAccount {
            let targetAwsAccountQueryItem = ClientRuntime.URLQueryItem(name: "targetAwsAccount".urlPercentEncoding(), value: Swift.String(targetAwsAccount).urlPercentEncoding())
            input.builder.withQueryItem(targetAwsAccountQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TransferCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TransferCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TransferCertificateOutputError>
}

/// <p>The input for the TransferCertificate operation.</p>
public struct TransferCertificateInput: Swift.Equatable {
    /// <p>The ID of the certificate. (The last part of the certificate ARN contains the
    ///          certificate ID.)</p>
    public let certificateId: Swift.String?
    /// <p>The AWS account.</p>
    public let targetAwsAccount: Swift.String?
    /// <p>The transfer message.</p>
    public let transferMessage: Swift.String?

    public init (
        certificateId: Swift.String? = nil,
        targetAwsAccount: Swift.String? = nil,
        transferMessage: Swift.String? = nil
    )
    {
        self.certificateId = certificateId
        self.targetAwsAccount = targetAwsAccount
        self.transferMessage = transferMessage
    }
}

struct TransferCertificateInputBody: Swift.Equatable {
    public let transferMessage: Swift.String?
}

extension TransferCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transferMessage
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transferMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transferMessage)
        transferMessage = transferMessageDecoded
    }
}

extension TransferCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TransferCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateStateException" : self = .certificateStateException(try CertificateStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransferConflictException" : self = .transferConflictException(try TransferConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TransferCertificateOutputError: Swift.Error, Swift.Equatable {
    case certificateStateException(CertificateStateException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case transferConflictException(TransferConflictException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TransferCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TransferCertificateOutputResponse(transferredCertificateArn: \(Swift.String(describing: transferredCertificateArn)))"}
}

extension TransferCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TransferCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.transferredCertificateArn = output.transferredCertificateArn
        } else {
            self.transferredCertificateArn = nil
        }
    }
}

/// <p>The output from the TransferCertificate operation.</p>
public struct TransferCertificateOutputResponse: Swift.Equatable {
    /// <p>The ARN of the certificate.</p>
    public let transferredCertificateArn: Swift.String?

    public init (
        transferredCertificateArn: Swift.String? = nil
    )
    {
        self.transferredCertificateArn = transferredCertificateArn
    }
}

struct TransferCertificateOutputResponseBody: Swift.Equatable {
    public let transferredCertificateArn: Swift.String?
}

extension TransferCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transferredCertificateArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transferredCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transferredCertificateArn)
        transferredCertificateArn = transferredCertificateArnDecoded
    }
}

extension TransferConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TransferConflictException(message: \(Swift.String(describing: message)))"}
}

extension TransferConflictException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TransferConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You can't transfer the certificate because authorization policies are still
///          attached.</p>
public struct TransferConflictException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TransferConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TransferConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes.TransferData: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptDate
        case rejectDate
        case rejectReason
        case transferDate
        case transferMessage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptDate = acceptDate {
            try encodeContainer.encode(acceptDate.timeIntervalSince1970, forKey: .acceptDate)
        }
        if let rejectDate = rejectDate {
            try encodeContainer.encode(rejectDate.timeIntervalSince1970, forKey: .rejectDate)
        }
        if let rejectReason = rejectReason {
            try encodeContainer.encode(rejectReason, forKey: .rejectReason)
        }
        if let transferDate = transferDate {
            try encodeContainer.encode(transferDate.timeIntervalSince1970, forKey: .transferDate)
        }
        if let transferMessage = transferMessage {
            try encodeContainer.encode(transferMessage, forKey: .transferMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transferMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transferMessage)
        transferMessage = transferMessageDecoded
        let rejectReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rejectReason)
        rejectReason = rejectReasonDecoded
        let transferDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .transferDate)
        transferDate = transferDateDecoded
        let acceptDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .acceptDate)
        acceptDate = acceptDateDecoded
        let rejectDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .rejectDate)
        rejectDate = rejectDateDecoded
    }
}

extension IotClientTypes.TransferData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TransferData(acceptDate: \(Swift.String(describing: acceptDate)), rejectDate: \(Swift.String(describing: rejectDate)), rejectReason: \(Swift.String(describing: rejectReason)), transferDate: \(Swift.String(describing: transferDate)), transferMessage: \(Swift.String(describing: transferMessage)))"}
}

extension IotClientTypes {
    /// <p>Data used to transfer a certificate to an AWS account.</p>
    public struct TransferData: Swift.Equatable {
        /// <p>The date the transfer was accepted.</p>
        public let acceptDate: ClientRuntime.Date?
        /// <p>The date the transfer was rejected.</p>
        public let rejectDate: ClientRuntime.Date?
        /// <p>The reason why the transfer was rejected.</p>
        public let rejectReason: Swift.String?
        /// <p>The date the transfer took place.</p>
        public let transferDate: ClientRuntime.Date?
        /// <p>The transfer message.</p>
        public let transferMessage: Swift.String?

        public init (
            acceptDate: ClientRuntime.Date? = nil,
            rejectDate: ClientRuntime.Date? = nil,
            rejectReason: Swift.String? = nil,
            transferDate: ClientRuntime.Date? = nil,
            transferMessage: Swift.String? = nil
        )
        {
            self.acceptDate = acceptDate
            self.rejectDate = rejectDate
            self.rejectReason = rejectReason
            self.transferDate = transferDate
            self.transferMessage = transferMessage
        }
    }

}

extension UnauthorizedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UnauthorizedException(message: \(Swift.String(describing: message)))"}
}

extension UnauthorizedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UnauthorizedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You are not authorized to perform this operation.</p>
public struct UnauthorizedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnauthorizedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension UnauthorizedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UntagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tagKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// <p>The ARN of the resource.</p>
    public let resourceArn: Swift.String?
    /// <p>A list of the keys of the tags to be removed from the resource.</p>
    public let tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tagKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateAccountAuditConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAccountAuditConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAccountAuditConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAccountAuditConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAccountAuditConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAccountAuditConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAccountAuditConfigurationOutputError>
}

extension UpdateAccountAuditConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAccountAuditConfigurationInput(auditCheckConfigurations: \(Swift.String(describing: auditCheckConfigurations)), auditNotificationTargetConfigurations: \(Swift.String(describing: auditNotificationTargetConfigurations)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension UpdateAccountAuditConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditCheckConfigurations
        case auditNotificationTargetConfigurations
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auditCheckConfigurations = auditCheckConfigurations {
            var auditCheckConfigurationsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .auditCheckConfigurations)
            for (dictKey0, auditcheckconfigurations0) in auditCheckConfigurations {
                try auditCheckConfigurationsContainer.encode(auditcheckconfigurations0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let auditNotificationTargetConfigurations = auditNotificationTargetConfigurations {
            var auditNotificationTargetConfigurationsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .auditNotificationTargetConfigurations)
            for (dictKey0, auditnotificationtargetconfigurations0) in auditNotificationTargetConfigurations {
                try auditNotificationTargetConfigurationsContainer.encode(auditnotificationtargetconfigurations0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

public struct UpdateAccountAuditConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAccountAuditConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAccountAuditConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAccountAuditConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAccountAuditConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAccountAuditConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAccountAuditConfigurationOutputError>
}

public struct UpdateAccountAuditConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAccountAuditConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAccountAuditConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAccountAuditConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAccountAuditConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAccountAuditConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAccountAuditConfigurationOutputError>
}

public struct UpdateAccountAuditConfigurationInput: Swift.Equatable {
    /// <p>Specifies which audit checks are enabled and disabled for this account. Use
    ///             <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those
    ///             that are currently enabled.</p>
    ///           <p>Some data collection might start immediately when certain checks are enabled.
    ///             When a check is disabled, any data collected so far in relation to the check is deleted.</p>
    ///           <p>You
    ///       cannot
    ///       disable a check if
    ///       it's
    ///       used by any scheduled audit. You must first delete the check from the scheduled audit or
    ///       delete the scheduled audit itself.</p>
    ///           <p>On the first call to <code>UpdateAccountAuditConfiguration</code>,
    ///             this parameter is required and must specify at least one enabled check.</p>
    public let auditCheckConfigurations: [Swift.String:IotClientTypes.AuditCheckConfiguration]?
    /// <p>Information about the targets to which audit notifications are sent.</p>
    public let auditNotificationTargetConfigurations: [Swift.String:IotClientTypes.AuditNotificationTarget]?
    /// <p>The Amazon
    ///       Resource Name
    ///       (ARN)
    ///       of the role that grants permission
    ///       to
    ///       AWS IoT to access information about your devices, policies,
    ///       certificates,
    ///       and other items as required when performing an audit.</p>
    public let roleArn: Swift.String?

    public init (
        auditCheckConfigurations: [Swift.String:IotClientTypes.AuditCheckConfiguration]? = nil,
        auditNotificationTargetConfigurations: [Swift.String:IotClientTypes.AuditNotificationTarget]? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.auditCheckConfigurations = auditCheckConfigurations
        self.auditNotificationTargetConfigurations = auditNotificationTargetConfigurations
        self.roleArn = roleArn
    }
}

struct UpdateAccountAuditConfigurationInputBody: Swift.Equatable {
    public let roleArn: Swift.String?
    public let auditNotificationTargetConfigurations: [Swift.String:IotClientTypes.AuditNotificationTarget]?
    public let auditCheckConfigurations: [Swift.String:IotClientTypes.AuditCheckConfiguration]?
}

extension UpdateAccountAuditConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditCheckConfigurations
        case auditNotificationTargetConfigurations
        case roleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let auditNotificationTargetConfigurationsContainer = try containerValues.decodeIfPresent([Swift.String: IotClientTypes.AuditNotificationTarget?].self, forKey: .auditNotificationTargetConfigurations)
        var auditNotificationTargetConfigurationsDecoded0: [Swift.String:IotClientTypes.AuditNotificationTarget]? = nil
        if let auditNotificationTargetConfigurationsContainer = auditNotificationTargetConfigurationsContainer {
            auditNotificationTargetConfigurationsDecoded0 = [Swift.String:IotClientTypes.AuditNotificationTarget]()
            for (key0, auditnotificationtarget0) in auditNotificationTargetConfigurationsContainer {
                if let auditnotificationtarget0 = auditnotificationtarget0 {
                    auditNotificationTargetConfigurationsDecoded0?[key0] = auditnotificationtarget0
                }
            }
        }
        auditNotificationTargetConfigurations = auditNotificationTargetConfigurationsDecoded0
        let auditCheckConfigurationsContainer = try containerValues.decodeIfPresent([Swift.String: IotClientTypes.AuditCheckConfiguration?].self, forKey: .auditCheckConfigurations)
        var auditCheckConfigurationsDecoded0: [Swift.String:IotClientTypes.AuditCheckConfiguration]? = nil
        if let auditCheckConfigurationsContainer = auditCheckConfigurationsContainer {
            auditCheckConfigurationsDecoded0 = [Swift.String:IotClientTypes.AuditCheckConfiguration]()
            for (key0, auditcheckconfiguration0) in auditCheckConfigurationsContainer {
                if let auditcheckconfiguration0 = auditcheckconfiguration0 {
                    auditCheckConfigurationsDecoded0?[key0] = auditcheckconfiguration0
                }
            }
        }
        auditCheckConfigurations = auditCheckConfigurationsDecoded0
    }
}

extension UpdateAccountAuditConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateAccountAuditConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateAccountAuditConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAccountAuditConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAccountAuditConfigurationOutputResponse()"}
}

extension UpdateAccountAuditConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAccountAuditConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateAccountAuditConfigurationOutputResponseBody: Swift.Equatable {
}

extension UpdateAccountAuditConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateAuditSuppressionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAuditSuppressionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAuditSuppressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAuditSuppressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAuditSuppressionOutputError>
}

extension UpdateAuditSuppressionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAuditSuppressionInput(checkName: \(Swift.String(describing: checkName)), description: \(Swift.String(describing: description)), expirationDate: \(Swift.String(describing: expirationDate)), resourceIdentifier: \(Swift.String(describing: resourceIdentifier)), suppressIndefinitely: \(Swift.String(describing: suppressIndefinitely)))"}
}

extension UpdateAuditSuppressionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkName
        case description
        case expirationDate
        case resourceIdentifier
        case suppressIndefinitely
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkName = checkName {
            try encodeContainer.encode(checkName, forKey: .checkName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let expirationDate = expirationDate {
            try encodeContainer.encode(expirationDate.timeIntervalSince1970, forKey: .expirationDate)
        }
        if let resourceIdentifier = resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
        if let suppressIndefinitely = suppressIndefinitely {
            try encodeContainer.encode(suppressIndefinitely, forKey: .suppressIndefinitely)
        }
    }
}

public struct UpdateAuditSuppressionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAuditSuppressionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAuditSuppressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAuditSuppressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAuditSuppressionOutputError>
}

public struct UpdateAuditSuppressionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAuditSuppressionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAuditSuppressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAuditSuppressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAuditSuppressionOutputError>
}

public struct UpdateAuditSuppressionInput: Swift.Equatable {
    /// <p>An audit check name. Checks must be enabled
    ///         for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list
    ///         of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code>
    ///         to select which checks are enabled.)</p>
    public let checkName: Swift.String?
    /// <p>
    ///       The description of the audit suppression.
    ///     </p>
    public let description: Swift.String?
    /// <p>
    ///       The expiration date (epoch timestamp in seconds) that you want the suppression to adhere to.
    ///     </p>
    public let expirationDate: ClientRuntime.Date?
    /// <p>Information that identifies the noncompliant resource.</p>
    public let resourceIdentifier: IotClientTypes.ResourceIdentifier?
    /// <p>
    ///       Indicates whether a suppression should exist indefinitely or not.
    ///     </p>
    public let suppressIndefinitely: Swift.Bool?

    public init (
        checkName: Swift.String? = nil,
        description: Swift.String? = nil,
        expirationDate: ClientRuntime.Date? = nil,
        resourceIdentifier: IotClientTypes.ResourceIdentifier? = nil,
        suppressIndefinitely: Swift.Bool? = nil
    )
    {
        self.checkName = checkName
        self.description = description
        self.expirationDate = expirationDate
        self.resourceIdentifier = resourceIdentifier
        self.suppressIndefinitely = suppressIndefinitely
    }
}

struct UpdateAuditSuppressionInputBody: Swift.Equatable {
    public let checkName: Swift.String?
    public let resourceIdentifier: IotClientTypes.ResourceIdentifier?
    public let expirationDate: ClientRuntime.Date?
    public let suppressIndefinitely: Swift.Bool?
    public let description: Swift.String?
}

extension UpdateAuditSuppressionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkName
        case description
        case expirationDate
        case resourceIdentifier
        case suppressIndefinitely
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkName)
        checkName = checkNameDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(IotClientTypes.ResourceIdentifier.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let suppressIndefinitelyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .suppressIndefinitely)
        suppressIndefinitely = suppressIndefinitelyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateAuditSuppressionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateAuditSuppressionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateAuditSuppressionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAuditSuppressionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAuditSuppressionOutputResponse()"}
}

extension UpdateAuditSuppressionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAuditSuppressionOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateAuditSuppressionOutputResponseBody: Swift.Equatable {
}

extension UpdateAuditSuppressionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateAuthorizerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAuthorizerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAuthorizerOutputError>
}

extension UpdateAuthorizerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAuthorizerInput(authorizerFunctionArn: \(Swift.String(describing: authorizerFunctionArn)), authorizerName: \(Swift.String(describing: authorizerName)), status: \(Swift.String(describing: status)), tokenKeyName: \(Swift.String(describing: tokenKeyName)), tokenSigningPublicKeys: \(Swift.String(describing: tokenSigningPublicKeys)))"}
}

extension UpdateAuthorizerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerFunctionArn
        case status
        case tokenKeyName
        case tokenSigningPublicKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizerFunctionArn = authorizerFunctionArn {
            try encodeContainer.encode(authorizerFunctionArn, forKey: .authorizerFunctionArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tokenKeyName = tokenKeyName {
            try encodeContainer.encode(tokenKeyName, forKey: .tokenKeyName)
        }
        if let tokenSigningPublicKeys = tokenSigningPublicKeys {
            var tokenSigningPublicKeysContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tokenSigningPublicKeys)
            for (dictKey0, publickeymap0) in tokenSigningPublicKeys {
                try tokenSigningPublicKeysContainer.encode(publickeymap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct UpdateAuthorizerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAuthorizerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAuthorizerOutputError>
}

public struct UpdateAuthorizerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAuthorizerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAuthorizerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAuthorizerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAuthorizerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAuthorizerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAuthorizerOutputError>
}

public struct UpdateAuthorizerInput: Swift.Equatable {
    /// <p>The ARN of the authorizer's Lambda function.</p>
    public let authorizerFunctionArn: Swift.String?
    /// <p>The authorizer name.</p>
    public let authorizerName: Swift.String?
    /// <p>The status of the update authorizer request.</p>
    public let status: IotClientTypes.AuthorizerStatus?
    /// <p>The key used to extract the token from the HTTP headers. </p>
    public let tokenKeyName: Swift.String?
    /// <p>The public keys used to verify the token signature.</p>
    public let tokenSigningPublicKeys: [Swift.String:Swift.String]?

    public init (
        authorizerFunctionArn: Swift.String? = nil,
        authorizerName: Swift.String? = nil,
        status: IotClientTypes.AuthorizerStatus? = nil,
        tokenKeyName: Swift.String? = nil,
        tokenSigningPublicKeys: [Swift.String:Swift.String]? = nil
    )
    {
        self.authorizerFunctionArn = authorizerFunctionArn
        self.authorizerName = authorizerName
        self.status = status
        self.tokenKeyName = tokenKeyName
        self.tokenSigningPublicKeys = tokenSigningPublicKeys
    }
}

struct UpdateAuthorizerInputBody: Swift.Equatable {
    public let authorizerFunctionArn: Swift.String?
    public let tokenKeyName: Swift.String?
    public let tokenSigningPublicKeys: [Swift.String:Swift.String]?
    public let status: IotClientTypes.AuthorizerStatus?
}

extension UpdateAuthorizerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerFunctionArn
        case status
        case tokenKeyName
        case tokenSigningPublicKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizerFunctionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerFunctionArn)
        authorizerFunctionArn = authorizerFunctionArnDecoded
        let tokenKeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenKeyName)
        tokenKeyName = tokenKeyNameDecoded
        let tokenSigningPublicKeysContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tokenSigningPublicKeys)
        var tokenSigningPublicKeysDecoded0: [Swift.String:Swift.String]? = nil
        if let tokenSigningPublicKeysContainer = tokenSigningPublicKeysContainer {
            tokenSigningPublicKeysDecoded0 = [Swift.String:Swift.String]()
            for (key0, keyvalue0) in tokenSigningPublicKeysContainer {
                if let keyvalue0 = keyvalue0 {
                    tokenSigningPublicKeysDecoded0?[key0] = keyvalue0
                }
            }
        }
        tokenSigningPublicKeys = tokenSigningPublicKeysDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthorizerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension UpdateAuthorizerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateAuthorizerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateAuthorizerOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAuthorizerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAuthorizerOutputResponse(authorizerArn: \(Swift.String(describing: authorizerArn)), authorizerName: \(Swift.String(describing: authorizerName)))"}
}

extension UpdateAuthorizerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateAuthorizerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authorizerArn = output.authorizerArn
            self.authorizerName = output.authorizerName
        } else {
            self.authorizerArn = nil
            self.authorizerName = nil
        }
    }
}

public struct UpdateAuthorizerOutputResponse: Swift.Equatable {
    /// <p>The authorizer ARN.</p>
    public let authorizerArn: Swift.String?
    /// <p>The authorizer name.</p>
    public let authorizerName: Swift.String?

    public init (
        authorizerArn: Swift.String? = nil,
        authorizerName: Swift.String? = nil
    )
    {
        self.authorizerArn = authorizerArn
        self.authorizerName = authorizerName
    }
}

struct UpdateAuthorizerOutputResponseBody: Swift.Equatable {
    public let authorizerName: Swift.String?
    public let authorizerArn: Swift.String?
}

extension UpdateAuthorizerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerArn
        case authorizerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerName)
        authorizerName = authorizerNameDecoded
        let authorizerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerArn)
        authorizerArn = authorizerArnDecoded
    }
}

public struct UpdateBillingGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateBillingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateBillingGroupOutputError>
}

extension UpdateBillingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateBillingGroupInput(billingGroupName: \(Swift.String(describing: billingGroupName)), billingGroupProperties: \(Swift.String(describing: billingGroupProperties)), expectedVersion: \(Swift.String(describing: expectedVersion)))"}
}

extension UpdateBillingGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingGroupProperties
        case expectedVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingGroupProperties = billingGroupProperties {
            try encodeContainer.encode(billingGroupProperties, forKey: .billingGroupProperties)
        }
        if let expectedVersion = expectedVersion {
            try encodeContainer.encode(expectedVersion, forKey: .expectedVersion)
        }
    }
}

public struct UpdateBillingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateBillingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateBillingGroupOutputError>
}

public struct UpdateBillingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateBillingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateBillingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateBillingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateBillingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateBillingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateBillingGroupOutputError>
}

public struct UpdateBillingGroupInput: Swift.Equatable {
    /// <p>The name of the billing group.</p>
    public let billingGroupName: Swift.String?
    /// <p>The properties of the billing group.</p>
    public let billingGroupProperties: IotClientTypes.BillingGroupProperties?
    /// <p>The expected version of the billing group. If the version of the billing group does
    /// 			not match the expected version specified in the request, the
    /// 				<code>UpdateBillingGroup</code> request is rejected with a
    /// 				<code>VersionConflictException</code>.</p>
    public let expectedVersion: Swift.Int?

    public init (
        billingGroupName: Swift.String? = nil,
        billingGroupProperties: IotClientTypes.BillingGroupProperties? = nil,
        expectedVersion: Swift.Int? = nil
    )
    {
        self.billingGroupName = billingGroupName
        self.billingGroupProperties = billingGroupProperties
        self.expectedVersion = expectedVersion
    }
}

struct UpdateBillingGroupInputBody: Swift.Equatable {
    public let billingGroupProperties: IotClientTypes.BillingGroupProperties?
    public let expectedVersion: Swift.Int?
}

extension UpdateBillingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingGroupProperties
        case expectedVersion
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let billingGroupPropertiesDecoded = try containerValues.decodeIfPresent(IotClientTypes.BillingGroupProperties.self, forKey: .billingGroupProperties)
        billingGroupProperties = billingGroupPropertiesDecoded
        let expectedVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expectedVersion)
        expectedVersion = expectedVersionDecoded
    }
}

extension UpdateBillingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateBillingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionConflictException" : self = .versionConflictException(try VersionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateBillingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case versionConflictException(VersionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateBillingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateBillingGroupOutputResponse(version: \(Swift.String(describing: version)))"}
}

extension UpdateBillingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateBillingGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.version = output.version
        } else {
            self.version = 0
        }
    }
}

public struct UpdateBillingGroupOutputResponse: Swift.Equatable {
    /// <p>The latest version of the billing group.</p>
    public let version: Swift.Int

    public init (
        version: Swift.Int = 0
    )
    {
        self.version = version
    }
}

struct UpdateBillingGroupOutputResponseBody: Swift.Equatable {
    public let version: Swift.Int
}

extension UpdateBillingGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

public struct UpdateCACertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCACertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCACertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCACertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCACertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCACertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCACertificateOutputError>
}

extension UpdateCACertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCACertificateInput(certificateId: \(Swift.String(describing: certificateId)), newAutoRegistrationStatus: \(Swift.String(describing: newAutoRegistrationStatus)), newStatus: \(Swift.String(describing: newStatus)), registrationConfig: \(Swift.String(describing: registrationConfig)), removeAutoRegistration: \(Swift.String(describing: removeAutoRegistration)))"}
}

extension UpdateCACertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registrationConfig
        case removeAutoRegistration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let registrationConfig = registrationConfig {
            try encodeContainer.encode(registrationConfig, forKey: .registrationConfig)
        }
        if removeAutoRegistration != false {
            try encodeContainer.encode(removeAutoRegistration, forKey: .removeAutoRegistration)
        }
    }
}

public struct UpdateCACertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCACertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCACertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCACertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCACertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCACertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCACertificateOutputError>
}

public struct UpdateCACertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCACertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCACertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCACertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let newAutoRegistrationStatus = input.operationInput.newAutoRegistrationStatus {
            let newAutoRegistrationStatusQueryItem = ClientRuntime.URLQueryItem(name: "newAutoRegistrationStatus".urlPercentEncoding(), value: Swift.String(newAutoRegistrationStatus.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(newAutoRegistrationStatusQueryItem)
        }
        if let newStatus = input.operationInput.newStatus {
            let newStatusQueryItem = ClientRuntime.URLQueryItem(name: "newStatus".urlPercentEncoding(), value: Swift.String(newStatus.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(newStatusQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCACertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCACertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCACertificateOutputError>
}

/// <p>The input to the UpdateCACertificate operation.</p>
public struct UpdateCACertificateInput: Swift.Equatable {
    /// <p>The CA certificate identifier.</p>
    public let certificateId: Swift.String?
    /// <p>The new value for the auto registration status. Valid values are: "ENABLE" or
    ///          "DISABLE".</p>
    public let newAutoRegistrationStatus: IotClientTypes.AutoRegistrationStatus?
    /// <p>The updated status of the CA certificate.</p>
    ///          <p>
    ///             <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and
    ///          should not be used.</p>
    public let newStatus: IotClientTypes.CACertificateStatus?
    /// <p>Information about the registration configuration.</p>
    public let registrationConfig: IotClientTypes.RegistrationConfig?
    /// <p>If true, removes auto registration.</p>
    public let removeAutoRegistration: Swift.Bool

    public init (
        certificateId: Swift.String? = nil,
        newAutoRegistrationStatus: IotClientTypes.AutoRegistrationStatus? = nil,
        newStatus: IotClientTypes.CACertificateStatus? = nil,
        registrationConfig: IotClientTypes.RegistrationConfig? = nil,
        removeAutoRegistration: Swift.Bool = false
    )
    {
        self.certificateId = certificateId
        self.newAutoRegistrationStatus = newAutoRegistrationStatus
        self.newStatus = newStatus
        self.registrationConfig = registrationConfig
        self.removeAutoRegistration = removeAutoRegistration
    }
}

struct UpdateCACertificateInputBody: Swift.Equatable {
    public let registrationConfig: IotClientTypes.RegistrationConfig?
    public let removeAutoRegistration: Swift.Bool
}

extension UpdateCACertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registrationConfig
        case removeAutoRegistration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registrationConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.RegistrationConfig.self, forKey: .registrationConfig)
        registrationConfig = registrationConfigDecoded
        let removeAutoRegistrationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .removeAutoRegistration)
        removeAutoRegistration = removeAutoRegistrationDecoded
    }
}

extension UpdateCACertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateCACertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateCACertificateOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCACertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCACertificateOutputResponse()"}
}

extension UpdateCACertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateCACertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateCACertificateOutputResponseBody: Swift.Equatable {
}

extension UpdateCACertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IotClientTypes.UpdateCACertificateParams: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(IotClientTypes.CACertificateUpdateAction.self, forKey: .action)
        action = actionDecoded
    }
}

extension IotClientTypes.UpdateCACertificateParams: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCACertificateParams(action: \(Swift.String(describing: action)))"}
}

extension IotClientTypes {
    /// <p>Parameters to define a mitigation action that changes the state of the CA certificate to inactive.</p>
    public struct UpdateCACertificateParams: Swift.Equatable {
        /// <p>The action that you want to apply to the CA certificate. The only supported value is <code>DEACTIVATE</code>.</p>
        public let action: IotClientTypes.CACertificateUpdateAction?

        public init (
            action: IotClientTypes.CACertificateUpdateAction? = nil
        )
        {
            self.action = action
        }
    }

}

extension UpdateCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCertificateInput(certificateId: \(Swift.String(describing: certificateId)), newStatus: \(Swift.String(describing: newStatus)))"}
}

extension UpdateCertificateInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct UpdateCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCertificateOutputError>
}

public struct UpdateCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let newStatus = input.operationInput.newStatus {
            let newStatusQueryItem = ClientRuntime.URLQueryItem(name: "newStatus".urlPercentEncoding(), value: Swift.String(newStatus.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(newStatusQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCertificateOutputError>
}

/// <p>The input for the UpdateCertificate operation.</p>
public struct UpdateCertificateInput: Swift.Equatable {
    /// <p>The ID of the certificate. (The last part of the certificate ARN contains the
    ///          certificate ID.)</p>
    public let certificateId: Swift.String?
    /// <p>The new status.</p>
    ///          <p>
    ///             <b>Note:</b> Setting the status to PENDING_TRANSFER  or PENDING_ACTIVATION will result
    ///          in an exception being thrown. PENDING_TRANSFER and PENDING_ACTIVATION are statuses used internally by AWS IoT. They
    ///          are not intended for developer use.</p>
    ///          <p>
    ///             <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and
    ///          should not be used.</p>
    public let newStatus: IotClientTypes.CertificateStatus?

    public init (
        certificateId: Swift.String? = nil,
        newStatus: IotClientTypes.CertificateStatus? = nil
    )
    {
        self.certificateId = certificateId
        self.newStatus = newStatus
    }
}

struct UpdateCertificateInputBody: Swift.Equatable {
}

extension UpdateCertificateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UpdateCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateStateException" : self = .certificateStateException(try CertificateStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateCertificateOutputError: Swift.Error, Swift.Equatable {
    case certificateStateException(CertificateStateException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCertificateOutputResponse()"}
}

extension UpdateCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateCertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateCertificateOutputResponseBody: Swift.Equatable {
}

extension UpdateCertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateCustomMetricInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCustomMetricInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCustomMetricInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCustomMetricOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCustomMetricInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCustomMetricOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCustomMetricOutputError>
}

extension UpdateCustomMetricInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCustomMetricInput(displayName: \(Swift.String(describing: displayName)), metricName: \(Swift.String(describing: metricName)))"}
}

extension UpdateCustomMetricInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
    }
}

public struct UpdateCustomMetricInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCustomMetricInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCustomMetricInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCustomMetricOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCustomMetricInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCustomMetricOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCustomMetricOutputError>
}

public struct UpdateCustomMetricInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCustomMetricInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCustomMetricInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCustomMetricOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCustomMetricInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCustomMetricOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCustomMetricOutputError>
}

public struct UpdateCustomMetricInput: Swift.Equatable {
    /// <p>
    ///       Field
    ///       represents a friendly name in the console for the custom metric,
    ///       it
    ///       doesn't have to be unique. Don't use this name as the metric identifier in
    ///       the device metric report.
    ///       Can
    ///       be updated. </p>
    public let displayName: Swift.String?
    /// <p> The name of the custom metric.
    ///       Cannot be updated. </p>
    public let metricName: Swift.String?

    public init (
        displayName: Swift.String? = nil,
        metricName: Swift.String? = nil
    )
    {
        self.displayName = displayName
        self.metricName = metricName
    }
}

struct UpdateCustomMetricInputBody: Swift.Equatable {
    public let displayName: Swift.String?
}

extension UpdateCustomMetricInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
    }
}

extension UpdateCustomMetricOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateCustomMetricOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateCustomMetricOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCustomMetricOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCustomMetricOutputResponse(creationDate: \(Swift.String(describing: creationDate)), displayName: \(Swift.String(describing: displayName)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), metricArn: \(Swift.String(describing: metricArn)), metricName: \(Swift.String(describing: metricName)), metricType: \(Swift.String(describing: metricType)))"}
}

extension UpdateCustomMetricOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateCustomMetricOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationDate = output.creationDate
            self.displayName = output.displayName
            self.lastModifiedDate = output.lastModifiedDate
            self.metricArn = output.metricArn
            self.metricName = output.metricName
            self.metricType = output.metricType
        } else {
            self.creationDate = nil
            self.displayName = nil
            self.lastModifiedDate = nil
            self.metricArn = nil
            self.metricName = nil
            self.metricType = nil
        }
    }
}

public struct UpdateCustomMetricOutputResponse: Swift.Equatable {
    /// <p>
    ///       The creation date of the custom metric in milliseconds since epoch.
    ///     </p>
    public let creationDate: ClientRuntime.Date?
    /// <p>
    ///       A friendly name in the console for the custom metric
    ///     </p>
    public let displayName: Swift.String?
    /// <p>
    ///       The time the custom metric was last modified in milliseconds since epoch.
    ///     </p>
    public let lastModifiedDate: ClientRuntime.Date?
    /// <p>
    ///       The Amazon Resource Number (ARN) of the custom metric.
    ///     </p>
    public let metricArn: Swift.String?
    /// <p>
    ///       The name of the custom metric.
    ///     </p>
    public let metricName: Swift.String?
    /// <p>
    ///       The type of the custom metric. Types include <code>string-list</code>, <code>ip-address-list</code>, <code>number-list</code>, and <code>number</code>.
    ///     </p>
    public let metricType: IotClientTypes.CustomMetricType?

    public init (
        creationDate: ClientRuntime.Date? = nil,
        displayName: Swift.String? = nil,
        lastModifiedDate: ClientRuntime.Date? = nil,
        metricArn: Swift.String? = nil,
        metricName: Swift.String? = nil,
        metricType: IotClientTypes.CustomMetricType? = nil
    )
    {
        self.creationDate = creationDate
        self.displayName = displayName
        self.lastModifiedDate = lastModifiedDate
        self.metricArn = metricArn
        self.metricName = metricName
        self.metricType = metricType
    }
}

struct UpdateCustomMetricOutputResponseBody: Swift.Equatable {
    public let metricName: Swift.String?
    public let metricArn: Swift.String?
    public let metricType: IotClientTypes.CustomMetricType?
    public let displayName: Swift.String?
    public let creationDate: ClientRuntime.Date?
    public let lastModifiedDate: ClientRuntime.Date?
}

extension UpdateCustomMetricOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case displayName
        case lastModifiedDate
        case metricArn
        case metricName
        case metricType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricArn)
        metricArn = metricArnDecoded
        let metricTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.CustomMetricType.self, forKey: .metricType)
        metricType = metricTypeDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
    }
}

extension IotClientTypes.UpdateDeviceCertificateParams: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(IotClientTypes.DeviceCertificateUpdateAction.self, forKey: .action)
        action = actionDecoded
    }
}

extension IotClientTypes.UpdateDeviceCertificateParams: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDeviceCertificateParams(action: \(Swift.String(describing: action)))"}
}

extension IotClientTypes {
    /// <p>Parameters to define a mitigation action that changes the state of the device certificate to inactive.</p>
    public struct UpdateDeviceCertificateParams: Swift.Equatable {
        /// <p>The action that you want to apply to the device certificate. The only supported value is <code>DEACTIVATE</code>.</p>
        public let action: IotClientTypes.DeviceCertificateUpdateAction?

        public init (
            action: IotClientTypes.DeviceCertificateUpdateAction? = nil
        )
        {
            self.action = action
        }
    }

}

public struct UpdateDimensionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDimensionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDimensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDimensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDimensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDimensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDimensionOutputError>
}

extension UpdateDimensionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDimensionInput(name: \(Swift.String(describing: name)), stringValues: \(Swift.String(describing: stringValues)))"}
}

extension UpdateDimensionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stringValues
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stringValues = stringValues {
            var stringValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stringValues)
            for dimensionstringvalues0 in stringValues {
                try stringValuesContainer.encode(dimensionstringvalues0)
            }
        }
    }
}

public struct UpdateDimensionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDimensionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDimensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDimensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDimensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDimensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDimensionOutputError>
}

public struct UpdateDimensionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDimensionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDimensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDimensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDimensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDimensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDimensionOutputError>
}

public struct UpdateDimensionInput: Swift.Equatable {
    /// <p>A unique identifier for the dimension. Choose something that describes the type and value to make it easy to remember what it does.</p>
    public let name: Swift.String?
    /// <p>Specifies the value or list of values for the dimension. For <code>TOPIC_FILTER</code> dimensions, this is a pattern used to match the MQTT topic (for example, "admin/#").</p>
    public let stringValues: [Swift.String]?

    public init (
        name: Swift.String? = nil,
        stringValues: [Swift.String]? = nil
    )
    {
        self.name = name
        self.stringValues = stringValues
    }
}

struct UpdateDimensionInputBody: Swift.Equatable {
    public let stringValues: [Swift.String]?
}

extension UpdateDimensionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stringValues
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stringValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stringValues)
        var stringValuesDecoded0:[Swift.String]? = nil
        if let stringValuesContainer = stringValuesContainer {
            stringValuesDecoded0 = [Swift.String]()
            for string0 in stringValuesContainer {
                if let string0 = string0 {
                    stringValuesDecoded0?.append(string0)
                }
            }
        }
        stringValues = stringValuesDecoded0
    }
}

extension UpdateDimensionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDimensionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDimensionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDimensionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDimensionOutputResponse(arn: \(Swift.String(describing: arn)), creationDate: \(Swift.String(describing: creationDate)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), name: \(Swift.String(describing: name)), stringValues: \(Swift.String(describing: stringValues)), type: \(Swift.String(describing: type)))"}
}

extension UpdateDimensionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateDimensionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.creationDate = output.creationDate
            self.lastModifiedDate = output.lastModifiedDate
            self.name = output.name
            self.stringValues = output.stringValues
            self.type = output.type
        } else {
            self.arn = nil
            self.creationDate = nil
            self.lastModifiedDate = nil
            self.name = nil
            self.stringValues = nil
            self.type = nil
        }
    }
}

public struct UpdateDimensionOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource
    ///       Name (ARN)of
    ///       the created dimension.</p>
    public let arn: Swift.String?
    /// <p>The date and time, in milliseconds since epoch, when the dimension was initially created.</p>
    public let creationDate: ClientRuntime.Date?
    /// <p>The date and time, in milliseconds since epoch, when the dimension was most recently updated.</p>
    public let lastModifiedDate: ClientRuntime.Date?
    /// <p>A unique identifier for the dimension.</p>
    public let name: Swift.String?
    /// <p>The value or list of values used to scope the dimension. For example, for topic filters, this is the pattern used to match the MQTT topic name.</p>
    public let stringValues: [Swift.String]?
    /// <p>The type of the dimension.</p>
    public let type: IotClientTypes.DimensionType?

    public init (
        arn: Swift.String? = nil,
        creationDate: ClientRuntime.Date? = nil,
        lastModifiedDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        stringValues: [Swift.String]? = nil,
        type: IotClientTypes.DimensionType? = nil
    )
    {
        self.arn = arn
        self.creationDate = creationDate
        self.lastModifiedDate = lastModifiedDate
        self.name = name
        self.stringValues = stringValues
        self.type = type
    }
}

struct UpdateDimensionOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let arn: Swift.String?
    public let type: IotClientTypes.DimensionType?
    public let stringValues: [Swift.String]?
    public let creationDate: ClientRuntime.Date?
    public let lastModifiedDate: ClientRuntime.Date?
}

extension UpdateDimensionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case creationDate
        case lastModifiedDate
        case name
        case stringValues
        case type
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(IotClientTypes.DimensionType.self, forKey: .type)
        type = typeDecoded
        let stringValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stringValues)
        var stringValuesDecoded0:[Swift.String]? = nil
        if let stringValuesContainer = stringValuesContainer {
            stringValuesDecoded0 = [Swift.String]()
            for string0 in stringValuesContainer {
                if let string0 = string0 {
                    stringValuesDecoded0?.append(string0)
                }
            }
        }
        stringValues = stringValuesDecoded0
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
    }
}

public struct UpdateDomainConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDomainConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDomainConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDomainConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDomainConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDomainConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDomainConfigurationOutputError>
}

extension UpdateDomainConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDomainConfigurationInput(authorizerConfig: \(Swift.String(describing: authorizerConfig)), domainConfigurationName: \(Swift.String(describing: domainConfigurationName)), domainConfigurationStatus: \(Swift.String(describing: domainConfigurationStatus)), removeAuthorizerConfig: \(Swift.String(describing: removeAuthorizerConfig)))"}
}

extension UpdateDomainConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerConfig
        case domainConfigurationStatus
        case removeAuthorizerConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizerConfig = authorizerConfig {
            try encodeContainer.encode(authorizerConfig, forKey: .authorizerConfig)
        }
        if let domainConfigurationStatus = domainConfigurationStatus {
            try encodeContainer.encode(domainConfigurationStatus.rawValue, forKey: .domainConfigurationStatus)
        }
        if removeAuthorizerConfig != false {
            try encodeContainer.encode(removeAuthorizerConfig, forKey: .removeAuthorizerConfig)
        }
    }
}

public struct UpdateDomainConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDomainConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDomainConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDomainConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDomainConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDomainConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDomainConfigurationOutputError>
}

public struct UpdateDomainConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDomainConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDomainConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDomainConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDomainConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDomainConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDomainConfigurationOutputError>
}

public struct UpdateDomainConfigurationInput: Swift.Equatable {
    /// <p>An object that specifies the authorization service for a domain.</p>
    public let authorizerConfig: IotClientTypes.AuthorizerConfig?
    /// <p>The name of the domain configuration to be updated.</p>
    public let domainConfigurationName: Swift.String?
    /// <p>The status to which the domain configuration should be updated.</p>
    public let domainConfigurationStatus: IotClientTypes.DomainConfigurationStatus?
    /// <p>Removes the authorization configuration from a domain.</p>
    public let removeAuthorizerConfig: Swift.Bool

    public init (
        authorizerConfig: IotClientTypes.AuthorizerConfig? = nil,
        domainConfigurationName: Swift.String? = nil,
        domainConfigurationStatus: IotClientTypes.DomainConfigurationStatus? = nil,
        removeAuthorizerConfig: Swift.Bool = false
    )
    {
        self.authorizerConfig = authorizerConfig
        self.domainConfigurationName = domainConfigurationName
        self.domainConfigurationStatus = domainConfigurationStatus
        self.removeAuthorizerConfig = removeAuthorizerConfig
    }
}

struct UpdateDomainConfigurationInputBody: Swift.Equatable {
    public let authorizerConfig: IotClientTypes.AuthorizerConfig?
    public let domainConfigurationStatus: IotClientTypes.DomainConfigurationStatus?
    public let removeAuthorizerConfig: Swift.Bool
}

extension UpdateDomainConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerConfig
        case domainConfigurationStatus
        case removeAuthorizerConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizerConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthorizerConfig.self, forKey: .authorizerConfig)
        authorizerConfig = authorizerConfigDecoded
        let domainConfigurationStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.DomainConfigurationStatus.self, forKey: .domainConfigurationStatus)
        domainConfigurationStatus = domainConfigurationStatusDecoded
        let removeAuthorizerConfigDecoded = try containerValues.decode(Swift.Bool.self, forKey: .removeAuthorizerConfig)
        removeAuthorizerConfig = removeAuthorizerConfigDecoded
    }
}

extension UpdateDomainConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDomainConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateValidationException" : self = .certificateValidationException(try CertificateValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDomainConfigurationOutputError: Swift.Error, Swift.Equatable {
    case certificateValidationException(CertificateValidationException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDomainConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDomainConfigurationOutputResponse(domainConfigurationArn: \(Swift.String(describing: domainConfigurationArn)), domainConfigurationName: \(Swift.String(describing: domainConfigurationName)))"}
}

extension UpdateDomainConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateDomainConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainConfigurationArn = output.domainConfigurationArn
            self.domainConfigurationName = output.domainConfigurationName
        } else {
            self.domainConfigurationArn = nil
            self.domainConfigurationName = nil
        }
    }
}

public struct UpdateDomainConfigurationOutputResponse: Swift.Equatable {
    /// <p>The ARN of the domain configuration that was updated.</p>
    public let domainConfigurationArn: Swift.String?
    /// <p>The name of the domain configuration that was updated.</p>
    public let domainConfigurationName: Swift.String?

    public init (
        domainConfigurationArn: Swift.String? = nil,
        domainConfigurationName: Swift.String? = nil
    )
    {
        self.domainConfigurationArn = domainConfigurationArn
        self.domainConfigurationName = domainConfigurationName
    }
}

struct UpdateDomainConfigurationOutputResponseBody: Swift.Equatable {
    public let domainConfigurationName: Swift.String?
    public let domainConfigurationArn: Swift.String?
}

extension UpdateDomainConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainConfigurationArn
        case domainConfigurationName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainConfigurationName)
        domainConfigurationName = domainConfigurationNameDecoded
        let domainConfigurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainConfigurationArn)
        domainConfigurationArn = domainConfigurationArnDecoded
    }
}

public struct UpdateDynamicThingGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDynamicThingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDynamicThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDynamicThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDynamicThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDynamicThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDynamicThingGroupOutputError>
}

extension UpdateDynamicThingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDynamicThingGroupInput(expectedVersion: \(Swift.String(describing: expectedVersion)), indexName: \(Swift.String(describing: indexName)), queryString: \(Swift.String(describing: queryString)), queryVersion: \(Swift.String(describing: queryVersion)), thingGroupName: \(Swift.String(describing: thingGroupName)), thingGroupProperties: \(Swift.String(describing: thingGroupProperties)))"}
}

extension UpdateDynamicThingGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expectedVersion
        case indexName
        case queryString
        case queryVersion
        case thingGroupProperties
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expectedVersion = expectedVersion {
            try encodeContainer.encode(expectedVersion, forKey: .expectedVersion)
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let queryString = queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let queryVersion = queryVersion {
            try encodeContainer.encode(queryVersion, forKey: .queryVersion)
        }
        if let thingGroupProperties = thingGroupProperties {
            try encodeContainer.encode(thingGroupProperties, forKey: .thingGroupProperties)
        }
    }
}

public struct UpdateDynamicThingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDynamicThingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDynamicThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDynamicThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDynamicThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDynamicThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDynamicThingGroupOutputError>
}

public struct UpdateDynamicThingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDynamicThingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDynamicThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDynamicThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDynamicThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDynamicThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDynamicThingGroupOutputError>
}

public struct UpdateDynamicThingGroupInput: Swift.Equatable {
    /// <p>The expected version of the dynamic thing group to update.</p>
    public let expectedVersion: Swift.Int?
    /// <p>The dynamic thing group index to update.</p>
    /// 		       <note>
    /// 			         <p>Currently one index is supported: 'AWS_Things'.</p>
    /// 		       </note>
    public let indexName: Swift.String?
    /// <p>The dynamic thing group search query string to update.</p>
    public let queryString: Swift.String?
    /// <p>The dynamic thing group query version to update.</p>
    /// 		       <note>
    /// 			         <p>Currently one query version is supported: "2017-09-30". If not specified, the
    /// 				query version defaults to this value.</p>
    /// 		       </note>
    public let queryVersion: Swift.String?
    /// <p>The name of the dynamic thing group to update.</p>
    public let thingGroupName: Swift.String?
    /// <p>The dynamic thing group properties to update.</p>
    public let thingGroupProperties: IotClientTypes.ThingGroupProperties?

    public init (
        expectedVersion: Swift.Int? = nil,
        indexName: Swift.String? = nil,
        queryString: Swift.String? = nil,
        queryVersion: Swift.String? = nil,
        thingGroupName: Swift.String? = nil,
        thingGroupProperties: IotClientTypes.ThingGroupProperties? = nil
    )
    {
        self.expectedVersion = expectedVersion
        self.indexName = indexName
        self.queryString = queryString
        self.queryVersion = queryVersion
        self.thingGroupName = thingGroupName
        self.thingGroupProperties = thingGroupProperties
    }
}

struct UpdateDynamicThingGroupInputBody: Swift.Equatable {
    public let thingGroupProperties: IotClientTypes.ThingGroupProperties?
    public let expectedVersion: Swift.Int?
    public let indexName: Swift.String?
    public let queryString: Swift.String?
    public let queryVersion: Swift.String?
}

extension UpdateDynamicThingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expectedVersion
        case indexName
        case queryString
        case queryVersion
        case thingGroupProperties
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupPropertiesDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingGroupProperties.self, forKey: .thingGroupProperties)
        thingGroupProperties = thingGroupPropertiesDecoded
        let expectedVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expectedVersion)
        expectedVersion = expectedVersionDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let queryVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryVersion)
        queryVersion = queryVersionDecoded
    }
}

extension UpdateDynamicThingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDynamicThingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidQueryException" : self = .invalidQueryException(try InvalidQueryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionConflictException" : self = .versionConflictException(try VersionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDynamicThingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidQueryException(InvalidQueryException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case versionConflictException(VersionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDynamicThingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDynamicThingGroupOutputResponse(version: \(Swift.String(describing: version)))"}
}

extension UpdateDynamicThingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateDynamicThingGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.version = output.version
        } else {
            self.version = 0
        }
    }
}

public struct UpdateDynamicThingGroupOutputResponse: Swift.Equatable {
    /// <p>The dynamic thing group version.</p>
    public let version: Swift.Int

    public init (
        version: Swift.Int = 0
    )
    {
        self.version = version
    }
}

struct UpdateDynamicThingGroupOutputResponseBody: Swift.Equatable {
    public let version: Swift.Int
}

extension UpdateDynamicThingGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

public struct UpdateEventConfigurationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEventConfigurationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEventConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEventConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEventConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEventConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEventConfigurationsOutputError>
}

extension UpdateEventConfigurationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEventConfigurationsInput(eventConfigurations: \(Swift.String(describing: eventConfigurations)))"}
}

extension UpdateEventConfigurationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventConfigurations
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventConfigurations = eventConfigurations {
            var eventConfigurationsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .eventConfigurations)
            for (dictKey0, eventconfigurations0) in eventConfigurations {
                try eventConfigurationsContainer.encode(eventconfigurations0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct UpdateEventConfigurationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEventConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEventConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEventConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEventConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEventConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEventConfigurationsOutputError>
}

public struct UpdateEventConfigurationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEventConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEventConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEventConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEventConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEventConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEventConfigurationsOutputError>
}

public struct UpdateEventConfigurationsInput: Swift.Equatable {
    /// <p>The new event configuration values.</p>
    public let eventConfigurations: [Swift.String:IotClientTypes.Configuration]?

    public init (
        eventConfigurations: [Swift.String:IotClientTypes.Configuration]? = nil
    )
    {
        self.eventConfigurations = eventConfigurations
    }
}

struct UpdateEventConfigurationsInputBody: Swift.Equatable {
    public let eventConfigurations: [Swift.String:IotClientTypes.Configuration]?
}

extension UpdateEventConfigurationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventConfigurations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventConfigurationsContainer = try containerValues.decodeIfPresent([Swift.String: IotClientTypes.Configuration?].self, forKey: .eventConfigurations)
        var eventConfigurationsDecoded0: [Swift.String:IotClientTypes.Configuration]? = nil
        if let eventConfigurationsContainer = eventConfigurationsContainer {
            eventConfigurationsDecoded0 = [Swift.String:IotClientTypes.Configuration]()
            for (key0, configuration0) in eventConfigurationsContainer {
                if let configuration0 = configuration0 {
                    eventConfigurationsDecoded0?[key0] = configuration0
                }
            }
        }
        eventConfigurations = eventConfigurationsDecoded0
    }
}

extension UpdateEventConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEventConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateEventConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEventConfigurationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEventConfigurationsOutputResponse()"}
}

extension UpdateEventConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateEventConfigurationsOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateEventConfigurationsOutputResponseBody: Swift.Equatable {
}

extension UpdateEventConfigurationsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateIndexingConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateIndexingConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateIndexingConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateIndexingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateIndexingConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateIndexingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateIndexingConfigurationOutputError>
}

extension UpdateIndexingConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateIndexingConfigurationInput(thingGroupIndexingConfiguration: \(Swift.String(describing: thingGroupIndexingConfiguration)), thingIndexingConfiguration: \(Swift.String(describing: thingIndexingConfiguration)))"}
}

extension UpdateIndexingConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case thingGroupIndexingConfiguration
        case thingIndexingConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let thingGroupIndexingConfiguration = thingGroupIndexingConfiguration {
            try encodeContainer.encode(thingGroupIndexingConfiguration, forKey: .thingGroupIndexingConfiguration)
        }
        if let thingIndexingConfiguration = thingIndexingConfiguration {
            try encodeContainer.encode(thingIndexingConfiguration, forKey: .thingIndexingConfiguration)
        }
    }
}

public struct UpdateIndexingConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateIndexingConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateIndexingConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateIndexingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateIndexingConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateIndexingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateIndexingConfigurationOutputError>
}

public struct UpdateIndexingConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateIndexingConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateIndexingConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateIndexingConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateIndexingConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateIndexingConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateIndexingConfigurationOutputError>
}

public struct UpdateIndexingConfigurationInput: Swift.Equatable {
    /// <p>Thing group indexing configuration.</p>
    public let thingGroupIndexingConfiguration: IotClientTypes.ThingGroupIndexingConfiguration?
    /// <p>Thing indexing configuration.</p>
    public let thingIndexingConfiguration: IotClientTypes.ThingIndexingConfiguration?

    public init (
        thingGroupIndexingConfiguration: IotClientTypes.ThingGroupIndexingConfiguration? = nil,
        thingIndexingConfiguration: IotClientTypes.ThingIndexingConfiguration? = nil
    )
    {
        self.thingGroupIndexingConfiguration = thingGroupIndexingConfiguration
        self.thingIndexingConfiguration = thingIndexingConfiguration
    }
}

struct UpdateIndexingConfigurationInputBody: Swift.Equatable {
    public let thingIndexingConfiguration: IotClientTypes.ThingIndexingConfiguration?
    public let thingGroupIndexingConfiguration: IotClientTypes.ThingGroupIndexingConfiguration?
}

extension UpdateIndexingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case thingGroupIndexingConfiguration
        case thingIndexingConfiguration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingIndexingConfigurationDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingIndexingConfiguration.self, forKey: .thingIndexingConfiguration)
        thingIndexingConfiguration = thingIndexingConfigurationDecoded
        let thingGroupIndexingConfigurationDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingGroupIndexingConfiguration.self, forKey: .thingGroupIndexingConfiguration)
        thingGroupIndexingConfiguration = thingGroupIndexingConfigurationDecoded
    }
}

extension UpdateIndexingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateIndexingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateIndexingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateIndexingConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateIndexingConfigurationOutputResponse()"}
}

extension UpdateIndexingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateIndexingConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateIndexingConfigurationOutputResponseBody: Swift.Equatable {
}

extension UpdateIndexingConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateJobOutputError>
}

extension UpdateJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateJobInput(abortConfig: \(Swift.String(describing: abortConfig)), description: \(Swift.String(describing: description)), jobExecutionsRolloutConfig: \(Swift.String(describing: jobExecutionsRolloutConfig)), jobId: \(Swift.String(describing: jobId)), namespaceId: \(Swift.String(describing: namespaceId)), presignedUrlConfig: \(Swift.String(describing: presignedUrlConfig)), timeoutConfig: \(Swift.String(describing: timeoutConfig)))"}
}

extension UpdateJobInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortConfig
        case description
        case jobExecutionsRolloutConfig
        case presignedUrlConfig
        case timeoutConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let abortConfig = abortConfig {
            try encodeContainer.encode(abortConfig, forKey: .abortConfig)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let jobExecutionsRolloutConfig = jobExecutionsRolloutConfig {
            try encodeContainer.encode(jobExecutionsRolloutConfig, forKey: .jobExecutionsRolloutConfig)
        }
        if let presignedUrlConfig = presignedUrlConfig {
            try encodeContainer.encode(presignedUrlConfig, forKey: .presignedUrlConfig)
        }
        if let timeoutConfig = timeoutConfig {
            try encodeContainer.encode(timeoutConfig, forKey: .timeoutConfig)
        }
    }
}

public struct UpdateJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateJobOutputError>
}

public struct UpdateJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let namespaceId = input.operationInput.namespaceId {
            let namespaceIdQueryItem = ClientRuntime.URLQueryItem(name: "namespaceId".urlPercentEncoding(), value: Swift.String(namespaceId).urlPercentEncoding())
            input.builder.withQueryItem(namespaceIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateJobOutputError>
}

public struct UpdateJobInput: Swift.Equatable {
    /// <p>Allows you to create criteria to abort a job.</p>
    public let abortConfig: IotClientTypes.AbortConfig?
    /// <p>A short text description of the job.</p>
    public let description: Swift.String?
    /// <p>Allows you to create a staged rollout of the job.</p>
    public let jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig?
    /// <p>The ID of the job to be updated.</p>
    public let jobId: Swift.String?
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    ///         <p>When you specify a value for this parameter, AWS IoT Core sends jobs notifications to MQTT topics that
    ///             contain the value in the following format.</p>
    ///         <p>
    ///             <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code>
    ///          </p>
    ///         <note>
    ///             <p>The <code>namespaceId</code> feature is in public preview.</p>
    ///          </note>
    public let namespaceId: Swift.String?
    /// <p>Configuration information for pre-signed S3 URLs.</p>
    public let presignedUrlConfig: IotClientTypes.PresignedUrlConfig?
    /// <p>Specifies the amount of time each device has to finish its execution of the job. The timer is started when the job execution status is set to <code>IN_PROGRESS</code>.
    ///             If the job execution status is not set to another terminal state before the time expires, it will be automatically set to <code>TIMED_OUT</code>. </p>
    public let timeoutConfig: IotClientTypes.TimeoutConfig?

    public init (
        abortConfig: IotClientTypes.AbortConfig? = nil,
        description: Swift.String? = nil,
        jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig? = nil,
        jobId: Swift.String? = nil,
        namespaceId: Swift.String? = nil,
        presignedUrlConfig: IotClientTypes.PresignedUrlConfig? = nil,
        timeoutConfig: IotClientTypes.TimeoutConfig? = nil
    )
    {
        self.abortConfig = abortConfig
        self.description = description
        self.jobExecutionsRolloutConfig = jobExecutionsRolloutConfig
        self.jobId = jobId
        self.namespaceId = namespaceId
        self.presignedUrlConfig = presignedUrlConfig
        self.timeoutConfig = timeoutConfig
    }
}

struct UpdateJobInputBody: Swift.Equatable {
    public let description: Swift.String?
    public let presignedUrlConfig: IotClientTypes.PresignedUrlConfig?
    public let jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig?
    public let abortConfig: IotClientTypes.AbortConfig?
    public let timeoutConfig: IotClientTypes.TimeoutConfig?
}

extension UpdateJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortConfig
        case description
        case jobExecutionsRolloutConfig
        case presignedUrlConfig
        case timeoutConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let presignedUrlConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.PresignedUrlConfig.self, forKey: .presignedUrlConfig)
        presignedUrlConfig = presignedUrlConfigDecoded
        let jobExecutionsRolloutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobExecutionsRolloutConfig.self, forKey: .jobExecutionsRolloutConfig)
        jobExecutionsRolloutConfig = jobExecutionsRolloutConfigDecoded
        let abortConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AbortConfig.self, forKey: .abortConfig)
        abortConfig = abortConfigDecoded
        let timeoutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.TimeoutConfig.self, forKey: .timeoutConfig)
        timeoutConfig = timeoutConfigDecoded
    }
}

extension UpdateJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateJobOutputError: Swift.Error, Swift.Equatable {
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateJobOutputResponse()"}
}

extension UpdateJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateJobOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateJobOutputResponseBody: Swift.Equatable {
}

extension UpdateJobOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateMitigationActionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMitigationActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMitigationActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMitigationActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMitigationActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMitigationActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMitigationActionOutputError>
}

extension UpdateMitigationActionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateMitigationActionInput(actionName: \(Swift.String(describing: actionName)), actionParams: \(Swift.String(describing: actionParams)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension UpdateMitigationActionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionParams
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionParams = actionParams {
            try encodeContainer.encode(actionParams, forKey: .actionParams)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

public struct UpdateMitigationActionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMitigationActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMitigationActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMitigationActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMitigationActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMitigationActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMitigationActionOutputError>
}

public struct UpdateMitigationActionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMitigationActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMitigationActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMitigationActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMitigationActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMitigationActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMitigationActionOutputError>
}

public struct UpdateMitigationActionInput: Swift.Equatable {
    /// <p>The friendly name for the mitigation action. You cannot change the name by using
    ///         <code>UpdateMitigationAction</code>. Instead, you must delete and
    ///       recreate the
    ///       mitigation action with the new name.</p>
    public let actionName: Swift.String?
    /// <p>Defines the type of action and the parameters for that action.</p>
    public let actionParams: IotClientTypes.MitigationActionParams?
    /// <p>The ARN of the IAM role that is used to apply the mitigation action.</p>
    public let roleArn: Swift.String?

    public init (
        actionName: Swift.String? = nil,
        actionParams: IotClientTypes.MitigationActionParams? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.actionName = actionName
        self.actionParams = actionParams
        self.roleArn = roleArn
    }
}

struct UpdateMitigationActionInputBody: Swift.Equatable {
    public let roleArn: Swift.String?
    public let actionParams: IotClientTypes.MitigationActionParams?
}

extension UpdateMitigationActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionParams
        case roleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let actionParamsDecoded = try containerValues.decodeIfPresent(IotClientTypes.MitigationActionParams.self, forKey: .actionParams)
        actionParams = actionParamsDecoded
    }
}

extension UpdateMitigationActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMitigationActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateMitigationActionOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMitigationActionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateMitigationActionOutputResponse(actionArn: \(Swift.String(describing: actionArn)), actionId: \(Swift.String(describing: actionId)))"}
}

extension UpdateMitigationActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateMitigationActionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionArn = output.actionArn
            self.actionId = output.actionId
        } else {
            self.actionArn = nil
            self.actionId = nil
        }
    }
}

public struct UpdateMitigationActionOutputResponse: Swift.Equatable {
    /// <p>The ARN for the new mitigation action.</p>
    public let actionArn: Swift.String?
    /// <p>A unique identifier for the mitigation action.</p>
    public let actionId: Swift.String?

    public init (
        actionArn: Swift.String? = nil,
        actionId: Swift.String? = nil
    )
    {
        self.actionArn = actionArn
        self.actionId = actionId
    }
}

struct UpdateMitigationActionOutputResponseBody: Swift.Equatable {
    public let actionArn: Swift.String?
    public let actionId: Swift.String?
}

extension UpdateMitigationActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionArn
        case actionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionArn)
        actionArn = actionArnDecoded
        let actionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionId)
        actionId = actionIdDecoded
    }
}

public struct UpdateProvisioningTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateProvisioningTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateProvisioningTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateProvisioningTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateProvisioningTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateProvisioningTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateProvisioningTemplateOutputError>
}

extension UpdateProvisioningTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateProvisioningTemplateInput(defaultVersionId: \(Swift.String(describing: defaultVersionId)), description: \(Swift.String(describing: description)), enabled: \(Swift.String(describing: enabled)), preProvisioningHook: \(Swift.String(describing: preProvisioningHook)), provisioningRoleArn: \(Swift.String(describing: provisioningRoleArn)), removePreProvisioningHook: \(Swift.String(describing: removePreProvisioningHook)), templateName: \(Swift.String(describing: templateName)))"}
}

extension UpdateProvisioningTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultVersionId
        case description
        case enabled
        case preProvisioningHook
        case provisioningRoleArn
        case removePreProvisioningHook
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultVersionId = defaultVersionId {
            try encodeContainer.encode(defaultVersionId, forKey: .defaultVersionId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let preProvisioningHook = preProvisioningHook {
            try encodeContainer.encode(preProvisioningHook, forKey: .preProvisioningHook)
        }
        if let provisioningRoleArn = provisioningRoleArn {
            try encodeContainer.encode(provisioningRoleArn, forKey: .provisioningRoleArn)
        }
        if let removePreProvisioningHook = removePreProvisioningHook {
            try encodeContainer.encode(removePreProvisioningHook, forKey: .removePreProvisioningHook)
        }
    }
}

public struct UpdateProvisioningTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateProvisioningTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateProvisioningTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateProvisioningTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateProvisioningTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateProvisioningTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateProvisioningTemplateOutputError>
}

public struct UpdateProvisioningTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateProvisioningTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateProvisioningTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateProvisioningTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateProvisioningTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateProvisioningTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateProvisioningTemplateOutputError>
}

public struct UpdateProvisioningTemplateInput: Swift.Equatable {
    /// <p>The ID of the default provisioning template version.</p>
    public let defaultVersionId: Swift.Int?
    /// <p>The description of the fleet provisioning template.</p>
    public let description: Swift.String?
    /// <p>True to enable the fleet provisioning template, otherwise false.</p>
    public let enabled: Swift.Bool
    /// <p>Updates the pre-provisioning hook template.</p>
    public let preProvisioningHook: IotClientTypes.ProvisioningHook?
    /// <p>The ARN of the role associated with the provisioning template. This IoT role grants
    ///          permission to provision a device.</p>
    public let provisioningRoleArn: Swift.String?
    /// <p>Removes pre-provisioning hook template.</p>
    public let removePreProvisioningHook: Swift.Bool?
    /// <p>The name of the fleet provisioning template.</p>
    public let templateName: Swift.String?

    public init (
        defaultVersionId: Swift.Int? = nil,
        description: Swift.String? = nil,
        enabled: Swift.Bool = false,
        preProvisioningHook: IotClientTypes.ProvisioningHook? = nil,
        provisioningRoleArn: Swift.String? = nil,
        removePreProvisioningHook: Swift.Bool? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.defaultVersionId = defaultVersionId
        self.description = description
        self.enabled = enabled
        self.preProvisioningHook = preProvisioningHook
        self.provisioningRoleArn = provisioningRoleArn
        self.removePreProvisioningHook = removePreProvisioningHook
        self.templateName = templateName
    }
}

struct UpdateProvisioningTemplateInputBody: Swift.Equatable {
    public let description: Swift.String?
    public let enabled: Swift.Bool
    public let defaultVersionId: Swift.Int?
    public let provisioningRoleArn: Swift.String?
    public let preProvisioningHook: IotClientTypes.ProvisioningHook?
    public let removePreProvisioningHook: Swift.Bool?
}

extension UpdateProvisioningTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultVersionId
        case description
        case enabled
        case preProvisioningHook
        case provisioningRoleArn
        case removePreProvisioningHook
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let provisioningRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provisioningRoleArn)
        provisioningRoleArn = provisioningRoleArnDecoded
        let preProvisioningHookDecoded = try containerValues.decodeIfPresent(IotClientTypes.ProvisioningHook.self, forKey: .preProvisioningHook)
        preProvisioningHook = preProvisioningHookDecoded
        let removePreProvisioningHookDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .removePreProvisioningHook)
        removePreProvisioningHook = removePreProvisioningHookDecoded
    }
}

extension UpdateProvisioningTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateProvisioningTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingResourceUpdateException" : self = .conflictingResourceUpdateException(try ConflictingResourceUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateProvisioningTemplateOutputError: Swift.Error, Swift.Equatable {
    case conflictingResourceUpdateException(ConflictingResourceUpdateException)
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateProvisioningTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateProvisioningTemplateOutputResponse()"}
}

extension UpdateProvisioningTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateProvisioningTemplateOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateProvisioningTemplateOutputResponseBody: Swift.Equatable {
}

extension UpdateProvisioningTemplateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateRoleAliasInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoleAliasInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoleAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoleAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoleAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoleAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoleAliasOutputError>
}

extension UpdateRoleAliasInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoleAliasInput(credentialDurationSeconds: \(Swift.String(describing: credentialDurationSeconds)), roleAlias: \(Swift.String(describing: roleAlias)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension UpdateRoleAliasInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case credentialDurationSeconds
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let credentialDurationSeconds = credentialDurationSeconds {
            try encodeContainer.encode(credentialDurationSeconds, forKey: .credentialDurationSeconds)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

public struct UpdateRoleAliasInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoleAliasInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoleAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoleAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoleAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoleAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoleAliasOutputError>
}

public struct UpdateRoleAliasInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoleAliasInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoleAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoleAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoleAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoleAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoleAliasOutputError>
}

public struct UpdateRoleAliasInput: Swift.Equatable {
    /// <p>The number of seconds the credential will be valid.</p>
    public let credentialDurationSeconds: Swift.Int?
    /// <p>The role alias to update.</p>
    public let roleAlias: Swift.String?
    /// <p>The role ARN.</p>
    public let roleArn: Swift.String?

    public init (
        credentialDurationSeconds: Swift.Int? = nil,
        roleAlias: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.credentialDurationSeconds = credentialDurationSeconds
        self.roleAlias = roleAlias
        self.roleArn = roleArn
    }
}

struct UpdateRoleAliasInputBody: Swift.Equatable {
    public let roleArn: Swift.String?
    public let credentialDurationSeconds: Swift.Int?
}

extension UpdateRoleAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case credentialDurationSeconds
        case roleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let credentialDurationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .credentialDurationSeconds)
        credentialDurationSeconds = credentialDurationSecondsDecoded
    }
}

extension UpdateRoleAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRoleAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRoleAliasOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRoleAliasOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoleAliasOutputResponse(roleAlias: \(Swift.String(describing: roleAlias)), roleAliasArn: \(Swift.String(describing: roleAliasArn)))"}
}

extension UpdateRoleAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateRoleAliasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.roleAlias = output.roleAlias
            self.roleAliasArn = output.roleAliasArn
        } else {
            self.roleAlias = nil
            self.roleAliasArn = nil
        }
    }
}

public struct UpdateRoleAliasOutputResponse: Swift.Equatable {
    /// <p>The role alias.</p>
    public let roleAlias: Swift.String?
    /// <p>The role alias ARN.</p>
    public let roleAliasArn: Swift.String?

    public init (
        roleAlias: Swift.String? = nil,
        roleAliasArn: Swift.String? = nil
    )
    {
        self.roleAlias = roleAlias
        self.roleAliasArn = roleAliasArn
    }
}

struct UpdateRoleAliasOutputResponseBody: Swift.Equatable {
    public let roleAlias: Swift.String?
    public let roleAliasArn: Swift.String?
}

extension UpdateRoleAliasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleAlias
        case roleAliasArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleAlias)
        roleAlias = roleAliasDecoded
        let roleAliasArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleAliasArn)
        roleAliasArn = roleAliasArnDecoded
    }
}

public struct UpdateScheduledAuditInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateScheduledAuditInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateScheduledAuditInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateScheduledAuditOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateScheduledAuditInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateScheduledAuditOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateScheduledAuditOutputError>
}

extension UpdateScheduledAuditInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateScheduledAuditInput(dayOfMonth: \(Swift.String(describing: dayOfMonth)), dayOfWeek: \(Swift.String(describing: dayOfWeek)), frequency: \(Swift.String(describing: frequency)), scheduledAuditName: \(Swift.String(describing: scheduledAuditName)), targetCheckNames: \(Swift.String(describing: targetCheckNames)))"}
}

extension UpdateScheduledAuditInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dayOfMonth
        case dayOfWeek
        case frequency
        case targetCheckNames
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dayOfMonth = dayOfMonth {
            try encodeContainer.encode(dayOfMonth, forKey: .dayOfMonth)
        }
        if let dayOfWeek = dayOfWeek {
            try encodeContainer.encode(dayOfWeek.rawValue, forKey: .dayOfWeek)
        }
        if let frequency = frequency {
            try encodeContainer.encode(frequency.rawValue, forKey: .frequency)
        }
        if let targetCheckNames = targetCheckNames {
            var targetCheckNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetCheckNames)
            for targetauditchecknames0 in targetCheckNames {
                try targetCheckNamesContainer.encode(targetauditchecknames0)
            }
        }
    }
}

public struct UpdateScheduledAuditInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateScheduledAuditInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateScheduledAuditInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateScheduledAuditOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateScheduledAuditInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateScheduledAuditOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateScheduledAuditOutputError>
}

public struct UpdateScheduledAuditInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateScheduledAuditInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateScheduledAuditInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateScheduledAuditOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateScheduledAuditInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateScheduledAuditOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateScheduledAuditOutputError>
}

public struct UpdateScheduledAuditInput: Swift.Equatable {
    /// <p>The day of the month on which the scheduled audit takes place.
    ///       This
    ///       can
    ///       be <code>1</code> through <code>31</code> or <code>LAST</code>. This field is required if the <code>frequency</code> parameter is set to
    ///             <code>MONTHLY</code>. If days 29-31 are specified, and the month does not have that many days, the audit
    ///       takes place on the "LAST" day of the month.</p>
    public let dayOfMonth: Swift.String?
    /// <p>The day of the week on which the scheduled audit takes place.
    ///       This
    ///       can
    ///       be one of <code>SUN</code>, <code>MON</code>, <code>TUE</code>, <code>WED</code>, <code>THU</code>, <code>FRI</code>, or <code>SAT</code>. This field is required if the
    ///             "frequency" parameter is set to <code>WEEKLY</code> or <code>BIWEEKLY</code>.</p>
    public let dayOfWeek: IotClientTypes.DayOfWeek?
    /// <p>How often the scheduled audit takes
    ///       place,
    ///       either <code>DAILY</code>,
    ///       <code>WEEKLY</code>, <code>BIWEEKLY</code>, or <code>MONTHLY</code>. The start time of each audit is determined by the
    ///       system.</p>
    public let frequency: IotClientTypes.AuditFrequency?
    /// <p>The name of the scheduled audit. (Max. 128 chars)</p>
    public let scheduledAuditName: Swift.String?
    /// <p>Which checks are performed during the scheduled audit. Checks must be enabled
    ///             for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list
    ///             of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code>
    ///             to select which checks are enabled.)</p>
    public let targetCheckNames: [Swift.String]?

    public init (
        dayOfMonth: Swift.String? = nil,
        dayOfWeek: IotClientTypes.DayOfWeek? = nil,
        frequency: IotClientTypes.AuditFrequency? = nil,
        scheduledAuditName: Swift.String? = nil,
        targetCheckNames: [Swift.String]? = nil
    )
    {
        self.dayOfMonth = dayOfMonth
        self.dayOfWeek = dayOfWeek
        self.frequency = frequency
        self.scheduledAuditName = scheduledAuditName
        self.targetCheckNames = targetCheckNames
    }
}

struct UpdateScheduledAuditInputBody: Swift.Equatable {
    public let frequency: IotClientTypes.AuditFrequency?
    public let dayOfMonth: Swift.String?
    public let dayOfWeek: IotClientTypes.DayOfWeek?
    public let targetCheckNames: [Swift.String]?
}

extension UpdateScheduledAuditInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dayOfMonth
        case dayOfWeek
        case frequency
        case targetCheckNames
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let frequencyDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditFrequency.self, forKey: .frequency)
        frequency = frequencyDecoded
        let dayOfMonthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dayOfMonth)
        dayOfMonth = dayOfMonthDecoded
        let dayOfWeekDecoded = try containerValues.decodeIfPresent(IotClientTypes.DayOfWeek.self, forKey: .dayOfWeek)
        dayOfWeek = dayOfWeekDecoded
        let targetCheckNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetCheckNames)
        var targetCheckNamesDecoded0:[Swift.String]? = nil
        if let targetCheckNamesContainer = targetCheckNamesContainer {
            targetCheckNamesDecoded0 = [Swift.String]()
            for string0 in targetCheckNamesContainer {
                if let string0 = string0 {
                    targetCheckNamesDecoded0?.append(string0)
                }
            }
        }
        targetCheckNames = targetCheckNamesDecoded0
    }
}

extension UpdateScheduledAuditOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateScheduledAuditOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateScheduledAuditOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateScheduledAuditOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateScheduledAuditOutputResponse(scheduledAuditArn: \(Swift.String(describing: scheduledAuditArn)))"}
}

extension UpdateScheduledAuditOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateScheduledAuditOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.scheduledAuditArn = output.scheduledAuditArn
        } else {
            self.scheduledAuditArn = nil
        }
    }
}

public struct UpdateScheduledAuditOutputResponse: Swift.Equatable {
    /// <p>The ARN of the scheduled audit.</p>
    public let scheduledAuditArn: Swift.String?

    public init (
        scheduledAuditArn: Swift.String? = nil
    )
    {
        self.scheduledAuditArn = scheduledAuditArn
    }
}

struct UpdateScheduledAuditOutputResponseBody: Swift.Equatable {
    public let scheduledAuditArn: Swift.String?
}

extension UpdateScheduledAuditOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduledAuditArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledAuditArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledAuditArn)
        scheduledAuditArn = scheduledAuditArnDecoded
    }
}

public struct UpdateSecurityProfileInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateSecurityProfileInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateSecurityProfileOutputError>
}

extension UpdateSecurityProfileInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSecurityProfileInput(additionalMetricsToRetain: \(Swift.String(describing: additionalMetricsToRetain)), additionalMetricsToRetainV2: \(Swift.String(describing: additionalMetricsToRetainV2)), alertTargets: \(Swift.String(describing: alertTargets)), behaviors: \(Swift.String(describing: behaviors)), deleteAdditionalMetricsToRetain: \(Swift.String(describing: deleteAdditionalMetricsToRetain)), deleteAlertTargets: \(Swift.String(describing: deleteAlertTargets)), deleteBehaviors: \(Swift.String(describing: deleteBehaviors)), expectedVersion: \(Swift.String(describing: expectedVersion)), securityProfileDescription: \(Swift.String(describing: securityProfileDescription)), securityProfileName: \(Swift.String(describing: securityProfileName)))"}
}

extension UpdateSecurityProfileInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalMetricsToRetain
        case additionalMetricsToRetainV2
        case alertTargets
        case behaviors
        case deleteAdditionalMetricsToRetain
        case deleteAlertTargets
        case deleteBehaviors
        case securityProfileDescription
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalMetricsToRetain = additionalMetricsToRetain {
            var additionalMetricsToRetainContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalMetricsToRetain)
            for additionalmetricstoretainlist0 in additionalMetricsToRetain {
                try additionalMetricsToRetainContainer.encode(additionalmetricstoretainlist0)
            }
        }
        if let additionalMetricsToRetainV2 = additionalMetricsToRetainV2 {
            var additionalMetricsToRetainV2Container = encodeContainer.nestedUnkeyedContainer(forKey: .additionalMetricsToRetainV2)
            for additionalmetricstoretainv2list0 in additionalMetricsToRetainV2 {
                try additionalMetricsToRetainV2Container.encode(additionalmetricstoretainv2list0)
            }
        }
        if let alertTargets = alertTargets {
            var alertTargetsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .alertTargets)
            for (dictKey0, alerttargets0) in alertTargets {
                try alertTargetsContainer.encode(alerttargets0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let behaviors = behaviors {
            var behaviorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .behaviors)
            for behaviors0 in behaviors {
                try behaviorsContainer.encode(behaviors0)
            }
        }
        if deleteAdditionalMetricsToRetain != false {
            try encodeContainer.encode(deleteAdditionalMetricsToRetain, forKey: .deleteAdditionalMetricsToRetain)
        }
        if deleteAlertTargets != false {
            try encodeContainer.encode(deleteAlertTargets, forKey: .deleteAlertTargets)
        }
        if deleteBehaviors != false {
            try encodeContainer.encode(deleteBehaviors, forKey: .deleteBehaviors)
        }
        if let securityProfileDescription = securityProfileDescription {
            try encodeContainer.encode(securityProfileDescription, forKey: .securityProfileDescription)
        }
    }
}

public struct UpdateSecurityProfileInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateSecurityProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateSecurityProfileOutputError>
}

public struct UpdateSecurityProfileInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateSecurityProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateSecurityProfileInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateSecurityProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedVersion = input.operationInput.expectedVersion {
            let expectedVersionQueryItem = ClientRuntime.URLQueryItem(name: "expectedVersion".urlPercentEncoding(), value: Swift.String(expectedVersion).urlPercentEncoding())
            input.builder.withQueryItem(expectedVersionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateSecurityProfileInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateSecurityProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateSecurityProfileOutputError>
}

public struct UpdateSecurityProfileInput: Swift.Equatable {
    /// <p>
    ///             <i>Please use
    ///           <a>UpdateSecurityProfileRequest$additionalMetricsToRetainV2</a>
    ///         instead.</i>
    ///          </p>
    ///          <p>A list of metrics
    ///      whose data is retained (stored). By default, data is retained for any metric
    ///       used in the profile's <code>behaviors</code>, but
    ///       it is
    ///       also retained for any metric specified here. Can be used with custom metrics; cannot be used with dimensions.</p>
    @available(*, deprecated, message: "Use additionalMetricsToRetainV2.")
    public let additionalMetricsToRetain: [Swift.String]?
    /// <p>A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's behaviors, but it is also retained for any metric specified here. Can be used with custom metrics; cannot be used with dimensions.</p>
    public let additionalMetricsToRetainV2: [IotClientTypes.MetricToRetain]?
    /// <p>Where the alerts are sent. (Alerts are always sent to the console.)</p>
    public let alertTargets: [Swift.String:IotClientTypes.AlertTarget]?
    /// <p>Specifies the behaviors that, when violated by a device (thing), cause an alert.</p>
    public let behaviors: [IotClientTypes.Behavior]?
    /// <p>If true, delete all <code>additionalMetricsToRetain</code> defined for this
    ///         security profile. If any <code>additionalMetricsToRetain</code> are defined in the current
    ///         invocation, an exception occurs.</p>
    public let deleteAdditionalMetricsToRetain: Swift.Bool
    /// <p>If true, delete all <code>alertTargets</code> defined for this security profile.
    ///         If any <code>alertTargets</code> are defined in the current invocation, an exception occurs.</p>
    public let deleteAlertTargets: Swift.Bool
    /// <p>If true, delete all <code>behaviors</code> defined for this security profile.
    ///         If any <code>behaviors</code> are defined in the current invocation, an exception occurs.</p>
    public let deleteBehaviors: Swift.Bool
    /// <p>The expected version of the security profile. A new version is generated whenever
    ///         the security profile is updated. If you specify a value that is different from the actual
    ///         version, a <code>VersionConflictException</code> is thrown.</p>
    public let expectedVersion: Swift.Int?
    /// <p>A description of the security profile.</p>
    public let securityProfileDescription: Swift.String?
    /// <p>The name of the security profile you want to update.</p>
    public let securityProfileName: Swift.String?

    public init (
        additionalMetricsToRetain: [Swift.String]? = nil,
        additionalMetricsToRetainV2: [IotClientTypes.MetricToRetain]? = nil,
        alertTargets: [Swift.String:IotClientTypes.AlertTarget]? = nil,
        behaviors: [IotClientTypes.Behavior]? = nil,
        deleteAdditionalMetricsToRetain: Swift.Bool = false,
        deleteAlertTargets: Swift.Bool = false,
        deleteBehaviors: Swift.Bool = false,
        expectedVersion: Swift.Int? = nil,
        securityProfileDescription: Swift.String? = nil,
        securityProfileName: Swift.String? = nil
    )
    {
        self.additionalMetricsToRetain = additionalMetricsToRetain
        self.additionalMetricsToRetainV2 = additionalMetricsToRetainV2
        self.alertTargets = alertTargets
        self.behaviors = behaviors
        self.deleteAdditionalMetricsToRetain = deleteAdditionalMetricsToRetain
        self.deleteAlertTargets = deleteAlertTargets
        self.deleteBehaviors = deleteBehaviors
        self.expectedVersion = expectedVersion
        self.securityProfileDescription = securityProfileDescription
        self.securityProfileName = securityProfileName
    }
}

struct UpdateSecurityProfileInputBody: Swift.Equatable {
    public let securityProfileDescription: Swift.String?
    public let behaviors: [IotClientTypes.Behavior]?
    public let alertTargets: [Swift.String:IotClientTypes.AlertTarget]?
    public let additionalMetricsToRetain: [Swift.String]?
    public let additionalMetricsToRetainV2: [IotClientTypes.MetricToRetain]?
    public let deleteBehaviors: Swift.Bool
    public let deleteAlertTargets: Swift.Bool
    public let deleteAdditionalMetricsToRetain: Swift.Bool
}

extension UpdateSecurityProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalMetricsToRetain
        case additionalMetricsToRetainV2
        case alertTargets
        case behaviors
        case deleteAdditionalMetricsToRetain
        case deleteAlertTargets
        case deleteBehaviors
        case securityProfileDescription
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityProfileDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityProfileDescription)
        securityProfileDescription = securityProfileDescriptionDecoded
        let behaviorsContainer = try containerValues.decodeIfPresent([IotClientTypes.Behavior?].self, forKey: .behaviors)
        var behaviorsDecoded0:[IotClientTypes.Behavior]? = nil
        if let behaviorsContainer = behaviorsContainer {
            behaviorsDecoded0 = [IotClientTypes.Behavior]()
            for structure0 in behaviorsContainer {
                if let structure0 = structure0 {
                    behaviorsDecoded0?.append(structure0)
                }
            }
        }
        behaviors = behaviorsDecoded0
        let alertTargetsContainer = try containerValues.decodeIfPresent([Swift.String: IotClientTypes.AlertTarget?].self, forKey: .alertTargets)
        var alertTargetsDecoded0: [Swift.String:IotClientTypes.AlertTarget]? = nil
        if let alertTargetsContainer = alertTargetsContainer {
            alertTargetsDecoded0 = [Swift.String:IotClientTypes.AlertTarget]()
            for (key0, alerttarget0) in alertTargetsContainer {
                if let alerttarget0 = alerttarget0 {
                    alertTargetsDecoded0?[key0] = alerttarget0
                }
            }
        }
        alertTargets = alertTargetsDecoded0
        let additionalMetricsToRetainContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalMetricsToRetain)
        var additionalMetricsToRetainDecoded0:[Swift.String]? = nil
        if let additionalMetricsToRetainContainer = additionalMetricsToRetainContainer {
            additionalMetricsToRetainDecoded0 = [Swift.String]()
            for string0 in additionalMetricsToRetainContainer {
                if let string0 = string0 {
                    additionalMetricsToRetainDecoded0?.append(string0)
                }
            }
        }
        additionalMetricsToRetain = additionalMetricsToRetainDecoded0
        let additionalMetricsToRetainV2Container = try containerValues.decodeIfPresent([IotClientTypes.MetricToRetain?].self, forKey: .additionalMetricsToRetainV2)
        var additionalMetricsToRetainV2Decoded0:[IotClientTypes.MetricToRetain]? = nil
        if let additionalMetricsToRetainV2Container = additionalMetricsToRetainV2Container {
            additionalMetricsToRetainV2Decoded0 = [IotClientTypes.MetricToRetain]()
            for structure0 in additionalMetricsToRetainV2Container {
                if let structure0 = structure0 {
                    additionalMetricsToRetainV2Decoded0?.append(structure0)
                }
            }
        }
        additionalMetricsToRetainV2 = additionalMetricsToRetainV2Decoded0
        let deleteBehaviorsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .deleteBehaviors)
        deleteBehaviors = deleteBehaviorsDecoded
        let deleteAlertTargetsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .deleteAlertTargets)
        deleteAlertTargets = deleteAlertTargetsDecoded
        let deleteAdditionalMetricsToRetainDecoded = try containerValues.decode(Swift.Bool.self, forKey: .deleteAdditionalMetricsToRetain)
        deleteAdditionalMetricsToRetain = deleteAdditionalMetricsToRetainDecoded
    }
}

extension UpdateSecurityProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateSecurityProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionConflictException" : self = .versionConflictException(try VersionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateSecurityProfileOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case versionConflictException(VersionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSecurityProfileOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSecurityProfileOutputResponse(additionalMetricsToRetain: \(Swift.String(describing: additionalMetricsToRetain)), additionalMetricsToRetainV2: \(Swift.String(describing: additionalMetricsToRetainV2)), alertTargets: \(Swift.String(describing: alertTargets)), behaviors: \(Swift.String(describing: behaviors)), creationDate: \(Swift.String(describing: creationDate)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), securityProfileArn: \(Swift.String(describing: securityProfileArn)), securityProfileDescription: \(Swift.String(describing: securityProfileDescription)), securityProfileName: \(Swift.String(describing: securityProfileName)), version: \(Swift.String(describing: version)))"}
}

extension UpdateSecurityProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateSecurityProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.additionalMetricsToRetain = output.additionalMetricsToRetain
            self.additionalMetricsToRetainV2 = output.additionalMetricsToRetainV2
            self.alertTargets = output.alertTargets
            self.behaviors = output.behaviors
            self.creationDate = output.creationDate
            self.lastModifiedDate = output.lastModifiedDate
            self.securityProfileArn = output.securityProfileArn
            self.securityProfileDescription = output.securityProfileDescription
            self.securityProfileName = output.securityProfileName
            self.version = output.version
        } else {
            self.additionalMetricsToRetain = nil
            self.additionalMetricsToRetainV2 = nil
            self.alertTargets = nil
            self.behaviors = nil
            self.creationDate = nil
            self.lastModifiedDate = nil
            self.securityProfileArn = nil
            self.securityProfileDescription = nil
            self.securityProfileName = nil
            self.version = 0
        }
    }
}

public struct UpdateSecurityProfileOutputResponse: Swift.Equatable {
    /// <p>
    ///             <i>Please use
    ///           <a>UpdateSecurityProfileResponse$additionalMetricsToRetainV2</a>
    ///         instead.</i>
    ///          </p>
    ///          <p>A list of metrics
    ///       whose data is retained (stored). By default, data is retained for any metric
    ///       used in the security profile's <code>behaviors</code>, but
    ///       it is
    ///       also retained for any metric specified here.</p>
    @available(*, deprecated, message: "Use additionalMetricsToRetainV2.")
    public let additionalMetricsToRetain: [Swift.String]?
    /// <p>A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's behaviors, but it is also retained for any metric specified here. Can be used with custom metrics; cannot be used with dimensions.</p>
    public let additionalMetricsToRetainV2: [IotClientTypes.MetricToRetain]?
    /// <p>Where the alerts are sent. (Alerts are always sent to the console.)</p>
    public let alertTargets: [Swift.String:IotClientTypes.AlertTarget]?
    /// <p>Specifies the behaviors that, when violated by a device (thing), cause an alert.</p>
    public let behaviors: [IotClientTypes.Behavior]?
    /// <p>The time the security profile was created.</p>
    public let creationDate: ClientRuntime.Date?
    /// <p>The time the security profile was last modified.</p>
    public let lastModifiedDate: ClientRuntime.Date?
    /// <p>The ARN of the security profile that was updated.</p>
    public let securityProfileArn: Swift.String?
    /// <p>The description of the security profile.</p>
    public let securityProfileDescription: Swift.String?
    /// <p>The name of the security profile that was updated.</p>
    public let securityProfileName: Swift.String?
    /// <p>The updated version of the security profile.</p>
    public let version: Swift.Int

    public init (
        additionalMetricsToRetain: [Swift.String]? = nil,
        additionalMetricsToRetainV2: [IotClientTypes.MetricToRetain]? = nil,
        alertTargets: [Swift.String:IotClientTypes.AlertTarget]? = nil,
        behaviors: [IotClientTypes.Behavior]? = nil,
        creationDate: ClientRuntime.Date? = nil,
        lastModifiedDate: ClientRuntime.Date? = nil,
        securityProfileArn: Swift.String? = nil,
        securityProfileDescription: Swift.String? = nil,
        securityProfileName: Swift.String? = nil,
        version: Swift.Int = 0
    )
    {
        self.additionalMetricsToRetain = additionalMetricsToRetain
        self.additionalMetricsToRetainV2 = additionalMetricsToRetainV2
        self.alertTargets = alertTargets
        self.behaviors = behaviors
        self.creationDate = creationDate
        self.lastModifiedDate = lastModifiedDate
        self.securityProfileArn = securityProfileArn
        self.securityProfileDescription = securityProfileDescription
        self.securityProfileName = securityProfileName
        self.version = version
    }
}

struct UpdateSecurityProfileOutputResponseBody: Swift.Equatable {
    public let securityProfileName: Swift.String?
    public let securityProfileArn: Swift.String?
    public let securityProfileDescription: Swift.String?
    public let behaviors: [IotClientTypes.Behavior]?
    public let alertTargets: [Swift.String:IotClientTypes.AlertTarget]?
    public let additionalMetricsToRetain: [Swift.String]?
    public let additionalMetricsToRetainV2: [IotClientTypes.MetricToRetain]?
    public let version: Swift.Int
    public let creationDate: ClientRuntime.Date?
    public let lastModifiedDate: ClientRuntime.Date?
}

extension UpdateSecurityProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalMetricsToRetain
        case additionalMetricsToRetainV2
        case alertTargets
        case behaviors
        case creationDate
        case lastModifiedDate
        case securityProfileArn
        case securityProfileDescription
        case securityProfileName
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityProfileName)
        securityProfileName = securityProfileNameDecoded
        let securityProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityProfileArn)
        securityProfileArn = securityProfileArnDecoded
        let securityProfileDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityProfileDescription)
        securityProfileDescription = securityProfileDescriptionDecoded
        let behaviorsContainer = try containerValues.decodeIfPresent([IotClientTypes.Behavior?].self, forKey: .behaviors)
        var behaviorsDecoded0:[IotClientTypes.Behavior]? = nil
        if let behaviorsContainer = behaviorsContainer {
            behaviorsDecoded0 = [IotClientTypes.Behavior]()
            for structure0 in behaviorsContainer {
                if let structure0 = structure0 {
                    behaviorsDecoded0?.append(structure0)
                }
            }
        }
        behaviors = behaviorsDecoded0
        let alertTargetsContainer = try containerValues.decodeIfPresent([Swift.String: IotClientTypes.AlertTarget?].self, forKey: .alertTargets)
        var alertTargetsDecoded0: [Swift.String:IotClientTypes.AlertTarget]? = nil
        if let alertTargetsContainer = alertTargetsContainer {
            alertTargetsDecoded0 = [Swift.String:IotClientTypes.AlertTarget]()
            for (key0, alerttarget0) in alertTargetsContainer {
                if let alerttarget0 = alerttarget0 {
                    alertTargetsDecoded0?[key0] = alerttarget0
                }
            }
        }
        alertTargets = alertTargetsDecoded0
        let additionalMetricsToRetainContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalMetricsToRetain)
        var additionalMetricsToRetainDecoded0:[Swift.String]? = nil
        if let additionalMetricsToRetainContainer = additionalMetricsToRetainContainer {
            additionalMetricsToRetainDecoded0 = [Swift.String]()
            for string0 in additionalMetricsToRetainContainer {
                if let string0 = string0 {
                    additionalMetricsToRetainDecoded0?.append(string0)
                }
            }
        }
        additionalMetricsToRetain = additionalMetricsToRetainDecoded0
        let additionalMetricsToRetainV2Container = try containerValues.decodeIfPresent([IotClientTypes.MetricToRetain?].self, forKey: .additionalMetricsToRetainV2)
        var additionalMetricsToRetainV2Decoded0:[IotClientTypes.MetricToRetain]? = nil
        if let additionalMetricsToRetainV2Container = additionalMetricsToRetainV2Container {
            additionalMetricsToRetainV2Decoded0 = [IotClientTypes.MetricToRetain]()
            for structure0 in additionalMetricsToRetainV2Container {
                if let structure0 = structure0 {
                    additionalMetricsToRetainV2Decoded0?.append(structure0)
                }
            }
        }
        additionalMetricsToRetainV2 = additionalMetricsToRetainV2Decoded0
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
    }
}

public struct UpdateStreamInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStreamInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStreamOutputError>
}

extension UpdateStreamInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateStreamInput(description: \(Swift.String(describing: description)), files: \(Swift.String(describing: files)), roleArn: \(Swift.String(describing: roleArn)), streamId: \(Swift.String(describing: streamId)))"}
}

extension UpdateStreamInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case files
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let files = files {
            var filesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .files)
            for streamfiles0 in files {
                try filesContainer.encode(streamfiles0)
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

public struct UpdateStreamInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStreamInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStreamOutputError>
}

public struct UpdateStreamInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStreamInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStreamInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStreamOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStreamInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStreamOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStreamOutputError>
}

public struct UpdateStreamInput: Swift.Equatable {
    /// <p>The description of the stream.</p>
    public let description: Swift.String?
    /// <p>The files associated with the stream.</p>
    public let files: [IotClientTypes.StreamFile]?
    /// <p>An IAM role that allows the IoT service principal assumes to access your S3 files.</p>
    public let roleArn: Swift.String?
    /// <p>The stream ID.</p>
    public let streamId: Swift.String?

    public init (
        description: Swift.String? = nil,
        files: [IotClientTypes.StreamFile]? = nil,
        roleArn: Swift.String? = nil,
        streamId: Swift.String? = nil
    )
    {
        self.description = description
        self.files = files
        self.roleArn = roleArn
        self.streamId = streamId
    }
}

struct UpdateStreamInputBody: Swift.Equatable {
    public let description: Swift.String?
    public let files: [IotClientTypes.StreamFile]?
    public let roleArn: Swift.String?
}

extension UpdateStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case files
        case roleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let filesContainer = try containerValues.decodeIfPresent([IotClientTypes.StreamFile?].self, forKey: .files)
        var filesDecoded0:[IotClientTypes.StreamFile]? = nil
        if let filesContainer = filesContainer {
            filesDecoded0 = [IotClientTypes.StreamFile]()
            for structure0 in filesContainer {
                if let structure0 = structure0 {
                    filesDecoded0?.append(structure0)
                }
            }
        }
        files = filesDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension UpdateStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateStreamOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStreamOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateStreamOutputResponse(description: \(Swift.String(describing: description)), streamArn: \(Swift.String(describing: streamArn)), streamId: \(Swift.String(describing: streamId)), streamVersion: \(Swift.String(describing: streamVersion)))"}
}

extension UpdateStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateStreamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.description = output.description
            self.streamArn = output.streamArn
            self.streamId = output.streamId
            self.streamVersion = output.streamVersion
        } else {
            self.description = nil
            self.streamArn = nil
            self.streamId = nil
            self.streamVersion = nil
        }
    }
}

public struct UpdateStreamOutputResponse: Swift.Equatable {
    /// <p>A description of the stream.</p>
    public let description: Swift.String?
    /// <p>The stream ARN.</p>
    public let streamArn: Swift.String?
    /// <p>The stream ID.</p>
    public let streamId: Swift.String?
    /// <p>The stream version.</p>
    public let streamVersion: Swift.Int?

    public init (
        description: Swift.String? = nil,
        streamArn: Swift.String? = nil,
        streamId: Swift.String? = nil,
        streamVersion: Swift.Int? = nil
    )
    {
        self.description = description
        self.streamArn = streamArn
        self.streamId = streamId
        self.streamVersion = streamVersion
    }
}

struct UpdateStreamOutputResponseBody: Swift.Equatable {
    public let streamId: Swift.String?
    public let streamArn: Swift.String?
    public let description: Swift.String?
    public let streamVersion: Swift.Int?
}

extension UpdateStreamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case streamArn
        case streamId
        case streamVersion
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamId)
        streamId = streamIdDecoded
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let streamVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .streamVersion)
        streamVersion = streamVersionDecoded
    }
}

public struct UpdateThingGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateThingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateThingGroupOutputError>
}

extension UpdateThingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateThingGroupInput(expectedVersion: \(Swift.String(describing: expectedVersion)), thingGroupName: \(Swift.String(describing: thingGroupName)), thingGroupProperties: \(Swift.String(describing: thingGroupProperties)))"}
}

extension UpdateThingGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expectedVersion
        case thingGroupProperties
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expectedVersion = expectedVersion {
            try encodeContainer.encode(expectedVersion, forKey: .expectedVersion)
        }
        if let thingGroupProperties = thingGroupProperties {
            try encodeContainer.encode(thingGroupProperties, forKey: .thingGroupProperties)
        }
    }
}

public struct UpdateThingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateThingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateThingGroupOutputError>
}

public struct UpdateThingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateThingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateThingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateThingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateThingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateThingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateThingGroupOutputError>
}

public struct UpdateThingGroupInput: Swift.Equatable {
    /// <p>The expected version of the thing group. If this does not match the version of the
    /// 			thing group being updated, the update will fail.</p>
    public let expectedVersion: Swift.Int?
    /// <p>The thing group to update.</p>
    public let thingGroupName: Swift.String?
    /// <p>The thing group properties.</p>
    public let thingGroupProperties: IotClientTypes.ThingGroupProperties?

    public init (
        expectedVersion: Swift.Int? = nil,
        thingGroupName: Swift.String? = nil,
        thingGroupProperties: IotClientTypes.ThingGroupProperties? = nil
    )
    {
        self.expectedVersion = expectedVersion
        self.thingGroupName = thingGroupName
        self.thingGroupProperties = thingGroupProperties
    }
}

struct UpdateThingGroupInputBody: Swift.Equatable {
    public let thingGroupProperties: IotClientTypes.ThingGroupProperties?
    public let expectedVersion: Swift.Int?
}

extension UpdateThingGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expectedVersion
        case thingGroupProperties
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupPropertiesDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingGroupProperties.self, forKey: .thingGroupProperties)
        thingGroupProperties = thingGroupPropertiesDecoded
        let expectedVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expectedVersion)
        expectedVersion = expectedVersionDecoded
    }
}

extension UpdateThingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateThingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionConflictException" : self = .versionConflictException(try VersionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateThingGroupOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case versionConflictException(VersionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateThingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateThingGroupOutputResponse(version: \(Swift.String(describing: version)))"}
}

extension UpdateThingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateThingGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.version = output.version
        } else {
            self.version = 0
        }
    }
}

public struct UpdateThingGroupOutputResponse: Swift.Equatable {
    /// <p>The version of the updated thing group.</p>
    public let version: Swift.Int

    public init (
        version: Swift.Int = 0
    )
    {
        self.version = version
    }
}

struct UpdateThingGroupOutputResponseBody: Swift.Equatable {
    public let version: Swift.Int
}

extension UpdateThingGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

public struct UpdateThingGroupsForThingInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateThingGroupsForThingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateThingGroupsForThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateThingGroupsForThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateThingGroupsForThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateThingGroupsForThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateThingGroupsForThingOutputError>
}

extension UpdateThingGroupsForThingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateThingGroupsForThingInput(overrideDynamicGroups: \(Swift.String(describing: overrideDynamicGroups)), thingGroupsToAdd: \(Swift.String(describing: thingGroupsToAdd)), thingGroupsToRemove: \(Swift.String(describing: thingGroupsToRemove)), thingName: \(Swift.String(describing: thingName)))"}
}

extension UpdateThingGroupsForThingInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case overrideDynamicGroups
        case thingGroupsToAdd
        case thingGroupsToRemove
        case thingName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if overrideDynamicGroups != false {
            try encodeContainer.encode(overrideDynamicGroups, forKey: .overrideDynamicGroups)
        }
        if let thingGroupsToAdd = thingGroupsToAdd {
            var thingGroupsToAddContainer = encodeContainer.nestedUnkeyedContainer(forKey: .thingGroupsToAdd)
            for thinggrouplist0 in thingGroupsToAdd {
                try thingGroupsToAddContainer.encode(thinggrouplist0)
            }
        }
        if let thingGroupsToRemove = thingGroupsToRemove {
            var thingGroupsToRemoveContainer = encodeContainer.nestedUnkeyedContainer(forKey: .thingGroupsToRemove)
            for thinggrouplist0 in thingGroupsToRemove {
                try thingGroupsToRemoveContainer.encode(thinggrouplist0)
            }
        }
        if let thingName = thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
    }
}

public struct UpdateThingGroupsForThingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateThingGroupsForThingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateThingGroupsForThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateThingGroupsForThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateThingGroupsForThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateThingGroupsForThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateThingGroupsForThingOutputError>
}

public struct UpdateThingGroupsForThingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateThingGroupsForThingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateThingGroupsForThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateThingGroupsForThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateThingGroupsForThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateThingGroupsForThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateThingGroupsForThingOutputError>
}

public struct UpdateThingGroupsForThingInput: Swift.Equatable {
    /// <p>Override dynamic thing groups with static thing groups when 10-group limit is
    /// 			reached. If a thing belongs to 10 thing groups, and one or more of those groups are
    /// 			dynamic thing groups, adding a thing to a static group removes the thing from the last
    /// 			dynamic group.</p>
    public let overrideDynamicGroups: Swift.Bool
    /// <p>The groups to which the thing will be added.</p>
    public let thingGroupsToAdd: [Swift.String]?
    /// <p>The groups from which the thing will be removed.</p>
    public let thingGroupsToRemove: [Swift.String]?
    /// <p>The thing whose group memberships will be updated.</p>
    public let thingName: Swift.String?

    public init (
        overrideDynamicGroups: Swift.Bool = false,
        thingGroupsToAdd: [Swift.String]? = nil,
        thingGroupsToRemove: [Swift.String]? = nil,
        thingName: Swift.String? = nil
    )
    {
        self.overrideDynamicGroups = overrideDynamicGroups
        self.thingGroupsToAdd = thingGroupsToAdd
        self.thingGroupsToRemove = thingGroupsToRemove
        self.thingName = thingName
    }
}

struct UpdateThingGroupsForThingInputBody: Swift.Equatable {
    public let thingName: Swift.String?
    public let thingGroupsToAdd: [Swift.String]?
    public let thingGroupsToRemove: [Swift.String]?
    public let overrideDynamicGroups: Swift.Bool
}

extension UpdateThingGroupsForThingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case overrideDynamicGroups
        case thingGroupsToAdd
        case thingGroupsToRemove
        case thingName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let thingGroupsToAddContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .thingGroupsToAdd)
        var thingGroupsToAddDecoded0:[Swift.String]? = nil
        if let thingGroupsToAddContainer = thingGroupsToAddContainer {
            thingGroupsToAddDecoded0 = [Swift.String]()
            for string0 in thingGroupsToAddContainer {
                if let string0 = string0 {
                    thingGroupsToAddDecoded0?.append(string0)
                }
            }
        }
        thingGroupsToAdd = thingGroupsToAddDecoded0
        let thingGroupsToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .thingGroupsToRemove)
        var thingGroupsToRemoveDecoded0:[Swift.String]? = nil
        if let thingGroupsToRemoveContainer = thingGroupsToRemoveContainer {
            thingGroupsToRemoveDecoded0 = [Swift.String]()
            for string0 in thingGroupsToRemoveContainer {
                if let string0 = string0 {
                    thingGroupsToRemoveDecoded0?.append(string0)
                }
            }
        }
        thingGroupsToRemove = thingGroupsToRemoveDecoded0
        let overrideDynamicGroupsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .overrideDynamicGroups)
        overrideDynamicGroups = overrideDynamicGroupsDecoded
    }
}

extension UpdateThingGroupsForThingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateThingGroupsForThingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateThingGroupsForThingOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateThingGroupsForThingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateThingGroupsForThingOutputResponse()"}
}

extension UpdateThingGroupsForThingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateThingGroupsForThingOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateThingGroupsForThingOutputResponseBody: Swift.Equatable {
}

extension UpdateThingGroupsForThingOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateThingInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateThingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateThingOutputError>
}

extension UpdateThingInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateThingInput(attributePayload: \(Swift.String(describing: attributePayload)), expectedVersion: \(Swift.String(describing: expectedVersion)), removeThingType: \(Swift.String(describing: removeThingType)), thingName: \(Swift.String(describing: thingName)), thingTypeName: \(Swift.String(describing: thingTypeName)))"}
}

extension UpdateThingInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributePayload
        case expectedVersion
        case removeThingType
        case thingTypeName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributePayload = attributePayload {
            try encodeContainer.encode(attributePayload, forKey: .attributePayload)
        }
        if let expectedVersion = expectedVersion {
            try encodeContainer.encode(expectedVersion, forKey: .expectedVersion)
        }
        if removeThingType != false {
            try encodeContainer.encode(removeThingType, forKey: .removeThingType)
        }
        if let thingTypeName = thingTypeName {
            try encodeContainer.encode(thingTypeName, forKey: .thingTypeName)
        }
    }
}

public struct UpdateThingInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateThingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateThingOutputError>
}

public struct UpdateThingInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateThingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateThingInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateThingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateThingInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateThingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateThingOutputError>
}

/// <p>The input for the UpdateThing operation.</p>
public struct UpdateThingInput: Swift.Equatable {
    /// <p>A list of thing attributes, a JSON string containing name-value pairs. For
    /// 			example:</p>
    /// 		       <p>
    /// 			         <code>{\"attributes\":{\"name1\":\"value2\"}}</code>
    /// 		       </p>
    /// 		       <p>This data is used to add new attributes or update existing attributes.</p>
    public let attributePayload: IotClientTypes.AttributePayload?
    /// <p>The expected version of the thing record in the registry. If the version of the
    /// 			record in the registry does not match the expected version specified in the request, the
    /// 				<code>UpdateThing</code> request is rejected with a
    /// 				<code>VersionConflictException</code>.</p>
    public let expectedVersion: Swift.Int?
    /// <p>Remove a thing type association. If <b>true</b>, the
    /// 			association is removed.</p>
    public let removeThingType: Swift.Bool
    /// <p>The name of the thing to update.</p>
    /// 		       <p>You can't change a thing's name. To change a thing's name, you must create a
    /// 			new thing, give it the new name, and then delete the old thing.</p>
    public let thingName: Swift.String?
    /// <p>The name of the thing type.</p>
    public let thingTypeName: Swift.String?

    public init (
        attributePayload: IotClientTypes.AttributePayload? = nil,
        expectedVersion: Swift.Int? = nil,
        removeThingType: Swift.Bool = false,
        thingName: Swift.String? = nil,
        thingTypeName: Swift.String? = nil
    )
    {
        self.attributePayload = attributePayload
        self.expectedVersion = expectedVersion
        self.removeThingType = removeThingType
        self.thingName = thingName
        self.thingTypeName = thingTypeName
    }
}

struct UpdateThingInputBody: Swift.Equatable {
    public let thingTypeName: Swift.String?
    public let attributePayload: IotClientTypes.AttributePayload?
    public let expectedVersion: Swift.Int?
    public let removeThingType: Swift.Bool
}

extension UpdateThingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributePayload
        case expectedVersion
        case removeThingType
        case thingTypeName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeName)
        thingTypeName = thingTypeNameDecoded
        let attributePayloadDecoded = try containerValues.decodeIfPresent(IotClientTypes.AttributePayload.self, forKey: .attributePayload)
        attributePayload = attributePayloadDecoded
        let expectedVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expectedVersion)
        expectedVersion = expectedVersionDecoded
        let removeThingTypeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .removeThingType)
        removeThingType = removeThingTypeDecoded
    }
}

extension UpdateThingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateThingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VersionConflictException" : self = .versionConflictException(try VersionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateThingOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unauthorizedException(UnauthorizedException)
    case versionConflictException(VersionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateThingOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateThingOutputResponse()"}
}

extension UpdateThingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The output from the UpdateThing operation.</p>
public struct UpdateThingOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateThingOutputResponseBody: Swift.Equatable {
}

extension UpdateThingOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateTopicRuleDestinationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTopicRuleDestinationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTopicRuleDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTopicRuleDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTopicRuleDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTopicRuleDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTopicRuleDestinationOutputError>
}

extension UpdateTopicRuleDestinationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTopicRuleDestinationInput(arn: \(Swift.String(describing: arn)), status: \(Swift.String(describing: status)))"}
}

extension UpdateTopicRuleDestinationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

public struct UpdateTopicRuleDestinationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTopicRuleDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTopicRuleDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTopicRuleDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTopicRuleDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTopicRuleDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTopicRuleDestinationOutputError>
}

public struct UpdateTopicRuleDestinationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTopicRuleDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTopicRuleDestinationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTopicRuleDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTopicRuleDestinationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTopicRuleDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTopicRuleDestinationOutputError>
}

public struct UpdateTopicRuleDestinationInput: Swift.Equatable {
    /// <p>The ARN of the topic rule destination.</p>
    public let arn: Swift.String?
    /// <p>The status of the topic rule destination. Valid values are:</p>
    ///          <dl>
    ///             <dt>IN_PROGRESS</dt>
    ///             <dd>
    ///                <p>A topic rule destination was created but has not been confirmed. You can set
    ///                      <code>status</code> to <code>IN_PROGRESS</code> by calling
    ///                      <code>UpdateTopicRuleDestination</code>. Calling
    ///                      <code>UpdateTopicRuleDestination</code> causes a new confirmation challenge to
    ///                   be sent to your confirmation endpoint.</p>
    ///             </dd>
    ///             <dt>ENABLED</dt>
    ///             <dd>
    ///                <p>Confirmation was completed, and traffic to this destination is allowed. You can
    ///                   set <code>status</code> to <code>DISABLED</code> by calling
    ///                      <code>UpdateTopicRuleDestination</code>.</p>
    ///             </dd>
    ///             <dt>DISABLED</dt>
    ///             <dd>
    ///                <p>Confirmation was completed, and traffic to this destination is not allowed. You
    ///                   can set <code>status</code> to <code>ENABLED</code> by calling
    ///                      <code>UpdateTopicRuleDestination</code>.</p>
    ///             </dd>
    ///             <dt>ERROR</dt>
    ///             <dd>
    ///                <p>Confirmation could not be completed, for example if the confirmation timed out.
    ///                   You can call <code>GetTopicRuleDestination</code> for details about the error. You
    ///                   can set <code>status</code> to <code>IN_PROGRESS</code> by calling
    ///                      <code>UpdateTopicRuleDestination</code>. Calling
    ///                      <code>UpdateTopicRuleDestination</code> causes a new confirmation challenge to
    ///                   be sent to your confirmation endpoint.</p>
    ///             </dd>
    ///          </dl>
    public let status: IotClientTypes.TopicRuleDestinationStatus?

    public init (
        arn: Swift.String? = nil,
        status: IotClientTypes.TopicRuleDestinationStatus? = nil
    )
    {
        self.arn = arn
        self.status = status
    }
}

struct UpdateTopicRuleDestinationInputBody: Swift.Equatable {
    public let arn: Swift.String?
    public let status: IotClientTypes.TopicRuleDestinationStatus?
}

extension UpdateTopicRuleDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.TopicRuleDestinationStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension UpdateTopicRuleDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTopicRuleDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingResourceUpdateException" : self = .conflictingResourceUpdateException(try ConflictingResourceUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTopicRuleDestinationOutputError: Swift.Error, Swift.Equatable {
    case conflictingResourceUpdateException(ConflictingResourceUpdateException)
    case internalException(InternalException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTopicRuleDestinationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTopicRuleDestinationOutputResponse()"}
}

extension UpdateTopicRuleDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateTopicRuleDestinationOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateTopicRuleDestinationOutputResponseBody: Swift.Equatable {
}

extension UpdateTopicRuleDestinationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct ValidateSecurityProfileBehaviorsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ValidateSecurityProfileBehaviorsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ValidateSecurityProfileBehaviorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ValidateSecurityProfileBehaviorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ValidateSecurityProfileBehaviorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ValidateSecurityProfileBehaviorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ValidateSecurityProfileBehaviorsOutputError>
}

extension ValidateSecurityProfileBehaviorsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidateSecurityProfileBehaviorsInput(behaviors: \(Swift.String(describing: behaviors)))"}
}

extension ValidateSecurityProfileBehaviorsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviors
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behaviors = behaviors {
            var behaviorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .behaviors)
            for behaviors0 in behaviors {
                try behaviorsContainer.encode(behaviors0)
            }
        }
    }
}

public struct ValidateSecurityProfileBehaviorsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ValidateSecurityProfileBehaviorsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ValidateSecurityProfileBehaviorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ValidateSecurityProfileBehaviorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ValidateSecurityProfileBehaviorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ValidateSecurityProfileBehaviorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ValidateSecurityProfileBehaviorsOutputError>
}

public struct ValidateSecurityProfileBehaviorsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ValidateSecurityProfileBehaviorsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ValidateSecurityProfileBehaviorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ValidateSecurityProfileBehaviorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ValidateSecurityProfileBehaviorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ValidateSecurityProfileBehaviorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ValidateSecurityProfileBehaviorsOutputError>
}

public struct ValidateSecurityProfileBehaviorsInput: Swift.Equatable {
    /// <p>Specifies the behaviors that, when violated by a device (thing), cause an alert.</p>
    public let behaviors: [IotClientTypes.Behavior]?

    public init (
        behaviors: [IotClientTypes.Behavior]? = nil
    )
    {
        self.behaviors = behaviors
    }
}

struct ValidateSecurityProfileBehaviorsInputBody: Swift.Equatable {
    public let behaviors: [IotClientTypes.Behavior]?
}

extension ValidateSecurityProfileBehaviorsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behaviors
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let behaviorsContainer = try containerValues.decodeIfPresent([IotClientTypes.Behavior?].self, forKey: .behaviors)
        var behaviorsDecoded0:[IotClientTypes.Behavior]? = nil
        if let behaviorsContainer = behaviorsContainer {
            behaviorsDecoded0 = [IotClientTypes.Behavior]()
            for structure0 in behaviorsContainer {
                if let structure0 = structure0 {
                    behaviorsDecoded0?.append(structure0)
                }
            }
        }
        behaviors = behaviorsDecoded0
    }
}

extension ValidateSecurityProfileBehaviorsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ValidateSecurityProfileBehaviorsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ValidateSecurityProfileBehaviorsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ValidateSecurityProfileBehaviorsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidateSecurityProfileBehaviorsOutputResponse(valid: \(Swift.String(describing: valid)), validationErrors: \(Swift.String(describing: validationErrors)))"}
}

extension ValidateSecurityProfileBehaviorsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ValidateSecurityProfileBehaviorsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.valid = output.valid
            self.validationErrors = output.validationErrors
        } else {
            self.valid = false
            self.validationErrors = nil
        }
    }
}

public struct ValidateSecurityProfileBehaviorsOutputResponse: Swift.Equatable {
    /// <p>True if the behaviors were valid.</p>
    public let valid: Swift.Bool
    /// <p>The list of any errors found in the behaviors.</p>
    public let validationErrors: [IotClientTypes.ValidationError]?

    public init (
        valid: Swift.Bool = false,
        validationErrors: [IotClientTypes.ValidationError]? = nil
    )
    {
        self.valid = valid
        self.validationErrors = validationErrors
    }
}

struct ValidateSecurityProfileBehaviorsOutputResponseBody: Swift.Equatable {
    public let valid: Swift.Bool
    public let validationErrors: [IotClientTypes.ValidationError]?
}

extension ValidateSecurityProfileBehaviorsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case valid
        case validationErrors
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let validDecoded = try containerValues.decode(Swift.Bool.self, forKey: .valid)
        valid = validDecoded
        let validationErrorsContainer = try containerValues.decodeIfPresent([IotClientTypes.ValidationError?].self, forKey: .validationErrors)
        var validationErrorsDecoded0:[IotClientTypes.ValidationError]? = nil
        if let validationErrorsContainer = validationErrorsContainer {
            validationErrorsDecoded0 = [IotClientTypes.ValidationError]()
            for structure0 in validationErrorsContainer {
                if let structure0 = structure0 {
                    validationErrorsDecoded0?.append(structure0)
                }
            }
        }
        validationErrors = validationErrorsDecoded0
    }
}

extension IotClientTypes.ValidationError: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorMessage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension IotClientTypes.ValidationError: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationError(errorMessage: \(Swift.String(describing: errorMessage)))"}
}

extension IotClientTypes {
    /// <p>Information about an error found in a behavior specification.</p>
    public struct ValidationError: Swift.Equatable {
        /// <p>The description of an error found in the behaviors.</p>
        public let errorMessage: Swift.String?

        public init (
            errorMessage: Swift.String? = nil
        )
        {
            self.errorMessage = errorMessage
        }
    }

}

extension VersionConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VersionConflictException(message: \(Swift.String(describing: message)))"}
}

extension VersionConflictException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: VersionConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An exception thrown when the version of an entity specified with the
///             <code>expectedVersion</code> parameter does not match the latest version in the
///          system.</p>
public struct VersionConflictException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct VersionConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension VersionConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension VersionsLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VersionsLimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension VersionsLimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: VersionsLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The number of policy versions exceeds the limit.</p>
public struct VersionsLimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The message for the exception.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct VersionsLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension VersionsLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotClientTypes.ViolationEvent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behavior
        case metricValue
        case securityProfileName
        case thingName
        case violationEventAdditionalInfo
        case violationEventTime
        case violationEventType
        case violationId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behavior = behavior {
            try encodeContainer.encode(behavior, forKey: .behavior)
        }
        if let metricValue = metricValue {
            try encodeContainer.encode(metricValue, forKey: .metricValue)
        }
        if let securityProfileName = securityProfileName {
            try encodeContainer.encode(securityProfileName, forKey: .securityProfileName)
        }
        if let thingName = thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
        if let violationEventAdditionalInfo = violationEventAdditionalInfo {
            try encodeContainer.encode(violationEventAdditionalInfo, forKey: .violationEventAdditionalInfo)
        }
        if let violationEventTime = violationEventTime {
            try encodeContainer.encode(violationEventTime.timeIntervalSince1970, forKey: .violationEventTime)
        }
        if let violationEventType = violationEventType {
            try encodeContainer.encode(violationEventType.rawValue, forKey: .violationEventType)
        }
        if let violationId = violationId {
            try encodeContainer.encode(violationId, forKey: .violationId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let violationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .violationId)
        violationId = violationIdDecoded
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let securityProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityProfileName)
        securityProfileName = securityProfileNameDecoded
        let behaviorDecoded = try containerValues.decodeIfPresent(IotClientTypes.Behavior.self, forKey: .behavior)
        behavior = behaviorDecoded
        let metricValueDecoded = try containerValues.decodeIfPresent(IotClientTypes.MetricValue.self, forKey: .metricValue)
        metricValue = metricValueDecoded
        let violationEventAdditionalInfoDecoded = try containerValues.decodeIfPresent(IotClientTypes.ViolationEventAdditionalInfo.self, forKey: .violationEventAdditionalInfo)
        violationEventAdditionalInfo = violationEventAdditionalInfoDecoded
        let violationEventTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ViolationEventType.self, forKey: .violationEventType)
        violationEventType = violationEventTypeDecoded
        let violationEventTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .violationEventTime)
        violationEventTime = violationEventTimeDecoded
    }
}

extension IotClientTypes.ViolationEvent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ViolationEvent(behavior: \(Swift.String(describing: behavior)), metricValue: \(Swift.String(describing: metricValue)), securityProfileName: \(Swift.String(describing: securityProfileName)), thingName: \(Swift.String(describing: thingName)), violationEventAdditionalInfo: \(Swift.String(describing: violationEventAdditionalInfo)), violationEventTime: \(Swift.String(describing: violationEventTime)), violationEventType: \(Swift.String(describing: violationEventType)), violationId: \(Swift.String(describing: violationId)))"}
}

extension IotClientTypes {
    /// <p>Information about a Device Defender security profile behavior violation.</p>
    public struct ViolationEvent: Swift.Equatable {
        /// <p>The behavior that was violated.</p>
        public let behavior: IotClientTypes.Behavior?
        /// <p>The value of the metric (the measurement).</p>
        public let metricValue: IotClientTypes.MetricValue?
        /// <p>The name of the security profile whose behavior was violated.</p>
        public let securityProfileName: Swift.String?
        /// <p>The name of the thing responsible for the violation event.</p>
        public let thingName: Swift.String?
        /// <p>
        ///             The details of a violation event.
        ///         </p>
        public let violationEventAdditionalInfo: IotClientTypes.ViolationEventAdditionalInfo?
        /// <p>The time the violation event occurred.</p>
        public let violationEventTime: ClientRuntime.Date?
        /// <p>The type of violation event.</p>
        public let violationEventType: IotClientTypes.ViolationEventType?
        /// <p>The ID of the violation event.</p>
        public let violationId: Swift.String?

        public init (
            behavior: IotClientTypes.Behavior? = nil,
            metricValue: IotClientTypes.MetricValue? = nil,
            securityProfileName: Swift.String? = nil,
            thingName: Swift.String? = nil,
            violationEventAdditionalInfo: IotClientTypes.ViolationEventAdditionalInfo? = nil,
            violationEventTime: ClientRuntime.Date? = nil,
            violationEventType: IotClientTypes.ViolationEventType? = nil,
            violationId: Swift.String? = nil
        )
        {
            self.behavior = behavior
            self.metricValue = metricValue
            self.securityProfileName = securityProfileName
            self.thingName = thingName
            self.violationEventAdditionalInfo = violationEventAdditionalInfo
            self.violationEventTime = violationEventTime
            self.violationEventType = violationEventType
            self.violationId = violationId
        }
    }

}

extension IotClientTypes.ViolationEventAdditionalInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidenceLevel
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidenceLevel = confidenceLevel {
            try encodeContainer.encode(confidenceLevel.rawValue, forKey: .confidenceLevel)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let confidenceLevelDecoded = try containerValues.decodeIfPresent(IotClientTypes.ConfidenceLevel.self, forKey: .confidenceLevel)
        confidenceLevel = confidenceLevelDecoded
    }
}

extension IotClientTypes.ViolationEventAdditionalInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ViolationEventAdditionalInfo(confidenceLevel: \(Swift.String(describing: confidenceLevel)))"}
}

extension IotClientTypes {
    /// <p>
    ///             The details of a violation event.
    ///         </p>
    public struct ViolationEventAdditionalInfo: Swift.Equatable {
        /// <p>
        ///             The sensitivity of anomalous behavior evaluation. Can be <code>Low</code>, <code>Medium</code>, or <code>High</code>.
        ///         </p>
        public let confidenceLevel: IotClientTypes.ConfidenceLevel?

        public init (
            confidenceLevel: IotClientTypes.ConfidenceLevel? = nil
        )
        {
            self.confidenceLevel = confidenceLevel
        }
    }

}

extension IotClientTypes.ViolationEventOccurrenceRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case startTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension IotClientTypes.ViolationEventOccurrenceRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ViolationEventOccurrenceRange(endTime: \(Swift.String(describing: endTime)), startTime: \(Swift.String(describing: startTime)))"}
}

extension IotClientTypes {
    /// <p>
    ///             Specifies the time period of which violation events occurred between.
    ///         </p>
    public struct ViolationEventOccurrenceRange: Swift.Equatable {
        /// <p>
        ///             The end date and time of a time period in which violation events occurred.
        ///         </p>
        public let endTime: ClientRuntime.Date?
        /// <p>
        ///             The start date and time of a time period in which violation events occurred.
        ///         </p>
        public let startTime: ClientRuntime.Date?

        public init (
            endTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension IotClientTypes {
    public enum ViolationEventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alarmCleared
        case alarmInvalidated
        case inAlarm
        case sdkUnknown(Swift.String)

        public static var allCases: [ViolationEventType] {
            return [
                .alarmCleared,
                .alarmInvalidated,
                .inAlarm,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alarmCleared: return "alarm-cleared"
            case .alarmInvalidated: return "alarm-invalidated"
            case .inAlarm: return "in-alarm"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ViolationEventType(rawValue: rawValue) ?? ViolationEventType.sdkUnknown(rawValue)
        }
    }
}

extension IotClientTypes.VpcDestinationConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleArn
        case securityGroups
        case subnetIds
        case vpcId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for securitygrouplist0 in securityGroups {
                try securityGroupsContainer.encode(securitygrouplist0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetidlist0 in subnetIds {
                try subnetIdsContainer.encode(subnetidlist0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IotClientTypes.VpcDestinationConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VpcDestinationConfiguration(roleArn: \(Swift.String(describing: roleArn)), securityGroups: \(Swift.String(describing: securityGroups)), subnetIds: \(Swift.String(describing: subnetIds)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension IotClientTypes {
    /// <p>The configuration information for a virtual private cloud (VPC) destination.</p>
    public struct VpcDestinationConfiguration: Swift.Equatable {
        /// <p>The ARN of a role that has permission to create and attach to elastic network interfaces (ENIs).</p>
        public let roleArn: Swift.String?
        /// <p>The security groups of the VPC destination.</p>
        public let securityGroups: [Swift.String]?
        /// <p>The subnet IDs of the VPC destination.</p>
        public let subnetIds: [Swift.String]?
        /// <p>The ID of the VPC.</p>
        public let vpcId: Swift.String?

        public init (
            roleArn: Swift.String? = nil,
            securityGroups: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.roleArn = roleArn
            self.securityGroups = securityGroups
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

extension IotClientTypes.VpcDestinationProperties: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleArn
        case securityGroups
        case subnetIds
        case vpcId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for securitygrouplist0 in securityGroups {
                try securityGroupsContainer.encode(securitygrouplist0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetidlist0 in subnetIds {
                try subnetIdsContainer.encode(subnetidlist0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IotClientTypes.VpcDestinationProperties: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VpcDestinationProperties(roleArn: \(Swift.String(describing: roleArn)), securityGroups: \(Swift.String(describing: securityGroups)), subnetIds: \(Swift.String(describing: subnetIds)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension IotClientTypes {
    /// <p>The properties of a virtual private cloud (VPC) destination.</p>
    public struct VpcDestinationProperties: Swift.Equatable {
        /// <p>The ARN of a role that has permission to create and attach to elastic network interfaces (ENIs).</p>
        public let roleArn: Swift.String?
        /// <p>The security groups of the VPC destination.</p>
        public let securityGroups: [Swift.String]?
        /// <p>The subnet IDs of the VPC destination.</p>
        public let subnetIds: [Swift.String]?
        /// <p>The ID of the VPC.</p>
        public let vpcId: Swift.String?

        public init (
            roleArn: Swift.String? = nil,
            securityGroups: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.roleArn = roleArn
            self.securityGroups = securityGroups
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

extension IotClientTypes.VpcDestinationSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleArn
        case securityGroups
        case subnetIds
        case vpcId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for securitygrouplist0 in securityGroups {
                try securityGroupsContainer.encode(securitygrouplist0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetidlist0 in subnetIds {
                try subnetIdsContainer.encode(subnetidlist0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IotClientTypes.VpcDestinationSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VpcDestinationSummary(roleArn: \(Swift.String(describing: roleArn)), securityGroups: \(Swift.String(describing: securityGroups)), subnetIds: \(Swift.String(describing: subnetIds)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension IotClientTypes {
    /// <p>The summary of a virtual private cloud (VPC) destination.</p>
    public struct VpcDestinationSummary: Swift.Equatable {
        /// <p>The ARN of a role that has permission to create and attach to elastic network interfaces (ENIs).</p>
        public let roleArn: Swift.String?
        /// <p>The security groups of the VPC destination.</p>
        public let securityGroups: [Swift.String]?
        /// <p>The subnet IDs of the VPC destination.</p>
        public let subnetIds: [Swift.String]?
        /// <p>The ID of the VPC.</p>
        public let vpcId: Swift.String?

        public init (
            roleArn: Swift.String? = nil,
            securityGroups: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.roleArn = roleArn
            self.securityGroups = securityGroups
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}
