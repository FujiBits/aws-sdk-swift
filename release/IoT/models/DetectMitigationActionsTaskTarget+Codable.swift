// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DetectMitigationActionsTaskTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case behaviorName
        case securityProfileName
        case violationIds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behaviorName = behaviorName {
            try encodeContainer.encode(behaviorName, forKey: .behaviorName)
        }
        if let securityProfileName = securityProfileName {
            try encodeContainer.encode(securityProfileName, forKey: .securityProfileName)
        }
        if let violationIds = violationIds {
            var violationIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .violationIds)
            for targetviolationidsfordetectmitigationactions0 in violationIds {
                try violationIdsContainer.encode(targetviolationidsfordetectmitigationactions0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let violationIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .violationIds)
        var violationIdsDecoded0:[String]? = nil
        if let violationIdsContainer = violationIdsContainer {
            violationIdsDecoded0 = [String]()
            for string0 in violationIdsContainer {
                if let string0 = string0 {
                    violationIdsDecoded0?.append(string0)
                }
            }
        }
        violationIds = violationIdsDecoded0
        let securityProfileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityProfileName)
        securityProfileName = securityProfileNameDecoded
        let behaviorNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .behaviorName)
        behaviorName = behaviorNameDecoded
    }
}
