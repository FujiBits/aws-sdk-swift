// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDomainConfigurationOutputResponseBody: Equatable {
    public let domainConfigurationName: String?
    public let domainConfigurationArn: String?
    public let domainName: String?
    public let serverCertificates: [ServerCertificateSummary]?
    public let authorizerConfig: AuthorizerConfig?
    public let domainConfigurationStatus: DomainConfigurationStatus?
    public let serviceType: ServiceType?
    public let domainType: DomainType?
    public let lastStatusChangeDate: Date?
}

extension DescribeDomainConfigurationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case authorizerConfig
        case domainConfigurationArn
        case domainConfigurationName
        case domainConfigurationStatus
        case domainName
        case domainType
        case lastStatusChangeDate
        case serverCertificates
        case serviceType
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainConfigurationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainConfigurationName)
        domainConfigurationName = domainConfigurationNameDecoded
        let domainConfigurationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainConfigurationArn)
        domainConfigurationArn = domainConfigurationArnDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let serverCertificatesContainer = try containerValues.decodeIfPresent([ServerCertificateSummary?].self, forKey: .serverCertificates)
        var serverCertificatesDecoded0:[ServerCertificateSummary]? = nil
        if let serverCertificatesContainer = serverCertificatesContainer {
            serverCertificatesDecoded0 = [ServerCertificateSummary]()
            for structure0 in serverCertificatesContainer {
                if let structure0 = structure0 {
                    serverCertificatesDecoded0?.append(structure0)
                }
            }
        }
        serverCertificates = serverCertificatesDecoded0
        let authorizerConfigDecoded = try containerValues.decodeIfPresent(AuthorizerConfig.self, forKey: .authorizerConfig)
        authorizerConfig = authorizerConfigDecoded
        let domainConfigurationStatusDecoded = try containerValues.decodeIfPresent(DomainConfigurationStatus.self, forKey: .domainConfigurationStatus)
        domainConfigurationStatus = domainConfigurationStatusDecoded
        let serviceTypeDecoded = try containerValues.decodeIfPresent(ServiceType.self, forKey: .serviceType)
        serviceType = serviceTypeDecoded
        let domainTypeDecoded = try containerValues.decodeIfPresent(DomainType.self, forKey: .domainType)
        domainType = domainTypeDecoded
        let lastStatusChangeDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastStatusChangeDate)
        lastStatusChangeDate = lastStatusChangeDateDecoded
    }
}
