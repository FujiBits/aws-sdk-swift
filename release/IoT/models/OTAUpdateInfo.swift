// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Information about an OTA update.</p>
public struct OTAUpdateInfo: Equatable {
    /// <p>A collection of name/value pairs</p>
    public let additionalParameters: [String:String]?
    /// <p>The AWS IoT job ARN associated with the OTA update.</p>
    public let awsIotJobArn: String?
    /// <p>The AWS IoT job ID associated with the OTA update.</p>
    public let awsIotJobId: String?
    /// <p>Configuration for the rollout of OTA updates.</p>
    public let awsJobExecutionsRolloutConfig: AwsJobExecutionsRolloutConfig?
    /// <p>Configuration information for pre-signed URLs. Valid when <code>protocols</code>
    ///              contains HTTP.</p>
    public let awsJobPresignedUrlConfig: AwsJobPresignedUrlConfig?
    /// <p>The date when the OTA update was created.</p>
    public let creationDate: Date?
    /// <p>A description of the OTA update.</p>
    public let description: String?
    /// <p>Error information associated with the OTA update.</p>
    public let errorInfo: ErrorInfo?
    /// <p>The date when the OTA update was last updated.</p>
    public let lastModifiedDate: Date?
    /// <p>The OTA update ARN.</p>
    public let otaUpdateArn: String?
    /// <p>A list of files associated with the OTA update.</p>
    public let otaUpdateFiles: [OTAUpdateFile]?
    /// <p>The OTA update ID.</p>
    public let otaUpdateId: String?
    /// <p>The status of the OTA update.</p>
    public let otaUpdateStatus: OTAUpdateStatus?
    /// <p>The protocol used to transfer the OTA update image. Valid values are [HTTP], [MQTT], [HTTP, MQTT]. When both
    ///              HTTP and MQTT are specified, the target device can choose the protocol.</p>
    public let protocols: [`Protocol`]?
    /// <p>Specifies whether the OTA update will continue to run (CONTINUOUS), or will be complete after all those
    ///             things specified as targets have completed the OTA update (SNAPSHOT). If continuous, the OTA update may also
    ///             be run on a thing when a change is detected in a target. For example, an OTA update will run on a thing when
    ///             the thing is added to a target group, even after the OTA update was completed by all things originally in
    ///             the group. </p>
    public let targetSelection: TargetSelection?
    /// <p>The targets of the OTA update.</p>
    public let targets: [String]?

    public init (
        additionalParameters: [String:String]? = nil,
        awsIotJobArn: String? = nil,
        awsIotJobId: String? = nil,
        awsJobExecutionsRolloutConfig: AwsJobExecutionsRolloutConfig? = nil,
        awsJobPresignedUrlConfig: AwsJobPresignedUrlConfig? = nil,
        creationDate: Date? = nil,
        description: String? = nil,
        errorInfo: ErrorInfo? = nil,
        lastModifiedDate: Date? = nil,
        otaUpdateArn: String? = nil,
        otaUpdateFiles: [OTAUpdateFile]? = nil,
        otaUpdateId: String? = nil,
        otaUpdateStatus: OTAUpdateStatus? = nil,
        protocols: [`Protocol`]? = nil,
        targetSelection: TargetSelection? = nil,
        targets: [String]? = nil
    )
    {
        self.additionalParameters = additionalParameters
        self.awsIotJobArn = awsIotJobArn
        self.awsIotJobId = awsIotJobId
        self.awsJobExecutionsRolloutConfig = awsJobExecutionsRolloutConfig
        self.awsJobPresignedUrlConfig = awsJobPresignedUrlConfig
        self.creationDate = creationDate
        self.description = description
        self.errorInfo = errorInfo
        self.lastModifiedDate = lastModifiedDate
        self.otaUpdateArn = otaUpdateArn
        self.otaUpdateFiles = otaUpdateFiles
        self.otaUpdateId = otaUpdateId
        self.otaUpdateStatus = otaUpdateStatus
        self.protocols = protocols
        self.targetSelection = targetSelection
        self.targets = targets
    }
}

extension OTAUpdateInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OTAUpdateInfo(additionalParameters: \(String(describing: additionalParameters)), awsIotJobArn: \(String(describing: awsIotJobArn)), awsIotJobId: \(String(describing: awsIotJobId)), awsJobExecutionsRolloutConfig: \(String(describing: awsJobExecutionsRolloutConfig)), awsJobPresignedUrlConfig: \(String(describing: awsJobPresignedUrlConfig)), creationDate: \(String(describing: creationDate)), description: \(String(describing: description)), errorInfo: \(String(describing: errorInfo)), lastModifiedDate: \(String(describing: lastModifiedDate)), otaUpdateArn: \(String(describing: otaUpdateArn)), otaUpdateFiles: \(String(describing: otaUpdateFiles)), otaUpdateId: \(String(describing: otaUpdateId)), otaUpdateStatus: \(String(describing: otaUpdateStatus)), protocols: \(String(describing: protocols)), targetSelection: \(String(describing: targetSelection)), targets: \(String(describing: targets)))"}
}
