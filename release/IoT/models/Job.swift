// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>The <code>Job</code> object contains details about a job.</p>
public struct Job: Equatable {
    /// <p>Configuration for criteria to abort the job.</p>
    public let abortConfig: AbortConfig?
    /// <p>If the job was updated, describes the reason for the update.</p>
    public let comment: String?
    /// <p>The time, in seconds since the epoch, when the job was completed.</p>
    public let completedAt: Date?
    /// <p>The time, in seconds since the epoch, when the job was created.</p>
    public let createdAt: Date?
    /// <p>A short text description of the job.</p>
    public let description: String?
    /// <p>Will be <code>true</code> if the job was canceled with the optional <code>force</code> parameter set to
    ///           <code>true</code>.</p>
    public let forceCanceled: Bool?
    /// <p>An ARN identifying the job with format "arn:aws:iot:region:account:job/jobId".</p>
    public let jobArn: String?
    /// <p>Allows you to create a staged rollout of a job.</p>
    public let jobExecutionsRolloutConfig: JobExecutionsRolloutConfig?
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    public let jobId: String?
    /// <p>Details about the job process.</p>
    public let jobProcessDetails: JobProcessDetails?
    /// <p>The ARN of the job template used to create the job.</p>
    public let jobTemplateArn: String?
    /// <p>The time, in seconds since the epoch, when the job was last updated.</p>
    public let lastUpdatedAt: Date?
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    ///         <p>When you specify a value for this parameter, AWS IoT Core sends jobs notifications to MQTT topics that
    ///             contain the value in the following format.</p>
    ///         <p>
    ///             <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code>
    ///          </p>
    ///         <note>
    ///             <p>The <code>namespaceId</code> feature is in public preview.</p>
    ///          </note>
    public let namespaceId: String?
    /// <p>Configuration for pre-signed S3 URLs.</p>
    public let presignedUrlConfig: PresignedUrlConfig?
    /// <p>If the job was updated, provides the reason code for the update.</p>
    public let reasonCode: String?
    /// <p>The status of the job, one of <code>IN_PROGRESS</code>, <code>CANCELED</code>,
    ///             <code>DELETION_IN_PROGRESS</code> or <code>COMPLETED</code>. </p>
    public let status: JobStatus?
    /// <p>Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things
    ///             specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing
    ///             when a change is detected in a target. For example, a job will run on a device when the thing representing
    ///             the device is added to a target group, even after the job was completed by all things originally in the
    ///             group. </p>
    public let targetSelection: TargetSelection?
    /// <p>A list of IoT things and thing groups to which the job should be sent.</p>
    public let targets: [String]?
    /// <p>Specifies the amount of time each device has to finish its execution of the job.  A timer
    ///            is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job
    ///            execution status is not set to another terminal state before the timer expires, it will
    ///            be automatically set to <code>TIMED_OUT</code>.</p>
    public let timeoutConfig: TimeoutConfig?

    public init (
        abortConfig: AbortConfig? = nil,
        comment: String? = nil,
        completedAt: Date? = nil,
        createdAt: Date? = nil,
        description: String? = nil,
        forceCanceled: Bool? = nil,
        jobArn: String? = nil,
        jobExecutionsRolloutConfig: JobExecutionsRolloutConfig? = nil,
        jobId: String? = nil,
        jobProcessDetails: JobProcessDetails? = nil,
        jobTemplateArn: String? = nil,
        lastUpdatedAt: Date? = nil,
        namespaceId: String? = nil,
        presignedUrlConfig: PresignedUrlConfig? = nil,
        reasonCode: String? = nil,
        status: JobStatus? = nil,
        targetSelection: TargetSelection? = nil,
        targets: [String]? = nil,
        timeoutConfig: TimeoutConfig? = nil
    )
    {
        self.abortConfig = abortConfig
        self.comment = comment
        self.completedAt = completedAt
        self.createdAt = createdAt
        self.description = description
        self.forceCanceled = forceCanceled
        self.jobArn = jobArn
        self.jobExecutionsRolloutConfig = jobExecutionsRolloutConfig
        self.jobId = jobId
        self.jobProcessDetails = jobProcessDetails
        self.jobTemplateArn = jobTemplateArn
        self.lastUpdatedAt = lastUpdatedAt
        self.namespaceId = namespaceId
        self.presignedUrlConfig = presignedUrlConfig
        self.reasonCode = reasonCode
        self.status = status
        self.targetSelection = targetSelection
        self.targets = targets
        self.timeoutConfig = timeoutConfig
    }
}

extension Job: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Job(abortConfig: \(String(describing: abortConfig)), comment: \(String(describing: comment)), completedAt: \(String(describing: completedAt)), createdAt: \(String(describing: createdAt)), description: \(String(describing: description)), forceCanceled: \(String(describing: forceCanceled)), jobArn: \(String(describing: jobArn)), jobExecutionsRolloutConfig: \(String(describing: jobExecutionsRolloutConfig)), jobId: \(String(describing: jobId)), jobProcessDetails: \(String(describing: jobProcessDetails)), jobTemplateArn: \(String(describing: jobTemplateArn)), lastUpdatedAt: \(String(describing: lastUpdatedAt)), namespaceId: \(String(describing: namespaceId)), presignedUrlConfig: \(String(describing: presignedUrlConfig)), reasonCode: \(String(describing: reasonCode)), status: \(String(describing: status)), targetSelection: \(String(describing: targetSelection)), targets: \(String(describing: targets)), timeoutConfig: \(String(describing: timeoutConfig)))"}
}
