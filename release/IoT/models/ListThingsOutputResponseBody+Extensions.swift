// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListThingsOutputResponseBody: Equatable {
    public let things: [ThingAttribute]?
    public let nextToken: String?
}

extension ListThingsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case things
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingsContainer = try containerValues.decodeIfPresent([ThingAttribute?].self, forKey: .things)
        var thingsDecoded0:[ThingAttribute]? = nil
        if let thingsContainer = thingsContainer {
            thingsDecoded0 = [ThingAttribute]()
            for structure0 in thingsContainer {
                if let structure0 = structure0 {
                    thingsDecoded0?.append(structure0)
                }
            }
        }
        things = thingsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
