// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TestInvokeAuthorizerInputBody: Equatable {
    public let token: String?
    public let tokenSignature: String?
    public let httpContext: HttpContext?
    public let mqttContext: MqttContext?
    public let tlsContext: TlsContext?
}

extension TestInvokeAuthorizerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case httpContext
        case mqttContext
        case tlsContext
        case token
        case tokenSignature
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .token)
        token = tokenDecoded
        let tokenSignatureDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tokenSignature)
        tokenSignature = tokenSignatureDecoded
        let httpContextDecoded = try containerValues.decodeIfPresent(HttpContext.self, forKey: .httpContext)
        httpContext = httpContextDecoded
        let mqttContextDecoded = try containerValues.decodeIfPresent(MqttContext.self, forKey: .mqttContext)
        mqttContext = mqttContextDecoded
        let tlsContextDecoded = try containerValues.decodeIfPresent(TlsContext.self, forKey: .tlsContext)
        tlsContext = tlsContextDecoded
    }
}
