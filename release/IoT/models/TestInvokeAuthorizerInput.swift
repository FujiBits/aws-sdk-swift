// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct TestInvokeAuthorizerInput: Equatable {
    /// <p>The custom authorizer name.</p>
    public let authorizerName: String?
    /// <p>Specifies a test HTTP authorization request.</p>
    public let httpContext: HttpContext?
    /// <p>Specifies a test MQTT authorization request.</p>
    public let mqttContext: MqttContext?
    /// <p>Specifies a test TLS authorization request.</p>
    public let tlsContext: TlsContext?
    /// <p>The token returned by your custom authentication service.</p>
    public let token: String?
    /// <p>The signature made with the token and your custom authentication service's private
    ///          key. This value must be Base-64-encoded.</p>
    public let tokenSignature: String?

    public init (
        authorizerName: String? = nil,
        httpContext: HttpContext? = nil,
        mqttContext: MqttContext? = nil,
        tlsContext: TlsContext? = nil,
        token: String? = nil,
        tokenSignature: String? = nil
    )
    {
        self.authorizerName = authorizerName
        self.httpContext = httpContext
        self.mqttContext = mqttContext
        self.tlsContext = tlsContext
        self.token = token
        self.tokenSignature = tokenSignature
    }
}

extension TestInvokeAuthorizerInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TestInvokeAuthorizerInput(authorizerName: \(String(describing: authorizerName)), httpContext: \(String(describing: httpContext)), mqttContext: \(String(describing: mqttContext)), tlsContext: \(String(describing: tlsContext)), token: \(String(describing: token)), tokenSignature: \(String(describing: tokenSignature)))"}
}
