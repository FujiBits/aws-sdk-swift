// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OutgoingCertificate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateArn
        case certificateId
        case creationDate
        case transferDate
        case transferMessage
        case transferredTo
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let certificateId = certificateId {
            try encodeContainer.encode(certificateId, forKey: .certificateId)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let transferDate = transferDate {
            try encodeContainer.encode(transferDate.timeIntervalSince1970, forKey: .transferDate)
        }
        if let transferMessage = transferMessage {
            try encodeContainer.encode(transferMessage, forKey: .transferMessage)
        }
        if let transferredTo = transferredTo {
            try encodeContainer.encode(transferredTo, forKey: .transferredTo)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let transferredToDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transferredTo)
        transferredTo = transferredToDecoded
        let transferDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .transferDate)
        transferDate = transferDateDecoded
        let transferMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transferMessage)
        transferMessage = transferMessageDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}
