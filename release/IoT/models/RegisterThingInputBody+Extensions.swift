// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterThingInputBody: Equatable {
    public let templateBody: String?
    public let parameters: [String:String]?
}

extension RegisterThingInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case parameters
        case templateBody
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateBodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let parametersContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .parameters)
        var parametersDecoded0: [String:String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [String:String]()
            for (key0, value0) in parametersContainer {
                if let value0 = value0 {
                    parametersDecoded0?[key0] = value0
                }
            }
        }
        parameters = parametersDecoded0
    }
}
