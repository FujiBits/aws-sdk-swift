// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartSigningJobParameter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destination
        case signingProfileName
        case signingProfileParameter
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let signingProfileName = signingProfileName {
            try encodeContainer.encode(signingProfileName, forKey: .signingProfileName)
        }
        if let signingProfileParameter = signingProfileParameter {
            try encodeContainer.encode(signingProfileParameter, forKey: .signingProfileParameter)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingProfileParameterDecoded = try containerValues.decodeIfPresent(SigningProfileParameter.self, forKey: .signingProfileParameter)
        signingProfileParameter = signingProfileParameterDecoded
        let signingProfileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .signingProfileName)
        signingProfileName = signingProfileNameDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Destination.self, forKey: .destination)
        destination = destinationDecoded
    }
}
