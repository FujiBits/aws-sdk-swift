// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateJobInput: Equatable {
    /// <p>Allows you to create criteria to abort a job.</p>
    public let abortConfig: AbortConfig?
    /// <p>A short text description of the job.</p>
    public let description: String?
    /// <p>The job document. Required if you don't specify a value for <code>documentSource</code>.</p>
    public let document: String?
    /// <p>An S3 link to the job document. Required if you don't specify a value for <code>document</code>.</p>
    ///         <note>
    ///             <p>If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document.</p>
    ///             <p>The placeholder link is of the following form:</p>
    ///             <p>
    ///                <code>${aws:iot:s3-presigned-url:https://s3.amazonaws.com/<i>bucket</i>/<i>key</i>}</code>
    ///             </p>
    ///             <p>where <i>bucket</i> is your bucket name and <i>key</i> is the object in the bucket to which you are linking.</p>
    ///         </note>
    public let documentSource: String?
    /// <p>Allows you to create a staged rollout of the job.</p>
    public let jobExecutionsRolloutConfig: JobExecutionsRolloutConfig?
    /// <p>A job identifier which must be unique for your AWS account. We recommend using a UUID. Alpha-numeric
    ///             characters, "-" and "_" are valid for use here.</p>
    public let jobId: String?
    /// <p>The ARN of the job template used to create the job.</p>
    public let jobTemplateArn: String?
    /// <p>The namespace used to indicate that a job is a customer-managed job.</p>
    ///         <p>When you specify a value for this parameter, AWS IoT Core sends jobs notifications to MQTT topics that
    ///             contain the value in the following format.</p>
    ///         <p>
    ///             <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code>
    ///          </p>
    ///         <note>
    ///             <p>The <code>namespaceId</code> feature is in public preview.</p>
    ///          </note>
    public let namespaceId: String?
    /// <p>Configuration information for pre-signed S3 URLs.</p>
    public let presignedUrlConfig: PresignedUrlConfig?
    /// <p>Metadata which can be used to manage the job.</p>
    public let tags: [Tag]?
    /// <p>Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things
    ///             specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing
    ///             when a change is detected in a target. For example, a job will run on a thing when the thing is added to a
    ///             target group, even after the job was completed by all things originally in the group.</p>
    public let targetSelection: TargetSelection?
    /// <p>A list of things and thing groups to which the job should be sent.</p>
    public let targets: [String]?
    /// <p>Specifies the amount of time each device has to finish its execution of the job. The timer
    ///            is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job
    ///            execution status is not set to another terminal state before the time expires, it will be
    ///            automatically set to <code>TIMED_OUT</code>.</p>
    public let timeoutConfig: TimeoutConfig?

    public init (
        abortConfig: AbortConfig? = nil,
        description: String? = nil,
        document: String? = nil,
        documentSource: String? = nil,
        jobExecutionsRolloutConfig: JobExecutionsRolloutConfig? = nil,
        jobId: String? = nil,
        jobTemplateArn: String? = nil,
        namespaceId: String? = nil,
        presignedUrlConfig: PresignedUrlConfig? = nil,
        tags: [Tag]? = nil,
        targetSelection: TargetSelection? = nil,
        targets: [String]? = nil,
        timeoutConfig: TimeoutConfig? = nil
    )
    {
        self.abortConfig = abortConfig
        self.description = description
        self.document = document
        self.documentSource = documentSource
        self.jobExecutionsRolloutConfig = jobExecutionsRolloutConfig
        self.jobId = jobId
        self.jobTemplateArn = jobTemplateArn
        self.namespaceId = namespaceId
        self.presignedUrlConfig = presignedUrlConfig
        self.tags = tags
        self.targetSelection = targetSelection
        self.targets = targets
        self.timeoutConfig = timeoutConfig
    }
}

extension CreateJobInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateJobInput(abortConfig: \(String(describing: abortConfig)), description: \(String(describing: description)), document: \(String(describing: document)), documentSource: \(String(describing: documentSource)), jobExecutionsRolloutConfig: \(String(describing: jobExecutionsRolloutConfig)), jobId: \(String(describing: jobId)), jobTemplateArn: \(String(describing: jobTemplateArn)), namespaceId: \(String(describing: namespaceId)), presignedUrlConfig: \(String(describing: presignedUrlConfig)), tags: \(String(describing: tags)), targetSelection: \(String(describing: targetSelection)), targets: \(String(describing: targets)), timeoutConfig: \(String(describing: timeoutConfig)))"}
}
