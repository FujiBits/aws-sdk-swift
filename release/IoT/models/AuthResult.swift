// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The authorizer result.</p>
public struct AuthResult: Equatable {
    /// <p>The policies and statements that allowed the specified action.</p>
    public let allowed: Allowed?
    /// <p>The final authorization decision of this scenario. Multiple statements are taken into
    ///          account when determining the authorization decision. An explicit deny statement can
    ///          override multiple allow statements.</p>
    public let authDecision: AuthDecision?
    /// <p>Authorization information.</p>
    public let authInfo: AuthInfo?
    /// <p>The policies and statements that denied the specified action.</p>
    public let denied: Denied?
    /// <p>Contains any missing context values found while evaluating policy.</p>
    public let missingContextValues: [String]?

    public init (
        allowed: Allowed? = nil,
        authDecision: AuthDecision? = nil,
        authInfo: AuthInfo? = nil,
        denied: Denied? = nil,
        missingContextValues: [String]? = nil
    )
    {
        self.allowed = allowed
        self.authDecision = authDecision
        self.authInfo = authInfo
        self.denied = denied
        self.missingContextValues = missingContextValues
    }
}

extension AuthResult: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AuthResult(allowed: \(String(describing: allowed)), authDecision: \(String(describing: authDecision)), authInfo: \(String(describing: authInfo)), denied: \(String(describing: denied)), missingContextValues: \(String(describing: missingContextValues)))"}
}
