// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListAuditMitigationActionsTasksInputHeadersMiddleware: Middleware {
    public let id: String = "ListAuditMitigationActionsTasksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAuditMitigationActionsTasksInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAuditMitigationActionsTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAuditMitigationActionsTasksInput>
    public typealias MOutput = OperationOutput<ListAuditMitigationActionsTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAuditMitigationActionsTasksOutputError>
}

public struct ListAuditMitigationActionsTasksInputQueryItemMiddleware: Middleware {
    public let id: String = "ListAuditMitigationActionsTasksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListAuditMitigationActionsTasksInput>,
                  next: H) -> Swift.Result<OperationOutput<ListAuditMitigationActionsTasksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let findingId = input.operationInput.findingId {
            let findingIdQueryItem = URLQueryItem(name: "findingId".urlPercentEncoding(), value: String(findingId).urlPercentEncoding())
            input.builder.withQueryItem(findingIdQueryItem)
        }
        if let startTime = input.operationInput.startTime {
            let startTimeQueryItem = URLQueryItem(name: "startTime".urlPercentEncoding(), value: String(startTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(startTimeQueryItem)
        }
        if let endTime = input.operationInput.endTime {
            let endTimeQueryItem = URLQueryItem(name: "endTime".urlPercentEncoding(), value: String(endTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(endTimeQueryItem)
        }
        if let auditTaskId = input.operationInput.auditTaskId {
            let auditTaskIdQueryItem = URLQueryItem(name: "auditTaskId".urlPercentEncoding(), value: String(auditTaskId).urlPercentEncoding())
            input.builder.withQueryItem(auditTaskIdQueryItem)
        }
        if let taskStatus = input.operationInput.taskStatus {
            let taskStatusQueryItem = URLQueryItem(name: "taskStatus".urlPercentEncoding(), value: String(taskStatus.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(taskStatusQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListAuditMitigationActionsTasksInput>
    public typealias MOutput = OperationOutput<ListAuditMitigationActionsTasksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListAuditMitigationActionsTasksOutputError>
}

extension ListAuditMitigationActionsTasksInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
