// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateAuditSuppressionInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateAuditSuppressionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateAuditSuppressionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateAuditSuppressionInput>
    public typealias MOutput = OperationOutput<UpdateAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateAuditSuppressionOutputError>
}

public struct UpdateAuditSuppressionInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateAuditSuppressionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateAuditSuppressionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateAuditSuppressionInput>
    public typealias MOutput = OperationOutput<UpdateAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateAuditSuppressionOutputError>
}

public struct UpdateAuditSuppressionInputBodyMiddleware: Middleware {
    public let id: String = "UpdateAuditSuppressionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateAuditSuppressionInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateAuditSuppressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateAuditSuppressionInput>
    public typealias MOutput = OperationOutput<UpdateAuditSuppressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateAuditSuppressionOutputError>
}

extension UpdateAuditSuppressionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case checkName
        case description
        case expirationDate
        case resourceIdentifier
        case suppressIndefinitely
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkName = checkName {
            try encodeContainer.encode(checkName, forKey: .checkName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let expirationDate = expirationDate {
            try encodeContainer.encode(expirationDate.timeIntervalSince1970, forKey: .expirationDate)
        }
        if let resourceIdentifier = resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
        if let suppressIndefinitely = suppressIndefinitely {
            try encodeContainer.encode(suppressIndefinitely, forKey: .suppressIndefinitely)
        }
    }
}
