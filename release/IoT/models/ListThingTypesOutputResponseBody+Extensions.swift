// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListThingTypesOutputResponseBody: Equatable {
    public let thingTypes: [ThingTypeDefinition]?
    public let nextToken: String?
}

extension ListThingTypesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case thingTypes
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingTypesContainer = try containerValues.decodeIfPresent([ThingTypeDefinition?].self, forKey: .thingTypes)
        var thingTypesDecoded0:[ThingTypeDefinition]? = nil
        if let thingTypesContainer = thingTypesContainer {
            thingTypesDecoded0 = [ThingTypeDefinition]()
            for structure0 in thingTypesContainer {
                if let structure0 = structure0 {
                    thingTypesDecoded0?.append(structure0)
                }
            }
        }
        thingTypes = thingTypesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
