// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Job: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case abortConfig
        case comment
        case completedAt
        case createdAt
        case description
        case forceCanceled
        case jobArn
        case jobExecutionsRolloutConfig
        case jobId
        case jobProcessDetails
        case jobTemplateArn
        case lastUpdatedAt
        case namespaceId
        case presignedUrlConfig
        case reasonCode
        case status
        case targetSelection
        case targets
        case timeoutConfig
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let abortConfig = abortConfig {
            try encodeContainer.encode(abortConfig, forKey: .abortConfig)
        }
        if let comment = comment {
            try encodeContainer.encode(comment, forKey: .comment)
        }
        if let completedAt = completedAt {
            try encodeContainer.encode(completedAt.timeIntervalSince1970, forKey: .completedAt)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let forceCanceled = forceCanceled {
            try encodeContainer.encode(forceCanceled, forKey: .forceCanceled)
        }
        if let jobArn = jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobExecutionsRolloutConfig = jobExecutionsRolloutConfig {
            try encodeContainer.encode(jobExecutionsRolloutConfig, forKey: .jobExecutionsRolloutConfig)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobProcessDetails = jobProcessDetails {
            try encodeContainer.encode(jobProcessDetails, forKey: .jobProcessDetails)
        }
        if let jobTemplateArn = jobTemplateArn {
            try encodeContainer.encode(jobTemplateArn, forKey: .jobTemplateArn)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let namespaceId = namespaceId {
            try encodeContainer.encode(namespaceId, forKey: .namespaceId)
        }
        if let presignedUrlConfig = presignedUrlConfig {
            try encodeContainer.encode(presignedUrlConfig, forKey: .presignedUrlConfig)
        }
        if let reasonCode = reasonCode {
            try encodeContainer.encode(reasonCode, forKey: .reasonCode)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetSelection = targetSelection {
            try encodeContainer.encode(targetSelection.rawValue, forKey: .targetSelection)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for jobtargets0 in targets {
                try targetsContainer.encode(jobtargets0)
            }
        }
        if let timeoutConfig = timeoutConfig {
            try encodeContainer.encode(timeoutConfig, forKey: .timeoutConfig)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let targetSelectionDecoded = try containerValues.decodeIfPresent(TargetSelection.self, forKey: .targetSelection)
        targetSelection = targetSelectionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(JobStatus.self, forKey: .status)
        status = statusDecoded
        let forceCanceledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .forceCanceled)
        forceCanceled = forceCanceledDecoded
        let reasonCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reasonCode)
        reasonCode = reasonCodeDecoded
        let commentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .comment)
        comment = commentDecoded
        let targetsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .targets)
        var targetsDecoded0:[String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [String]()
            for string0 in targetsContainer {
                if let string0 = string0 {
                    targetsDecoded0?.append(string0)
                }
            }
        }
        targets = targetsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let presignedUrlConfigDecoded = try containerValues.decodeIfPresent(PresignedUrlConfig.self, forKey: .presignedUrlConfig)
        presignedUrlConfig = presignedUrlConfigDecoded
        let jobExecutionsRolloutConfigDecoded = try containerValues.decodeIfPresent(JobExecutionsRolloutConfig.self, forKey: .jobExecutionsRolloutConfig)
        jobExecutionsRolloutConfig = jobExecutionsRolloutConfigDecoded
        let abortConfigDecoded = try containerValues.decodeIfPresent(AbortConfig.self, forKey: .abortConfig)
        abortConfig = abortConfigDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let completedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completedAt)
        completedAt = completedAtDecoded
        let jobProcessDetailsDecoded = try containerValues.decodeIfPresent(JobProcessDetails.self, forKey: .jobProcessDetails)
        jobProcessDetails = jobProcessDetailsDecoded
        let timeoutConfigDecoded = try containerValues.decodeIfPresent(TimeoutConfig.self, forKey: .timeoutConfig)
        timeoutConfig = timeoutConfigDecoded
        let namespaceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namespaceId)
        namespaceId = namespaceIdDecoded
        let jobTemplateArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobTemplateArn)
        jobTemplateArn = jobTemplateArnDecoded
    }
}
