// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AuditMitigationActionsTaskTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case auditCheckToReasonCodeFilter
        case auditTaskId
        case findingIds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auditCheckToReasonCodeFilter = auditCheckToReasonCodeFilter {
            var auditCheckToReasonCodeFilterContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .auditCheckToReasonCodeFilter)
            for (dictKey0, auditchecktoreasoncodefilter0) in auditCheckToReasonCodeFilter {
                try auditCheckToReasonCodeFilterContainer.encode(auditchecktoreasoncodefilter0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let auditTaskId = auditTaskId {
            try encodeContainer.encode(auditTaskId, forKey: .auditTaskId)
        }
        if let findingIds = findingIds {
            var findingIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingIds)
            for findingids0 in findingIds {
                try findingIdsContainer.encode(findingids0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let auditTaskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .auditTaskId)
        auditTaskId = auditTaskIdDecoded
        let findingIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .findingIds)
        var findingIdsDecoded0:[String]? = nil
        if let findingIdsContainer = findingIdsContainer {
            findingIdsDecoded0 = [String]()
            for string0 in findingIdsContainer {
                if let string0 = string0 {
                    findingIdsDecoded0?.append(string0)
                }
            }
        }
        findingIds = findingIdsDecoded0
        let auditCheckToReasonCodeFilterContainer = try containerValues.decodeIfPresent([String: [String?]?].self, forKey: .auditCheckToReasonCodeFilter)
        var auditCheckToReasonCodeFilterDecoded0: [String:[String]]? = nil
        if let auditCheckToReasonCodeFilterContainer = auditCheckToReasonCodeFilterContainer {
            auditCheckToReasonCodeFilterDecoded0 = [String:[String]]()
            for (key0, reasonfornoncompliancecodes0) in auditCheckToReasonCodeFilterContainer {
                var reasonfornoncompliancecodes0Decoded0: [String]? = nil
                if let reasonfornoncompliancecodes0 = reasonfornoncompliancecodes0 {
                    reasonfornoncompliancecodes0Decoded0 = [String]()
                    for string1 in reasonfornoncompliancecodes0 {
                        if let string1 = string1 {
                            reasonfornoncompliancecodes0Decoded0?.append(string1)
                        }
                    }
                }
                auditCheckToReasonCodeFilterDecoded0?[key0] = reasonfornoncompliancecodes0Decoded0
            }
        }
        auditCheckToReasonCodeFilter = auditCheckToReasonCodeFilterDecoded0
    }
}
