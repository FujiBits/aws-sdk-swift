// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StepFunctionsAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case executionNamePrefix
        case roleArn
        case stateMachineName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionNamePrefix = executionNamePrefix {
            try encodeContainer.encode(executionNamePrefix, forKey: .executionNamePrefix)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stateMachineName = stateMachineName {
            try encodeContainer.encode(stateMachineName, forKey: .stateMachineName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionNamePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionNamePrefix)
        executionNamePrefix = executionNamePrefixDecoded
        let stateMachineNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateMachineName)
        stateMachineName = stateMachineNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}
