// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes the actions associated with a rule.</p>
public struct Action: Equatable {
    /// <p>Change the state of a CloudWatch alarm.</p>
    public let cloudwatchAlarm: CloudwatchAlarmAction?
    /// <p>Send data to CloudWatch Logs.</p>
    public let cloudwatchLogs: CloudwatchLogsAction?
    /// <p>Capture a CloudWatch metric.</p>
    public let cloudwatchMetric: CloudwatchMetricAction?
    /// <p>Write to a DynamoDB table.</p>
    public let dynamoDB: DynamoDBAction?
    /// <p>Write to a DynamoDB table. This is a new version of the DynamoDB action. It allows
    ///          you to write each attribute in an MQTT message payload into a separate DynamoDB
    ///          column.</p>
    public let dynamoDBv2: DynamoDBv2Action?
    /// <p>Write data to an Amazon Elasticsearch Service domain.</p>
    public let elasticsearch: ElasticsearchAction?
    /// <p>Write to an Amazon Kinesis Firehose stream.</p>
    public let firehose: FirehoseAction?
    /// <p>Send data to an HTTPS endpoint.</p>
    public let http: HttpAction?
    /// <p>Sends message data to an AWS IoT Analytics channel.</p>
    public let iotAnalytics: IotAnalyticsAction?
    /// <p>Sends an input to an AWS IoT Events detector.</p>
    public let iotEvents: IotEventsAction?
    /// <p>Sends data from the MQTT message that triggered the rule to AWS IoT SiteWise asset
    ///       properties.</p>
    public let iotSiteWise: IotSiteWiseAction?
    /// <p>Send messages to an Amazon Managed Streaming for Apache Kafka (Amazon MSK) or self-managed Apache Kafka cluster.</p>
    public let kafka: KafkaAction?
    /// <p>Write data to an Amazon Kinesis stream.</p>
    public let kinesis: KinesisAction?
    /// <p>Invoke a Lambda function.</p>
    public let lambda: LambdaAction?
    /// <p>Publish to another MQTT topic.</p>
    public let republish: RepublishAction?
    /// <p>Write to an Amazon S3 bucket.</p>
    public let s3: S3Action?
    /// <p>Send a message to a Salesforce IoT Cloud Input Stream.</p>
    public let salesforce: SalesforceAction?
    /// <p>Publish to an Amazon SNS topic.</p>
    public let sns: SnsAction?
    /// <p>Publish to an Amazon SQS queue.</p>
    public let sqs: SqsAction?
    /// <p>Starts execution of a Step Functions state machine.</p>
    public let stepFunctions: StepFunctionsAction?
    /// <p>The Timestream rule action writes attributes (measures) from an MQTT message
    ///          into an Amazon Timestream table. For more information, see the <a href="https://docs.aws.amazon.com/iot/latest/developerguide/timestream-rule-action.html">Timestream</a>
    ///             topic rule action documentation.</p>
    public let timestream: TimestreamAction?

    public init (
        cloudwatchAlarm: CloudwatchAlarmAction? = nil,
        cloudwatchLogs: CloudwatchLogsAction? = nil,
        cloudwatchMetric: CloudwatchMetricAction? = nil,
        dynamoDB: DynamoDBAction? = nil,
        dynamoDBv2: DynamoDBv2Action? = nil,
        elasticsearch: ElasticsearchAction? = nil,
        firehose: FirehoseAction? = nil,
        http: HttpAction? = nil,
        iotAnalytics: IotAnalyticsAction? = nil,
        iotEvents: IotEventsAction? = nil,
        iotSiteWise: IotSiteWiseAction? = nil,
        kafka: KafkaAction? = nil,
        kinesis: KinesisAction? = nil,
        lambda: LambdaAction? = nil,
        republish: RepublishAction? = nil,
        s3: S3Action? = nil,
        salesforce: SalesforceAction? = nil,
        sns: SnsAction? = nil,
        sqs: SqsAction? = nil,
        stepFunctions: StepFunctionsAction? = nil,
        timestream: TimestreamAction? = nil
    )
    {
        self.cloudwatchAlarm = cloudwatchAlarm
        self.cloudwatchLogs = cloudwatchLogs
        self.cloudwatchMetric = cloudwatchMetric
        self.dynamoDB = dynamoDB
        self.dynamoDBv2 = dynamoDBv2
        self.elasticsearch = elasticsearch
        self.firehose = firehose
        self.http = http
        self.iotAnalytics = iotAnalytics
        self.iotEvents = iotEvents
        self.iotSiteWise = iotSiteWise
        self.kafka = kafka
        self.kinesis = kinesis
        self.lambda = lambda
        self.republish = republish
        self.s3 = s3
        self.salesforce = salesforce
        self.sns = sns
        self.sqs = sqs
        self.stepFunctions = stepFunctions
        self.timestream = timestream
    }
}

extension Action: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Action(cloudwatchAlarm: \(String(describing: cloudwatchAlarm)), cloudwatchLogs: \(String(describing: cloudwatchLogs)), cloudwatchMetric: \(String(describing: cloudwatchMetric)), dynamoDB: \(String(describing: dynamoDB)), dynamoDBv2: \(String(describing: dynamoDBv2)), elasticsearch: \(String(describing: elasticsearch)), firehose: \(String(describing: firehose)), http: \(String(describing: http)), iotAnalytics: \(String(describing: iotAnalytics)), iotEvents: \(String(describing: iotEvents)), iotSiteWise: \(String(describing: iotSiteWise)), kafka: \(String(describing: kafka)), kinesis: \(String(describing: kinesis)), lambda: \(String(describing: lambda)), republish: \(String(describing: republish)), s3: \(String(describing: s3)), salesforce: \(String(describing: salesforce)), sns: \(String(describing: sns)), sqs: \(String(describing: sqs)), stepFunctions: \(String(describing: stepFunctions)), timestream: \(String(describing: timestream)))"}
}
