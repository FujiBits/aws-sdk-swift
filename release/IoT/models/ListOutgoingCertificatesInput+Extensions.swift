// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListOutgoingCertificatesInputHeadersMiddleware: Middleware {
    public let id: String = "ListOutgoingCertificatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOutgoingCertificatesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOutgoingCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOutgoingCertificatesInput>
    public typealias MOutput = OperationOutput<ListOutgoingCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOutgoingCertificatesOutputError>
}

public struct ListOutgoingCertificatesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListOutgoingCertificatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOutgoingCertificatesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOutgoingCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        let ascendingOrderQueryItem = URLQueryItem(name: "isAscendingOrder".urlPercentEncoding(), value: String(input.operationInput.ascendingOrder).urlPercentEncoding())
        input.builder.withQueryItem(ascendingOrderQueryItem)
        if let marker = input.operationInput.marker {
            let markerQueryItem = URLQueryItem(name: "marker".urlPercentEncoding(), value: String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let pageSize = input.operationInput.pageSize {
            let pageSizeQueryItem = URLQueryItem(name: "pageSize".urlPercentEncoding(), value: String(pageSize).urlPercentEncoding())
            input.builder.withQueryItem(pageSizeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOutgoingCertificatesInput>
    public typealias MOutput = OperationOutput<ListOutgoingCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOutgoingCertificatesOutputError>
}

extension ListOutgoingCertificatesInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
