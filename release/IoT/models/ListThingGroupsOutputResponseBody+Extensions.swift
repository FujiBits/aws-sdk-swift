// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListThingGroupsOutputResponseBody: Equatable {
    public let thingGroups: [GroupNameAndArn]?
    public let nextToken: String?
}

extension ListThingGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case thingGroups
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingGroupsContainer = try containerValues.decodeIfPresent([GroupNameAndArn?].self, forKey: .thingGroups)
        var thingGroupsDecoded0:[GroupNameAndArn]? = nil
        if let thingGroupsContainer = thingGroupsContainer {
            thingGroupsDecoded0 = [GroupNameAndArn]()
            for structure0 in thingGroupsContainer {
                if let structure0 = structure0 {
                    thingGroupsDecoded0?.append(structure0)
                }
            }
        }
        thingGroups = thingGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
