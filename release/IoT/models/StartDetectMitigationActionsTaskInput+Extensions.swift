// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartDetectMitigationActionsTaskInputHeadersMiddleware: Middleware {
    public let id: String = "StartDetectMitigationActionsTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartDetectMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<StartDetectMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartDetectMitigationActionsTaskInput>
    public typealias MOutput = OperationOutput<StartDetectMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartDetectMitigationActionsTaskOutputError>
}

public struct StartDetectMitigationActionsTaskInputQueryItemMiddleware: Middleware {
    public let id: String = "StartDetectMitigationActionsTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartDetectMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<StartDetectMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartDetectMitigationActionsTaskInput>
    public typealias MOutput = OperationOutput<StartDetectMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartDetectMitigationActionsTaskOutputError>
}

public struct StartDetectMitigationActionsTaskInputBodyMiddleware: Middleware {
    public let id: String = "StartDetectMitigationActionsTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartDetectMitigationActionsTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<StartDetectMitigationActionsTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartDetectMitigationActionsTaskInput>
    public typealias MOutput = OperationOutput<StartDetectMitigationActionsTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartDetectMitigationActionsTaskOutputError>
}

extension StartDetectMitigationActionsTaskInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions
        case clientRequestToken
        case includeOnlyActiveViolations
        case includeSuppressedAlerts
        case target
        case violationEventOccurrenceRange
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for detectmitigationactionstoexecutelist0 in actions {
                try actionsContainer.encode(detectmitigationactionstoexecutelist0)
            }
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let includeOnlyActiveViolations = includeOnlyActiveViolations {
            try encodeContainer.encode(includeOnlyActiveViolations, forKey: .includeOnlyActiveViolations)
        }
        if let includeSuppressedAlerts = includeSuppressedAlerts {
            try encodeContainer.encode(includeSuppressedAlerts, forKey: .includeSuppressedAlerts)
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if let violationEventOccurrenceRange = violationEventOccurrenceRange {
            try encodeContainer.encode(violationEventOccurrenceRange, forKey: .violationEventOccurrenceRange)
        }
    }
}
