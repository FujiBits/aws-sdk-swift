// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ThingIndexingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customFields
        case managedFields
        case thingConnectivityIndexingMode
        case thingIndexingMode
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customFields = customFields {
            var customFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customFields)
            for fields0 in customFields {
                try customFieldsContainer.encode(fields0)
            }
        }
        if let managedFields = managedFields {
            var managedFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .managedFields)
            for fields0 in managedFields {
                try managedFieldsContainer.encode(fields0)
            }
        }
        if let thingConnectivityIndexingMode = thingConnectivityIndexingMode {
            try encodeContainer.encode(thingConnectivityIndexingMode.rawValue, forKey: .thingConnectivityIndexingMode)
        }
        if let thingIndexingMode = thingIndexingMode {
            try encodeContainer.encode(thingIndexingMode.rawValue, forKey: .thingIndexingMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingIndexingModeDecoded = try containerValues.decodeIfPresent(ThingIndexingMode.self, forKey: .thingIndexingMode)
        thingIndexingMode = thingIndexingModeDecoded
        let thingConnectivityIndexingModeDecoded = try containerValues.decodeIfPresent(ThingConnectivityIndexingMode.self, forKey: .thingConnectivityIndexingMode)
        thingConnectivityIndexingMode = thingConnectivityIndexingModeDecoded
        let managedFieldsContainer = try containerValues.decodeIfPresent([Field?].self, forKey: .managedFields)
        var managedFieldsDecoded0:[Field]? = nil
        if let managedFieldsContainer = managedFieldsContainer {
            managedFieldsDecoded0 = [Field]()
            for structure0 in managedFieldsContainer {
                if let structure0 = structure0 {
                    managedFieldsDecoded0?.append(structure0)
                }
            }
        }
        managedFields = managedFieldsDecoded0
        let customFieldsContainer = try containerValues.decodeIfPresent([Field?].self, forKey: .customFields)
        var customFieldsDecoded0:[Field]? = nil
        if let customFieldsContainer = customFieldsContainer {
            customFieldsDecoded0 = [Field]()
            for structure0 in customFieldsContainer {
                if let structure0 = structure0 {
                    customFieldsDecoded0?.append(structure0)
                }
            }
        }
        customFields = customFieldsDecoded0
    }
}
