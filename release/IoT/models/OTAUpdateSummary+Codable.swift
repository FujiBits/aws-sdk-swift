// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OTAUpdateSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationDate
        case otaUpdateArn
        case otaUpdateId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let otaUpdateArn = otaUpdateArn {
            try encodeContainer.encode(otaUpdateArn, forKey: .otaUpdateArn)
        }
        if let otaUpdateId = otaUpdateId {
            try encodeContainer.encode(otaUpdateId, forKey: .otaUpdateId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let otaUpdateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .otaUpdateId)
        otaUpdateId = otaUpdateIdDecoded
        let otaUpdateArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .otaUpdateArn)
        otaUpdateArn = otaUpdateArnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}
