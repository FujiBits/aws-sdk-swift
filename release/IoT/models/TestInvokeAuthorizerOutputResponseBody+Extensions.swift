// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TestInvokeAuthorizerOutputResponseBody: Equatable {
    public let isAuthenticated: Bool?
    public let principalId: String?
    public let policyDocuments: [String]?
    public let refreshAfterInSeconds: Int?
    public let disconnectAfterInSeconds: Int?
}

extension TestInvokeAuthorizerOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case disconnectAfterInSeconds
        case isAuthenticated
        case policyDocuments
        case principalId
        case refreshAfterInSeconds
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isAuthenticatedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .isAuthenticated)
        isAuthenticated = isAuthenticatedDecoded
        let principalIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .principalId)
        principalId = principalIdDecoded
        let policyDocumentsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .policyDocuments)
        var policyDocumentsDecoded0:[String]? = nil
        if let policyDocumentsContainer = policyDocumentsContainer {
            policyDocumentsDecoded0 = [String]()
            for string0 in policyDocumentsContainer {
                if let string0 = string0 {
                    policyDocumentsDecoded0?.append(string0)
                }
            }
        }
        policyDocuments = policyDocumentsDecoded0
        let refreshAfterInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .refreshAfterInSeconds)
        refreshAfterInSeconds = refreshAfterInSecondsDecoded
        let disconnectAfterInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .disconnectAfterInSeconds)
        disconnectAfterInSeconds = disconnectAfterInSecondsDecoded
    }
}
