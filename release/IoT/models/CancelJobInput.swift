// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CancelJobInput: Equatable {
    /// <p>An optional comment string describing why the job was canceled.</p>
    public let comment: String?
    /// <p>(Optional) If <code>true</code> job executions with status "IN_PROGRESS" and "QUEUED"
    ///           are canceled, otherwise only job executions with status "QUEUED" are canceled. The default
    ///           is <code>false</code>.</p>
    ///         <p>Canceling a job which is "IN_PROGRESS", will cause a device which is executing
    ///           the job to be unable to update the job execution status.  Use caution and ensure that each
    ///           device executing a job which is canceled is able to recover to a valid state.</p>
    public let force: Bool
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    public let jobId: String?
    /// <p>(Optional)A reason code string that explains why the job was canceled.</p>
    public let reasonCode: String?

    public init (
        comment: String? = nil,
        force: Bool = false,
        jobId: String? = nil,
        reasonCode: String? = nil
    )
    {
        self.comment = comment
        self.force = force
        self.jobId = jobId
        self.reasonCode = reasonCode
    }
}

extension CancelJobInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelJobInput(comment: \(String(describing: comment)), force: \(String(describing: force)), jobId: \(String(describing: jobId)), reasonCode: \(String(describing: reasonCode)))"}
}
