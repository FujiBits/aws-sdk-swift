// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListViolationEventsInputHeadersMiddleware: Middleware {
    public let id: String = "ListViolationEventsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListViolationEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListViolationEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListViolationEventsInput>
    public typealias MOutput = OperationOutput<ListViolationEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListViolationEventsOutputError>
}

public struct ListViolationEventsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListViolationEventsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListViolationEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListViolationEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let securityProfileName = input.operationInput.securityProfileName {
            let securityProfileNameQueryItem = URLQueryItem(name: "securityProfileName".urlPercentEncoding(), value: String(securityProfileName).urlPercentEncoding())
            input.builder.withQueryItem(securityProfileNameQueryItem)
        }
        if let listSuppressedAlerts = input.operationInput.listSuppressedAlerts {
            let listSuppressedAlertsQueryItem = URLQueryItem(name: "listSuppressedAlerts".urlPercentEncoding(), value: String(listSuppressedAlerts).urlPercentEncoding())
            input.builder.withQueryItem(listSuppressedAlertsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let behaviorCriteriaType = input.operationInput.behaviorCriteriaType {
            let behaviorCriteriaTypeQueryItem = URLQueryItem(name: "behaviorCriteriaType".urlPercentEncoding(), value: String(behaviorCriteriaType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(behaviorCriteriaTypeQueryItem)
        }
        if let thingName = input.operationInput.thingName {
            let thingNameQueryItem = URLQueryItem(name: "thingName".urlPercentEncoding(), value: String(thingName).urlPercentEncoding())
            input.builder.withQueryItem(thingNameQueryItem)
        }
        if let startTime = input.operationInput.startTime {
            let startTimeQueryItem = URLQueryItem(name: "startTime".urlPercentEncoding(), value: String(startTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(startTimeQueryItem)
        }
        if let endTime = input.operationInput.endTime {
            let endTimeQueryItem = URLQueryItem(name: "endTime".urlPercentEncoding(), value: String(endTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(endTimeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListViolationEventsInput>
    public typealias MOutput = OperationOutput<ListViolationEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListViolationEventsOutputError>
}

extension ListViolationEventsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
