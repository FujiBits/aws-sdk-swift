// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MitigationAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionParams
        case id
        case name
        case roleArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionParams = actionParams {
            try encodeContainer.encode(actionParams, forKey: .actionParams)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let actionParamsDecoded = try containerValues.decodeIfPresent(MitigationActionParams.self, forKey: .actionParams)
        actionParams = actionParamsDecoded
    }
}
