// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ThingDocument: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributes
        case connectivity
        case shadow
        case thingGroupNames
        case thingId
        case thingName
        case thingTypeName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .attributes)
            for (dictKey0, attributes0) in attributes {
                try attributesContainer.encode(attributes0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let connectivity = connectivity {
            try encodeContainer.encode(connectivity, forKey: .connectivity)
        }
        if let shadow = shadow {
            try encodeContainer.encode(shadow, forKey: .shadow)
        }
        if let thingGroupNames = thingGroupNames {
            var thingGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .thingGroupNames)
            for thinggroupnamelist0 in thingGroupNames {
                try thingGroupNamesContainer.encode(thinggroupnamelist0)
            }
        }
        if let thingId = thingId {
            try encodeContainer.encode(thingId, forKey: .thingId)
        }
        if let thingName = thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
        if let thingTypeName = thingTypeName {
            try encodeContainer.encode(thingTypeName, forKey: .thingTypeName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let thingIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .thingId)
        thingId = thingIdDecoded
        let thingTypeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .thingTypeName)
        thingTypeName = thingTypeNameDecoded
        let thingGroupNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .thingGroupNames)
        var thingGroupNamesDecoded0:[String]? = nil
        if let thingGroupNamesContainer = thingGroupNamesContainer {
            thingGroupNamesDecoded0 = [String]()
            for string0 in thingGroupNamesContainer {
                if let string0 = string0 {
                    thingGroupNamesDecoded0?.append(string0)
                }
            }
        }
        thingGroupNames = thingGroupNamesDecoded0
        let attributesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .attributes)
        var attributesDecoded0: [String:String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [String:String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let shadowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .shadow)
        shadow = shadowDecoded
        let connectivityDecoded = try containerValues.decodeIfPresent(ThingConnectivity.self, forKey: .connectivity)
        connectivity = connectivityDecoded
    }
}
