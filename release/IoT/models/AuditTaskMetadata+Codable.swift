// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AuditTaskMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case taskId
        case taskStatus
        case taskType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let taskStatus = taskStatus {
            try encodeContainer.encode(taskStatus.rawValue, forKey: .taskStatus)
        }
        if let taskType = taskType {
            try encodeContainer.encode(taskType.rawValue, forKey: .taskType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let taskStatusDecoded = try containerValues.decodeIfPresent(AuditTaskStatus.self, forKey: .taskStatus)
        taskStatus = taskStatusDecoded
        let taskTypeDecoded = try containerValues.decodeIfPresent(AuditTaskType.self, forKey: .taskType)
        taskType = taskTypeDecoded
    }
}
