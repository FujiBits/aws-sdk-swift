// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccountLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccountLimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension AccountLimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccountLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An AWS service limit was exceeded for the calling AWS account.</p>
public struct AccountLimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccountLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AccountLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeBuildClientTypes {
    public enum ArtifactNamespace: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case buildId
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ArtifactNamespace] {
            return [
                .buildId,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .buildId: return "BUILD_ID"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ArtifactNamespace(rawValue: rawValue) ?? ArtifactNamespace.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes {
    public enum ArtifactPackaging: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case zip
        case sdkUnknown(Swift.String)

        public static var allCases: [ArtifactPackaging] {
            return [
                .none,
                .zip,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .zip: return "ZIP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ArtifactPackaging(rawValue: rawValue) ?? ArtifactPackaging.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes {
    public enum ArtifactsType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case codepipeline
        case noArtifacts
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [ArtifactsType] {
            return [
                .codepipeline,
                .noArtifacts,
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .codepipeline: return "CODEPIPELINE"
            case .noArtifacts: return "NO_ARTIFACTS"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ArtifactsType(rawValue: rawValue) ?? ArtifactsType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes {
    public enum AuthType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case basicAuth
        case oauth
        case personalAccessToken
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthType] {
            return [
                .basicAuth,
                .oauth,
                .personalAccessToken,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .basicAuth: return "BASIC_AUTH"
            case .oauth: return "OAUTH"
            case .personalAccessToken: return "PERSONAL_ACCESS_TOKEN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthType(rawValue: rawValue) ?? AuthType.sdkUnknown(rawValue)
        }
    }
}

public struct BatchDeleteBuildsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchDeleteBuildsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchDeleteBuildsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchDeleteBuildsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchDeleteBuildsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchDeleteBuildsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchDeleteBuildsOutputError>
}

extension BatchDeleteBuildsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDeleteBuildsInput(ids: \(Swift.String(describing: ids)))"}
}

extension BatchDeleteBuildsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ids
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ids = ids {
            var idsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ids)
            for buildids0 in ids {
                try idsContainer.encode(buildids0)
            }
        }
    }
}

public struct BatchDeleteBuildsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchDeleteBuildsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchDeleteBuildsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchDeleteBuildsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchDeleteBuildsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchDeleteBuildsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchDeleteBuildsOutputError>
}

public struct BatchDeleteBuildsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchDeleteBuildsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchDeleteBuildsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchDeleteBuildsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchDeleteBuildsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchDeleteBuildsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchDeleteBuildsOutputError>
}

public struct BatchDeleteBuildsInput: Swift.Equatable {
    /// <p>The IDs of the builds to delete.</p>
    public let ids: [Swift.String]?

    public init (
        ids: [Swift.String]? = nil
    )
    {
        self.ids = ids
    }
}

struct BatchDeleteBuildsInputBody: Swift.Equatable {
    public let ids: [Swift.String]?
}

extension BatchDeleteBuildsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ids
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ids)
        var idsDecoded0:[Swift.String]? = nil
        if let idsContainer = idsContainer {
            idsDecoded0 = [Swift.String]()
            for string0 in idsContainer {
                if let string0 = string0 {
                    idsDecoded0?.append(string0)
                }
            }
        }
        ids = idsDecoded0
    }
}

extension BatchDeleteBuildsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDeleteBuildsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchDeleteBuildsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDeleteBuildsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDeleteBuildsOutputResponse(buildsDeleted: \(Swift.String(describing: buildsDeleted)), buildsNotDeleted: \(Swift.String(describing: buildsNotDeleted)))"}
}

extension BatchDeleteBuildsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchDeleteBuildsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.buildsDeleted = output.buildsDeleted
            self.buildsNotDeleted = output.buildsNotDeleted
        } else {
            self.buildsDeleted = nil
            self.buildsNotDeleted = nil
        }
    }
}

public struct BatchDeleteBuildsOutputResponse: Swift.Equatable {
    /// <p>The IDs of the builds that were successfully deleted.</p>
    public let buildsDeleted: [Swift.String]?
    /// <p>Information about any builds that could not be successfully deleted.</p>
    public let buildsNotDeleted: [CodeBuildClientTypes.BuildNotDeleted]?

    public init (
        buildsDeleted: [Swift.String]? = nil,
        buildsNotDeleted: [CodeBuildClientTypes.BuildNotDeleted]? = nil
    )
    {
        self.buildsDeleted = buildsDeleted
        self.buildsNotDeleted = buildsNotDeleted
    }
}

struct BatchDeleteBuildsOutputResponseBody: Swift.Equatable {
    public let buildsDeleted: [Swift.String]?
    public let buildsNotDeleted: [CodeBuildClientTypes.BuildNotDeleted]?
}

extension BatchDeleteBuildsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildsDeleted
        case buildsNotDeleted
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildsDeletedContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .buildsDeleted)
        var buildsDeletedDecoded0:[Swift.String]? = nil
        if let buildsDeletedContainer = buildsDeletedContainer {
            buildsDeletedDecoded0 = [Swift.String]()
            for string0 in buildsDeletedContainer {
                if let string0 = string0 {
                    buildsDeletedDecoded0?.append(string0)
                }
            }
        }
        buildsDeleted = buildsDeletedDecoded0
        let buildsNotDeletedContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.BuildNotDeleted?].self, forKey: .buildsNotDeleted)
        var buildsNotDeletedDecoded0:[CodeBuildClientTypes.BuildNotDeleted]? = nil
        if let buildsNotDeletedContainer = buildsNotDeletedContainer {
            buildsNotDeletedDecoded0 = [CodeBuildClientTypes.BuildNotDeleted]()
            for structure0 in buildsNotDeletedContainer {
                if let structure0 = structure0 {
                    buildsNotDeletedDecoded0?.append(structure0)
                }
            }
        }
        buildsNotDeleted = buildsNotDeletedDecoded0
    }
}

public struct BatchGetBuildBatchesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetBuildBatchesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetBuildBatchesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetBuildBatchesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetBuildBatchesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetBuildBatchesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetBuildBatchesOutputError>
}

extension BatchGetBuildBatchesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchGetBuildBatchesInput(ids: \(Swift.String(describing: ids)))"}
}

extension BatchGetBuildBatchesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ids
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ids = ids {
            var idsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ids)
            for buildbatchids0 in ids {
                try idsContainer.encode(buildbatchids0)
            }
        }
    }
}

public struct BatchGetBuildBatchesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetBuildBatchesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetBuildBatchesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetBuildBatchesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetBuildBatchesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetBuildBatchesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetBuildBatchesOutputError>
}

public struct BatchGetBuildBatchesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetBuildBatchesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetBuildBatchesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetBuildBatchesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetBuildBatchesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetBuildBatchesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetBuildBatchesOutputError>
}

public struct BatchGetBuildBatchesInput: Swift.Equatable {
    /// <p>An array that contains the batch build identifiers to retrieve.</p>
    public let ids: [Swift.String]?

    public init (
        ids: [Swift.String]? = nil
    )
    {
        self.ids = ids
    }
}

struct BatchGetBuildBatchesInputBody: Swift.Equatable {
    public let ids: [Swift.String]?
}

extension BatchGetBuildBatchesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ids
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ids)
        var idsDecoded0:[Swift.String]? = nil
        if let idsContainer = idsContainer {
            idsDecoded0 = [Swift.String]()
            for string0 in idsContainer {
                if let string0 = string0 {
                    idsDecoded0?.append(string0)
                }
            }
        }
        ids = idsDecoded0
    }
}

extension BatchGetBuildBatchesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetBuildBatchesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetBuildBatchesOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetBuildBatchesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchGetBuildBatchesOutputResponse(buildBatches: \(Swift.String(describing: buildBatches)), buildBatchesNotFound: \(Swift.String(describing: buildBatchesNotFound)))"}
}

extension BatchGetBuildBatchesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetBuildBatchesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.buildBatches = output.buildBatches
            self.buildBatchesNotFound = output.buildBatchesNotFound
        } else {
            self.buildBatches = nil
            self.buildBatchesNotFound = nil
        }
    }
}

public struct BatchGetBuildBatchesOutputResponse: Swift.Equatable {
    /// <p>An array of <code>BuildBatch</code> objects that represent the retrieved batch
    ///             builds.</p>
    public let buildBatches: [CodeBuildClientTypes.BuildBatch]?
    /// <p>An array that contains the identifiers of any batch builds that are not found.</p>
    public let buildBatchesNotFound: [Swift.String]?

    public init (
        buildBatches: [CodeBuildClientTypes.BuildBatch]? = nil,
        buildBatchesNotFound: [Swift.String]? = nil
    )
    {
        self.buildBatches = buildBatches
        self.buildBatchesNotFound = buildBatchesNotFound
    }
}

struct BatchGetBuildBatchesOutputResponseBody: Swift.Equatable {
    public let buildBatches: [CodeBuildClientTypes.BuildBatch]?
    public let buildBatchesNotFound: [Swift.String]?
}

extension BatchGetBuildBatchesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildBatches
        case buildBatchesNotFound
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildBatchesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.BuildBatch?].self, forKey: .buildBatches)
        var buildBatchesDecoded0:[CodeBuildClientTypes.BuildBatch]? = nil
        if let buildBatchesContainer = buildBatchesContainer {
            buildBatchesDecoded0 = [CodeBuildClientTypes.BuildBatch]()
            for structure0 in buildBatchesContainer {
                if let structure0 = structure0 {
                    buildBatchesDecoded0?.append(structure0)
                }
            }
        }
        buildBatches = buildBatchesDecoded0
        let buildBatchesNotFoundContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .buildBatchesNotFound)
        var buildBatchesNotFoundDecoded0:[Swift.String]? = nil
        if let buildBatchesNotFoundContainer = buildBatchesNotFoundContainer {
            buildBatchesNotFoundDecoded0 = [Swift.String]()
            for string0 in buildBatchesNotFoundContainer {
                if let string0 = string0 {
                    buildBatchesNotFoundDecoded0?.append(string0)
                }
            }
        }
        buildBatchesNotFound = buildBatchesNotFoundDecoded0
    }
}

public struct BatchGetBuildsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetBuildsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetBuildsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetBuildsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetBuildsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetBuildsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetBuildsOutputError>
}

extension BatchGetBuildsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchGetBuildsInput(ids: \(Swift.String(describing: ids)))"}
}

extension BatchGetBuildsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ids
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ids = ids {
            var idsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ids)
            for buildids0 in ids {
                try idsContainer.encode(buildids0)
            }
        }
    }
}

public struct BatchGetBuildsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetBuildsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetBuildsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetBuildsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetBuildsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetBuildsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetBuildsOutputError>
}

public struct BatchGetBuildsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetBuildsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetBuildsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetBuildsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetBuildsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetBuildsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetBuildsOutputError>
}

public struct BatchGetBuildsInput: Swift.Equatable {
    /// <p>The IDs of the builds.</p>
    public let ids: [Swift.String]?

    public init (
        ids: [Swift.String]? = nil
    )
    {
        self.ids = ids
    }
}

struct BatchGetBuildsInputBody: Swift.Equatable {
    public let ids: [Swift.String]?
}

extension BatchGetBuildsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ids
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ids)
        var idsDecoded0:[Swift.String]? = nil
        if let idsContainer = idsContainer {
            idsDecoded0 = [Swift.String]()
            for string0 in idsContainer {
                if let string0 = string0 {
                    idsDecoded0?.append(string0)
                }
            }
        }
        ids = idsDecoded0
    }
}

extension BatchGetBuildsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetBuildsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetBuildsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetBuildsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchGetBuildsOutputResponse(builds: \(Swift.String(describing: builds)), buildsNotFound: \(Swift.String(describing: buildsNotFound)))"}
}

extension BatchGetBuildsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetBuildsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.builds = output.builds
            self.buildsNotFound = output.buildsNotFound
        } else {
            self.builds = nil
            self.buildsNotFound = nil
        }
    }
}

public struct BatchGetBuildsOutputResponse: Swift.Equatable {
    /// <p>Information about the requested builds.</p>
    public let builds: [CodeBuildClientTypes.Build]?
    /// <p>The IDs of builds for which information could not be found.</p>
    public let buildsNotFound: [Swift.String]?

    public init (
        builds: [CodeBuildClientTypes.Build]? = nil,
        buildsNotFound: [Swift.String]? = nil
    )
    {
        self.builds = builds
        self.buildsNotFound = buildsNotFound
    }
}

struct BatchGetBuildsOutputResponseBody: Swift.Equatable {
    public let builds: [CodeBuildClientTypes.Build]?
    public let buildsNotFound: [Swift.String]?
}

extension BatchGetBuildsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case builds
        case buildsNotFound
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.Build?].self, forKey: .builds)
        var buildsDecoded0:[CodeBuildClientTypes.Build]? = nil
        if let buildsContainer = buildsContainer {
            buildsDecoded0 = [CodeBuildClientTypes.Build]()
            for structure0 in buildsContainer {
                if let structure0 = structure0 {
                    buildsDecoded0?.append(structure0)
                }
            }
        }
        builds = buildsDecoded0
        let buildsNotFoundContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .buildsNotFound)
        var buildsNotFoundDecoded0:[Swift.String]? = nil
        if let buildsNotFoundContainer = buildsNotFoundContainer {
            buildsNotFoundDecoded0 = [Swift.String]()
            for string0 in buildsNotFoundContainer {
                if let string0 = string0 {
                    buildsNotFoundDecoded0?.append(string0)
                }
            }
        }
        buildsNotFound = buildsNotFoundDecoded0
    }
}

public struct BatchGetProjectsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetProjectsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetProjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetProjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetProjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetProjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetProjectsOutputError>
}

extension BatchGetProjectsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchGetProjectsInput(names: \(Swift.String(describing: names)))"}
}

extension BatchGetProjectsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case names
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let names = names {
            var namesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .names)
            for projectnames0 in names {
                try namesContainer.encode(projectnames0)
            }
        }
    }
}

public struct BatchGetProjectsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetProjectsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetProjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetProjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetProjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetProjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetProjectsOutputError>
}

public struct BatchGetProjectsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetProjectsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetProjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetProjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetProjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetProjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetProjectsOutputError>
}

public struct BatchGetProjectsInput: Swift.Equatable {
    /// <p>The names or ARNs of the build projects. To get information about a project shared
    ///             with your AWS account, its ARN must be specified. You cannot specify a shared project
    ///             using its name.</p>
    public let names: [Swift.String]?

    public init (
        names: [Swift.String]? = nil
    )
    {
        self.names = names
    }
}

struct BatchGetProjectsInputBody: Swift.Equatable {
    public let names: [Swift.String]?
}

extension BatchGetProjectsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case names
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .names)
        var namesDecoded0:[Swift.String]? = nil
        if let namesContainer = namesContainer {
            namesDecoded0 = [Swift.String]()
            for string0 in namesContainer {
                if let string0 = string0 {
                    namesDecoded0?.append(string0)
                }
            }
        }
        names = namesDecoded0
    }
}

extension BatchGetProjectsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetProjectsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetProjectsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetProjectsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchGetProjectsOutputResponse(projects: \(Swift.String(describing: projects)), projectsNotFound: \(Swift.String(describing: projectsNotFound)))"}
}

extension BatchGetProjectsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetProjectsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.projects = output.projects
            self.projectsNotFound = output.projectsNotFound
        } else {
            self.projects = nil
            self.projectsNotFound = nil
        }
    }
}

public struct BatchGetProjectsOutputResponse: Swift.Equatable {
    /// <p>Information about the requested build projects.</p>
    public let projects: [CodeBuildClientTypes.Project]?
    /// <p>The names of build projects for which information could not be found.</p>
    public let projectsNotFound: [Swift.String]?

    public init (
        projects: [CodeBuildClientTypes.Project]? = nil,
        projectsNotFound: [Swift.String]? = nil
    )
    {
        self.projects = projects
        self.projectsNotFound = projectsNotFound
    }
}

struct BatchGetProjectsOutputResponseBody: Swift.Equatable {
    public let projects: [CodeBuildClientTypes.Project]?
    public let projectsNotFound: [Swift.String]?
}

extension BatchGetProjectsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projects
        case projectsNotFound
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.Project?].self, forKey: .projects)
        var projectsDecoded0:[CodeBuildClientTypes.Project]? = nil
        if let projectsContainer = projectsContainer {
            projectsDecoded0 = [CodeBuildClientTypes.Project]()
            for structure0 in projectsContainer {
                if let structure0 = structure0 {
                    projectsDecoded0?.append(structure0)
                }
            }
        }
        projects = projectsDecoded0
        let projectsNotFoundContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .projectsNotFound)
        var projectsNotFoundDecoded0:[Swift.String]? = nil
        if let projectsNotFoundContainer = projectsNotFoundContainer {
            projectsNotFoundDecoded0 = [Swift.String]()
            for string0 in projectsNotFoundContainer {
                if let string0 = string0 {
                    projectsNotFoundDecoded0?.append(string0)
                }
            }
        }
        projectsNotFound = projectsNotFoundDecoded0
    }
}

public struct BatchGetReportGroupsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetReportGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetReportGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetReportGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetReportGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetReportGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetReportGroupsOutputError>
}

extension BatchGetReportGroupsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchGetReportGroupsInput(reportGroupArns: \(Swift.String(describing: reportGroupArns)))"}
}

extension BatchGetReportGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reportGroupArns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reportGroupArns = reportGroupArns {
            var reportGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reportGroupArns)
            for reportgrouparns0 in reportGroupArns {
                try reportGroupArnsContainer.encode(reportgrouparns0)
            }
        }
    }
}

public struct BatchGetReportGroupsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetReportGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetReportGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetReportGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetReportGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetReportGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetReportGroupsOutputError>
}

public struct BatchGetReportGroupsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetReportGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetReportGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetReportGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetReportGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetReportGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetReportGroupsOutputError>
}

public struct BatchGetReportGroupsInput: Swift.Equatable {
    /// <p>
    ///       An array of report group ARNs that identify the report groups to return.
    ///     </p>
    public let reportGroupArns: [Swift.String]?

    public init (
        reportGroupArns: [Swift.String]? = nil
    )
    {
        self.reportGroupArns = reportGroupArns
    }
}

struct BatchGetReportGroupsInputBody: Swift.Equatable {
    public let reportGroupArns: [Swift.String]?
}

extension BatchGetReportGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reportGroupArns
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .reportGroupArns)
        var reportGroupArnsDecoded0:[Swift.String]? = nil
        if let reportGroupArnsContainer = reportGroupArnsContainer {
            reportGroupArnsDecoded0 = [Swift.String]()
            for string0 in reportGroupArnsContainer {
                if let string0 = string0 {
                    reportGroupArnsDecoded0?.append(string0)
                }
            }
        }
        reportGroupArns = reportGroupArnsDecoded0
    }
}

extension BatchGetReportGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetReportGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetReportGroupsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetReportGroupsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchGetReportGroupsOutputResponse(reportGroups: \(Swift.String(describing: reportGroups)), reportGroupsNotFound: \(Swift.String(describing: reportGroupsNotFound)))"}
}

extension BatchGetReportGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetReportGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.reportGroups = output.reportGroups
            self.reportGroupsNotFound = output.reportGroupsNotFound
        } else {
            self.reportGroups = nil
            self.reportGroupsNotFound = nil
        }
    }
}

public struct BatchGetReportGroupsOutputResponse: Swift.Equatable {
    /// <p>
    ///       The array of report groups returned by <code>BatchGetReportGroups</code>.
    ///     </p>
    public let reportGroups: [CodeBuildClientTypes.ReportGroup]?
    /// <p>
    ///       An array of ARNs passed to <code>BatchGetReportGroups</code> that are not associated with a <code>ReportGroup</code>.
    ///     </p>
    public let reportGroupsNotFound: [Swift.String]?

    public init (
        reportGroups: [CodeBuildClientTypes.ReportGroup]? = nil,
        reportGroupsNotFound: [Swift.String]? = nil
    )
    {
        self.reportGroups = reportGroups
        self.reportGroupsNotFound = reportGroupsNotFound
    }
}

struct BatchGetReportGroupsOutputResponseBody: Swift.Equatable {
    public let reportGroups: [CodeBuildClientTypes.ReportGroup]?
    public let reportGroupsNotFound: [Swift.String]?
}

extension BatchGetReportGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reportGroups
        case reportGroupsNotFound
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportGroupsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ReportGroup?].self, forKey: .reportGroups)
        var reportGroupsDecoded0:[CodeBuildClientTypes.ReportGroup]? = nil
        if let reportGroupsContainer = reportGroupsContainer {
            reportGroupsDecoded0 = [CodeBuildClientTypes.ReportGroup]()
            for structure0 in reportGroupsContainer {
                if let structure0 = structure0 {
                    reportGroupsDecoded0?.append(structure0)
                }
            }
        }
        reportGroups = reportGroupsDecoded0
        let reportGroupsNotFoundContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .reportGroupsNotFound)
        var reportGroupsNotFoundDecoded0:[Swift.String]? = nil
        if let reportGroupsNotFoundContainer = reportGroupsNotFoundContainer {
            reportGroupsNotFoundDecoded0 = [Swift.String]()
            for string0 in reportGroupsNotFoundContainer {
                if let string0 = string0 {
                    reportGroupsNotFoundDecoded0?.append(string0)
                }
            }
        }
        reportGroupsNotFound = reportGroupsNotFoundDecoded0
    }
}

public struct BatchGetReportsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetReportsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetReportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetReportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetReportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetReportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetReportsOutputError>
}

extension BatchGetReportsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchGetReportsInput(reportArns: \(Swift.String(describing: reportArns)))"}
}

extension BatchGetReportsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reportArns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reportArns = reportArns {
            var reportArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reportArns)
            for reportarns0 in reportArns {
                try reportArnsContainer.encode(reportarns0)
            }
        }
    }
}

public struct BatchGetReportsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetReportsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetReportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetReportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetReportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetReportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetReportsOutputError>
}

public struct BatchGetReportsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetReportsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetReportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetReportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetReportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetReportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetReportsOutputError>
}

public struct BatchGetReportsInput: Swift.Equatable {
    /// <p>
    ///       An array of ARNs that identify the <code>Report</code> objects to return.
    ///     </p>
    public let reportArns: [Swift.String]?

    public init (
        reportArns: [Swift.String]? = nil
    )
    {
        self.reportArns = reportArns
    }
}

struct BatchGetReportsInputBody: Swift.Equatable {
    public let reportArns: [Swift.String]?
}

extension BatchGetReportsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reportArns
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .reportArns)
        var reportArnsDecoded0:[Swift.String]? = nil
        if let reportArnsContainer = reportArnsContainer {
            reportArnsDecoded0 = [Swift.String]()
            for string0 in reportArnsContainer {
                if let string0 = string0 {
                    reportArnsDecoded0?.append(string0)
                }
            }
        }
        reportArns = reportArnsDecoded0
    }
}

extension BatchGetReportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetReportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetReportsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetReportsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchGetReportsOutputResponse(reports: \(Swift.String(describing: reports)), reportsNotFound: \(Swift.String(describing: reportsNotFound)))"}
}

extension BatchGetReportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetReportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.reports = output.reports
            self.reportsNotFound = output.reportsNotFound
        } else {
            self.reports = nil
            self.reportsNotFound = nil
        }
    }
}

public struct BatchGetReportsOutputResponse: Swift.Equatable {
    /// <p>
    ///       The array of <code>Report</code> objects returned by <code>BatchGetReports</code>.
    ///     </p>
    public let reports: [CodeBuildClientTypes.Report]?
    /// <p>
    ///       An array of ARNs passed to <code>BatchGetReportGroups</code> that are not associated with a <code>Report</code>.
    ///     </p>
    public let reportsNotFound: [Swift.String]?

    public init (
        reports: [CodeBuildClientTypes.Report]? = nil,
        reportsNotFound: [Swift.String]? = nil
    )
    {
        self.reports = reports
        self.reportsNotFound = reportsNotFound
    }
}

struct BatchGetReportsOutputResponseBody: Swift.Equatable {
    public let reports: [CodeBuildClientTypes.Report]?
    public let reportsNotFound: [Swift.String]?
}

extension BatchGetReportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reports
        case reportsNotFound
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.Report?].self, forKey: .reports)
        var reportsDecoded0:[CodeBuildClientTypes.Report]? = nil
        if let reportsContainer = reportsContainer {
            reportsDecoded0 = [CodeBuildClientTypes.Report]()
            for structure0 in reportsContainer {
                if let structure0 = structure0 {
                    reportsDecoded0?.append(structure0)
                }
            }
        }
        reports = reportsDecoded0
        let reportsNotFoundContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .reportsNotFound)
        var reportsNotFoundDecoded0:[Swift.String]? = nil
        if let reportsNotFoundContainer = reportsNotFoundContainer {
            reportsNotFoundDecoded0 = [Swift.String]()
            for string0 in reportsNotFoundContainer {
                if let string0 = string0 {
                    reportsNotFoundDecoded0?.append(string0)
                }
            }
        }
        reportsNotFound = reportsNotFoundDecoded0
    }
}

extension CodeBuildClientTypes.BatchRestrictions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeTypesAllowed
        case maximumBuildsAllowed
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeTypesAllowed = computeTypesAllowed {
            var computeTypesAllowedContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computeTypesAllowed)
            for computetypesallowed0 in computeTypesAllowed {
                try computeTypesAllowedContainer.encode(computetypesallowed0)
            }
        }
        if let maximumBuildsAllowed = maximumBuildsAllowed {
            try encodeContainer.encode(maximumBuildsAllowed, forKey: .maximumBuildsAllowed)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumBuildsAllowedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBuildsAllowed)
        maximumBuildsAllowed = maximumBuildsAllowedDecoded
        let computeTypesAllowedContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .computeTypesAllowed)
        var computeTypesAllowedDecoded0:[Swift.String]? = nil
        if let computeTypesAllowedContainer = computeTypesAllowedContainer {
            computeTypesAllowedDecoded0 = [Swift.String]()
            for string0 in computeTypesAllowedContainer {
                if let string0 = string0 {
                    computeTypesAllowedDecoded0?.append(string0)
                }
            }
        }
        computeTypesAllowed = computeTypesAllowedDecoded0
    }
}

extension CodeBuildClientTypes.BatchRestrictions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchRestrictions(computeTypesAllowed: \(Swift.String(describing: computeTypesAllowed)), maximumBuildsAllowed: \(Swift.String(describing: maximumBuildsAllowed)))"}
}

extension CodeBuildClientTypes {
    /// <p>Specifies restrictions for the batch build.</p>
    public struct BatchRestrictions: Swift.Equatable {
        /// <p>An array of strings that specify the compute types that are allowed for the batch
        ///             build. See <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html">Build environment
        ///                 compute types</a> in the <i>AWS CodeBuild User Guide</i> for these values.
        ///         </p>
        public let computeTypesAllowed: [Swift.String]?
        /// <p>Specifies the maximum number of builds allowed.</p>
        public let maximumBuildsAllowed: Swift.Int?

        public init (
            computeTypesAllowed: [Swift.String]? = nil,
            maximumBuildsAllowed: Swift.Int? = nil
        )
        {
            self.computeTypesAllowed = computeTypesAllowed
            self.maximumBuildsAllowed = maximumBuildsAllowed
        }
    }

}

extension CodeBuildClientTypes {
    /// <p>Specifies the access for objects that are uploaded to an Amazon S3 bucket that is owned by
    ///             another account.</p>
    ///         <p>By default, only the account that uploads the objects to the bucket has access to
    ///             these objects. This property allows you to give the bucket owner access to these
    ///             objects.</p>
    ///          <dl>
    ///             <dt>NONE</dt>
    ///             <dd>
    ///                 <p>The bucket owner does not have access to the objects. This is the
    ///                         default.</p>
    ///             </dd>
    ///             <dt>READ_ONLY</dt>
    ///             <dd>
    ///               <p>The bucket owner has read only access to the objects. The uploading account
    ///                         retains ownership of the objects.</p>
    ///             </dd>
    ///             <dt>FULL</dt>
    ///             <dd>
    ///               <p>The bucket owner has full access to the objects. Object ownership is determined
    ///                         by the following criteria:</p>
    ///                     <ul>
    ///                   <li>
    ///                             <p>If the bucket is configured with the <b>Bucket
    ///                                     owner preferred</b> setting, the bucket owner owns the
    ///                                 objects. The uploading account will have object access as specified
    ///                                 by the bucket's policy.</p>
    ///                         </li>
    ///                   <li>
    ///                             <p>Otherwise, the uploading account retains ownership of the
    ///                                 objects.</p>
    ///                         </li>
    ///                </ul>
    ///                     <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3
    ///                             Object Ownership</a> in the <i>Amazon Simple Storage Service User
    ///                         Guide</i>.</p>
    ///             </dd>
    ///          </dl>
    public enum BucketOwnerAccess: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case full
        case `none`
        case readOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketOwnerAccess] {
            return [
                .full,
                .none,
                .readOnly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .full: return "FULL"
            case .none: return "NONE"
            case .readOnly: return "READ_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BucketOwnerAccess(rawValue: rawValue) ?? BucketOwnerAccess.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.Build: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case artifacts
        case buildBatchArn
        case buildComplete
        case buildNumber
        case buildStatus
        case cache
        case currentPhase
        case debugSession
        case encryptionKey
        case endTime
        case environment
        case exportedEnvironmentVariables
        case fileSystemLocations
        case id
        case initiator
        case logs
        case networkInterface
        case phases
        case projectName
        case queuedTimeoutInMinutes
        case reportArns
        case resolvedSourceVersion
        case secondaryArtifacts
        case secondarySourceVersions
        case secondarySources
        case serviceRole
        case source
        case sourceVersion
        case startTime
        case timeoutInMinutes
        case vpcConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let artifacts = artifacts {
            try encodeContainer.encode(artifacts, forKey: .artifacts)
        }
        if let buildBatchArn = buildBatchArn {
            try encodeContainer.encode(buildBatchArn, forKey: .buildBatchArn)
        }
        if buildComplete != false {
            try encodeContainer.encode(buildComplete, forKey: .buildComplete)
        }
        if let buildNumber = buildNumber {
            try encodeContainer.encode(buildNumber, forKey: .buildNumber)
        }
        if let buildStatus = buildStatus {
            try encodeContainer.encode(buildStatus.rawValue, forKey: .buildStatus)
        }
        if let cache = cache {
            try encodeContainer.encode(cache, forKey: .cache)
        }
        if let currentPhase = currentPhase {
            try encodeContainer.encode(currentPhase, forKey: .currentPhase)
        }
        if let debugSession = debugSession {
            try encodeContainer.encode(debugSession, forKey: .debugSession)
        }
        if let encryptionKey = encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let environment = environment {
            try encodeContainer.encode(environment, forKey: .environment)
        }
        if let exportedEnvironmentVariables = exportedEnvironmentVariables {
            var exportedEnvironmentVariablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exportedEnvironmentVariables)
            for exportedenvironmentvariables0 in exportedEnvironmentVariables {
                try exportedEnvironmentVariablesContainer.encode(exportedenvironmentvariables0)
            }
        }
        if let fileSystemLocations = fileSystemLocations {
            var fileSystemLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fileSystemLocations)
            for projectfilesystemlocations0 in fileSystemLocations {
                try fileSystemLocationsContainer.encode(projectfilesystemlocations0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let initiator = initiator {
            try encodeContainer.encode(initiator, forKey: .initiator)
        }
        if let logs = logs {
            try encodeContainer.encode(logs, forKey: .logs)
        }
        if let networkInterface = networkInterface {
            try encodeContainer.encode(networkInterface, forKey: .networkInterface)
        }
        if let phases = phases {
            var phasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .phases)
            for buildphases0 in phases {
                try phasesContainer.encode(buildphases0)
            }
        }
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let queuedTimeoutInMinutes = queuedTimeoutInMinutes {
            try encodeContainer.encode(queuedTimeoutInMinutes, forKey: .queuedTimeoutInMinutes)
        }
        if let reportArns = reportArns {
            var reportArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reportArns)
            for buildreportarns0 in reportArns {
                try reportArnsContainer.encode(buildreportarns0)
            }
        }
        if let resolvedSourceVersion = resolvedSourceVersion {
            try encodeContainer.encode(resolvedSourceVersion, forKey: .resolvedSourceVersion)
        }
        if let secondaryArtifacts = secondaryArtifacts {
            var secondaryArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondaryArtifacts)
            for buildartifactslist0 in secondaryArtifacts {
                try secondaryArtifactsContainer.encode(buildartifactslist0)
            }
        }
        if let secondarySourceVersions = secondarySourceVersions {
            var secondarySourceVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySourceVersions)
            for projectsecondarysourceversions0 in secondarySourceVersions {
                try secondarySourceVersionsContainer.encode(projectsecondarysourceversions0)
            }
        }
        if let secondarySources = secondarySources {
            var secondarySourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySources)
            for projectsources0 in secondarySources {
                try secondarySourcesContainer.encode(projectsources0)
            }
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let sourceVersion = sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let timeoutInMinutes = timeoutInMinutes {
            try encodeContainer.encode(timeoutInMinutes, forKey: .timeoutInMinutes)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let buildNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .buildNumber)
        buildNumber = buildNumberDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let currentPhaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentPhase)
        currentPhase = currentPhaseDecoded
        let buildStatusDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.StatusType.self, forKey: .buildStatus)
        buildStatus = buildStatusDecoded
        let sourceVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
        let resolvedSourceVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resolvedSourceVersion)
        resolvedSourceVersion = resolvedSourceVersionDecoded
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let phasesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.BuildPhase?].self, forKey: .phases)
        var phasesDecoded0:[CodeBuildClientTypes.BuildPhase]? = nil
        if let phasesContainer = phasesContainer {
            phasesDecoded0 = [CodeBuildClientTypes.BuildPhase]()
            for structure0 in phasesContainer {
                if let structure0 = structure0 {
                    phasesDecoded0?.append(structure0)
                }
            }
        }
        phases = phasesDecoded0
        let sourceDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectSource.self, forKey: .source)
        source = sourceDecoded
        let secondarySourcesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectSource?].self, forKey: .secondarySources)
        var secondarySourcesDecoded0:[CodeBuildClientTypes.ProjectSource]? = nil
        if let secondarySourcesContainer = secondarySourcesContainer {
            secondarySourcesDecoded0 = [CodeBuildClientTypes.ProjectSource]()
            for structure0 in secondarySourcesContainer {
                if let structure0 = structure0 {
                    secondarySourcesDecoded0?.append(structure0)
                }
            }
        }
        secondarySources = secondarySourcesDecoded0
        let secondarySourceVersionsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectSourceVersion?].self, forKey: .secondarySourceVersions)
        var secondarySourceVersionsDecoded0:[CodeBuildClientTypes.ProjectSourceVersion]? = nil
        if let secondarySourceVersionsContainer = secondarySourceVersionsContainer {
            secondarySourceVersionsDecoded0 = [CodeBuildClientTypes.ProjectSourceVersion]()
            for structure0 in secondarySourceVersionsContainer {
                if let structure0 = structure0 {
                    secondarySourceVersionsDecoded0?.append(structure0)
                }
            }
        }
        secondarySourceVersions = secondarySourceVersionsDecoded0
        let artifactsDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BuildArtifacts.self, forKey: .artifacts)
        artifacts = artifactsDecoded
        let secondaryArtifactsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.BuildArtifacts?].self, forKey: .secondaryArtifacts)
        var secondaryArtifactsDecoded0:[CodeBuildClientTypes.BuildArtifacts]? = nil
        if let secondaryArtifactsContainer = secondaryArtifactsContainer {
            secondaryArtifactsDecoded0 = [CodeBuildClientTypes.BuildArtifacts]()
            for structure0 in secondaryArtifactsContainer {
                if let structure0 = structure0 {
                    secondaryArtifactsDecoded0?.append(structure0)
                }
            }
        }
        secondaryArtifacts = secondaryArtifactsDecoded0
        let cacheDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectCache.self, forKey: .cache)
        cache = cacheDecoded
        let environmentDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectEnvironment.self, forKey: .environment)
        environment = environmentDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let logsDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.LogsLocation.self, forKey: .logs)
        logs = logsDecoded
        let timeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInMinutes)
        timeoutInMinutes = timeoutInMinutesDecoded
        let queuedTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .queuedTimeoutInMinutes)
        queuedTimeoutInMinutes = queuedTimeoutInMinutesDecoded
        let buildCompleteDecoded = try containerValues.decode(Swift.Bool.self, forKey: .buildComplete)
        buildComplete = buildCompleteDecoded
        let initiatorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .initiator)
        initiator = initiatorDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let networkInterfaceDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.NetworkInterface.self, forKey: .networkInterface)
        networkInterface = networkInterfaceDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let exportedEnvironmentVariablesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ExportedEnvironmentVariable?].self, forKey: .exportedEnvironmentVariables)
        var exportedEnvironmentVariablesDecoded0:[CodeBuildClientTypes.ExportedEnvironmentVariable]? = nil
        if let exportedEnvironmentVariablesContainer = exportedEnvironmentVariablesContainer {
            exportedEnvironmentVariablesDecoded0 = [CodeBuildClientTypes.ExportedEnvironmentVariable]()
            for structure0 in exportedEnvironmentVariablesContainer {
                if let structure0 = structure0 {
                    exportedEnvironmentVariablesDecoded0?.append(structure0)
                }
            }
        }
        exportedEnvironmentVariables = exportedEnvironmentVariablesDecoded0
        let reportArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .reportArns)
        var reportArnsDecoded0:[Swift.String]? = nil
        if let reportArnsContainer = reportArnsContainer {
            reportArnsDecoded0 = [Swift.String]()
            for string0 in reportArnsContainer {
                if let string0 = string0 {
                    reportArnsDecoded0?.append(string0)
                }
            }
        }
        reportArns = reportArnsDecoded0
        let fileSystemLocationsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectFileSystemLocation?].self, forKey: .fileSystemLocations)
        var fileSystemLocationsDecoded0:[CodeBuildClientTypes.ProjectFileSystemLocation]? = nil
        if let fileSystemLocationsContainer = fileSystemLocationsContainer {
            fileSystemLocationsDecoded0 = [CodeBuildClientTypes.ProjectFileSystemLocation]()
            for structure0 in fileSystemLocationsContainer {
                if let structure0 = structure0 {
                    fileSystemLocationsDecoded0?.append(structure0)
                }
            }
        }
        fileSystemLocations = fileSystemLocationsDecoded0
        let debugSessionDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.DebugSession.self, forKey: .debugSession)
        debugSession = debugSessionDecoded
        let buildBatchArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildBatchArn)
        buildBatchArn = buildBatchArnDecoded
    }
}

extension CodeBuildClientTypes.Build: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Build(arn: \(Swift.String(describing: arn)), artifacts: \(Swift.String(describing: artifacts)), buildBatchArn: \(Swift.String(describing: buildBatchArn)), buildComplete: \(Swift.String(describing: buildComplete)), buildNumber: \(Swift.String(describing: buildNumber)), buildStatus: \(Swift.String(describing: buildStatus)), cache: \(Swift.String(describing: cache)), currentPhase: \(Swift.String(describing: currentPhase)), debugSession: \(Swift.String(describing: debugSession)), encryptionKey: \(Swift.String(describing: encryptionKey)), endTime: \(Swift.String(describing: endTime)), environment: \(Swift.String(describing: environment)), exportedEnvironmentVariables: \(Swift.String(describing: exportedEnvironmentVariables)), fileSystemLocations: \(Swift.String(describing: fileSystemLocations)), id: \(Swift.String(describing: id)), initiator: \(Swift.String(describing: initiator)), logs: \(Swift.String(describing: logs)), networkInterface: \(Swift.String(describing: networkInterface)), phases: \(Swift.String(describing: phases)), projectName: \(Swift.String(describing: projectName)), queuedTimeoutInMinutes: \(Swift.String(describing: queuedTimeoutInMinutes)), reportArns: \(Swift.String(describing: reportArns)), resolvedSourceVersion: \(Swift.String(describing: resolvedSourceVersion)), secondaryArtifacts: \(Swift.String(describing: secondaryArtifacts)), secondarySourceVersions: \(Swift.String(describing: secondarySourceVersions)), secondarySources: \(Swift.String(describing: secondarySources)), serviceRole: \(Swift.String(describing: serviceRole)), source: \(Swift.String(describing: source)), sourceVersion: \(Swift.String(describing: sourceVersion)), startTime: \(Swift.String(describing: startTime)), timeoutInMinutes: \(Swift.String(describing: timeoutInMinutes)), vpcConfig: \(Swift.String(describing: vpcConfig)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about a build.</p>
    public struct Build: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the build.</p>
        public let arn: Swift.String?
        /// <p>Information about the output artifacts for the build.</p>
        public let artifacts: CodeBuildClientTypes.BuildArtifacts?
        /// <p>The ARN of the batch build that this build is a member of, if applicable.</p>
        public let buildBatchArn: Swift.String?
        /// <p>Whether the build is complete. True if complete; otherwise, false.</p>
        public let buildComplete: Swift.Bool
        /// <p>The number of the build. For each project, the <code>buildNumber</code> of its first
        ///             build is <code>1</code>. The <code>buildNumber</code> of each subsequent build is
        ///             incremented by <code>1</code>. If a build is deleted, the <code>buildNumber</code> of
        ///             other builds does not change.</p>
        public let buildNumber: Swift.Int?
        /// <p>The current status of the build. Valid values include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>FAILED</code>: The build failed.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>FAULT</code>: The build faulted.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>IN_PROGRESS</code>: The build is still in progress.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>STOPPED</code>: The build stopped.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>SUCCEEDED</code>: The build succeeded.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>TIMED_OUT</code>: The build timed out.</p>
        ///             </li>
        ///          </ul>
        public let buildStatus: CodeBuildClientTypes.StatusType?
        /// <p>Information about the cache for the build.</p>
        public let cache: CodeBuildClientTypes.ProjectCache?
        /// <p>The current build phase.</p>
        public let currentPhase: Swift.String?
        /// <p>Contains information about the debug session for this build.</p>
        public let debugSession: CodeBuildClientTypes.DebugSession?
        /// <p>The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output
        ///             artifacts.</p>
        ///         <note>
        ///             <p> You can use a cross-account KMS key to encrypt the build output artifacts if your
        ///                 service role has permission to that key. </p>
        ///         </note>
        ///         <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using
        ///             the format <code>alias/<alias-name></code>).</p>
        public let encryptionKey: Swift.String?
        /// <p>When the build process ended, expressed in Unix time format.</p>
        public let endTime: ClientRuntime.Date?
        /// <p>Information about the build environment for this build.</p>
        public let environment: CodeBuildClientTypes.ProjectEnvironment?
        /// <p>A list of exported environment variables for this build.</p>
        ///         <p>Exported environment variables are used in conjunction with AWS CodePipeline to export
        ///   environment variables from the current build stage to subsequent stages in the pipeline.
        ///   For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-variables.html">Working with variables</a> in the <i>AWS CodePipeline User Guide</i>.</p>
        public let exportedEnvironmentVariables: [CodeBuildClientTypes.ExportedEnvironmentVariable]?
        /// <p>
        ///       An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A <code>ProjectFileSystemLocation</code> object
        ///       specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>,
        ///       <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System.
        ///   </p>
        public let fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]?
        /// <p>The unique ID for the build.</p>
        public let id: Swift.String?
        /// <p>The entity that started the build. Valid values include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>If AWS CodePipeline started the build, the pipeline's name (for example,
        ///                         <code>codepipeline/my-demo-pipeline</code>).</p>
        ///             </li>
        ///             <li>
        ///                 <p>If an AWS Identity and Access Management (IAM) user started the build, the user's name (for example,
        ///                         <code>MyUserName</code>).</p>
        ///             </li>
        ///             <li>
        ///                 <p>If the Jenkins plugin for AWS CodeBuild started the build, the string
        ///                         <code>CodeBuild-Jenkins-Plugin</code>.</p>
        ///             </li>
        ///          </ul>
        public let initiator: Swift.String?
        /// <p>Information about the build's logs in Amazon CloudWatch Logs.</p>
        public let logs: CodeBuildClientTypes.LogsLocation?
        /// <p>Describes a network interface.</p>
        public let networkInterface: CodeBuildClientTypes.NetworkInterface?
        /// <p>Information about all previous build phases that are complete and information about
        ///             any current build phase that is not yet complete.</p>
        public let phases: [CodeBuildClientTypes.BuildPhase]?
        /// <p>The name of the AWS CodeBuild project.</p>
        public let projectName: Swift.String?
        /// <p> The number of minutes a build is allowed to be queued before it times out. </p>
        public let queuedTimeoutInMinutes: Swift.Int?
        /// <p> An array of the ARNs associated with this build's reports. </p>
        public let reportArns: [Swift.String]?
        /// <p> An identifier for the version of this build's source code. </p>
        ///         <ul>
        ///             <li>
        ///                 <p> For AWS CodeCommit, GitHub, GitHub Enterprise, and BitBucket, the commit ID. </p>
        ///             </li>
        ///             <li>
        ///                 <p> For AWS CodePipeline, the source revision provided by AWS CodePipeline. </p>
        ///             </li>
        ///             <li>
        ///                 <p> For Amazon S3, this does not apply. </p>
        ///             </li>
        ///          </ul>
        public let resolvedSourceVersion: Swift.String?
        /// <p> An array of <code>ProjectArtifacts</code> objects. </p>
        public let secondaryArtifacts: [CodeBuildClientTypes.BuildArtifacts]?
        /// <p> An array of <code>ProjectSourceVersion</code> objects. Each
        ///                 <code>ProjectSourceVersion</code> must be one of: </p>
        ///         <ul>
        ///             <li>
        ///                 <p>For AWS CodeCommit: the commit ID, branch, or Git tag to use.</p>
        ///             </li>
        ///             <li>
        ///                 <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that
        ///                     corresponds to the version of the source code you want to build. If a pull
        ///                     request ID is specified, it must use the format <code>pr/pull-request-ID</code>
        ///                     (for example, <code>pr/25</code>). If a branch name is specified, the branch's
        ///                     HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is
        ///                     used.</p>
        ///             </li>
        ///             <li>
        ///                 <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the
        ///                     version of the source code you want to build. If a branch name is specified, the
        ///                     branch's HEAD commit ID is used. If not specified, the default branch's HEAD
        ///                     commit ID is used.</p>
        ///             </li>
        ///             <li>
        ///                 <p>For Amazon S3: the version ID of the object that represents the build input ZIP
        ///                     file to use.</p>
        ///             </li>
        ///          </ul>
        public let secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]?
        /// <p> An array of <code>ProjectSource</code> objects. </p>
        public let secondarySources: [CodeBuildClientTypes.ProjectSource]?
        /// <p>The name of a service role used for this build.</p>
        public let serviceRole: Swift.String?
        /// <p>Information about the source code to be built.</p>
        public let source: CodeBuildClientTypes.ProjectSource?
        /// <p>Any version identifier for the version of the source code to be built. If
        ///                 <code>sourceVersion</code> is specified at the project level, then this
        ///                 <code>sourceVersion</code> (at the build level) takes precedence. </p>
        ///         <p> For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html">Source Version Sample
        ///                 with CodeBuild</a> in the <i>AWS CodeBuild User Guide</i>. </p>
        public let sourceVersion: Swift.String?
        /// <p>When the build process started, expressed in Unix time format.</p>
        public let startTime: ClientRuntime.Date?
        /// <p>How long, in minutes, for AWS CodeBuild to wait before timing out this build if it does not
        ///             get marked as completed.</p>
        public let timeoutInMinutes: Swift.Int?
        /// <p>If your AWS CodeBuild project accesses resources in an Amazon VPC, you provide this parameter
        ///             that identifies the VPC ID and the list of security group IDs and subnet IDs. The
        ///             security groups and subnets must belong to the same VPC. You must provide at least one
        ///             security group and one subnet ID.</p>
        public let vpcConfig: CodeBuildClientTypes.VpcConfig?

        public init (
            arn: Swift.String? = nil,
            artifacts: CodeBuildClientTypes.BuildArtifacts? = nil,
            buildBatchArn: Swift.String? = nil,
            buildComplete: Swift.Bool = false,
            buildNumber: Swift.Int? = nil,
            buildStatus: CodeBuildClientTypes.StatusType? = nil,
            cache: CodeBuildClientTypes.ProjectCache? = nil,
            currentPhase: Swift.String? = nil,
            debugSession: CodeBuildClientTypes.DebugSession? = nil,
            encryptionKey: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            environment: CodeBuildClientTypes.ProjectEnvironment? = nil,
            exportedEnvironmentVariables: [CodeBuildClientTypes.ExportedEnvironmentVariable]? = nil,
            fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]? = nil,
            id: Swift.String? = nil,
            initiator: Swift.String? = nil,
            logs: CodeBuildClientTypes.LogsLocation? = nil,
            networkInterface: CodeBuildClientTypes.NetworkInterface? = nil,
            phases: [CodeBuildClientTypes.BuildPhase]? = nil,
            projectName: Swift.String? = nil,
            queuedTimeoutInMinutes: Swift.Int? = nil,
            reportArns: [Swift.String]? = nil,
            resolvedSourceVersion: Swift.String? = nil,
            secondaryArtifacts: [CodeBuildClientTypes.BuildArtifacts]? = nil,
            secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
            secondarySources: [CodeBuildClientTypes.ProjectSource]? = nil,
            serviceRole: Swift.String? = nil,
            source: CodeBuildClientTypes.ProjectSource? = nil,
            sourceVersion: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            timeoutInMinutes: Swift.Int? = nil,
            vpcConfig: CodeBuildClientTypes.VpcConfig? = nil
        )
        {
            self.arn = arn
            self.artifacts = artifacts
            self.buildBatchArn = buildBatchArn
            self.buildComplete = buildComplete
            self.buildNumber = buildNumber
            self.buildStatus = buildStatus
            self.cache = cache
            self.currentPhase = currentPhase
            self.debugSession = debugSession
            self.encryptionKey = encryptionKey
            self.endTime = endTime
            self.environment = environment
            self.exportedEnvironmentVariables = exportedEnvironmentVariables
            self.fileSystemLocations = fileSystemLocations
            self.id = id
            self.initiator = initiator
            self.logs = logs
            self.networkInterface = networkInterface
            self.phases = phases
            self.projectName = projectName
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.reportArns = reportArns
            self.resolvedSourceVersion = resolvedSourceVersion
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySourceVersions = secondarySourceVersions
            self.secondarySources = secondarySources
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.startTime = startTime
            self.timeoutInMinutes = timeoutInMinutes
            self.vpcConfig = vpcConfig
        }
    }

}

extension CodeBuildClientTypes.BuildArtifacts: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactIdentifier
        case bucketOwnerAccess
        case encryptionDisabled
        case location
        case md5sum
        case overrideArtifactName
        case sha256sum
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactIdentifier = artifactIdentifier {
            try encodeContainer.encode(artifactIdentifier, forKey: .artifactIdentifier)
        }
        if let bucketOwnerAccess = bucketOwnerAccess {
            try encodeContainer.encode(bucketOwnerAccess.rawValue, forKey: .bucketOwnerAccess)
        }
        if let encryptionDisabled = encryptionDisabled {
            try encodeContainer.encode(encryptionDisabled, forKey: .encryptionDisabled)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let md5sum = md5sum {
            try encodeContainer.encode(md5sum, forKey: .md5sum)
        }
        if let overrideArtifactName = overrideArtifactName {
            try encodeContainer.encode(overrideArtifactName, forKey: .overrideArtifactName)
        }
        if let sha256sum = sha256sum {
            try encodeContainer.encode(sha256sum, forKey: .sha256sum)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let sha256sumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sha256sum)
        sha256sum = sha256sumDecoded
        let md5sumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .md5sum)
        md5sum = md5sumDecoded
        let overrideArtifactNameDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .overrideArtifactName)
        overrideArtifactName = overrideArtifactNameDecoded
        let encryptionDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encryptionDisabled)
        encryptionDisabled = encryptionDisabledDecoded
        let artifactIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactIdentifier)
        artifactIdentifier = artifactIdentifierDecoded
        let bucketOwnerAccessDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BucketOwnerAccess.self, forKey: .bucketOwnerAccess)
        bucketOwnerAccess = bucketOwnerAccessDecoded
    }
}

extension CodeBuildClientTypes.BuildArtifacts: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BuildArtifacts(artifactIdentifier: \(Swift.String(describing: artifactIdentifier)), bucketOwnerAccess: \(Swift.String(describing: bucketOwnerAccess)), encryptionDisabled: \(Swift.String(describing: encryptionDisabled)), location: \(Swift.String(describing: location)), md5sum: \(Swift.String(describing: md5sum)), overrideArtifactName: \(Swift.String(describing: overrideArtifactName)), sha256sum: \(Swift.String(describing: sha256sum)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about build output artifacts.</p>
    public struct BuildArtifacts: Swift.Equatable {
        /// <p> An identifier for this artifact definition. </p>
        public let artifactIdentifier: Swift.String?
        /// <p>Specifies the access for objects that are uploaded to an Amazon S3 bucket that is owned by
        ///             another account.</p>
        ///         <p>By default, only the account that uploads the objects to the bucket has access to
        ///             these objects. This property allows you to give the bucket owner access to these
        ///             objects.</p>
        ///          <dl>
        ///             <dt>NONE</dt>
        ///             <dd>
        ///                 <p>The bucket owner does not have access to the objects. This is the
        ///                         default.</p>
        ///             </dd>
        ///             <dt>READ_ONLY</dt>
        ///             <dd>
        ///               <p>The bucket owner has read only access to the objects. The uploading account
        ///                         retains ownership of the objects.</p>
        ///             </dd>
        ///             <dt>FULL</dt>
        ///             <dd>
        ///               <p>The bucket owner has full access to the objects. Object ownership is determined
        ///                         by the following criteria:</p>
        ///                     <ul>
        ///                   <li>
        ///                             <p>If the bucket is configured with the <b>Bucket
        ///                                     owner preferred</b> setting, the bucket owner owns the
        ///                                 objects. The uploading account will have object access as specified
        ///                                 by the bucket's policy.</p>
        ///                         </li>
        ///                   <li>
        ///                             <p>Otherwise, the uploading account retains ownership of the
        ///                                 objects.</p>
        ///                         </li>
        ///                </ul>
        ///                     <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3
        ///                             Object Ownership</a> in the <i>Amazon Simple Storage Service User
        ///                         Guide</i>.</p>
        ///             </dd>
        ///          </dl>
        public let bucketOwnerAccess: CodeBuildClientTypes.BucketOwnerAccess?
        /// <p> Information that tells you if encryption for build artifacts is disabled. </p>
        public let encryptionDisabled: Swift.Bool?
        /// <p>Information about the location of the build artifacts.</p>
        public let location: Swift.String?
        /// <p>The MD5 hash of the build artifact.</p>
        ///         <p>You can use this hash along with a checksum tool to confirm file integrity and
        ///             authenticity.</p>
        ///         <note>
        ///             <p>This value is available only if the build project's <code>packaging</code> value
        ///                 is set to <code>ZIP</code>.</p>
        ///         </note>
        public let md5sum: Swift.String?
        /// <p> If this flag is set, a name specified in the buildspec file overrides the artifact
        ///             name. The name specified in a buildspec file is calculated at build time and uses the
        ///             Shell Command Language. For example, you can append a date and time to your artifact
        ///             name so that it is always unique. </p>
        public let overrideArtifactName: Swift.Bool?
        /// <p>The SHA-256 hash of the build artifact.</p>
        ///         <p>You can use this hash along with a checksum tool to confirm file integrity and
        ///             authenticity.</p>
        ///         <note>
        ///             <p>This value is available only if the build project's <code>packaging</code> value
        ///                 is set to <code>ZIP</code>.</p>
        ///         </note>
        public let sha256sum: Swift.String?

        public init (
            artifactIdentifier: Swift.String? = nil,
            bucketOwnerAccess: CodeBuildClientTypes.BucketOwnerAccess? = nil,
            encryptionDisabled: Swift.Bool? = nil,
            location: Swift.String? = nil,
            md5sum: Swift.String? = nil,
            overrideArtifactName: Swift.Bool? = nil,
            sha256sum: Swift.String? = nil
        )
        {
            self.artifactIdentifier = artifactIdentifier
            self.bucketOwnerAccess = bucketOwnerAccess
            self.encryptionDisabled = encryptionDisabled
            self.location = location
            self.md5sum = md5sum
            self.overrideArtifactName = overrideArtifactName
            self.sha256sum = sha256sum
        }
    }

}

extension CodeBuildClientTypes.BuildBatch: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case artifacts
        case buildBatchConfig
        case buildBatchNumber
        case buildBatchStatus
        case buildGroups
        case buildTimeoutInMinutes
        case cache
        case complete
        case currentPhase
        case debugSessionEnabled
        case encryptionKey
        case endTime
        case environment
        case fileSystemLocations
        case id
        case initiator
        case logConfig
        case phases
        case projectName
        case queuedTimeoutInMinutes
        case resolvedSourceVersion
        case secondaryArtifacts
        case secondarySourceVersions
        case secondarySources
        case serviceRole
        case source
        case sourceVersion
        case startTime
        case vpcConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let artifacts = artifacts {
            try encodeContainer.encode(artifacts, forKey: .artifacts)
        }
        if let buildBatchConfig = buildBatchConfig {
            try encodeContainer.encode(buildBatchConfig, forKey: .buildBatchConfig)
        }
        if let buildBatchNumber = buildBatchNumber {
            try encodeContainer.encode(buildBatchNumber, forKey: .buildBatchNumber)
        }
        if let buildBatchStatus = buildBatchStatus {
            try encodeContainer.encode(buildBatchStatus.rawValue, forKey: .buildBatchStatus)
        }
        if let buildGroups = buildGroups {
            var buildGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .buildGroups)
            for buildgroups0 in buildGroups {
                try buildGroupsContainer.encode(buildgroups0)
            }
        }
        if let buildTimeoutInMinutes = buildTimeoutInMinutes {
            try encodeContainer.encode(buildTimeoutInMinutes, forKey: .buildTimeoutInMinutes)
        }
        if let cache = cache {
            try encodeContainer.encode(cache, forKey: .cache)
        }
        if complete != false {
            try encodeContainer.encode(complete, forKey: .complete)
        }
        if let currentPhase = currentPhase {
            try encodeContainer.encode(currentPhase, forKey: .currentPhase)
        }
        if let debugSessionEnabled = debugSessionEnabled {
            try encodeContainer.encode(debugSessionEnabled, forKey: .debugSessionEnabled)
        }
        if let encryptionKey = encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let environment = environment {
            try encodeContainer.encode(environment, forKey: .environment)
        }
        if let fileSystemLocations = fileSystemLocations {
            var fileSystemLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fileSystemLocations)
            for projectfilesystemlocations0 in fileSystemLocations {
                try fileSystemLocationsContainer.encode(projectfilesystemlocations0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let initiator = initiator {
            try encodeContainer.encode(initiator, forKey: .initiator)
        }
        if let logConfig = logConfig {
            try encodeContainer.encode(logConfig, forKey: .logConfig)
        }
        if let phases = phases {
            var phasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .phases)
            for buildbatchphases0 in phases {
                try phasesContainer.encode(buildbatchphases0)
            }
        }
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let queuedTimeoutInMinutes = queuedTimeoutInMinutes {
            try encodeContainer.encode(queuedTimeoutInMinutes, forKey: .queuedTimeoutInMinutes)
        }
        if let resolvedSourceVersion = resolvedSourceVersion {
            try encodeContainer.encode(resolvedSourceVersion, forKey: .resolvedSourceVersion)
        }
        if let secondaryArtifacts = secondaryArtifacts {
            var secondaryArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondaryArtifacts)
            for buildartifactslist0 in secondaryArtifacts {
                try secondaryArtifactsContainer.encode(buildartifactslist0)
            }
        }
        if let secondarySourceVersions = secondarySourceVersions {
            var secondarySourceVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySourceVersions)
            for projectsecondarysourceversions0 in secondarySourceVersions {
                try secondarySourceVersionsContainer.encode(projectsecondarysourceversions0)
            }
        }
        if let secondarySources = secondarySources {
            var secondarySourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySources)
            for projectsources0 in secondarySources {
                try secondarySourcesContainer.encode(projectsources0)
            }
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let sourceVersion = sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let currentPhaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentPhase)
        currentPhase = currentPhaseDecoded
        let buildBatchStatusDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.StatusType.self, forKey: .buildBatchStatus)
        buildBatchStatus = buildBatchStatusDecoded
        let sourceVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
        let resolvedSourceVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resolvedSourceVersion)
        resolvedSourceVersion = resolvedSourceVersionDecoded
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let phasesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.BuildBatchPhase?].self, forKey: .phases)
        var phasesDecoded0:[CodeBuildClientTypes.BuildBatchPhase]? = nil
        if let phasesContainer = phasesContainer {
            phasesDecoded0 = [CodeBuildClientTypes.BuildBatchPhase]()
            for structure0 in phasesContainer {
                if let structure0 = structure0 {
                    phasesDecoded0?.append(structure0)
                }
            }
        }
        phases = phasesDecoded0
        let sourceDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectSource.self, forKey: .source)
        source = sourceDecoded
        let secondarySourcesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectSource?].self, forKey: .secondarySources)
        var secondarySourcesDecoded0:[CodeBuildClientTypes.ProjectSource]? = nil
        if let secondarySourcesContainer = secondarySourcesContainer {
            secondarySourcesDecoded0 = [CodeBuildClientTypes.ProjectSource]()
            for structure0 in secondarySourcesContainer {
                if let structure0 = structure0 {
                    secondarySourcesDecoded0?.append(structure0)
                }
            }
        }
        secondarySources = secondarySourcesDecoded0
        let secondarySourceVersionsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectSourceVersion?].self, forKey: .secondarySourceVersions)
        var secondarySourceVersionsDecoded0:[CodeBuildClientTypes.ProjectSourceVersion]? = nil
        if let secondarySourceVersionsContainer = secondarySourceVersionsContainer {
            secondarySourceVersionsDecoded0 = [CodeBuildClientTypes.ProjectSourceVersion]()
            for structure0 in secondarySourceVersionsContainer {
                if let structure0 = structure0 {
                    secondarySourceVersionsDecoded0?.append(structure0)
                }
            }
        }
        secondarySourceVersions = secondarySourceVersionsDecoded0
        let artifactsDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BuildArtifacts.self, forKey: .artifacts)
        artifacts = artifactsDecoded
        let secondaryArtifactsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.BuildArtifacts?].self, forKey: .secondaryArtifacts)
        var secondaryArtifactsDecoded0:[CodeBuildClientTypes.BuildArtifacts]? = nil
        if let secondaryArtifactsContainer = secondaryArtifactsContainer {
            secondaryArtifactsDecoded0 = [CodeBuildClientTypes.BuildArtifacts]()
            for structure0 in secondaryArtifactsContainer {
                if let structure0 = structure0 {
                    secondaryArtifactsDecoded0?.append(structure0)
                }
            }
        }
        secondaryArtifacts = secondaryArtifactsDecoded0
        let cacheDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectCache.self, forKey: .cache)
        cache = cacheDecoded
        let environmentDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectEnvironment.self, forKey: .environment)
        environment = environmentDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let logConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.LogsConfig.self, forKey: .logConfig)
        logConfig = logConfigDecoded
        let buildTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .buildTimeoutInMinutes)
        buildTimeoutInMinutes = buildTimeoutInMinutesDecoded
        let queuedTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .queuedTimeoutInMinutes)
        queuedTimeoutInMinutes = queuedTimeoutInMinutesDecoded
        let completeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .complete)
        complete = completeDecoded
        let initiatorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .initiator)
        initiator = initiatorDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let buildBatchNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .buildBatchNumber)
        buildBatchNumber = buildBatchNumberDecoded
        let fileSystemLocationsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectFileSystemLocation?].self, forKey: .fileSystemLocations)
        var fileSystemLocationsDecoded0:[CodeBuildClientTypes.ProjectFileSystemLocation]? = nil
        if let fileSystemLocationsContainer = fileSystemLocationsContainer {
            fileSystemLocationsDecoded0 = [CodeBuildClientTypes.ProjectFileSystemLocation]()
            for structure0 in fileSystemLocationsContainer {
                if let structure0 = structure0 {
                    fileSystemLocationsDecoded0?.append(structure0)
                }
            }
        }
        fileSystemLocations = fileSystemLocationsDecoded0
        let buildBatchConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectBuildBatchConfig.self, forKey: .buildBatchConfig)
        buildBatchConfig = buildBatchConfigDecoded
        let buildGroupsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.BuildGroup?].self, forKey: .buildGroups)
        var buildGroupsDecoded0:[CodeBuildClientTypes.BuildGroup]? = nil
        if let buildGroupsContainer = buildGroupsContainer {
            buildGroupsDecoded0 = [CodeBuildClientTypes.BuildGroup]()
            for structure0 in buildGroupsContainer {
                if let structure0 = structure0 {
                    buildGroupsDecoded0?.append(structure0)
                }
            }
        }
        buildGroups = buildGroupsDecoded0
        let debugSessionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .debugSessionEnabled)
        debugSessionEnabled = debugSessionEnabledDecoded
    }
}

extension CodeBuildClientTypes.BuildBatch: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BuildBatch(arn: \(Swift.String(describing: arn)), artifacts: \(Swift.String(describing: artifacts)), buildBatchConfig: \(Swift.String(describing: buildBatchConfig)), buildBatchNumber: \(Swift.String(describing: buildBatchNumber)), buildBatchStatus: \(Swift.String(describing: buildBatchStatus)), buildGroups: \(Swift.String(describing: buildGroups)), buildTimeoutInMinutes: \(Swift.String(describing: buildTimeoutInMinutes)), cache: \(Swift.String(describing: cache)), complete: \(Swift.String(describing: complete)), currentPhase: \(Swift.String(describing: currentPhase)), debugSessionEnabled: \(Swift.String(describing: debugSessionEnabled)), encryptionKey: \(Swift.String(describing: encryptionKey)), endTime: \(Swift.String(describing: endTime)), environment: \(Swift.String(describing: environment)), fileSystemLocations: \(Swift.String(describing: fileSystemLocations)), id: \(Swift.String(describing: id)), initiator: \(Swift.String(describing: initiator)), logConfig: \(Swift.String(describing: logConfig)), phases: \(Swift.String(describing: phases)), projectName: \(Swift.String(describing: projectName)), queuedTimeoutInMinutes: \(Swift.String(describing: queuedTimeoutInMinutes)), resolvedSourceVersion: \(Swift.String(describing: resolvedSourceVersion)), secondaryArtifacts: \(Swift.String(describing: secondaryArtifacts)), secondarySourceVersions: \(Swift.String(describing: secondarySourceVersions)), secondarySources: \(Swift.String(describing: secondarySources)), serviceRole: \(Swift.String(describing: serviceRole)), source: \(Swift.String(describing: source)), sourceVersion: \(Swift.String(describing: sourceVersion)), startTime: \(Swift.String(describing: startTime)), vpcConfig: \(Swift.String(describing: vpcConfig)))"}
}

extension CodeBuildClientTypes {
    /// <p>Contains information about a batch build.</p>
    public struct BuildBatch: Swift.Equatable {
        /// <p>The ARN of the batch build.</p>
        public let arn: Swift.String?
        /// <p>A <code>BuildArtifacts</code> object the defines the build artifacts for this batch build.</p>
        public let artifacts: CodeBuildClientTypes.BuildArtifacts?
        /// <p>Contains configuration information about a batch build project.</p>
        public let buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig?
        /// <p>The number of the batch build. For each project, the <code>buildBatchNumber</code> of its
        ///             first batch build is <code>1</code>. The <code>buildBatchNumber</code> of each subsequent
        ///             batch build is incremented by <code>1</code>. If a batch build is deleted, the
        ///                 <code>buildBatchNumber</code> of other batch builds does not change.</p>
        public let buildBatchNumber: Swift.Int?
        /// <p>The status of the batch build.</p>
        public let buildBatchStatus: CodeBuildClientTypes.StatusType?
        /// <p>An array of <code>BuildGroup</code> objects that define the build groups for the
        ///             batch build.</p>
        public let buildGroups: [CodeBuildClientTypes.BuildGroup]?
        /// <p>Specifies the maximum amount of time, in minutes, that the build in a batch must be
        ///             completed in.</p>
        public let buildTimeoutInMinutes: Swift.Int?
        /// <p>Information about the cache for the build project.</p>
        public let cache: CodeBuildClientTypes.ProjectCache?
        /// <p>Indicates if the batch build is complete.</p>
        public let complete: Swift.Bool
        /// <p>The current phase of the batch build.</p>
        public let currentPhase: Swift.String?
        /// <p>Specifies if session debugging is enabled for this batch build. For more information, see
        ///   <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html">Viewing a running build in Session Manager</a>. Batch session debugging is not supported for matrix batch builds.</p>
        public let debugSessionEnabled: Swift.Bool?
        /// <p>The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the batch build output
        ///             artifacts.</p>
        ///         <note>
        ///             <p>You can use a cross-account KMS key to encrypt the build output artifacts if your
        ///                 service role has permission to that key. </p>
        ///         </note>
        ///         <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using
        ///             the format <code>alias/<alias-name></code>).</p>
        public let encryptionKey: Swift.String?
        /// <p>The date and time that the batch build ended.</p>
        public let endTime: ClientRuntime.Date?
        /// <p>Information about the build environment of the build project.</p>
        public let environment: CodeBuildClientTypes.ProjectEnvironment?
        /// <p>An array of <code>ProjectFileSystemLocation</code> objects for the batch build
        ///             project. A <code>ProjectFileSystemLocation</code> object specifies the
        ///                 <code>identifier</code>, <code>location</code>, <code>mountOptions</code>,
        ///                 <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon
        ///             Elastic File System. </p>
        public let fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]?
        /// <p>The identifier of the batch build.</p>
        public let id: Swift.String?
        /// <p>The entity that started the batch build. Valid values include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>If AWS CodePipeline started the build, the pipeline's name (for example,
        ///                         <code>codepipeline/my-demo-pipeline</code>).</p>
        ///             </li>
        ///             <li>
        ///                 <p>If an AWS Identity and Access Management (IAM) user started the build, the user's name.</p>
        ///             </li>
        ///             <li>
        ///                 <p>If the Jenkins plugin for AWS CodeBuild started the build, the string
        ///                         <code>CodeBuild-Jenkins-Plugin</code>.</p>
        ///             </li>
        ///          </ul>
        public let initiator: Swift.String?
        /// <p> Information about logs for a build project. These can be logs in Amazon CloudWatch Logs, built in a
        ///             specified S3 bucket, or both. </p>
        public let logConfig: CodeBuildClientTypes.LogsConfig?
        /// <p>An array of <code>BuildBatchPhase</code> objects the specify the phases of the
        ///             batch build.</p>
        public let phases: [CodeBuildClientTypes.BuildBatchPhase]?
        /// <p>The name of the batch build project.</p>
        public let projectName: Swift.String?
        /// <p>Specifies the amount of time, in minutes, that the batch build is allowed to be queued
        ///             before it times out.</p>
        public let queuedTimeoutInMinutes: Swift.Int?
        /// <p>The identifier of the resolved version of this batch build's source code.</p>
        ///         <ul>
        ///             <li>
        ///                 <p>For AWS CodeCommit, GitHub, GitHub Enterprise, and BitBucket, the commit ID.</p>
        ///             </li>
        ///             <li>
        ///                 <p>For AWS CodePipeline, the source revision provided by AWS CodePipeline.</p>
        ///             </li>
        ///             <li>
        ///                 <p>For Amazon S3, this does not apply.</p>
        ///             </li>
        ///          </ul>
        public let resolvedSourceVersion: Swift.String?
        /// <p>An array of <code>BuildArtifacts</code> objects the define the build artifacts
        ///             for this batch build.</p>
        public let secondaryArtifacts: [CodeBuildClientTypes.BuildArtifacts]?
        /// <p>An array of <code>ProjectSourceVersion</code> objects. Each
        ///                 <code>ProjectSourceVersion</code> must be one of: </p>
        ///          <ul>
        ///             <li>
        ///                <p>For AWS CodeCommit: the commit ID, branch, or Git tag to use.</p>
        ///             </li>
        ///             <li>
        ///                <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that
        ///           corresponds to the version of the source code you want to build. If a pull
        ///           request ID is specified, it must use the format <code>pr/pull-request-ID</code>
        ///           (for example, <code>pr/25</code>). If a branch name is specified, the branch's
        ///           HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is
        ///           used.</p>
        ///             </li>
        ///             <li>
        ///                <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the
        ///           version of the source code you want to build. If a branch name is specified, the
        ///           branch's HEAD commit ID is used. If not specified, the default branch's HEAD
        ///           commit ID is used.</p>
        ///             </li>
        ///             <li>
        ///                <p>For Amazon S3: the version ID of the object that represents the build input ZIP
        ///           file to use.</p>
        ///             </li>
        ///          </ul>
        public let secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]?
        /// <p>An array of <code>ProjectSource</code> objects that define the sources for the batch
        ///             build.</p>
        public let secondarySources: [CodeBuildClientTypes.ProjectSource]?
        /// <p>The name of a service role used for builds in the batch.</p>
        public let serviceRole: Swift.String?
        /// <p>Information about the build input source code for the build project.</p>
        public let source: CodeBuildClientTypes.ProjectSource?
        /// <p>The identifier of the version of the source code to be built.</p>
        public let sourceVersion: Swift.String?
        /// <p>The date and time that the batch build started.</p>
        public let startTime: ClientRuntime.Date?
        /// <p>Information about the VPC configuration that AWS CodeBuild accesses.</p>
        public let vpcConfig: CodeBuildClientTypes.VpcConfig?

        public init (
            arn: Swift.String? = nil,
            artifacts: CodeBuildClientTypes.BuildArtifacts? = nil,
            buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig? = nil,
            buildBatchNumber: Swift.Int? = nil,
            buildBatchStatus: CodeBuildClientTypes.StatusType? = nil,
            buildGroups: [CodeBuildClientTypes.BuildGroup]? = nil,
            buildTimeoutInMinutes: Swift.Int? = nil,
            cache: CodeBuildClientTypes.ProjectCache? = nil,
            complete: Swift.Bool = false,
            currentPhase: Swift.String? = nil,
            debugSessionEnabled: Swift.Bool? = nil,
            encryptionKey: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            environment: CodeBuildClientTypes.ProjectEnvironment? = nil,
            fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]? = nil,
            id: Swift.String? = nil,
            initiator: Swift.String? = nil,
            logConfig: CodeBuildClientTypes.LogsConfig? = nil,
            phases: [CodeBuildClientTypes.BuildBatchPhase]? = nil,
            projectName: Swift.String? = nil,
            queuedTimeoutInMinutes: Swift.Int? = nil,
            resolvedSourceVersion: Swift.String? = nil,
            secondaryArtifacts: [CodeBuildClientTypes.BuildArtifacts]? = nil,
            secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
            secondarySources: [CodeBuildClientTypes.ProjectSource]? = nil,
            serviceRole: Swift.String? = nil,
            source: CodeBuildClientTypes.ProjectSource? = nil,
            sourceVersion: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            vpcConfig: CodeBuildClientTypes.VpcConfig? = nil
        )
        {
            self.arn = arn
            self.artifacts = artifacts
            self.buildBatchConfig = buildBatchConfig
            self.buildBatchNumber = buildBatchNumber
            self.buildBatchStatus = buildBatchStatus
            self.buildGroups = buildGroups
            self.buildTimeoutInMinutes = buildTimeoutInMinutes
            self.cache = cache
            self.complete = complete
            self.currentPhase = currentPhase
            self.debugSessionEnabled = debugSessionEnabled
            self.encryptionKey = encryptionKey
            self.endTime = endTime
            self.environment = environment
            self.fileSystemLocations = fileSystemLocations
            self.id = id
            self.initiator = initiator
            self.logConfig = logConfig
            self.phases = phases
            self.projectName = projectName
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.resolvedSourceVersion = resolvedSourceVersion
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySourceVersions = secondarySourceVersions
            self.secondarySources = secondarySources
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.startTime = startTime
            self.vpcConfig = vpcConfig
        }
    }

}

extension CodeBuildClientTypes.BuildBatchFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.StatusType.self, forKey: .status)
        status = statusDecoded
    }
}

extension CodeBuildClientTypes.BuildBatchFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BuildBatchFilter(status: \(Swift.String(describing: status)))"}
}

extension CodeBuildClientTypes {
    /// <p>Specifies filters when retrieving batch builds.</p>
    public struct BuildBatchFilter: Swift.Equatable {
        /// <p>The status of the batch builds to retrieve. Only batch builds that have this status will
        ///             be retrieved.</p>
        public let status: CodeBuildClientTypes.StatusType?

        public init (
            status: CodeBuildClientTypes.StatusType? = nil
        )
        {
            self.status = status
        }
    }

}

extension CodeBuildClientTypes.BuildBatchPhase: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contexts
        case durationInSeconds
        case endTime
        case phaseStatus
        case phaseType
        case startTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contexts = contexts {
            var contextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contexts)
            for phasecontexts0 in contexts {
                try contextsContainer.encode(phasecontexts0)
            }
        }
        if let durationInSeconds = durationInSeconds {
            try encodeContainer.encode(durationInSeconds, forKey: .durationInSeconds)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let phaseStatus = phaseStatus {
            try encodeContainer.encode(phaseStatus.rawValue, forKey: .phaseStatus)
        }
        if let phaseType = phaseType {
            try encodeContainer.encode(phaseType.rawValue, forKey: .phaseType)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let phaseTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BuildBatchPhaseType.self, forKey: .phaseType)
        phaseType = phaseTypeDecoded
        let phaseStatusDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.StatusType.self, forKey: .phaseStatus)
        phaseStatus = phaseStatusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let durationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInSeconds)
        durationInSeconds = durationInSecondsDecoded
        let contextsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.PhaseContext?].self, forKey: .contexts)
        var contextsDecoded0:[CodeBuildClientTypes.PhaseContext]? = nil
        if let contextsContainer = contextsContainer {
            contextsDecoded0 = [CodeBuildClientTypes.PhaseContext]()
            for structure0 in contextsContainer {
                if let structure0 = structure0 {
                    contextsDecoded0?.append(structure0)
                }
            }
        }
        contexts = contextsDecoded0
    }
}

extension CodeBuildClientTypes.BuildBatchPhase: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BuildBatchPhase(contexts: \(Swift.String(describing: contexts)), durationInSeconds: \(Swift.String(describing: durationInSeconds)), endTime: \(Swift.String(describing: endTime)), phaseStatus: \(Swift.String(describing: phaseStatus)), phaseType: \(Swift.String(describing: phaseType)), startTime: \(Swift.String(describing: startTime)))"}
}

extension CodeBuildClientTypes {
    /// <p>Contains information about a stage for a batch build.</p>
    public struct BuildBatchPhase: Swift.Equatable {
        /// <p>Additional information about the batch build phase. Especially to help troubleshoot a
        ///             failed batch build.</p>
        public let contexts: [CodeBuildClientTypes.PhaseContext]?
        /// <p>How long, in seconds, between the starting and ending times of the batch build's
        ///         phase.</p>
        public let durationInSeconds: Swift.Int?
        /// <p>When the batch build phase ended, expressed in Unix time format.</p>
        public let endTime: ClientRuntime.Date?
        /// <p>The current status of the batch build phase. Valid values include:</p>
        ///         <dl>
        ///             <dt>FAILED</dt>
        ///             <dd>
        ///                     <p>The build phase failed.</p>
        ///                 </dd>
        ///             <dt>FAULT</dt>
        ///             <dd>
        ///                     <p>The build phase faulted.</p>
        ///                 </dd>
        ///             <dt>IN_PROGRESS</dt>
        ///             <dd>
        ///                     <p>The build phase is still in progress.</p>
        ///                 </dd>
        ///             <dt>QUEUED</dt>
        ///             <dd>
        ///                     <p>The build has been submitted and is queued behind other submitted
        ///                         builds.</p>
        ///                 </dd>
        ///             <dt>STOPPED</dt>
        ///             <dd>
        ///                     <p>The build phase stopped.</p>
        ///                 </dd>
        ///             <dt>SUCCEEDED</dt>
        ///             <dd>
        ///                     <p>The build phase succeeded.</p>
        ///                 </dd>
        ///             <dt>TIMED_OUT</dt>
        ///             <dd>
        ///                     <p>The build phase timed out.</p>
        ///                 </dd>
        ///          </dl>
        public let phaseStatus: CodeBuildClientTypes.StatusType?
        /// <p>The name of the batch build phase. Valid values include:</p>
        ///         <dl>
        ///             <dt>COMBINE_ARTIFACTS</dt>
        ///             <dd>
        ///                     <p>Build output artifacts are being combined and uploaded to the output
        ///                         location.</p>
        ///                 </dd>
        ///             <dt>DOWNLOAD_BATCHSPEC</dt>
        ///             <dd>
        ///                     <p>The batch build specification is being downloaded.</p>
        ///                 </dd>
        ///             <dt>FAILED</dt>
        ///             <dd>
        ///                     <p>One or more of the builds failed.</p>
        ///                 </dd>
        ///             <dt>IN_PROGRESS</dt>
        ///             <dd>
        ///                     <p>The batch build is in progress.</p>
        ///                 </dd>
        ///             <dt>STOPPED</dt>
        ///             <dd>
        ///                     <p>The batch build was stopped.</p>
        ///                 </dd>
        ///             <dt>SUBMITTED</dt>
        ///             <dd>
        ///                     <p>The btach build has been submitted.</p>
        ///                 </dd>
        ///             <dt>SUCCEEDED</dt>
        ///             <dd>
        ///                     <p>The batch build succeeded.</p>
        ///                 </dd>
        ///          </dl>
        public let phaseType: CodeBuildClientTypes.BuildBatchPhaseType?
        /// <p>When the batch build phase started, expressed in Unix time format.</p>
        public let startTime: ClientRuntime.Date?

        public init (
            contexts: [CodeBuildClientTypes.PhaseContext]? = nil,
            durationInSeconds: Swift.Int? = nil,
            endTime: ClientRuntime.Date? = nil,
            phaseStatus: CodeBuildClientTypes.StatusType? = nil,
            phaseType: CodeBuildClientTypes.BuildBatchPhaseType? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.contexts = contexts
            self.durationInSeconds = durationInSeconds
            self.endTime = endTime
            self.phaseStatus = phaseStatus
            self.phaseType = phaseType
            self.startTime = startTime
        }
    }

}

extension CodeBuildClientTypes {
    public enum BuildBatchPhaseType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case combineArtifacts
        case downloadBatchspec
        case failed
        case inProgress
        case stopped
        case submitted
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [BuildBatchPhaseType] {
            return [
                .combineArtifacts,
                .downloadBatchspec,
                .failed,
                .inProgress,
                .stopped,
                .submitted,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .combineArtifacts: return "COMBINE_ARTIFACTS"
            case .downloadBatchspec: return "DOWNLOAD_BATCHSPEC"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .stopped: return "STOPPED"
            case .submitted: return "SUBMITTED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BuildBatchPhaseType(rawValue: rawValue) ?? BuildBatchPhaseType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.BuildGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentBuildSummary
        case dependsOn
        case identifier
        case ignoreFailure
        case priorBuildSummaryList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentBuildSummary = currentBuildSummary {
            try encodeContainer.encode(currentBuildSummary, forKey: .currentBuildSummary)
        }
        if let dependsOn = dependsOn {
            var dependsOnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dependsOn)
            for identifiers0 in dependsOn {
                try dependsOnContainer.encode(identifiers0)
            }
        }
        if let identifier = identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if ignoreFailure != false {
            try encodeContainer.encode(ignoreFailure, forKey: .ignoreFailure)
        }
        if let priorBuildSummaryList = priorBuildSummaryList {
            var priorBuildSummaryListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .priorBuildSummaryList)
            for buildsummaries0 in priorBuildSummaryList {
                try priorBuildSummaryListContainer.encode(buildsummaries0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
        let dependsOnContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dependsOn)
        var dependsOnDecoded0:[Swift.String]? = nil
        if let dependsOnContainer = dependsOnContainer {
            dependsOnDecoded0 = [Swift.String]()
            for string0 in dependsOnContainer {
                if let string0 = string0 {
                    dependsOnDecoded0?.append(string0)
                }
            }
        }
        dependsOn = dependsOnDecoded0
        let ignoreFailureDecoded = try containerValues.decode(Swift.Bool.self, forKey: .ignoreFailure)
        ignoreFailure = ignoreFailureDecoded
        let currentBuildSummaryDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BuildSummary.self, forKey: .currentBuildSummary)
        currentBuildSummary = currentBuildSummaryDecoded
        let priorBuildSummaryListContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.BuildSummary?].self, forKey: .priorBuildSummaryList)
        var priorBuildSummaryListDecoded0:[CodeBuildClientTypes.BuildSummary]? = nil
        if let priorBuildSummaryListContainer = priorBuildSummaryListContainer {
            priorBuildSummaryListDecoded0 = [CodeBuildClientTypes.BuildSummary]()
            for structure0 in priorBuildSummaryListContainer {
                if let structure0 = structure0 {
                    priorBuildSummaryListDecoded0?.append(structure0)
                }
            }
        }
        priorBuildSummaryList = priorBuildSummaryListDecoded0
    }
}

extension CodeBuildClientTypes.BuildGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BuildGroup(currentBuildSummary: \(Swift.String(describing: currentBuildSummary)), dependsOn: \(Swift.String(describing: dependsOn)), identifier: \(Swift.String(describing: identifier)), ignoreFailure: \(Swift.String(describing: ignoreFailure)), priorBuildSummaryList: \(Swift.String(describing: priorBuildSummaryList)))"}
}

extension CodeBuildClientTypes {
    /// <p>Contains information about a batch build build group. Build groups are used to combine
    ///             builds that can run in parallel, while still being able to set dependencies on other
    ///             build groups.</p>
    public struct BuildGroup: Swift.Equatable {
        /// <p>A <code>BuildSummary</code> object that contains a summary of the current build
        ///             group.</p>
        public let currentBuildSummary: CodeBuildClientTypes.BuildSummary?
        /// <p>An array of strings that contain the identifiers of the build groups that this build
        ///             group depends on.</p>
        public let dependsOn: [Swift.String]?
        /// <p>Contains the identifier of the build group.</p>
        public let identifier: Swift.String?
        /// <p>Specifies if failures in this build group can be ignored.</p>
        public let ignoreFailure: Swift.Bool
        /// <p>An array of <code>BuildSummary</code> objects that contain summaries of previous
        ///             build groups.</p>
        public let priorBuildSummaryList: [CodeBuildClientTypes.BuildSummary]?

        public init (
            currentBuildSummary: CodeBuildClientTypes.BuildSummary? = nil,
            dependsOn: [Swift.String]? = nil,
            identifier: Swift.String? = nil,
            ignoreFailure: Swift.Bool = false,
            priorBuildSummaryList: [CodeBuildClientTypes.BuildSummary]? = nil
        )
        {
            self.currentBuildSummary = currentBuildSummary
            self.dependsOn = dependsOn
            self.identifier = identifier
            self.ignoreFailure = ignoreFailure
            self.priorBuildSummaryList = priorBuildSummaryList
        }
    }

}

extension CodeBuildClientTypes.BuildNotDeleted: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case statusCode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let statusCode = statusCode {
            try encodeContainer.encode(statusCode, forKey: .statusCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
    }
}

extension CodeBuildClientTypes.BuildNotDeleted: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BuildNotDeleted(id: \(Swift.String(describing: id)), statusCode: \(Swift.String(describing: statusCode)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about a build that could not be successfully deleted.</p>
    public struct BuildNotDeleted: Swift.Equatable {
        /// <p>The ID of the build that could not be successfully deleted.</p>
        public let id: Swift.String?
        /// <p>Additional information about the build that could not be successfully deleted.</p>
        public let statusCode: Swift.String?

        public init (
            id: Swift.String? = nil,
            statusCode: Swift.String? = nil
        )
        {
            self.id = id
            self.statusCode = statusCode
        }
    }

}

extension CodeBuildClientTypes.BuildPhase: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contexts
        case durationInSeconds
        case endTime
        case phaseStatus
        case phaseType
        case startTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contexts = contexts {
            var contextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contexts)
            for phasecontexts0 in contexts {
                try contextsContainer.encode(phasecontexts0)
            }
        }
        if let durationInSeconds = durationInSeconds {
            try encodeContainer.encode(durationInSeconds, forKey: .durationInSeconds)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let phaseStatus = phaseStatus {
            try encodeContainer.encode(phaseStatus.rawValue, forKey: .phaseStatus)
        }
        if let phaseType = phaseType {
            try encodeContainer.encode(phaseType.rawValue, forKey: .phaseType)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let phaseTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BuildPhaseType.self, forKey: .phaseType)
        phaseType = phaseTypeDecoded
        let phaseStatusDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.StatusType.self, forKey: .phaseStatus)
        phaseStatus = phaseStatusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let durationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInSeconds)
        durationInSeconds = durationInSecondsDecoded
        let contextsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.PhaseContext?].self, forKey: .contexts)
        var contextsDecoded0:[CodeBuildClientTypes.PhaseContext]? = nil
        if let contextsContainer = contextsContainer {
            contextsDecoded0 = [CodeBuildClientTypes.PhaseContext]()
            for structure0 in contextsContainer {
                if let structure0 = structure0 {
                    contextsDecoded0?.append(structure0)
                }
            }
        }
        contexts = contextsDecoded0
    }
}

extension CodeBuildClientTypes.BuildPhase: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BuildPhase(contexts: \(Swift.String(describing: contexts)), durationInSeconds: \(Swift.String(describing: durationInSeconds)), endTime: \(Swift.String(describing: endTime)), phaseStatus: \(Swift.String(describing: phaseStatus)), phaseType: \(Swift.String(describing: phaseType)), startTime: \(Swift.String(describing: startTime)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about a stage for a build.</p>
    public struct BuildPhase: Swift.Equatable {
        /// <p>Additional information about a build phase, especially to help troubleshoot a failed
        ///             build.</p>
        public let contexts: [CodeBuildClientTypes.PhaseContext]?
        /// <p>How long, in seconds, between the starting and ending times of the build's
        ///             phase.</p>
        public let durationInSeconds: Swift.Int?
        /// <p>When the build phase ended, expressed in Unix time format.</p>
        public let endTime: ClientRuntime.Date?
        /// <p>The current status of the build phase. Valid values include:</p>
        ///         <dl>
        ///             <dt>FAILED</dt>
        ///             <dd>
        ///                     <p>The build phase failed.</p>
        ///                 </dd>
        ///             <dt>FAULT</dt>
        ///             <dd>
        ///                     <p>The build phase faulted.</p>
        ///                 </dd>
        ///             <dt>IN_PROGRESS</dt>
        ///             <dd>
        ///                     <p>The build phase is still in progress.</p>
        ///                 </dd>
        ///             <dt>QUEUED</dt>
        ///             <dd>
        ///                     <p>The build has been submitted and is queued behind other submitted
        ///                         builds.</p>
        ///                 </dd>
        ///             <dt>STOPPED</dt>
        ///             <dd>
        ///                     <p>The build phase stopped.</p>
        ///                 </dd>
        ///             <dt>SUCCEEDED</dt>
        ///             <dd>
        ///                     <p>The build phase succeeded.</p>
        ///                 </dd>
        ///             <dt>TIMED_OUT</dt>
        ///             <dd>
        ///                     <p>The build phase timed out.</p>
        ///                 </dd>
        ///          </dl>
        public let phaseStatus: CodeBuildClientTypes.StatusType?
        /// <p>The name of the build phase. Valid values include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>BUILD</code>: Core build activities typically occur in this build
        ///                     phase.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>COMPLETED</code>: The build has been completed.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>DOWNLOAD_SOURCE</code>: Source code is being downloaded in this build
        ///                     phase.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>FINALIZING</code>: The build process is completing in this build
        ///                     phase.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>INSTALL</code>: Installation activities typically occur in this build
        ///                     phase.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>POST_BUILD</code>: Post-build activities typically occur in this build
        ///                     phase.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>PRE_BUILD</code>: Pre-build activities typically occur in this build
        ///                     phase.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>PROVISIONING</code>: The build environment is being set up.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>QUEUED</code>: The build has been submitted and is queued behind other
        ///                     submitted builds.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>SUBMITTED</code>: The build has been submitted.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>UPLOAD_ARTIFACTS</code>: Build output artifacts are being uploaded to
        ///                     the output location.</p>
        ///             </li>
        ///          </ul>
        public let phaseType: CodeBuildClientTypes.BuildPhaseType?
        /// <p>When the build phase started, expressed in Unix time format.</p>
        public let startTime: ClientRuntime.Date?

        public init (
            contexts: [CodeBuildClientTypes.PhaseContext]? = nil,
            durationInSeconds: Swift.Int? = nil,
            endTime: ClientRuntime.Date? = nil,
            phaseStatus: CodeBuildClientTypes.StatusType? = nil,
            phaseType: CodeBuildClientTypes.BuildPhaseType? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.contexts = contexts
            self.durationInSeconds = durationInSeconds
            self.endTime = endTime
            self.phaseStatus = phaseStatus
            self.phaseType = phaseType
            self.startTime = startTime
        }
    }

}

extension CodeBuildClientTypes {
    public enum BuildPhaseType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case build
        case completed
        case downloadSource
        case finalizing
        case install
        case postBuild
        case preBuild
        case provisioning
        case queued
        case submitted
        case uploadArtifacts
        case sdkUnknown(Swift.String)

        public static var allCases: [BuildPhaseType] {
            return [
                .build,
                .completed,
                .downloadSource,
                .finalizing,
                .install,
                .postBuild,
                .preBuild,
                .provisioning,
                .queued,
                .submitted,
                .uploadArtifacts,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .build: return "BUILD"
            case .completed: return "COMPLETED"
            case .downloadSource: return "DOWNLOAD_SOURCE"
            case .finalizing: return "FINALIZING"
            case .install: return "INSTALL"
            case .postBuild: return "POST_BUILD"
            case .preBuild: return "PRE_BUILD"
            case .provisioning: return "PROVISIONING"
            case .queued: return "QUEUED"
            case .submitted: return "SUBMITTED"
            case .uploadArtifacts: return "UPLOAD_ARTIFACTS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BuildPhaseType(rawValue: rawValue) ?? BuildPhaseType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.BuildStatusConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case context
        case targetUrl
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let context = context {
            try encodeContainer.encode(context, forKey: .context)
        }
        if let targetUrl = targetUrl {
            try encodeContainer.encode(targetUrl, forKey: .targetUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .context)
        context = contextDecoded
        let targetUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetUrl)
        targetUrl = targetUrlDecoded
    }
}

extension CodeBuildClientTypes.BuildStatusConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BuildStatusConfig(context: \(Swift.String(describing: context)), targetUrl: \(Swift.String(describing: targetUrl)))"}
}

extension CodeBuildClientTypes {
    /// <p>Contains information that defines how the AWS CodeBuild build project reports the build status
    ///             to the source provider. </p>
    public struct BuildStatusConfig: Swift.Equatable {
        /// <p>Specifies the context of the build status CodeBuild sends to the source provider. The
        ///             usage of this parameter depends on the source provider.</p>
        ///         <dl>
        ///             <dt>Bitbucket</dt>
        ///             <dd>
        ///                     <p>This parameter is used for the <code>name</code> parameter in the
        ///                         Bitbucket commit status. For more information, see <a href="https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Bworkspace%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/statuses/build">build</a> in the Bitbucket API documentation.</p>
        ///                 </dd>
        ///             <dt>GitHub/GitHub Enterprise Server</dt>
        ///             <dd>
        ///                     <p>This parameter is used for the <code>context</code> parameter in the
        ///                         GitHub commit status. For more information, see <a href="https://developer.github.com/v3/repos/statuses/#create-a-commit-status">Create a commit status</a> in the GitHub developer guide.</p>
        ///                 </dd>
        ///          </dl>
        public let context: Swift.String?
        /// <p>Specifies the target url of the build status CodeBuild sends to the source provider. The
        ///             usage of this parameter depends on the source provider.</p>
        ///         <dl>
        ///             <dt>Bitbucket</dt>
        ///             <dd>
        ///                     <p>This parameter is used for the <code>url</code> parameter in the Bitbucket
        ///                         commit status. For more information, see <a href="https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Bworkspace%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/statuses/build">build</a> in the Bitbucket API documentation.</p>
        ///                 </dd>
        ///             <dt>GitHub/GitHub Enterprise Server</dt>
        ///             <dd>
        ///                     <p>This parameter is used for the <code>target_url</code> parameter in the
        ///                         GitHub commit status. For more information, see <a href="https://developer.github.com/v3/repos/statuses/#create-a-commit-status">Create a commit status</a> in the GitHub developer guide.</p>
        ///                 </dd>
        ///          </dl>
        public let targetUrl: Swift.String?

        public init (
            context: Swift.String? = nil,
            targetUrl: Swift.String? = nil
        )
        {
            self.context = context
            self.targetUrl = targetUrl
        }
    }

}

extension CodeBuildClientTypes.BuildSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case buildStatus
        case primaryArtifact
        case requestedOn
        case secondaryArtifacts
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let buildStatus = buildStatus {
            try encodeContainer.encode(buildStatus.rawValue, forKey: .buildStatus)
        }
        if let primaryArtifact = primaryArtifact {
            try encodeContainer.encode(primaryArtifact, forKey: .primaryArtifact)
        }
        if let requestedOn = requestedOn {
            try encodeContainer.encode(requestedOn.timeIntervalSince1970, forKey: .requestedOn)
        }
        if let secondaryArtifacts = secondaryArtifacts {
            var secondaryArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondaryArtifacts)
            for resolvedsecondaryartifacts0 in secondaryArtifacts {
                try secondaryArtifactsContainer.encode(resolvedsecondaryartifacts0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let requestedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .requestedOn)
        requestedOn = requestedOnDecoded
        let buildStatusDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.StatusType.self, forKey: .buildStatus)
        buildStatus = buildStatusDecoded
        let primaryArtifactDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ResolvedArtifact.self, forKey: .primaryArtifact)
        primaryArtifact = primaryArtifactDecoded
        let secondaryArtifactsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ResolvedArtifact?].self, forKey: .secondaryArtifacts)
        var secondaryArtifactsDecoded0:[CodeBuildClientTypes.ResolvedArtifact]? = nil
        if let secondaryArtifactsContainer = secondaryArtifactsContainer {
            secondaryArtifactsDecoded0 = [CodeBuildClientTypes.ResolvedArtifact]()
            for structure0 in secondaryArtifactsContainer {
                if let structure0 = structure0 {
                    secondaryArtifactsDecoded0?.append(structure0)
                }
            }
        }
        secondaryArtifacts = secondaryArtifactsDecoded0
    }
}

extension CodeBuildClientTypes.BuildSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BuildSummary(arn: \(Swift.String(describing: arn)), buildStatus: \(Swift.String(describing: buildStatus)), primaryArtifact: \(Swift.String(describing: primaryArtifact)), requestedOn: \(Swift.String(describing: requestedOn)), secondaryArtifacts: \(Swift.String(describing: secondaryArtifacts)))"}
}

extension CodeBuildClientTypes {
    /// <p>Contains summary information about a batch build group.</p>
    public struct BuildSummary: Swift.Equatable {
        /// <p>The batch build ARN.</p>
        public let arn: Swift.String?
        /// <p>The status of the build group.</p>
        ///         <dl>
        ///             <dt>FAILED</dt>
        ///             <dd>
        ///                     <p>The build group failed.</p>
        ///                 </dd>
        ///             <dt>FAULT</dt>
        ///             <dd>
        ///                     <p>The build group faulted.</p>
        ///                 </dd>
        ///             <dt>IN_PROGRESS</dt>
        ///             <dd>
        ///                     <p>The build group is still in progress.</p>
        ///                 </dd>
        ///             <dt>STOPPED</dt>
        ///             <dd>
        ///                     <p>The build group stopped.</p>
        ///                 </dd>
        ///             <dt>SUCCEEDED</dt>
        ///             <dd>
        ///                     <p>The build group succeeded.</p>
        ///                 </dd>
        ///             <dt>TIMED_OUT</dt>
        ///             <dd>
        ///                     <p>The build group timed out.</p>
        ///                 </dd>
        ///          </dl>
        public let buildStatus: CodeBuildClientTypes.StatusType?
        /// <p>A <code>ResolvedArtifact</code> object that represents the primary build artifacts for the
        ///             build group.</p>
        public let primaryArtifact: CodeBuildClientTypes.ResolvedArtifact?
        /// <p>When the build was started, expressed in Unix time format.</p>
        public let requestedOn: ClientRuntime.Date?
        /// <p>An array of <code>ResolvedArtifact</code> objects that represents the secondary build
        ///             artifacts for the build group.</p>
        public let secondaryArtifacts: [CodeBuildClientTypes.ResolvedArtifact]?

        public init (
            arn: Swift.String? = nil,
            buildStatus: CodeBuildClientTypes.StatusType? = nil,
            primaryArtifact: CodeBuildClientTypes.ResolvedArtifact? = nil,
            requestedOn: ClientRuntime.Date? = nil,
            secondaryArtifacts: [CodeBuildClientTypes.ResolvedArtifact]? = nil
        )
        {
            self.arn = arn
            self.buildStatus = buildStatus
            self.primaryArtifact = primaryArtifact
            self.requestedOn = requestedOn
            self.secondaryArtifacts = secondaryArtifacts
        }
    }

}

extension CodeBuildClientTypes {
    public enum CacheMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case localCustomCache
        case localDockerLayerCache
        case localSourceCache
        case sdkUnknown(Swift.String)

        public static var allCases: [CacheMode] {
            return [
                .localCustomCache,
                .localDockerLayerCache,
                .localSourceCache,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .localCustomCache: return "LOCAL_CUSTOM_CACHE"
            case .localDockerLayerCache: return "LOCAL_DOCKER_LAYER_CACHE"
            case .localSourceCache: return "LOCAL_SOURCE_CACHE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CacheMode(rawValue: rawValue) ?? CacheMode.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes {
    public enum CacheType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case local
        case noCache
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [CacheType] {
            return [
                .local,
                .noCache,
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .local: return "LOCAL"
            case .noCache: return "NO_CACHE"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CacheType(rawValue: rawValue) ?? CacheType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.CloudWatchLogsConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName
        case status
        case streamName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let streamName = streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.LogsConfigStatusType.self, forKey: .status)
        status = statusDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
    }
}

extension CodeBuildClientTypes.CloudWatchLogsConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudWatchLogsConfig(groupName: \(Swift.String(describing: groupName)), status: \(Swift.String(describing: status)), streamName: \(Swift.String(describing: streamName)))"}
}

extension CodeBuildClientTypes {
    /// <p> Information about Amazon CloudWatch Logs for a build project. </p>
    public struct CloudWatchLogsConfig: Swift.Equatable {
        /// <p> The group name of the logs in Amazon CloudWatch Logs. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html">Working
        ///                 with Log Groups and Log Streams</a>. </p>
        public let groupName: Swift.String?
        /// <p>The current status of the logs in Amazon CloudWatch Logs for a build project. Valid values are:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>ENABLED</code>: Amazon CloudWatch Logs are enabled for this build project.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>DISABLED</code>: Amazon CloudWatch Logs are not enabled for this build project.</p>
        ///             </li>
        ///          </ul>
        public let status: CodeBuildClientTypes.LogsConfigStatusType?
        /// <p> The prefix of the stream name of the Amazon CloudWatch Logs. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html">Working
        ///                 with Log Groups and Log Streams</a>. </p>
        public let streamName: Swift.String?

        public init (
            groupName: Swift.String? = nil,
            status: CodeBuildClientTypes.LogsConfigStatusType? = nil,
            streamName: Swift.String? = nil
        )
        {
            self.groupName = groupName
            self.status = status
            self.streamName = streamName
        }
    }

}

extension CodeBuildClientTypes.CodeCoverage: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branchCoveragePercentage
        case branchesCovered
        case branchesMissed
        case expired
        case filePath
        case id
        case lineCoveragePercentage
        case linesCovered
        case linesMissed
        case reportARN
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branchCoveragePercentage = branchCoveragePercentage {
            try encodeContainer.encode(branchCoveragePercentage, forKey: .branchCoveragePercentage)
        }
        if let branchesCovered = branchesCovered {
            try encodeContainer.encode(branchesCovered, forKey: .branchesCovered)
        }
        if let branchesMissed = branchesMissed {
            try encodeContainer.encode(branchesMissed, forKey: .branchesMissed)
        }
        if let expired = expired {
            try encodeContainer.encode(expired.timeIntervalSince1970, forKey: .expired)
        }
        if let filePath = filePath {
            try encodeContainer.encode(filePath, forKey: .filePath)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lineCoveragePercentage = lineCoveragePercentage {
            try encodeContainer.encode(lineCoveragePercentage, forKey: .lineCoveragePercentage)
        }
        if let linesCovered = linesCovered {
            try encodeContainer.encode(linesCovered, forKey: .linesCovered)
        }
        if let linesMissed = linesMissed {
            try encodeContainer.encode(linesMissed, forKey: .linesMissed)
        }
        if let reportARN = reportARN {
            try encodeContainer.encode(reportARN, forKey: .reportARN)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let reportARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportARN)
        reportARN = reportARNDecoded
        let filePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filePath)
        filePath = filePathDecoded
        let lineCoveragePercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .lineCoveragePercentage)
        lineCoveragePercentage = lineCoveragePercentageDecoded
        let linesCoveredDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .linesCovered)
        linesCovered = linesCoveredDecoded
        let linesMissedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .linesMissed)
        linesMissed = linesMissedDecoded
        let branchCoveragePercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .branchCoveragePercentage)
        branchCoveragePercentage = branchCoveragePercentageDecoded
        let branchesCoveredDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .branchesCovered)
        branchesCovered = branchesCoveredDecoded
        let branchesMissedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .branchesMissed)
        branchesMissed = branchesMissedDecoded
        let expiredDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expired)
        expired = expiredDecoded
    }
}

extension CodeBuildClientTypes.CodeCoverage: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CodeCoverage(branchCoveragePercentage: \(Swift.String(describing: branchCoveragePercentage)), branchesCovered: \(Swift.String(describing: branchesCovered)), branchesMissed: \(Swift.String(describing: branchesMissed)), expired: \(Swift.String(describing: expired)), filePath: \(Swift.String(describing: filePath)), id: \(Swift.String(describing: id)), lineCoveragePercentage: \(Swift.String(describing: lineCoveragePercentage)), linesCovered: \(Swift.String(describing: linesCovered)), linesMissed: \(Swift.String(describing: linesMissed)), reportARN: \(Swift.String(describing: reportARN)))"}
}

extension CodeBuildClientTypes {
    /// <p>Contains code coverage report information.</p>
    ///         <p>Line coverage measures how many statements your tests cover. A statement is a single
    ///       instruction, not including comments, conditionals, etc.</p>
    ///         <p>Branch coverage determines if your tests cover every possible branch of a control
    ///     structure, such as an <code>if</code> or <code>case</code> statement.</p>
    public struct CodeCoverage: Swift.Equatable {
        /// <p>The percentage of branches that are covered by your tests.</p>
        public let branchCoveragePercentage: Swift.Double?
        /// <p>The number of conditional branches that are covered by your tests.</p>
        public let branchesCovered: Swift.Int?
        /// <p>The number of conditional branches that are not covered by your tests.</p>
        public let branchesMissed: Swift.Int?
        /// <p>The date and time that the tests were run.</p>
        public let expired: ClientRuntime.Date?
        /// <p>The path of the test report file.</p>
        public let filePath: Swift.String?
        /// <p>The identifier of the code coverage report.</p>
        public let id: Swift.String?
        /// <p>The percentage of lines that are covered by your tests.</p>
        public let lineCoveragePercentage: Swift.Double?
        /// <p>The number of lines that are covered by your tests.</p>
        public let linesCovered: Swift.Int?
        /// <p>The number of lines that are not covered by your tests.</p>
        public let linesMissed: Swift.Int?
        /// <p>The ARN of the report.</p>
        public let reportARN: Swift.String?

        public init (
            branchCoveragePercentage: Swift.Double? = nil,
            branchesCovered: Swift.Int? = nil,
            branchesMissed: Swift.Int? = nil,
            expired: ClientRuntime.Date? = nil,
            filePath: Swift.String? = nil,
            id: Swift.String? = nil,
            lineCoveragePercentage: Swift.Double? = nil,
            linesCovered: Swift.Int? = nil,
            linesMissed: Swift.Int? = nil,
            reportARN: Swift.String? = nil
        )
        {
            self.branchCoveragePercentage = branchCoveragePercentage
            self.branchesCovered = branchesCovered
            self.branchesMissed = branchesMissed
            self.expired = expired
            self.filePath = filePath
            self.id = id
            self.lineCoveragePercentage = lineCoveragePercentage
            self.linesCovered = linesCovered
            self.linesMissed = linesMissed
            self.reportARN = reportARN
        }
    }

}

extension CodeBuildClientTypes.CodeCoverageReportSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branchCoveragePercentage
        case branchesCovered
        case branchesMissed
        case lineCoveragePercentage
        case linesCovered
        case linesMissed
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branchCoveragePercentage = branchCoveragePercentage {
            try encodeContainer.encode(branchCoveragePercentage, forKey: .branchCoveragePercentage)
        }
        if let branchesCovered = branchesCovered {
            try encodeContainer.encode(branchesCovered, forKey: .branchesCovered)
        }
        if let branchesMissed = branchesMissed {
            try encodeContainer.encode(branchesMissed, forKey: .branchesMissed)
        }
        if let lineCoveragePercentage = lineCoveragePercentage {
            try encodeContainer.encode(lineCoveragePercentage, forKey: .lineCoveragePercentage)
        }
        if let linesCovered = linesCovered {
            try encodeContainer.encode(linesCovered, forKey: .linesCovered)
        }
        if let linesMissed = linesMissed {
            try encodeContainer.encode(linesMissed, forKey: .linesMissed)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lineCoveragePercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .lineCoveragePercentage)
        lineCoveragePercentage = lineCoveragePercentageDecoded
        let linesCoveredDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .linesCovered)
        linesCovered = linesCoveredDecoded
        let linesMissedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .linesMissed)
        linesMissed = linesMissedDecoded
        let branchCoveragePercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .branchCoveragePercentage)
        branchCoveragePercentage = branchCoveragePercentageDecoded
        let branchesCoveredDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .branchesCovered)
        branchesCovered = branchesCoveredDecoded
        let branchesMissedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .branchesMissed)
        branchesMissed = branchesMissedDecoded
    }
}

extension CodeBuildClientTypes.CodeCoverageReportSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CodeCoverageReportSummary(branchCoveragePercentage: \(Swift.String(describing: branchCoveragePercentage)), branchesCovered: \(Swift.String(describing: branchesCovered)), branchesMissed: \(Swift.String(describing: branchesMissed)), lineCoveragePercentage: \(Swift.String(describing: lineCoveragePercentage)), linesCovered: \(Swift.String(describing: linesCovered)), linesMissed: \(Swift.String(describing: linesMissed)))"}
}

extension CodeBuildClientTypes {
    /// <p>Contains a summary of a code coverage report.</p>
    ///         <p>Line coverage measures how many statements your tests cover. A statement is a single
    ///       instruction, not including comments, conditionals, etc.</p>
    ///         <p>Branch coverage determines if your tests cover every possible branch of a control
    ///     structure, such as an <code>if</code> or <code>case</code> statement.</p>
    public struct CodeCoverageReportSummary: Swift.Equatable {
        /// <p>The percentage of branches that are covered by your tests.</p>
        public let branchCoveragePercentage: Swift.Double?
        /// <p>The number of conditional branches that are covered by your tests.</p>
        public let branchesCovered: Swift.Int?
        /// <p>The number of conditional branches that are not covered by your tests.</p>
        public let branchesMissed: Swift.Int?
        /// <p>The percentage of lines that are covered by your tests.</p>
        public let lineCoveragePercentage: Swift.Double?
        /// <p>The number of lines that are covered by your tests.</p>
        public let linesCovered: Swift.Int?
        /// <p>The number of lines that are not covered by your tests.</p>
        public let linesMissed: Swift.Int?

        public init (
            branchCoveragePercentage: Swift.Double? = nil,
            branchesCovered: Swift.Int? = nil,
            branchesMissed: Swift.Int? = nil,
            lineCoveragePercentage: Swift.Double? = nil,
            linesCovered: Swift.Int? = nil,
            linesMissed: Swift.Int? = nil
        )
        {
            self.branchCoveragePercentage = branchCoveragePercentage
            self.branchesCovered = branchesCovered
            self.branchesMissed = branchesMissed
            self.lineCoveragePercentage = lineCoveragePercentage
            self.linesCovered = linesCovered
            self.linesMissed = linesMissed
        }
    }

}

extension CodeBuildClientTypes {
    public enum ComputeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case buildGeneral12xlarge
        case buildGeneral1Large
        case buildGeneral1Medium
        case buildGeneral1Small
        case sdkUnknown(Swift.String)

        public static var allCases: [ComputeType] {
            return [
                .buildGeneral12xlarge,
                .buildGeneral1Large,
                .buildGeneral1Medium,
                .buildGeneral1Small,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .buildGeneral12xlarge: return "BUILD_GENERAL1_2XLARGE"
            case .buildGeneral1Large: return "BUILD_GENERAL1_LARGE"
            case .buildGeneral1Medium: return "BUILD_GENERAL1_MEDIUM"
            case .buildGeneral1Small: return "BUILD_GENERAL1_SMALL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComputeType(rawValue: rawValue) ?? ComputeType.sdkUnknown(rawValue)
        }
    }
}

public struct CreateProjectInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProjectInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProjectOutputError>
}

extension CreateProjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateProjectInput(artifacts: \(Swift.String(describing: artifacts)), badgeEnabled: \(Swift.String(describing: badgeEnabled)), buildBatchConfig: \(Swift.String(describing: buildBatchConfig)), cache: \(Swift.String(describing: cache)), concurrentBuildLimit: \(Swift.String(describing: concurrentBuildLimit)), description: \(Swift.String(describing: description)), encryptionKey: \(Swift.String(describing: encryptionKey)), environment: \(Swift.String(describing: environment)), fileSystemLocations: \(Swift.String(describing: fileSystemLocations)), logsConfig: \(Swift.String(describing: logsConfig)), name: \(Swift.String(describing: name)), queuedTimeoutInMinutes: \(Swift.String(describing: queuedTimeoutInMinutes)), secondaryArtifacts: \(Swift.String(describing: secondaryArtifacts)), secondarySourceVersions: \(Swift.String(describing: secondarySourceVersions)), secondarySources: \(Swift.String(describing: secondarySources)), serviceRole: \(Swift.String(describing: serviceRole)), source: \(Swift.String(describing: source)), sourceVersion: \(Swift.String(describing: sourceVersion)), tags: \(Swift.String(describing: tags)), timeoutInMinutes: \(Swift.String(describing: timeoutInMinutes)), vpcConfig: \(Swift.String(describing: vpcConfig)))"}
}

extension CreateProjectInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifacts
        case badgeEnabled
        case buildBatchConfig
        case cache
        case concurrentBuildLimit
        case description
        case encryptionKey
        case environment
        case fileSystemLocations
        case logsConfig
        case name
        case queuedTimeoutInMinutes
        case secondaryArtifacts
        case secondarySourceVersions
        case secondarySources
        case serviceRole
        case source
        case sourceVersion
        case tags
        case timeoutInMinutes
        case vpcConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifacts = artifacts {
            try encodeContainer.encode(artifacts, forKey: .artifacts)
        }
        if let badgeEnabled = badgeEnabled {
            try encodeContainer.encode(badgeEnabled, forKey: .badgeEnabled)
        }
        if let buildBatchConfig = buildBatchConfig {
            try encodeContainer.encode(buildBatchConfig, forKey: .buildBatchConfig)
        }
        if let cache = cache {
            try encodeContainer.encode(cache, forKey: .cache)
        }
        if let concurrentBuildLimit = concurrentBuildLimit {
            try encodeContainer.encode(concurrentBuildLimit, forKey: .concurrentBuildLimit)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encryptionKey = encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let environment = environment {
            try encodeContainer.encode(environment, forKey: .environment)
        }
        if let fileSystemLocations = fileSystemLocations {
            var fileSystemLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fileSystemLocations)
            for projectfilesystemlocations0 in fileSystemLocations {
                try fileSystemLocationsContainer.encode(projectfilesystemlocations0)
            }
        }
        if let logsConfig = logsConfig {
            try encodeContainer.encode(logsConfig, forKey: .logsConfig)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let queuedTimeoutInMinutes = queuedTimeoutInMinutes {
            try encodeContainer.encode(queuedTimeoutInMinutes, forKey: .queuedTimeoutInMinutes)
        }
        if let secondaryArtifacts = secondaryArtifacts {
            var secondaryArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondaryArtifacts)
            for projectartifactslist0 in secondaryArtifacts {
                try secondaryArtifactsContainer.encode(projectartifactslist0)
            }
        }
        if let secondarySourceVersions = secondarySourceVersions {
            var secondarySourceVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySourceVersions)
            for projectsecondarysourceversions0 in secondarySourceVersions {
                try secondarySourceVersionsContainer.encode(projectsecondarysourceversions0)
            }
        }
        if let secondarySources = secondarySources {
            var secondarySourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySources)
            for projectsources0 in secondarySources {
                try secondarySourcesContainer.encode(projectsources0)
            }
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let sourceVersion = sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let timeoutInMinutes = timeoutInMinutes {
            try encodeContainer.encode(timeoutInMinutes, forKey: .timeoutInMinutes)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}

public struct CreateProjectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProjectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProjectOutputError>
}

public struct CreateProjectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateProjectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateProjectOutputError>
}

public struct CreateProjectInput: Swift.Equatable {
    /// <p>Information about the build output artifacts for the build project.</p>
    public let artifacts: CodeBuildClientTypes.ProjectArtifacts?
    /// <p>Set this to true to generate a publicly accessible URL for your project's build
    ///         badge.</p>
    public let badgeEnabled: Swift.Bool?
    /// <p>A <a>ProjectBuildBatchConfig</a>
    ///  object that defines the batch build options
    ///             for the project.</p>
    public let buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig?
    /// <p>Stores recently used information so that it can be quickly accessed at a later
    ///         time.</p>
    public let cache: CodeBuildClientTypes.ProjectCache?
    /// <p>The maximum number of concurrent builds that are allowed for this project.</p>
    ///          <p>New builds are only started if the current number of builds is less than or equal to this limit.
    ///   If the current build count meets this limit, new builds are throttled and are not run.</p>
    public let concurrentBuildLimit: Swift.Int?
    /// <p>A description that makes the build project easy to identify.</p>
    public let description: Swift.String?
    /// <p>The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output
    ///       artifacts.</p>
    ///          <note>
    ///             <p>You can use a cross-account KMS key to encrypt the build output artifacts if your
    ///         service role has permission to that key. </p>
    ///          </note>
    ///          <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using
    ///         the format <code>alias/<alias-name></code>).
    ///     </p>
    public let encryptionKey: Swift.String?
    /// <p>Information about the build environment for the build project.</p>
    public let environment: CodeBuildClientTypes.ProjectEnvironment?
    /// <p>
    ///       An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A <code>ProjectFileSystemLocation</code> object
    ///       specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>,
    ///       <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System.
    ///   </p>
    public let fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]?
    /// <p>Information about logs for the build project. These can be logs in Amazon CloudWatch Logs, logs
    ///       uploaded to a specified S3 bucket, or both. </p>
    public let logsConfig: CodeBuildClientTypes.LogsConfig?
    /// <p>The name of the build project.</p>
    public let name: Swift.String?
    /// <p>The number of minutes a build is allowed to be queued before it times out. </p>
    public let queuedTimeoutInMinutes: Swift.Int?
    /// <p>An array of <code>ProjectArtifacts</code> objects. </p>
    public let secondaryArtifacts: [CodeBuildClientTypes.ProjectArtifacts]?
    /// <p>An array of <code>ProjectSourceVersion</code> objects. If
    ///       <code>secondarySourceVersions</code> is specified at the build level, then they take
    ///       precedence over these <code>secondarySourceVersions</code> (at the project level).
    ///     </p>
    public let secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]?
    /// <p>An array of <code>ProjectSource</code> objects. </p>
    public let secondarySources: [CodeBuildClientTypes.ProjectSource]?
    /// <p>The ARN of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services
    ///       on behalf of the AWS account.</p>
    public let serviceRole: Swift.String?
    /// <p>Information about the build input source code for the build project.</p>
    public let source: CodeBuildClientTypes.ProjectSource?
    /// <p>A version of the build input to be built for this project. If not specified, the latest
    ///             version is used. If specified, it must be one of: </p>
    ///          <ul>
    ///             <li>
    ///                <p>For AWS CodeCommit: the commit ID, branch, or Git tag to use.</p>
    ///             </li>
    ///             <li>
    ///                <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that
    ///           corresponds to the version of the source code you want to build. If a pull
    ///           request ID is specified, it must use the format <code>pr/pull-request-ID</code>
    ///           (for example <code>pr/25</code>). If a branch name is specified, the branch's
    ///           HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is
    ///           used.</p>
    ///             </li>
    ///             <li>
    ///                <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the
    ///           version of the source code you want to build. If a branch name is specified, the
    ///           branch's HEAD commit ID is used. If not specified, the default branch's HEAD
    ///           commit ID is used.</p>
    ///             </li>
    ///             <li>
    ///                <p>For Amazon S3: the version ID of the object that represents the build input ZIP
    ///           file to use.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If <code>sourceVersion</code> is specified at the build level, then that version takes
    ///             precedence over this <code>sourceVersion</code> (at the project level). </p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html">Source Version Sample
    ///                 with CodeBuild</a> in the <i>AWS CodeBuild User Guide</i>.
    ///     </p>
    public let sourceVersion: Swift.String?
    /// <p>A list of tag key and value pairs associated with this build project.</p>
    ///          <p>These tags are available for use by AWS services that support AWS CodeBuild build project
    ///       tags.</p>
    public let tags: [CodeBuildClientTypes.Tag]?
    /// <p>How long, in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait before it times out
    ///       any build that has not been marked as completed. The default is 60 minutes.</p>
    public let timeoutInMinutes: Swift.Int?
    /// <p>VpcConfig enables AWS CodeBuild to access resources in an Amazon VPC.</p>
    public let vpcConfig: CodeBuildClientTypes.VpcConfig?

    public init (
        artifacts: CodeBuildClientTypes.ProjectArtifacts? = nil,
        badgeEnabled: Swift.Bool? = nil,
        buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig? = nil,
        cache: CodeBuildClientTypes.ProjectCache? = nil,
        concurrentBuildLimit: Swift.Int? = nil,
        description: Swift.String? = nil,
        encryptionKey: Swift.String? = nil,
        environment: CodeBuildClientTypes.ProjectEnvironment? = nil,
        fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]? = nil,
        logsConfig: CodeBuildClientTypes.LogsConfig? = nil,
        name: Swift.String? = nil,
        queuedTimeoutInMinutes: Swift.Int? = nil,
        secondaryArtifacts: [CodeBuildClientTypes.ProjectArtifacts]? = nil,
        secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
        secondarySources: [CodeBuildClientTypes.ProjectSource]? = nil,
        serviceRole: Swift.String? = nil,
        source: CodeBuildClientTypes.ProjectSource? = nil,
        sourceVersion: Swift.String? = nil,
        tags: [CodeBuildClientTypes.Tag]? = nil,
        timeoutInMinutes: Swift.Int? = nil,
        vpcConfig: CodeBuildClientTypes.VpcConfig? = nil
    )
    {
        self.artifacts = artifacts
        self.badgeEnabled = badgeEnabled
        self.buildBatchConfig = buildBatchConfig
        self.cache = cache
        self.concurrentBuildLimit = concurrentBuildLimit
        self.description = description
        self.encryptionKey = encryptionKey
        self.environment = environment
        self.fileSystemLocations = fileSystemLocations
        self.logsConfig = logsConfig
        self.name = name
        self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
        self.secondaryArtifacts = secondaryArtifacts
        self.secondarySourceVersions = secondarySourceVersions
        self.secondarySources = secondarySources
        self.serviceRole = serviceRole
        self.source = source
        self.sourceVersion = sourceVersion
        self.tags = tags
        self.timeoutInMinutes = timeoutInMinutes
        self.vpcConfig = vpcConfig
    }
}

struct CreateProjectInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let source: CodeBuildClientTypes.ProjectSource?
    public let secondarySources: [CodeBuildClientTypes.ProjectSource]?
    public let sourceVersion: Swift.String?
    public let secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]?
    public let artifacts: CodeBuildClientTypes.ProjectArtifacts?
    public let secondaryArtifacts: [CodeBuildClientTypes.ProjectArtifacts]?
    public let cache: CodeBuildClientTypes.ProjectCache?
    public let environment: CodeBuildClientTypes.ProjectEnvironment?
    public let serviceRole: Swift.String?
    public let timeoutInMinutes: Swift.Int?
    public let queuedTimeoutInMinutes: Swift.Int?
    public let encryptionKey: Swift.String?
    public let tags: [CodeBuildClientTypes.Tag]?
    public let vpcConfig: CodeBuildClientTypes.VpcConfig?
    public let badgeEnabled: Swift.Bool?
    public let logsConfig: CodeBuildClientTypes.LogsConfig?
    public let fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]?
    public let buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig?
    public let concurrentBuildLimit: Swift.Int?
}

extension CreateProjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifacts
        case badgeEnabled
        case buildBatchConfig
        case cache
        case concurrentBuildLimit
        case description
        case encryptionKey
        case environment
        case fileSystemLocations
        case logsConfig
        case name
        case queuedTimeoutInMinutes
        case secondaryArtifacts
        case secondarySourceVersions
        case secondarySources
        case serviceRole
        case source
        case sourceVersion
        case tags
        case timeoutInMinutes
        case vpcConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectSource.self, forKey: .source)
        source = sourceDecoded
        let secondarySourcesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectSource?].self, forKey: .secondarySources)
        var secondarySourcesDecoded0:[CodeBuildClientTypes.ProjectSource]? = nil
        if let secondarySourcesContainer = secondarySourcesContainer {
            secondarySourcesDecoded0 = [CodeBuildClientTypes.ProjectSource]()
            for structure0 in secondarySourcesContainer {
                if let structure0 = structure0 {
                    secondarySourcesDecoded0?.append(structure0)
                }
            }
        }
        secondarySources = secondarySourcesDecoded0
        let sourceVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
        let secondarySourceVersionsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectSourceVersion?].self, forKey: .secondarySourceVersions)
        var secondarySourceVersionsDecoded0:[CodeBuildClientTypes.ProjectSourceVersion]? = nil
        if let secondarySourceVersionsContainer = secondarySourceVersionsContainer {
            secondarySourceVersionsDecoded0 = [CodeBuildClientTypes.ProjectSourceVersion]()
            for structure0 in secondarySourceVersionsContainer {
                if let structure0 = structure0 {
                    secondarySourceVersionsDecoded0?.append(structure0)
                }
            }
        }
        secondarySourceVersions = secondarySourceVersionsDecoded0
        let artifactsDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectArtifacts.self, forKey: .artifacts)
        artifacts = artifactsDecoded
        let secondaryArtifactsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectArtifacts?].self, forKey: .secondaryArtifacts)
        var secondaryArtifactsDecoded0:[CodeBuildClientTypes.ProjectArtifacts]? = nil
        if let secondaryArtifactsContainer = secondaryArtifactsContainer {
            secondaryArtifactsDecoded0 = [CodeBuildClientTypes.ProjectArtifacts]()
            for structure0 in secondaryArtifactsContainer {
                if let structure0 = structure0 {
                    secondaryArtifactsDecoded0?.append(structure0)
                }
            }
        }
        secondaryArtifacts = secondaryArtifactsDecoded0
        let cacheDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectCache.self, forKey: .cache)
        cache = cacheDecoded
        let environmentDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectEnvironment.self, forKey: .environment)
        environment = environmentDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let timeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInMinutes)
        timeoutInMinutes = timeoutInMinutesDecoded
        let queuedTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .queuedTimeoutInMinutes)
        queuedTimeoutInMinutes = queuedTimeoutInMinutesDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodeBuildClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodeBuildClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let vpcConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let badgeEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .badgeEnabled)
        badgeEnabled = badgeEnabledDecoded
        let logsConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.LogsConfig.self, forKey: .logsConfig)
        logsConfig = logsConfigDecoded
        let fileSystemLocationsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectFileSystemLocation?].self, forKey: .fileSystemLocations)
        var fileSystemLocationsDecoded0:[CodeBuildClientTypes.ProjectFileSystemLocation]? = nil
        if let fileSystemLocationsContainer = fileSystemLocationsContainer {
            fileSystemLocationsDecoded0 = [CodeBuildClientTypes.ProjectFileSystemLocation]()
            for structure0 in fileSystemLocationsContainer {
                if let structure0 = structure0 {
                    fileSystemLocationsDecoded0?.append(structure0)
                }
            }
        }
        fileSystemLocations = fileSystemLocationsDecoded0
        let buildBatchConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectBuildBatchConfig.self, forKey: .buildBatchConfig)
        buildBatchConfig = buildBatchConfigDecoded
        let concurrentBuildLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .concurrentBuildLimit)
        concurrentBuildLimit = concurrentBuildLimitDecoded
    }
}

extension CreateProjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateProjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountLimitExceededException" : self = .accountLimitExceededException(try AccountLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateProjectOutputError: Swift.Error, Swift.Equatable {
    case accountLimitExceededException(AccountLimitExceededException)
    case invalidInputException(InvalidInputException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateProjectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateProjectOutputResponse(project: \(Swift.String(describing: project)))"}
}

extension CreateProjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateProjectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.project = output.project
        } else {
            self.project = nil
        }
    }
}

public struct CreateProjectOutputResponse: Swift.Equatable {
    /// <p>Information about the build project that was created.</p>
    public let project: CodeBuildClientTypes.Project?

    public init (
        project: CodeBuildClientTypes.Project? = nil
    )
    {
        self.project = project
    }
}

struct CreateProjectOutputResponseBody: Swift.Equatable {
    public let project: CodeBuildClientTypes.Project?
}

extension CreateProjectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case project
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.Project.self, forKey: .project)
        project = projectDecoded
    }
}

public struct CreateReportGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReportGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReportGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReportGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReportGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReportGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReportGroupOutputError>
}

extension CreateReportGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateReportGroupInput(exportConfig: \(Swift.String(describing: exportConfig)), name: \(Swift.String(describing: name)), tags: \(Swift.String(describing: tags)), type: \(Swift.String(describing: type)))"}
}

extension CreateReportGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportConfig
        case name
        case tags
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exportConfig = exportConfig {
            try encodeContainer.encode(exportConfig, forKey: .exportConfig)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct CreateReportGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReportGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReportGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReportGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReportGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReportGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReportGroupOutputError>
}

public struct CreateReportGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReportGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReportGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReportGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReportGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReportGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReportGroupOutputError>
}

public struct CreateReportGroupInput: Swift.Equatable {
    /// <p>
    ///       A <code>ReportExportConfig</code> object that contains information about where the report group test results are exported.
    ///     </p>
    public let exportConfig: CodeBuildClientTypes.ReportExportConfig?
    /// <p>
    ///       The name of the report group.
    ///     </p>
    public let name: Swift.String?
    /// <p>
    ///       A list of tag key and value pairs associated with this report group.
    ///     </p>
    ///          <p>These tags are available for use by AWS services that support AWS CodeBuild report group
    ///       tags.</p>
    public let tags: [CodeBuildClientTypes.Tag]?
    /// <p>
    ///       The type of report group.
    ///     </p>
    public let type: CodeBuildClientTypes.ReportType?

    public init (
        exportConfig: CodeBuildClientTypes.ReportExportConfig? = nil,
        name: Swift.String? = nil,
        tags: [CodeBuildClientTypes.Tag]? = nil,
        type: CodeBuildClientTypes.ReportType? = nil
    )
    {
        self.exportConfig = exportConfig
        self.name = name
        self.tags = tags
        self.type = type
    }
}

struct CreateReportGroupInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let type: CodeBuildClientTypes.ReportType?
    public let exportConfig: CodeBuildClientTypes.ReportExportConfig?
    public let tags: [CodeBuildClientTypes.Tag]?
}

extension CreateReportGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportConfig
        case name
        case tags
        case type
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportType.self, forKey: .type)
        type = typeDecoded
        let exportConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportExportConfig.self, forKey: .exportConfig)
        exportConfig = exportConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodeBuildClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodeBuildClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateReportGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateReportGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountLimitExceededException" : self = .accountLimitExceededException(try AccountLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateReportGroupOutputError: Swift.Error, Swift.Equatable {
    case accountLimitExceededException(AccountLimitExceededException)
    case invalidInputException(InvalidInputException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateReportGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateReportGroupOutputResponse(reportGroup: \(Swift.String(describing: reportGroup)))"}
}

extension CreateReportGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateReportGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.reportGroup = output.reportGroup
        } else {
            self.reportGroup = nil
        }
    }
}

public struct CreateReportGroupOutputResponse: Swift.Equatable {
    /// <p>
    ///       Information about the report group that was created.
    ///     </p>
    public let reportGroup: CodeBuildClientTypes.ReportGroup?

    public init (
        reportGroup: CodeBuildClientTypes.ReportGroup? = nil
    )
    {
        self.reportGroup = reportGroup
    }
}

struct CreateReportGroupOutputResponseBody: Swift.Equatable {
    public let reportGroup: CodeBuildClientTypes.ReportGroup?
}

extension CreateReportGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reportGroup
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportGroupDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportGroup.self, forKey: .reportGroup)
        reportGroup = reportGroupDecoded
    }
}

public struct CreateWebhookInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateWebhookInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateWebhookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateWebhookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateWebhookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateWebhookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateWebhookOutputError>
}

extension CreateWebhookInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateWebhookInput(branchFilter: \(Swift.String(describing: branchFilter)), buildType: \(Swift.String(describing: buildType)), filterGroups: \(Swift.String(describing: filterGroups)), projectName: \(Swift.String(describing: projectName)))"}
}

extension CreateWebhookInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branchFilter
        case buildType
        case filterGroups
        case projectName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branchFilter = branchFilter {
            try encodeContainer.encode(branchFilter, forKey: .branchFilter)
        }
        if let buildType = buildType {
            try encodeContainer.encode(buildType.rawValue, forKey: .buildType)
        }
        if let filterGroups = filterGroups {
            var filterGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filterGroups)
            for filtergroups0 in filterGroups {
                var filtergroups0Container = filterGroupsContainer.nestedUnkeyedContainer()
                for filtergroup1 in filtergroups0 {
                    try filtergroups0Container.encode(filtergroup1)
                }
            }
        }
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
    }
}

public struct CreateWebhookInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateWebhookInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateWebhookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateWebhookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateWebhookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateWebhookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateWebhookOutputError>
}

public struct CreateWebhookInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateWebhookInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateWebhookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateWebhookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateWebhookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateWebhookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateWebhookOutputError>
}

public struct CreateWebhookInput: Swift.Equatable {
    /// <p>A regular expression used to determine which repository branches are built when a
    ///       webhook is triggered. If the name of a branch matches the regular expression, then it is
    ///       built. If <code>branchFilter</code> is empty, then all branches are built.</p>
    ///          <note>
    ///             <p>It is recommended that you use <code>filterGroups</code> instead of
    ///         <code>branchFilter</code>. </p>
    ///          </note>
    public let branchFilter: Swift.String?
    /// <p>Specifies the type of build this webhook will trigger.</p>
    public let buildType: CodeBuildClientTypes.WebhookBuildType?
    /// <p>An array of arrays of <code>WebhookFilter</code> objects used to determine which
    ///       webhooks are triggered. At least one <code>WebhookFilter</code> in the array must
    ///       specify <code>EVENT</code> as its <code>type</code>. </p>
    ///          <p>For a build to be triggered, at least one filter group in the
    ///       <code>filterGroups</code> array must pass. For a filter group to pass, each of its
    ///       filters must pass. </p>
    public let filterGroups: [[CodeBuildClientTypes.WebhookFilter]]?
    /// <p>The name of the AWS CodeBuild project.</p>
    public let projectName: Swift.String?

    public init (
        branchFilter: Swift.String? = nil,
        buildType: CodeBuildClientTypes.WebhookBuildType? = nil,
        filterGroups: [[CodeBuildClientTypes.WebhookFilter]]? = nil,
        projectName: Swift.String? = nil
    )
    {
        self.branchFilter = branchFilter
        self.buildType = buildType
        self.filterGroups = filterGroups
        self.projectName = projectName
    }
}

struct CreateWebhookInputBody: Swift.Equatable {
    public let projectName: Swift.String?
    public let branchFilter: Swift.String?
    public let filterGroups: [[CodeBuildClientTypes.WebhookFilter]]?
    public let buildType: CodeBuildClientTypes.WebhookBuildType?
}

extension CreateWebhookInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branchFilter
        case buildType
        case filterGroups
        case projectName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let branchFilterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branchFilter)
        branchFilter = branchFilterDecoded
        let filterGroupsContainer = try containerValues.decodeIfPresent([[CodeBuildClientTypes.WebhookFilter?]?].self, forKey: .filterGroups)
        var filterGroupsDecoded0:[[CodeBuildClientTypes.WebhookFilter]]? = nil
        if let filterGroupsContainer = filterGroupsContainer {
            filterGroupsDecoded0 = [[CodeBuildClientTypes.WebhookFilter]]()
            for list0 in filterGroupsContainer {
                var list0Decoded0: [CodeBuildClientTypes.WebhookFilter]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [CodeBuildClientTypes.WebhookFilter]()
                    for structure1 in list0 {
                        if let structure1 = structure1 {
                            list0Decoded0?.append(structure1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    filterGroupsDecoded0?.append(list0Decoded0)
                }
            }
        }
        filterGroups = filterGroupsDecoded0
        let buildTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.WebhookBuildType.self, forKey: .buildType)
        buildType = buildTypeDecoded
    }
}

extension CreateWebhookOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateWebhookOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OAuthProviderException" : self = .oAuthProviderException(try OAuthProviderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateWebhookOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case oAuthProviderException(OAuthProviderException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateWebhookOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateWebhookOutputResponse(webhook: \(Swift.String(describing: webhook)))"}
}

extension CreateWebhookOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateWebhookOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.webhook = output.webhook
        } else {
            self.webhook = nil
        }
    }
}

public struct CreateWebhookOutputResponse: Swift.Equatable {
    /// <p>Information about a webhook that connects repository events to a build project in
    ///       AWS CodeBuild.</p>
    public let webhook: CodeBuildClientTypes.Webhook?

    public init (
        webhook: CodeBuildClientTypes.Webhook? = nil
    )
    {
        self.webhook = webhook
    }
}

struct CreateWebhookOutputResponseBody: Swift.Equatable {
    public let webhook: CodeBuildClientTypes.Webhook?
}

extension CreateWebhookOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webhook
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webhookDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.Webhook.self, forKey: .webhook)
        webhook = webhookDecoded
    }
}

extension CodeBuildClientTypes {
    public enum CredentialProviderType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case secretsManager
        case sdkUnknown(Swift.String)

        public static var allCases: [CredentialProviderType] {
            return [
                .secretsManager,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .secretsManager: return "SECRETS_MANAGER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CredentialProviderType(rawValue: rawValue) ?? CredentialProviderType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.DebugSession: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sessionEnabled
        case sessionTarget
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sessionEnabled = sessionEnabled {
            try encodeContainer.encode(sessionEnabled, forKey: .sessionEnabled)
        }
        if let sessionTarget = sessionTarget {
            try encodeContainer.encode(sessionTarget, forKey: .sessionTarget)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sessionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sessionEnabled)
        sessionEnabled = sessionEnabledDecoded
        let sessionTargetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionTarget)
        sessionTarget = sessionTargetDecoded
    }
}

extension CodeBuildClientTypes.DebugSession: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DebugSession(sessionEnabled: \(Swift.String(describing: sessionEnabled)), sessionTarget: \(Swift.String(describing: sessionTarget)))"}
}

extension CodeBuildClientTypes {
    /// <p>Contains information about the debug session for a build. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html">Viewing a
    ///                 running build in Session Manager</a>.</p>
    public struct DebugSession: Swift.Equatable {
        /// <p>Specifies if session debugging is enabled for this build.</p>
        public let sessionEnabled: Swift.Bool?
        /// <p>Contains the identifier of the Session Manager session used for the build. To work with
        ///             the paused build, you open this session to examine, control, and resume the
        ///             build.</p>
        public let sessionTarget: Swift.String?

        public init (
            sessionEnabled: Swift.Bool? = nil,
            sessionTarget: Swift.String? = nil
        )
        {
            self.sessionEnabled = sessionEnabled
            self.sessionTarget = sessionTarget
        }
    }

}

public struct DeleteBuildBatchInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBuildBatchInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBuildBatchInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBuildBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBuildBatchInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBuildBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBuildBatchOutputError>
}

extension DeleteBuildBatchInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBuildBatchInput(id: \(Swift.String(describing: id)))"}
}

extension DeleteBuildBatchInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }
}

public struct DeleteBuildBatchInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBuildBatchInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBuildBatchInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBuildBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBuildBatchInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBuildBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBuildBatchOutputError>
}

public struct DeleteBuildBatchInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBuildBatchInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBuildBatchInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBuildBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBuildBatchInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBuildBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBuildBatchOutputError>
}

public struct DeleteBuildBatchInput: Swift.Equatable {
    /// <p>The identifier of the batch build to delete.</p>
    public let id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct DeleteBuildBatchInputBody: Swift.Equatable {
    public let id: Swift.String?
}

extension DeleteBuildBatchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension DeleteBuildBatchOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBuildBatchOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBuildBatchOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBuildBatchOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBuildBatchOutputResponse(buildsDeleted: \(Swift.String(describing: buildsDeleted)), buildsNotDeleted: \(Swift.String(describing: buildsNotDeleted)), statusCode: \(Swift.String(describing: statusCode)))"}
}

extension DeleteBuildBatchOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteBuildBatchOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.buildsDeleted = output.buildsDeleted
            self.buildsNotDeleted = output.buildsNotDeleted
            self.statusCode = output.statusCode
        } else {
            self.buildsDeleted = nil
            self.buildsNotDeleted = nil
            self.statusCode = nil
        }
    }
}

public struct DeleteBuildBatchOutputResponse: Swift.Equatable {
    /// <p>An array of strings that contain the identifiers of the builds that were deleted.</p>
    public let buildsDeleted: [Swift.String]?
    /// <p>An array of <code>BuildNotDeleted</code> objects that specify the builds that could not be
    ///             deleted.</p>
    public let buildsNotDeleted: [CodeBuildClientTypes.BuildNotDeleted]?
    /// <p>The status code.</p>
    public let statusCode: Swift.String?

    public init (
        buildsDeleted: [Swift.String]? = nil,
        buildsNotDeleted: [CodeBuildClientTypes.BuildNotDeleted]? = nil,
        statusCode: Swift.String? = nil
    )
    {
        self.buildsDeleted = buildsDeleted
        self.buildsNotDeleted = buildsNotDeleted
        self.statusCode = statusCode
    }
}

struct DeleteBuildBatchOutputResponseBody: Swift.Equatable {
    public let statusCode: Swift.String?
    public let buildsDeleted: [Swift.String]?
    public let buildsNotDeleted: [CodeBuildClientTypes.BuildNotDeleted]?
}

extension DeleteBuildBatchOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildsDeleted
        case buildsNotDeleted
        case statusCode
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let buildsDeletedContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .buildsDeleted)
        var buildsDeletedDecoded0:[Swift.String]? = nil
        if let buildsDeletedContainer = buildsDeletedContainer {
            buildsDeletedDecoded0 = [Swift.String]()
            for string0 in buildsDeletedContainer {
                if let string0 = string0 {
                    buildsDeletedDecoded0?.append(string0)
                }
            }
        }
        buildsDeleted = buildsDeletedDecoded0
        let buildsNotDeletedContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.BuildNotDeleted?].self, forKey: .buildsNotDeleted)
        var buildsNotDeletedDecoded0:[CodeBuildClientTypes.BuildNotDeleted]? = nil
        if let buildsNotDeletedContainer = buildsNotDeletedContainer {
            buildsNotDeletedDecoded0 = [CodeBuildClientTypes.BuildNotDeleted]()
            for structure0 in buildsNotDeletedContainer {
                if let structure0 = structure0 {
                    buildsNotDeletedDecoded0?.append(structure0)
                }
            }
        }
        buildsNotDeleted = buildsNotDeletedDecoded0
    }
}

public struct DeleteProjectInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteProjectInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteProjectOutputError>
}

extension DeleteProjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteProjectInput(name: \(Swift.String(describing: name)))"}
}

extension DeleteProjectInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct DeleteProjectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteProjectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteProjectOutputError>
}

public struct DeleteProjectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteProjectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteProjectOutputError>
}

public struct DeleteProjectInput: Swift.Equatable {
    /// <p>The name of the build project.</p>
    public let name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteProjectInputBody: Swift.Equatable {
    public let name: Swift.String?
}

extension DeleteProjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteProjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteProjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteProjectOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteProjectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteProjectOutputResponse()"}
}

extension DeleteProjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteProjectOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteProjectOutputResponseBody: Swift.Equatable {
}

extension DeleteProjectOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteReportGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReportGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReportGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReportGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReportGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReportGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReportGroupOutputError>
}

extension DeleteReportGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteReportGroupInput(arn: \(Swift.String(describing: arn)), deleteReports: \(Swift.String(describing: deleteReports)))"}
}

extension DeleteReportGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case deleteReports
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if deleteReports != false {
            try encodeContainer.encode(deleteReports, forKey: .deleteReports)
        }
    }
}

public struct DeleteReportGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReportGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReportGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReportGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReportGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReportGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReportGroupOutputError>
}

public struct DeleteReportGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReportGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReportGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReportGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReportGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReportGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReportGroupOutputError>
}

public struct DeleteReportGroupInput: Swift.Equatable {
    /// <p>The ARN of the report group to delete. </p>
    public let arn: Swift.String?
    /// <p>If <code>true</code>, deletes any reports that belong to a report group before deleting
    ///             the report group. </p>
    ///          <p>If <code>false</code>, you must delete any reports in the report group. Use <a href="https://docs.aws.amazon.com/codebuild/latest/APIReference/API_ListReportsForReportGroup.html">ListReportsForReportGroup</a> to get the reports in a report group. Use <a href="https://docs.aws.amazon.com/codebuild/latest/APIReference/API_DeleteReport.html">DeleteReport</a> to delete the reports. If you call
    ///       <code>DeleteReportGroup</code> for a report group that contains one or more reports,
    ///             an exception is thrown. </p>
    public let deleteReports: Swift.Bool

    public init (
        arn: Swift.String? = nil,
        deleteReports: Swift.Bool = false
    )
    {
        self.arn = arn
        self.deleteReports = deleteReports
    }
}

struct DeleteReportGroupInputBody: Swift.Equatable {
    public let arn: Swift.String?
    public let deleteReports: Swift.Bool
}

extension DeleteReportGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case deleteReports
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let deleteReportsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .deleteReports)
        deleteReports = deleteReportsDecoded
    }
}

extension DeleteReportGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteReportGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteReportGroupOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteReportGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteReportGroupOutputResponse()"}
}

extension DeleteReportGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteReportGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteReportGroupOutputResponseBody: Swift.Equatable {
}

extension DeleteReportGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteReportInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReportInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReportOutputError>
}

extension DeleteReportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteReportInput(arn: \(Swift.String(describing: arn)))"}
}

extension DeleteReportInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }
}

public struct DeleteReportInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReportInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReportOutputError>
}

public struct DeleteReportInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReportInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReportOutputError>
}

public struct DeleteReportInput: Swift.Equatable {
    /// <p>
    ///       The ARN of the report to delete.
    ///     </p>
    public let arn: Swift.String?

    public init (
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

struct DeleteReportInputBody: Swift.Equatable {
    public let arn: Swift.String?
}

extension DeleteReportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension DeleteReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteReportOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteReportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteReportOutputResponse()"}
}

extension DeleteReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteReportOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteReportOutputResponseBody: Swift.Equatable {
}

extension DeleteReportOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteResourcePolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteResourcePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteResourcePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteResourcePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteResourcePolicyOutputError>
}

extension DeleteResourcePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteResourcePolicyInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension DeleteResourcePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct DeleteResourcePolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteResourcePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteResourcePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteResourcePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteResourcePolicyOutputError>
}

public struct DeleteResourcePolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteResourcePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteResourcePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteResourcePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteResourcePolicyOutputError>
}

public struct DeleteResourcePolicyInput: Swift.Equatable {
    /// <p> The ARN of the resource that is associated with the resource policy. </p>
    public let resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DeleteResourcePolicyInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
}

extension DeleteResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DeleteResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteResourcePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteResourcePolicyOutputResponse()"}
}

extension DeleteResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteResourcePolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteResourcePolicyOutputResponseBody: Swift.Equatable {
}

extension DeleteResourcePolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteSourceCredentialsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSourceCredentialsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSourceCredentialsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSourceCredentialsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSourceCredentialsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSourceCredentialsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSourceCredentialsOutputError>
}

extension DeleteSourceCredentialsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSourceCredentialsInput(arn: \(Swift.String(describing: arn)))"}
}

extension DeleteSourceCredentialsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
    }
}

public struct DeleteSourceCredentialsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSourceCredentialsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSourceCredentialsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSourceCredentialsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSourceCredentialsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSourceCredentialsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSourceCredentialsOutputError>
}

public struct DeleteSourceCredentialsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSourceCredentialsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSourceCredentialsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSourceCredentialsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSourceCredentialsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSourceCredentialsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSourceCredentialsOutputError>
}

public struct DeleteSourceCredentialsInput: Swift.Equatable {
    /// <p> The Amazon Resource Name (ARN) of the token.</p>
    public let arn: Swift.String?

    public init (
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

struct DeleteSourceCredentialsInputBody: Swift.Equatable {
    public let arn: Swift.String?
}

extension DeleteSourceCredentialsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension DeleteSourceCredentialsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSourceCredentialsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSourceCredentialsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSourceCredentialsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSourceCredentialsOutputResponse(arn: \(Swift.String(describing: arn)))"}
}

extension DeleteSourceCredentialsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteSourceCredentialsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
        } else {
            self.arn = nil
        }
    }
}

public struct DeleteSourceCredentialsOutputResponse: Swift.Equatable {
    /// <p> The Amazon Resource Name (ARN) of the token. </p>
    public let arn: Swift.String?

    public init (
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

struct DeleteSourceCredentialsOutputResponseBody: Swift.Equatable {
    public let arn: Swift.String?
}

extension DeleteSourceCredentialsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

public struct DeleteWebhookInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteWebhookInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteWebhookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteWebhookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteWebhookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteWebhookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteWebhookOutputError>
}

extension DeleteWebhookInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteWebhookInput(projectName: \(Swift.String(describing: projectName)))"}
}

extension DeleteWebhookInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
    }
}

public struct DeleteWebhookInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteWebhookInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteWebhookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteWebhookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteWebhookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteWebhookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteWebhookOutputError>
}

public struct DeleteWebhookInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteWebhookInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteWebhookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteWebhookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteWebhookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteWebhookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteWebhookOutputError>
}

public struct DeleteWebhookInput: Swift.Equatable {
    /// <p>The name of the AWS CodeBuild project.</p>
    public let projectName: Swift.String?

    public init (
        projectName: Swift.String? = nil
    )
    {
        self.projectName = projectName
    }
}

struct DeleteWebhookInputBody: Swift.Equatable {
    public let projectName: Swift.String?
}

extension DeleteWebhookInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
    }
}

extension DeleteWebhookOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteWebhookOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OAuthProviderException" : self = .oAuthProviderException(try OAuthProviderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteWebhookOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case oAuthProviderException(OAuthProviderException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteWebhookOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteWebhookOutputResponse()"}
}

extension DeleteWebhookOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteWebhookOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteWebhookOutputResponseBody: Swift.Equatable {
}

extension DeleteWebhookOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DescribeCodeCoveragesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCodeCoveragesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCodeCoveragesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCodeCoveragesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCodeCoveragesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCodeCoveragesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCodeCoveragesOutputError>
}

extension DescribeCodeCoveragesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeCodeCoveragesInput(maxLineCoveragePercentage: \(Swift.String(describing: maxLineCoveragePercentage)), maxResults: \(Swift.String(describing: maxResults)), minLineCoveragePercentage: \(Swift.String(describing: minLineCoveragePercentage)), nextToken: \(Swift.String(describing: nextToken)), reportArn: \(Swift.String(describing: reportArn)), sortBy: \(Swift.String(describing: sortBy)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension DescribeCodeCoveragesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxLineCoveragePercentage
        case maxResults
        case minLineCoveragePercentage
        case nextToken
        case reportArn
        case sortBy
        case sortOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxLineCoveragePercentage = maxLineCoveragePercentage {
            try encodeContainer.encode(maxLineCoveragePercentage, forKey: .maxLineCoveragePercentage)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let minLineCoveragePercentage = minLineCoveragePercentage {
            try encodeContainer.encode(minLineCoveragePercentage, forKey: .minLineCoveragePercentage)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let reportArn = reportArn {
            try encodeContainer.encode(reportArn, forKey: .reportArn)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct DescribeCodeCoveragesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCodeCoveragesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCodeCoveragesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCodeCoveragesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCodeCoveragesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCodeCoveragesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCodeCoveragesOutputError>
}

public struct DescribeCodeCoveragesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCodeCoveragesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCodeCoveragesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCodeCoveragesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCodeCoveragesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCodeCoveragesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCodeCoveragesOutputError>
}

public struct DescribeCodeCoveragesInput: Swift.Equatable {
    /// <p>The maximum line coverage percentage to report.</p>
    public let maxLineCoveragePercentage: Swift.Double?
    /// <p>The maximum number of results to return.</p>
    public let maxResults: Swift.Int?
    /// <p>The minimum line coverage percentage to report.</p>
    public let minLineCoveragePercentage: Swift.Double?
    /// <p>The <code>nextToken</code> value returned from a previous call to
    ///                 <code>DescribeCodeCoverages</code>. This specifies the next item to return. To
    ///             return the beginning of the list, exclude this parameter.</p>
    public let nextToken: Swift.String?
    /// <p>
    ///       The ARN of the report for which test cases are returned.
    ///     </p>
    public let reportArn: Swift.String?
    /// <p>Specifies how the results are sorted. Possible values are:</p>
    ///         <dl>
    ///             <dt>FILE_PATH</dt>
    ///             <dd>
    ///                     <p>The results are sorted by file path.</p>
    ///                 </dd>
    ///             <dt>LINE_COVERAGE_PERCENTAGE</dt>
    ///             <dd>
    ///                     <p>The results are sorted by the percentage of lines that are covered.</p>
    ///                 </dd>
    ///          </dl>
    public let sortBy: CodeBuildClientTypes.ReportCodeCoverageSortByType?
    /// <p>Specifies if the results are sorted in ascending or descending order.</p>
    public let sortOrder: CodeBuildClientTypes.SortOrderType?

    public init (
        maxLineCoveragePercentage: Swift.Double? = nil,
        maxResults: Swift.Int? = nil,
        minLineCoveragePercentage: Swift.Double? = nil,
        nextToken: Swift.String? = nil,
        reportArn: Swift.String? = nil,
        sortBy: CodeBuildClientTypes.ReportCodeCoverageSortByType? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.maxLineCoveragePercentage = maxLineCoveragePercentage
        self.maxResults = maxResults
        self.minLineCoveragePercentage = minLineCoveragePercentage
        self.nextToken = nextToken
        self.reportArn = reportArn
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct DescribeCodeCoveragesInputBody: Swift.Equatable {
    public let reportArn: Swift.String?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
    public let sortOrder: CodeBuildClientTypes.SortOrderType?
    public let sortBy: CodeBuildClientTypes.ReportCodeCoverageSortByType?
    public let minLineCoveragePercentage: Swift.Double?
    public let maxLineCoveragePercentage: Swift.Double?
}

extension DescribeCodeCoveragesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxLineCoveragePercentage
        case maxResults
        case minLineCoveragePercentage
        case nextToken
        case reportArn
        case sortBy
        case sortOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportArn)
        reportArn = reportArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SortOrderType.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportCodeCoverageSortByType.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let minLineCoveragePercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .minLineCoveragePercentage)
        minLineCoveragePercentage = minLineCoveragePercentageDecoded
        let maxLineCoveragePercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxLineCoveragePercentage)
        maxLineCoveragePercentage = maxLineCoveragePercentageDecoded
    }
}

extension DescribeCodeCoveragesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeCodeCoveragesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCodeCoveragesOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCodeCoveragesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeCodeCoveragesOutputResponse(codeCoverages: \(Swift.String(describing: codeCoverages)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeCodeCoveragesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeCodeCoveragesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.codeCoverages = output.codeCoverages
            self.nextToken = output.nextToken
        } else {
            self.codeCoverages = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeCodeCoveragesOutputResponse: Swift.Equatable {
    /// <p>An array of <code>CodeCoverage</code> objects that contain the results.</p>
    public let codeCoverages: [CodeBuildClientTypes.CodeCoverage]?
    /// <p>If there are more items to return, this contains a token that is passed to a subsequent
    ///             call to <code>DescribeCodeCoverages</code> to retrieve the next set of items.</p>
    public let nextToken: Swift.String?

    public init (
        codeCoverages: [CodeBuildClientTypes.CodeCoverage]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.codeCoverages = codeCoverages
        self.nextToken = nextToken
    }
}

struct DescribeCodeCoveragesOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let codeCoverages: [CodeBuildClientTypes.CodeCoverage]?
}

extension DescribeCodeCoveragesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeCoverages
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let codeCoveragesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.CodeCoverage?].self, forKey: .codeCoverages)
        var codeCoveragesDecoded0:[CodeBuildClientTypes.CodeCoverage]? = nil
        if let codeCoveragesContainer = codeCoveragesContainer {
            codeCoveragesDecoded0 = [CodeBuildClientTypes.CodeCoverage]()
            for structure0 in codeCoveragesContainer {
                if let structure0 = structure0 {
                    codeCoveragesDecoded0?.append(structure0)
                }
            }
        }
        codeCoverages = codeCoveragesDecoded0
    }
}

public struct DescribeTestCasesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTestCasesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTestCasesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTestCasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTestCasesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTestCasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTestCasesOutputError>
}

extension DescribeTestCasesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTestCasesInput(filter: \(Swift.String(describing: filter)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), reportArn: \(Swift.String(describing: reportArn)))"}
}

extension DescribeTestCasesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter
        case maxResults
        case nextToken
        case reportArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let reportArn = reportArn {
            try encodeContainer.encode(reportArn, forKey: .reportArn)
        }
    }
}

public struct DescribeTestCasesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTestCasesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTestCasesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTestCasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTestCasesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTestCasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTestCasesOutputError>
}

public struct DescribeTestCasesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTestCasesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTestCasesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTestCasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTestCasesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTestCasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTestCasesOutputError>
}

public struct DescribeTestCasesInput: Swift.Equatable {
    /// <p>
    ///       A <code>TestCaseFilter</code> object used to filter the returned reports.
    ///     </p>
    public let filter: CodeBuildClientTypes.TestCaseFilter?
    /// <p>
    ///       The maximum number of paginated test cases returned per response. Use <code>nextToken</code> to iterate pages in
    ///       the list of returned <code>TestCase</code> objects. The default value is 100.
    ///     </p>
    public let maxResults: Swift.Int?
    /// <p>
    ///       During a previous call, the maximum number of items that can be returned is the value specified in
    ///       <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i>
    ///       is returned. To get the next batch of items in the list, call this operation again, adding the next token
    ///       to the call. To get all of the items in the list, keep calling this operation with each
    ///       subsequent next token that is returned, until no more next tokens are returned.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>
    ///       The ARN of the report for which test cases are returned.
    ///     </p>
    public let reportArn: Swift.String?

    public init (
        filter: CodeBuildClientTypes.TestCaseFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        reportArn: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reportArn = reportArn
    }
}

struct DescribeTestCasesInputBody: Swift.Equatable {
    public let reportArn: Swift.String?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
    public let filter: CodeBuildClientTypes.TestCaseFilter?
}

extension DescribeTestCasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter
        case maxResults
        case nextToken
        case reportArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportArn)
        reportArn = reportArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filterDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.TestCaseFilter.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension DescribeTestCasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTestCasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTestCasesOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTestCasesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTestCasesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), testCases: \(Swift.String(describing: testCases)))"}
}

extension DescribeTestCasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeTestCasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.testCases = output.testCases
        } else {
            self.nextToken = nil
            self.testCases = nil
        }
    }
}

public struct DescribeTestCasesOutputResponse: Swift.Equatable {
    /// <p>
    ///       During a previous call, the maximum number of items that can be returned is the value specified in
    ///       <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i>
    ///       is returned. To get the next batch of items in the list, call this operation again, adding the next token
    ///       to the call. To get all of the items in the list, keep calling this operation with each
    ///       subsequent next token that is returned, until no more next tokens are returned.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>
    ///       The returned list of test cases.
    ///     </p>
    public let testCases: [CodeBuildClientTypes.TestCase]?

    public init (
        nextToken: Swift.String? = nil,
        testCases: [CodeBuildClientTypes.TestCase]? = nil
    )
    {
        self.nextToken = nextToken
        self.testCases = testCases
    }
}

struct DescribeTestCasesOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let testCases: [CodeBuildClientTypes.TestCase]?
}

extension DescribeTestCasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case testCases
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let testCasesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.TestCase?].self, forKey: .testCases)
        var testCasesDecoded0:[CodeBuildClientTypes.TestCase]? = nil
        if let testCasesContainer = testCasesContainer {
            testCasesDecoded0 = [CodeBuildClientTypes.TestCase]()
            for structure0 in testCasesContainer {
                if let structure0 = structure0 {
                    testCasesDecoded0?.append(structure0)
                }
            }
        }
        testCases = testCasesDecoded0
    }
}

extension CodeBuildClientTypes.EnvironmentImage: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case name
        case versions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let versions = versions {
            var versionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .versions)
            for imageversions0 in versions {
                try versionsContainer.encode(imageversions0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let versionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .versions)
        var versionsDecoded0:[Swift.String]? = nil
        if let versionsContainer = versionsContainer {
            versionsDecoded0 = [Swift.String]()
            for string0 in versionsContainer {
                if let string0 = string0 {
                    versionsDecoded0?.append(string0)
                }
            }
        }
        versions = versionsDecoded0
    }
}

extension CodeBuildClientTypes.EnvironmentImage: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnvironmentImage(description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), versions: \(Swift.String(describing: versions)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about a Docker image that is managed by AWS CodeBuild.</p>
    public struct EnvironmentImage: Swift.Equatable {
        /// <p>The description of the Docker image.</p>
        public let description: Swift.String?
        /// <p>The name of the Docker image.</p>
        public let name: Swift.String?
        /// <p>A list of environment image versions.</p>
        public let versions: [Swift.String]?

        public init (
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            versions: [Swift.String]? = nil
        )
        {
            self.description = description
            self.name = name
            self.versions = versions
        }
    }

}

extension CodeBuildClientTypes.EnvironmentLanguage: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case images
        case language
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let images = images {
            var imagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .images)
            for environmentimages0 in images {
                try imagesContainer.encode(environmentimages0)
            }
        }
        if let language = language {
            try encodeContainer.encode(language.rawValue, forKey: .language)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.LanguageType.self, forKey: .language)
        language = languageDecoded
        let imagesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.EnvironmentImage?].self, forKey: .images)
        var imagesDecoded0:[CodeBuildClientTypes.EnvironmentImage]? = nil
        if let imagesContainer = imagesContainer {
            imagesDecoded0 = [CodeBuildClientTypes.EnvironmentImage]()
            for structure0 in imagesContainer {
                if let structure0 = structure0 {
                    imagesDecoded0?.append(structure0)
                }
            }
        }
        images = imagesDecoded0
    }
}

extension CodeBuildClientTypes.EnvironmentLanguage: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnvironmentLanguage(images: \(Swift.String(describing: images)), language: \(Swift.String(describing: language)))"}
}

extension CodeBuildClientTypes {
    /// <p>A set of Docker images that are related by programming language and are managed by
    ///             AWS CodeBuild.</p>
    public struct EnvironmentLanguage: Swift.Equatable {
        /// <p>The list of Docker images that are related by the specified programming
        ///             language.</p>
        public let images: [CodeBuildClientTypes.EnvironmentImage]?
        /// <p>The programming language for the Docker images.</p>
        public let language: CodeBuildClientTypes.LanguageType?

        public init (
            images: [CodeBuildClientTypes.EnvironmentImage]? = nil,
            language: CodeBuildClientTypes.LanguageType? = nil
        )
        {
            self.images = images
            self.language = language
        }
    }

}

extension CodeBuildClientTypes.EnvironmentPlatform: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languages
        case platform
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languages = languages {
            var languagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .languages)
            for environmentlanguages0 in languages {
                try languagesContainer.encode(environmentlanguages0)
            }
        }
        if let platform = platform {
            try encodeContainer.encode(platform.rawValue, forKey: .platform)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.PlatformType.self, forKey: .platform)
        platform = platformDecoded
        let languagesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.EnvironmentLanguage?].self, forKey: .languages)
        var languagesDecoded0:[CodeBuildClientTypes.EnvironmentLanguage]? = nil
        if let languagesContainer = languagesContainer {
            languagesDecoded0 = [CodeBuildClientTypes.EnvironmentLanguage]()
            for structure0 in languagesContainer {
                if let structure0 = structure0 {
                    languagesDecoded0?.append(structure0)
                }
            }
        }
        languages = languagesDecoded0
    }
}

extension CodeBuildClientTypes.EnvironmentPlatform: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnvironmentPlatform(languages: \(Swift.String(describing: languages)), platform: \(Swift.String(describing: platform)))"}
}

extension CodeBuildClientTypes {
    /// <p>A set of Docker images that are related by platform and are managed by AWS CodeBuild.</p>
    public struct EnvironmentPlatform: Swift.Equatable {
        /// <p>The list of programming languages that are available for the specified
        ///             platform.</p>
        public let languages: [CodeBuildClientTypes.EnvironmentLanguage]?
        /// <p>The platform's name.</p>
        public let platform: CodeBuildClientTypes.PlatformType?

        public init (
            languages: [CodeBuildClientTypes.EnvironmentLanguage]? = nil,
            platform: CodeBuildClientTypes.PlatformType? = nil
        )
        {
            self.languages = languages
            self.platform = platform
        }
    }

}

extension CodeBuildClientTypes {
    public enum EnvironmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case armContainer
        case linuxContainer
        case linuxGpuContainer
        case windowsContainer
        case windowsServer2019Container
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentType] {
            return [
                .armContainer,
                .linuxContainer,
                .linuxGpuContainer,
                .windowsContainer,
                .windowsServer2019Container,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .armContainer: return "ARM_CONTAINER"
            case .linuxContainer: return "LINUX_CONTAINER"
            case .linuxGpuContainer: return "LINUX_GPU_CONTAINER"
            case .windowsContainer: return "WINDOWS_CONTAINER"
            case .windowsServer2019Container: return "WINDOWS_SERVER_2019_CONTAINER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EnvironmentType(rawValue: rawValue) ?? EnvironmentType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.EnvironmentVariable: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case type
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.EnvironmentVariableType.self, forKey: .type)
        type = typeDecoded
    }
}

extension CodeBuildClientTypes.EnvironmentVariable: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnvironmentVariable(name: \(Swift.String(describing: name)), type: \(Swift.String(describing: type)), value: \(Swift.String(describing: value)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about an environment variable for a build project or a build.</p>
    public struct EnvironmentVariable: Swift.Equatable {
        /// <p>The name or key of the environment variable.</p>
        public let name: Swift.String?
        /// <p>The type of environment variable. Valid values include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>PARAMETER_STORE</code>: An environment variable stored in Amazon EC2 Systems Manager
        ///                     Parameter Store. To learn how to specify a parameter store environment variable,
        ///                     see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec.env.parameter-store">env/parameter-store</a> in the
        ///                     <i>AWS CodeBuild User Guide</i>.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>PLAINTEXT</code>: An environment variable in plain text format. This is
        ///                     the default value.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>SECRETS_MANAGER</code>: An environment variable stored in AWS Secrets
        ///                     Manager. To learn how to specify a secrets manager environment variable, see
        ///                         <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec.env.secrets-manager">env/secrets-manager</a> in the
        ///                     <i>AWS CodeBuild User Guide</i>.</p>
        ///             </li>
        ///          </ul>
        public let type: CodeBuildClientTypes.EnvironmentVariableType?
        /// <p>The value of the environment variable.</p>
        ///         <important>
        ///             <p>We strongly discourage the use of <code>PLAINTEXT</code> environment variables to
        ///                 store sensitive values, especially AWS secret key IDs and secret access keys.
        ///                     <code>PLAINTEXT</code> environment variables can be displayed in plain text
        ///                 using the AWS CodeBuild console and the AWS Command Line Interface (AWS CLI). For sensitive values, we recommend you use an
        ///                 environment variable of type <code>PARAMETER_STORE</code> or
        ///                     <code>SECRETS_MANAGER</code>. </p>
        ///         </important>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            type: CodeBuildClientTypes.EnvironmentVariableType? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
            self.value = value
        }
    }

}

extension CodeBuildClientTypes {
    public enum EnvironmentVariableType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case parameterStore
        case plaintext
        case secretsManager
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentVariableType] {
            return [
                .parameterStore,
                .plaintext,
                .secretsManager,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .parameterStore: return "PARAMETER_STORE"
            case .plaintext: return "PLAINTEXT"
            case .secretsManager: return "SECRETS_MANAGER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EnvironmentVariableType(rawValue: rawValue) ?? EnvironmentVariableType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.ExportedEnvironmentVariable: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CodeBuildClientTypes.ExportedEnvironmentVariable: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportedEnvironmentVariable(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension CodeBuildClientTypes {
    /// <p>Contains information about an exported environment variable. </p>
    ///         <p>Exported environment variables are used in conjunction with AWS CodePipeline to export
    ///   environment variables from the current build stage to subsequent stages in the pipeline.
    ///   For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-variables.html">Working with variables</a> in the <i>AWS CodePipeline User Guide</i>.</p>
    ///         <note>
    ///             <p> During a build, the value of a variable is available starting with the
    ///                   <code>install</code> phase. It can be updated between the start of the
    ///                   <code>install</code> phase and the end of the <code>post_build</code> phase.
    ///               After the <code>post_build</code> phase ends, the value of exported variables cannot
    ///               change.</p>
    ///          </note>
    public struct ExportedEnvironmentVariable: Swift.Equatable {
        /// <p>The name of the exported environment variable.</p>
        public let name: Swift.String?
        /// <p>The value assigned to the exported environment variable.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension CodeBuildClientTypes {
    public enum FileSystemType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case efs
        case sdkUnknown(Swift.String)

        public static var allCases: [FileSystemType] {
            return [
                .efs,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .efs: return "EFS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileSystemType(rawValue: rawValue) ?? FileSystemType.sdkUnknown(rawValue)
        }
    }
}

public struct GetReportGroupTrendInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetReportGroupTrendInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetReportGroupTrendInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetReportGroupTrendOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetReportGroupTrendInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetReportGroupTrendOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetReportGroupTrendOutputError>
}

extension GetReportGroupTrendInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetReportGroupTrendInput(numOfReports: \(Swift.String(describing: numOfReports)), reportGroupArn: \(Swift.String(describing: reportGroupArn)), trendField: \(Swift.String(describing: trendField)))"}
}

extension GetReportGroupTrendInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numOfReports
        case reportGroupArn
        case trendField
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let numOfReports = numOfReports {
            try encodeContainer.encode(numOfReports, forKey: .numOfReports)
        }
        if let reportGroupArn = reportGroupArn {
            try encodeContainer.encode(reportGroupArn, forKey: .reportGroupArn)
        }
        if let trendField = trendField {
            try encodeContainer.encode(trendField.rawValue, forKey: .trendField)
        }
    }
}

public struct GetReportGroupTrendInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetReportGroupTrendInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetReportGroupTrendInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetReportGroupTrendOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetReportGroupTrendInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetReportGroupTrendOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetReportGroupTrendOutputError>
}

public struct GetReportGroupTrendInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetReportGroupTrendInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetReportGroupTrendInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetReportGroupTrendOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetReportGroupTrendInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetReportGroupTrendOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetReportGroupTrendOutputError>
}

public struct GetReportGroupTrendInput: Swift.Equatable {
    /// <p>The number of reports to analyze. This operation always retrieves the most recent
    ///             reports.</p>
    ///         <p>If this parameter is omitted, the most recent 100 reports are analyzed.</p>
    public let numOfReports: Swift.Int?
    /// <p>The ARN of the report group that contains the reports to analyze.</p>
    public let reportGroupArn: Swift.String?
    /// <p>The test report value to accumulate. This must be one of the following values:</p>
    ///          <dl>
    ///             <dt>Test reports:</dt>
    ///             <dd>
    ///                     <dl>
    ///                   <dt>DURATION</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the test run times for the specified
    ///                                     reports.</p>
    ///                             </dd>
    ///                   <dt>PASS_RATE</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the percentage of tests that passed for the
    ///                                     specified test reports.</p>
    ///                             </dd>
    ///                   <dt>TOTAL</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the total number of tests for the specified test
    ///                                     reports.</p>
    ///                             </dd>
    ///                </dl>
    ///                 </dd>
    ///          </dl>
    ///          <dl>
    ///             <dt>Code coverage reports:</dt>
    ///             <dd>
    ///                     <dl>
    ///                   <dt>BRANCH_COVERAGE</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the branch coverage percentages for the specified
    ///                                     test reports.</p>
    ///                             </dd>
    ///                   <dt>BRANCHES_COVERED</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the branches covered values for the specified test
    ///                                     reports.</p>
    ///                             </dd>
    ///                   <dt>BRANCHES_MISSED</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the branches missed values for the specified test
    ///                                     reports.</p>
    ///                             </dd>
    ///                   <dt>LINE_COVERAGE</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the line coverage percentages for the specified
    ///                                     test reports.</p>
    ///                             </dd>
    ///                   <dt>LINES_COVERED</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the lines covered values for the specified test
    ///                                     reports.</p>
    ///                             </dd>
    ///                   <dt>LINES_MISSED</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the lines not covered values for the specified test
    ///                                     reports.</p>
    ///                             </dd>
    ///                </dl>
    ///                 </dd>
    ///          </dl>
    public let trendField: CodeBuildClientTypes.ReportGroupTrendFieldType?

    public init (
        numOfReports: Swift.Int? = nil,
        reportGroupArn: Swift.String? = nil,
        trendField: CodeBuildClientTypes.ReportGroupTrendFieldType? = nil
    )
    {
        self.numOfReports = numOfReports
        self.reportGroupArn = reportGroupArn
        self.trendField = trendField
    }
}

struct GetReportGroupTrendInputBody: Swift.Equatable {
    public let reportGroupArn: Swift.String?
    public let numOfReports: Swift.Int?
    public let trendField: CodeBuildClientTypes.ReportGroupTrendFieldType?
}

extension GetReportGroupTrendInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numOfReports
        case reportGroupArn
        case trendField
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportGroupArn)
        reportGroupArn = reportGroupArnDecoded
        let numOfReportsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numOfReports)
        numOfReports = numOfReportsDecoded
        let trendFieldDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportGroupTrendFieldType.self, forKey: .trendField)
        trendField = trendFieldDecoded
    }
}

extension GetReportGroupTrendOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetReportGroupTrendOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetReportGroupTrendOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetReportGroupTrendOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetReportGroupTrendOutputResponse(rawData: \(Swift.String(describing: rawData)), stats: \(Swift.String(describing: stats)))"}
}

extension GetReportGroupTrendOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetReportGroupTrendOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.rawData = output.rawData
            self.stats = output.stats
        } else {
            self.rawData = nil
            self.stats = nil
        }
    }
}

public struct GetReportGroupTrendOutputResponse: Swift.Equatable {
    /// <p>An array that contains the raw data for each report.</p>
    public let rawData: [CodeBuildClientTypes.ReportWithRawData]?
    /// <p>Contains the accumulated trend data.</p>
    public let stats: CodeBuildClientTypes.ReportGroupTrendStats?

    public init (
        rawData: [CodeBuildClientTypes.ReportWithRawData]? = nil,
        stats: CodeBuildClientTypes.ReportGroupTrendStats? = nil
    )
    {
        self.rawData = rawData
        self.stats = stats
    }
}

struct GetReportGroupTrendOutputResponseBody: Swift.Equatable {
    public let stats: CodeBuildClientTypes.ReportGroupTrendStats?
    public let rawData: [CodeBuildClientTypes.ReportWithRawData]?
}

extension GetReportGroupTrendOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rawData
        case stats
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statsDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportGroupTrendStats.self, forKey: .stats)
        stats = statsDecoded
        let rawDataContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ReportWithRawData?].self, forKey: .rawData)
        var rawDataDecoded0:[CodeBuildClientTypes.ReportWithRawData]? = nil
        if let rawDataContainer = rawDataContainer {
            rawDataDecoded0 = [CodeBuildClientTypes.ReportWithRawData]()
            for structure0 in rawDataContainer {
                if let structure0 = structure0 {
                    rawDataDecoded0?.append(structure0)
                }
            }
        }
        rawData = rawDataDecoded0
    }
}

public struct GetResourcePolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetResourcePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetResourcePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetResourcePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetResourcePolicyOutputError>
}

extension GetResourcePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetResourcePolicyInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension GetResourcePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct GetResourcePolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetResourcePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetResourcePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetResourcePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetResourcePolicyOutputError>
}

public struct GetResourcePolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetResourcePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetResourcePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetResourcePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetResourcePolicyOutputError>
}

public struct GetResourcePolicyInput: Swift.Equatable {
    /// <p> The ARN of the resource that is associated with the resource policy. </p>
    public let resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct GetResourcePolicyInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
}

extension GetResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension GetResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetResourcePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetResourcePolicyOutputResponse(policy: \(Swift.String(describing: policy)))"}
}

extension GetResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetResourcePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct GetResourcePolicyOutputResponse: Swift.Equatable {
    /// <p> The resource policy for the resource identified by the input ARN parameter. </p>
    public let policy: Swift.String?

    public init (
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

struct GetResourcePolicyOutputResponseBody: Swift.Equatable {
    public let policy: Swift.String?
}

extension GetResourcePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension CodeBuildClientTypes.GitSubmodulesConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fetchSubmodules
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fetchSubmodules = fetchSubmodules {
            try encodeContainer.encode(fetchSubmodules, forKey: .fetchSubmodules)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fetchSubmodulesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .fetchSubmodules)
        fetchSubmodules = fetchSubmodulesDecoded
    }
}

extension CodeBuildClientTypes.GitSubmodulesConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GitSubmodulesConfig(fetchSubmodules: \(Swift.String(describing: fetchSubmodules)))"}
}

extension CodeBuildClientTypes {
    /// <p> Information about the Git submodules configuration for an AWS CodeBuild build project.
    ///         </p>
    public struct GitSubmodulesConfig: Swift.Equatable {
        /// <p> Set to true to fetch Git submodules for your AWS CodeBuild build project. </p>
        public let fetchSubmodules: Swift.Bool?

        public init (
            fetchSubmodules: Swift.Bool? = nil
        )
        {
            self.fetchSubmodules = fetchSubmodules
        }
    }

}

extension CodeBuildClientTypes {
    public enum ImagePullCredentialsType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case codebuild
        case serviceRole
        case sdkUnknown(Swift.String)

        public static var allCases: [ImagePullCredentialsType] {
            return [
                .codebuild,
                .serviceRole,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .codebuild: return "CODEBUILD"
            case .serviceRole: return "SERVICE_ROLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ImagePullCredentialsType(rawValue: rawValue) ?? ImagePullCredentialsType.sdkUnknown(rawValue)
        }
    }
}

public struct ImportSourceCredentialsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ImportSourceCredentialsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ImportSourceCredentialsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ImportSourceCredentialsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ImportSourceCredentialsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ImportSourceCredentialsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ImportSourceCredentialsOutputError>
}

extension ImportSourceCredentialsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportSourceCredentialsInput(authType: \(Swift.String(describing: authType)), serverType: \(Swift.String(describing: serverType)), shouldOverwrite: \(Swift.String(describing: shouldOverwrite)), token: \(Swift.String(describing: token)), username: \(Swift.String(describing: username)))"}
}

extension ImportSourceCredentialsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authType
        case serverType
        case shouldOverwrite
        case token
        case username
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authType = authType {
            try encodeContainer.encode(authType.rawValue, forKey: .authType)
        }
        if let serverType = serverType {
            try encodeContainer.encode(serverType.rawValue, forKey: .serverType)
        }
        if let shouldOverwrite = shouldOverwrite {
            try encodeContainer.encode(shouldOverwrite, forKey: .shouldOverwrite)
        }
        if let token = token {
            try encodeContainer.encode(token, forKey: .token)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}

public struct ImportSourceCredentialsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ImportSourceCredentialsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ImportSourceCredentialsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ImportSourceCredentialsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ImportSourceCredentialsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ImportSourceCredentialsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ImportSourceCredentialsOutputError>
}

public struct ImportSourceCredentialsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ImportSourceCredentialsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ImportSourceCredentialsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ImportSourceCredentialsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ImportSourceCredentialsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ImportSourceCredentialsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ImportSourceCredentialsOutputError>
}

public struct ImportSourceCredentialsInput: Swift.Equatable {
    /// <p> The type of authentication used to connect to a GitHub, GitHub Enterprise, or
    ///             Bitbucket repository. An OAUTH connection is not supported by the API and must be
    ///             created using the AWS CodeBuild console. </p>
    public let authType: CodeBuildClientTypes.AuthType?
    /// <p> The source provider used for this project. </p>
    public let serverType: CodeBuildClientTypes.ServerType?
    /// <p> Set to <code>false</code> to prevent overwriting the repository source credentials.
    ///             Set to <code>true</code> to overwrite the repository source credentials. The default
    ///             value is <code>true</code>. </p>
    public let shouldOverwrite: Swift.Bool?
    /// <p> For GitHub or GitHub Enterprise, this is the personal access token. For Bitbucket,
    ///             this is the app password. </p>
    public let token: Swift.String?
    /// <p> The Bitbucket username when the <code>authType</code> is BASIC_AUTH. This parameter
    ///             is not valid for other types of source providers or connections. </p>
    public let username: Swift.String?

    public init (
        authType: CodeBuildClientTypes.AuthType? = nil,
        serverType: CodeBuildClientTypes.ServerType? = nil,
        shouldOverwrite: Swift.Bool? = nil,
        token: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.authType = authType
        self.serverType = serverType
        self.shouldOverwrite = shouldOverwrite
        self.token = token
        self.username = username
    }
}

struct ImportSourceCredentialsInputBody: Swift.Equatable {
    public let username: Swift.String?
    public let token: Swift.String?
    public let serverType: CodeBuildClientTypes.ServerType?
    public let authType: CodeBuildClientTypes.AuthType?
    public let shouldOverwrite: Swift.Bool?
}

extension ImportSourceCredentialsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authType
        case serverType
        case shouldOverwrite
        case token
        case username
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let tokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .token)
        token = tokenDecoded
        let serverTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ServerType.self, forKey: .serverType)
        serverType = serverTypeDecoded
        let authTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.AuthType.self, forKey: .authType)
        authType = authTypeDecoded
        let shouldOverwriteDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .shouldOverwrite)
        shouldOverwrite = shouldOverwriteDecoded
    }
}

extension ImportSourceCredentialsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ImportSourceCredentialsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountLimitExceededException" : self = .accountLimitExceededException(try AccountLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ImportSourceCredentialsOutputError: Swift.Error, Swift.Equatable {
    case accountLimitExceededException(AccountLimitExceededException)
    case invalidInputException(InvalidInputException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ImportSourceCredentialsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportSourceCredentialsOutputResponse(arn: \(Swift.String(describing: arn)))"}
}

extension ImportSourceCredentialsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ImportSourceCredentialsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
        } else {
            self.arn = nil
        }
    }
}

public struct ImportSourceCredentialsOutputResponse: Swift.Equatable {
    /// <p> The Amazon Resource Name (ARN) of the token. </p>
    public let arn: Swift.String?

    public init (
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

struct ImportSourceCredentialsOutputResponseBody: Swift.Equatable {
    public let arn: Swift.String?
}

extension ImportSourceCredentialsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension InvalidInputException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidInputException(message: \(Swift.String(describing: message)))"}
}

extension InvalidInputException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidInputExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The input value that was provided is not valid.</p>
public struct InvalidInputException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidInputExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidInputExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct InvalidateProjectCacheInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "InvalidateProjectCacheInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<InvalidateProjectCacheInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<InvalidateProjectCacheOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<InvalidateProjectCacheInput>
    public typealias MOutput = ClientRuntime.OperationOutput<InvalidateProjectCacheOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<InvalidateProjectCacheOutputError>
}

extension InvalidateProjectCacheInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidateProjectCacheInput(projectName: \(Swift.String(describing: projectName)))"}
}

extension InvalidateProjectCacheInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
    }
}

public struct InvalidateProjectCacheInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "InvalidateProjectCacheInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<InvalidateProjectCacheInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<InvalidateProjectCacheOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<InvalidateProjectCacheInput>
    public typealias MOutput = ClientRuntime.OperationOutput<InvalidateProjectCacheOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<InvalidateProjectCacheOutputError>
}

public struct InvalidateProjectCacheInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "InvalidateProjectCacheInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<InvalidateProjectCacheInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<InvalidateProjectCacheOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<InvalidateProjectCacheInput>
    public typealias MOutput = ClientRuntime.OperationOutput<InvalidateProjectCacheOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<InvalidateProjectCacheOutputError>
}

public struct InvalidateProjectCacheInput: Swift.Equatable {
    /// <p>The name of the AWS CodeBuild build project that the cache is reset for.</p>
    public let projectName: Swift.String?

    public init (
        projectName: Swift.String? = nil
    )
    {
        self.projectName = projectName
    }
}

struct InvalidateProjectCacheInputBody: Swift.Equatable {
    public let projectName: Swift.String?
}

extension InvalidateProjectCacheInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
    }
}

extension InvalidateProjectCacheOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension InvalidateProjectCacheOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum InvalidateProjectCacheOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension InvalidateProjectCacheOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidateProjectCacheOutputResponse()"}
}

extension InvalidateProjectCacheOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct InvalidateProjectCacheOutputResponse: Swift.Equatable {

    public init() {}
}

struct InvalidateProjectCacheOutputResponseBody: Swift.Equatable {
}

extension InvalidateProjectCacheOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CodeBuildClientTypes {
    public enum LanguageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case android
        case base
        case docker
        case dotnet
        case golang
        case java
        case nodeJs
        case php
        case python
        case ruby
        case sdkUnknown(Swift.String)

        public static var allCases: [LanguageType] {
            return [
                .android,
                .base,
                .docker,
                .dotnet,
                .golang,
                .java,
                .nodeJs,
                .php,
                .python,
                .ruby,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .android: return "ANDROID"
            case .base: return "BASE"
            case .docker: return "DOCKER"
            case .dotnet: return "DOTNET"
            case .golang: return "GOLANG"
            case .java: return "JAVA"
            case .nodeJs: return "NODE_JS"
            case .php: return "PHP"
            case .python: return "PYTHON"
            case .ruby: return "RUBY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LanguageType(rawValue: rawValue) ?? LanguageType.sdkUnknown(rawValue)
        }
    }
}

public struct ListBuildBatchesForProjectInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBuildBatchesForProjectInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBuildBatchesForProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBuildBatchesForProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBuildBatchesForProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBuildBatchesForProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBuildBatchesForProjectOutputError>
}

extension ListBuildBatchesForProjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBuildBatchesForProjectInput(filter: \(Swift.String(describing: filter)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), projectName: \(Swift.String(describing: projectName)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension ListBuildBatchesForProjectInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter
        case maxResults
        case nextToken
        case projectName
        case sortOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct ListBuildBatchesForProjectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBuildBatchesForProjectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBuildBatchesForProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBuildBatchesForProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBuildBatchesForProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBuildBatchesForProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBuildBatchesForProjectOutputError>
}

public struct ListBuildBatchesForProjectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBuildBatchesForProjectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBuildBatchesForProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBuildBatchesForProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBuildBatchesForProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBuildBatchesForProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBuildBatchesForProjectOutputError>
}

public struct ListBuildBatchesForProjectInput: Swift.Equatable {
    /// <p>A <code>BuildBatchFilter</code> object that specifies the filters for the search.</p>
    public let filter: CodeBuildClientTypes.BuildBatchFilter?
    /// <p>The maximum number of results to return.</p>
    public let maxResults: Swift.Int?
    /// <p>The <code>nextToken</code> value returned from a previous call to
    ///                 <code>ListBuildBatchesForProject</code>. This specifies the next item to return. To return the
    ///             beginning of the list, exclude this parameter.</p>
    public let nextToken: Swift.String?
    /// <p>The name of the project.</p>
    public let projectName: Swift.String?
    /// <p>Specifies the sort order of the returned items. Valid values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>ASCENDING</code>: List the batch build identifiers in ascending order by
    ///                     identifier.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>DESCENDING</code>: List the batch build identifiers in descending order
    ///                     by identifier.</p>
    ///             </li>
    ///          </ul>
    public let sortOrder: CodeBuildClientTypes.SortOrderType?

    public init (
        filter: CodeBuildClientTypes.BuildBatchFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        projectName: Swift.String? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.projectName = projectName
        self.sortOrder = sortOrder
    }
}

struct ListBuildBatchesForProjectInputBody: Swift.Equatable {
    public let projectName: Swift.String?
    public let filter: CodeBuildClientTypes.BuildBatchFilter?
    public let maxResults: Swift.Int?
    public let sortOrder: CodeBuildClientTypes.SortOrderType?
    public let nextToken: Swift.String?
}

extension ListBuildBatchesForProjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter
        case maxResults
        case nextToken
        case projectName
        case sortOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let filterDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BuildBatchFilter.self, forKey: .filter)
        filter = filterDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SortOrderType.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListBuildBatchesForProjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListBuildBatchesForProjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBuildBatchesForProjectOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBuildBatchesForProjectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBuildBatchesForProjectOutputResponse(ids: \(Swift.String(describing: ids)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListBuildBatchesForProjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListBuildBatchesForProjectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ids = output.ids
            self.nextToken = output.nextToken
        } else {
            self.ids = nil
            self.nextToken = nil
        }
    }
}

public struct ListBuildBatchesForProjectOutputResponse: Swift.Equatable {
    /// <p>An array of strings that contains the batch build identifiers.</p>
    public let ids: [Swift.String]?
    /// <p>If there are more items to return, this contains a token that is passed to a
    ///             subsequent call to <code>ListBuildBatchesForProject</code> to retrieve the next set of
    ///             items.</p>
    public let nextToken: Swift.String?

    public init (
        ids: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.ids = ids
        self.nextToken = nextToken
    }
}

struct ListBuildBatchesForProjectOutputResponseBody: Swift.Equatable {
    public let ids: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListBuildBatchesForProjectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ids
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ids)
        var idsDecoded0:[Swift.String]? = nil
        if let idsContainer = idsContainer {
            idsDecoded0 = [Swift.String]()
            for string0 in idsContainer {
                if let string0 = string0 {
                    idsDecoded0?.append(string0)
                }
            }
        }
        ids = idsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListBuildBatchesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBuildBatchesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBuildBatchesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBuildBatchesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBuildBatchesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBuildBatchesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBuildBatchesOutputError>
}

extension ListBuildBatchesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBuildBatchesInput(filter: \(Swift.String(describing: filter)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension ListBuildBatchesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter
        case maxResults
        case nextToken
        case sortOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct ListBuildBatchesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBuildBatchesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBuildBatchesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBuildBatchesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBuildBatchesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBuildBatchesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBuildBatchesOutputError>
}

public struct ListBuildBatchesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBuildBatchesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBuildBatchesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBuildBatchesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBuildBatchesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBuildBatchesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBuildBatchesOutputError>
}

public struct ListBuildBatchesInput: Swift.Equatable {
    /// <p>A <code>BuildBatchFilter</code> object that specifies the filters for the search.</p>
    public let filter: CodeBuildClientTypes.BuildBatchFilter?
    /// <p>The maximum number of results to return.</p>
    public let maxResults: Swift.Int?
    /// <p>The <code>nextToken</code> value returned from a previous call to
    ///                 <code>ListBuildBatches</code>. This specifies the next item to return. To return the
    ///             beginning of the list, exclude this parameter.</p>
    public let nextToken: Swift.String?
    /// <p>Specifies the sort order of the returned items. Valid values include:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ASCENDING</code>: List the batch build identifiers in ascending order by identifier.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DESCENDING</code>: List the batch build identifiers in descending order by identifier.</p>
    ///             </li>
    ///          </ul>
    public let sortOrder: CodeBuildClientTypes.SortOrderType?

    public init (
        filter: CodeBuildClientTypes.BuildBatchFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}

struct ListBuildBatchesInputBody: Swift.Equatable {
    public let filter: CodeBuildClientTypes.BuildBatchFilter?
    public let maxResults: Swift.Int?
    public let sortOrder: CodeBuildClientTypes.SortOrderType?
    public let nextToken: Swift.String?
}

extension ListBuildBatchesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter
        case maxResults
        case nextToken
        case sortOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BuildBatchFilter.self, forKey: .filter)
        filter = filterDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SortOrderType.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListBuildBatchesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListBuildBatchesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBuildBatchesOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBuildBatchesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBuildBatchesOutputResponse(ids: \(Swift.String(describing: ids)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListBuildBatchesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListBuildBatchesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ids = output.ids
            self.nextToken = output.nextToken
        } else {
            self.ids = nil
            self.nextToken = nil
        }
    }
}

public struct ListBuildBatchesOutputResponse: Swift.Equatable {
    /// <p>An array of strings that contains the batch build identifiers.</p>
    public let ids: [Swift.String]?
    /// <p>If there are more items to return, this contains a token that is passed to a subsequent
    ///             call to <code>ListBuildBatches</code> to retrieve the next set of items.</p>
    public let nextToken: Swift.String?

    public init (
        ids: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.ids = ids
        self.nextToken = nextToken
    }
}

struct ListBuildBatchesOutputResponseBody: Swift.Equatable {
    public let ids: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListBuildBatchesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ids
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ids)
        var idsDecoded0:[Swift.String]? = nil
        if let idsContainer = idsContainer {
            idsDecoded0 = [Swift.String]()
            for string0 in idsContainer {
                if let string0 = string0 {
                    idsDecoded0?.append(string0)
                }
            }
        }
        ids = idsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListBuildsForProjectInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBuildsForProjectInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBuildsForProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBuildsForProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBuildsForProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBuildsForProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBuildsForProjectOutputError>
}

extension ListBuildsForProjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBuildsForProjectInput(nextToken: \(Swift.String(describing: nextToken)), projectName: \(Swift.String(describing: projectName)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension ListBuildsForProjectInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case projectName
        case sortOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct ListBuildsForProjectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBuildsForProjectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBuildsForProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBuildsForProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBuildsForProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBuildsForProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBuildsForProjectOutputError>
}

public struct ListBuildsForProjectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBuildsForProjectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBuildsForProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBuildsForProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBuildsForProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBuildsForProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBuildsForProjectOutputError>
}

public struct ListBuildsForProjectInput: Swift.Equatable {
    /// <p>During a previous call, if there are more than 100 items in the list, only the first
    ///             100 items are returned, along with a unique string called a
    ///                 <i>nextToken</i>. To get the next batch of items in the list, call
    ///             this operation again, adding the next token to the call. To get all of the items in the
    ///             list, keep calling this operation with each subsequent next token that is returned,
    ///             until no more next tokens are returned.</p>
    public let nextToken: Swift.String?
    /// <p>The name of the AWS CodeBuild project.</p>
    public let projectName: Swift.String?
    /// <p>The order to list results in. The results are sorted by build number, not the build
    ///             identifier.</p>
    ///         <p>Valid values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>ASCENDING</code>: List the build IDs in ascending order by build
    ///                     ID.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>DESCENDING</code>: List the build IDs in descending order by build
    ///                     ID.</p>
    ///             </li>
    ///          </ul>
    ///         <p>If the project has more than 100 builds, setting the sort order will result in an
    ///             error. </p>
    public let sortOrder: CodeBuildClientTypes.SortOrderType?

    public init (
        nextToken: Swift.String? = nil,
        projectName: Swift.String? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.nextToken = nextToken
        self.projectName = projectName
        self.sortOrder = sortOrder
    }
}

struct ListBuildsForProjectInputBody: Swift.Equatable {
    public let projectName: Swift.String?
    public let sortOrder: CodeBuildClientTypes.SortOrderType?
    public let nextToken: Swift.String?
}

extension ListBuildsForProjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case projectName
        case sortOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SortOrderType.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListBuildsForProjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListBuildsForProjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBuildsForProjectOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBuildsForProjectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBuildsForProjectOutputResponse(ids: \(Swift.String(describing: ids)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListBuildsForProjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListBuildsForProjectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ids = output.ids
            self.nextToken = output.nextToken
        } else {
            self.ids = nil
            self.nextToken = nil
        }
    }
}

public struct ListBuildsForProjectOutputResponse: Swift.Equatable {
    /// <p>A list of build IDs for the specified build project, with each build ID representing a
    ///             single build.</p>
    public let ids: [Swift.String]?
    /// <p>If there are more than 100 items in the list, only the first 100 items are returned,
    ///             along with a unique string called a <i>nextToken</i>. To get the next
    ///             batch of items in the list, call this operation again, adding the next token to the
    ///             call.</p>
    public let nextToken: Swift.String?

    public init (
        ids: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.ids = ids
        self.nextToken = nextToken
    }
}

struct ListBuildsForProjectOutputResponseBody: Swift.Equatable {
    public let ids: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListBuildsForProjectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ids
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ids)
        var idsDecoded0:[Swift.String]? = nil
        if let idsContainer = idsContainer {
            idsDecoded0 = [Swift.String]()
            for string0 in idsContainer {
                if let string0 = string0 {
                    idsDecoded0?.append(string0)
                }
            }
        }
        ids = idsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListBuildsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBuildsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBuildsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBuildsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBuildsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBuildsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBuildsOutputError>
}

extension ListBuildsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBuildsInput(nextToken: \(Swift.String(describing: nextToken)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension ListBuildsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case sortOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct ListBuildsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBuildsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBuildsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBuildsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBuildsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBuildsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBuildsOutputError>
}

public struct ListBuildsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListBuildsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListBuildsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListBuildsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListBuildsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListBuildsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListBuildsOutputError>
}

public struct ListBuildsInput: Swift.Equatable {
    /// <p>During a previous call, if there are more than 100 items in the list, only the first
    ///             100 items are returned, along with a unique string called a
    ///                 <i>nextToken</i>. To get the next batch of items in the list, call
    ///             this operation again, adding the next token to the call. To get all of the items in the
    ///             list, keep calling this operation with each subsequent next token that is returned,
    ///             until no more next tokens are returned.</p>
    public let nextToken: Swift.String?
    /// <p>The order to list build IDs. Valid values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>ASCENDING</code>: List the build IDs in ascending order by build
    ///                     ID.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>DESCENDING</code>: List the build IDs in descending order by build
    ///                     ID.</p>
    ///             </li>
    ///          </ul>
    public let sortOrder: CodeBuildClientTypes.SortOrderType?

    public init (
        nextToken: Swift.String? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}

struct ListBuildsInputBody: Swift.Equatable {
    public let sortOrder: CodeBuildClientTypes.SortOrderType?
    public let nextToken: Swift.String?
}

extension ListBuildsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case sortOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sortOrderDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SortOrderType.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListBuildsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListBuildsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBuildsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBuildsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListBuildsOutputResponse(ids: \(Swift.String(describing: ids)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListBuildsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListBuildsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ids = output.ids
            self.nextToken = output.nextToken
        } else {
            self.ids = nil
            self.nextToken = nil
        }
    }
}

public struct ListBuildsOutputResponse: Swift.Equatable {
    /// <p>A list of build IDs, with each build ID representing a single build.</p>
    public let ids: [Swift.String]?
    /// <p>If there are more than 100 items in the list, only the first 100 items are returned,
    ///             along with a unique string called a <i>nextToken</i>. To get the next
    ///             batch of items in the list, call this operation again, adding the next token to the
    ///             call.</p>
    public let nextToken: Swift.String?

    public init (
        ids: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.ids = ids
        self.nextToken = nextToken
    }
}

struct ListBuildsOutputResponseBody: Swift.Equatable {
    public let ids: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListBuildsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ids
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ids)
        var idsDecoded0:[Swift.String]? = nil
        if let idsContainer = idsContainer {
            idsDecoded0 = [Swift.String]()
            for string0 in idsContainer {
                if let string0 = string0 {
                    idsDecoded0?.append(string0)
                }
            }
        }
        ids = idsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListCuratedEnvironmentImagesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCuratedEnvironmentImagesInput()"}
}

extension ListCuratedEnvironmentImagesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListCuratedEnvironmentImagesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCuratedEnvironmentImagesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCuratedEnvironmentImagesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCuratedEnvironmentImagesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCuratedEnvironmentImagesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCuratedEnvironmentImagesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCuratedEnvironmentImagesOutputError>
}

public struct ListCuratedEnvironmentImagesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCuratedEnvironmentImagesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCuratedEnvironmentImagesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCuratedEnvironmentImagesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCuratedEnvironmentImagesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCuratedEnvironmentImagesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCuratedEnvironmentImagesOutputError>
}

public struct ListCuratedEnvironmentImagesInput: Swift.Equatable {

    public init() {}
}

struct ListCuratedEnvironmentImagesInputBody: Swift.Equatable {
}

extension ListCuratedEnvironmentImagesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListCuratedEnvironmentImagesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCuratedEnvironmentImagesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCuratedEnvironmentImagesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCuratedEnvironmentImagesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCuratedEnvironmentImagesOutputResponse(platforms: \(Swift.String(describing: platforms)))"}
}

extension ListCuratedEnvironmentImagesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCuratedEnvironmentImagesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.platforms = output.platforms
        } else {
            self.platforms = nil
        }
    }
}

public struct ListCuratedEnvironmentImagesOutputResponse: Swift.Equatable {
    /// <p>Information about supported platforms for Docker images that are managed by
    ///             AWS CodeBuild.</p>
    public let platforms: [CodeBuildClientTypes.EnvironmentPlatform]?

    public init (
        platforms: [CodeBuildClientTypes.EnvironmentPlatform]? = nil
    )
    {
        self.platforms = platforms
    }
}

struct ListCuratedEnvironmentImagesOutputResponseBody: Swift.Equatable {
    public let platforms: [CodeBuildClientTypes.EnvironmentPlatform]?
}

extension ListCuratedEnvironmentImagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case platforms
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.EnvironmentPlatform?].self, forKey: .platforms)
        var platformsDecoded0:[CodeBuildClientTypes.EnvironmentPlatform]? = nil
        if let platformsContainer = platformsContainer {
            platformsDecoded0 = [CodeBuildClientTypes.EnvironmentPlatform]()
            for structure0 in platformsContainer {
                if let structure0 = structure0 {
                    platformsDecoded0?.append(structure0)
                }
            }
        }
        platforms = platformsDecoded0
    }
}

public struct ListProjectsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProjectsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListProjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListProjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListProjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProjectsOutputError>
}

extension ListProjectsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListProjectsInput(nextToken: \(Swift.String(describing: nextToken)), sortBy: \(Swift.String(describing: sortBy)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension ListProjectsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case sortBy
        case sortOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct ListProjectsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProjectsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListProjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListProjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListProjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProjectsOutputError>
}

public struct ListProjectsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListProjectsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListProjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListProjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListProjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListProjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListProjectsOutputError>
}

public struct ListProjectsInput: Swift.Equatable {
    /// <p>During a previous call, if there are more than 100 items in the list, only the first
    ///             100 items are returned, along with a unique string called a
    ///                 <i>nextToken</i>. To get the next batch of items in the list, call
    ///             this operation again, adding the next token to the call. To get all of the items in the
    ///             list, keep calling this operation with each subsequent next token that is returned,
    ///             until no more next tokens are returned.</p>
    public let nextToken: Swift.String?
    /// <p>The criterion to be used to list build project names. Valid values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>CREATED_TIME</code>: List based on when each build project was
    ///                     created.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>LAST_MODIFIED_TIME</code>: List based on when information about each
    ///                     build project was last changed.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>NAME</code>: List based on each build project's name.</p>
    ///             </li>
    ///          </ul>
    ///         <p>Use <code>sortOrder</code> to specify in what order to list the build project names
    ///             based on the preceding criteria.</p>
    public let sortBy: CodeBuildClientTypes.ProjectSortByType?
    /// <p>The order in which to list build projects. Valid values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>ASCENDING</code>: List in ascending order.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>DESCENDING</code>: List in descending order.</p>
    ///             </li>
    ///          </ul>
    ///         <p>Use <code>sortBy</code> to specify the criterion to be used to list build project
    ///             names.</p>
    public let sortOrder: CodeBuildClientTypes.SortOrderType?

    public init (
        nextToken: Swift.String? = nil,
        sortBy: CodeBuildClientTypes.ProjectSortByType? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListProjectsInputBody: Swift.Equatable {
    public let sortBy: CodeBuildClientTypes.ProjectSortByType?
    public let sortOrder: CodeBuildClientTypes.SortOrderType?
    public let nextToken: Swift.String?
}

extension ListProjectsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case sortBy
        case sortOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sortByDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectSortByType.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SortOrderType.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListProjectsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListProjectsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListProjectsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListProjectsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListProjectsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), projects: \(Swift.String(describing: projects)))"}
}

extension ListProjectsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListProjectsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.projects = output.projects
        } else {
            self.nextToken = nil
            self.projects = nil
        }
    }
}

public struct ListProjectsOutputResponse: Swift.Equatable {
    /// <p>If there are more than 100 items in the list, only the first 100 items are returned,
    ///             along with a unique string called a <i>nextToken</i>. To get the next
    ///             batch of items in the list, call this operation again, adding the next token to the
    ///             call.</p>
    public let nextToken: Swift.String?
    /// <p>The list of build project names, with each build project name representing a single
    ///             build project.</p>
    public let projects: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        projects: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.projects = projects
    }
}

struct ListProjectsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let projects: [Swift.String]?
}

extension ListProjectsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case projects
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let projectsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .projects)
        var projectsDecoded0:[Swift.String]? = nil
        if let projectsContainer = projectsContainer {
            projectsDecoded0 = [Swift.String]()
            for string0 in projectsContainer {
                if let string0 = string0 {
                    projectsDecoded0?.append(string0)
                }
            }
        }
        projects = projectsDecoded0
    }
}

public struct ListReportGroupsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReportGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReportGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReportGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReportGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReportGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReportGroupsOutputError>
}

extension ListReportGroupsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListReportGroupsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), sortBy: \(Swift.String(describing: sortBy)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension ListReportGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case sortBy
        case sortOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct ListReportGroupsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReportGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReportGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReportGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReportGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReportGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReportGroupsOutputError>
}

public struct ListReportGroupsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReportGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReportGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReportGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReportGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReportGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReportGroupsOutputError>
}

public struct ListReportGroupsInput: Swift.Equatable {
    /// <p>
    ///       The maximum number of paginated report groups returned per response. Use <code>nextToken</code> to iterate pages in
    ///       the list of returned <code>ReportGroup</code> objects. The default value is 100.
    ///     </p>
    public let maxResults: Swift.Int?
    /// <p>
    ///       During a previous call, the maximum number of items that can be returned is the value specified in
    ///       <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i>
    ///       is returned. To get the next batch of items in the list, call this operation again, adding the next token
    ///       to the call. To get all of the items in the list, keep calling this operation with each
    ///       subsequent next token that is returned, until no more next tokens are returned.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>
    ///       The criterion to be used to list build report groups. Valid values include:
    ///     </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CREATED_TIME</code>: List based on when each report group was
    ///           created.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LAST_MODIFIED_TIME</code>: List based on when each report group  was last changed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NAME</code>: List based on each report group's name.</p>
    ///             </li>
    ///          </ul>
    public let sortBy: CodeBuildClientTypes.ReportGroupSortByType?
    /// <p>
    ///       Used to specify the order to sort the list of returned report groups. Valid values are
    ///       <code>ASCENDING</code> and <code>DESCENDING</code>.
    ///     </p>
    public let sortOrder: CodeBuildClientTypes.SortOrderType?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: CodeBuildClientTypes.ReportGroupSortByType? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListReportGroupsInputBody: Swift.Equatable {
    public let sortOrder: CodeBuildClientTypes.SortOrderType?
    public let sortBy: CodeBuildClientTypes.ReportGroupSortByType?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
}

extension ListReportGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case sortBy
        case sortOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sortOrderDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SortOrderType.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportGroupSortByType.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListReportGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListReportGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListReportGroupsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListReportGroupsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListReportGroupsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), reportGroups: \(Swift.String(describing: reportGroups)))"}
}

extension ListReportGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListReportGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.reportGroups = output.reportGroups
        } else {
            self.nextToken = nil
            self.reportGroups = nil
        }
    }
}

public struct ListReportGroupsOutputResponse: Swift.Equatable {
    /// <p>
    ///       During a previous call, the maximum number of items that can be returned is the value specified in
    ///       <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i>
    ///       is returned. To get the next batch of items in the list, call this operation again, adding the next token
    ///       to the call. To get all of the items in the list, keep calling this operation with each
    ///       subsequent next token that is returned, until no more next tokens are returned.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>
    ///       The list of ARNs for the report groups in the current AWS account.
    ///     </p>
    public let reportGroups: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        reportGroups: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.reportGroups = reportGroups
    }
}

struct ListReportGroupsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let reportGroups: [Swift.String]?
}

extension ListReportGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case reportGroups
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let reportGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .reportGroups)
        var reportGroupsDecoded0:[Swift.String]? = nil
        if let reportGroupsContainer = reportGroupsContainer {
            reportGroupsDecoded0 = [Swift.String]()
            for string0 in reportGroupsContainer {
                if let string0 = string0 {
                    reportGroupsDecoded0?.append(string0)
                }
            }
        }
        reportGroups = reportGroupsDecoded0
    }
}

public struct ListReportsForReportGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReportsForReportGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReportsForReportGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReportsForReportGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReportsForReportGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReportsForReportGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReportsForReportGroupOutputError>
}

extension ListReportsForReportGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListReportsForReportGroupInput(filter: \(Swift.String(describing: filter)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), reportGroupArn: \(Swift.String(describing: reportGroupArn)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension ListReportsForReportGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter
        case maxResults
        case nextToken
        case reportGroupArn
        case sortOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let reportGroupArn = reportGroupArn {
            try encodeContainer.encode(reportGroupArn, forKey: .reportGroupArn)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct ListReportsForReportGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReportsForReportGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReportsForReportGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReportsForReportGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReportsForReportGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReportsForReportGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReportsForReportGroupOutputError>
}

public struct ListReportsForReportGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReportsForReportGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReportsForReportGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReportsForReportGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReportsForReportGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReportsForReportGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReportsForReportGroupOutputError>
}

public struct ListReportsForReportGroupInput: Swift.Equatable {
    /// <p>
    ///       A <code>ReportFilter</code> object used to filter the returned reports.
    ///     </p>
    public let filter: CodeBuildClientTypes.ReportFilter?
    /// <p>
    ///       The maximum number of paginated reports in this report group returned per response. Use <code>nextToken</code> to iterate pages in
    ///       the list of returned <code>Report</code> objects. The default value is 100.
    ///     </p>
    public let maxResults: Swift.Int?
    /// <p>
    ///       During a previous call, the maximum number of items that can be returned is the value specified in
    ///       <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i>
    ///       is returned. To get the next batch of items in the list, call this operation again, adding the next token
    ///       to the call. To get all of the items in the list, keep calling this operation with each
    ///       subsequent next token that is returned, until no more next tokens are returned.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>
    ///       The ARN of the report group for which you want to return report ARNs.
    ///     </p>
    public let reportGroupArn: Swift.String?
    /// <p>
    ///       Use to specify whether the results are returned in ascending or descending order.
    ///     </p>
    public let sortOrder: CodeBuildClientTypes.SortOrderType?

    public init (
        filter: CodeBuildClientTypes.ReportFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        reportGroupArn: Swift.String? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reportGroupArn = reportGroupArn
        self.sortOrder = sortOrder
    }
}

struct ListReportsForReportGroupInputBody: Swift.Equatable {
    public let reportGroupArn: Swift.String?
    public let nextToken: Swift.String?
    public let sortOrder: CodeBuildClientTypes.SortOrderType?
    public let maxResults: Swift.Int?
    public let filter: CodeBuildClientTypes.ReportFilter?
}

extension ListReportsForReportGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter
        case maxResults
        case nextToken
        case reportGroupArn
        case sortOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportGroupArn)
        reportGroupArn = reportGroupArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SortOrderType.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filterDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportFilter.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension ListReportsForReportGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListReportsForReportGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListReportsForReportGroupOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListReportsForReportGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListReportsForReportGroupOutputResponse(nextToken: \(Swift.String(describing: nextToken)), reports: \(Swift.String(describing: reports)))"}
}

extension ListReportsForReportGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListReportsForReportGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.reports = output.reports
        } else {
            self.nextToken = nil
            self.reports = nil
        }
    }
}

public struct ListReportsForReportGroupOutputResponse: Swift.Equatable {
    /// <p>
    ///       During a previous call, the maximum number of items that can be returned is the value specified in
    ///       <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i>
    ///       is returned. To get the next batch of items in the list, call this operation again, adding the next token
    ///       to the call. To get all of the items in the list, keep calling this operation with each
    ///       subsequent next token that is returned, until no more next tokens are returned.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>
    ///       The list of report ARNs.
    ///     </p>
    public let reports: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        reports: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.reports = reports
    }
}

struct ListReportsForReportGroupOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let reports: [Swift.String]?
}

extension ListReportsForReportGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case reports
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let reportsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .reports)
        var reportsDecoded0:[Swift.String]? = nil
        if let reportsContainer = reportsContainer {
            reportsDecoded0 = [Swift.String]()
            for string0 in reportsContainer {
                if let string0 = string0 {
                    reportsDecoded0?.append(string0)
                }
            }
        }
        reports = reportsDecoded0
    }
}

public struct ListReportsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReportsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReportsOutputError>
}

extension ListReportsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListReportsInput(filter: \(Swift.String(describing: filter)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension ListReportsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter
        case maxResults
        case nextToken
        case sortOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct ListReportsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReportsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReportsOutputError>
}

public struct ListReportsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReportsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReportsOutputError>
}

public struct ListReportsInput: Swift.Equatable {
    /// <p>
    ///       A <code>ReportFilter</code> object used to filter the returned reports.
    ///     </p>
    public let filter: CodeBuildClientTypes.ReportFilter?
    /// <p>
    ///       The maximum number of paginated reports returned per response. Use <code>nextToken</code> to iterate pages in
    ///       the list of returned <code>Report</code> objects. The default value is 100.
    ///     </p>
    public let maxResults: Swift.Int?
    /// <p>
    ///       During a previous call, the maximum number of items that can be returned is the value specified in
    ///       <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i>
    ///       is returned. To get the next batch of items in the list, call this operation again, adding the next token
    ///       to the call. To get all of the items in the list, keep calling this operation with each
    ///       subsequent next token that is returned, until no more next tokens are returned.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>
    ///       Specifies the sort order for the list of returned reports. Valid values are:
    ///     </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ASCENDING</code>: return reports in chronological order based on their creation date.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DESCENDING</code>: return reports in the reverse chronological order based on their creation date.
    ///         </p>
    ///             </li>
    ///          </ul>
    public let sortOrder: CodeBuildClientTypes.SortOrderType?

    public init (
        filter: CodeBuildClientTypes.ReportFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}

struct ListReportsInputBody: Swift.Equatable {
    public let sortOrder: CodeBuildClientTypes.SortOrderType?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
    public let filter: CodeBuildClientTypes.ReportFilter?
}

extension ListReportsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter
        case maxResults
        case nextToken
        case sortOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sortOrderDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SortOrderType.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filterDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportFilter.self, forKey: .filter)
        filter = filterDecoded
    }
}

extension ListReportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListReportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListReportsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListReportsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListReportsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), reports: \(Swift.String(describing: reports)))"}
}

extension ListReportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListReportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.reports = output.reports
        } else {
            self.nextToken = nil
            self.reports = nil
        }
    }
}

public struct ListReportsOutputResponse: Swift.Equatable {
    /// <p>
    ///       During a previous call, the maximum number of items that can be returned is the value specified in
    ///       <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i>
    ///       is returned. To get the next batch of items in the list, call this operation again, adding the next token
    ///       to the call. To get all of the items in the list, keep calling this operation with each
    ///       subsequent next token that is returned, until no more next tokens are returned.
    ///     </p>
    public let nextToken: Swift.String?
    /// <p>
    ///       The list of returned ARNs for the reports in the current AWS account.
    ///     </p>
    public let reports: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        reports: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.reports = reports
    }
}

struct ListReportsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let reports: [Swift.String]?
}

extension ListReportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case reports
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let reportsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .reports)
        var reportsDecoded0:[Swift.String]? = nil
        if let reportsContainer = reportsContainer {
            reportsDecoded0 = [Swift.String]()
            for string0 in reportsContainer {
                if let string0 = string0 {
                    reportsDecoded0?.append(string0)
                }
            }
        }
        reports = reportsDecoded0
    }
}

public struct ListSharedProjectsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSharedProjectsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSharedProjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSharedProjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSharedProjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSharedProjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSharedProjectsOutputError>
}

extension ListSharedProjectsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSharedProjectsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), sortBy: \(Swift.String(describing: sortBy)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension ListSharedProjectsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case sortBy
        case sortOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct ListSharedProjectsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSharedProjectsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSharedProjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSharedProjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSharedProjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSharedProjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSharedProjectsOutputError>
}

public struct ListSharedProjectsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSharedProjectsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSharedProjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSharedProjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSharedProjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSharedProjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSharedProjectsOutputError>
}

public struct ListSharedProjectsInput: Swift.Equatable {
    /// <p> The maximum number of paginated shared build projects returned per response. Use
    ///                 <code>nextToken</code> to iterate pages in the list of returned <code>Project</code>
    ///             objects. The default value is 100. </p>
    public let maxResults: Swift.Int?
    /// <p> During a previous call, the maximum number of items that can be returned is the value
    ///             specified in <code>maxResults</code>. If there more items in the list, then a unique
    ///             string called a <i>nextToken</i> is returned. To get the next batch of
    ///             items in the list, call this operation again, adding the next token to the call. To get
    ///             all of the items in the list, keep calling this operation with each subsequent next
    ///             token that is returned, until no more next tokens are returned. </p>
    public let nextToken: Swift.String?
    /// <p> The criterion to be used to list build projects shared with the current AWS account
    ///             or user. Valid values include: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>ARN</code>: List based on the ARN. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>MODIFIED_TIME</code>: List based on when information about the shared
    ///                     project was last changed. </p>
    ///             </li>
    ///          </ul>
    public let sortBy: CodeBuildClientTypes.SharedResourceSortByType?
    /// <p>The order in which to list shared build projects. Valid values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>ASCENDING</code>: List in ascending order.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>DESCENDING</code>: List in descending order.</p>
    ///             </li>
    ///          </ul>
    public let sortOrder: CodeBuildClientTypes.SortOrderType?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: CodeBuildClientTypes.SharedResourceSortByType? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListSharedProjectsInputBody: Swift.Equatable {
    public let sortBy: CodeBuildClientTypes.SharedResourceSortByType?
    public let sortOrder: CodeBuildClientTypes.SortOrderType?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension ListSharedProjectsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case sortBy
        case sortOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sortByDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SharedResourceSortByType.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SortOrderType.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSharedProjectsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSharedProjectsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSharedProjectsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSharedProjectsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSharedProjectsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), projects: \(Swift.String(describing: projects)))"}
}

extension ListSharedProjectsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSharedProjectsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.projects = output.projects
        } else {
            self.nextToken = nil
            self.projects = nil
        }
    }
}

public struct ListSharedProjectsOutputResponse: Swift.Equatable {
    /// <p> During a previous call, the maximum number of items that can be returned is the value
    ///             specified in <code>maxResults</code>. If there more items in the list, then a unique
    ///             string called a <i>nextToken</i> is returned. To get the next batch of
    ///             items in the list, call this operation again, adding the next token to the call. To get
    ///             all of the items in the list, keep calling this operation with each subsequent next
    ///             token that is returned, until no more next tokens are returned. </p>
    public let nextToken: Swift.String?
    /// <p> The list of ARNs for the build projects shared with the current AWS account or user.
    ///         </p>
    public let projects: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        projects: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.projects = projects
    }
}

struct ListSharedProjectsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let projects: [Swift.String]?
}

extension ListSharedProjectsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case projects
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let projectsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .projects)
        var projectsDecoded0:[Swift.String]? = nil
        if let projectsContainer = projectsContainer {
            projectsDecoded0 = [Swift.String]()
            for string0 in projectsContainer {
                if let string0 = string0 {
                    projectsDecoded0?.append(string0)
                }
            }
        }
        projects = projectsDecoded0
    }
}

public struct ListSharedReportGroupsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSharedReportGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSharedReportGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSharedReportGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSharedReportGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSharedReportGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSharedReportGroupsOutputError>
}

extension ListSharedReportGroupsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSharedReportGroupsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), sortBy: \(Swift.String(describing: sortBy)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension ListSharedReportGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case sortBy
        case sortOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct ListSharedReportGroupsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSharedReportGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSharedReportGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSharedReportGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSharedReportGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSharedReportGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSharedReportGroupsOutputError>
}

public struct ListSharedReportGroupsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSharedReportGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSharedReportGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSharedReportGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSharedReportGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSharedReportGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSharedReportGroupsOutputError>
}

public struct ListSharedReportGroupsInput: Swift.Equatable {
    /// <p> The maximum number of paginated shared report groups per response. Use
    ///                 <code>nextToken</code> to iterate pages in the list of returned
    ///                 <code>ReportGroup</code> objects. The default value is 100. </p>
    public let maxResults: Swift.Int?
    /// <p> During a previous call, the maximum number of items that can be returned is the value
    ///             specified in <code>maxResults</code>. If there more items in the list, then a unique
    ///             string called a <i>nextToken</i> is returned. To get the next batch of
    ///             items in the list, call this operation again, adding the next token to the call. To get
    ///             all of the items in the list, keep calling this operation with each subsequent next
    ///             token that is returned, until no more next tokens are returned. </p>
    public let nextToken: Swift.String?
    /// <p> The criterion to be used to list report groups shared with the current AWS account or
    ///             user. Valid values include: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>ARN</code>: List based on the ARN. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>MODIFIED_TIME</code>: List based on when information about the shared
    ///                     report group was last changed. </p>
    ///             </li>
    ///          </ul>
    public let sortBy: CodeBuildClientTypes.SharedResourceSortByType?
    /// <p>The order in which to list shared report groups. Valid values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>ASCENDING</code>: List in ascending order.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>DESCENDING</code>: List in descending order.</p>
    ///             </li>
    ///          </ul>
    public let sortOrder: CodeBuildClientTypes.SortOrderType?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: CodeBuildClientTypes.SharedResourceSortByType? = nil,
        sortOrder: CodeBuildClientTypes.SortOrderType? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListSharedReportGroupsInputBody: Swift.Equatable {
    public let sortOrder: CodeBuildClientTypes.SortOrderType?
    public let sortBy: CodeBuildClientTypes.SharedResourceSortByType?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
}

extension ListSharedReportGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case sortBy
        case sortOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sortOrderDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SortOrderType.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SharedResourceSortByType.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListSharedReportGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSharedReportGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSharedReportGroupsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSharedReportGroupsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSharedReportGroupsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), reportGroups: \(Swift.String(describing: reportGroups)))"}
}

extension ListSharedReportGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSharedReportGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.reportGroups = output.reportGroups
        } else {
            self.nextToken = nil
            self.reportGroups = nil
        }
    }
}

public struct ListSharedReportGroupsOutputResponse: Swift.Equatable {
    /// <p> During a previous call, the maximum number of items that can be returned is the value
    ///             specified in <code>maxResults</code>. If there more items in the list, then a unique
    ///             string called a <i>nextToken</i> is returned. To get the next batch of
    ///             items in the list, call this operation again, adding the next token to the call. To get
    ///             all of the items in the list, keep calling this operation with each subsequent next
    ///             token that is returned, until no more next tokens are returned. </p>
    public let nextToken: Swift.String?
    /// <p> The list of ARNs for the report groups shared with the current AWS account or user.
    ///         </p>
    public let reportGroups: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        reportGroups: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.reportGroups = reportGroups
    }
}

struct ListSharedReportGroupsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let reportGroups: [Swift.String]?
}

extension ListSharedReportGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case reportGroups
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let reportGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .reportGroups)
        var reportGroupsDecoded0:[Swift.String]? = nil
        if let reportGroupsContainer = reportGroupsContainer {
            reportGroupsDecoded0 = [Swift.String]()
            for string0 in reportGroupsContainer {
                if let string0 = string0 {
                    reportGroupsDecoded0?.append(string0)
                }
            }
        }
        reportGroups = reportGroupsDecoded0
    }
}

extension ListSourceCredentialsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSourceCredentialsInput()"}
}

extension ListSourceCredentialsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListSourceCredentialsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSourceCredentialsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSourceCredentialsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSourceCredentialsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSourceCredentialsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSourceCredentialsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSourceCredentialsOutputError>
}

public struct ListSourceCredentialsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSourceCredentialsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSourceCredentialsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSourceCredentialsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSourceCredentialsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSourceCredentialsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSourceCredentialsOutputError>
}

public struct ListSourceCredentialsInput: Swift.Equatable {

    public init() {}
}

struct ListSourceCredentialsInputBody: Swift.Equatable {
}

extension ListSourceCredentialsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListSourceCredentialsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSourceCredentialsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSourceCredentialsOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSourceCredentialsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSourceCredentialsOutputResponse(sourceCredentialsInfos: \(Swift.String(describing: sourceCredentialsInfos)))"}
}

extension ListSourceCredentialsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSourceCredentialsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sourceCredentialsInfos = output.sourceCredentialsInfos
        } else {
            self.sourceCredentialsInfos = nil
        }
    }
}

public struct ListSourceCredentialsOutputResponse: Swift.Equatable {
    /// <p> A list of <code>SourceCredentialsInfo</code> objects. Each
    ///                 <code>SourceCredentialsInfo</code> object includes the authentication type, token
    ///             ARN, and type of source provider for one set of credentials. </p>
    public let sourceCredentialsInfos: [CodeBuildClientTypes.SourceCredentialsInfo]?

    public init (
        sourceCredentialsInfos: [CodeBuildClientTypes.SourceCredentialsInfo]? = nil
    )
    {
        self.sourceCredentialsInfos = sourceCredentialsInfos
    }
}

struct ListSourceCredentialsOutputResponseBody: Swift.Equatable {
    public let sourceCredentialsInfos: [CodeBuildClientTypes.SourceCredentialsInfo]?
}

extension ListSourceCredentialsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceCredentialsInfos
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceCredentialsInfosContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.SourceCredentialsInfo?].self, forKey: .sourceCredentialsInfos)
        var sourceCredentialsInfosDecoded0:[CodeBuildClientTypes.SourceCredentialsInfo]? = nil
        if let sourceCredentialsInfosContainer = sourceCredentialsInfosContainer {
            sourceCredentialsInfosDecoded0 = [CodeBuildClientTypes.SourceCredentialsInfo]()
            for structure0 in sourceCredentialsInfosContainer {
                if let structure0 = structure0 {
                    sourceCredentialsInfosDecoded0?.append(structure0)
                }
            }
        }
        sourceCredentialsInfos = sourceCredentialsInfosDecoded0
    }
}

extension CodeBuildClientTypes.LogsConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogs
        case s3Logs
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogs = cloudWatchLogs {
            try encodeContainer.encode(cloudWatchLogs, forKey: .cloudWatchLogs)
        }
        if let s3Logs = s3Logs {
            try encodeContainer.encode(s3Logs, forKey: .s3Logs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudWatchLogsDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.CloudWatchLogsConfig.self, forKey: .cloudWatchLogs)
        cloudWatchLogs = cloudWatchLogsDecoded
        let s3LogsDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.S3LogsConfig.self, forKey: .s3Logs)
        s3Logs = s3LogsDecoded
    }
}

extension CodeBuildClientTypes.LogsConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LogsConfig(cloudWatchLogs: \(Swift.String(describing: cloudWatchLogs)), s3Logs: \(Swift.String(describing: s3Logs)))"}
}

extension CodeBuildClientTypes {
    /// <p> Information about logs for a build project. These can be logs in Amazon CloudWatch Logs, built in a
    ///             specified S3 bucket, or both. </p>
    public struct LogsConfig: Swift.Equatable {
        /// <p> Information about Amazon CloudWatch Logs for a build project. Amazon CloudWatch Logs are enabled by default. </p>
        public let cloudWatchLogs: CodeBuildClientTypes.CloudWatchLogsConfig?
        /// <p> Information about logs built to an S3 bucket for a build project. S3 logs are not
        ///             enabled by default. </p>
        public let s3Logs: CodeBuildClientTypes.S3LogsConfig?

        public init (
            cloudWatchLogs: CodeBuildClientTypes.CloudWatchLogsConfig? = nil,
            s3Logs: CodeBuildClientTypes.S3LogsConfig? = nil
        )
        {
            self.cloudWatchLogs = cloudWatchLogs
            self.s3Logs = s3Logs
        }
    }

}

extension CodeBuildClientTypes {
    public enum LogsConfigStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [LogsConfigStatusType] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogsConfigStatusType(rawValue: rawValue) ?? LogsConfigStatusType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.LogsLocation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogs
        case cloudWatchLogsArn
        case deepLink
        case groupName
        case s3DeepLink
        case s3Logs
        case s3LogsArn
        case streamName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogs = cloudWatchLogs {
            try encodeContainer.encode(cloudWatchLogs, forKey: .cloudWatchLogs)
        }
        if let cloudWatchLogsArn = cloudWatchLogsArn {
            try encodeContainer.encode(cloudWatchLogsArn, forKey: .cloudWatchLogsArn)
        }
        if let deepLink = deepLink {
            try encodeContainer.encode(deepLink, forKey: .deepLink)
        }
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let s3DeepLink = s3DeepLink {
            try encodeContainer.encode(s3DeepLink, forKey: .s3DeepLink)
        }
        if let s3Logs = s3Logs {
            try encodeContainer.encode(s3Logs, forKey: .s3Logs)
        }
        if let s3LogsArn = s3LogsArn {
            try encodeContainer.encode(s3LogsArn, forKey: .s3LogsArn)
        }
        if let streamName = streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let deepLinkDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deepLink)
        deepLink = deepLinkDecoded
        let s3DeepLinkDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3DeepLink)
        s3DeepLink = s3DeepLinkDecoded
        let cloudWatchLogsArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogsArn)
        cloudWatchLogsArn = cloudWatchLogsArnDecoded
        let s3LogsArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3LogsArn)
        s3LogsArn = s3LogsArnDecoded
        let cloudWatchLogsDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.CloudWatchLogsConfig.self, forKey: .cloudWatchLogs)
        cloudWatchLogs = cloudWatchLogsDecoded
        let s3LogsDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.S3LogsConfig.self, forKey: .s3Logs)
        s3Logs = s3LogsDecoded
    }
}

extension CodeBuildClientTypes.LogsLocation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LogsLocation(cloudWatchLogs: \(Swift.String(describing: cloudWatchLogs)), cloudWatchLogsArn: \(Swift.String(describing: cloudWatchLogsArn)), deepLink: \(Swift.String(describing: deepLink)), groupName: \(Swift.String(describing: groupName)), s3DeepLink: \(Swift.String(describing: s3DeepLink)), s3Logs: \(Swift.String(describing: s3Logs)), s3LogsArn: \(Swift.String(describing: s3LogsArn)), streamName: \(Swift.String(describing: streamName)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about build logs in Amazon CloudWatch Logs.</p>
    public struct LogsLocation: Swift.Equatable {
        /// <p> Information about Amazon CloudWatch Logs for a build project. </p>
        public let cloudWatchLogs: CodeBuildClientTypes.CloudWatchLogsConfig?
        /// <p> The ARN of Amazon CloudWatch Logs for a build project. Its format is
        ///                 <code>arn:${Partition}:logs:${Region}:${Account}:log-group:${LogGroupName}:log-stream:${LogStreamName}</code>.
        ///             For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatchlogs.html#amazoncloudwatchlogs-resources-for-iam-policies">Resources Defined by Amazon CloudWatch Logs</a>. </p>
        public let cloudWatchLogsArn: Swift.String?
        /// <p>The URL to an individual build log in Amazon CloudWatch Logs.</p>
        public let deepLink: Swift.String?
        /// <p>The name of the Amazon CloudWatch Logs group for the build logs.</p>
        public let groupName: Swift.String?
        /// <p> The URL to a build log in an S3 bucket. </p>
        public let s3DeepLink: Swift.String?
        /// <p> Information about S3 logs for a build project. </p>
        public let s3Logs: CodeBuildClientTypes.S3LogsConfig?
        /// <p> The ARN of S3 logs for a build project. Its format is
        ///                 <code>arn:${Partition}:s3:::${BucketName}/${ObjectName}</code>. For more
        ///             information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazons3.html#amazons3-resources-for-iam-policies">Resources Defined by Amazon S3</a>. </p>
        public let s3LogsArn: Swift.String?
        /// <p>The name of the Amazon CloudWatch Logs stream for the build logs.</p>
        public let streamName: Swift.String?

        public init (
            cloudWatchLogs: CodeBuildClientTypes.CloudWatchLogsConfig? = nil,
            cloudWatchLogsArn: Swift.String? = nil,
            deepLink: Swift.String? = nil,
            groupName: Swift.String? = nil,
            s3DeepLink: Swift.String? = nil,
            s3Logs: CodeBuildClientTypes.S3LogsConfig? = nil,
            s3LogsArn: Swift.String? = nil,
            streamName: Swift.String? = nil
        )
        {
            self.cloudWatchLogs = cloudWatchLogs
            self.cloudWatchLogsArn = cloudWatchLogsArn
            self.deepLink = deepLink
            self.groupName = groupName
            self.s3DeepLink = s3DeepLink
            self.s3Logs = s3Logs
            self.s3LogsArn = s3LogsArn
            self.streamName = streamName
        }
    }

}

extension CodeBuildClientTypes.NetworkInterface: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case networkInterfaceId
        case subnetId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let networkInterfaceId = networkInterfaceId {
            try encodeContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
    }
}

extension CodeBuildClientTypes.NetworkInterface: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NetworkInterface(networkInterfaceId: \(Swift.String(describing: networkInterfaceId)), subnetId: \(Swift.String(describing: subnetId)))"}
}

extension CodeBuildClientTypes {
    /// <p>Describes a network interface.</p>
    public struct NetworkInterface: Swift.Equatable {
        /// <p>The ID of the network interface.</p>
        public let networkInterfaceId: Swift.String?
        /// <p>The ID of the subnet.</p>
        public let subnetId: Swift.String?

        public init (
            networkInterfaceId: Swift.String? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.networkInterfaceId = networkInterfaceId
            self.subnetId = subnetId
        }
    }

}

extension OAuthProviderException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OAuthProviderException(message: \(Swift.String(describing: message)))"}
}

extension OAuthProviderException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: OAuthProviderExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>There was a problem with the underlying OAuth provider.</p>
public struct OAuthProviderException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OAuthProviderExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension OAuthProviderExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeBuildClientTypes.PhaseContext: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case statusCode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let statusCode = statusCode {
            try encodeContainer.encode(statusCode, forKey: .statusCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeBuildClientTypes.PhaseContext: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PhaseContext(message: \(Swift.String(describing: message)), statusCode: \(Swift.String(describing: statusCode)))"}
}

extension CodeBuildClientTypes {
    /// <p>Additional information about a build phase that has an error. You can use this
    ///             information for troubleshooting.</p>
    public struct PhaseContext: Swift.Equatable {
        /// <p>An explanation of the build phase's context. This might include a command ID and an
        ///             exit code.</p>
        public let message: Swift.String?
        /// <p>The status code for the context of the build phase.</p>
        public let statusCode: Swift.String?

        public init (
            message: Swift.String? = nil,
            statusCode: Swift.String? = nil
        )
        {
            self.message = message
            self.statusCode = statusCode
        }
    }

}

extension CodeBuildClientTypes {
    public enum PlatformType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case amazonLinux
        case debian
        case ubuntu
        case windowsServer
        case sdkUnknown(Swift.String)

        public static var allCases: [PlatformType] {
            return [
                .amazonLinux,
                .debian,
                .ubuntu,
                .windowsServer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .amazonLinux: return "AMAZON_LINUX"
            case .debian: return "DEBIAN"
            case .ubuntu: return "UBUNTU"
            case .windowsServer: return "WINDOWS_SERVER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PlatformType(rawValue: rawValue) ?? PlatformType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.Project: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case artifacts
        case badge
        case buildBatchConfig
        case cache
        case concurrentBuildLimit
        case created
        case description
        case encryptionKey
        case environment
        case fileSystemLocations
        case lastModified
        case logsConfig
        case name
        case queuedTimeoutInMinutes
        case secondaryArtifacts
        case secondarySourceVersions
        case secondarySources
        case serviceRole
        case source
        case sourceVersion
        case tags
        case timeoutInMinutes
        case vpcConfig
        case webhook
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let artifacts = artifacts {
            try encodeContainer.encode(artifacts, forKey: .artifacts)
        }
        if let badge = badge {
            try encodeContainer.encode(badge, forKey: .badge)
        }
        if let buildBatchConfig = buildBatchConfig {
            try encodeContainer.encode(buildBatchConfig, forKey: .buildBatchConfig)
        }
        if let cache = cache {
            try encodeContainer.encode(cache, forKey: .cache)
        }
        if let concurrentBuildLimit = concurrentBuildLimit {
            try encodeContainer.encode(concurrentBuildLimit, forKey: .concurrentBuildLimit)
        }
        if let created = created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encryptionKey = encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let environment = environment {
            try encodeContainer.encode(environment, forKey: .environment)
        }
        if let fileSystemLocations = fileSystemLocations {
            var fileSystemLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fileSystemLocations)
            for projectfilesystemlocations0 in fileSystemLocations {
                try fileSystemLocationsContainer.encode(projectfilesystemlocations0)
            }
        }
        if let lastModified = lastModified {
            try encodeContainer.encode(lastModified.timeIntervalSince1970, forKey: .lastModified)
        }
        if let logsConfig = logsConfig {
            try encodeContainer.encode(logsConfig, forKey: .logsConfig)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let queuedTimeoutInMinutes = queuedTimeoutInMinutes {
            try encodeContainer.encode(queuedTimeoutInMinutes, forKey: .queuedTimeoutInMinutes)
        }
        if let secondaryArtifacts = secondaryArtifacts {
            var secondaryArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondaryArtifacts)
            for projectartifactslist0 in secondaryArtifacts {
                try secondaryArtifactsContainer.encode(projectartifactslist0)
            }
        }
        if let secondarySourceVersions = secondarySourceVersions {
            var secondarySourceVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySourceVersions)
            for projectsecondarysourceversions0 in secondarySourceVersions {
                try secondarySourceVersionsContainer.encode(projectsecondarysourceversions0)
            }
        }
        if let secondarySources = secondarySources {
            var secondarySourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySources)
            for projectsources0 in secondarySources {
                try secondarySourcesContainer.encode(projectsources0)
            }
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let sourceVersion = sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let timeoutInMinutes = timeoutInMinutes {
            try encodeContainer.encode(timeoutInMinutes, forKey: .timeoutInMinutes)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
        if let webhook = webhook {
            try encodeContainer.encode(webhook, forKey: .webhook)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectSource.self, forKey: .source)
        source = sourceDecoded
        let secondarySourcesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectSource?].self, forKey: .secondarySources)
        var secondarySourcesDecoded0:[CodeBuildClientTypes.ProjectSource]? = nil
        if let secondarySourcesContainer = secondarySourcesContainer {
            secondarySourcesDecoded0 = [CodeBuildClientTypes.ProjectSource]()
            for structure0 in secondarySourcesContainer {
                if let structure0 = structure0 {
                    secondarySourcesDecoded0?.append(structure0)
                }
            }
        }
        secondarySources = secondarySourcesDecoded0
        let sourceVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
        let secondarySourceVersionsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectSourceVersion?].self, forKey: .secondarySourceVersions)
        var secondarySourceVersionsDecoded0:[CodeBuildClientTypes.ProjectSourceVersion]? = nil
        if let secondarySourceVersionsContainer = secondarySourceVersionsContainer {
            secondarySourceVersionsDecoded0 = [CodeBuildClientTypes.ProjectSourceVersion]()
            for structure0 in secondarySourceVersionsContainer {
                if let structure0 = structure0 {
                    secondarySourceVersionsDecoded0?.append(structure0)
                }
            }
        }
        secondarySourceVersions = secondarySourceVersionsDecoded0
        let artifactsDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectArtifacts.self, forKey: .artifacts)
        artifacts = artifactsDecoded
        let secondaryArtifactsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectArtifacts?].self, forKey: .secondaryArtifacts)
        var secondaryArtifactsDecoded0:[CodeBuildClientTypes.ProjectArtifacts]? = nil
        if let secondaryArtifactsContainer = secondaryArtifactsContainer {
            secondaryArtifactsDecoded0 = [CodeBuildClientTypes.ProjectArtifacts]()
            for structure0 in secondaryArtifactsContainer {
                if let structure0 = structure0 {
                    secondaryArtifactsDecoded0?.append(structure0)
                }
            }
        }
        secondaryArtifacts = secondaryArtifactsDecoded0
        let cacheDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectCache.self, forKey: .cache)
        cache = cacheDecoded
        let environmentDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectEnvironment.self, forKey: .environment)
        environment = environmentDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let timeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInMinutes)
        timeoutInMinutes = timeoutInMinutesDecoded
        let queuedTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .queuedTimeoutInMinutes)
        queuedTimeoutInMinutes = queuedTimeoutInMinutesDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodeBuildClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodeBuildClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let createdDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .created)
        created = createdDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let webhookDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.Webhook.self, forKey: .webhook)
        webhook = webhookDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let badgeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectBadge.self, forKey: .badge)
        badge = badgeDecoded
        let logsConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.LogsConfig.self, forKey: .logsConfig)
        logsConfig = logsConfigDecoded
        let fileSystemLocationsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectFileSystemLocation?].self, forKey: .fileSystemLocations)
        var fileSystemLocationsDecoded0:[CodeBuildClientTypes.ProjectFileSystemLocation]? = nil
        if let fileSystemLocationsContainer = fileSystemLocationsContainer {
            fileSystemLocationsDecoded0 = [CodeBuildClientTypes.ProjectFileSystemLocation]()
            for structure0 in fileSystemLocationsContainer {
                if let structure0 = structure0 {
                    fileSystemLocationsDecoded0?.append(structure0)
                }
            }
        }
        fileSystemLocations = fileSystemLocationsDecoded0
        let buildBatchConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectBuildBatchConfig.self, forKey: .buildBatchConfig)
        buildBatchConfig = buildBatchConfigDecoded
        let concurrentBuildLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .concurrentBuildLimit)
        concurrentBuildLimit = concurrentBuildLimitDecoded
    }
}

extension CodeBuildClientTypes.Project: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Project(arn: \(Swift.String(describing: arn)), artifacts: \(Swift.String(describing: artifacts)), badge: \(Swift.String(describing: badge)), buildBatchConfig: \(Swift.String(describing: buildBatchConfig)), cache: \(Swift.String(describing: cache)), concurrentBuildLimit: \(Swift.String(describing: concurrentBuildLimit)), created: \(Swift.String(describing: created)), description: \(Swift.String(describing: description)), encryptionKey: \(Swift.String(describing: encryptionKey)), environment: \(Swift.String(describing: environment)), fileSystemLocations: \(Swift.String(describing: fileSystemLocations)), lastModified: \(Swift.String(describing: lastModified)), logsConfig: \(Swift.String(describing: logsConfig)), name: \(Swift.String(describing: name)), queuedTimeoutInMinutes: \(Swift.String(describing: queuedTimeoutInMinutes)), secondaryArtifacts: \(Swift.String(describing: secondaryArtifacts)), secondarySourceVersions: \(Swift.String(describing: secondarySourceVersions)), secondarySources: \(Swift.String(describing: secondarySources)), serviceRole: \(Swift.String(describing: serviceRole)), source: \(Swift.String(describing: source)), sourceVersion: \(Swift.String(describing: sourceVersion)), tags: \(Swift.String(describing: tags)), timeoutInMinutes: \(Swift.String(describing: timeoutInMinutes)), vpcConfig: \(Swift.String(describing: vpcConfig)), webhook: \(Swift.String(describing: webhook)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about a build project.</p>
    public struct Project: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the build project.</p>
        public let arn: Swift.String?
        /// <p>Information about the build output artifacts for the build project.</p>
        public let artifacts: CodeBuildClientTypes.ProjectArtifacts?
        /// <p>Information about the build badge for the build project.</p>
        public let badge: CodeBuildClientTypes.ProjectBadge?
        /// <p>A <a>ProjectBuildBatchConfig</a>
        ///  object that defines the batch build
        ///             options for the project.</p>
        public let buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig?
        /// <p>Information about the cache for the build project.</p>
        public let cache: CodeBuildClientTypes.ProjectCache?
        /// <p>The maximum number of concurrent builds that are allowed for this project.</p>
        ///          <p>New builds are only started if the current number of builds is less than or equal to this limit.
        ///   If the current build count meets this limit, new builds are throttled and are not run.</p>
        public let concurrentBuildLimit: Swift.Int?
        /// <p>When the build project was created, expressed in Unix time format.</p>
        public let created: ClientRuntime.Date?
        /// <p>A description that makes the build project easy to identify.</p>
        public let description: Swift.String?
        /// <p>The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output
        ///       artifacts.</p>
        ///          <note>
        ///             <p>You can use a cross-account KMS key to encrypt the build output artifacts if your
        ///         service role has permission to that key. </p>
        ///          </note>
        ///          <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using
        ///         the format <code>alias/<alias-name></code>).
        ///     </p>
        public let encryptionKey: Swift.String?
        /// <p>Information about the build environment for this build project.</p>
        public let environment: CodeBuildClientTypes.ProjectEnvironment?
        /// <p>
        ///       An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A <code>ProjectFileSystemLocation</code> object
        ///       specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>,
        ///       <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System.
        ///   </p>
        public let fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]?
        /// <p>When the build project's settings were last modified, expressed in Unix time
        ///       format.</p>
        public let lastModified: ClientRuntime.Date?
        /// <p>Information about logs for the build project. A project can create logs in Amazon CloudWatch Logs, an
        ///       S3 bucket, or both. </p>
        public let logsConfig: CodeBuildClientTypes.LogsConfig?
        /// <p>The name of the build project.</p>
        public let name: Swift.String?
        /// <p>The number of minutes a build is allowed to be queued before it times out. </p>
        public let queuedTimeoutInMinutes: Swift.Int?
        /// <p>An array of <code>ProjectArtifacts</code> objects. </p>
        public let secondaryArtifacts: [CodeBuildClientTypes.ProjectArtifacts]?
        /// <p>An array of <code>ProjectSourceVersion</code> objects. If
        ///       <code>secondarySourceVersions</code> is specified at the build level, then they take
        ///       over these <code>secondarySourceVersions</code> (at the project level). </p>
        public let secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]?
        /// <p>An array of <code>ProjectSource</code> objects. </p>
        public let secondarySources: [CodeBuildClientTypes.ProjectSource]?
        /// <p>The ARN of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services
        ///       on behalf of the AWS account.</p>
        public let serviceRole: Swift.String?
        /// <p>Information about the build input source code for this build project.</p>
        public let source: CodeBuildClientTypes.ProjectSource?
        /// <p>A version of the build input to be built for this project. If not specified, the
        ///       latest version is used. If specified, it must be one of:</p>
        ///          <ul>
        ///             <li>
        ///                <p>For AWS CodeCommit: the commit ID, branch, or Git tag to use.</p>
        ///             </li>
        ///             <li>
        ///                <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that
        ///           corresponds to the version of the source code you want to build. If a pull
        ///           request ID is specified, it must use the format <code>pr/pull-request-ID</code>
        ///           (for example <code>pr/25</code>). If a branch name is specified, the branch's
        ///           HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is
        ///           used.</p>
        ///             </li>
        ///             <li>
        ///                <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the
        ///           version of the source code you want to build. If a branch name is specified, the
        ///           branch's HEAD commit ID is used. If not specified, the default branch's HEAD
        ///           commit ID is used.</p>
        ///             </li>
        ///             <li>
        ///                <p>For Amazon S3: the version ID of the object that represents the build input ZIP
        ///           file to use.</p>
        ///             </li>
        ///          </ul>
        ///          <p>If <code>sourceVersion</code> is specified at the build level, then that version
        ///       takes precedence over this <code>sourceVersion</code> (at the project level). </p>
        ///          <p>For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html">Source Version Sample
        ///       with CodeBuild</a> in the <i>AWS CodeBuild User Guide</i>.
        ///     </p>
        public let sourceVersion: Swift.String?
        /// <p>A list of tag key and value pairs associated with this build project.</p>
        ///          <p>These tags are available for use by AWS services that support AWS CodeBuild build project
        ///       tags.</p>
        public let tags: [CodeBuildClientTypes.Tag]?
        /// <p>How long, in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait before timing out any
        ///       related build that did not get marked as completed. The default is 60 minutes.</p>
        public let timeoutInMinutes: Swift.Int?
        /// <p>Information about the VPC configuration that AWS CodeBuild accesses.</p>
        public let vpcConfig: CodeBuildClientTypes.VpcConfig?
        /// <p>Information about a webhook that connects repository events to a build project in
        ///       AWS CodeBuild.</p>
        public let webhook: CodeBuildClientTypes.Webhook?

        public init (
            arn: Swift.String? = nil,
            artifacts: CodeBuildClientTypes.ProjectArtifacts? = nil,
            badge: CodeBuildClientTypes.ProjectBadge? = nil,
            buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig? = nil,
            cache: CodeBuildClientTypes.ProjectCache? = nil,
            concurrentBuildLimit: Swift.Int? = nil,
            created: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            encryptionKey: Swift.String? = nil,
            environment: CodeBuildClientTypes.ProjectEnvironment? = nil,
            fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]? = nil,
            lastModified: ClientRuntime.Date? = nil,
            logsConfig: CodeBuildClientTypes.LogsConfig? = nil,
            name: Swift.String? = nil,
            queuedTimeoutInMinutes: Swift.Int? = nil,
            secondaryArtifacts: [CodeBuildClientTypes.ProjectArtifacts]? = nil,
            secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
            secondarySources: [CodeBuildClientTypes.ProjectSource]? = nil,
            serviceRole: Swift.String? = nil,
            source: CodeBuildClientTypes.ProjectSource? = nil,
            sourceVersion: Swift.String? = nil,
            tags: [CodeBuildClientTypes.Tag]? = nil,
            timeoutInMinutes: Swift.Int? = nil,
            vpcConfig: CodeBuildClientTypes.VpcConfig? = nil,
            webhook: CodeBuildClientTypes.Webhook? = nil
        )
        {
            self.arn = arn
            self.artifacts = artifacts
            self.badge = badge
            self.buildBatchConfig = buildBatchConfig
            self.cache = cache
            self.concurrentBuildLimit = concurrentBuildLimit
            self.created = created
            self.description = description
            self.encryptionKey = encryptionKey
            self.environment = environment
            self.fileSystemLocations = fileSystemLocations
            self.lastModified = lastModified
            self.logsConfig = logsConfig
            self.name = name
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySourceVersions = secondarySourceVersions
            self.secondarySources = secondarySources
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.tags = tags
            self.timeoutInMinutes = timeoutInMinutes
            self.vpcConfig = vpcConfig
            self.webhook = webhook
        }
    }

}

extension CodeBuildClientTypes.ProjectArtifacts: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactIdentifier
        case bucketOwnerAccess
        case encryptionDisabled
        case location
        case name
        case namespaceType
        case overrideArtifactName
        case packaging
        case path
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactIdentifier = artifactIdentifier {
            try encodeContainer.encode(artifactIdentifier, forKey: .artifactIdentifier)
        }
        if let bucketOwnerAccess = bucketOwnerAccess {
            try encodeContainer.encode(bucketOwnerAccess.rawValue, forKey: .bucketOwnerAccess)
        }
        if let encryptionDisabled = encryptionDisabled {
            try encodeContainer.encode(encryptionDisabled, forKey: .encryptionDisabled)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let namespaceType = namespaceType {
            try encodeContainer.encode(namespaceType.rawValue, forKey: .namespaceType)
        }
        if let overrideArtifactName = overrideArtifactName {
            try encodeContainer.encode(overrideArtifactName, forKey: .overrideArtifactName)
        }
        if let packaging = packaging {
            try encodeContainer.encode(packaging.rawValue, forKey: .packaging)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ArtifactsType.self, forKey: .type)
        type = typeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let namespaceTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ArtifactNamespace.self, forKey: .namespaceType)
        namespaceType = namespaceTypeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let packagingDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ArtifactPackaging.self, forKey: .packaging)
        packaging = packagingDecoded
        let overrideArtifactNameDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .overrideArtifactName)
        overrideArtifactName = overrideArtifactNameDecoded
        let encryptionDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encryptionDisabled)
        encryptionDisabled = encryptionDisabledDecoded
        let artifactIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactIdentifier)
        artifactIdentifier = artifactIdentifierDecoded
        let bucketOwnerAccessDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BucketOwnerAccess.self, forKey: .bucketOwnerAccess)
        bucketOwnerAccess = bucketOwnerAccessDecoded
    }
}

extension CodeBuildClientTypes.ProjectArtifacts: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProjectArtifacts(artifactIdentifier: \(Swift.String(describing: artifactIdentifier)), bucketOwnerAccess: \(Swift.String(describing: bucketOwnerAccess)), encryptionDisabled: \(Swift.String(describing: encryptionDisabled)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), namespaceType: \(Swift.String(describing: namespaceType)), overrideArtifactName: \(Swift.String(describing: overrideArtifactName)), packaging: \(Swift.String(describing: packaging)), path: \(Swift.String(describing: path)), type: \(Swift.String(describing: type)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about the build output artifacts for the build project.</p>
    public struct ProjectArtifacts: Swift.Equatable {
        /// <p> An identifier for this artifact definition. </p>
        public let artifactIdentifier: Swift.String?
        /// <p>Specifies the access for objects that are uploaded to an Amazon S3 bucket that is owned by
        ///             another account.</p>
        ///         <p>By default, only the account that uploads the objects to the bucket has access to
        ///             these objects. This property allows you to give the bucket owner access to these
        ///             objects.</p>
        ///          <dl>
        ///             <dt>NONE</dt>
        ///             <dd>
        ///                 <p>The bucket owner does not have access to the objects. This is the
        ///                         default.</p>
        ///             </dd>
        ///             <dt>READ_ONLY</dt>
        ///             <dd>
        ///               <p>The bucket owner has read only access to the objects. The uploading account
        ///                         retains ownership of the objects.</p>
        ///             </dd>
        ///             <dt>FULL</dt>
        ///             <dd>
        ///               <p>The bucket owner has full access to the objects. Object ownership is determined
        ///                         by the following criteria:</p>
        ///                     <ul>
        ///                   <li>
        ///                             <p>If the bucket is configured with the <b>Bucket
        ///                                     owner preferred</b> setting, the bucket owner owns the
        ///                                 objects. The uploading account will have object access as specified
        ///                                 by the bucket's policy.</p>
        ///                         </li>
        ///                   <li>
        ///                             <p>Otherwise, the uploading account retains ownership of the
        ///                                 objects.</p>
        ///                         </li>
        ///                </ul>
        ///                     <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3
        ///                             Object Ownership</a> in the <i>Amazon Simple Storage Service User
        ///                         Guide</i>.</p>
        ///             </dd>
        ///          </dl>
        public let bucketOwnerAccess: CodeBuildClientTypes.BucketOwnerAccess?
        /// <p> Set to true if you do not want your output artifacts encrypted. This option is valid
        ///             only if your artifacts type is Amazon S3. If this is set with another artifacts type, an
        ///             invalidInputException is thrown. </p>
        public let encryptionDisabled: Swift.Bool?
        /// <p>Information about the build output artifact location:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>CODEPIPELINE</code>, AWS CodePipeline ignores this
        ///                     value if specified. This is because AWS CodePipeline manages its build output locations
        ///                     instead of AWS CodeBuild.</p>
        ///             </li>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>NO_ARTIFACTS</code>, this value is
        ///                     ignored if specified, because no build output is produced.</p>
        ///             </li>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>S3</code>, this is the name of the output
        ///                     bucket.</p>
        ///             </li>
        ///          </ul>
        public let location: Swift.String?
        /// <p>Along with <code>path</code> and <code>namespaceType</code>, the pattern that AWS CodeBuild
        ///             uses to name and store the output artifact:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>CODEPIPELINE</code>, AWS CodePipeline ignores this
        ///                     value if specified. This is because AWS CodePipeline manages its build output names instead
        ///                     of AWS CodeBuild.</p>
        ///             </li>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>NO_ARTIFACTS</code>, this value is
        ///                     ignored if specified, because no build output is produced.</p>
        ///             </li>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>S3</code>, this is the name of the output
        ///                     artifact object. If you set the name to be a forward slash ("/"), the artifact
        ///                     is stored in the root of the output bucket.</p>
        ///             </li>
        ///          </ul>
        ///         <p>For example:</p>
        ///         <ul>
        ///             <li>
        ///                 <p> If <code>path</code> is set to <code>MyArtifacts</code>,
        ///                         <code>namespaceType</code> is set to <code>BUILD_ID</code>, and
        ///                         <code>name</code> is set to <code>MyArtifact.zip</code>, then the output
        ///                     artifact is stored in <code>MyArtifacts/<build-ID>/MyArtifact.zip</code>. </p>
        ///             </li>
        ///             <li>
        ///                 <p> If <code>path</code> is empty, <code>namespaceType</code> is set to
        ///                         <code>NONE</code>, and <code>name</code> is set to "<code>/</code>", the
        ///                     output artifact is stored in the root of the output bucket. </p>
        ///             </li>
        ///             <li>
        ///                 <p> If <code>path</code> is set to <code>MyArtifacts</code>,
        ///                         <code>namespaceType</code> is set to <code>BUILD_ID</code>, and
        ///                         <code>name</code> is set to "<code>/</code>", the output artifact is stored
        ///                     in <code>MyArtifacts/<build-ID></code>. </p>
        ///             </li>
        ///          </ul>
        public let name: Swift.String?
        /// <p>Along with <code>path</code> and <code>name</code>, the pattern that AWS CodeBuild uses to
        ///             determine the name and location to store the output artifact:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>CODEPIPELINE</code>, AWS CodePipeline ignores this
        ///                     value if specified. This is because AWS CodePipeline manages its build output names instead
        ///                     of AWS CodeBuild.</p>
        ///             </li>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>NO_ARTIFACTS</code>, this value is
        ///                     ignored if specified, because no build output is produced.</p>
        ///             </li>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>S3</code>, valid values include:</p>
        ///                 <ul>
        ///                   <li>
        ///                         <p>
        ///                         <code>BUILD_ID</code>: Include the build ID in the location of the
        ///                             build output artifact.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <code>NONE</code>: Do not include the build ID. This is the default if
        ///                                 <code>namespaceType</code> is not specified.</p>
        ///                     </li>
        ///                </ul>
        ///             </li>
        ///          </ul>
        ///         <p>For example, if <code>path</code> is set to <code>MyArtifacts</code>,
        ///                 <code>namespaceType</code> is set to <code>BUILD_ID</code>, and <code>name</code> is
        ///             set to <code>MyArtifact.zip</code>, the output artifact is stored in
        ///                 <code>MyArtifacts/<build-ID>/MyArtifact.zip</code>.</p>
        public let namespaceType: CodeBuildClientTypes.ArtifactNamespace?
        /// <p> If this flag is set, a name specified in the buildspec file overrides the artifact
        ///             name. The name specified in a buildspec file is calculated at build time and uses the
        ///             Shell Command Language. For example, you can append a date and time to your artifact
        ///             name so that it is always unique. </p>
        public let overrideArtifactName: Swift.Bool?
        /// <p>The type of build output artifact to create:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>CODEPIPELINE</code>, AWS CodePipeline ignores this
        ///                     value if specified. This is because AWS CodePipeline manages its build output artifacts
        ///                     instead of AWS CodeBuild.</p>
        ///             </li>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>NO_ARTIFACTS</code>, this value is
        ///                     ignored if specified, because no build output is produced.</p>
        ///             </li>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>S3</code>, valid values include:</p>
        ///                 <ul>
        ///                   <li>
        ///                         <p>
        ///                         <code>NONE</code>: AWS CodeBuild creates in the output bucket a folder that
        ///                             contains the build output. This is the default if <code>packaging</code>
        ///                             is not specified.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <code>ZIP</code>: AWS CodeBuild creates in the output bucket a ZIP file that
        ///                             contains the build output.</p>
        ///                     </li>
        ///                </ul>
        ///             </li>
        ///          </ul>
        public let packaging: CodeBuildClientTypes.ArtifactPackaging?
        /// <p>Along with <code>namespaceType</code> and <code>name</code>, the pattern that AWS CodeBuild
        ///             uses to name and store the output artifact:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>CODEPIPELINE</code>, AWS CodePipeline ignores this
        ///                     value if specified. This is because AWS CodePipeline manages its build output names instead
        ///                     of AWS CodeBuild.</p>
        ///             </li>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>NO_ARTIFACTS</code>, this value is
        ///                     ignored if specified, because no build output is produced.</p>
        ///             </li>
        ///             <li>
        ///                 <p>If <code>type</code> is set to <code>S3</code>, this is the path to the output
        ///                     artifact. If <code>path</code> is not specified, <code>path</code> is not
        ///                     used.</p>
        ///             </li>
        ///          </ul>
        ///         <p>For example, if <code>path</code> is set to <code>MyArtifacts</code>,
        ///                 <code>namespaceType</code> is set to <code>NONE</code>, and <code>name</code> is set
        ///             to <code>MyArtifact.zip</code>, the output artifact is stored in the output bucket at
        ///                 <code>MyArtifacts/MyArtifact.zip</code>.</p>
        public let path: Swift.String?
        /// <p>The type of build output artifact. Valid values include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>CODEPIPELINE</code>: The build project has build output generated
        ///                     through AWS CodePipeline. </p>
        ///                 <note>
        ///                     <p>The <code>CODEPIPELINE</code> type is not supported for
        ///                             <code>secondaryArtifacts</code>.</p>
        ///                 </note>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>NO_ARTIFACTS</code>: The build project does not produce any build
        ///                     output.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>S3</code>: The build project stores build output in Amazon S3.</p>
        ///             </li>
        ///          </ul>
        public let type: CodeBuildClientTypes.ArtifactsType?

        public init (
            artifactIdentifier: Swift.String? = nil,
            bucketOwnerAccess: CodeBuildClientTypes.BucketOwnerAccess? = nil,
            encryptionDisabled: Swift.Bool? = nil,
            location: Swift.String? = nil,
            name: Swift.String? = nil,
            namespaceType: CodeBuildClientTypes.ArtifactNamespace? = nil,
            overrideArtifactName: Swift.Bool? = nil,
            packaging: CodeBuildClientTypes.ArtifactPackaging? = nil,
            path: Swift.String? = nil,
            type: CodeBuildClientTypes.ArtifactsType? = nil
        )
        {
            self.artifactIdentifier = artifactIdentifier
            self.bucketOwnerAccess = bucketOwnerAccess
            self.encryptionDisabled = encryptionDisabled
            self.location = location
            self.name = name
            self.namespaceType = namespaceType
            self.overrideArtifactName = overrideArtifactName
            self.packaging = packaging
            self.path = path
            self.type = type
        }
    }

}

extension CodeBuildClientTypes.ProjectBadge: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case badgeEnabled
        case badgeRequestUrl
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if badgeEnabled != false {
            try encodeContainer.encode(badgeEnabled, forKey: .badgeEnabled)
        }
        if let badgeRequestUrl = badgeRequestUrl {
            try encodeContainer.encode(badgeRequestUrl, forKey: .badgeRequestUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let badgeEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .badgeEnabled)
        badgeEnabled = badgeEnabledDecoded
        let badgeRequestUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .badgeRequestUrl)
        badgeRequestUrl = badgeRequestUrlDecoded
    }
}

extension CodeBuildClientTypes.ProjectBadge: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProjectBadge(badgeEnabled: \(Swift.String(describing: badgeEnabled)), badgeRequestUrl: \(Swift.String(describing: badgeRequestUrl)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about the build badge for the build project.</p>
    public struct ProjectBadge: Swift.Equatable {
        /// <p>Set this to true to generate a publicly accessible URL for your project's build
        ///             badge.</p>
        public let badgeEnabled: Swift.Bool
        /// <p>The publicly-accessible URL through which you can access the build badge for your
        ///             project. </p>
        public let badgeRequestUrl: Swift.String?

        public init (
            badgeEnabled: Swift.Bool = false,
            badgeRequestUrl: Swift.String? = nil
        )
        {
            self.badgeEnabled = badgeEnabled
            self.badgeRequestUrl = badgeRequestUrl
        }
    }

}

extension CodeBuildClientTypes.ProjectBuildBatchConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case combineArtifacts
        case restrictions
        case serviceRole
        case timeoutInMins
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let combineArtifacts = combineArtifacts {
            try encodeContainer.encode(combineArtifacts, forKey: .combineArtifacts)
        }
        if let restrictions = restrictions {
            try encodeContainer.encode(restrictions, forKey: .restrictions)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let timeoutInMins = timeoutInMins {
            try encodeContainer.encode(timeoutInMins, forKey: .timeoutInMins)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let combineArtifactsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .combineArtifacts)
        combineArtifacts = combineArtifactsDecoded
        let restrictionsDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BatchRestrictions.self, forKey: .restrictions)
        restrictions = restrictionsDecoded
        let timeoutInMinsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInMins)
        timeoutInMins = timeoutInMinsDecoded
    }
}

extension CodeBuildClientTypes.ProjectBuildBatchConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProjectBuildBatchConfig(combineArtifacts: \(Swift.String(describing: combineArtifacts)), restrictions: \(Swift.String(describing: restrictions)), serviceRole: \(Swift.String(describing: serviceRole)), timeoutInMins: \(Swift.String(describing: timeoutInMins)))"}
}

extension CodeBuildClientTypes {
    /// <p>Contains configuration information about a batch build project.</p>
    public struct ProjectBuildBatchConfig: Swift.Equatable {
        /// <p>Specifies if the build artifacts for the batch build should be combined into a single
        ///             artifact location.</p>
        public let combineArtifacts: Swift.Bool?
        /// <p>A <code>BatchRestrictions</code> object that specifies the restrictions for the batch
        ///             build.</p>
        public let restrictions: CodeBuildClientTypes.BatchRestrictions?
        /// <p>Specifies the service role ARN for the batch build project.</p>
        public let serviceRole: Swift.String?
        /// <p>Specifies the maximum amount of time, in minutes, that the batch build must be completed in.</p>
        public let timeoutInMins: Swift.Int?

        public init (
            combineArtifacts: Swift.Bool? = nil,
            restrictions: CodeBuildClientTypes.BatchRestrictions? = nil,
            serviceRole: Swift.String? = nil,
            timeoutInMins: Swift.Int? = nil
        )
        {
            self.combineArtifacts = combineArtifacts
            self.restrictions = restrictions
            self.serviceRole = serviceRole
            self.timeoutInMins = timeoutInMins
        }
    }

}

extension CodeBuildClientTypes.ProjectCache: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case location
        case modes
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let modes = modes {
            var modesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .modes)
            for projectcachemodes0 in modes {
                try modesContainer.encode(projectcachemodes0.rawValue)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.CacheType.self, forKey: .type)
        type = typeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let modesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.CacheMode?].self, forKey: .modes)
        var modesDecoded0:[CodeBuildClientTypes.CacheMode]? = nil
        if let modesContainer = modesContainer {
            modesDecoded0 = [CodeBuildClientTypes.CacheMode]()
            for string0 in modesContainer {
                if let string0 = string0 {
                    modesDecoded0?.append(string0)
                }
            }
        }
        modes = modesDecoded0
    }
}

extension CodeBuildClientTypes.ProjectCache: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProjectCache(location: \(Swift.String(describing: location)), modes: \(Swift.String(describing: modes)), type: \(Swift.String(describing: type)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about the cache for the build project.</p>
    public struct ProjectCache: Swift.Equatable {
        /// <p>Information about the cache location: </p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>NO_CACHE</code> or <code>LOCAL</code>: This value is ignored.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>S3</code>: This is the S3 bucket name/prefix.</p>
        ///             </li>
        ///          </ul>
        public let location: Swift.String?
        /// <p>An array of strings that specify the local cache modes. You can use one or more local
        ///             cache modes at the same time. This is only used for <code>LOCAL</code> cache
        ///             types.</p>
        ///         <p>Possible values are:</p>
        ///         <dl>
        ///             <dt>LOCAL_SOURCE_CACHE</dt>
        ///             <dd>
        ///                     <p>Caches Git metadata for primary and secondary sources. After the cache is
        ///                         created, subsequent builds pull only the change between commits. This mode
        ///                         is a good choice for projects with a clean working directory and a source
        ///                         that is a large Git repository. If you choose this option and your project
        ///                         does not use a Git repository (GitHub, GitHub Enterprise, or Bitbucket), the
        ///                         option is ignored. </p>
        ///                 </dd>
        ///             <dt>LOCAL_DOCKER_LAYER_CACHE</dt>
        ///             <dd>
        ///                     <p>Caches existing Docker layers. This mode is a good choice for projects
        ///                         that build or pull large Docker images. It can prevent the performance
        ///                         issues caused by pulling large Docker images down from the network. </p>
        ///                     <note>
        ///                         <ul>
        ///                      <li>
        ///                                 <p>You can use a Docker layer cache in the Linux environment
        ///                                     only. </p>
        ///                             </li>
        ///                      <li>
        ///                                 <p>The <code>privileged</code> flag must be set so that your
        ///                                     project has the required Docker permissions. </p>
        ///                             </li>
        ///                      <li>
        ///                                 <p>You should consider the security implications before you use a
        ///                                     Docker layer cache. </p>
        ///                             </li>
        ///                   </ul>
        ///                     </note>
        ///                 </dd>
        ///             <dt>LOCAL_CUSTOM_CACHE</dt>
        ///             <dd>
        ///                     <p>Caches directories you specify in the buildspec file. This mode is a good
        ///                         choice if your build scenario is not suited to one of the other three local
        ///                         cache modes. If you use a custom cache: </p>
        ///                     <ul>
        ///                   <li>
        ///                             <p>Only directories can be specified for caching. You cannot specify
        ///                                 individual files. </p>
        ///                         </li>
        ///                   <li>
        ///                             <p>Symlinks are used to reference cached directories. </p>
        ///                         </li>
        ///                   <li>
        ///                             <p>Cached directories are linked to your build before it downloads
        ///                                 its project sources. Cached items are overridden if a source item
        ///                                 has the same name. Directories are specified using cache paths in
        ///                                 the buildspec file. </p>
        ///                         </li>
        ///                </ul>
        ///                 </dd>
        ///          </dl>
        public let modes: [CodeBuildClientTypes.CacheMode]?
        /// <p>The type of cache used by the build project. Valid values include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>NO_CACHE</code>: The build project does not use any cache.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>S3</code>: The build project reads and writes from and to S3.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>LOCAL</code>: The build project stores a cache locally on a build host
        ///                     that is only available to that build host.</p>
        ///             </li>
        ///          </ul>
        public let type: CodeBuildClientTypes.CacheType?

        public init (
            location: Swift.String? = nil,
            modes: [CodeBuildClientTypes.CacheMode]? = nil,
            type: CodeBuildClientTypes.CacheType? = nil
        )
        {
            self.location = location
            self.modes = modes
            self.type = type
        }
    }

}

extension CodeBuildClientTypes.ProjectEnvironment: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate
        case computeType
        case environmentVariables
        case image
        case imagePullCredentialsType
        case privilegedMode
        case registryCredential
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificate = certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let computeType = computeType {
            try encodeContainer.encode(computeType.rawValue, forKey: .computeType)
        }
        if let environmentVariables = environmentVariables {
            var environmentVariablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environmentVariables)
            for environmentvariables0 in environmentVariables {
                try environmentVariablesContainer.encode(environmentvariables0)
            }
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let imagePullCredentialsType = imagePullCredentialsType {
            try encodeContainer.encode(imagePullCredentialsType.rawValue, forKey: .imagePullCredentialsType)
        }
        if let privilegedMode = privilegedMode {
            try encodeContainer.encode(privilegedMode, forKey: .privilegedMode)
        }
        if let registryCredential = registryCredential {
            try encodeContainer.encode(registryCredential, forKey: .registryCredential)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.EnvironmentType.self, forKey: .type)
        type = typeDecoded
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let computeTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ComputeType.self, forKey: .computeType)
        computeType = computeTypeDecoded
        let environmentVariablesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.EnvironmentVariable?].self, forKey: .environmentVariables)
        var environmentVariablesDecoded0:[CodeBuildClientTypes.EnvironmentVariable]? = nil
        if let environmentVariablesContainer = environmentVariablesContainer {
            environmentVariablesDecoded0 = [CodeBuildClientTypes.EnvironmentVariable]()
            for structure0 in environmentVariablesContainer {
                if let structure0 = structure0 {
                    environmentVariablesDecoded0?.append(structure0)
                }
            }
        }
        environmentVariables = environmentVariablesDecoded0
        let privilegedModeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privilegedMode)
        privilegedMode = privilegedModeDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificate)
        certificate = certificateDecoded
        let registryCredentialDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.RegistryCredential.self, forKey: .registryCredential)
        registryCredential = registryCredentialDecoded
        let imagePullCredentialsTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ImagePullCredentialsType.self, forKey: .imagePullCredentialsType)
        imagePullCredentialsType = imagePullCredentialsTypeDecoded
    }
}

extension CodeBuildClientTypes.ProjectEnvironment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProjectEnvironment(certificate: \(Swift.String(describing: certificate)), computeType: \(Swift.String(describing: computeType)), environmentVariables: \(Swift.String(describing: environmentVariables)), image: \(Swift.String(describing: image)), imagePullCredentialsType: \(Swift.String(describing: imagePullCredentialsType)), privilegedMode: \(Swift.String(describing: privilegedMode)), registryCredential: \(Swift.String(describing: registryCredential)), type: \(Swift.String(describing: type)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about the build environment of the build project.</p>
    public struct ProjectEnvironment: Swift.Equatable {
        /// <p>The ARN of the Amazon S3 bucket, path prefix, and object key that contains the PEM-encoded
        ///             certificate for the build project. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/create-project-cli.html#cli.environment.certificate">certificate</a> in the
        ///                 <i>AWS CodeBuild User Guide</i>.</p>
        public let certificate: Swift.String?
        /// <p>Information about the compute resources the build project uses. Available values
        ///             include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>BUILD_GENERAL1_SMALL</code>: Use up to 3 GB memory and 2 vCPUs for
        ///                     builds.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>BUILD_GENERAL1_MEDIUM</code>: Use up to 7 GB memory and 4 vCPUs for
        ///                     builds.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>BUILD_GENERAL1_LARGE</code>: Use up to 16 GB memory and 8 vCPUs for
        ///                     builds, depending on your environment type.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>BUILD_GENERAL1_2XLARGE</code>: Use up to 145 GB memory, 72 vCPUs, and
        ///                     824 GB of SSD storage for builds. This compute type supports Docker images up to
        ///                     100 GB uncompressed.</p>
        ///             </li>
        ///          </ul>
        ///         <p> If you use <code>BUILD_GENERAL1_LARGE</code>: </p>
        ///         <ul>
        ///             <li>
        ///                 <p> For environment type <code>LINUX_CONTAINER</code>, you can use up to 15 GB
        ///                     memory and 8 vCPUs for builds. </p>
        ///             </li>
        ///             <li>
        ///                 <p> For environment type <code>LINUX_GPU_CONTAINER</code>, you can use up to 255
        ///                     GB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.</p>
        ///             </li>
        ///             <li>
        ///                 <p> For environment type <code>ARM_CONTAINER</code>, you can use up to 16 GB
        ///                     memory and 8 vCPUs on ARM-based processors for builds.</p>
        ///             </li>
        ///          </ul>
        ///         <p> For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html">Build Environment
        ///                 Compute Types</a> in the <i>AWS CodeBuild User Guide.</i>
        ///         </p>
        public let computeType: CodeBuildClientTypes.ComputeType?
        /// <p>A set of environment variables to make available to builds for this build
        ///             project.</p>
        public let environmentVariables: [CodeBuildClientTypes.EnvironmentVariable]?
        /// <p>The image tag or image digest that identifies the Docker image to use for this build
        ///             project. Use the following formats:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>For an image tag: <code><registry>/<repository>:<tag></code>. For
        ///                     example, in the Docker repository that CodeBuild uses to manage its Docker
        ///                     images, this would be <code>aws/codebuild/standard:4.0</code>. </p>
        ///             </li>
        ///             <li>
        ///                 <p>For an image digest: <code><registry>/<repository>@<digest></code>.
        ///                     For example, to specify an image with the digest
        ///                     "sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf," use
        ///                         <code><registry>/<repository>@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf</code>.</p>
        ///             </li>
        ///          </ul>
        public let image: Swift.String?
        /// <p> The type of credentials AWS CodeBuild uses to pull images in your build. There are two valid
        ///             values: </p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                     <code>CODEBUILD</code> specifies that AWS CodeBuild uses its own credentials.
        ///                     This requires that you modify your ECR repository policy to trust AWS
        ///                     CodeBuild's service principal. </p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                     <code>SERVICE_ROLE</code> specifies that AWS CodeBuild uses your build project's service
        ///                     role. </p>
        ///             </li>
        ///          </ul>
        ///         <p> When you use a cross-account or private registry image, you must use SERVICE_ROLE
        ///             credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials.
        ///         </p>
        public let imagePullCredentialsType: CodeBuildClientTypes.ImagePullCredentialsType?
        /// <p>Enables running the Docker daemon inside a Docker container. Set to true only if the
        ///             build project is used to build Docker images. Otherwise, a build that attempts to
        ///             interact with the Docker daemon fails. The default setting is <code>false</code>.</p>
        ///         <p>You can initialize the Docker daemon during the install phase of your build by adding
        ///             one of the following sets of commands to the install phase of your buildspec
        ///             file:</p>
        ///         <p>If the operating system's base image is Ubuntu Linux:</p>
        ///         <p>
        ///             <code>- nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&</code>
        ///         </p>
        ///         <p>
        ///             <code>- timeout 15 sh -c "until docker info; do echo .; sleep 1; done"</code>
        ///         </p>
        ///         <p>If the operating system's base image is Alpine Linux and the previous command does not
        ///             work, add the <code>-t</code> argument to <code>timeout</code>:</p>
        ///         <p>
        ///             <code>- nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&</code>
        ///          </p>
        ///         <p>
        ///             <code>- timeout -t 15 sh -c "until docker info; do echo .; sleep 1; done"</code>
        ///         </p>
        public let privilegedMode: Swift.Bool?
        /// <p> The credentials for access to a private registry.</p>
        public let registryCredential: CodeBuildClientTypes.RegistryCredential?
        /// <p>The type of build environment to use for related builds.</p>
        ///         <ul>
        ///             <li>
        ///                 <p>The environment type <code>ARM_CONTAINER</code> is available only in regions
        ///                     US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland),
        ///                     Asia Pacific (Mumbai), Asia Pacific (Tokyo), Asia Pacific (Sydney), and
        ///                     EU (Frankfurt).</p>
        ///             </li>
        ///             <li>
        ///                 <p>The environment type <code>LINUX_CONTAINER</code> with compute type
        ///                         <code>build.general1.2xlarge</code> is available only in regions
        ///                     US East (N. Virginia), US East (Ohio), US West (Oregon),
        ///                     Canada (Central), EU (Ireland), EU (London),
        ///                     EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul),
        ///                     Asia Pacific (Singapore), Asia Pacific (Sydney), China (Beijing), and
        ///                     China (Ningxia).</p>
        ///             </li>
        ///             <li>
        ///                 <p>The environment type <code>LINUX_GPU_CONTAINER</code> is available only in
        ///                     regions US East (N. Virginia), US East (Ohio), US West (Oregon),
        ///                     Canada (Central), EU (Ireland), EU (London),
        ///                     EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul),
        ///                     Asia Pacific (Singapore), Asia Pacific (Sydney) , China (Beijing), and
        ///                     China (Ningxia).</p>
        ///             </li>
        ///          </ul>
        public let type: CodeBuildClientTypes.EnvironmentType?

        public init (
            certificate: Swift.String? = nil,
            computeType: CodeBuildClientTypes.ComputeType? = nil,
            environmentVariables: [CodeBuildClientTypes.EnvironmentVariable]? = nil,
            image: Swift.String? = nil,
            imagePullCredentialsType: CodeBuildClientTypes.ImagePullCredentialsType? = nil,
            privilegedMode: Swift.Bool? = nil,
            registryCredential: CodeBuildClientTypes.RegistryCredential? = nil,
            type: CodeBuildClientTypes.EnvironmentType? = nil
        )
        {
            self.certificate = certificate
            self.computeType = computeType
            self.environmentVariables = environmentVariables
            self.image = image
            self.imagePullCredentialsType = imagePullCredentialsType
            self.privilegedMode = privilegedMode
            self.registryCredential = registryCredential
            self.type = type
        }
    }

}

extension CodeBuildClientTypes.ProjectFileSystemLocation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier
        case location
        case mountOptions
        case mountPoint
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identifier = identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let mountOptions = mountOptions {
            try encodeContainer.encode(mountOptions, forKey: .mountOptions)
        }
        if let mountPoint = mountPoint {
            try encodeContainer.encode(mountPoint, forKey: .mountPoint)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.FileSystemType.self, forKey: .type)
        type = typeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let mountPointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mountPoint)
        mountPoint = mountPointDecoded
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
        let mountOptionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
    }
}

extension CodeBuildClientTypes.ProjectFileSystemLocation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProjectFileSystemLocation(identifier: \(Swift.String(describing: identifier)), location: \(Swift.String(describing: location)), mountOptions: \(Swift.String(describing: mountOptions)), mountPoint: \(Swift.String(describing: mountPoint)), type: \(Swift.String(describing: type)))"}
}

extension CodeBuildClientTypes {
    /// <p> Information about a file system created by Amazon Elastic File System (EFS). For more
    ///             information, see <a href="https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html">What Is
    ///                 Amazon Elastic File System?</a>
    ///         </p>
    public struct ProjectFileSystemLocation: Swift.Equatable {
        /// <p>The name used to access a file system created by Amazon EFS. CodeBuild creates an
        ///             environment variable by appending the <code>identifier</code> in all capital letters to
        ///                 <code>CODEBUILD_</code>. For example, if you specify <code>my_efs</code> for
        ///                 <code>identifier</code>, a new environment variable is create named
        ///                 <code>CODEBUILD_MY_EFS</code>. </p>
        ///         <p> The <code>identifier</code> is used to mount your file system. </p>
        public let identifier: Swift.String?
        /// <p>A string that specifies the location of the file system created by Amazon EFS. Its
        ///             format is <code>efs-dns-name:/directory-path</code>. You can find the DNS name of file
        ///             system when you view it in the AWS EFS console. The directory path is a path to a
        ///             directory in the file system that CodeBuild mounts. For example, if the DNS name of a
        ///             file system is <code>fs-abcd1234.efs.us-west-2.amazonaws.com</code>, and its mount
        ///             directory is <code>my-efs-mount-directory</code>, then the <code>location</code> is
        ///                 <code>fs-abcd1234.efs.us-west-2.amazonaws.com:/my-efs-mount-directory</code>. </p>
        ///         <p>The directory path in the format <code>efs-dns-name:/directory-path</code> is
        ///             optional. If you do not specify a directory path, the location is only the DNS name and
        ///             CodeBuild mounts the entire file system. </p>
        public let location: Swift.String?
        /// <p> The mount options for a file system created by AWS EFS. The default mount options
        ///             used by CodeBuild are
        ///                 <code>nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2</code>. For
        ///             more information, see <a href="https://docs.aws.amazon.com/efs/latest/ug/mounting-fs-nfs-mount-settings.html">Recommended NFS Mount
        ///                 Options</a>. </p>
        public let mountOptions: Swift.String?
        /// <p>The location in the container where you mount the file system. </p>
        public let mountPoint: Swift.String?
        /// <p> The type of the file system. The one supported type is <code>EFS</code>. </p>
        public let type: CodeBuildClientTypes.FileSystemType?

        public init (
            identifier: Swift.String? = nil,
            location: Swift.String? = nil,
            mountOptions: Swift.String? = nil,
            mountPoint: Swift.String? = nil,
            type: CodeBuildClientTypes.FileSystemType? = nil
        )
        {
            self.identifier = identifier
            self.location = location
            self.mountOptions = mountOptions
            self.mountPoint = mountPoint
            self.type = type
        }
    }

}

extension CodeBuildClientTypes {
    public enum ProjectSortByType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createdTime
        case lastModifiedTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectSortByType] {
            return [
                .createdTime,
                .lastModifiedTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createdTime: return "CREATED_TIME"
            case .lastModifiedTime: return "LAST_MODIFIED_TIME"
            case .name: return "NAME"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProjectSortByType(rawValue: rawValue) ?? ProjectSortByType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.ProjectSource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auth
        case buildStatusConfig
        case buildspec
        case gitCloneDepth
        case gitSubmodulesConfig
        case insecureSsl
        case location
        case reportBuildStatus
        case sourceIdentifier
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auth = auth {
            try encodeContainer.encode(auth, forKey: .auth)
        }
        if let buildStatusConfig = buildStatusConfig {
            try encodeContainer.encode(buildStatusConfig, forKey: .buildStatusConfig)
        }
        if let buildspec = buildspec {
            try encodeContainer.encode(buildspec, forKey: .buildspec)
        }
        if let gitCloneDepth = gitCloneDepth {
            try encodeContainer.encode(gitCloneDepth, forKey: .gitCloneDepth)
        }
        if let gitSubmodulesConfig = gitSubmodulesConfig {
            try encodeContainer.encode(gitSubmodulesConfig, forKey: .gitSubmodulesConfig)
        }
        if let insecureSsl = insecureSsl {
            try encodeContainer.encode(insecureSsl, forKey: .insecureSsl)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let reportBuildStatus = reportBuildStatus {
            try encodeContainer.encode(reportBuildStatus, forKey: .reportBuildStatus)
        }
        if let sourceIdentifier = sourceIdentifier {
            try encodeContainer.encode(sourceIdentifier, forKey: .sourceIdentifier)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SourceType.self, forKey: .type)
        type = typeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let gitCloneDepthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gitCloneDepth)
        gitCloneDepth = gitCloneDepthDecoded
        let gitSubmodulesConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.GitSubmodulesConfig.self, forKey: .gitSubmodulesConfig)
        gitSubmodulesConfig = gitSubmodulesConfigDecoded
        let buildspecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildspec)
        buildspec = buildspecDecoded
        let authDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SourceAuth.self, forKey: .auth)
        auth = authDecoded
        let reportBuildStatusDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reportBuildStatus)
        reportBuildStatus = reportBuildStatusDecoded
        let buildStatusConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BuildStatusConfig.self, forKey: .buildStatusConfig)
        buildStatusConfig = buildStatusConfigDecoded
        let insecureSslDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .insecureSsl)
        insecureSsl = insecureSslDecoded
        let sourceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceIdentifier)
        sourceIdentifier = sourceIdentifierDecoded
    }
}

extension CodeBuildClientTypes.ProjectSource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProjectSource(auth: \(Swift.String(describing: auth)), buildStatusConfig: \(Swift.String(describing: buildStatusConfig)), buildspec: \(Swift.String(describing: buildspec)), gitCloneDepth: \(Swift.String(describing: gitCloneDepth)), gitSubmodulesConfig: \(Swift.String(describing: gitSubmodulesConfig)), insecureSsl: \(Swift.String(describing: insecureSsl)), location: \(Swift.String(describing: location)), reportBuildStatus: \(Swift.String(describing: reportBuildStatus)), sourceIdentifier: \(Swift.String(describing: sourceIdentifier)), type: \(Swift.String(describing: type)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about the build input source code for the build project.</p>
    public struct ProjectSource: Swift.Equatable {
        /// <p>Information about the authorization settings for AWS CodeBuild to access the source code to be
        ///             built.</p>
        ///         <p>This information is for the AWS CodeBuild console's use only. Your code should not get or set
        ///             this information directly.</p>
        public let auth: CodeBuildClientTypes.SourceAuth?
        /// <p>Contains information that defines how the build project reports the build status to
        ///             the source provider. This option is only used when the source provider is
        ///                 <code>GITHUB</code>, <code>GITHUB_ENTERPRISE</code>, or
        ///             <code>BITBUCKET</code>.</p>
        public let buildStatusConfig: CodeBuildClientTypes.BuildStatusConfig?
        /// <p>The buildspec file declaration to use for the builds in this build project.</p>
        ///         <p> If this value is set, it can be either an inline buildspec definition, the path to an
        ///             alternate buildspec file relative to the value of the built-in
        ///                 <code>CODEBUILD_SRC_DIR</code> environment variable, or the path to an S3 bucket.
        ///             The bucket must be in the same AWS Region as the build project. Specify the buildspec
        ///             file using its ARN (for example,
        ///                 <code>arn:aws:s3:::my-codebuild-sample2/buildspec.yml</code>). If this value is not
        ///             provided or is set to an empty string, the source code must contain a buildspec file in
        ///             its root directory. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-name-storage">Buildspec File Name and Storage Location</a>. </p>
        public let buildspec: Swift.String?
        /// <p>Information about the Git clone depth for the build project.</p>
        public let gitCloneDepth: Swift.Int?
        /// <p> Information about the Git submodules configuration for the build project. </p>
        public let gitSubmodulesConfig: CodeBuildClientTypes.GitSubmodulesConfig?
        /// <p>Enable this flag to ignore SSL warnings while connecting to the project source
        ///           code.</p>
        public let insecureSsl: Swift.Bool?
        /// <p>Information about the location of the source code to be built. Valid values
        ///             include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>For source code settings that are specified in the source action of a pipeline
        ///                     in AWS CodePipeline, <code>location</code> should not be specified. If it is specified,
        ///                     AWS CodePipeline ignores it. This is because AWS CodePipeline uses the settings in a pipeline's source
        ///                     action instead of this value.</p>
        ///             </li>
        ///             <li>
        ///                 <p>For source code in an AWS CodeCommit repository, the HTTPS clone URL to the repository
        ///                     that contains the source code and the buildspec file (for example,
        ///                         <code>https://git-codecommit.<region-ID>.amazonaws.com/v1/repos/<repo-name></code>).</p>
        ///             </li>
        ///             <li>
        ///                 <p>For source code in an Amazon S3 input bucket, one of the following. </p>
        ///                 <ul>
        ///                   <li>
        ///                         <p>The path to the ZIP file that contains the source code (for example,
        ///                                 <code><bucket-name>/<path>/<object-name>.zip</code>). </p>
        ///                     </li>
        ///                   <li>
        ///                         <p>The path to the folder that contains the source code (for example,
        ///                                 <code><bucket-name>/<path-to-source-code>/<folder>/</code>). </p>
        ///                     </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                 <p>For source code in a GitHub repository, the HTTPS clone URL to the repository
        ///                     that contains the source and the buildspec file. You must connect your AWS
        ///                     account to your GitHub account. Use the AWS CodeBuild console to start creating a build
        ///                     project. When you use the console to connect (or reconnect) with GitHub, on the
        ///                     GitHub <b>Authorize application</b> page, for
        ///                         <b>Organization access</b>, choose <b>Request access</b> next to each repository you want to
        ///                     allow AWS CodeBuild to have access to, and then choose <b>Authorize
        ///                         application</b>. (After you have connected to your GitHub account,
        ///                     you do not need to finish creating the build project. You can leave the AWS CodeBuild
        ///                     console.) To instruct AWS CodeBuild to use this connection, in the <code>source</code>
        ///                     object, set the <code>auth</code> object's <code>type</code> value to
        ///                         <code>OAUTH</code>.</p>
        ///             </li>
        ///             <li>
        ///                 <p>For source code in a Bitbucket repository, the HTTPS clone URL to the
        ///                     repository that contains the source and the buildspec file. You must connect
        ///                     your AWS account to your Bitbucket account. Use the AWS CodeBuild console to start
        ///                     creating a build project. When you use the console to connect (or reconnect)
        ///                     with Bitbucket, on the Bitbucket <b>Confirm access to your
        ///                         account</b> page, choose <b>Grant
        ///                         access</b>. (After you have connected to your Bitbucket account, you
        ///                     do not need to finish creating the build project. You can leave the AWS CodeBuild
        ///                     console.) To instruct AWS CodeBuild to use this connection, in the <code>source</code>
        ///                     object, set the <code>auth</code> object's <code>type</code> value to
        ///                         <code>OAUTH</code>.</p>
        ///             </li>
        ///          </ul>
        public let location: Swift.String?
        /// <p> Set to true to report the status of a build's start and finish to your source
        ///             provider. This option is valid only when your source provider is GitHub, GitHub
        ///             Enterprise, or Bitbucket. If this is set and you use a different source provider, an
        ///             <code>invalidInputException</code> is thrown. </p>
        ///             <p>To be able to report the build status to the source provider, the user associated with the source provider must
        /// have write access to the repo. If the user does not have write access, the build status cannot be updated. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/access-tokens.html">Source provider access</a> in the <i>AWS CodeBuild User Guide</i>.</p>
        ///         <note>
        ///             <p> The status of a build triggered by a webhook is always reported to your source
        ///                 provider. </p>
        ///         </note>
        public let reportBuildStatus: Swift.Bool?
        /// <p>An identifier for this project source. The identifier can only contain
        ///           alphanumeric characters and underscores, and must be less than 128 characters in length. </p>
        public let sourceIdentifier: Swift.String?
        /// <p>The type of repository that contains the source code to be built. Valid values
        ///             include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>BITBUCKET</code>: The source code is in a Bitbucket repository.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>CODECOMMIT</code>: The source code is in an AWS CodeCommit repository.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>CODEPIPELINE</code>: The source code settings are specified in the
        ///                     source action of a pipeline in AWS CodePipeline.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>GITHUB</code>: The source code is in a GitHub or GitHub Enterprise Cloud
        ///                     repository.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>GITHUB_ENTERPRISE</code>: The source code is in a GitHub Enterprise
        ///                     Server repository.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>NO_SOURCE</code>: The project does not have input source code.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>S3</code>: The source code is in an Amazon S3 bucket.</p>
        ///             </li>
        ///          </ul>
        public let type: CodeBuildClientTypes.SourceType?

        public init (
            auth: CodeBuildClientTypes.SourceAuth? = nil,
            buildStatusConfig: CodeBuildClientTypes.BuildStatusConfig? = nil,
            buildspec: Swift.String? = nil,
            gitCloneDepth: Swift.Int? = nil,
            gitSubmodulesConfig: CodeBuildClientTypes.GitSubmodulesConfig? = nil,
            insecureSsl: Swift.Bool? = nil,
            location: Swift.String? = nil,
            reportBuildStatus: Swift.Bool? = nil,
            sourceIdentifier: Swift.String? = nil,
            type: CodeBuildClientTypes.SourceType? = nil
        )
        {
            self.auth = auth
            self.buildStatusConfig = buildStatusConfig
            self.buildspec = buildspec
            self.gitCloneDepth = gitCloneDepth
            self.gitSubmodulesConfig = gitSubmodulesConfig
            self.insecureSsl = insecureSsl
            self.location = location
            self.reportBuildStatus = reportBuildStatus
            self.sourceIdentifier = sourceIdentifier
            self.type = type
        }
    }

}

extension CodeBuildClientTypes.ProjectSourceVersion: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceIdentifier
        case sourceVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceIdentifier = sourceIdentifier {
            try encodeContainer.encode(sourceIdentifier, forKey: .sourceIdentifier)
        }
        if let sourceVersion = sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceIdentifier)
        sourceIdentifier = sourceIdentifierDecoded
        let sourceVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
    }
}

extension CodeBuildClientTypes.ProjectSourceVersion: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProjectSourceVersion(sourceIdentifier: \(Swift.String(describing: sourceIdentifier)), sourceVersion: \(Swift.String(describing: sourceVersion)))"}
}

extension CodeBuildClientTypes {
    /// <p> A source identifier and its corresponding version. </p>
    public struct ProjectSourceVersion: Swift.Equatable {
        /// <p>An identifier for a source in the build project. The identifier can only contain
        ///             alphanumeric characters and underscores, and must be less than 128 characters in length. </p>
        public let sourceIdentifier: Swift.String?
        /// <p>The source version for the corresponding source identifier. If specified, must be one
        ///           of:</p>
        ///          <ul>
        ///             <li>
        ///               <p>For AWS CodeCommit: the commit ID, branch, or Git tag to use.</p>
        ///             </li>
        ///             <li>
        ///               <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that
        ///                   corresponds to the version of the source code you want to build. If a pull
        ///                   request ID is specified, it must use the format <code>pr/pull-request-ID</code>
        ///                   (for example, <code>pr/25</code>). If a branch name is specified, the branch's
        ///                   HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is
        ///                   used.</p>
        ///             </li>
        ///             <li>
        ///               <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the
        ///                   version of the source code you want to build. If a branch name is specified, the
        ///                   branch's HEAD commit ID is used. If not specified, the default branch's HEAD
        ///                   commit ID is used.</p>
        ///             </li>
        ///             <li>
        ///               <p>For Amazon S3: the version ID of the object that represents the build input ZIP
        ///                   file to use.</p>
        ///             </li>
        ///          </ul>
        ///          <p> For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html">Source Version Sample
        ///               with CodeBuild</a> in the <i>AWS CodeBuild User Guide</i>. </p>
        public let sourceVersion: Swift.String?

        public init (
            sourceIdentifier: Swift.String? = nil,
            sourceVersion: Swift.String? = nil
        )
        {
            self.sourceIdentifier = sourceIdentifier
            self.sourceVersion = sourceVersion
        }
    }

}

public struct PutResourcePolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutResourcePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutResourcePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutResourcePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutResourcePolicyOutputError>
}

extension PutResourcePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutResourcePolicyInput(policy: \(Swift.String(describing: policy)), resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension PutResourcePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy
        case resourceArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policy = policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct PutResourcePolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutResourcePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutResourcePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutResourcePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutResourcePolicyOutputError>
}

public struct PutResourcePolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutResourcePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutResourcePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutResourcePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutResourcePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutResourcePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutResourcePolicyOutputError>
}

public struct PutResourcePolicyInput: Swift.Equatable {
    /// <p> A JSON-formatted resource policy. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/project-sharing.html#project-sharing-share">Sharing
    ///                 a Project</a> and <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/report-groups-sharing.html#report-groups-sharing-share">Sharing a Report Group</a> in the <i>AWS CodeBuild User Guide</i>.
    ///         </p>
    public let policy: Swift.String?
    /// <p> The ARN of the <code>Project</code> or <code>ReportGroup</code> resource you want to
    ///             associate with a resource policy. </p>
    public let resourceArn: Swift.String?

    public init (
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

struct PutResourcePolicyInputBody: Swift.Equatable {
    public let policy: Swift.String?
    public let resourceArn: Swift.String?
}

extension PutResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy
        case resourceArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension PutResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutResourcePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutResourcePolicyOutputResponse(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension PutResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutResourcePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceArn = output.resourceArn
        } else {
            self.resourceArn = nil
        }
    }
}

public struct PutResourcePolicyOutputResponse: Swift.Equatable {
    /// <p> The ARN of the <code>Project</code> or <code>ReportGroup</code> resource that is
    ///             associated with a resource policy. </p>
    public let resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct PutResourcePolicyOutputResponseBody: Swift.Equatable {
    public let resourceArn: Swift.String?
}

extension PutResourcePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension CodeBuildClientTypes.RegistryCredential: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case credential
        case credentialProvider
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let credential = credential {
            try encodeContainer.encode(credential, forKey: .credential)
        }
        if let credentialProvider = credentialProvider {
            try encodeContainer.encode(credentialProvider.rawValue, forKey: .credentialProvider)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let credentialDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .credential)
        credential = credentialDecoded
        let credentialProviderDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.CredentialProviderType.self, forKey: .credentialProvider)
        credentialProvider = credentialProviderDecoded
    }
}

extension CodeBuildClientTypes.RegistryCredential: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegistryCredential(credential: \(Swift.String(describing: credential)), credentialProvider: \(Swift.String(describing: credentialProvider)))"}
}

extension CodeBuildClientTypes {
    /// <p> Information about credentials that provide access to a private Docker registry. When
    ///             this is set: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>imagePullCredentialsType</code> must be set to <code>SERVICE_ROLE</code>.
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p> images cannot be curated or an Amazon ECR image.</p>
    ///             </li>
    ///          </ul>
    ///         <p> For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-private-registry.html">Private Registry with
    ///                 AWS Secrets Manager Sample for AWS CodeBuild</a>. </p>
    public struct RegistryCredential: Swift.Equatable {
        /// <p> The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager. </p>
        ///         <note>
        ///             <p> The <code>credential</code> can use the name of the credentials only if they
        ///                 exist in your current AWS Region. </p>
        ///         </note>
        public let credential: Swift.String?
        /// <p> The service that created the credentials to access a private Docker registry. The
        ///             valid value, SECRETS_MANAGER, is for AWS Secrets Manager. </p>
        public let credentialProvider: CodeBuildClientTypes.CredentialProviderType?

        public init (
            credential: Swift.String? = nil,
            credentialProvider: CodeBuildClientTypes.CredentialProviderType? = nil
        )
        {
            self.credential = credential
            self.credentialProvider = credentialProvider
        }
    }

}

extension CodeBuildClientTypes.Report: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case codeCoverageSummary
        case created
        case executionId
        case expired
        case exportConfig
        case name
        case reportGroupArn
        case status
        case testSummary
        case truncated
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let codeCoverageSummary = codeCoverageSummary {
            try encodeContainer.encode(codeCoverageSummary, forKey: .codeCoverageSummary)
        }
        if let created = created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let executionId = executionId {
            try encodeContainer.encode(executionId, forKey: .executionId)
        }
        if let expired = expired {
            try encodeContainer.encode(expired.timeIntervalSince1970, forKey: .expired)
        }
        if let exportConfig = exportConfig {
            try encodeContainer.encode(exportConfig, forKey: .exportConfig)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let reportGroupArn = reportGroupArn {
            try encodeContainer.encode(reportGroupArn, forKey: .reportGroupArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let testSummary = testSummary {
            try encodeContainer.encode(testSummary, forKey: .testSummary)
        }
        if let truncated = truncated {
            try encodeContainer.encode(truncated, forKey: .truncated)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportType.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let reportGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportGroupArn)
        reportGroupArn = reportGroupArnDecoded
        let executionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionId)
        executionId = executionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportStatusType.self, forKey: .status)
        status = statusDecoded
        let createdDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .created)
        created = createdDecoded
        let expiredDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expired)
        expired = expiredDecoded
        let exportConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportExportConfig.self, forKey: .exportConfig)
        exportConfig = exportConfigDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated)
        truncated = truncatedDecoded
        let testSummaryDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.TestReportSummary.self, forKey: .testSummary)
        testSummary = testSummaryDecoded
        let codeCoverageSummaryDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.CodeCoverageReportSummary.self, forKey: .codeCoverageSummary)
        codeCoverageSummary = codeCoverageSummaryDecoded
    }
}

extension CodeBuildClientTypes.Report: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Report(arn: \(Swift.String(describing: arn)), codeCoverageSummary: \(Swift.String(describing: codeCoverageSummary)), created: \(Swift.String(describing: created)), executionId: \(Swift.String(describing: executionId)), expired: \(Swift.String(describing: expired)), exportConfig: \(Swift.String(describing: exportConfig)), name: \(Swift.String(describing: name)), reportGroupArn: \(Swift.String(describing: reportGroupArn)), status: \(Swift.String(describing: status)), testSummary: \(Swift.String(describing: testSummary)), truncated: \(Swift.String(describing: truncated)), type: \(Swift.String(describing: type)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about the results from running a series of test cases during the run of a
    ///             build project. The test cases are specified in the buildspec for the build project using
    ///             one or more paths to the test case files. You can specify any type of tests you want,
    ///             such as unit tests, integration tests, and functional tests. </p>
    public struct Report: Swift.Equatable {
        /// <p> The ARN of the report run. </p>
        public let arn: Swift.String?
        /// <p>A <code>CodeCoverageReportSummary</code> object that contains a code coverage summary for
        ///             this report.</p>
        public let codeCoverageSummary: CodeBuildClientTypes.CodeCoverageReportSummary?
        /// <p> The date and time this report run occurred. </p>
        public let created: ClientRuntime.Date?
        /// <p> The ARN of the build run that generated this report. </p>
        public let executionId: Swift.String?
        /// <p> The date and time a report expires. A report expires 30 days after it is created. An
        ///       expired report is not available to view in CodeBuild. </p>
        public let expired: ClientRuntime.Date?
        /// <p> Information about where the raw data used to generate this report was exported.
        ///     </p>
        public let exportConfig: CodeBuildClientTypes.ReportExportConfig?
        /// <p> The name of the report that was run. </p>
        public let name: Swift.String?
        /// <p> The ARN of the report group associated with this report. </p>
        public let reportGroupArn: Swift.String?
        /// <p> The status of this report. </p>
        public let status: CodeBuildClientTypes.ReportStatusType?
        /// <p> A <code>TestReportSummary</code> object that contains information about this test
        ///       report. </p>
        public let testSummary: CodeBuildClientTypes.TestReportSummary?
        /// <p> A boolean that specifies if this report run is truncated. The list of test cases is
        ///       truncated after the maximum number of test cases is reached. </p>
        public let truncated: Swift.Bool?
        /// <p>The type of the report that was run.</p>
        ///          <dl>
        ///             <dt>CODE_COVERAGE</dt>
        ///             <dd>
        ///                <p>A code coverage report.</p>
        ///             </dd>
        ///             <dt>TEST</dt>
        ///             <dd>
        ///                <p>A test report.</p>
        ///             </dd>
        ///          </dl>
        public let type: CodeBuildClientTypes.ReportType?

        public init (
            arn: Swift.String? = nil,
            codeCoverageSummary: CodeBuildClientTypes.CodeCoverageReportSummary? = nil,
            created: ClientRuntime.Date? = nil,
            executionId: Swift.String? = nil,
            expired: ClientRuntime.Date? = nil,
            exportConfig: CodeBuildClientTypes.ReportExportConfig? = nil,
            name: Swift.String? = nil,
            reportGroupArn: Swift.String? = nil,
            status: CodeBuildClientTypes.ReportStatusType? = nil,
            testSummary: CodeBuildClientTypes.TestReportSummary? = nil,
            truncated: Swift.Bool? = nil,
            type: CodeBuildClientTypes.ReportType? = nil
        )
        {
            self.arn = arn
            self.codeCoverageSummary = codeCoverageSummary
            self.created = created
            self.executionId = executionId
            self.expired = expired
            self.exportConfig = exportConfig
            self.name = name
            self.reportGroupArn = reportGroupArn
            self.status = status
            self.testSummary = testSummary
            self.truncated = truncated
            self.type = type
        }
    }

}

extension CodeBuildClientTypes {
    public enum ReportCodeCoverageSortByType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case filePath
        case lineCoveragePercentage
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportCodeCoverageSortByType] {
            return [
                .filePath,
                .lineCoveragePercentage,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .filePath: return "FILE_PATH"
            case .lineCoveragePercentage: return "LINE_COVERAGE_PERCENTAGE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportCodeCoverageSortByType(rawValue: rawValue) ?? ReportCodeCoverageSortByType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.ReportExportConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportConfigType
        case s3Destination
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exportConfigType = exportConfigType {
            try encodeContainer.encode(exportConfigType.rawValue, forKey: .exportConfigType)
        }
        if let s3Destination = s3Destination {
            try encodeContainer.encode(s3Destination, forKey: .s3Destination)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportConfigTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportExportConfigType.self, forKey: .exportConfigType)
        exportConfigType = exportConfigTypeDecoded
        let s3DestinationDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.S3ReportExportConfig.self, forKey: .s3Destination)
        s3Destination = s3DestinationDecoded
    }
}

extension CodeBuildClientTypes.ReportExportConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReportExportConfig(exportConfigType: \(Swift.String(describing: exportConfigType)), s3Destination: \(Swift.String(describing: s3Destination)))"}
}

extension CodeBuildClientTypes {
    /// <p> Information about the location where the run of a report is exported. </p>
    public struct ReportExportConfig: Swift.Equatable {
        /// <p> The export configuration type. Valid values are: </p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                     <code>S3</code>: The report results are exported to an S3 bucket. </p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                     <code>NO_EXPORT</code>: The report results are not exported. </p>
        ///             </li>
        ///          </ul>
        public let exportConfigType: CodeBuildClientTypes.ReportExportConfigType?
        /// <p> A <code>S3ReportExportConfig</code> object that contains information about the S3
        ///             bucket where the run of a report is exported. </p>
        public let s3Destination: CodeBuildClientTypes.S3ReportExportConfig?

        public init (
            exportConfigType: CodeBuildClientTypes.ReportExportConfigType? = nil,
            s3Destination: CodeBuildClientTypes.S3ReportExportConfig? = nil
        )
        {
            self.exportConfigType = exportConfigType
            self.s3Destination = s3Destination
        }
    }

}

extension CodeBuildClientTypes {
    public enum ReportExportConfigType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noExport
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportExportConfigType] {
            return [
                .noExport,
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noExport: return "NO_EXPORT"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportExportConfigType(rawValue: rawValue) ?? ReportExportConfigType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.ReportFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportStatusType.self, forKey: .status)
        status = statusDecoded
    }
}

extension CodeBuildClientTypes.ReportFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReportFilter(status: \(Swift.String(describing: status)))"}
}

extension CodeBuildClientTypes {
    /// <p> A filter used to return reports with the status specified by the input
    ///                 <code>status</code> parameter. </p>
    public struct ReportFilter: Swift.Equatable {
        /// <p> The status used to filter reports. You can filter using one status only. </p>
        public let status: CodeBuildClientTypes.ReportStatusType?

        public init (
            status: CodeBuildClientTypes.ReportStatusType? = nil
        )
        {
            self.status = status
        }
    }

}

extension CodeBuildClientTypes.ReportGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case created
        case exportConfig
        case lastModified
        case name
        case status
        case tags
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let created = created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let exportConfig = exportConfig {
            try encodeContainer.encode(exportConfig, forKey: .exportConfig)
        }
        if let lastModified = lastModified {
            try encodeContainer.encode(lastModified.timeIntervalSince1970, forKey: .lastModified)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportType.self, forKey: .type)
        type = typeDecoded
        let exportConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportExportConfig.self, forKey: .exportConfig)
        exportConfig = exportConfigDecoded
        let createdDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .created)
        created = createdDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodeBuildClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodeBuildClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportGroupStatusType.self, forKey: .status)
        status = statusDecoded
    }
}

extension CodeBuildClientTypes.ReportGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReportGroup(arn: \(Swift.String(describing: arn)), created: \(Swift.String(describing: created)), exportConfig: \(Swift.String(describing: exportConfig)), lastModified: \(Swift.String(describing: lastModified)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)), tags: \(Swift.String(describing: tags)), type: \(Swift.String(describing: type)))"}
}

extension CodeBuildClientTypes {
    /// <p>A series of reports. Each report contains information about the results from running a
    ///             series of test cases. You specify the test cases for a report group in the buildspec for
    ///             a build project using one or more paths to the test case files. </p>
    public struct ReportGroup: Swift.Equatable {
        /// <p>The ARN of the <code>ReportGroup</code>.
        ///     </p>
        public let arn: Swift.String?
        /// <p>The date and time this <code>ReportGroup</code> was created. </p>
        public let created: ClientRuntime.Date?
        /// <p>Information about the destination where the raw data of this <code>ReportGroup</code>
        ///             is exported. </p>
        public let exportConfig: CodeBuildClientTypes.ReportExportConfig?
        /// <p>The date and time this <code>ReportGroup</code> was last modified. </p>
        public let lastModified: ClientRuntime.Date?
        /// <p>The name of the <code>ReportGroup</code>.
        ///     </p>
        public let name: Swift.String?
        /// <p>The status of the report group. This property is read-only.</p>
        ///          <p>This can be one of the following values:</p>
        ///          <dl>
        ///             <dt>ACTIVE</dt>
        ///             <dd>
        ///                <p>The report group is active.</p>
        ///             </dd>
        ///             <dt>DELETING</dt>
        ///             <dd>
        ///                <p>The report group is in the process of being deleted.</p>
        ///             </dd>
        ///          </dl>
        public let status: CodeBuildClientTypes.ReportGroupStatusType?
        /// <p>A list of tag key and value pairs associated with this report group. </p>
        ///         <p>These tags are available for use by AWS services that support AWS CodeBuild report group
        ///       tags.</p>
        public let tags: [CodeBuildClientTypes.Tag]?
        /// <p>The type of the <code>ReportGroup</code>. This can be one of the following
        ///             values:</p>
        ///          <dl>
        ///             <dt>CODE_COVERAGE</dt>
        ///             <dd>
        ///                <p>The report group contains code coverage reports.</p>
        ///             </dd>
        ///             <dt>TEST</dt>
        ///             <dd>
        ///                <p>The report group contains test reports.</p>
        ///             </dd>
        ///          </dl>
        public let type: CodeBuildClientTypes.ReportType?

        public init (
            arn: Swift.String? = nil,
            created: ClientRuntime.Date? = nil,
            exportConfig: CodeBuildClientTypes.ReportExportConfig? = nil,
            lastModified: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            status: CodeBuildClientTypes.ReportGroupStatusType? = nil,
            tags: [CodeBuildClientTypes.Tag]? = nil,
            type: CodeBuildClientTypes.ReportType? = nil
        )
        {
            self.arn = arn
            self.created = created
            self.exportConfig = exportConfig
            self.lastModified = lastModified
            self.name = name
            self.status = status
            self.tags = tags
            self.type = type
        }
    }

}

extension CodeBuildClientTypes {
    public enum ReportGroupSortByType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createdTime
        case lastModifiedTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportGroupSortByType] {
            return [
                .createdTime,
                .lastModifiedTime,
                .name,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createdTime: return "CREATED_TIME"
            case .lastModifiedTime: return "LAST_MODIFIED_TIME"
            case .name: return "NAME"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportGroupSortByType(rawValue: rawValue) ?? ReportGroupSortByType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes {
    public enum ReportGroupStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportGroupStatusType] {
            return [
                .active,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportGroupStatusType(rawValue: rawValue) ?? ReportGroupStatusType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes {
    public enum ReportGroupTrendFieldType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case branchesCovered
        case branchesMissed
        case branchCoverage
        case duration
        case linesCovered
        case linesMissed
        case lineCoverage
        case passRate
        case total
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportGroupTrendFieldType] {
            return [
                .branchesCovered,
                .branchesMissed,
                .branchCoverage,
                .duration,
                .linesCovered,
                .linesMissed,
                .lineCoverage,
                .passRate,
                .total,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .branchesCovered: return "BRANCHES_COVERED"
            case .branchesMissed: return "BRANCHES_MISSED"
            case .branchCoverage: return "BRANCH_COVERAGE"
            case .duration: return "DURATION"
            case .linesCovered: return "LINES_COVERED"
            case .linesMissed: return "LINES_MISSED"
            case .lineCoverage: return "LINE_COVERAGE"
            case .passRate: return "PASS_RATE"
            case .total: return "TOTAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportGroupTrendFieldType(rawValue: rawValue) ?? ReportGroupTrendFieldType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.ReportGroupTrendStats: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case average
        case max
        case min
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let average = average {
            try encodeContainer.encode(average, forKey: .average)
        }
        if let max = max {
            try encodeContainer.encode(max, forKey: .max)
        }
        if let min = min {
            try encodeContainer.encode(min, forKey: .min)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let averageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .average)
        average = averageDecoded
        let maxDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .max)
        max = maxDecoded
        let minDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .min)
        min = minDecoded
    }
}

extension CodeBuildClientTypes.ReportGroupTrendStats: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReportGroupTrendStats(average: \(Swift.String(describing: average)), max: \(Swift.String(describing: max)), min: \(Swift.String(describing: min)))"}
}

extension CodeBuildClientTypes {
    /// <p>Contains trend statistics for a set of reports. The actual values depend on the type of
    ///             trend being collected. For more information, see .</p>
    public struct ReportGroupTrendStats: Swift.Equatable {
        /// <p>Contains the average of all values analyzed.</p>
        public let average: Swift.String?
        /// <p>Contains the maximum value analyzed.</p>
        public let max: Swift.String?
        /// <p>Contains the minimum value analyzed.</p>
        public let min: Swift.String?

        public init (
            average: Swift.String? = nil,
            max: Swift.String? = nil,
            min: Swift.String? = nil
        )
        {
            self.average = average
            self.max = max
            self.min = min
        }
    }

}

extension CodeBuildClientTypes {
    public enum ReportPackagingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case zip
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportPackagingType] {
            return [
                .none,
                .zip,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .zip: return "ZIP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportPackagingType(rawValue: rawValue) ?? ReportPackagingType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes {
    public enum ReportStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleting
        case failed
        case generating
        case incomplete
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportStatusType] {
            return [
                .deleting,
                .failed,
                .generating,
                .incomplete,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .generating: return "GENERATING"
            case .incomplete: return "INCOMPLETE"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportStatusType(rawValue: rawValue) ?? ReportStatusType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes {
    public enum ReportType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case codeCoverage
        case test
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportType] {
            return [
                .codeCoverage,
                .test,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .codeCoverage: return "CODE_COVERAGE"
            case .test: return "TEST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportType(rawValue: rawValue) ?? ReportType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.ReportWithRawData: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data
        case reportArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = data {
            try encodeContainer.encode(data, forKey: .data)
        }
        if let reportArn = reportArn {
            try encodeContainer.encode(reportArn, forKey: .reportArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportArn)
        reportArn = reportArnDecoded
        let dataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .data)
        data = dataDecoded
    }
}

extension CodeBuildClientTypes.ReportWithRawData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReportWithRawData(data: \(Swift.String(describing: data)), reportArn: \(Swift.String(describing: reportArn)))"}
}

extension CodeBuildClientTypes {
    /// <p>Contains the unmodified data for the report. For more information, see .</p>
    public struct ReportWithRawData: Swift.Equatable {
        /// <p>The value of the requested data field from the report.</p>
        public let data: Swift.String?
        /// <p>The ARN of the report.</p>
        public let reportArn: Swift.String?

        public init (
            data: Swift.String? = nil,
            reportArn: Swift.String? = nil
        )
        {
            self.data = data
            self.reportArn = reportArn
        }
    }

}

extension CodeBuildClientTypes.ResolvedArtifact: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier
        case location
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identifier = identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ArtifactsType.self, forKey: .type)
        type = typeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
    }
}

extension CodeBuildClientTypes.ResolvedArtifact: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResolvedArtifact(identifier: \(Swift.String(describing: identifier)), location: \(Swift.String(describing: location)), type: \(Swift.String(describing: type)))"}
}

extension CodeBuildClientTypes {
    /// <p>Represents a resolved build artifact. A resolve artifact is an artifact that is built and
    ///             deployed to the destination, such as Amazon S3.</p>
    public struct ResolvedArtifact: Swift.Equatable {
        /// <p>The identifier of the artifact.</p>
        public let identifier: Swift.String?
        /// <p>The location of the artifact.</p>
        public let location: Swift.String?
        /// <p>Specifies the type of artifact.</p>
        public let type: CodeBuildClientTypes.ArtifactsType?

        public init (
            identifier: Swift.String? = nil,
            location: Swift.String? = nil,
            type: CodeBuildClientTypes.ArtifactsType? = nil
        )
        {
            self.identifier = identifier
            self.location = location
            self.type = type
        }
    }

}

extension ResourceAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceAlreadyExistsException(message: \(Swift.String(describing: message)))"}
}

extension ResourceAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified AWS resource cannot be created, because an AWS resource with the same
///             settings already exists.</p>
public struct ResourceAlreadyExistsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceAlreadyExistsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified AWS resource cannot be found.</p>
public struct ResourceNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct RetryBuildBatchInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RetryBuildBatchInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RetryBuildBatchInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RetryBuildBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RetryBuildBatchInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RetryBuildBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RetryBuildBatchOutputError>
}

extension RetryBuildBatchInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RetryBuildBatchInput(id: \(Swift.String(describing: id)), idempotencyToken: \(Swift.String(describing: idempotencyToken)), retryType: \(Swift.String(describing: retryType)))"}
}

extension RetryBuildBatchInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case idempotencyToken
        case retryType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let retryType = retryType {
            try encodeContainer.encode(retryType.rawValue, forKey: .retryType)
        }
    }
}

public struct RetryBuildBatchInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RetryBuildBatchInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RetryBuildBatchInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RetryBuildBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RetryBuildBatchInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RetryBuildBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RetryBuildBatchOutputError>
}

public struct RetryBuildBatchInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RetryBuildBatchInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RetryBuildBatchInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RetryBuildBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RetryBuildBatchInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RetryBuildBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RetryBuildBatchOutputError>
}

public struct RetryBuildBatchInput: Swift.Equatable {
    /// <p>Specifies the identifier of the batch build to restart.</p>
    public let id: Swift.String?
    /// <p>A unique, case sensitive identifier you provide to ensure the idempotency of the
    ///                 <code>RetryBuildBatch</code> request. The token is included in the
    ///                 <code>RetryBuildBatch</code> request and is valid for five minutes. If you repeat
    ///             the <code>RetryBuildBatch</code> request with the same token, but change a parameter,
    ///             AWS CodeBuild returns a parameter mismatch error.</p>
    public let idempotencyToken: Swift.String?
    /// <p>Specifies the type of retry to perform.</p>
    public let retryType: CodeBuildClientTypes.RetryBuildBatchType?

    public init (
        id: Swift.String? = nil,
        idempotencyToken: Swift.String? = nil,
        retryType: CodeBuildClientTypes.RetryBuildBatchType? = nil
    )
    {
        self.id = id
        self.idempotencyToken = idempotencyToken
        self.retryType = retryType
    }
}

struct RetryBuildBatchInputBody: Swift.Equatable {
    public let id: Swift.String?
    public let idempotencyToken: Swift.String?
    public let retryType: CodeBuildClientTypes.RetryBuildBatchType?
}

extension RetryBuildBatchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case idempotencyToken
        case retryType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
        let retryTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.RetryBuildBatchType.self, forKey: .retryType)
        retryType = retryTypeDecoded
    }
}

extension RetryBuildBatchOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RetryBuildBatchOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RetryBuildBatchOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RetryBuildBatchOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RetryBuildBatchOutputResponse(buildBatch: \(Swift.String(describing: buildBatch)))"}
}

extension RetryBuildBatchOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RetryBuildBatchOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.buildBatch = output.buildBatch
        } else {
            self.buildBatch = nil
        }
    }
}

public struct RetryBuildBatchOutputResponse: Swift.Equatable {
    /// <p>Contains information about a batch build.</p>
    public let buildBatch: CodeBuildClientTypes.BuildBatch?

    public init (
        buildBatch: CodeBuildClientTypes.BuildBatch? = nil
    )
    {
        self.buildBatch = buildBatch
    }
}

struct RetryBuildBatchOutputResponseBody: Swift.Equatable {
    public let buildBatch: CodeBuildClientTypes.BuildBatch?
}

extension RetryBuildBatchOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildBatch
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildBatchDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BuildBatch.self, forKey: .buildBatch)
        buildBatch = buildBatchDecoded
    }
}

extension CodeBuildClientTypes {
    public enum RetryBuildBatchType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case retryAllBuilds
        case retryFailedBuilds
        case sdkUnknown(Swift.String)

        public static var allCases: [RetryBuildBatchType] {
            return [
                .retryAllBuilds,
                .retryFailedBuilds,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .retryAllBuilds: return "RETRY_ALL_BUILDS"
            case .retryFailedBuilds: return "RETRY_FAILED_BUILDS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RetryBuildBatchType(rawValue: rawValue) ?? RetryBuildBatchType.sdkUnknown(rawValue)
        }
    }
}

public struct RetryBuildInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RetryBuildInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RetryBuildInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RetryBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RetryBuildInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RetryBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RetryBuildOutputError>
}

extension RetryBuildInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RetryBuildInput(id: \(Swift.String(describing: id)), idempotencyToken: \(Swift.String(describing: idempotencyToken)))"}
}

extension RetryBuildInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case idempotencyToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
    }
}

public struct RetryBuildInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RetryBuildInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RetryBuildInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RetryBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RetryBuildInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RetryBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RetryBuildOutputError>
}

public struct RetryBuildInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RetryBuildInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RetryBuildInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RetryBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RetryBuildInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RetryBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RetryBuildOutputError>
}

public struct RetryBuildInput: Swift.Equatable {
    /// <p>Specifies the identifier of the build to restart.</p>
    public let id: Swift.String?
    /// <p>A unique, case sensitive identifier you provide to ensure the idempotency of the
    ///       <code>RetryBuild</code> request. The token is included in the
    ///       <code>RetryBuild</code> request and is valid for five minutes. If you repeat
    ///       the <code>RetryBuild</code> request with the same token, but change a parameter,
    ///       AWS CodeBuild returns a parameter mismatch error.</p>
    public let idempotencyToken: Swift.String?

    public init (
        id: Swift.String? = nil,
        idempotencyToken: Swift.String? = nil
    )
    {
        self.id = id
        self.idempotencyToken = idempotencyToken
    }
}

struct RetryBuildInputBody: Swift.Equatable {
    public let id: Swift.String?
    public let idempotencyToken: Swift.String?
}

extension RetryBuildInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case idempotencyToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
    }
}

extension RetryBuildOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RetryBuildOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountLimitExceededException" : self = .accountLimitExceededException(try AccountLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RetryBuildOutputError: Swift.Error, Swift.Equatable {
    case accountLimitExceededException(AccountLimitExceededException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RetryBuildOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RetryBuildOutputResponse(build: \(Swift.String(describing: build)))"}
}

extension RetryBuildOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RetryBuildOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.build = output.build
        } else {
            self.build = nil
        }
    }
}

public struct RetryBuildOutputResponse: Swift.Equatable {
    /// <p>Information about a build.</p>
    public let build: CodeBuildClientTypes.Build?

    public init (
        build: CodeBuildClientTypes.Build? = nil
    )
    {
        self.build = build
    }
}

struct RetryBuildOutputResponseBody: Swift.Equatable {
    public let build: CodeBuildClientTypes.Build?
}

extension RetryBuildOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case build
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.Build.self, forKey: .build)
        build = buildDecoded
    }
}

extension CodeBuildClientTypes.S3LogsConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketOwnerAccess
        case encryptionDisabled
        case location
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketOwnerAccess = bucketOwnerAccess {
            try encodeContainer.encode(bucketOwnerAccess.rawValue, forKey: .bucketOwnerAccess)
        }
        if let encryptionDisabled = encryptionDisabled {
            try encodeContainer.encode(encryptionDisabled, forKey: .encryptionDisabled)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.LogsConfigStatusType.self, forKey: .status)
        status = statusDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let encryptionDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encryptionDisabled)
        encryptionDisabled = encryptionDisabledDecoded
        let bucketOwnerAccessDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BucketOwnerAccess.self, forKey: .bucketOwnerAccess)
        bucketOwnerAccess = bucketOwnerAccessDecoded
    }
}

extension CodeBuildClientTypes.S3LogsConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "S3LogsConfig(bucketOwnerAccess: \(Swift.String(describing: bucketOwnerAccess)), encryptionDisabled: \(Swift.String(describing: encryptionDisabled)), location: \(Swift.String(describing: location)), status: \(Swift.String(describing: status)))"}
}

extension CodeBuildClientTypes {
    /// <p> Information about S3 logs for a build project. </p>
    public struct S3LogsConfig: Swift.Equatable {
        /// <p>Specifies the access for objects that are uploaded to an Amazon S3 bucket that is owned by
        ///             another account.</p>
        ///         <p>By default, only the account that uploads the objects to the bucket has access to
        ///             these objects. This property allows you to give the bucket owner access to these
        ///             objects.</p>
        ///          <dl>
        ///             <dt>NONE</dt>
        ///             <dd>
        ///                 <p>The bucket owner does not have access to the objects. This is the
        ///                         default.</p>
        ///             </dd>
        ///             <dt>READ_ONLY</dt>
        ///             <dd>
        ///               <p>The bucket owner has read only access to the objects. The uploading account
        ///                         retains ownership of the objects.</p>
        ///             </dd>
        ///             <dt>FULL</dt>
        ///             <dd>
        ///               <p>The bucket owner has full access to the objects. Object ownership is determined
        ///                         by the following criteria:</p>
        ///                     <ul>
        ///                   <li>
        ///                             <p>If the bucket is configured with the <b>Bucket
        ///                                     owner preferred</b> setting, the bucket owner owns the
        ///                                 objects. The uploading account will have object access as specified
        ///                                 by the bucket's policy.</p>
        ///                         </li>
        ///                   <li>
        ///                             <p>Otherwise, the uploading account retains ownership of the
        ///                                 objects.</p>
        ///                         </li>
        ///                </ul>
        ///                     <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3
        ///                             Object Ownership</a> in the <i>Amazon Simple Storage Service User
        ///                         Guide</i>.</p>
        ///             </dd>
        ///          </dl>
        public let bucketOwnerAccess: CodeBuildClientTypes.BucketOwnerAccess?
        /// <p> Set to true if you do not want your S3 build log output encrypted. By default S3
        ///             build logs are encrypted. </p>
        public let encryptionDisabled: Swift.Bool?
        /// <p> The ARN of an S3 bucket and the path prefix for S3 logs. If your Amazon S3 bucket
        ///             name is <code>my-bucket</code>, and your path prefix is <code>build-log</code>, then
        ///             acceptable formats are <code>my-bucket/build-log</code> or
        ///                 <code>arn:aws:s3:::my-bucket/build-log</code>. </p>
        public let location: Swift.String?
        /// <p>The current status of the S3 build logs. Valid values are:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>ENABLED</code>: S3 build logs are enabled for this build project.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>DISABLED</code>: S3 build logs are not enabled for this build
        ///                     project.</p>
        ///             </li>
        ///          </ul>
        public let status: CodeBuildClientTypes.LogsConfigStatusType?

        public init (
            bucketOwnerAccess: CodeBuildClientTypes.BucketOwnerAccess? = nil,
            encryptionDisabled: Swift.Bool? = nil,
            location: Swift.String? = nil,
            status: CodeBuildClientTypes.LogsConfigStatusType? = nil
        )
        {
            self.bucketOwnerAccess = bucketOwnerAccess
            self.encryptionDisabled = encryptionDisabled
            self.location = location
            self.status = status
        }
    }

}

extension CodeBuildClientTypes.S3ReportExportConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case bucketOwner
        case encryptionDisabled
        case encryptionKey
        case packaging
        case path
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let bucketOwner = bucketOwner {
            try encodeContainer.encode(bucketOwner, forKey: .bucketOwner)
        }
        if let encryptionDisabled = encryptionDisabled {
            try encodeContainer.encode(encryptionDisabled, forKey: .encryptionDisabled)
        }
        if let encryptionKey = encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let packaging = packaging {
            try encodeContainer.encode(packaging.rawValue, forKey: .packaging)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let bucketOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketOwner)
        bucketOwner = bucketOwnerDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let packagingDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportPackagingType.self, forKey: .packaging)
        packaging = packagingDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let encryptionDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encryptionDisabled)
        encryptionDisabled = encryptionDisabledDecoded
    }
}

extension CodeBuildClientTypes.S3ReportExportConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "S3ReportExportConfig(bucket: \(Swift.String(describing: bucket)), bucketOwner: \(Swift.String(describing: bucketOwner)), encryptionDisabled: \(Swift.String(describing: encryptionDisabled)), encryptionKey: \(Swift.String(describing: encryptionKey)), packaging: \(Swift.String(describing: packaging)), path: \(Swift.String(describing: path)))"}
}

extension CodeBuildClientTypes {
    /// <p> Information about the S3 bucket where the raw data of a report are exported. </p>
    public struct S3ReportExportConfig: Swift.Equatable {
        /// <p> The name of the S3 bucket where the raw data of a report are exported. </p>
        public let bucket: Swift.String?
        /// <p>The AWS account identifier of the owner of the Amazon S3 bucket. This allows report data to be exported to an Amazon S3 bucket
        ///         that is owned by an account other than the account running the build.</p>
        public let bucketOwner: Swift.String?
        /// <p> A boolean value that specifies if the results of a report are encrypted. </p>
        public let encryptionDisabled: Swift.Bool?
        /// <p> The encryption key for the report's encrypted raw data. </p>
        public let encryptionKey: Swift.String?
        /// <p> The type of build output artifact to create. Valid values include: </p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                     <code>NONE</code>: AWS CodeBuild creates the raw data in the output bucket. This
        ///                     is the default if packaging is not specified. </p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                     <code>ZIP</code>: AWS CodeBuild creates a ZIP file with the raw data in the
        ///                     output bucket. </p>
        ///             </li>
        ///          </ul>
        public let packaging: CodeBuildClientTypes.ReportPackagingType?
        /// <p> The path to the exported report's raw data results. </p>
        public let path: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            bucketOwner: Swift.String? = nil,
            encryptionDisabled: Swift.Bool? = nil,
            encryptionKey: Swift.String? = nil,
            packaging: CodeBuildClientTypes.ReportPackagingType? = nil,
            path: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.bucketOwner = bucketOwner
            self.encryptionDisabled = encryptionDisabled
            self.encryptionKey = encryptionKey
            self.packaging = packaging
            self.path = path
        }
    }

}

extension CodeBuildClientTypes {
    public enum ServerType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bitbucket
        case github
        case githubEnterprise
        case sdkUnknown(Swift.String)

        public static var allCases: [ServerType] {
            return [
                .bitbucket,
                .github,
                .githubEnterprise,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bitbucket: return "BITBUCKET"
            case .github: return "GITHUB"
            case .githubEnterprise: return "GITHUB_ENTERPRISE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServerType(rawValue: rawValue) ?? ServerType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes {
    public enum SharedResourceSortByType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case arn
        case modifiedTime
        case sdkUnknown(Swift.String)

        public static var allCases: [SharedResourceSortByType] {
            return [
                .arn,
                .modifiedTime,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .arn: return "ARN"
            case .modifiedTime: return "MODIFIED_TIME"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SharedResourceSortByType(rawValue: rawValue) ?? SharedResourceSortByType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes {
    public enum SortOrderType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrderType] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortOrderType(rawValue: rawValue) ?? SortOrderType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.SourceAuth: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resource
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resource = resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SourceAuthType.self, forKey: .type)
        type = typeDecoded
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
    }
}

extension CodeBuildClientTypes.SourceAuth: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SourceAuth(resource: \(Swift.String(describing: resource)), type: \(Swift.String(describing: type)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about the authorization settings for AWS CodeBuild to access the source code to be
    ///             built.</p>
    ///         <p>This information is for the AWS CodeBuild console's use only. Your code should not get or set
    ///             this information directly.</p>
    public struct SourceAuth: Swift.Equatable {
        /// <p>The resource value that applies to the specified authorization type.</p>
        public let resource: Swift.String?
        /// <note>
        ///             <p> This data type is deprecated and is no longer accurate or used. </p>
        ///         </note>
        ///         <p>The authorization type to use. The only valid value is <code>OAUTH</code>, which
        ///             represents the OAuth authorization type.</p>
        public let type: CodeBuildClientTypes.SourceAuthType?

        public init (
            resource: Swift.String? = nil,
            type: CodeBuildClientTypes.SourceAuthType? = nil
        )
        {
            self.resource = resource
            self.type = type
        }
    }

}

extension CodeBuildClientTypes {
    public enum SourceAuthType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case oauth
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceAuthType] {
            return [
                .oauth,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .oauth: return "OAUTH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SourceAuthType(rawValue: rawValue) ?? SourceAuthType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.SourceCredentialsInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case authType
        case serverType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let authType = authType {
            try encodeContainer.encode(authType.rawValue, forKey: .authType)
        }
        if let serverType = serverType {
            try encodeContainer.encode(serverType.rawValue, forKey: .serverType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let serverTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ServerType.self, forKey: .serverType)
        serverType = serverTypeDecoded
        let authTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.AuthType.self, forKey: .authType)
        authType = authTypeDecoded
    }
}

extension CodeBuildClientTypes.SourceCredentialsInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SourceCredentialsInfo(arn: \(Swift.String(describing: arn)), authType: \(Swift.String(describing: authType)), serverType: \(Swift.String(describing: serverType)))"}
}

extension CodeBuildClientTypes {
    /// <p> Information about the credentials for a GitHub, GitHub Enterprise, or Bitbucket
    ///             repository. </p>
    public struct SourceCredentialsInfo: Swift.Equatable {
        /// <p> The Amazon Resource Name (ARN) of the token. </p>
        public let arn: Swift.String?
        /// <p> The type of authentication used by the credentials. Valid options are OAUTH,
        ///             BASIC_AUTH, or PERSONAL_ACCESS_TOKEN. </p>
        public let authType: CodeBuildClientTypes.AuthType?
        /// <p> The type of source provider. The valid options are GITHUB, GITHUB_ENTERPRISE, or
        ///             BITBUCKET. </p>
        public let serverType: CodeBuildClientTypes.ServerType?

        public init (
            arn: Swift.String? = nil,
            authType: CodeBuildClientTypes.AuthType? = nil,
            serverType: CodeBuildClientTypes.ServerType? = nil
        )
        {
            self.arn = arn
            self.authType = authType
            self.serverType = serverType
        }
    }

}

extension CodeBuildClientTypes {
    public enum SourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bitbucket
        case codecommit
        case codepipeline
        case github
        case githubEnterprise
        case noSource
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceType] {
            return [
                .bitbucket,
                .codecommit,
                .codepipeline,
                .github,
                .githubEnterprise,
                .noSource,
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bitbucket: return "BITBUCKET"
            case .codecommit: return "CODECOMMIT"
            case .codepipeline: return "CODEPIPELINE"
            case .github: return "GITHUB"
            case .githubEnterprise: return "GITHUB_ENTERPRISE"
            case .noSource: return "NO_SOURCE"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SourceType(rawValue: rawValue) ?? SourceType.sdkUnknown(rawValue)
        }
    }
}

public struct StartBuildBatchInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartBuildBatchInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartBuildBatchInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartBuildBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartBuildBatchInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartBuildBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartBuildBatchOutputError>
}

extension StartBuildBatchInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartBuildBatchInput(artifactsOverride: \(Swift.String(describing: artifactsOverride)), buildBatchConfigOverride: \(Swift.String(describing: buildBatchConfigOverride)), buildTimeoutInMinutesOverride: \(Swift.String(describing: buildTimeoutInMinutesOverride)), buildspecOverride: \(Swift.String(describing: buildspecOverride)), cacheOverride: \(Swift.String(describing: cacheOverride)), certificateOverride: \(Swift.String(describing: certificateOverride)), computeTypeOverride: \(Swift.String(describing: computeTypeOverride)), debugSessionEnabled: \(Swift.String(describing: debugSessionEnabled)), encryptionKeyOverride: \(Swift.String(describing: encryptionKeyOverride)), environmentTypeOverride: \(Swift.String(describing: environmentTypeOverride)), environmentVariablesOverride: \(Swift.String(describing: environmentVariablesOverride)), gitCloneDepthOverride: \(Swift.String(describing: gitCloneDepthOverride)), gitSubmodulesConfigOverride: \(Swift.String(describing: gitSubmodulesConfigOverride)), idempotencyToken: \(Swift.String(describing: idempotencyToken)), imageOverride: \(Swift.String(describing: imageOverride)), imagePullCredentialsTypeOverride: \(Swift.String(describing: imagePullCredentialsTypeOverride)), insecureSslOverride: \(Swift.String(describing: insecureSslOverride)), logsConfigOverride: \(Swift.String(describing: logsConfigOverride)), privilegedModeOverride: \(Swift.String(describing: privilegedModeOverride)), projectName: \(Swift.String(describing: projectName)), queuedTimeoutInMinutesOverride: \(Swift.String(describing: queuedTimeoutInMinutesOverride)), registryCredentialOverride: \(Swift.String(describing: registryCredentialOverride)), reportBuildBatchStatusOverride: \(Swift.String(describing: reportBuildBatchStatusOverride)), secondaryArtifactsOverride: \(Swift.String(describing: secondaryArtifactsOverride)), secondarySourcesOverride: \(Swift.String(describing: secondarySourcesOverride)), secondarySourcesVersionOverride: \(Swift.String(describing: secondarySourcesVersionOverride)), serviceRoleOverride: \(Swift.String(describing: serviceRoleOverride)), sourceAuthOverride: \(Swift.String(describing: sourceAuthOverride)), sourceLocationOverride: \(Swift.String(describing: sourceLocationOverride)), sourceTypeOverride: \(Swift.String(describing: sourceTypeOverride)), sourceVersion: \(Swift.String(describing: sourceVersion)))"}
}

extension StartBuildBatchInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactsOverride
        case buildBatchConfigOverride
        case buildTimeoutInMinutesOverride
        case buildspecOverride
        case cacheOverride
        case certificateOverride
        case computeTypeOverride
        case debugSessionEnabled
        case encryptionKeyOverride
        case environmentTypeOverride
        case environmentVariablesOverride
        case gitCloneDepthOverride
        case gitSubmodulesConfigOverride
        case idempotencyToken
        case imageOverride
        case imagePullCredentialsTypeOverride
        case insecureSslOverride
        case logsConfigOverride
        case privilegedModeOverride
        case projectName
        case queuedTimeoutInMinutesOverride
        case registryCredentialOverride
        case reportBuildBatchStatusOverride
        case secondaryArtifactsOverride
        case secondarySourcesOverride
        case secondarySourcesVersionOverride
        case serviceRoleOverride
        case sourceAuthOverride
        case sourceLocationOverride
        case sourceTypeOverride
        case sourceVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactsOverride = artifactsOverride {
            try encodeContainer.encode(artifactsOverride, forKey: .artifactsOverride)
        }
        if let buildBatchConfigOverride = buildBatchConfigOverride {
            try encodeContainer.encode(buildBatchConfigOverride, forKey: .buildBatchConfigOverride)
        }
        if let buildTimeoutInMinutesOverride = buildTimeoutInMinutesOverride {
            try encodeContainer.encode(buildTimeoutInMinutesOverride, forKey: .buildTimeoutInMinutesOverride)
        }
        if let buildspecOverride = buildspecOverride {
            try encodeContainer.encode(buildspecOverride, forKey: .buildspecOverride)
        }
        if let cacheOverride = cacheOverride {
            try encodeContainer.encode(cacheOverride, forKey: .cacheOverride)
        }
        if let certificateOverride = certificateOverride {
            try encodeContainer.encode(certificateOverride, forKey: .certificateOverride)
        }
        if let computeTypeOverride = computeTypeOverride {
            try encodeContainer.encode(computeTypeOverride.rawValue, forKey: .computeTypeOverride)
        }
        if let debugSessionEnabled = debugSessionEnabled {
            try encodeContainer.encode(debugSessionEnabled, forKey: .debugSessionEnabled)
        }
        if let encryptionKeyOverride = encryptionKeyOverride {
            try encodeContainer.encode(encryptionKeyOverride, forKey: .encryptionKeyOverride)
        }
        if let environmentTypeOverride = environmentTypeOverride {
            try encodeContainer.encode(environmentTypeOverride.rawValue, forKey: .environmentTypeOverride)
        }
        if let environmentVariablesOverride = environmentVariablesOverride {
            var environmentVariablesOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environmentVariablesOverride)
            for environmentvariables0 in environmentVariablesOverride {
                try environmentVariablesOverrideContainer.encode(environmentvariables0)
            }
        }
        if let gitCloneDepthOverride = gitCloneDepthOverride {
            try encodeContainer.encode(gitCloneDepthOverride, forKey: .gitCloneDepthOverride)
        }
        if let gitSubmodulesConfigOverride = gitSubmodulesConfigOverride {
            try encodeContainer.encode(gitSubmodulesConfigOverride, forKey: .gitSubmodulesConfigOverride)
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let imageOverride = imageOverride {
            try encodeContainer.encode(imageOverride, forKey: .imageOverride)
        }
        if let imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverride {
            try encodeContainer.encode(imagePullCredentialsTypeOverride.rawValue, forKey: .imagePullCredentialsTypeOverride)
        }
        if let insecureSslOverride = insecureSslOverride {
            try encodeContainer.encode(insecureSslOverride, forKey: .insecureSslOverride)
        }
        if let logsConfigOverride = logsConfigOverride {
            try encodeContainer.encode(logsConfigOverride, forKey: .logsConfigOverride)
        }
        if let privilegedModeOverride = privilegedModeOverride {
            try encodeContainer.encode(privilegedModeOverride, forKey: .privilegedModeOverride)
        }
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverride {
            try encodeContainer.encode(queuedTimeoutInMinutesOverride, forKey: .queuedTimeoutInMinutesOverride)
        }
        if let registryCredentialOverride = registryCredentialOverride {
            try encodeContainer.encode(registryCredentialOverride, forKey: .registryCredentialOverride)
        }
        if let reportBuildBatchStatusOverride = reportBuildBatchStatusOverride {
            try encodeContainer.encode(reportBuildBatchStatusOverride, forKey: .reportBuildBatchStatusOverride)
        }
        if let secondaryArtifactsOverride = secondaryArtifactsOverride {
            var secondaryArtifactsOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondaryArtifactsOverride)
            for projectartifactslist0 in secondaryArtifactsOverride {
                try secondaryArtifactsOverrideContainer.encode(projectartifactslist0)
            }
        }
        if let secondarySourcesOverride = secondarySourcesOverride {
            var secondarySourcesOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySourcesOverride)
            for projectsources0 in secondarySourcesOverride {
                try secondarySourcesOverrideContainer.encode(projectsources0)
            }
        }
        if let secondarySourcesVersionOverride = secondarySourcesVersionOverride {
            var secondarySourcesVersionOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySourcesVersionOverride)
            for projectsecondarysourceversions0 in secondarySourcesVersionOverride {
                try secondarySourcesVersionOverrideContainer.encode(projectsecondarysourceversions0)
            }
        }
        if let serviceRoleOverride = serviceRoleOverride {
            try encodeContainer.encode(serviceRoleOverride, forKey: .serviceRoleOverride)
        }
        if let sourceAuthOverride = sourceAuthOverride {
            try encodeContainer.encode(sourceAuthOverride, forKey: .sourceAuthOverride)
        }
        if let sourceLocationOverride = sourceLocationOverride {
            try encodeContainer.encode(sourceLocationOverride, forKey: .sourceLocationOverride)
        }
        if let sourceTypeOverride = sourceTypeOverride {
            try encodeContainer.encode(sourceTypeOverride.rawValue, forKey: .sourceTypeOverride)
        }
        if let sourceVersion = sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
    }
}

public struct StartBuildBatchInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartBuildBatchInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartBuildBatchInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartBuildBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartBuildBatchInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartBuildBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartBuildBatchOutputError>
}

public struct StartBuildBatchInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartBuildBatchInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartBuildBatchInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartBuildBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartBuildBatchInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartBuildBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartBuildBatchOutputError>
}

public struct StartBuildBatchInput: Swift.Equatable {
    /// <p>An array of <code>ProjectArtifacts</code> objects that contains information about the
    ///             build output artifact overrides for the build project.</p>
    public let artifactsOverride: CodeBuildClientTypes.ProjectArtifacts?
    /// <p>A <code>BuildBatchConfigOverride</code> object that contains batch build configuration
    ///             overrides.</p>
    public let buildBatchConfigOverride: CodeBuildClientTypes.ProjectBuildBatchConfig?
    /// <p>Overrides the build timeout specified in the batch build project.</p>
    public let buildTimeoutInMinutesOverride: Swift.Int?
    /// <p>A buildspec file declaration that overrides, for this build only, the latest one
    ///         already defined in the build project.</p>
    ///          <p>If this value is set, it can be either an inline buildspec definition, the path to an
    ///         alternate buildspec file relative to the value of the built-in
    ///         <code>CODEBUILD_SRC_DIR</code> environment variable, or the path to an S3 bucket.
    ///         The bucket must be in the same AWS Region as the build project. Specify the buildspec
    ///         file using its ARN (for example,
    ///         <code>arn:aws:s3:::my-codebuild-sample2/buildspec.yml</code>). If this value is not
    ///         provided or is set to an empty string, the source code must contain a buildspec file in
    ///         its root directory. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-name-storage">Buildspec File Name and Storage Location</a>. </p>
    public let buildspecOverride: Swift.String?
    /// <p>A <code>ProjectCache</code> object that specifies cache overrides.</p>
    public let cacheOverride: CodeBuildClientTypes.ProjectCache?
    /// <p>The name of a certificate for this batch build that overrides the one specified in the batch build
    ///         project.</p>
    public let certificateOverride: Swift.String?
    /// <p>The name of a compute type for this batch build that overrides the one specified in the
    ///         batch build project.</p>
    public let computeTypeOverride: CodeBuildClientTypes.ComputeType?
    /// <p>Specifies if session debugging is enabled for this batch build. For more information, see
    ///   <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html">Viewing a running build in Session Manager</a>. Batch session debugging is not supported for matrix batch builds.</p>
    public let debugSessionEnabled: Swift.Bool?
    /// <p>The AWS Key Management Service (AWS KMS) customer master key (CMK) that overrides the one specified in the batch build
    ///         project. The CMK key encrypts the build output artifacts.</p>
    ///          <note>
    ///             <p>You can use a cross-account KMS key to encrypt the build output artifacts if your
    ///           service role has permission to that key. </p>
    ///          </note>
    ///          <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using
    ///         the format <code>alias/<alias-name></code>).</p>
    public let encryptionKeyOverride: Swift.String?
    /// <p>A container type for this batch build that overrides the one specified in the batch build
    ///         project.</p>
    public let environmentTypeOverride: CodeBuildClientTypes.EnvironmentType?
    /// <p>An array of <code>EnvironmentVariable</code> objects that override, or add to, the
    ///             environment variables defined in the batch build project.</p>
    public let environmentVariablesOverride: [CodeBuildClientTypes.EnvironmentVariable]?
    /// <p>The user-defined depth of history, with a minimum value of 0, that overrides, for this
    ///         batch build only, any previous depth of history defined in the batch build project.</p>
    public let gitCloneDepthOverride: Swift.Int?
    /// <p>A <code>GitSubmodulesConfig</code> object that overrides the Git submodules configuration
    ///             for this batch build.</p>
    public let gitSubmodulesConfigOverride: CodeBuildClientTypes.GitSubmodulesConfig?
    /// <p>A unique, case sensitive identifier you provide to ensure the idempotency of the
    ///                 <code>StartBuildBatch</code> request. The token is included in the
    ///                 <code>StartBuildBatch</code> request and is valid for five minutes. If you repeat
    ///             the <code>StartBuildBatch</code> request with the same token, but change a parameter,
    ///             AWS CodeBuild returns a parameter mismatch error.</p>
    public let idempotencyToken: Swift.String?
    /// <p>The name of an image for this batch build that overrides the one specified in the batch
    ///             build project.</p>
    public let imageOverride: Swift.String?
    /// <p>The type of credentials AWS CodeBuild uses to pull images in your batch build. There are two valid
    ///         values: </p>
    ///         <dl>
    ///             <dt>CODEBUILD</dt>
    ///             <dd>
    ///                     <p>Specifies that AWS CodeBuild uses its own credentials. This requires that you
    ///                         modify your ECR repository policy to trust AWS CodeBuild's service principal.</p>
    ///                 </dd>
    ///             <dt>SERVICE_ROLE</dt>
    ///             <dd>
    ///                     <p>Specifies that AWS CodeBuild uses your build project's service role. </p>
    ///                 </dd>
    ///          </dl>
    ///          <p>When using a cross-account or private registry image, you must use
    ///                 <code>SERVICE_ROLE</code> credentials. When using an AWS CodeBuild curated image,
    ///             you must use <code>CODEBUILD</code> credentials. </p>
    public let imagePullCredentialsTypeOverride: CodeBuildClientTypes.ImagePullCredentialsType?
    /// <p>Enable this flag to override the insecure SSL setting that is specified in the batch build
    ///         project. The insecure SSL setting determines whether to ignore SSL warnings while
    ///         connecting to the project source code. This override applies only if the build's source
    ///         is GitHub Enterprise.</p>
    public let insecureSslOverride: Swift.Bool?
    /// <p>A <code>LogsConfig</code> object that override the log settings defined in the batch build
    ///             project.</p>
    public let logsConfigOverride: CodeBuildClientTypes.LogsConfig?
    /// <p>Enable this flag to override privileged mode in the batch build project.</p>
    public let privilegedModeOverride: Swift.Bool?
    /// <p>The name of the project.</p>
    public let projectName: Swift.String?
    /// <p>The number of minutes a batch build is allowed to be queued before it times out.</p>
    public let queuedTimeoutInMinutesOverride: Swift.Int?
    /// <p>A <code>RegistryCredential</code> object that overrides credentials for access to a
    ///             private registry.</p>
    public let registryCredentialOverride: CodeBuildClientTypes.RegistryCredential?
    /// <p>Set to <code>true</code> to report to your source provider the status of a batch build's
    ///             start and completion. If you use this option with a source provider other than GitHub,
    ///             GitHub Enterprise, or Bitbucket, an <code>invalidInputException</code> is thrown. </p>
    ///          <note>
    ///             <p>The status of a build triggered by a webhook is always reported to your source
    ///           provider. </p>
    ///          </note>
    public let reportBuildBatchStatusOverride: Swift.Bool?
    /// <p>An array of <code>ProjectArtifacts</code> objects that override the secondary artifacts
    ///             defined in the batch build project.</p>
    public let secondaryArtifactsOverride: [CodeBuildClientTypes.ProjectArtifacts]?
    /// <p>An array of <code>ProjectSource</code> objects that override the secondary sources
    ///         defined in the batch build project.</p>
    public let secondarySourcesOverride: [CodeBuildClientTypes.ProjectSource]?
    /// <p>An array of <code>ProjectSourceVersion</code> objects that override the secondary source
    ///             versions in the batch build project.</p>
    public let secondarySourcesVersionOverride: [CodeBuildClientTypes.ProjectSourceVersion]?
    /// <p>The name of a service role for this batch build that overrides the one specified in the
    ///         batch build project.</p>
    public let serviceRoleOverride: Swift.String?
    /// <p>A <code>SourceAuth</code> object that overrides the one defined in the batch build
    ///             project. This override applies only if the build project's source is BitBucket or
    ///             GitHub.</p>
    public let sourceAuthOverride: CodeBuildClientTypes.SourceAuth?
    /// <p>A location that overrides, for this batch build, the source location defined in
    ///         the batch build project.</p>
    public let sourceLocationOverride: Swift.String?
    /// <p>The source input type that overrides the source input defined in the batch
    ///         build project.</p>
    public let sourceTypeOverride: CodeBuildClientTypes.SourceType?
    /// <p>The version of the batch build input to be built, for this build only. If not specified,
    ///             the latest version is used. If specified, the contents depends on the source
    ///             provider:</p>
    ///         <dl>
    ///             <dt>AWS CodeCommit</dt>
    ///             <dd>
    ///                     <p>The commit ID, branch, or Git tag to use.</p>
    ///                 </dd>
    ///             <dt>GitHub</dt>
    ///             <dd>
    ///                     <p>The commit ID, pull request ID, branch name, or tag name that corresponds
    ///                         to the version of the source code you want to build. If a pull request ID is
    ///                         specified, it must use the format <code>pr/pull-request-ID</code> (for
    ///                         example <code>pr/25</code>). If a branch name is specified, the branch's
    ///                         HEAD commit ID is used. If not specified, the default branch's HEAD commit
    ///                         ID is used.</p>
    ///                 </dd>
    ///             <dt>Bitbucket</dt>
    ///             <dd>
    ///                     <p>The commit ID, branch name, or tag name that corresponds to the version of
    ///                         the source code you want to build. If a branch name is specified, the
    ///                         branch's HEAD commit ID is used. If not specified, the default branch's HEAD
    ///                         commit ID is used.</p>
    ///                 </dd>
    ///             <dt>Amazon S3</dt>
    ///             <dd>
    ///                     <p>The version ID of the object that represents the build input ZIP file to
    ///                         use.</p>
    ///                 </dd>
    ///          </dl>
    ///          <p>If <code>sourceVersion</code> is specified at the project level, then this
    ///                 <code>sourceVersion</code> (at the build level) takes precedence. </p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html">Source Version Sample
    ///                 with CodeBuild</a> in the <i>AWS CodeBuild User Guide</i>. </p>
    public let sourceVersion: Swift.String?

    public init (
        artifactsOverride: CodeBuildClientTypes.ProjectArtifacts? = nil,
        buildBatchConfigOverride: CodeBuildClientTypes.ProjectBuildBatchConfig? = nil,
        buildTimeoutInMinutesOverride: Swift.Int? = nil,
        buildspecOverride: Swift.String? = nil,
        cacheOverride: CodeBuildClientTypes.ProjectCache? = nil,
        certificateOverride: Swift.String? = nil,
        computeTypeOverride: CodeBuildClientTypes.ComputeType? = nil,
        debugSessionEnabled: Swift.Bool? = nil,
        encryptionKeyOverride: Swift.String? = nil,
        environmentTypeOverride: CodeBuildClientTypes.EnvironmentType? = nil,
        environmentVariablesOverride: [CodeBuildClientTypes.EnvironmentVariable]? = nil,
        gitCloneDepthOverride: Swift.Int? = nil,
        gitSubmodulesConfigOverride: CodeBuildClientTypes.GitSubmodulesConfig? = nil,
        idempotencyToken: Swift.String? = nil,
        imageOverride: Swift.String? = nil,
        imagePullCredentialsTypeOverride: CodeBuildClientTypes.ImagePullCredentialsType? = nil,
        insecureSslOverride: Swift.Bool? = nil,
        logsConfigOverride: CodeBuildClientTypes.LogsConfig? = nil,
        privilegedModeOverride: Swift.Bool? = nil,
        projectName: Swift.String? = nil,
        queuedTimeoutInMinutesOverride: Swift.Int? = nil,
        registryCredentialOverride: CodeBuildClientTypes.RegistryCredential? = nil,
        reportBuildBatchStatusOverride: Swift.Bool? = nil,
        secondaryArtifactsOverride: [CodeBuildClientTypes.ProjectArtifacts]? = nil,
        secondarySourcesOverride: [CodeBuildClientTypes.ProjectSource]? = nil,
        secondarySourcesVersionOverride: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
        serviceRoleOverride: Swift.String? = nil,
        sourceAuthOverride: CodeBuildClientTypes.SourceAuth? = nil,
        sourceLocationOverride: Swift.String? = nil,
        sourceTypeOverride: CodeBuildClientTypes.SourceType? = nil,
        sourceVersion: Swift.String? = nil
    )
    {
        self.artifactsOverride = artifactsOverride
        self.buildBatchConfigOverride = buildBatchConfigOverride
        self.buildTimeoutInMinutesOverride = buildTimeoutInMinutesOverride
        self.buildspecOverride = buildspecOverride
        self.cacheOverride = cacheOverride
        self.certificateOverride = certificateOverride
        self.computeTypeOverride = computeTypeOverride
        self.debugSessionEnabled = debugSessionEnabled
        self.encryptionKeyOverride = encryptionKeyOverride
        self.environmentTypeOverride = environmentTypeOverride
        self.environmentVariablesOverride = environmentVariablesOverride
        self.gitCloneDepthOverride = gitCloneDepthOverride
        self.gitSubmodulesConfigOverride = gitSubmodulesConfigOverride
        self.idempotencyToken = idempotencyToken
        self.imageOverride = imageOverride
        self.imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverride
        self.insecureSslOverride = insecureSslOverride
        self.logsConfigOverride = logsConfigOverride
        self.privilegedModeOverride = privilegedModeOverride
        self.projectName = projectName
        self.queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverride
        self.registryCredentialOverride = registryCredentialOverride
        self.reportBuildBatchStatusOverride = reportBuildBatchStatusOverride
        self.secondaryArtifactsOverride = secondaryArtifactsOverride
        self.secondarySourcesOverride = secondarySourcesOverride
        self.secondarySourcesVersionOverride = secondarySourcesVersionOverride
        self.serviceRoleOverride = serviceRoleOverride
        self.sourceAuthOverride = sourceAuthOverride
        self.sourceLocationOverride = sourceLocationOverride
        self.sourceTypeOverride = sourceTypeOverride
        self.sourceVersion = sourceVersion
    }
}

struct StartBuildBatchInputBody: Swift.Equatable {
    public let projectName: Swift.String?
    public let secondarySourcesOverride: [CodeBuildClientTypes.ProjectSource]?
    public let secondarySourcesVersionOverride: [CodeBuildClientTypes.ProjectSourceVersion]?
    public let sourceVersion: Swift.String?
    public let artifactsOverride: CodeBuildClientTypes.ProjectArtifacts?
    public let secondaryArtifactsOverride: [CodeBuildClientTypes.ProjectArtifacts]?
    public let environmentVariablesOverride: [CodeBuildClientTypes.EnvironmentVariable]?
    public let sourceTypeOverride: CodeBuildClientTypes.SourceType?
    public let sourceLocationOverride: Swift.String?
    public let sourceAuthOverride: CodeBuildClientTypes.SourceAuth?
    public let gitCloneDepthOverride: Swift.Int?
    public let gitSubmodulesConfigOverride: CodeBuildClientTypes.GitSubmodulesConfig?
    public let buildspecOverride: Swift.String?
    public let insecureSslOverride: Swift.Bool?
    public let reportBuildBatchStatusOverride: Swift.Bool?
    public let environmentTypeOverride: CodeBuildClientTypes.EnvironmentType?
    public let imageOverride: Swift.String?
    public let computeTypeOverride: CodeBuildClientTypes.ComputeType?
    public let certificateOverride: Swift.String?
    public let cacheOverride: CodeBuildClientTypes.ProjectCache?
    public let serviceRoleOverride: Swift.String?
    public let privilegedModeOverride: Swift.Bool?
    public let buildTimeoutInMinutesOverride: Swift.Int?
    public let queuedTimeoutInMinutesOverride: Swift.Int?
    public let encryptionKeyOverride: Swift.String?
    public let idempotencyToken: Swift.String?
    public let logsConfigOverride: CodeBuildClientTypes.LogsConfig?
    public let registryCredentialOverride: CodeBuildClientTypes.RegistryCredential?
    public let imagePullCredentialsTypeOverride: CodeBuildClientTypes.ImagePullCredentialsType?
    public let buildBatchConfigOverride: CodeBuildClientTypes.ProjectBuildBatchConfig?
    public let debugSessionEnabled: Swift.Bool?
}

extension StartBuildBatchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactsOverride
        case buildBatchConfigOverride
        case buildTimeoutInMinutesOverride
        case buildspecOverride
        case cacheOverride
        case certificateOverride
        case computeTypeOverride
        case debugSessionEnabled
        case encryptionKeyOverride
        case environmentTypeOverride
        case environmentVariablesOverride
        case gitCloneDepthOverride
        case gitSubmodulesConfigOverride
        case idempotencyToken
        case imageOverride
        case imagePullCredentialsTypeOverride
        case insecureSslOverride
        case logsConfigOverride
        case privilegedModeOverride
        case projectName
        case queuedTimeoutInMinutesOverride
        case registryCredentialOverride
        case reportBuildBatchStatusOverride
        case secondaryArtifactsOverride
        case secondarySourcesOverride
        case secondarySourcesVersionOverride
        case serviceRoleOverride
        case sourceAuthOverride
        case sourceLocationOverride
        case sourceTypeOverride
        case sourceVersion
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let secondarySourcesOverrideContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectSource?].self, forKey: .secondarySourcesOverride)
        var secondarySourcesOverrideDecoded0:[CodeBuildClientTypes.ProjectSource]? = nil
        if let secondarySourcesOverrideContainer = secondarySourcesOverrideContainer {
            secondarySourcesOverrideDecoded0 = [CodeBuildClientTypes.ProjectSource]()
            for structure0 in secondarySourcesOverrideContainer {
                if let structure0 = structure0 {
                    secondarySourcesOverrideDecoded0?.append(structure0)
                }
            }
        }
        secondarySourcesOverride = secondarySourcesOverrideDecoded0
        let secondarySourcesVersionOverrideContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectSourceVersion?].self, forKey: .secondarySourcesVersionOverride)
        var secondarySourcesVersionOverrideDecoded0:[CodeBuildClientTypes.ProjectSourceVersion]? = nil
        if let secondarySourcesVersionOverrideContainer = secondarySourcesVersionOverrideContainer {
            secondarySourcesVersionOverrideDecoded0 = [CodeBuildClientTypes.ProjectSourceVersion]()
            for structure0 in secondarySourcesVersionOverrideContainer {
                if let structure0 = structure0 {
                    secondarySourcesVersionOverrideDecoded0?.append(structure0)
                }
            }
        }
        secondarySourcesVersionOverride = secondarySourcesVersionOverrideDecoded0
        let sourceVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
        let artifactsOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectArtifacts.self, forKey: .artifactsOverride)
        artifactsOverride = artifactsOverrideDecoded
        let secondaryArtifactsOverrideContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectArtifacts?].self, forKey: .secondaryArtifactsOverride)
        var secondaryArtifactsOverrideDecoded0:[CodeBuildClientTypes.ProjectArtifacts]? = nil
        if let secondaryArtifactsOverrideContainer = secondaryArtifactsOverrideContainer {
            secondaryArtifactsOverrideDecoded0 = [CodeBuildClientTypes.ProjectArtifacts]()
            for structure0 in secondaryArtifactsOverrideContainer {
                if let structure0 = structure0 {
                    secondaryArtifactsOverrideDecoded0?.append(structure0)
                }
            }
        }
        secondaryArtifactsOverride = secondaryArtifactsOverrideDecoded0
        let environmentVariablesOverrideContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.EnvironmentVariable?].self, forKey: .environmentVariablesOverride)
        var environmentVariablesOverrideDecoded0:[CodeBuildClientTypes.EnvironmentVariable]? = nil
        if let environmentVariablesOverrideContainer = environmentVariablesOverrideContainer {
            environmentVariablesOverrideDecoded0 = [CodeBuildClientTypes.EnvironmentVariable]()
            for structure0 in environmentVariablesOverrideContainer {
                if let structure0 = structure0 {
                    environmentVariablesOverrideDecoded0?.append(structure0)
                }
            }
        }
        environmentVariablesOverride = environmentVariablesOverrideDecoded0
        let sourceTypeOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SourceType.self, forKey: .sourceTypeOverride)
        sourceTypeOverride = sourceTypeOverrideDecoded
        let sourceLocationOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLocationOverride)
        sourceLocationOverride = sourceLocationOverrideDecoded
        let sourceAuthOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SourceAuth.self, forKey: .sourceAuthOverride)
        sourceAuthOverride = sourceAuthOverrideDecoded
        let gitCloneDepthOverrideDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gitCloneDepthOverride)
        gitCloneDepthOverride = gitCloneDepthOverrideDecoded
        let gitSubmodulesConfigOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.GitSubmodulesConfig.self, forKey: .gitSubmodulesConfigOverride)
        gitSubmodulesConfigOverride = gitSubmodulesConfigOverrideDecoded
        let buildspecOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildspecOverride)
        buildspecOverride = buildspecOverrideDecoded
        let insecureSslOverrideDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .insecureSslOverride)
        insecureSslOverride = insecureSslOverrideDecoded
        let reportBuildBatchStatusOverrideDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reportBuildBatchStatusOverride)
        reportBuildBatchStatusOverride = reportBuildBatchStatusOverrideDecoded
        let environmentTypeOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.EnvironmentType.self, forKey: .environmentTypeOverride)
        environmentTypeOverride = environmentTypeOverrideDecoded
        let imageOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageOverride)
        imageOverride = imageOverrideDecoded
        let computeTypeOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ComputeType.self, forKey: .computeTypeOverride)
        computeTypeOverride = computeTypeOverrideDecoded
        let certificateOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateOverride)
        certificateOverride = certificateOverrideDecoded
        let cacheOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectCache.self, forKey: .cacheOverride)
        cacheOverride = cacheOverrideDecoded
        let serviceRoleOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRoleOverride)
        serviceRoleOverride = serviceRoleOverrideDecoded
        let privilegedModeOverrideDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privilegedModeOverride)
        privilegedModeOverride = privilegedModeOverrideDecoded
        let buildTimeoutInMinutesOverrideDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .buildTimeoutInMinutesOverride)
        buildTimeoutInMinutesOverride = buildTimeoutInMinutesOverrideDecoded
        let queuedTimeoutInMinutesOverrideDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .queuedTimeoutInMinutesOverride)
        queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverrideDecoded
        let encryptionKeyOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKeyOverride)
        encryptionKeyOverride = encryptionKeyOverrideDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
        let logsConfigOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.LogsConfig.self, forKey: .logsConfigOverride)
        logsConfigOverride = logsConfigOverrideDecoded
        let registryCredentialOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.RegistryCredential.self, forKey: .registryCredentialOverride)
        registryCredentialOverride = registryCredentialOverrideDecoded
        let imagePullCredentialsTypeOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ImagePullCredentialsType.self, forKey: .imagePullCredentialsTypeOverride)
        imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverrideDecoded
        let buildBatchConfigOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectBuildBatchConfig.self, forKey: .buildBatchConfigOverride)
        buildBatchConfigOverride = buildBatchConfigOverrideDecoded
        let debugSessionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .debugSessionEnabled)
        debugSessionEnabled = debugSessionEnabledDecoded
    }
}

extension StartBuildBatchOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartBuildBatchOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartBuildBatchOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartBuildBatchOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartBuildBatchOutputResponse(buildBatch: \(Swift.String(describing: buildBatch)))"}
}

extension StartBuildBatchOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartBuildBatchOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.buildBatch = output.buildBatch
        } else {
            self.buildBatch = nil
        }
    }
}

public struct StartBuildBatchOutputResponse: Swift.Equatable {
    /// <p>A <code>BuildBatch</code> object that contains information about the batch build.</p>
    public let buildBatch: CodeBuildClientTypes.BuildBatch?

    public init (
        buildBatch: CodeBuildClientTypes.BuildBatch? = nil
    )
    {
        self.buildBatch = buildBatch
    }
}

struct StartBuildBatchOutputResponseBody: Swift.Equatable {
    public let buildBatch: CodeBuildClientTypes.BuildBatch?
}

extension StartBuildBatchOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildBatch
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildBatchDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BuildBatch.self, forKey: .buildBatch)
        buildBatch = buildBatchDecoded
    }
}

public struct StartBuildInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartBuildInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartBuildInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartBuildInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartBuildOutputError>
}

extension StartBuildInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartBuildInput(artifactsOverride: \(Swift.String(describing: artifactsOverride)), buildStatusConfigOverride: \(Swift.String(describing: buildStatusConfigOverride)), buildspecOverride: \(Swift.String(describing: buildspecOverride)), cacheOverride: \(Swift.String(describing: cacheOverride)), certificateOverride: \(Swift.String(describing: certificateOverride)), computeTypeOverride: \(Swift.String(describing: computeTypeOverride)), debugSessionEnabled: \(Swift.String(describing: debugSessionEnabled)), encryptionKeyOverride: \(Swift.String(describing: encryptionKeyOverride)), environmentTypeOverride: \(Swift.String(describing: environmentTypeOverride)), environmentVariablesOverride: \(Swift.String(describing: environmentVariablesOverride)), gitCloneDepthOverride: \(Swift.String(describing: gitCloneDepthOverride)), gitSubmodulesConfigOverride: \(Swift.String(describing: gitSubmodulesConfigOverride)), idempotencyToken: \(Swift.String(describing: idempotencyToken)), imageOverride: \(Swift.String(describing: imageOverride)), imagePullCredentialsTypeOverride: \(Swift.String(describing: imagePullCredentialsTypeOverride)), insecureSslOverride: \(Swift.String(describing: insecureSslOverride)), logsConfigOverride: \(Swift.String(describing: logsConfigOverride)), privilegedModeOverride: \(Swift.String(describing: privilegedModeOverride)), projectName: \(Swift.String(describing: projectName)), queuedTimeoutInMinutesOverride: \(Swift.String(describing: queuedTimeoutInMinutesOverride)), registryCredentialOverride: \(Swift.String(describing: registryCredentialOverride)), reportBuildStatusOverride: \(Swift.String(describing: reportBuildStatusOverride)), secondaryArtifactsOverride: \(Swift.String(describing: secondaryArtifactsOverride)), secondarySourcesOverride: \(Swift.String(describing: secondarySourcesOverride)), secondarySourcesVersionOverride: \(Swift.String(describing: secondarySourcesVersionOverride)), serviceRoleOverride: \(Swift.String(describing: serviceRoleOverride)), sourceAuthOverride: \(Swift.String(describing: sourceAuthOverride)), sourceLocationOverride: \(Swift.String(describing: sourceLocationOverride)), sourceTypeOverride: \(Swift.String(describing: sourceTypeOverride)), sourceVersion: \(Swift.String(describing: sourceVersion)), timeoutInMinutesOverride: \(Swift.String(describing: timeoutInMinutesOverride)))"}
}

extension StartBuildInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactsOverride
        case buildStatusConfigOverride
        case buildspecOverride
        case cacheOverride
        case certificateOverride
        case computeTypeOverride
        case debugSessionEnabled
        case encryptionKeyOverride
        case environmentTypeOverride
        case environmentVariablesOverride
        case gitCloneDepthOverride
        case gitSubmodulesConfigOverride
        case idempotencyToken
        case imageOverride
        case imagePullCredentialsTypeOverride
        case insecureSslOverride
        case logsConfigOverride
        case privilegedModeOverride
        case projectName
        case queuedTimeoutInMinutesOverride
        case registryCredentialOverride
        case reportBuildStatusOverride
        case secondaryArtifactsOverride
        case secondarySourcesOverride
        case secondarySourcesVersionOverride
        case serviceRoleOverride
        case sourceAuthOverride
        case sourceLocationOverride
        case sourceTypeOverride
        case sourceVersion
        case timeoutInMinutesOverride
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactsOverride = artifactsOverride {
            try encodeContainer.encode(artifactsOverride, forKey: .artifactsOverride)
        }
        if let buildStatusConfigOverride = buildStatusConfigOverride {
            try encodeContainer.encode(buildStatusConfigOverride, forKey: .buildStatusConfigOverride)
        }
        if let buildspecOverride = buildspecOverride {
            try encodeContainer.encode(buildspecOverride, forKey: .buildspecOverride)
        }
        if let cacheOverride = cacheOverride {
            try encodeContainer.encode(cacheOverride, forKey: .cacheOverride)
        }
        if let certificateOverride = certificateOverride {
            try encodeContainer.encode(certificateOverride, forKey: .certificateOverride)
        }
        if let computeTypeOverride = computeTypeOverride {
            try encodeContainer.encode(computeTypeOverride.rawValue, forKey: .computeTypeOverride)
        }
        if let debugSessionEnabled = debugSessionEnabled {
            try encodeContainer.encode(debugSessionEnabled, forKey: .debugSessionEnabled)
        }
        if let encryptionKeyOverride = encryptionKeyOverride {
            try encodeContainer.encode(encryptionKeyOverride, forKey: .encryptionKeyOverride)
        }
        if let environmentTypeOverride = environmentTypeOverride {
            try encodeContainer.encode(environmentTypeOverride.rawValue, forKey: .environmentTypeOverride)
        }
        if let environmentVariablesOverride = environmentVariablesOverride {
            var environmentVariablesOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environmentVariablesOverride)
            for environmentvariables0 in environmentVariablesOverride {
                try environmentVariablesOverrideContainer.encode(environmentvariables0)
            }
        }
        if let gitCloneDepthOverride = gitCloneDepthOverride {
            try encodeContainer.encode(gitCloneDepthOverride, forKey: .gitCloneDepthOverride)
        }
        if let gitSubmodulesConfigOverride = gitSubmodulesConfigOverride {
            try encodeContainer.encode(gitSubmodulesConfigOverride, forKey: .gitSubmodulesConfigOverride)
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let imageOverride = imageOverride {
            try encodeContainer.encode(imageOverride, forKey: .imageOverride)
        }
        if let imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverride {
            try encodeContainer.encode(imagePullCredentialsTypeOverride.rawValue, forKey: .imagePullCredentialsTypeOverride)
        }
        if let insecureSslOverride = insecureSslOverride {
            try encodeContainer.encode(insecureSslOverride, forKey: .insecureSslOverride)
        }
        if let logsConfigOverride = logsConfigOverride {
            try encodeContainer.encode(logsConfigOverride, forKey: .logsConfigOverride)
        }
        if let privilegedModeOverride = privilegedModeOverride {
            try encodeContainer.encode(privilegedModeOverride, forKey: .privilegedModeOverride)
        }
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverride {
            try encodeContainer.encode(queuedTimeoutInMinutesOverride, forKey: .queuedTimeoutInMinutesOverride)
        }
        if let registryCredentialOverride = registryCredentialOverride {
            try encodeContainer.encode(registryCredentialOverride, forKey: .registryCredentialOverride)
        }
        if let reportBuildStatusOverride = reportBuildStatusOverride {
            try encodeContainer.encode(reportBuildStatusOverride, forKey: .reportBuildStatusOverride)
        }
        if let secondaryArtifactsOverride = secondaryArtifactsOverride {
            var secondaryArtifactsOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondaryArtifactsOverride)
            for projectartifactslist0 in secondaryArtifactsOverride {
                try secondaryArtifactsOverrideContainer.encode(projectartifactslist0)
            }
        }
        if let secondarySourcesOverride = secondarySourcesOverride {
            var secondarySourcesOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySourcesOverride)
            for projectsources0 in secondarySourcesOverride {
                try secondarySourcesOverrideContainer.encode(projectsources0)
            }
        }
        if let secondarySourcesVersionOverride = secondarySourcesVersionOverride {
            var secondarySourcesVersionOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySourcesVersionOverride)
            for projectsecondarysourceversions0 in secondarySourcesVersionOverride {
                try secondarySourcesVersionOverrideContainer.encode(projectsecondarysourceversions0)
            }
        }
        if let serviceRoleOverride = serviceRoleOverride {
            try encodeContainer.encode(serviceRoleOverride, forKey: .serviceRoleOverride)
        }
        if let sourceAuthOverride = sourceAuthOverride {
            try encodeContainer.encode(sourceAuthOverride, forKey: .sourceAuthOverride)
        }
        if let sourceLocationOverride = sourceLocationOverride {
            try encodeContainer.encode(sourceLocationOverride, forKey: .sourceLocationOverride)
        }
        if let sourceTypeOverride = sourceTypeOverride {
            try encodeContainer.encode(sourceTypeOverride.rawValue, forKey: .sourceTypeOverride)
        }
        if let sourceVersion = sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
        if let timeoutInMinutesOverride = timeoutInMinutesOverride {
            try encodeContainer.encode(timeoutInMinutesOverride, forKey: .timeoutInMinutesOverride)
        }
    }
}

public struct StartBuildInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartBuildInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartBuildInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartBuildInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartBuildOutputError>
}

public struct StartBuildInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartBuildInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartBuildInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartBuildInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartBuildOutputError>
}

public struct StartBuildInput: Swift.Equatable {
    /// <p>Build output artifact settings that override, for this build only, the latest ones
    ///             already defined in the build project.</p>
    public let artifactsOverride: CodeBuildClientTypes.ProjectArtifacts?
    /// <p>Contains information that defines how the build project reports the build status to
    ///             the source provider. This option is only used when the source provider is
    ///                 <code>GITHUB</code>, <code>GITHUB_ENTERPRISE</code>, or
    ///             <code>BITBUCKET</code>.</p>
    public let buildStatusConfigOverride: CodeBuildClientTypes.BuildStatusConfig?
    /// <p>A buildspec file declaration that overrides, for this build only, the latest one
    ///             already defined in the build project.</p>
    ///         <p> If this value is set, it can be either an inline buildspec definition, the path to an
    ///             alternate buildspec file relative to the value of the built-in
    ///                 <code>CODEBUILD_SRC_DIR</code> environment variable, or the path to an S3 bucket.
    ///             The bucket must be in the same AWS Region as the build project. Specify the buildspec
    ///             file using its ARN (for example,
    ///                 <code>arn:aws:s3:::my-codebuild-sample2/buildspec.yml</code>). If this value is not
    ///             provided or is set to an empty string, the source code must contain a buildspec file in
    ///             its root directory. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-name-storage">Buildspec File Name and Storage Location</a>. </p>
    public let buildspecOverride: Swift.String?
    /// <p>A ProjectCache object specified for this build that overrides the one defined in the
    ///             build project.</p>
    public let cacheOverride: CodeBuildClientTypes.ProjectCache?
    /// <p>The name of a certificate for this build that overrides the one specified in the build
    ///             project.</p>
    public let certificateOverride: Swift.String?
    /// <p>The name of a compute type for this build that overrides the one specified in the
    ///             build project.</p>
    public let computeTypeOverride: CodeBuildClientTypes.ComputeType?
    /// <p>Specifies if session debugging is enabled for this build. For more information, see
    ///                 <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html">Viewing a running build in Session Manager</a>.</p>
    public let debugSessionEnabled: Swift.Bool?
    /// <p>The AWS Key Management Service (AWS KMS) customer master key (CMK) that overrides the one specified in the build
    ///             project. The CMK key encrypts the build output artifacts.</p>
    ///         <note>
    ///             <p> You can use a cross-account KMS key to encrypt the build output artifacts if your
    ///                 service role has permission to that key. </p>
    ///         </note>
    ///         <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using
    ///             the format <code>alias/<alias-name></code>).</p>
    public let encryptionKeyOverride: Swift.String?
    /// <p>A container type for this build that overrides the one specified in the build
    ///             project.</p>
    public let environmentTypeOverride: CodeBuildClientTypes.EnvironmentType?
    /// <p>A set of environment variables that overrides, for this build only, the latest ones
    ///             already defined in the build project.</p>
    public let environmentVariablesOverride: [CodeBuildClientTypes.EnvironmentVariable]?
    /// <p>The user-defined depth of history, with a minimum value of 0, that overrides, for this
    ///             build only, any previous depth of history defined in the build project.</p>
    public let gitCloneDepthOverride: Swift.Int?
    /// <p> Information about the Git submodules configuration for this build of an AWS CodeBuild build
    ///             project. </p>
    public let gitSubmodulesConfigOverride: CodeBuildClientTypes.GitSubmodulesConfig?
    /// <p>A unique, case sensitive identifier you provide to ensure the idempotency of the
    ///             StartBuild request. The token is included in the StartBuild request and is valid for 5
    ///             minutes. If you repeat the StartBuild request with the same token, but change a
    ///             parameter, AWS CodeBuild returns a parameter mismatch error. </p>
    public let idempotencyToken: Swift.String?
    /// <p>The name of an image for this build that overrides the one specified in the build
    ///             project.</p>
    public let imageOverride: Swift.String?
    /// <p>The type of credentials AWS CodeBuild uses to pull images in your build. There are two valid
    ///             values: </p>
    ///         <dl>
    ///             <dt>CODEBUILD</dt>
    ///             <dd>
    ///                     <p>Specifies that AWS CodeBuild uses its own credentials. This requires that you
    ///                         modify your ECR repository policy to trust AWS CodeBuild's service principal.</p>
    ///                 </dd>
    ///             <dt>SERVICE_ROLE</dt>
    ///             <dd>
    ///                     <p>Specifies that AWS CodeBuild uses your build project's service role. </p>
    ///                 </dd>
    ///          </dl>
    ///         <p>When using a cross-account or private registry image, you must use
    ///             <code>SERVICE_ROLE</code> credentials. When using an AWS CodeBuild curated image,
    ///             you must use <code>CODEBUILD</code> credentials. </p>
    public let imagePullCredentialsTypeOverride: CodeBuildClientTypes.ImagePullCredentialsType?
    /// <p>Enable this flag to override the insecure SSL setting that is specified in the build
    ///             project. The insecure SSL setting determines whether to ignore SSL warnings while
    ///             connecting to the project source code. This override applies only if the build's source
    ///             is GitHub Enterprise.</p>
    public let insecureSslOverride: Swift.Bool?
    /// <p> Log settings for this build that override the log settings defined in the build
    ///             project. </p>
    public let logsConfigOverride: CodeBuildClientTypes.LogsConfig?
    /// <p>Enable this flag to override privileged mode in the build project.</p>
    public let privilegedModeOverride: Swift.Bool?
    /// <p>The name of the AWS CodeBuild build project to start running a build.</p>
    public let projectName: Swift.String?
    /// <p> The number of minutes a build is allowed to be queued before it times out. </p>
    public let queuedTimeoutInMinutesOverride: Swift.Int?
    /// <p> The credentials for access to a private registry. </p>
    public let registryCredentialOverride: CodeBuildClientTypes.RegistryCredential?
    /// <p> Set to true to report to your source provider the status of a build's start and
    ///             completion. If you use this option with a source provider other than GitHub, GitHub
    ///             Enterprise, or Bitbucket, an <code>invalidInputException</code> is thrown. </p>
    ///             <p>To be able to report the build status to the source provider, the user associated with the source provider must
    /// have write access to the repo. If the user does not have write access, the build status cannot be updated. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/access-tokens.html">Source provider access</a> in the <i>AWS CodeBuild User Guide</i>.</p>
    ///         <note>
    ///             <p> The status of a build triggered by a webhook is always reported to your source
    ///                 provider. </p>
    ///         </note>
    public let reportBuildStatusOverride: Swift.Bool?
    /// <p> An array of <code>ProjectArtifacts</code> objects. </p>
    public let secondaryArtifactsOverride: [CodeBuildClientTypes.ProjectArtifacts]?
    /// <p> An array of <code>ProjectSource</code> objects. </p>
    public let secondarySourcesOverride: [CodeBuildClientTypes.ProjectSource]?
    /// <p> An array of <code>ProjectSourceVersion</code> objects that specify one or more
    ///             versions of the project's secondary sources to be used for this build only. </p>
    public let secondarySourcesVersionOverride: [CodeBuildClientTypes.ProjectSourceVersion]?
    /// <p>The name of a service role for this build that overrides the one specified in the
    ///             build project.</p>
    public let serviceRoleOverride: Swift.String?
    /// <p>An authorization type for this build that overrides the one defined in the build
    ///             project. This override applies only if the build project's source is BitBucket or
    ///             GitHub.</p>
    public let sourceAuthOverride: CodeBuildClientTypes.SourceAuth?
    /// <p>A location that overrides, for this build, the source location for the one defined in
    ///             the build project.</p>
    public let sourceLocationOverride: Swift.String?
    /// <p>A source input type, for this build, that overrides the source input defined in the
    ///             build project.</p>
    public let sourceTypeOverride: CodeBuildClientTypes.SourceType?
    /// <p>The version of the build input to be built, for this build only. If not specified,
    ///             the latest version is used. If specified, the contents depends on the source
    ///             provider:</p>
    ///         <dl>
    ///             <dt>AWS CodeCommit</dt>
    ///             <dd>
    ///                     <p>The commit ID, branch, or Git tag to use.</p>
    ///                 </dd>
    ///             <dt>GitHub</dt>
    ///             <dd>
    ///                     <p>The commit ID, pull request ID, branch name, or tag name that corresponds
    ///                         to the version of the source code you want to build. If a pull request ID is
    ///                         specified, it must use the format <code>pr/pull-request-ID</code> (for
    ///                         example <code>pr/25</code>). If a branch name is specified, the branch's
    ///                         HEAD commit ID is used. If not specified, the default branch's HEAD commit
    ///                         ID is used.</p>
    ///                 </dd>
    ///             <dt>Bitbucket</dt>
    ///             <dd>
    ///                     <p>The commit ID, branch name, or tag name that corresponds to the version of
    ///                         the source code you want to build. If a branch name is specified, the
    ///                         branch's HEAD commit ID is used. If not specified, the default branch's HEAD
    ///                         commit ID is used.</p>
    ///                 </dd>
    ///             <dt>Amazon S3</dt>
    ///             <dd>
    ///                     <p>The version ID of the object that represents the build input ZIP file to
    ///                         use.</p>
    ///                 </dd>
    ///          </dl>
    ///         <p>If <code>sourceVersion</code> is specified at the project level, then this
    ///             <code>sourceVersion</code> (at the build level) takes precedence. </p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html">Source Version Sample
    ///             with CodeBuild</a> in the <i>AWS CodeBuild User Guide</i>. </p>
    public let sourceVersion: Swift.String?
    /// <p>The number of build timeout minutes, from 5 to 480 (8 hours), that overrides, for this
    ///             build only, the latest setting already defined in the build project.</p>
    public let timeoutInMinutesOverride: Swift.Int?

    public init (
        artifactsOverride: CodeBuildClientTypes.ProjectArtifacts? = nil,
        buildStatusConfigOverride: CodeBuildClientTypes.BuildStatusConfig? = nil,
        buildspecOverride: Swift.String? = nil,
        cacheOverride: CodeBuildClientTypes.ProjectCache? = nil,
        certificateOverride: Swift.String? = nil,
        computeTypeOverride: CodeBuildClientTypes.ComputeType? = nil,
        debugSessionEnabled: Swift.Bool? = nil,
        encryptionKeyOverride: Swift.String? = nil,
        environmentTypeOverride: CodeBuildClientTypes.EnvironmentType? = nil,
        environmentVariablesOverride: [CodeBuildClientTypes.EnvironmentVariable]? = nil,
        gitCloneDepthOverride: Swift.Int? = nil,
        gitSubmodulesConfigOverride: CodeBuildClientTypes.GitSubmodulesConfig? = nil,
        idempotencyToken: Swift.String? = nil,
        imageOverride: Swift.String? = nil,
        imagePullCredentialsTypeOverride: CodeBuildClientTypes.ImagePullCredentialsType? = nil,
        insecureSslOverride: Swift.Bool? = nil,
        logsConfigOverride: CodeBuildClientTypes.LogsConfig? = nil,
        privilegedModeOverride: Swift.Bool? = nil,
        projectName: Swift.String? = nil,
        queuedTimeoutInMinutesOverride: Swift.Int? = nil,
        registryCredentialOverride: CodeBuildClientTypes.RegistryCredential? = nil,
        reportBuildStatusOverride: Swift.Bool? = nil,
        secondaryArtifactsOverride: [CodeBuildClientTypes.ProjectArtifacts]? = nil,
        secondarySourcesOverride: [CodeBuildClientTypes.ProjectSource]? = nil,
        secondarySourcesVersionOverride: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
        serviceRoleOverride: Swift.String? = nil,
        sourceAuthOverride: CodeBuildClientTypes.SourceAuth? = nil,
        sourceLocationOverride: Swift.String? = nil,
        sourceTypeOverride: CodeBuildClientTypes.SourceType? = nil,
        sourceVersion: Swift.String? = nil,
        timeoutInMinutesOverride: Swift.Int? = nil
    )
    {
        self.artifactsOverride = artifactsOverride
        self.buildStatusConfigOverride = buildStatusConfigOverride
        self.buildspecOverride = buildspecOverride
        self.cacheOverride = cacheOverride
        self.certificateOverride = certificateOverride
        self.computeTypeOverride = computeTypeOverride
        self.debugSessionEnabled = debugSessionEnabled
        self.encryptionKeyOverride = encryptionKeyOverride
        self.environmentTypeOverride = environmentTypeOverride
        self.environmentVariablesOverride = environmentVariablesOverride
        self.gitCloneDepthOverride = gitCloneDepthOverride
        self.gitSubmodulesConfigOverride = gitSubmodulesConfigOverride
        self.idempotencyToken = idempotencyToken
        self.imageOverride = imageOverride
        self.imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverride
        self.insecureSslOverride = insecureSslOverride
        self.logsConfigOverride = logsConfigOverride
        self.privilegedModeOverride = privilegedModeOverride
        self.projectName = projectName
        self.queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverride
        self.registryCredentialOverride = registryCredentialOverride
        self.reportBuildStatusOverride = reportBuildStatusOverride
        self.secondaryArtifactsOverride = secondaryArtifactsOverride
        self.secondarySourcesOverride = secondarySourcesOverride
        self.secondarySourcesVersionOverride = secondarySourcesVersionOverride
        self.serviceRoleOverride = serviceRoleOverride
        self.sourceAuthOverride = sourceAuthOverride
        self.sourceLocationOverride = sourceLocationOverride
        self.sourceTypeOverride = sourceTypeOverride
        self.sourceVersion = sourceVersion
        self.timeoutInMinutesOverride = timeoutInMinutesOverride
    }
}

struct StartBuildInputBody: Swift.Equatable {
    public let projectName: Swift.String?
    public let secondarySourcesOverride: [CodeBuildClientTypes.ProjectSource]?
    public let secondarySourcesVersionOverride: [CodeBuildClientTypes.ProjectSourceVersion]?
    public let sourceVersion: Swift.String?
    public let artifactsOverride: CodeBuildClientTypes.ProjectArtifacts?
    public let secondaryArtifactsOverride: [CodeBuildClientTypes.ProjectArtifacts]?
    public let environmentVariablesOverride: [CodeBuildClientTypes.EnvironmentVariable]?
    public let sourceTypeOverride: CodeBuildClientTypes.SourceType?
    public let sourceLocationOverride: Swift.String?
    public let sourceAuthOverride: CodeBuildClientTypes.SourceAuth?
    public let gitCloneDepthOverride: Swift.Int?
    public let gitSubmodulesConfigOverride: CodeBuildClientTypes.GitSubmodulesConfig?
    public let buildspecOverride: Swift.String?
    public let insecureSslOverride: Swift.Bool?
    public let reportBuildStatusOverride: Swift.Bool?
    public let buildStatusConfigOverride: CodeBuildClientTypes.BuildStatusConfig?
    public let environmentTypeOverride: CodeBuildClientTypes.EnvironmentType?
    public let imageOverride: Swift.String?
    public let computeTypeOverride: CodeBuildClientTypes.ComputeType?
    public let certificateOverride: Swift.String?
    public let cacheOverride: CodeBuildClientTypes.ProjectCache?
    public let serviceRoleOverride: Swift.String?
    public let privilegedModeOverride: Swift.Bool?
    public let timeoutInMinutesOverride: Swift.Int?
    public let queuedTimeoutInMinutesOverride: Swift.Int?
    public let encryptionKeyOverride: Swift.String?
    public let idempotencyToken: Swift.String?
    public let logsConfigOverride: CodeBuildClientTypes.LogsConfig?
    public let registryCredentialOverride: CodeBuildClientTypes.RegistryCredential?
    public let imagePullCredentialsTypeOverride: CodeBuildClientTypes.ImagePullCredentialsType?
    public let debugSessionEnabled: Swift.Bool?
}

extension StartBuildInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactsOverride
        case buildStatusConfigOverride
        case buildspecOverride
        case cacheOverride
        case certificateOverride
        case computeTypeOverride
        case debugSessionEnabled
        case encryptionKeyOverride
        case environmentTypeOverride
        case environmentVariablesOverride
        case gitCloneDepthOverride
        case gitSubmodulesConfigOverride
        case idempotencyToken
        case imageOverride
        case imagePullCredentialsTypeOverride
        case insecureSslOverride
        case logsConfigOverride
        case privilegedModeOverride
        case projectName
        case queuedTimeoutInMinutesOverride
        case registryCredentialOverride
        case reportBuildStatusOverride
        case secondaryArtifactsOverride
        case secondarySourcesOverride
        case secondarySourcesVersionOverride
        case serviceRoleOverride
        case sourceAuthOverride
        case sourceLocationOverride
        case sourceTypeOverride
        case sourceVersion
        case timeoutInMinutesOverride
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let secondarySourcesOverrideContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectSource?].self, forKey: .secondarySourcesOverride)
        var secondarySourcesOverrideDecoded0:[CodeBuildClientTypes.ProjectSource]? = nil
        if let secondarySourcesOverrideContainer = secondarySourcesOverrideContainer {
            secondarySourcesOverrideDecoded0 = [CodeBuildClientTypes.ProjectSource]()
            for structure0 in secondarySourcesOverrideContainer {
                if let structure0 = structure0 {
                    secondarySourcesOverrideDecoded0?.append(structure0)
                }
            }
        }
        secondarySourcesOverride = secondarySourcesOverrideDecoded0
        let secondarySourcesVersionOverrideContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectSourceVersion?].self, forKey: .secondarySourcesVersionOverride)
        var secondarySourcesVersionOverrideDecoded0:[CodeBuildClientTypes.ProjectSourceVersion]? = nil
        if let secondarySourcesVersionOverrideContainer = secondarySourcesVersionOverrideContainer {
            secondarySourcesVersionOverrideDecoded0 = [CodeBuildClientTypes.ProjectSourceVersion]()
            for structure0 in secondarySourcesVersionOverrideContainer {
                if let structure0 = structure0 {
                    secondarySourcesVersionOverrideDecoded0?.append(structure0)
                }
            }
        }
        secondarySourcesVersionOverride = secondarySourcesVersionOverrideDecoded0
        let sourceVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
        let artifactsOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectArtifacts.self, forKey: .artifactsOverride)
        artifactsOverride = artifactsOverrideDecoded
        let secondaryArtifactsOverrideContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectArtifacts?].self, forKey: .secondaryArtifactsOverride)
        var secondaryArtifactsOverrideDecoded0:[CodeBuildClientTypes.ProjectArtifacts]? = nil
        if let secondaryArtifactsOverrideContainer = secondaryArtifactsOverrideContainer {
            secondaryArtifactsOverrideDecoded0 = [CodeBuildClientTypes.ProjectArtifacts]()
            for structure0 in secondaryArtifactsOverrideContainer {
                if let structure0 = structure0 {
                    secondaryArtifactsOverrideDecoded0?.append(structure0)
                }
            }
        }
        secondaryArtifactsOverride = secondaryArtifactsOverrideDecoded0
        let environmentVariablesOverrideContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.EnvironmentVariable?].self, forKey: .environmentVariablesOverride)
        var environmentVariablesOverrideDecoded0:[CodeBuildClientTypes.EnvironmentVariable]? = nil
        if let environmentVariablesOverrideContainer = environmentVariablesOverrideContainer {
            environmentVariablesOverrideDecoded0 = [CodeBuildClientTypes.EnvironmentVariable]()
            for structure0 in environmentVariablesOverrideContainer {
                if let structure0 = structure0 {
                    environmentVariablesOverrideDecoded0?.append(structure0)
                }
            }
        }
        environmentVariablesOverride = environmentVariablesOverrideDecoded0
        let sourceTypeOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SourceType.self, forKey: .sourceTypeOverride)
        sourceTypeOverride = sourceTypeOverrideDecoded
        let sourceLocationOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLocationOverride)
        sourceLocationOverride = sourceLocationOverrideDecoded
        let sourceAuthOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.SourceAuth.self, forKey: .sourceAuthOverride)
        sourceAuthOverride = sourceAuthOverrideDecoded
        let gitCloneDepthOverrideDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gitCloneDepthOverride)
        gitCloneDepthOverride = gitCloneDepthOverrideDecoded
        let gitSubmodulesConfigOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.GitSubmodulesConfig.self, forKey: .gitSubmodulesConfigOverride)
        gitSubmodulesConfigOverride = gitSubmodulesConfigOverrideDecoded
        let buildspecOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildspecOverride)
        buildspecOverride = buildspecOverrideDecoded
        let insecureSslOverrideDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .insecureSslOverride)
        insecureSslOverride = insecureSslOverrideDecoded
        let reportBuildStatusOverrideDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reportBuildStatusOverride)
        reportBuildStatusOverride = reportBuildStatusOverrideDecoded
        let buildStatusConfigOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BuildStatusConfig.self, forKey: .buildStatusConfigOverride)
        buildStatusConfigOverride = buildStatusConfigOverrideDecoded
        let environmentTypeOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.EnvironmentType.self, forKey: .environmentTypeOverride)
        environmentTypeOverride = environmentTypeOverrideDecoded
        let imageOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageOverride)
        imageOverride = imageOverrideDecoded
        let computeTypeOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ComputeType.self, forKey: .computeTypeOverride)
        computeTypeOverride = computeTypeOverrideDecoded
        let certificateOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateOverride)
        certificateOverride = certificateOverrideDecoded
        let cacheOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectCache.self, forKey: .cacheOverride)
        cacheOverride = cacheOverrideDecoded
        let serviceRoleOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRoleOverride)
        serviceRoleOverride = serviceRoleOverrideDecoded
        let privilegedModeOverrideDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privilegedModeOverride)
        privilegedModeOverride = privilegedModeOverrideDecoded
        let timeoutInMinutesOverrideDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInMinutesOverride)
        timeoutInMinutesOverride = timeoutInMinutesOverrideDecoded
        let queuedTimeoutInMinutesOverrideDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .queuedTimeoutInMinutesOverride)
        queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverrideDecoded
        let encryptionKeyOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKeyOverride)
        encryptionKeyOverride = encryptionKeyOverrideDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
        let logsConfigOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.LogsConfig.self, forKey: .logsConfigOverride)
        logsConfigOverride = logsConfigOverrideDecoded
        let registryCredentialOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.RegistryCredential.self, forKey: .registryCredentialOverride)
        registryCredentialOverride = registryCredentialOverrideDecoded
        let imagePullCredentialsTypeOverrideDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ImagePullCredentialsType.self, forKey: .imagePullCredentialsTypeOverride)
        imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverrideDecoded
        let debugSessionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .debugSessionEnabled)
        debugSessionEnabled = debugSessionEnabledDecoded
    }
}

extension StartBuildOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartBuildOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccountLimitExceededException" : self = .accountLimitExceededException(try AccountLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartBuildOutputError: Swift.Error, Swift.Equatable {
    case accountLimitExceededException(AccountLimitExceededException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartBuildOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartBuildOutputResponse(build: \(Swift.String(describing: build)))"}
}

extension StartBuildOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartBuildOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.build = output.build
        } else {
            self.build = nil
        }
    }
}

public struct StartBuildOutputResponse: Swift.Equatable {
    /// <p>Information about the build to be run.</p>
    public let build: CodeBuildClientTypes.Build?

    public init (
        build: CodeBuildClientTypes.Build? = nil
    )
    {
        self.build = build
    }
}

struct StartBuildOutputResponseBody: Swift.Equatable {
    public let build: CodeBuildClientTypes.Build?
}

extension StartBuildOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case build
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.Build.self, forKey: .build)
        build = buildDecoded
    }
}

extension CodeBuildClientTypes {
    public enum StatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case fault
        case inProgress
        case stopped
        case succeeded
        case timedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusType] {
            return [
                .failed,
                .fault,
                .inProgress,
                .stopped,
                .succeeded,
                .timedOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .fault: return "FAULT"
            case .inProgress: return "IN_PROGRESS"
            case .stopped: return "STOPPED"
            case .succeeded: return "SUCCEEDED"
            case .timedOut: return "TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StatusType(rawValue: rawValue) ?? StatusType.sdkUnknown(rawValue)
        }
    }
}

public struct StopBuildBatchInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopBuildBatchInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopBuildBatchInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopBuildBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopBuildBatchInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopBuildBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopBuildBatchOutputError>
}

extension StopBuildBatchInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopBuildBatchInput(id: \(Swift.String(describing: id)))"}
}

extension StopBuildBatchInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }
}

public struct StopBuildBatchInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopBuildBatchInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopBuildBatchInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopBuildBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopBuildBatchInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopBuildBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopBuildBatchOutputError>
}

public struct StopBuildBatchInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopBuildBatchInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopBuildBatchInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopBuildBatchOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopBuildBatchInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopBuildBatchOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopBuildBatchOutputError>
}

public struct StopBuildBatchInput: Swift.Equatable {
    /// <p>The identifier of the batch build to stop.</p>
    public let id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct StopBuildBatchInputBody: Swift.Equatable {
    public let id: Swift.String?
}

extension StopBuildBatchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension StopBuildBatchOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopBuildBatchOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopBuildBatchOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopBuildBatchOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopBuildBatchOutputResponse(buildBatch: \(Swift.String(describing: buildBatch)))"}
}

extension StopBuildBatchOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StopBuildBatchOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.buildBatch = output.buildBatch
        } else {
            self.buildBatch = nil
        }
    }
}

public struct StopBuildBatchOutputResponse: Swift.Equatable {
    /// <p>Contains information about a batch build.</p>
    public let buildBatch: CodeBuildClientTypes.BuildBatch?

    public init (
        buildBatch: CodeBuildClientTypes.BuildBatch? = nil
    )
    {
        self.buildBatch = buildBatch
    }
}

struct StopBuildBatchOutputResponseBody: Swift.Equatable {
    public let buildBatch: CodeBuildClientTypes.BuildBatch?
}

extension StopBuildBatchOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildBatch
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildBatchDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.BuildBatch.self, forKey: .buildBatch)
        buildBatch = buildBatchDecoded
    }
}

public struct StopBuildInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopBuildInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopBuildInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopBuildInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopBuildOutputError>
}

extension StopBuildInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopBuildInput(id: \(Swift.String(describing: id)))"}
}

extension StopBuildInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }
}

public struct StopBuildInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopBuildInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopBuildInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopBuildInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopBuildOutputError>
}

public struct StopBuildInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopBuildInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopBuildInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopBuildOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopBuildInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopBuildOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopBuildOutputError>
}

public struct StopBuildInput: Swift.Equatable {
    /// <p>The ID of the build.</p>
    public let id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct StopBuildInputBody: Swift.Equatable {
    public let id: Swift.String?
}

extension StopBuildInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension StopBuildOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopBuildOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopBuildOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopBuildOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopBuildOutputResponse(build: \(Swift.String(describing: build)))"}
}

extension StopBuildOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StopBuildOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.build = output.build
        } else {
            self.build = nil
        }
    }
}

public struct StopBuildOutputResponse: Swift.Equatable {
    /// <p>Information about the build.</p>
    public let build: CodeBuildClientTypes.Build?

    public init (
        build: CodeBuildClientTypes.Build? = nil
    )
    {
        self.build = build
    }
}

struct StopBuildOutputResponseBody: Swift.Equatable {
    public let build: CodeBuildClientTypes.Build?
}

extension StopBuildOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case build
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.Build.self, forKey: .build)
        build = buildDecoded
    }
}

extension CodeBuildClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CodeBuildClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension CodeBuildClientTypes {
    /// <p>A tag, consisting of a key and a value.</p>
    ///         <p>This tag is available for use by AWS services that support tags in AWS CodeBuild.</p>
    public struct Tag: Swift.Equatable {
        /// <p>The tag's key.</p>
        public let key: Swift.String?
        /// <p>The tag's value.</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension CodeBuildClientTypes.TestCase: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationInNanoSeconds
        case expired
        case message
        case name
        case prefix
        case reportArn
        case status
        case testRawDataPath
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationInNanoSeconds = durationInNanoSeconds {
            try encodeContainer.encode(durationInNanoSeconds, forKey: .durationInNanoSeconds)
        }
        if let expired = expired {
            try encodeContainer.encode(expired.timeIntervalSince1970, forKey: .expired)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
        if let reportArn = reportArn {
            try encodeContainer.encode(reportArn, forKey: .reportArn)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let testRawDataPath = testRawDataPath {
            try encodeContainer.encode(testRawDataPath, forKey: .testRawDataPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportArn)
        reportArn = reportArnDecoded
        let testRawDataPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .testRawDataPath)
        testRawDataPath = testRawDataPathDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let durationInNanoSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInNanoSeconds)
        durationInNanoSeconds = durationInNanoSecondsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let expiredDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expired)
        expired = expiredDecoded
    }
}

extension CodeBuildClientTypes.TestCase: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestCase(durationInNanoSeconds: \(Swift.String(describing: durationInNanoSeconds)), expired: \(Swift.String(describing: expired)), message: \(Swift.String(describing: message)), name: \(Swift.String(describing: name)), prefix: \(Swift.String(describing: prefix)), reportArn: \(Swift.String(describing: reportArn)), status: \(Swift.String(describing: status)), testRawDataPath: \(Swift.String(describing: testRawDataPath)))"}
}

extension CodeBuildClientTypes {
    /// <p> Information about a test case created using a framework such as NUnit or Cucumber. A
    ///             test case might be a unit test or a configuration test. </p>
    public struct TestCase: Swift.Equatable {
        /// <p> The number of nanoseconds it took to run this test case. </p>
        public let durationInNanoSeconds: Swift.Int?
        /// <p> The date and time a test case expires. A test case expires 30 days after it is
        ///             created. An expired test case is not available to view in CodeBuild. </p>
        public let expired: ClientRuntime.Date?
        /// <p> A message associated with a test case. For example, an error message or stack trace.
        ///         </p>
        public let message: Swift.String?
        /// <p> The name of the test case. </p>
        public let name: Swift.String?
        /// <p> A string that is applied to a series of related test cases. CodeBuild generates the
        ///             prefix. The prefix depends on the framework used to generate the tests. </p>
        public let prefix: Swift.String?
        /// <p> The ARN of the report to which the test case belongs. </p>
        public let reportArn: Swift.String?
        /// <p> The status returned by the test case after it was run. Valid statuses are
        ///                 <code>SUCCEEDED</code>, <code>FAILED</code>, <code>ERROR</code>,
        ///                 <code>SKIPPED</code>, and <code>UNKNOWN</code>. </p>
        public let status: Swift.String?
        /// <p> The path to the raw data file that contains the test result. </p>
        public let testRawDataPath: Swift.String?

        public init (
            durationInNanoSeconds: Swift.Int? = nil,
            expired: ClientRuntime.Date? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil,
            prefix: Swift.String? = nil,
            reportArn: Swift.String? = nil,
            status: Swift.String? = nil,
            testRawDataPath: Swift.String? = nil
        )
        {
            self.durationInNanoSeconds = durationInNanoSeconds
            self.expired = expired
            self.message = message
            self.name = name
            self.prefix = prefix
            self.reportArn = reportArn
            self.status = status
            self.testRawDataPath = testRawDataPath
        }
    }

}

extension CodeBuildClientTypes.TestCaseFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyword
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyword = keyword {
            try encodeContainer.encode(keyword, forKey: .keyword)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let keywordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyword)
        keyword = keywordDecoded
    }
}

extension CodeBuildClientTypes.TestCaseFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestCaseFilter(keyword: \(Swift.String(describing: keyword)), status: \(Swift.String(describing: status)))"}
}

extension CodeBuildClientTypes {
    /// <p>A filter used to return specific types of test cases. In order to pass the filter, the
    ///             report must meet all of the filter properties.</p>
    public struct TestCaseFilter: Swift.Equatable {
        /// <p>A keyword that is used to filter on the <code>name</code> or the <code>prefix</code>
        ///             of the test cases. Only test cases where the keyword is a substring of the
        ///                 <code>name</code> or the <code>prefix</code> will be returned.</p>
        public let keyword: Swift.String?
        /// <p>The status used to filter test cases. A <code>TestCaseFilter</code> can have one
        ///             status. Valid values are:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>SUCCEEDED</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>FAILED</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>ERROR</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>SKIPPED</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>UNKNOWN</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let status: Swift.String?

        public init (
            keyword: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.keyword = keyword
            self.status = status
        }
    }

}

extension CodeBuildClientTypes.TestReportSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationInNanoSeconds
        case statusCounts
        case total
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationInNanoSeconds = durationInNanoSeconds {
            try encodeContainer.encode(durationInNanoSeconds, forKey: .durationInNanoSeconds)
        }
        if let statusCounts = statusCounts {
            var statusCountsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .statusCounts)
            for (dictKey0, reportstatuscounts0) in statusCounts {
                try statusCountsContainer.encode(reportstatuscounts0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let total = total {
            try encodeContainer.encode(total, forKey: .total)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .total)
        total = totalDecoded
        let statusCountsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .statusCounts)
        var statusCountsDecoded0: [Swift.String:Swift.Int]? = nil
        if let statusCountsContainer = statusCountsContainer {
            statusCountsDecoded0 = [Swift.String:Swift.Int]()
            for (key0, wrapperint0) in statusCountsContainer {
                if let wrapperint0 = wrapperint0 {
                    statusCountsDecoded0?[key0] = wrapperint0
                }
            }
        }
        statusCounts = statusCountsDecoded0
        let durationInNanoSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInNanoSeconds)
        durationInNanoSeconds = durationInNanoSecondsDecoded
    }
}

extension CodeBuildClientTypes.TestReportSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestReportSummary(durationInNanoSeconds: \(Swift.String(describing: durationInNanoSeconds)), statusCounts: \(Swift.String(describing: statusCounts)), total: \(Swift.String(describing: total)))"}
}

extension CodeBuildClientTypes {
    /// <p> Information about a test report. </p>
    public struct TestReportSummary: Swift.Equatable {
        /// <p> The number of nanoseconds it took to run all of the test cases in this report.
        ///         </p>
        public let durationInNanoSeconds: Swift.Int?
        /// <p> A map that contains the number of each type of status returned by the test results in
        ///             this <code>TestReportSummary</code>. </p>
        public let statusCounts: [Swift.String:Swift.Int]?
        /// <p> The number of test cases in this <code>TestReportSummary</code>. The total includes
        ///             truncated test cases. </p>
        public let total: Swift.Int?

        public init (
            durationInNanoSeconds: Swift.Int? = nil,
            statusCounts: [Swift.String:Swift.Int]? = nil,
            total: Swift.Int? = nil
        )
        {
            self.durationInNanoSeconds = durationInNanoSeconds
            self.statusCounts = statusCounts
            self.total = total
        }
    }

}

public struct UpdateProjectInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateProjectInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateProjectOutputError>
}

extension UpdateProjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateProjectInput(artifacts: \(Swift.String(describing: artifacts)), badgeEnabled: \(Swift.String(describing: badgeEnabled)), buildBatchConfig: \(Swift.String(describing: buildBatchConfig)), cache: \(Swift.String(describing: cache)), concurrentBuildLimit: \(Swift.String(describing: concurrentBuildLimit)), description: \(Swift.String(describing: description)), encryptionKey: \(Swift.String(describing: encryptionKey)), environment: \(Swift.String(describing: environment)), fileSystemLocations: \(Swift.String(describing: fileSystemLocations)), logsConfig: \(Swift.String(describing: logsConfig)), name: \(Swift.String(describing: name)), queuedTimeoutInMinutes: \(Swift.String(describing: queuedTimeoutInMinutes)), secondaryArtifacts: \(Swift.String(describing: secondaryArtifacts)), secondarySourceVersions: \(Swift.String(describing: secondarySourceVersions)), secondarySources: \(Swift.String(describing: secondarySources)), serviceRole: \(Swift.String(describing: serviceRole)), source: \(Swift.String(describing: source)), sourceVersion: \(Swift.String(describing: sourceVersion)), tags: \(Swift.String(describing: tags)), timeoutInMinutes: \(Swift.String(describing: timeoutInMinutes)), vpcConfig: \(Swift.String(describing: vpcConfig)))"}
}

extension UpdateProjectInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifacts
        case badgeEnabled
        case buildBatchConfig
        case cache
        case concurrentBuildLimit
        case description
        case encryptionKey
        case environment
        case fileSystemLocations
        case logsConfig
        case name
        case queuedTimeoutInMinutes
        case secondaryArtifacts
        case secondarySourceVersions
        case secondarySources
        case serviceRole
        case source
        case sourceVersion
        case tags
        case timeoutInMinutes
        case vpcConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifacts = artifacts {
            try encodeContainer.encode(artifacts, forKey: .artifacts)
        }
        if let badgeEnabled = badgeEnabled {
            try encodeContainer.encode(badgeEnabled, forKey: .badgeEnabled)
        }
        if let buildBatchConfig = buildBatchConfig {
            try encodeContainer.encode(buildBatchConfig, forKey: .buildBatchConfig)
        }
        if let cache = cache {
            try encodeContainer.encode(cache, forKey: .cache)
        }
        if let concurrentBuildLimit = concurrentBuildLimit {
            try encodeContainer.encode(concurrentBuildLimit, forKey: .concurrentBuildLimit)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encryptionKey = encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let environment = environment {
            try encodeContainer.encode(environment, forKey: .environment)
        }
        if let fileSystemLocations = fileSystemLocations {
            var fileSystemLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fileSystemLocations)
            for projectfilesystemlocations0 in fileSystemLocations {
                try fileSystemLocationsContainer.encode(projectfilesystemlocations0)
            }
        }
        if let logsConfig = logsConfig {
            try encodeContainer.encode(logsConfig, forKey: .logsConfig)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let queuedTimeoutInMinutes = queuedTimeoutInMinutes {
            try encodeContainer.encode(queuedTimeoutInMinutes, forKey: .queuedTimeoutInMinutes)
        }
        if let secondaryArtifacts = secondaryArtifacts {
            var secondaryArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondaryArtifacts)
            for projectartifactslist0 in secondaryArtifacts {
                try secondaryArtifactsContainer.encode(projectartifactslist0)
            }
        }
        if let secondarySourceVersions = secondarySourceVersions {
            var secondarySourceVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySourceVersions)
            for projectsecondarysourceversions0 in secondarySourceVersions {
                try secondarySourceVersionsContainer.encode(projectsecondarysourceversions0)
            }
        }
        if let secondarySources = secondarySources {
            var secondarySourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySources)
            for projectsources0 in secondarySources {
                try secondarySourcesContainer.encode(projectsources0)
            }
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let sourceVersion = sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let timeoutInMinutes = timeoutInMinutes {
            try encodeContainer.encode(timeoutInMinutes, forKey: .timeoutInMinutes)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}

public struct UpdateProjectInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateProjectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateProjectOutputError>
}

public struct UpdateProjectInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateProjectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateProjectInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateProjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateProjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateProjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateProjectOutputError>
}

public struct UpdateProjectInput: Swift.Equatable {
    /// <p>Information to be changed about the build output artifacts for the build
    ///         project.</p>
    public let artifacts: CodeBuildClientTypes.ProjectArtifacts?
    /// <p>Set this to true to generate a publicly accessible URL for your project's build
    ///       badge.</p>
    public let badgeEnabled: Swift.Bool?
    /// <p>Contains configuration information about a batch build project.</p>
    public let buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig?
    /// <p>Stores recently used information so that it can be quickly accessed at a later
    ///       time.</p>
    public let cache: CodeBuildClientTypes.ProjectCache?
    /// <p>The maximum number of concurrent builds that are allowed for this project.</p>
    ///          <p>New builds are only started if the current number of builds is less than or equal to this limit.
    ///   If the current build count meets this limit, new builds are throttled and are not run.</p>
    ///          <p>To remove this limit, set this value to -1.</p>
    public let concurrentBuildLimit: Swift.Int?
    /// <p>A new or replacement description of the build project.</p>
    public let description: Swift.String?
    /// <p>The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output
    ///     artifacts.</p>
    ///          <note>
    ///             <p> You can use a cross-account KMS key to encrypt the build output artifacts if your
    ///         service role has permission to that key. </p>
    ///          </note>
    ///          <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using
    ///     the format <code>alias/<alias-name></code>).
    ///     </p>
    public let encryptionKey: Swift.String?
    /// <p>Information to be changed about the build environment for the build project.</p>
    public let environment: CodeBuildClientTypes.ProjectEnvironment?
    /// <p>
    ///       An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A <code>ProjectFileSystemLocation</code> object
    ///       specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>,
    ///       <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System.
    ///   </p>
    public let fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]?
    /// <p> Information about logs for the build project. A project can create logs in Amazon CloudWatch Logs,
    ///     logs in an S3 bucket, or both. </p>
    public let logsConfig: CodeBuildClientTypes.LogsConfig?
    /// <p>The name of the build project.</p>
    ///          <note>
    ///             <p>You cannot change a build project's name.</p>
    ///          </note>
    public let name: Swift.String?
    /// <p> The number of minutes a build is allowed to be queued before it times out. </p>
    public let queuedTimeoutInMinutes: Swift.Int?
    /// <p> An array of <code>ProjectSource</code> objects. </p>
    public let secondaryArtifacts: [CodeBuildClientTypes.ProjectArtifacts]?
    /// <p> An array of <code>ProjectSourceVersion</code> objects. If
    ///       <code>secondarySourceVersions</code> is specified at the build level, then they take
    ///     over these <code>secondarySourceVersions</code> (at the project level). </p>
    public let secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]?
    /// <p> An array of <code>ProjectSource</code> objects. </p>
    public let secondarySources: [CodeBuildClientTypes.ProjectSource]?
    /// <p>The replacement ARN of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent
    ///     AWS services on behalf of the AWS account.</p>
    public let serviceRole: Swift.String?
    /// <p>Information to be changed about the build input source code for the build
    ///     project.</p>
    public let source: CodeBuildClientTypes.ProjectSource?
    /// <p> A version of the build input to be built for this project. If not specified, the
    ///     latest version is used. If specified, it must be one of: </p>
    ///          <ul>
    ///             <li>
    ///                <p>For AWS CodeCommit: the commit ID, branch, or Git tag to use.</p>
    ///             </li>
    ///             <li>
    ///                <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that
    ///             corresponds to the version of the source code you want to build. If a pull
    ///             request ID is specified, it must use the format <code>pr/pull-request-ID</code>
    ///             (for example <code>pr/25</code>). If a branch name is specified, the branch's
    ///             HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is
    ///             used.</p>
    ///             </li>
    ///             <li>
    ///                <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the
    ///             version of the source code you want to build. If a branch name is specified, the
    ///             branch's HEAD commit ID is used. If not specified, the default branch's HEAD
    ///             commit ID is used.</p>
    ///             </li>
    ///             <li>
    ///                <p>For Amazon S3: the version ID of the object that represents the build input ZIP
    ///             file to use.</p>
    ///             </li>
    ///          </ul>
    ///          <p> If <code>sourceVersion</code> is specified at the build level, then that version
    ///     takes precedence over this <code>sourceVersion</code> (at the project level). </p>
    ///          <p> For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html">Source Version Sample
    ///         with CodeBuild</a> in the <i>AWS CodeBuild User Guide</i>.
    ///     </p>
    public let sourceVersion: Swift.String?
    /// <p>An updated list of tag key and value pairs associated with this build project.</p>
    ///          <p>These tags are available for use by AWS services that support AWS CodeBuild build project
    ///       tags.</p>
    public let tags: [CodeBuildClientTypes.Tag]?
    /// <p>The replacement value in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait before
    ///       timing out any related build that did not get marked as completed.</p>
    public let timeoutInMinutes: Swift.Int?
    /// <p>VpcConfig enables AWS CodeBuild to access resources in an Amazon VPC.</p>
    public let vpcConfig: CodeBuildClientTypes.VpcConfig?

    public init (
        artifacts: CodeBuildClientTypes.ProjectArtifacts? = nil,
        badgeEnabled: Swift.Bool? = nil,
        buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig? = nil,
        cache: CodeBuildClientTypes.ProjectCache? = nil,
        concurrentBuildLimit: Swift.Int? = nil,
        description: Swift.String? = nil,
        encryptionKey: Swift.String? = nil,
        environment: CodeBuildClientTypes.ProjectEnvironment? = nil,
        fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]? = nil,
        logsConfig: CodeBuildClientTypes.LogsConfig? = nil,
        name: Swift.String? = nil,
        queuedTimeoutInMinutes: Swift.Int? = nil,
        secondaryArtifacts: [CodeBuildClientTypes.ProjectArtifacts]? = nil,
        secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
        secondarySources: [CodeBuildClientTypes.ProjectSource]? = nil,
        serviceRole: Swift.String? = nil,
        source: CodeBuildClientTypes.ProjectSource? = nil,
        sourceVersion: Swift.String? = nil,
        tags: [CodeBuildClientTypes.Tag]? = nil,
        timeoutInMinutes: Swift.Int? = nil,
        vpcConfig: CodeBuildClientTypes.VpcConfig? = nil
    )
    {
        self.artifacts = artifacts
        self.badgeEnabled = badgeEnabled
        self.buildBatchConfig = buildBatchConfig
        self.cache = cache
        self.concurrentBuildLimit = concurrentBuildLimit
        self.description = description
        self.encryptionKey = encryptionKey
        self.environment = environment
        self.fileSystemLocations = fileSystemLocations
        self.logsConfig = logsConfig
        self.name = name
        self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
        self.secondaryArtifacts = secondaryArtifacts
        self.secondarySourceVersions = secondarySourceVersions
        self.secondarySources = secondarySources
        self.serviceRole = serviceRole
        self.source = source
        self.sourceVersion = sourceVersion
        self.tags = tags
        self.timeoutInMinutes = timeoutInMinutes
        self.vpcConfig = vpcConfig
    }
}

struct UpdateProjectInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let source: CodeBuildClientTypes.ProjectSource?
    public let secondarySources: [CodeBuildClientTypes.ProjectSource]?
    public let sourceVersion: Swift.String?
    public let secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]?
    public let artifacts: CodeBuildClientTypes.ProjectArtifacts?
    public let secondaryArtifacts: [CodeBuildClientTypes.ProjectArtifacts]?
    public let cache: CodeBuildClientTypes.ProjectCache?
    public let environment: CodeBuildClientTypes.ProjectEnvironment?
    public let serviceRole: Swift.String?
    public let timeoutInMinutes: Swift.Int?
    public let queuedTimeoutInMinutes: Swift.Int?
    public let encryptionKey: Swift.String?
    public let tags: [CodeBuildClientTypes.Tag]?
    public let vpcConfig: CodeBuildClientTypes.VpcConfig?
    public let badgeEnabled: Swift.Bool?
    public let logsConfig: CodeBuildClientTypes.LogsConfig?
    public let fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]?
    public let buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig?
    public let concurrentBuildLimit: Swift.Int?
}

extension UpdateProjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifacts
        case badgeEnabled
        case buildBatchConfig
        case cache
        case concurrentBuildLimit
        case description
        case encryptionKey
        case environment
        case fileSystemLocations
        case logsConfig
        case name
        case queuedTimeoutInMinutes
        case secondaryArtifacts
        case secondarySourceVersions
        case secondarySources
        case serviceRole
        case source
        case sourceVersion
        case tags
        case timeoutInMinutes
        case vpcConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectSource.self, forKey: .source)
        source = sourceDecoded
        let secondarySourcesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectSource?].self, forKey: .secondarySources)
        var secondarySourcesDecoded0:[CodeBuildClientTypes.ProjectSource]? = nil
        if let secondarySourcesContainer = secondarySourcesContainer {
            secondarySourcesDecoded0 = [CodeBuildClientTypes.ProjectSource]()
            for structure0 in secondarySourcesContainer {
                if let structure0 = structure0 {
                    secondarySourcesDecoded0?.append(structure0)
                }
            }
        }
        secondarySources = secondarySourcesDecoded0
        let sourceVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
        let secondarySourceVersionsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectSourceVersion?].self, forKey: .secondarySourceVersions)
        var secondarySourceVersionsDecoded0:[CodeBuildClientTypes.ProjectSourceVersion]? = nil
        if let secondarySourceVersionsContainer = secondarySourceVersionsContainer {
            secondarySourceVersionsDecoded0 = [CodeBuildClientTypes.ProjectSourceVersion]()
            for structure0 in secondarySourceVersionsContainer {
                if let structure0 = structure0 {
                    secondarySourceVersionsDecoded0?.append(structure0)
                }
            }
        }
        secondarySourceVersions = secondarySourceVersionsDecoded0
        let artifactsDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectArtifacts.self, forKey: .artifacts)
        artifacts = artifactsDecoded
        let secondaryArtifactsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectArtifacts?].self, forKey: .secondaryArtifacts)
        var secondaryArtifactsDecoded0:[CodeBuildClientTypes.ProjectArtifacts]? = nil
        if let secondaryArtifactsContainer = secondaryArtifactsContainer {
            secondaryArtifactsDecoded0 = [CodeBuildClientTypes.ProjectArtifacts]()
            for structure0 in secondaryArtifactsContainer {
                if let structure0 = structure0 {
                    secondaryArtifactsDecoded0?.append(structure0)
                }
            }
        }
        secondaryArtifacts = secondaryArtifactsDecoded0
        let cacheDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectCache.self, forKey: .cache)
        cache = cacheDecoded
        let environmentDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectEnvironment.self, forKey: .environment)
        environment = environmentDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let timeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInMinutes)
        timeoutInMinutes = timeoutInMinutesDecoded
        let queuedTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .queuedTimeoutInMinutes)
        queuedTimeoutInMinutes = queuedTimeoutInMinutesDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodeBuildClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodeBuildClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let vpcConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let badgeEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .badgeEnabled)
        badgeEnabled = badgeEnabledDecoded
        let logsConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.LogsConfig.self, forKey: .logsConfig)
        logsConfig = logsConfigDecoded
        let fileSystemLocationsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ProjectFileSystemLocation?].self, forKey: .fileSystemLocations)
        var fileSystemLocationsDecoded0:[CodeBuildClientTypes.ProjectFileSystemLocation]? = nil
        if let fileSystemLocationsContainer = fileSystemLocationsContainer {
            fileSystemLocationsDecoded0 = [CodeBuildClientTypes.ProjectFileSystemLocation]()
            for structure0 in fileSystemLocationsContainer {
                if let structure0 = structure0 {
                    fileSystemLocationsDecoded0?.append(structure0)
                }
            }
        }
        fileSystemLocations = fileSystemLocationsDecoded0
        let buildBatchConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ProjectBuildBatchConfig.self, forKey: .buildBatchConfig)
        buildBatchConfig = buildBatchConfigDecoded
        let concurrentBuildLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .concurrentBuildLimit)
        concurrentBuildLimit = concurrentBuildLimitDecoded
    }
}

extension UpdateProjectOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateProjectOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateProjectOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateProjectOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateProjectOutputResponse(project: \(Swift.String(describing: project)))"}
}

extension UpdateProjectOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateProjectOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.project = output.project
        } else {
            self.project = nil
        }
    }
}

public struct UpdateProjectOutputResponse: Swift.Equatable {
    /// <p>Information about the build project that was changed.</p>
    public let project: CodeBuildClientTypes.Project?

    public init (
        project: CodeBuildClientTypes.Project? = nil
    )
    {
        self.project = project
    }
}

struct UpdateProjectOutputResponseBody: Swift.Equatable {
    public let project: CodeBuildClientTypes.Project?
}

extension UpdateProjectOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case project
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.Project.self, forKey: .project)
        project = projectDecoded
    }
}

public struct UpdateReportGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateReportGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateReportGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateReportGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateReportGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateReportGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateReportGroupOutputError>
}

extension UpdateReportGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateReportGroupInput(arn: \(Swift.String(describing: arn)), exportConfig: \(Swift.String(describing: exportConfig)), tags: \(Swift.String(describing: tags)))"}
}

extension UpdateReportGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case exportConfig
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let exportConfig = exportConfig {
            try encodeContainer.encode(exportConfig, forKey: .exportConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct UpdateReportGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateReportGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateReportGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateReportGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateReportGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateReportGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateReportGroupOutputError>
}

public struct UpdateReportGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateReportGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateReportGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateReportGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateReportGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateReportGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateReportGroupOutputError>
}

public struct UpdateReportGroupInput: Swift.Equatable {
    /// <p>
    ///       The ARN of the report group to update.
    ///     </p>
    public let arn: Swift.String?
    /// <p>
    ///       Used to specify an updated export type. Valid values are:
    ///     </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>S3</code>: The report results are exported to an S3 bucket.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NO_EXPORT</code>: The report results are not exported.
    ///         </p>
    ///             </li>
    ///          </ul>
    public let exportConfig: CodeBuildClientTypes.ReportExportConfig?
    /// <p>
    ///       An updated list of tag key and value pairs associated with this report group.
    ///     </p>
    ///          <p>These tags are available for use by AWS services that support AWS CodeBuild report group
    ///       tags.</p>
    public let tags: [CodeBuildClientTypes.Tag]?

    public init (
        arn: Swift.String? = nil,
        exportConfig: CodeBuildClientTypes.ReportExportConfig? = nil,
        tags: [CodeBuildClientTypes.Tag]? = nil
    )
    {
        self.arn = arn
        self.exportConfig = exportConfig
        self.tags = tags
    }
}

struct UpdateReportGroupInputBody: Swift.Equatable {
    public let arn: Swift.String?
    public let exportConfig: CodeBuildClientTypes.ReportExportConfig?
    public let tags: [CodeBuildClientTypes.Tag]?
}

extension UpdateReportGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case exportConfig
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let exportConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportExportConfig.self, forKey: .exportConfig)
        exportConfig = exportConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodeBuildClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodeBuildClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension UpdateReportGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateReportGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateReportGroupOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateReportGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateReportGroupOutputResponse(reportGroup: \(Swift.String(describing: reportGroup)))"}
}

extension UpdateReportGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateReportGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.reportGroup = output.reportGroup
        } else {
            self.reportGroup = nil
        }
    }
}

public struct UpdateReportGroupOutputResponse: Swift.Equatable {
    /// <p>
    ///       Information about the updated report group.
    ///     </p>
    public let reportGroup: CodeBuildClientTypes.ReportGroup?

    public init (
        reportGroup: CodeBuildClientTypes.ReportGroup? = nil
    )
    {
        self.reportGroup = reportGroup
    }
}

struct UpdateReportGroupOutputResponseBody: Swift.Equatable {
    public let reportGroup: CodeBuildClientTypes.ReportGroup?
}

extension UpdateReportGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reportGroup
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportGroupDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportGroup.self, forKey: .reportGroup)
        reportGroup = reportGroupDecoded
    }
}

public struct UpdateWebhookInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateWebhookInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateWebhookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateWebhookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateWebhookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateWebhookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateWebhookOutputError>
}

extension UpdateWebhookInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateWebhookInput(branchFilter: \(Swift.String(describing: branchFilter)), buildType: \(Swift.String(describing: buildType)), filterGroups: \(Swift.String(describing: filterGroups)), projectName: \(Swift.String(describing: projectName)), rotateSecret: \(Swift.String(describing: rotateSecret)))"}
}

extension UpdateWebhookInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branchFilter
        case buildType
        case filterGroups
        case projectName
        case rotateSecret
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branchFilter = branchFilter {
            try encodeContainer.encode(branchFilter, forKey: .branchFilter)
        }
        if let buildType = buildType {
            try encodeContainer.encode(buildType.rawValue, forKey: .buildType)
        }
        if let filterGroups = filterGroups {
            var filterGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filterGroups)
            for filtergroups0 in filterGroups {
                var filtergroups0Container = filterGroupsContainer.nestedUnkeyedContainer()
                for filtergroup1 in filtergroups0 {
                    try filtergroups0Container.encode(filtergroup1)
                }
            }
        }
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if rotateSecret != false {
            try encodeContainer.encode(rotateSecret, forKey: .rotateSecret)
        }
    }
}

public struct UpdateWebhookInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateWebhookInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateWebhookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateWebhookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateWebhookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateWebhookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateWebhookOutputError>
}

public struct UpdateWebhookInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateWebhookInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateWebhookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateWebhookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateWebhookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateWebhookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateWebhookOutputError>
}

public struct UpdateWebhookInput: Swift.Equatable {
    /// <p>A regular expression used to determine which repository branches are built when a
    ///       webhook is triggered. If the name of a branch matches the regular expression, then it is
    ///       built. If <code>branchFilter</code> is empty, then all branches are built.</p>
    ///          <note>
    ///             <p> It is recommended that you use <code>filterGroups</code> instead of
    ///         <code>branchFilter</code>. </p>
    ///          </note>
    public let branchFilter: Swift.String?
    /// <p>Specifies the type of build this webhook will trigger.</p>
    public let buildType: CodeBuildClientTypes.WebhookBuildType?
    /// <p> An array of arrays of <code>WebhookFilter</code> objects used to determine if a
    ///       webhook event can trigger a build. A filter group must contain at least one
    ///       <code>EVENT</code>
    ///             <code>WebhookFilter</code>. </p>
    public let filterGroups: [[CodeBuildClientTypes.WebhookFilter]]?
    /// <p>The name of the AWS CodeBuild project.</p>
    public let projectName: Swift.String?
    /// <p> A boolean value that specifies whether the associated GitHub repository's secret
    ///       token should be updated. If you use Bitbucket for your repository,
    ///       <code>rotateSecret</code> is ignored. </p>
    public let rotateSecret: Swift.Bool

    public init (
        branchFilter: Swift.String? = nil,
        buildType: CodeBuildClientTypes.WebhookBuildType? = nil,
        filterGroups: [[CodeBuildClientTypes.WebhookFilter]]? = nil,
        projectName: Swift.String? = nil,
        rotateSecret: Swift.Bool = false
    )
    {
        self.branchFilter = branchFilter
        self.buildType = buildType
        self.filterGroups = filterGroups
        self.projectName = projectName
        self.rotateSecret = rotateSecret
    }
}

struct UpdateWebhookInputBody: Swift.Equatable {
    public let projectName: Swift.String?
    public let branchFilter: Swift.String?
    public let rotateSecret: Swift.Bool
    public let filterGroups: [[CodeBuildClientTypes.WebhookFilter]]?
    public let buildType: CodeBuildClientTypes.WebhookBuildType?
}

extension UpdateWebhookInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branchFilter
        case buildType
        case filterGroups
        case projectName
        case rotateSecret
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let branchFilterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branchFilter)
        branchFilter = branchFilterDecoded
        let rotateSecretDecoded = try containerValues.decode(Swift.Bool.self, forKey: .rotateSecret)
        rotateSecret = rotateSecretDecoded
        let filterGroupsContainer = try containerValues.decodeIfPresent([[CodeBuildClientTypes.WebhookFilter?]?].self, forKey: .filterGroups)
        var filterGroupsDecoded0:[[CodeBuildClientTypes.WebhookFilter]]? = nil
        if let filterGroupsContainer = filterGroupsContainer {
            filterGroupsDecoded0 = [[CodeBuildClientTypes.WebhookFilter]]()
            for list0 in filterGroupsContainer {
                var list0Decoded0: [CodeBuildClientTypes.WebhookFilter]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [CodeBuildClientTypes.WebhookFilter]()
                    for structure1 in list0 {
                        if let structure1 = structure1 {
                            list0Decoded0?.append(structure1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    filterGroupsDecoded0?.append(list0Decoded0)
                }
            }
        }
        filterGroups = filterGroupsDecoded0
        let buildTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.WebhookBuildType.self, forKey: .buildType)
        buildType = buildTypeDecoded
    }
}

extension UpdateWebhookOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateWebhookOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OAuthProviderException" : self = .oAuthProviderException(try OAuthProviderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateWebhookOutputError: Swift.Error, Swift.Equatable {
    case invalidInputException(InvalidInputException)
    case oAuthProviderException(OAuthProviderException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateWebhookOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateWebhookOutputResponse(webhook: \(Swift.String(describing: webhook)))"}
}

extension UpdateWebhookOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateWebhookOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.webhook = output.webhook
        } else {
            self.webhook = nil
        }
    }
}

public struct UpdateWebhookOutputResponse: Swift.Equatable {
    /// <p> Information about a repository's webhook that is associated with a project in AWS CodeBuild.
    ///     </p>
    public let webhook: CodeBuildClientTypes.Webhook?

    public init (
        webhook: CodeBuildClientTypes.Webhook? = nil
    )
    {
        self.webhook = webhook
    }
}

struct UpdateWebhookOutputResponseBody: Swift.Equatable {
    public let webhook: CodeBuildClientTypes.Webhook?
}

extension UpdateWebhookOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webhook
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webhookDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.Webhook.self, forKey: .webhook)
        webhook = webhookDecoded
    }
}

extension CodeBuildClientTypes.VpcConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupIds
        case subnets
        case vpcId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for securitygroupids0 in securityGroupIds {
                try securityGroupIdsContainer.encode(securitygroupids0)
            }
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for subnets0 in subnets {
                try subnetsContainer.encode(subnets0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}

extension CodeBuildClientTypes.VpcConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VpcConfig(securityGroupIds: \(Swift.String(describing: securityGroupIds)), subnets: \(Swift.String(describing: subnets)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about the VPC configuration that AWS CodeBuild accesses.</p>
    public struct VpcConfig: Swift.Equatable {
        /// <p>A list of one or more security groups IDs in your Amazon VPC.</p>
        public let securityGroupIds: [Swift.String]?
        /// <p>A list of one or more subnet IDs in your Amazon VPC.</p>
        public let subnets: [Swift.String]?
        /// <p>The ID of the Amazon VPC.</p>
        public let vpcId: Swift.String?

        public init (
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
            self.vpcId = vpcId
        }
    }

}

extension CodeBuildClientTypes.Webhook: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branchFilter
        case buildType
        case filterGroups
        case lastModifiedSecret
        case payloadUrl
        case secret
        case url
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branchFilter = branchFilter {
            try encodeContainer.encode(branchFilter, forKey: .branchFilter)
        }
        if let buildType = buildType {
            try encodeContainer.encode(buildType.rawValue, forKey: .buildType)
        }
        if let filterGroups = filterGroups {
            var filterGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filterGroups)
            for filtergroups0 in filterGroups {
                var filtergroups0Container = filterGroupsContainer.nestedUnkeyedContainer()
                for filtergroup1 in filtergroups0 {
                    try filtergroups0Container.encode(filtergroup1)
                }
            }
        }
        if let lastModifiedSecret = lastModifiedSecret {
            try encodeContainer.encode(lastModifiedSecret.timeIntervalSince1970, forKey: .lastModifiedSecret)
        }
        if let payloadUrl = payloadUrl {
            try encodeContainer.encode(payloadUrl, forKey: .payloadUrl)
        }
        if let secret = secret {
            try encodeContainer.encode(secret, forKey: .secret)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let payloadUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .payloadUrl)
        payloadUrl = payloadUrlDecoded
        let secretDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secret)
        secret = secretDecoded
        let branchFilterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branchFilter)
        branchFilter = branchFilterDecoded
        let filterGroupsContainer = try containerValues.decodeIfPresent([[CodeBuildClientTypes.WebhookFilter?]?].self, forKey: .filterGroups)
        var filterGroupsDecoded0:[[CodeBuildClientTypes.WebhookFilter]]? = nil
        if let filterGroupsContainer = filterGroupsContainer {
            filterGroupsDecoded0 = [[CodeBuildClientTypes.WebhookFilter]]()
            for list0 in filterGroupsContainer {
                var list0Decoded0: [CodeBuildClientTypes.WebhookFilter]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [CodeBuildClientTypes.WebhookFilter]()
                    for structure1 in list0 {
                        if let structure1 = structure1 {
                            list0Decoded0?.append(structure1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    filterGroupsDecoded0?.append(list0Decoded0)
                }
            }
        }
        filterGroups = filterGroupsDecoded0
        let buildTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.WebhookBuildType.self, forKey: .buildType)
        buildType = buildTypeDecoded
        let lastModifiedSecretDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedSecret)
        lastModifiedSecret = lastModifiedSecretDecoded
    }
}

extension CodeBuildClientTypes.Webhook: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Webhook(branchFilter: \(Swift.String(describing: branchFilter)), buildType: \(Swift.String(describing: buildType)), filterGroups: \(Swift.String(describing: filterGroups)), lastModifiedSecret: \(Swift.String(describing: lastModifiedSecret)), payloadUrl: \(Swift.String(describing: payloadUrl)), secret: \(Swift.String(describing: secret)), url: \(Swift.String(describing: url)))"}
}

extension CodeBuildClientTypes {
    /// <p>Information about a webhook that connects repository events to a build project in
    ///       AWS CodeBuild.</p>
    public struct Webhook: Swift.Equatable {
        /// <p>A regular expression used to determine which repository branches are built when a
        ///       webhook is triggered. If the name of a branch matches the regular expression, then it is
        ///       built. If <code>branchFilter</code> is empty, then all branches are built.</p>
        ///          <note>
        ///             <p>It is recommended that you use <code>filterGroups</code> instead of
        ///         <code>branchFilter</code>. </p>
        ///          </note>
        public let branchFilter: Swift.String?
        /// <p>Specifies the type of build this webhook will trigger.</p>
        public let buildType: CodeBuildClientTypes.WebhookBuildType?
        /// <p>An array of arrays of <code>WebhookFilter</code> objects used to determine which
        ///       webhooks are triggered. At least one <code>WebhookFilter</code> in the array must
        ///       specify <code>EVENT</code> as its <code>type</code>. </p>
        ///          <p>For a build to be triggered, at least one filter group in the
        ///       <code>filterGroups</code> array must pass. For a filter group to pass, each of its
        ///       filters must pass. </p>
        public let filterGroups: [[CodeBuildClientTypes.WebhookFilter]]?
        /// <p>A timestamp that indicates the last time a repository's secret token was modified.
        ///     </p>
        public let lastModifiedSecret: ClientRuntime.Date?
        /// <p>The AWS CodeBuild endpoint where webhook events are sent.</p>
        public let payloadUrl: Swift.String?
        /// <p>The secret token of the associated repository. </p>
        ///          <note>
        ///             <p>A Bitbucket webhook does not support <code>secret</code>. </p>
        ///          </note>
        public let secret: Swift.String?
        /// <p>The URL to the webhook.</p>
        public let url: Swift.String?

        public init (
            branchFilter: Swift.String? = nil,
            buildType: CodeBuildClientTypes.WebhookBuildType? = nil,
            filterGroups: [[CodeBuildClientTypes.WebhookFilter]]? = nil,
            lastModifiedSecret: ClientRuntime.Date? = nil,
            payloadUrl: Swift.String? = nil,
            secret: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.branchFilter = branchFilter
            self.buildType = buildType
            self.filterGroups = filterGroups
            self.lastModifiedSecret = lastModifiedSecret
            self.payloadUrl = payloadUrl
            self.secret = secret
            self.url = url
        }
    }

}

extension CodeBuildClientTypes {
    public enum WebhookBuildType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case build
        case buildBatch
        case sdkUnknown(Swift.String)

        public static var allCases: [WebhookBuildType] {
            return [
                .build,
                .buildBatch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .build: return "BUILD"
            case .buildBatch: return "BUILD_BATCH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WebhookBuildType(rawValue: rawValue) ?? WebhookBuildType.sdkUnknown(rawValue)
        }
    }
}

extension CodeBuildClientTypes.WebhookFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludeMatchedPattern
        case pattern
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let excludeMatchedPattern = excludeMatchedPattern {
            try encodeContainer.encode(excludeMatchedPattern, forKey: .excludeMatchedPattern)
        }
        if let pattern = pattern {
            try encodeContainer.encode(pattern, forKey: .pattern)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.WebhookFilterType.self, forKey: .type)
        type = typeDecoded
        let patternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pattern)
        pattern = patternDecoded
        let excludeMatchedPatternDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .excludeMatchedPattern)
        excludeMatchedPattern = excludeMatchedPatternDecoded
    }
}

extension CodeBuildClientTypes.WebhookFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WebhookFilter(excludeMatchedPattern: \(Swift.String(describing: excludeMatchedPattern)), pattern: \(Swift.String(describing: pattern)), type: \(Swift.String(describing: type)))"}
}

extension CodeBuildClientTypes {
    /// <p> A filter used to determine which webhooks trigger a build. </p>
    public struct WebhookFilter: Swift.Equatable {
        /// <p> Used to indicate that the <code>pattern</code> determines which webhook events do not
        ///             trigger a build. If true, then a webhook event that does not match the
        ///                 <code>pattern</code> triggers a build. If false, then a webhook event that matches
        ///             the <code>pattern</code> triggers a build. </p>
        public let excludeMatchedPattern: Swift.Bool?
        /// <p> For a <code>WebHookFilter</code> that uses <code>EVENT</code> type, a comma-separated
        ///             string that specifies one or more events. For example, the webhook filter <code>PUSH,
        ///                 PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED</code> allows all push, pull request
        ///             created, and pull request updated events to trigger a build. </p>
        ///         <p> For a <code>WebHookFilter</code> that uses any of the other filter types, a regular
        ///             expression pattern. For example, a <code>WebHookFilter</code> that uses
        ///                 <code>HEAD_REF</code> for its <code>type</code> and the pattern
        ///                 <code>^refs/heads/</code> triggers a build when the head reference is a branch with
        ///             a reference name <code>refs/heads/branch-name</code>. </p>
        public let pattern: Swift.String?
        /// <p> The type of webhook filter. There are six webhook filter types: <code>EVENT</code>,
        ///                 <code>ACTOR_ACCOUNT_ID</code>, <code>HEAD_REF</code>, <code>BASE_REF</code>,
        ///                 <code>FILE_PATH</code>, and <code>COMMIT_MESSAGE</code>. </p>
        ///         <dl>
        ///             <dt>
        ///                EVENT
        ///             </dt>
        ///             <dd>
        ///                     <p> A webhook event triggers a build when the provided <code>pattern</code>
        ///                         matches one of five event types: <code>PUSH</code>,
        ///                             <code>PULL_REQUEST_CREATED</code>, <code>PULL_REQUEST_UPDATED</code>,
        ///                             <code>PULL_REQUEST_REOPENED</code>, and
        ///                         <code>PULL_REQUEST_MERGED</code>. The <code>EVENT</code> patterns are
        ///                         specified as a comma-separated string. For example, <code>PUSH,
        ///                             PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED</code> filters all push, pull
        ///                         request created, and pull request updated events. </p>
        ///                     <note>
        ///                         <p> The <code>PULL_REQUEST_REOPENED</code> works with GitHub and GitHub
        ///                             Enterprise only. </p>
        ///                     </note>
        ///                 </dd>
        ///             <dt>
        ///                ACTOR_ACCOUNT_ID
        ///             </dt>
        ///             <dd>
        ///                     <p> A webhook event triggers a build when a GitHub, GitHub Enterprise, or
        ///                         Bitbucket account ID matches the regular expression <code>pattern</code>.
        ///                     </p>
        ///                 </dd>
        ///             <dt>
        ///                HEAD_REF
        ///             </dt>
        ///             <dd>
        ///                     <p> A webhook event triggers a build when the head reference matches the
        ///                         regular expression <code>pattern</code>. For example,
        ///                             <code>refs/heads/branch-name</code> and <code>refs/tags/tag-name</code>. </p>
        ///                     <p> Works with GitHub and GitHub Enterprise push, GitHub and GitHub
        ///                         Enterprise pull request, Bitbucket push, and Bitbucket pull request events.
        ///                     </p>
        ///                 </dd>
        ///             <dt>
        ///                BASE_REF
        ///             </dt>
        ///             <dd>
        ///                     <p> A webhook event triggers a build when the base reference matches the
        ///                         regular expression <code>pattern</code>. For example,
        ///                             <code>refs/heads/branch-name</code>. </p>
        ///                     <note>
        ///                         <p> Works with pull request events only. </p>
        ///                     </note>
        ///                 </dd>
        ///             <dt>
        ///                FILE_PATH
        ///             </dt>
        ///             <dd>
        ///                     <p> A webhook triggers a build when the path of a changed file matches the
        ///                         regular expression <code>pattern</code>. </p>
        ///                     <note>
        ///                         <p> Works with GitHub and Bitbucket events push and pull requests events.
        ///                             Also works with GitHub Enterprise push events, but does not work with
        ///                             GitHub Enterprise pull request events. </p>
        ///                     </note>
        ///                 </dd>
        ///             <dt>COMMIT_MESSAGE</dt>
        ///             <dd>
        ///                     <p>A webhook triggers a build when the head commit message matches the
        ///                         regular expression <code>pattern</code>.</p>
        ///                     <note>
        ///                         <p> Works with GitHub and Bitbucket events push and pull requests events.
        ///                             Also works with GitHub Enterprise push events, but does not work with
        ///                             GitHub Enterprise pull request events. </p>
        ///                     </note>
        ///                 </dd>
        ///          </dl>
        public let type: CodeBuildClientTypes.WebhookFilterType?

        public init (
            excludeMatchedPattern: Swift.Bool? = nil,
            pattern: Swift.String? = nil,
            type: CodeBuildClientTypes.WebhookFilterType? = nil
        )
        {
            self.excludeMatchedPattern = excludeMatchedPattern
            self.pattern = pattern
            self.type = type
        }
    }

}

extension CodeBuildClientTypes {
    public enum WebhookFilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case actorAccountId
        case baseRef
        case commitMessage
        case event
        case filePath
        case headRef
        case sdkUnknown(Swift.String)

        public static var allCases: [WebhookFilterType] {
            return [
                .actorAccountId,
                .baseRef,
                .commitMessage,
                .event,
                .filePath,
                .headRef,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .actorAccountId: return "ACTOR_ACCOUNT_ID"
            case .baseRef: return "BASE_REF"
            case .commitMessage: return "COMMIT_MESSAGE"
            case .event: return "EVENT"
            case .filePath: return "FILE_PATH"
            case .headRef: return "HEAD_REF"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WebhookFilterType(rawValue: rawValue) ?? WebhookFilterType.sdkUnknown(rawValue)
        }
    }
}
