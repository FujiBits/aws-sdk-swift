// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension IotWirelessClient {
    /// Associates a partner account with your AWS account.
    func associateAwsAccountWithPartnerAccount(input: AssociateAwsAccountWithPartnerAccountInput) async throws -> AssociateAwsAccountWithPartnerAccountOutputResponse
    {
        typealias associateAwsAccountWithPartnerAccountContinuation = CheckedContinuation<AssociateAwsAccountWithPartnerAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateAwsAccountWithPartnerAccountContinuation) in
            associateAwsAccountWithPartnerAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associate a multicast group with a FUOTA task.
    func associateMulticastGroupWithFuotaTask(input: AssociateMulticastGroupWithFuotaTaskInput) async throws -> AssociateMulticastGroupWithFuotaTaskOutputResponse
    {
        typealias associateMulticastGroupWithFuotaTaskContinuation = CheckedContinuation<AssociateMulticastGroupWithFuotaTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateMulticastGroupWithFuotaTaskContinuation) in
            associateMulticastGroupWithFuotaTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associate a wireless device with a FUOTA task.
    func associateWirelessDeviceWithFuotaTask(input: AssociateWirelessDeviceWithFuotaTaskInput) async throws -> AssociateWirelessDeviceWithFuotaTaskOutputResponse
    {
        typealias associateWirelessDeviceWithFuotaTaskContinuation = CheckedContinuation<AssociateWirelessDeviceWithFuotaTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateWirelessDeviceWithFuotaTaskContinuation) in
            associateWirelessDeviceWithFuotaTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a wireless device with a multicast group.
    func associateWirelessDeviceWithMulticastGroup(input: AssociateWirelessDeviceWithMulticastGroupInput) async throws -> AssociateWirelessDeviceWithMulticastGroupOutputResponse
    {
        typealias associateWirelessDeviceWithMulticastGroupContinuation = CheckedContinuation<AssociateWirelessDeviceWithMulticastGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateWirelessDeviceWithMulticastGroupContinuation) in
            associateWirelessDeviceWithMulticastGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a wireless device with a thing.
    func associateWirelessDeviceWithThing(input: AssociateWirelessDeviceWithThingInput) async throws -> AssociateWirelessDeviceWithThingOutputResponse
    {
        typealias associateWirelessDeviceWithThingContinuation = CheckedContinuation<AssociateWirelessDeviceWithThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateWirelessDeviceWithThingContinuation) in
            associateWirelessDeviceWithThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a wireless gateway with a certificate.
    func associateWirelessGatewayWithCertificate(input: AssociateWirelessGatewayWithCertificateInput) async throws -> AssociateWirelessGatewayWithCertificateOutputResponse
    {
        typealias associateWirelessGatewayWithCertificateContinuation = CheckedContinuation<AssociateWirelessGatewayWithCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateWirelessGatewayWithCertificateContinuation) in
            associateWirelessGatewayWithCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a wireless gateway with a thing.
    func associateWirelessGatewayWithThing(input: AssociateWirelessGatewayWithThingInput) async throws -> AssociateWirelessGatewayWithThingOutputResponse
    {
        typealias associateWirelessGatewayWithThingContinuation = CheckedContinuation<AssociateWirelessGatewayWithThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateWirelessGatewayWithThingContinuation) in
            associateWirelessGatewayWithThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Cancels an existing multicast group session.
    func cancelMulticastGroupSession(input: CancelMulticastGroupSessionInput) async throws -> CancelMulticastGroupSessionOutputResponse
    {
        typealias cancelMulticastGroupSessionContinuation = CheckedContinuation<CancelMulticastGroupSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelMulticastGroupSessionContinuation) in
            cancelMulticastGroupSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new destination that maps a device message to an AWS IoT rule.
    func createDestination(input: CreateDestinationInput) async throws -> CreateDestinationOutputResponse
    {
        typealias createDestinationContinuation = CheckedContinuation<CreateDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDestinationContinuation) in
            createDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new device profile.
    func createDeviceProfile(input: CreateDeviceProfileInput) async throws -> CreateDeviceProfileOutputResponse
    {
        typealias createDeviceProfileContinuation = CheckedContinuation<CreateDeviceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDeviceProfileContinuation) in
            createDeviceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a FUOTA task.
    func createFuotaTask(input: CreateFuotaTaskInput) async throws -> CreateFuotaTaskOutputResponse
    {
        typealias createFuotaTaskContinuation = CheckedContinuation<CreateFuotaTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFuotaTaskContinuation) in
            createFuotaTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a multicast group.
    func createMulticastGroup(input: CreateMulticastGroupInput) async throws -> CreateMulticastGroupOutputResponse
    {
        typealias createMulticastGroupContinuation = CheckedContinuation<CreateMulticastGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMulticastGroupContinuation) in
            createMulticastGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new service profile.
    func createServiceProfile(input: CreateServiceProfileInput) async throws -> CreateServiceProfileOutputResponse
    {
        typealias createServiceProfileContinuation = CheckedContinuation<CreateServiceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createServiceProfileContinuation) in
            createServiceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provisions a wireless device.
    func createWirelessDevice(input: CreateWirelessDeviceInput) async throws -> CreateWirelessDeviceOutputResponse
    {
        typealias createWirelessDeviceContinuation = CheckedContinuation<CreateWirelessDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWirelessDeviceContinuation) in
            createWirelessDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provisions a wireless gateway.
    func createWirelessGateway(input: CreateWirelessGatewayInput) async throws -> CreateWirelessGatewayOutputResponse
    {
        typealias createWirelessGatewayContinuation = CheckedContinuation<CreateWirelessGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWirelessGatewayContinuation) in
            createWirelessGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a task for a wireless gateway.
    func createWirelessGatewayTask(input: CreateWirelessGatewayTaskInput) async throws -> CreateWirelessGatewayTaskOutputResponse
    {
        typealias createWirelessGatewayTaskContinuation = CheckedContinuation<CreateWirelessGatewayTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWirelessGatewayTaskContinuation) in
            createWirelessGatewayTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a gateway task definition.
    func createWirelessGatewayTaskDefinition(input: CreateWirelessGatewayTaskDefinitionInput) async throws -> CreateWirelessGatewayTaskDefinitionOutputResponse
    {
        typealias createWirelessGatewayTaskDefinitionContinuation = CheckedContinuation<CreateWirelessGatewayTaskDefinitionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWirelessGatewayTaskDefinitionContinuation) in
            createWirelessGatewayTaskDefinition(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a destination.
    func deleteDestination(input: DeleteDestinationInput) async throws -> DeleteDestinationOutputResponse
    {
        typealias deleteDestinationContinuation = CheckedContinuation<DeleteDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDestinationContinuation) in
            deleteDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a device profile.
    func deleteDeviceProfile(input: DeleteDeviceProfileInput) async throws -> DeleteDeviceProfileOutputResponse
    {
        typealias deleteDeviceProfileContinuation = CheckedContinuation<DeleteDeviceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDeviceProfileContinuation) in
            deleteDeviceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a FUOTA task.
    func deleteFuotaTask(input: DeleteFuotaTaskInput) async throws -> DeleteFuotaTaskOutputResponse
    {
        typealias deleteFuotaTaskContinuation = CheckedContinuation<DeleteFuotaTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFuotaTaskContinuation) in
            deleteFuotaTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a multicast group if it is not in use by a fuota task.
    func deleteMulticastGroup(input: DeleteMulticastGroupInput) async throws -> DeleteMulticastGroupOutputResponse
    {
        typealias deleteMulticastGroupContinuation = CheckedContinuation<DeleteMulticastGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMulticastGroupContinuation) in
            deleteMulticastGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a service profile.
    func deleteServiceProfile(input: DeleteServiceProfileInput) async throws -> DeleteServiceProfileOutputResponse
    {
        typealias deleteServiceProfileContinuation = CheckedContinuation<DeleteServiceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteServiceProfileContinuation) in
            deleteServiceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a wireless device.
    func deleteWirelessDevice(input: DeleteWirelessDeviceInput) async throws -> DeleteWirelessDeviceOutputResponse
    {
        typealias deleteWirelessDeviceContinuation = CheckedContinuation<DeleteWirelessDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWirelessDeviceContinuation) in
            deleteWirelessDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a wireless gateway.
    func deleteWirelessGateway(input: DeleteWirelessGatewayInput) async throws -> DeleteWirelessGatewayOutputResponse
    {
        typealias deleteWirelessGatewayContinuation = CheckedContinuation<DeleteWirelessGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWirelessGatewayContinuation) in
            deleteWirelessGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a wireless gateway task.
    func deleteWirelessGatewayTask(input: DeleteWirelessGatewayTaskInput) async throws -> DeleteWirelessGatewayTaskOutputResponse
    {
        typealias deleteWirelessGatewayTaskContinuation = CheckedContinuation<DeleteWirelessGatewayTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWirelessGatewayTaskContinuation) in
            deleteWirelessGatewayTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a wireless gateway task definition. Deleting this task definition does not affect tasks that are currently in progress.
    func deleteWirelessGatewayTaskDefinition(input: DeleteWirelessGatewayTaskDefinitionInput) async throws -> DeleteWirelessGatewayTaskDefinitionOutputResponse
    {
        typealias deleteWirelessGatewayTaskDefinitionContinuation = CheckedContinuation<DeleteWirelessGatewayTaskDefinitionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWirelessGatewayTaskDefinitionContinuation) in
            deleteWirelessGatewayTaskDefinition(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates your AWS account from a partner account. If PartnerAccountId and PartnerType are null, disassociates your AWS account from all partner accounts.
    func disassociateAwsAccountFromPartnerAccount(input: DisassociateAwsAccountFromPartnerAccountInput) async throws -> DisassociateAwsAccountFromPartnerAccountOutputResponse
    {
        typealias disassociateAwsAccountFromPartnerAccountContinuation = CheckedContinuation<DisassociateAwsAccountFromPartnerAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateAwsAccountFromPartnerAccountContinuation) in
            disassociateAwsAccountFromPartnerAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a multicast group from a fuota task.
    func disassociateMulticastGroupFromFuotaTask(input: DisassociateMulticastGroupFromFuotaTaskInput) async throws -> DisassociateMulticastGroupFromFuotaTaskOutputResponse
    {
        typealias disassociateMulticastGroupFromFuotaTaskContinuation = CheckedContinuation<DisassociateMulticastGroupFromFuotaTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateMulticastGroupFromFuotaTaskContinuation) in
            disassociateMulticastGroupFromFuotaTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a wireless device from a FUOTA task.
    func disassociateWirelessDeviceFromFuotaTask(input: DisassociateWirelessDeviceFromFuotaTaskInput) async throws -> DisassociateWirelessDeviceFromFuotaTaskOutputResponse
    {
        typealias disassociateWirelessDeviceFromFuotaTaskContinuation = CheckedContinuation<DisassociateWirelessDeviceFromFuotaTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateWirelessDeviceFromFuotaTaskContinuation) in
            disassociateWirelessDeviceFromFuotaTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a wireless device from a multicast group.
    func disassociateWirelessDeviceFromMulticastGroup(input: DisassociateWirelessDeviceFromMulticastGroupInput) async throws -> DisassociateWirelessDeviceFromMulticastGroupOutputResponse
    {
        typealias disassociateWirelessDeviceFromMulticastGroupContinuation = CheckedContinuation<DisassociateWirelessDeviceFromMulticastGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateWirelessDeviceFromMulticastGroupContinuation) in
            disassociateWirelessDeviceFromMulticastGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a wireless device from its currently associated thing.
    func disassociateWirelessDeviceFromThing(input: DisassociateWirelessDeviceFromThingInput) async throws -> DisassociateWirelessDeviceFromThingOutputResponse
    {
        typealias disassociateWirelessDeviceFromThingContinuation = CheckedContinuation<DisassociateWirelessDeviceFromThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateWirelessDeviceFromThingContinuation) in
            disassociateWirelessDeviceFromThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a wireless gateway from its currently associated certificate.
    func disassociateWirelessGatewayFromCertificate(input: DisassociateWirelessGatewayFromCertificateInput) async throws -> DisassociateWirelessGatewayFromCertificateOutputResponse
    {
        typealias disassociateWirelessGatewayFromCertificateContinuation = CheckedContinuation<DisassociateWirelessGatewayFromCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateWirelessGatewayFromCertificateContinuation) in
            disassociateWirelessGatewayFromCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a wireless gateway from its currently associated thing.
    func disassociateWirelessGatewayFromThing(input: DisassociateWirelessGatewayFromThingInput) async throws -> DisassociateWirelessGatewayFromThingOutputResponse
    {
        typealias disassociateWirelessGatewayFromThingContinuation = CheckedContinuation<DisassociateWirelessGatewayFromThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateWirelessGatewayFromThingContinuation) in
            disassociateWirelessGatewayFromThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a destination.
    func getDestination(input: GetDestinationInput) async throws -> GetDestinationOutputResponse
    {
        typealias getDestinationContinuation = CheckedContinuation<GetDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDestinationContinuation) in
            getDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a device profile.
    func getDeviceProfile(input: GetDeviceProfileInput) async throws -> GetDeviceProfileOutputResponse
    {
        typealias getDeviceProfileContinuation = CheckedContinuation<GetDeviceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeviceProfileContinuation) in
            getDeviceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a FUOTA task.
    func getFuotaTask(input: GetFuotaTaskInput) async throws -> GetFuotaTaskOutputResponse
    {
        typealias getFuotaTaskContinuation = CheckedContinuation<GetFuotaTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFuotaTaskContinuation) in
            getFuotaTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns current default log levels or log levels by resource types. Based on resource types, log levels can be for wireless device log options or wireless gateway log options.
    func getLogLevelsByResourceTypes(input: GetLogLevelsByResourceTypesInput) async throws -> GetLogLevelsByResourceTypesOutputResponse
    {
        typealias getLogLevelsByResourceTypesContinuation = CheckedContinuation<GetLogLevelsByResourceTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLogLevelsByResourceTypesContinuation) in
            getLogLevelsByResourceTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a multicast group.
    func getMulticastGroup(input: GetMulticastGroupInput) async throws -> GetMulticastGroupOutputResponse
    {
        typealias getMulticastGroupContinuation = CheckedContinuation<GetMulticastGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMulticastGroupContinuation) in
            getMulticastGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a multicast group session.
    func getMulticastGroupSession(input: GetMulticastGroupSessionInput) async throws -> GetMulticastGroupSessionOutputResponse
    {
        typealias getMulticastGroupSessionContinuation = CheckedContinuation<GetMulticastGroupSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMulticastGroupSessionContinuation) in
            getMulticastGroupSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get NetworkAnalyzer configuration.
    func getNetworkAnalyzerConfiguration(input: GetNetworkAnalyzerConfigurationInput) async throws -> GetNetworkAnalyzerConfigurationOutputResponse
    {
        typealias getNetworkAnalyzerConfigurationContinuation = CheckedContinuation<GetNetworkAnalyzerConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getNetworkAnalyzerConfigurationContinuation) in
            getNetworkAnalyzerConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a partner account. If PartnerAccountId and PartnerType are null, returns all partner accounts.
    func getPartnerAccount(input: GetPartnerAccountInput) async throws -> GetPartnerAccountOutputResponse
    {
        typealias getPartnerAccountContinuation = CheckedContinuation<GetPartnerAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPartnerAccountContinuation) in
            getPartnerAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get the event configuration for a particular resource identifier.
    func getResourceEventConfiguration(input: GetResourceEventConfigurationInput) async throws -> GetResourceEventConfigurationOutputResponse
    {
        typealias getResourceEventConfigurationContinuation = CheckedContinuation<GetResourceEventConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getResourceEventConfigurationContinuation) in
            getResourceEventConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Fetches the log-level override, if any, for a given resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.
    func getResourceLogLevel(input: GetResourceLogLevelInput) async throws -> GetResourceLogLevelOutputResponse
    {
        typealias getResourceLogLevelContinuation = CheckedContinuation<GetResourceLogLevelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getResourceLogLevelContinuation) in
            getResourceLogLevel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the account-specific endpoint for Configuration and Update Server (CUPS) protocol or LoRaWAN Network Server (LNS) connections.
    func getServiceEndpoint(input: GetServiceEndpointInput) async throws -> GetServiceEndpointOutputResponse
    {
        typealias getServiceEndpointContinuation = CheckedContinuation<GetServiceEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getServiceEndpointContinuation) in
            getServiceEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a service profile.
    func getServiceProfile(input: GetServiceProfileInput) async throws -> GetServiceProfileOutputResponse
    {
        typealias getServiceProfileContinuation = CheckedContinuation<GetServiceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getServiceProfileContinuation) in
            getServiceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a wireless device.
    func getWirelessDevice(input: GetWirelessDeviceInput) async throws -> GetWirelessDeviceOutputResponse
    {
        typealias getWirelessDeviceContinuation = CheckedContinuation<GetWirelessDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessDeviceContinuation) in
            getWirelessDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets operating information about a wireless device.
    func getWirelessDeviceStatistics(input: GetWirelessDeviceStatisticsInput) async throws -> GetWirelessDeviceStatisticsOutputResponse
    {
        typealias getWirelessDeviceStatisticsContinuation = CheckedContinuation<GetWirelessDeviceStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessDeviceStatisticsContinuation) in
            getWirelessDeviceStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a wireless gateway.
    func getWirelessGateway(input: GetWirelessGatewayInput) async throws -> GetWirelessGatewayOutputResponse
    {
        typealias getWirelessGatewayContinuation = CheckedContinuation<GetWirelessGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessGatewayContinuation) in
            getWirelessGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the ID of the certificate that is currently associated with a wireless gateway.
    func getWirelessGatewayCertificate(input: GetWirelessGatewayCertificateInput) async throws -> GetWirelessGatewayCertificateOutputResponse
    {
        typealias getWirelessGatewayCertificateContinuation = CheckedContinuation<GetWirelessGatewayCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessGatewayCertificateContinuation) in
            getWirelessGatewayCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the firmware version and other information about a wireless gateway.
    func getWirelessGatewayFirmwareInformation(input: GetWirelessGatewayFirmwareInformationInput) async throws -> GetWirelessGatewayFirmwareInformationOutputResponse
    {
        typealias getWirelessGatewayFirmwareInformationContinuation = CheckedContinuation<GetWirelessGatewayFirmwareInformationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessGatewayFirmwareInformationContinuation) in
            getWirelessGatewayFirmwareInformation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets operating information about a wireless gateway.
    func getWirelessGatewayStatistics(input: GetWirelessGatewayStatisticsInput) async throws -> GetWirelessGatewayStatisticsOutputResponse
    {
        typealias getWirelessGatewayStatisticsContinuation = CheckedContinuation<GetWirelessGatewayStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessGatewayStatisticsContinuation) in
            getWirelessGatewayStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a wireless gateway task.
    func getWirelessGatewayTask(input: GetWirelessGatewayTaskInput) async throws -> GetWirelessGatewayTaskOutputResponse
    {
        typealias getWirelessGatewayTaskContinuation = CheckedContinuation<GetWirelessGatewayTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessGatewayTaskContinuation) in
            getWirelessGatewayTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a wireless gateway task definition.
    func getWirelessGatewayTaskDefinition(input: GetWirelessGatewayTaskDefinitionInput) async throws -> GetWirelessGatewayTaskDefinitionOutputResponse
    {
        typealias getWirelessGatewayTaskDefinitionContinuation = CheckedContinuation<GetWirelessGatewayTaskDefinitionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWirelessGatewayTaskDefinitionContinuation) in
            getWirelessGatewayTaskDefinition(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the destinations registered to your AWS account.
    func listDestinations(input: ListDestinationsInput) async throws -> ListDestinationsOutputResponse
    {
        typealias listDestinationsContinuation = CheckedContinuation<ListDestinationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDestinationsContinuation) in
            listDestinations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the device profiles registered to your AWS account.
    func listDeviceProfiles(input: ListDeviceProfilesInput) async throws -> ListDeviceProfilesOutputResponse
    {
        typealias listDeviceProfilesContinuation = CheckedContinuation<ListDeviceProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDeviceProfilesContinuation) in
            listDeviceProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the FUOTA tasks registered to your AWS account.
    func listFuotaTasks(input: ListFuotaTasksInput) async throws -> ListFuotaTasksOutputResponse
    {
        typealias listFuotaTasksContinuation = CheckedContinuation<ListFuotaTasksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFuotaTasksContinuation) in
            listFuotaTasks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the multicast groups registered to your AWS account.
    func listMulticastGroups(input: ListMulticastGroupsInput) async throws -> ListMulticastGroupsOutputResponse
    {
        typealias listMulticastGroupsContinuation = CheckedContinuation<ListMulticastGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMulticastGroupsContinuation) in
            listMulticastGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List all multicast groups associated with a fuota task.
    func listMulticastGroupsByFuotaTask(input: ListMulticastGroupsByFuotaTaskInput) async throws -> ListMulticastGroupsByFuotaTaskOutputResponse
    {
        typealias listMulticastGroupsByFuotaTaskContinuation = CheckedContinuation<ListMulticastGroupsByFuotaTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMulticastGroupsByFuotaTaskContinuation) in
            listMulticastGroupsByFuotaTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the partner accounts associated with your AWS account.
    func listPartnerAccounts(input: ListPartnerAccountsInput) async throws -> ListPartnerAccountsOutputResponse
    {
        typealias listPartnerAccountsContinuation = CheckedContinuation<ListPartnerAccountsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPartnerAccountsContinuation) in
            listPartnerAccounts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the service profiles registered to your AWS account.
    func listServiceProfiles(input: ListServiceProfilesInput) async throws -> ListServiceProfilesOutputResponse
    {
        typealias listServiceProfilesContinuation = CheckedContinuation<ListServiceProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listServiceProfilesContinuation) in
            listServiceProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags (metadata) you have assigned to the resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the wireless devices registered to your AWS account.
    func listWirelessDevices(input: ListWirelessDevicesInput) async throws -> ListWirelessDevicesOutputResponse
    {
        typealias listWirelessDevicesContinuation = CheckedContinuation<ListWirelessDevicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWirelessDevicesContinuation) in
            listWirelessDevices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List the wireless gateway tasks definitions registered to your AWS account.
    func listWirelessGatewayTaskDefinitions(input: ListWirelessGatewayTaskDefinitionsInput) async throws -> ListWirelessGatewayTaskDefinitionsOutputResponse
    {
        typealias listWirelessGatewayTaskDefinitionsContinuation = CheckedContinuation<ListWirelessGatewayTaskDefinitionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWirelessGatewayTaskDefinitionsContinuation) in
            listWirelessGatewayTaskDefinitions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the wireless gateways registered to your AWS account.
    func listWirelessGateways(input: ListWirelessGatewaysInput) async throws -> ListWirelessGatewaysOutputResponse
    {
        typealias listWirelessGatewaysContinuation = CheckedContinuation<ListWirelessGatewaysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWirelessGatewaysContinuation) in
            listWirelessGateways(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the log-level override for a resource-ID and resource-type. This option can be specified for a wireless gateway or a wireless device. A limit of 200 log level override can be set per account.
    func putResourceLogLevel(input: PutResourceLogLevelInput) async throws -> PutResourceLogLevelOutputResponse
    {
        typealias putResourceLogLevelContinuation = CheckedContinuation<PutResourceLogLevelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putResourceLogLevelContinuation) in
            putResourceLogLevel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the log-level overrides for all resources; both wireless devices and wireless gateways.
    func resetAllResourceLogLevels(input: ResetAllResourceLogLevelsInput) async throws -> ResetAllResourceLogLevelsOutputResponse
    {
        typealias resetAllResourceLogLevelsContinuation = CheckedContinuation<ResetAllResourceLogLevelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resetAllResourceLogLevelsContinuation) in
            resetAllResourceLogLevels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the log-level override, if any, for a specific resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.
    func resetResourceLogLevel(input: ResetResourceLogLevelInput) async throws -> ResetResourceLogLevelOutputResponse
    {
        typealias resetResourceLogLevelContinuation = CheckedContinuation<ResetResourceLogLevelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resetResourceLogLevelContinuation) in
            resetResourceLogLevel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends the specified data to a multicast group.
    func sendDataToMulticastGroup(input: SendDataToMulticastGroupInput) async throws -> SendDataToMulticastGroupOutputResponse
    {
        typealias sendDataToMulticastGroupContinuation = CheckedContinuation<SendDataToMulticastGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendDataToMulticastGroupContinuation) in
            sendDataToMulticastGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends a decrypted application data frame to a device.
    func sendDataToWirelessDevice(input: SendDataToWirelessDeviceInput) async throws -> SendDataToWirelessDeviceOutputResponse
    {
        typealias sendDataToWirelessDeviceContinuation = CheckedContinuation<SendDataToWirelessDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendDataToWirelessDeviceContinuation) in
            sendDataToWirelessDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts a bulk association of all qualifying wireless devices with a multicast group.
    func startBulkAssociateWirelessDeviceWithMulticastGroup(input: StartBulkAssociateWirelessDeviceWithMulticastGroupInput) async throws -> StartBulkAssociateWirelessDeviceWithMulticastGroupOutputResponse
    {
        typealias startBulkAssociateWirelessDeviceWithMulticastGroupContinuation = CheckedContinuation<StartBulkAssociateWirelessDeviceWithMulticastGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startBulkAssociateWirelessDeviceWithMulticastGroupContinuation) in
            startBulkAssociateWirelessDeviceWithMulticastGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts a bulk disassociatin of all qualifying wireless devices from a multicast group.
    func startBulkDisassociateWirelessDeviceFromMulticastGroup(input: StartBulkDisassociateWirelessDeviceFromMulticastGroupInput) async throws -> StartBulkDisassociateWirelessDeviceFromMulticastGroupOutputResponse
    {
        typealias startBulkDisassociateWirelessDeviceFromMulticastGroupContinuation = CheckedContinuation<StartBulkDisassociateWirelessDeviceFromMulticastGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startBulkDisassociateWirelessDeviceFromMulticastGroupContinuation) in
            startBulkDisassociateWirelessDeviceFromMulticastGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts a FUOTA task.
    func startFuotaTask(input: StartFuotaTaskInput) async throws -> StartFuotaTaskOutputResponse
    {
        typealias startFuotaTaskContinuation = CheckedContinuation<StartFuotaTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startFuotaTaskContinuation) in
            startFuotaTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts a multicast group session.
    func startMulticastGroupSession(input: StartMulticastGroupSessionInput) async throws -> StartMulticastGroupSessionOutputResponse
    {
        typealias startMulticastGroupSessionContinuation = CheckedContinuation<StartMulticastGroupSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startMulticastGroupSessionContinuation) in
            startMulticastGroupSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a tag to a resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Simulates a provisioned device by sending an uplink data payload of Hello.
    func testWirelessDevice(input: TestWirelessDeviceInput) async throws -> TestWirelessDeviceOutputResponse
    {
        typealias testWirelessDeviceContinuation = CheckedContinuation<TestWirelessDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testWirelessDeviceContinuation) in
            testWirelessDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes one or more tags from a resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates properties of a destination.
    func updateDestination(input: UpdateDestinationInput) async throws -> UpdateDestinationOutputResponse
    {
        typealias updateDestinationContinuation = CheckedContinuation<UpdateDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDestinationContinuation) in
            updateDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates properties of a FUOTA task.
    func updateFuotaTask(input: UpdateFuotaTaskInput) async throws -> UpdateFuotaTaskOutputResponse
    {
        typealias updateFuotaTaskContinuation = CheckedContinuation<UpdateFuotaTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFuotaTaskContinuation) in
            updateFuotaTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Set default log level, or log levels by resource types. This can be for wireless device log options or wireless gateways log options and is used to control the log messages that'll be displayed in CloudWatch.
    func updateLogLevelsByResourceTypes(input: UpdateLogLevelsByResourceTypesInput) async throws -> UpdateLogLevelsByResourceTypesOutputResponse
    {
        typealias updateLogLevelsByResourceTypesContinuation = CheckedContinuation<UpdateLogLevelsByResourceTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateLogLevelsByResourceTypesContinuation) in
            updateLogLevelsByResourceTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates properties of a multicast group session.
    func updateMulticastGroup(input: UpdateMulticastGroupInput) async throws -> UpdateMulticastGroupOutputResponse
    {
        typealias updateMulticastGroupContinuation = CheckedContinuation<UpdateMulticastGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMulticastGroupContinuation) in
            updateMulticastGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update NetworkAnalyzer configuration.
    func updateNetworkAnalyzerConfiguration(input: UpdateNetworkAnalyzerConfigurationInput) async throws -> UpdateNetworkAnalyzerConfigurationOutputResponse
    {
        typealias updateNetworkAnalyzerConfigurationContinuation = CheckedContinuation<UpdateNetworkAnalyzerConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateNetworkAnalyzerConfigurationContinuation) in
            updateNetworkAnalyzerConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates properties of a partner account.
    func updatePartnerAccount(input: UpdatePartnerAccountInput) async throws -> UpdatePartnerAccountOutputResponse
    {
        typealias updatePartnerAccountContinuation = CheckedContinuation<UpdatePartnerAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePartnerAccountContinuation) in
            updatePartnerAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update the event configuration for a particular resource identifier.
    func updateResourceEventConfiguration(input: UpdateResourceEventConfigurationInput) async throws -> UpdateResourceEventConfigurationOutputResponse
    {
        typealias updateResourceEventConfigurationContinuation = CheckedContinuation<UpdateResourceEventConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateResourceEventConfigurationContinuation) in
            updateResourceEventConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates properties of a wireless device.
    func updateWirelessDevice(input: UpdateWirelessDeviceInput) async throws -> UpdateWirelessDeviceOutputResponse
    {
        typealias updateWirelessDeviceContinuation = CheckedContinuation<UpdateWirelessDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateWirelessDeviceContinuation) in
            updateWirelessDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates properties of a wireless gateway.
    func updateWirelessGateway(input: UpdateWirelessGatewayInput) async throws -> UpdateWirelessGatewayOutputResponse
    {
        typealias updateWirelessGatewayContinuation = CheckedContinuation<UpdateWirelessGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateWirelessGatewayContinuation) in
            updateWirelessGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
