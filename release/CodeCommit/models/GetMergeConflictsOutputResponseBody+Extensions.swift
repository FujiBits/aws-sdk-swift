// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMergeConflictsOutputResponseBody: Equatable {
    public let mergeable: Bool
    public let destinationCommitId: String?
    public let sourceCommitId: String?
    public let baseCommitId: String?
    public let conflictMetadataList: [ConflictMetadata]?
    public let nextToken: String?
}

extension GetMergeConflictsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case baseCommitId
        case conflictMetadataList
        case destinationCommitId
        case mergeable
        case nextToken
        case sourceCommitId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mergeableDecoded = try containerValues.decode(Bool.self, forKey: .mergeable)
        mergeable = mergeableDecoded
        let destinationCommitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationCommitId)
        destinationCommitId = destinationCommitIdDecoded
        let sourceCommitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceCommitId)
        sourceCommitId = sourceCommitIdDecoded
        let baseCommitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .baseCommitId)
        baseCommitId = baseCommitIdDecoded
        let conflictMetadataListContainer = try containerValues.decodeIfPresent([ConflictMetadata?].self, forKey: .conflictMetadataList)
        var conflictMetadataListDecoded0:[ConflictMetadata]? = nil
        if let conflictMetadataListContainer = conflictMetadataListContainer {
            conflictMetadataListDecoded0 = [ConflictMetadata]()
            for structure0 in conflictMetadataListContainer {
                if let structure0 = structure0 {
                    conflictMetadataListDecoded0?.append(structure0)
                }
            }
        }
        conflictMetadataList = conflictMetadataListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
