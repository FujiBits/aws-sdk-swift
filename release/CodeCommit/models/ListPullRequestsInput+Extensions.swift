// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListPullRequestsInputHeadersMiddleware: Middleware {
    public let id: String = "ListPullRequestsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListPullRequestsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListPullRequestsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListPullRequestsInput>
    public typealias MOutput = OperationOutput<ListPullRequestsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListPullRequestsOutputError>
}

public struct ListPullRequestsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListPullRequestsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListPullRequestsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListPullRequestsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListPullRequestsInput>
    public typealias MOutput = OperationOutput<ListPullRequestsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListPullRequestsOutputError>
}

public struct ListPullRequestsInputBodyMiddleware: Middleware {
    public let id: String = "ListPullRequestsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListPullRequestsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListPullRequestsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListPullRequestsInput>
    public typealias MOutput = OperationOutput<ListPullRequestsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListPullRequestsOutputError>
}

extension ListPullRequestsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authorArn
        case maxResults
        case nextToken
        case pullRequestStatus
        case repositoryName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorArn = authorArn {
            try encodeContainer.encode(authorArn, forKey: .authorArn)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let pullRequestStatus = pullRequestStatus {
            try encodeContainer.encode(pullRequestStatus.rawValue, forKey: .pullRequestStatus)
        }
        if let repositoryName = repositoryName {
            try encodeContainer.encode(repositoryName, forKey: .repositoryName)
        }
    }
}
