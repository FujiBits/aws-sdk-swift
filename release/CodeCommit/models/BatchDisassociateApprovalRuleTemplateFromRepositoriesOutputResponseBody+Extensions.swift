// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputResponseBody: Equatable {
    public let disassociatedRepositoryNames: [String]?
    public let errors: [BatchDisassociateApprovalRuleTemplateFromRepositoriesError]?
}

extension BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case disassociatedRepositoryNames
        case errors
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let disassociatedRepositoryNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .disassociatedRepositoryNames)
        var disassociatedRepositoryNamesDecoded0:[String]? = nil
        if let disassociatedRepositoryNamesContainer = disassociatedRepositoryNamesContainer {
            disassociatedRepositoryNamesDecoded0 = [String]()
            for string0 in disassociatedRepositoryNamesContainer {
                if let string0 = string0 {
                    disassociatedRepositoryNamesDecoded0?.append(string0)
                }
            }
        }
        disassociatedRepositoryNames = disassociatedRepositoryNamesDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([BatchDisassociateApprovalRuleTemplateFromRepositoriesError?].self, forKey: .errors)
        var errorsDecoded0:[BatchDisassociateApprovalRuleTemplateFromRepositoriesError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [BatchDisassociateApprovalRuleTemplateFromRepositoriesError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}
