// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetFolderOutputResponseBody: Equatable {
    public let commitId: String?
    public let folderPath: String?
    public let treeId: String?
    public let subFolders: [Folder]?
    public let files: [File]?
    public let symbolicLinks: [SymbolicLink]?
    public let subModules: [SubModule]?
}

extension GetFolderOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case commitId
        case files
        case folderPath
        case subFolders
        case subModules
        case symbolicLinks
        case treeId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .commitId)
        commitId = commitIdDecoded
        let folderPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .folderPath)
        folderPath = folderPathDecoded
        let treeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .treeId)
        treeId = treeIdDecoded
        let subFoldersContainer = try containerValues.decodeIfPresent([Folder?].self, forKey: .subFolders)
        var subFoldersDecoded0:[Folder]? = nil
        if let subFoldersContainer = subFoldersContainer {
            subFoldersDecoded0 = [Folder]()
            for structure0 in subFoldersContainer {
                if let structure0 = structure0 {
                    subFoldersDecoded0?.append(structure0)
                }
            }
        }
        subFolders = subFoldersDecoded0
        let filesContainer = try containerValues.decodeIfPresent([File?].self, forKey: .files)
        var filesDecoded0:[File]? = nil
        if let filesContainer = filesContainer {
            filesDecoded0 = [File]()
            for structure0 in filesContainer {
                if let structure0 = structure0 {
                    filesDecoded0?.append(structure0)
                }
            }
        }
        files = filesDecoded0
        let symbolicLinksContainer = try containerValues.decodeIfPresent([SymbolicLink?].self, forKey: .symbolicLinks)
        var symbolicLinksDecoded0:[SymbolicLink]? = nil
        if let symbolicLinksContainer = symbolicLinksContainer {
            symbolicLinksDecoded0 = [SymbolicLink]()
            for structure0 in symbolicLinksContainer {
                if let structure0 = structure0 {
                    symbolicLinksDecoded0?.append(structure0)
                }
            }
        }
        symbolicLinks = symbolicLinksDecoded0
        let subModulesContainer = try containerValues.decodeIfPresent([SubModule?].self, forKey: .subModules)
        var subModulesDecoded0:[SubModule]? = nil
        if let subModulesContainer = subModulesContainer {
            subModulesDecoded0 = [SubModule]()
            for structure0 in subModulesContainer {
                if let structure0 = structure0 {
                    subModulesDecoded0?.append(structure0)
                }
            }
        }
        subModules = subModulesDecoded0
    }
}
