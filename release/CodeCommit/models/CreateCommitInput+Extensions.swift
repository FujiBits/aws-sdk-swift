// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateCommitInputHeadersMiddleware: Middleware {
    public let id: String = "CreateCommitInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCommitInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCommitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCommitInput>
    public typealias MOutput = OperationOutput<CreateCommitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCommitOutputError>
}

public struct CreateCommitInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateCommitInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCommitInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCommitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCommitInput>
    public typealias MOutput = OperationOutput<CreateCommitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCommitOutputError>
}

public struct CreateCommitInputBodyMiddleware: Middleware {
    public let id: String = "CreateCommitInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCommitInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCommitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCommitInput>
    public typealias MOutput = OperationOutput<CreateCommitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCommitOutputError>
}

extension CreateCommitInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authorName
        case branchName
        case commitMessage
        case deleteFiles
        case email
        case keepEmptyFolders
        case parentCommitId
        case putFiles
        case repositoryName
        case setFileModes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorName = authorName {
            try encodeContainer.encode(authorName, forKey: .authorName)
        }
        if let branchName = branchName {
            try encodeContainer.encode(branchName, forKey: .branchName)
        }
        if let commitMessage = commitMessage {
            try encodeContainer.encode(commitMessage, forKey: .commitMessage)
        }
        if let deleteFiles = deleteFiles {
            var deleteFilesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deleteFiles)
            for deletefileentries0 in deleteFiles {
                try deleteFilesContainer.encode(deletefileentries0)
            }
        }
        if let email = email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if keepEmptyFolders != false {
            try encodeContainer.encode(keepEmptyFolders, forKey: .keepEmptyFolders)
        }
        if let parentCommitId = parentCommitId {
            try encodeContainer.encode(parentCommitId, forKey: .parentCommitId)
        }
        if let putFiles = putFiles {
            var putFilesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .putFiles)
            for putfileentries0 in putFiles {
                try putFilesContainer.encode(putfileentries0)
            }
        }
        if let repositoryName = repositoryName {
            try encodeContainer.encode(repositoryName, forKey: .repositoryName)
        }
        if let setFileModes = setFileModes {
            var setFileModesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .setFileModes)
            for setfilemodeentries0 in setFileModes {
                try setFileModesContainer.encode(setfilemodeentries0)
            }
        }
    }
}
