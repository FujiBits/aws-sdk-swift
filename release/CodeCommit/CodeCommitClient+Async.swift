// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension CodeCommitClient {
    /// <p>Creates an association between an approval rule template and a specified repository.
    ///             Then, the next time a pull request is created in the repository where the destination
    ///             reference (if specified) matches the destination reference (branch) for the pull
    ///             request, an approval rule that matches the template conditions is automatically created
    ///             for that pull request. If no destination references are specified in the template, an
    ///             approval rule that matches the template contents is created for all pull requests in
    ///             that repository.</p>
    func associateApprovalRuleTemplateWithRepository(input: AssociateApprovalRuleTemplateWithRepositoryInput) async throws -> AssociateApprovalRuleTemplateWithRepositoryOutputResponse
    {
        typealias associateApprovalRuleTemplateWithRepositoryContinuation = CheckedContinuation<AssociateApprovalRuleTemplateWithRepositoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateApprovalRuleTemplateWithRepositoryContinuation) in
            associateApprovalRuleTemplateWithRepository(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an association between an approval rule template and one or more specified repositories. </p>
    func batchAssociateApprovalRuleTemplateWithRepositories(input: BatchAssociateApprovalRuleTemplateWithRepositoriesInput) async throws -> BatchAssociateApprovalRuleTemplateWithRepositoriesOutputResponse
    {
        typealias batchAssociateApprovalRuleTemplateWithRepositoriesContinuation = CheckedContinuation<BatchAssociateApprovalRuleTemplateWithRepositoriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchAssociateApprovalRuleTemplateWithRepositoriesContinuation) in
            batchAssociateApprovalRuleTemplateWithRepositories(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.</p>
    func batchDescribeMergeConflicts(input: BatchDescribeMergeConflictsInput) async throws -> BatchDescribeMergeConflictsOutputResponse
    {
        typealias batchDescribeMergeConflictsContinuation = CheckedContinuation<BatchDescribeMergeConflictsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDescribeMergeConflictsContinuation) in
            batchDescribeMergeConflicts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the association between an approval rule template and one or more specified repositories. </p>
    func batchDisassociateApprovalRuleTemplateFromRepositories(input: BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) async throws -> BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputResponse
    {
        typealias batchDisassociateApprovalRuleTemplateFromRepositoriesContinuation = CheckedContinuation<BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDisassociateApprovalRuleTemplateFromRepositoriesContinuation) in
            batchDisassociateApprovalRuleTemplateFromRepositories(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the contents of one or more commits in a repository.</p>
    func batchGetCommits(input: BatchGetCommitsInput) async throws -> BatchGetCommitsOutputResponse
    {
        typealias batchGetCommitsContinuation = CheckedContinuation<BatchGetCommitsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchGetCommitsContinuation) in
            batchGetCommits(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about one or more repositories.</p>
    ///         <note>
    ///             <p>The description field for a repository accepts all HTML characters and all valid
    ///                 Unicode characters. Applications that do not HTML-encode the description and display
    ///                 it in a webpage can expose users to potentially malicious code. Make sure that you
    ///                 HTML-encode the description field in any application that uses this API to display
    ///                 the repository description on a webpage.</p>
    ///          </note>
    func batchGetRepositories(input: BatchGetRepositoriesInput) async throws -> BatchGetRepositoriesOutputResponse
    {
        typealias batchGetRepositoriesContinuation = CheckedContinuation<BatchGetRepositoriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchGetRepositoriesContinuation) in
            batchGetRepositories(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a template for approval rules that can then be associated with one or more
    ///             repositories in your AWS account. When you associate a template with a repository, AWS
    ///             CodeCommit creates an approval rule that matches the conditions of the template for all
    ///             pull requests that meet the conditions of the template. For more information, see
    ///             <a>AssociateApprovalRuleTemplateWithRepository</a>.</p>
    func createApprovalRuleTemplate(input: CreateApprovalRuleTemplateInput) async throws -> CreateApprovalRuleTemplateOutputResponse
    {
        typealias createApprovalRuleTemplateContinuation = CheckedContinuation<CreateApprovalRuleTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createApprovalRuleTemplateContinuation) in
            createApprovalRuleTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a branch in a repository and points the branch to a commit.</p>
    ///         <note>
    ///             <p>Calling the create branch operation does not set a repository's default branch. To do this, call the update default branch operation.</p>
    ///          </note>
    func createBranch(input: CreateBranchInput) async throws -> CreateBranchOutputResponse
    {
        typealias createBranchContinuation = CheckedContinuation<CreateBranchOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBranchContinuation) in
            createBranch(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a commit for a repository on the tip of a specified branch.</p>
    func createCommit(input: CreateCommitInput) async throws -> CreateCommitOutputResponse
    {
        typealias createCommitContinuation = CheckedContinuation<CreateCommitOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCommitContinuation) in
            createCommit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a pull request in the specified repository.</p>
    func createPullRequest(input: CreatePullRequestInput) async throws -> CreatePullRequestOutputResponse
    {
        typealias createPullRequestContinuation = CheckedContinuation<CreatePullRequestOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPullRequestContinuation) in
            createPullRequest(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an approval rule for a pull request.</p>
    func createPullRequestApprovalRule(input: CreatePullRequestApprovalRuleInput) async throws -> CreatePullRequestApprovalRuleOutputResponse
    {
        typealias createPullRequestApprovalRuleContinuation = CheckedContinuation<CreatePullRequestApprovalRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPullRequestApprovalRuleContinuation) in
            createPullRequestApprovalRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new, empty repository.</p>
    func createRepository(input: CreateRepositoryInput) async throws -> CreateRepositoryOutputResponse
    {
        typealias createRepositoryContinuation = CheckedContinuation<CreateRepositoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRepositoryContinuation) in
            createRepository(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an unreferenced commit that represents the result of merging two branches
    ///             using a specified merge strategy. This can help you determine the outcome of a potential
    ///             merge. This API cannot be used with the fast-forward merge strategy because that
    ///             strategy does not create a merge commit.</p>
    ///         <note>
    ///             <p>This unreferenced merge commit
    ///         can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.</p>
    ///          </note>
    func createUnreferencedMergeCommit(input: CreateUnreferencedMergeCommitInput) async throws -> CreateUnreferencedMergeCommitOutputResponse
    {
        typealias createUnreferencedMergeCommitContinuation = CheckedContinuation<CreateUnreferencedMergeCommitOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUnreferencedMergeCommitContinuation) in
            createUnreferencedMergeCommit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a specified approval rule template. Deleting a template does not remove approval rules on pull requests already created with the template.</p>
    func deleteApprovalRuleTemplate(input: DeleteApprovalRuleTemplateInput) async throws -> DeleteApprovalRuleTemplateOutputResponse
    {
        typealias deleteApprovalRuleTemplateContinuation = CheckedContinuation<DeleteApprovalRuleTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteApprovalRuleTemplateContinuation) in
            deleteApprovalRuleTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a branch from a repository, unless that branch is the default branch for the repository. </p>
    func deleteBranch(input: DeleteBranchInput) async throws -> DeleteBranchOutputResponse
    {
        typealias deleteBranchContinuation = CheckedContinuation<DeleteBranchOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBranchContinuation) in
            deleteBranch(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the content of a comment made on a change, file, or commit in a repository.</p>
    func deleteCommentContent(input: DeleteCommentContentInput) async throws -> DeleteCommentContentOutputResponse
    {
        typealias deleteCommentContentContinuation = CheckedContinuation<DeleteCommentContentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCommentContentContinuation) in
            deleteCommentContent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a specified file from a specified branch. A commit is created on the branch
    ///             that contains the revision. The file still exists in the commits earlier to the commit
    ///             that contains the deletion.</p>
    func deleteFile(input: DeleteFileInput) async throws -> DeleteFileOutputResponse
    {
        typealias deleteFileContinuation = CheckedContinuation<DeleteFileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFileContinuation) in
            deleteFile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an approval rule from a specified pull request. Approval rules can be deleted from a pull request only if the pull request is open, and if the
    ///             approval rule was created specifically for a pull request and not generated from an approval rule template associated with the repository where the
    ///             pull request was created. You cannot delete an approval rule from a merged or closed pull request.</p>
    func deletePullRequestApprovalRule(input: DeletePullRequestApprovalRuleInput) async throws -> DeletePullRequestApprovalRuleOutputResponse
    {
        typealias deletePullRequestApprovalRuleContinuation = CheckedContinuation<DeletePullRequestApprovalRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePullRequestApprovalRuleContinuation) in
            deletePullRequestApprovalRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a repository. If a specified repository was already deleted, a null repository
    ///             ID is returned.</p>
    ///         <important>
    ///             <p>Deleting a repository also deletes all associated objects and metadata. After a repository is
    ///                 deleted, all future push calls to the deleted repository fail.</p>
    ///          </important>
    func deleteRepository(input: DeleteRepositoryInput) async throws -> DeleteRepositoryOutputResponse
    {
        typealias deleteRepositoryContinuation = CheckedContinuation<DeleteRepositoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRepositoryContinuation) in
            deleteRepository(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about one or more merge conflicts in the attempted merge of two
    ///             commit specifiers using the squash or three-way merge strategy. If the merge option for
    ///             the attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.</p>
    func describeMergeConflicts(input: DescribeMergeConflictsInput) async throws -> DescribeMergeConflictsOutputResponse
    {
        typealias describeMergeConflictsContinuation = CheckedContinuation<DescribeMergeConflictsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMergeConflictsContinuation) in
            describeMergeConflicts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about one or more pull request events.</p>
    func describePullRequestEvents(input: DescribePullRequestEventsInput) async throws -> DescribePullRequestEventsOutputResponse
    {
        typealias describePullRequestEventsContinuation = CheckedContinuation<DescribePullRequestEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePullRequestEventsContinuation) in
            describePullRequestEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the association between a template and a repository so that approval rules
    ///             based on the template are not automatically created when pull requests are created in
    ///             the specified repository. This does not delete any approval rules previously created for
    ///             pull requests through the template association.</p>
    func disassociateApprovalRuleTemplateFromRepository(input: DisassociateApprovalRuleTemplateFromRepositoryInput) async throws -> DisassociateApprovalRuleTemplateFromRepositoryOutputResponse
    {
        typealias disassociateApprovalRuleTemplateFromRepositoryContinuation = CheckedContinuation<DisassociateApprovalRuleTemplateFromRepositoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateApprovalRuleTemplateFromRepositoryContinuation) in
            disassociateApprovalRuleTemplateFromRepository(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Evaluates whether a pull request has met all the conditions specified in its associated approval rules.</p>
    func evaluatePullRequestApprovalRules(input: EvaluatePullRequestApprovalRulesInput) async throws -> EvaluatePullRequestApprovalRulesOutputResponse
    {
        typealias evaluatePullRequestApprovalRulesContinuation = CheckedContinuation<EvaluatePullRequestApprovalRulesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: evaluatePullRequestApprovalRulesContinuation) in
            evaluatePullRequestApprovalRules(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a specified approval rule template.</p>
    func getApprovalRuleTemplate(input: GetApprovalRuleTemplateInput) async throws -> GetApprovalRuleTemplateOutputResponse
    {
        typealias getApprovalRuleTemplateContinuation = CheckedContinuation<GetApprovalRuleTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getApprovalRuleTemplateContinuation) in
            getApprovalRuleTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the base-64 encoded content of an individual blob in a repository.</p>
    func getBlob(input: GetBlobInput) async throws -> GetBlobOutputResponse
    {
        typealias getBlobContinuation = CheckedContinuation<GetBlobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBlobContinuation) in
            getBlob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a repository branch, including its name and the last commit ID.</p>
    func getBranch(input: GetBranchInput) async throws -> GetBranchOutputResponse
    {
        typealias getBranchContinuation = CheckedContinuation<GetBranchOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBranchContinuation) in
            getBranch(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the content of a comment made on a change, file, or commit in a repository. </p>
    ///             <note>
    ///             <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of
    ///         reactions from active identities, use GetCommentReactions.</p>
    ///          </note>
    func getComment(input: GetCommentInput) async throws -> GetCommentOutputResponse
    {
        typealias getCommentContinuation = CheckedContinuation<GetCommentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCommentContinuation) in
            getComment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about reactions to a specified comment ID. Reactions from users who have been deleted will not be included in the count.</p>
    func getCommentReactions(input: GetCommentReactionsInput) async throws -> GetCommentReactionsOutputResponse
    {
        typealias getCommentReactionsContinuation = CheckedContinuation<GetCommentReactionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCommentReactionsContinuation) in
            getCommentReactions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about comments made on the comparison between two commits.</p>
    ///         <note>
    ///             <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of
    ///             reactions from active identities, use GetCommentReactions.</p>
    ///          </note>
    func getCommentsForComparedCommit(input: GetCommentsForComparedCommitInput) async throws -> GetCommentsForComparedCommitOutputResponse
    {
        typealias getCommentsForComparedCommitContinuation = CheckedContinuation<GetCommentsForComparedCommitOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCommentsForComparedCommitContinuation) in
            getCommentsForComparedCommit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns comments made on a pull request.</p>
    ///         <note>
    ///             <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of
    ///             reactions from active identities, use GetCommentReactions.</p>
    ///          </note>
    func getCommentsForPullRequest(input: GetCommentsForPullRequestInput) async throws -> GetCommentsForPullRequestOutputResponse
    {
        typealias getCommentsForPullRequestContinuation = CheckedContinuation<GetCommentsForPullRequestOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCommentsForPullRequestContinuation) in
            getCommentsForPullRequest(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a commit, including commit message and committer information.</p>
    func getCommit(input: GetCommitInput) async throws -> GetCommitOutputResponse
    {
        typealias getCommitContinuation = CheckedContinuation<GetCommitOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCommitContinuation) in
            getCommit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the differences in a valid commit specifier (such as a
    ///             branch, tag, HEAD, commit ID, or other fully qualified reference). Results can be
    ///             limited to a specified path.</p>
    func getDifferences(input: GetDifferencesInput) async throws -> GetDifferencesOutputResponse
    {
        typealias getDifferencesContinuation = CheckedContinuation<GetDifferencesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDifferencesContinuation) in
            getDifferences(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the base-64 encoded contents of a specified file and its metadata.</p>
    func getFile(input: GetFileInput) async throws -> GetFileOutputResponse
    {
        typealias getFileContinuation = CheckedContinuation<GetFileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFileContinuation) in
            getFile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the contents of a specified folder in a repository.</p>
    func getFolder(input: GetFolderInput) async throws -> GetFolderOutputResponse
    {
        typealias getFolderContinuation = CheckedContinuation<GetFolderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFolderContinuation) in
            getFolder(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a specified merge commit.</p>
    func getMergeCommit(input: GetMergeCommitInput) async throws -> GetMergeCommitOutputResponse
    {
        typealias getMergeCommitContinuation = CheckedContinuation<GetMergeCommitOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMergeCommitContinuation) in
            getMergeCommit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.</p>
    func getMergeConflicts(input: GetMergeConflictsInput) async throws -> GetMergeConflictsOutputResponse
    {
        typealias getMergeConflictsContinuation = CheckedContinuation<GetMergeConflictsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMergeConflictsContinuation) in
            getMergeConflicts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the merge options available for merging two specified
    ///             branches. For details about why a merge option is not available, use GetMergeConflicts
    ///             or DescribeMergeConflicts.</p>
    func getMergeOptions(input: GetMergeOptionsInput) async throws -> GetMergeOptionsOutputResponse
    {
        typealias getMergeOptionsContinuation = CheckedContinuation<GetMergeOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMergeOptionsContinuation) in
            getMergeOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a pull request in a specified repository.</p>
    func getPullRequest(input: GetPullRequestInput) async throws -> GetPullRequestOutputResponse
    {
        typealias getPullRequestContinuation = CheckedContinuation<GetPullRequestOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPullRequestContinuation) in
            getPullRequest(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about the approval states for a specified pull request. Approval states only apply to pull requests that have one or more
    ///         approval rules applied to them.</p>
    func getPullRequestApprovalStates(input: GetPullRequestApprovalStatesInput) async throws -> GetPullRequestApprovalStatesOutputResponse
    {
        typealias getPullRequestApprovalStatesContinuation = CheckedContinuation<GetPullRequestApprovalStatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPullRequestApprovalStatesContinuation) in
            getPullRequestApprovalStates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about whether approval rules have been set aside (overridden) for a
    ///             pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.</p>
    func getPullRequestOverrideState(input: GetPullRequestOverrideStateInput) async throws -> GetPullRequestOverrideStateOutputResponse
    {
        typealias getPullRequestOverrideStateContinuation = CheckedContinuation<GetPullRequestOverrideStateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPullRequestOverrideStateContinuation) in
            getPullRequestOverrideState(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a repository.</p>
    ///
    ///         <note>
    ///             <p>The description field for a repository accepts all HTML characters and all valid
    ///                 Unicode characters. Applications that do not HTML-encode the description and display
    ///                 it in a webpage can expose users to potentially malicious code. Make sure that you
    ///                 HTML-encode the description field in any application that uses this API to display
    ///                 the repository description on a webpage.</p>
    ///          </note>
    func getRepository(input: GetRepositoryInput) async throws -> GetRepositoryOutputResponse
    {
        typealias getRepositoryContinuation = CheckedContinuation<GetRepositoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRepositoryContinuation) in
            getRepository(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about triggers configured for a repository.</p>
    func getRepositoryTriggers(input: GetRepositoryTriggersInput) async throws -> GetRepositoryTriggersOutputResponse
    {
        typealias getRepositoryTriggersContinuation = CheckedContinuation<GetRepositoryTriggersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRepositoryTriggersContinuation) in
            getRepositoryTriggers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all approval rule templates in the specified AWS Region in your AWS account. If
    ///             an AWS Region is not specified, the AWS Region where you are signed in is used.</p>
    func listApprovalRuleTemplates(input: ListApprovalRuleTemplatesInput) async throws -> ListApprovalRuleTemplatesOutputResponse
    {
        typealias listApprovalRuleTemplatesContinuation = CheckedContinuation<ListApprovalRuleTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listApprovalRuleTemplatesContinuation) in
            listApprovalRuleTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all approval rule templates that are associated with a specified repository.</p>
    func listAssociatedApprovalRuleTemplatesForRepository(input: ListAssociatedApprovalRuleTemplatesForRepositoryInput) async throws -> ListAssociatedApprovalRuleTemplatesForRepositoryOutputResponse
    {
        typealias listAssociatedApprovalRuleTemplatesForRepositoryContinuation = CheckedContinuation<ListAssociatedApprovalRuleTemplatesForRepositoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssociatedApprovalRuleTemplatesForRepositoryContinuation) in
            listAssociatedApprovalRuleTemplatesForRepository(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about one or more branches in a repository.</p>
    func listBranches(input: ListBranchesInput) async throws -> ListBranchesOutputResponse
    {
        typealias listBranchesContinuation = CheckedContinuation<ListBranchesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBranchesContinuation) in
            listBranches(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of pull requests for a specified repository. The return list can be refined by pull request
    ///         status or pull request author ARN.</p>
    func listPullRequests(input: ListPullRequestsInput) async throws -> ListPullRequestsOutputResponse
    {
        typealias listPullRequestsContinuation = CheckedContinuation<ListPullRequestsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPullRequestsContinuation) in
            listPullRequests(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about one or more repositories.</p>
    func listRepositories(input: ListRepositoriesInput) async throws -> ListRepositoriesOutputResponse
    {
        typealias listRepositoriesContinuation = CheckedContinuation<ListRepositoriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRepositoriesContinuation) in
            listRepositories(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all repositories associated with the specified approval rule template.</p>
    func listRepositoriesForApprovalRuleTemplate(input: ListRepositoriesForApprovalRuleTemplateInput) async throws -> ListRepositoriesForApprovalRuleTemplateOutputResponse
    {
        typealias listRepositoriesForApprovalRuleTemplateContinuation = CheckedContinuation<ListRepositoriesForApprovalRuleTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRepositoriesForApprovalRuleTemplateContinuation) in
            listRepositoriesForApprovalRuleTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS
    ///             CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the<i> AWS CodeCommit User
    ///                 Guide</i>.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Merges two branches using the fast-forward merge strategy.</p>
    func mergeBranchesByFastForward(input: MergeBranchesByFastForwardInput) async throws -> MergeBranchesByFastForwardOutputResponse
    {
        typealias mergeBranchesByFastForwardContinuation = CheckedContinuation<MergeBranchesByFastForwardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: mergeBranchesByFastForwardContinuation) in
            mergeBranchesByFastForward(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Merges two branches using the squash merge strategy.</p>
    func mergeBranchesBySquash(input: MergeBranchesBySquashInput) async throws -> MergeBranchesBySquashOutputResponse
    {
        typealias mergeBranchesBySquashContinuation = CheckedContinuation<MergeBranchesBySquashOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: mergeBranchesBySquashContinuation) in
            mergeBranchesBySquash(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Merges two specified branches using the three-way merge strategy.</p>
    func mergeBranchesByThreeWay(input: MergeBranchesByThreeWayInput) async throws -> MergeBranchesByThreeWayOutputResponse
    {
        typealias mergeBranchesByThreeWayContinuation = CheckedContinuation<MergeBranchesByThreeWayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: mergeBranchesByThreeWayContinuation) in
            mergeBranchesByThreeWay(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attempts to merge the source commit of a pull request into the specified destination
    ///             branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.</p>
    func mergePullRequestByFastForward(input: MergePullRequestByFastForwardInput) async throws -> MergePullRequestByFastForwardOutputResponse
    {
        typealias mergePullRequestByFastForwardContinuation = CheckedContinuation<MergePullRequestByFastForwardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: mergePullRequestByFastForwardContinuation) in
            mergePullRequestByFastForward(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attempts to merge the source commit of a pull request into the specified destination
    ///             branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.</p>
    func mergePullRequestBySquash(input: MergePullRequestBySquashInput) async throws -> MergePullRequestBySquashOutputResponse
    {
        typealias mergePullRequestBySquashContinuation = CheckedContinuation<MergePullRequestBySquashOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: mergePullRequestBySquashContinuation) in
            mergePullRequestBySquash(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attempts to merge the source commit of a pull request into the specified destination
    ///             branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.</p>
    func mergePullRequestByThreeWay(input: MergePullRequestByThreeWayInput) async throws -> MergePullRequestByThreeWayOutputResponse
    {
        typealias mergePullRequestByThreeWayContinuation = CheckedContinuation<MergePullRequestByThreeWayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: mergePullRequestByThreeWayContinuation) in
            mergePullRequestByThreeWay(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets aside (overrides) all approval rule requirements for a specified pull request.</p>
    func overridePullRequestApprovalRules(input: OverridePullRequestApprovalRulesInput) async throws -> OverridePullRequestApprovalRulesOutputResponse
    {
        typealias overridePullRequestApprovalRulesContinuation = CheckedContinuation<OverridePullRequestApprovalRulesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: overridePullRequestApprovalRulesContinuation) in
            overridePullRequestApprovalRules(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Posts a comment on the comparison between two commits.</p>
    func postCommentForComparedCommit(input: PostCommentForComparedCommitInput) async throws -> PostCommentForComparedCommitOutputResponse
    {
        typealias postCommentForComparedCommitContinuation = CheckedContinuation<PostCommentForComparedCommitOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: postCommentForComparedCommitContinuation) in
            postCommentForComparedCommit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Posts a comment on a pull request.</p>
    func postCommentForPullRequest(input: PostCommentForPullRequestInput) async throws -> PostCommentForPullRequestOutputResponse
    {
        typealias postCommentForPullRequestContinuation = CheckedContinuation<PostCommentForPullRequestOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: postCommentForPullRequestContinuation) in
            postCommentForPullRequest(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Posts a comment in reply to an existing comment on a comparison between commits or a pull request.</p>
    func postCommentReply(input: PostCommentReplyInput) async throws -> PostCommentReplyOutputResponse
    {
        typealias postCommentReplyContinuation = CheckedContinuation<PostCommentReplyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: postCommentReplyContinuation) in
            postCommentReply(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds or updates a reaction to a specified comment for the user whose identity is used to make the request. You can only add or
    ///         update a reaction for yourself. You cannot add, modify, or delete a reaction for another user.</p>
    func putCommentReaction(input: PutCommentReactionInput) async throws -> PutCommentReactionOutputResponse
    {
        typealias putCommentReactionContinuation = CheckedContinuation<PutCommentReactionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putCommentReactionContinuation) in
            putCommentReaction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.</p>
    func putFile(input: PutFileInput) async throws -> PutFileOutputResponse
    {
        typealias putFileContinuation = CheckedContinuation<PutFileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putFileContinuation) in
            putFile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Replaces all triggers for a repository. Used to create or delete triggers.</p>
    func putRepositoryTriggers(input: PutRepositoryTriggersInput) async throws -> PutRepositoryTriggersOutputResponse
    {
        typealias putRepositoryTriggersContinuation = CheckedContinuation<PutRepositoryTriggersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putRepositoryTriggersContinuation) in
            putRepositoryTriggers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds or updates tags for a resource in AWS CodeCommit. For a list of valid resources
    ///             in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User
    ///                 Guide</i>.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Tests the functionality of repository triggers by sending information to the trigger
    ///             target. If real data is available in the repository, the test sends data from the last
    ///             commit. If no data is available, sample data is generated.</p>
    func testRepositoryTriggers(input: TestRepositoryTriggersInput) async throws -> TestRepositoryTriggersOutputResponse
    {
        typealias testRepositoryTriggersContinuation = CheckedContinuation<TestRepositoryTriggersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testRepositoryTriggersContinuation) in
            testRepositoryTriggers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes tags for a resource in AWS CodeCommit. For a list of valid resources in AWS
    ///             CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User
    ///                 Guide</i>.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the content of an approval rule template. You can change the number of
    ///             required approvals, the membership of the approval rule, and whether an approval pool is
    ///             defined.</p>
    func updateApprovalRuleTemplateContent(input: UpdateApprovalRuleTemplateContentInput) async throws -> UpdateApprovalRuleTemplateContentOutputResponse
    {
        typealias updateApprovalRuleTemplateContentContinuation = CheckedContinuation<UpdateApprovalRuleTemplateContentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApprovalRuleTemplateContentContinuation) in
            updateApprovalRuleTemplateContent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the description for a specified approval rule template.</p>
    func updateApprovalRuleTemplateDescription(input: UpdateApprovalRuleTemplateDescriptionInput) async throws -> UpdateApprovalRuleTemplateDescriptionOutputResponse
    {
        typealias updateApprovalRuleTemplateDescriptionContinuation = CheckedContinuation<UpdateApprovalRuleTemplateDescriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApprovalRuleTemplateDescriptionContinuation) in
            updateApprovalRuleTemplateDescription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the name of a specified approval rule template.</p>
    func updateApprovalRuleTemplateName(input: UpdateApprovalRuleTemplateNameInput) async throws -> UpdateApprovalRuleTemplateNameOutputResponse
    {
        typealias updateApprovalRuleTemplateNameContinuation = CheckedContinuation<UpdateApprovalRuleTemplateNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateApprovalRuleTemplateNameContinuation) in
            updateApprovalRuleTemplateName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Replaces the contents of a comment.</p>
    func updateComment(input: UpdateCommentInput) async throws -> UpdateCommentOutputResponse
    {
        typealias updateCommentContinuation = CheckedContinuation<UpdateCommentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateCommentContinuation) in
            updateComment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets or changes the default branch name for the specified repository.</p>
    ///         <note>
    ///             <p>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</p>
    ///          </note>
    func updateDefaultBranch(input: UpdateDefaultBranchInput) async throws -> UpdateDefaultBranchOutputResponse
    {
        typealias updateDefaultBranchContinuation = CheckedContinuation<UpdateDefaultBranchOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDefaultBranchContinuation) in
            updateDefaultBranch(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the structure of an approval rule created specifically for a pull request. For example, you can change the number of required approvers and
    ///             the approval pool for approvers. </p>
    func updatePullRequestApprovalRuleContent(input: UpdatePullRequestApprovalRuleContentInput) async throws -> UpdatePullRequestApprovalRuleContentOutputResponse
    {
        typealias updatePullRequestApprovalRuleContentContinuation = CheckedContinuation<UpdatePullRequestApprovalRuleContentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePullRequestApprovalRuleContentContinuation) in
            updatePullRequestApprovalRuleContent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the state of a user's approval on a pull request. The user is derived from the signed-in account when the request is made.</p>
    func updatePullRequestApprovalState(input: UpdatePullRequestApprovalStateInput) async throws -> UpdatePullRequestApprovalStateOutputResponse
    {
        typealias updatePullRequestApprovalStateContinuation = CheckedContinuation<UpdatePullRequestApprovalStateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePullRequestApprovalStateContinuation) in
            updatePullRequestApprovalState(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Replaces the contents of the description of a pull request.</p>
    func updatePullRequestDescription(input: UpdatePullRequestDescriptionInput) async throws -> UpdatePullRequestDescriptionOutputResponse
    {
        typealias updatePullRequestDescriptionContinuation = CheckedContinuation<UpdatePullRequestDescriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePullRequestDescriptionContinuation) in
            updatePullRequestDescription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the status of a pull request. </p>
    func updatePullRequestStatus(input: UpdatePullRequestStatusInput) async throws -> UpdatePullRequestStatusOutputResponse
    {
        typealias updatePullRequestStatusContinuation = CheckedContinuation<UpdatePullRequestStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePullRequestStatusContinuation) in
            updatePullRequestStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Replaces the title of a pull request.</p>
    func updatePullRequestTitle(input: UpdatePullRequestTitleInput) async throws -> UpdatePullRequestTitleOutputResponse
    {
        typealias updatePullRequestTitleContinuation = CheckedContinuation<UpdatePullRequestTitleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePullRequestTitleContinuation) in
            updatePullRequestTitle(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets or changes the comment or description for a repository.</p>
    ///         <note>
    ///             <p>The description field for a repository accepts all HTML characters and all valid
    ///                 Unicode characters. Applications that do not HTML-encode the description and display
    ///                 it in a webpage can expose users to potentially malicious code. Make sure that you
    ///                 HTML-encode the description field in any application that uses this API to display
    ///                 the repository description on a webpage.</p>
    ///          </note>
    func updateRepositoryDescription(input: UpdateRepositoryDescriptionInput) async throws -> UpdateRepositoryDescriptionOutputResponse
    {
        typealias updateRepositoryDescriptionContinuation = CheckedContinuation<UpdateRepositoryDescriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRepositoryDescriptionContinuation) in
            updateRepositoryDescription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Renames a repository. The repository name must be unique across the calling AWS
    ///             account. Repository names are limited to 100 alphanumeric, dash, and underscore
    ///             characters, and cannot include certain characters. The suffix .git is prohibited. For
    ///             more information about the limits on repository names, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">Limits</a> in the AWS CodeCommit
    ///             User Guide.</p>
    func updateRepositoryName(input: UpdateRepositoryNameInput) async throws -> UpdateRepositoryNameOutputResponse
    {
        typealias updateRepositoryNameContinuation = CheckedContinuation<UpdateRepositoryNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRepositoryNameContinuation) in
            updateRepositoryName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
