// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension NetworkManagerClient {
    /// Accepts a core network attachment request. Once the attachment request is accepted by a core network owner, the attachment is created and connected to a core network.
    func acceptAttachment(input: AcceptAttachmentInput) async throws -> AcceptAttachmentOutputResponse
    {
        typealias acceptAttachmentContinuation = CheckedContinuation<AcceptAttachmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acceptAttachmentContinuation) in
            acceptAttachment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a core network Connect peer with a device and optionally, with a link. If you specify a link, it must be associated with the specified device. You can only associate core network Connect peers that have been created on a core network Connect attachment on a core network.
    func associateConnectPeer(input: AssociateConnectPeerInput) async throws -> AssociateConnectPeerOutputResponse
    {
        typealias associateConnectPeerContinuation = CheckedContinuation<AssociateConnectPeerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateConnectPeerContinuation) in
            associateConnectPeer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a customer gateway with a device and optionally, with a link. If you specify a link, it must be associated with the specified device. You can only associate customer gateways that are connected to a VPN attachment on a transit gateway. The transit gateway must be registered in your global network. When you register a transit gateway, customer gateways that are connected to the transit gateway are automatically included in the global network. To list customer gateways that are connected to a transit gateway, use the [DescribeVpnConnections](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpnConnections.html) EC2 API and filter by transit-gateway-id. You cannot associate a customer gateway with more than one device and link.
    func associateCustomerGateway(input: AssociateCustomerGatewayInput) async throws -> AssociateCustomerGatewayOutputResponse
    {
        typealias associateCustomerGatewayContinuation = CheckedContinuation<AssociateCustomerGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateCustomerGatewayContinuation) in
            associateCustomerGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a link to a device. A device can be associated to multiple links and a link can be associated to multiple devices. The device and link must be in the same global network and the same site.
    func associateLink(input: AssociateLinkInput) async throws -> AssociateLinkOutputResponse
    {
        typealias associateLinkContinuation = CheckedContinuation<AssociateLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateLinkContinuation) in
            associateLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a transit gateway Connect peer with a device, and optionally, with a link. If you specify a link, it must be associated with the specified device. You can only associate transit gateway Connect peers that have been created on a transit gateway that's registered in your global network. You cannot associate a transit gateway Connect peer with more than one device and link.
    func associateTransitGatewayConnectPeer(input: AssociateTransitGatewayConnectPeerInput) async throws -> AssociateTransitGatewayConnectPeerOutputResponse
    {
        typealias associateTransitGatewayConnectPeerContinuation = CheckedContinuation<AssociateTransitGatewayConnectPeerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateTransitGatewayConnectPeerContinuation) in
            associateTransitGatewayConnectPeer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a core network Connect attachment from a specified core network attachment. A core network Connect attachment is a GRE-based tunnel attachment that you can use to establish a connection between a core network and an appliance. A core network Connect attachment uses an existing VPC attachment as the underlying transport mechanism.
    func createConnectAttachment(input: CreateConnectAttachmentInput) async throws -> CreateConnectAttachmentOutputResponse
    {
        typealias createConnectAttachmentContinuation = CheckedContinuation<CreateConnectAttachmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConnectAttachmentContinuation) in
            createConnectAttachment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a core network connect peer for a specified core network connect attachment between a core network and an appliance. The peer address and transit gateway address must be the same IP address family (IPv4 or IPv6).
    func createConnectPeer(input: CreateConnectPeerInput) async throws -> CreateConnectPeerOutputResponse
    {
        typealias createConnectPeerContinuation = CheckedContinuation<CreateConnectPeerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConnectPeerContinuation) in
            createConnectPeer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a connection between two devices. The devices can be a physical or virtual appliance that connects to a third-party appliance in a VPC, or a physical appliance that connects to another physical appliance in an on-premises network.
    func createConnection(input: CreateConnectionInput) async throws -> CreateConnectionOutputResponse
    {
        typealias createConnectionContinuation = CheckedContinuation<CreateConnectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConnectionContinuation) in
            createConnection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a core network as part of your global network, and optionally, with a core network policy.
    func createCoreNetwork(input: CreateCoreNetworkInput) async throws -> CreateCoreNetworkOutputResponse
    {
        typealias createCoreNetworkContinuation = CheckedContinuation<CreateCoreNetworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCoreNetworkContinuation) in
            createCoreNetwork(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new device in a global network. If you specify both a site ID and a location, the location of the site is used for visualization in the Network Manager console.
    func createDevice(input: CreateDeviceInput) async throws -> CreateDeviceOutputResponse
    {
        typealias createDeviceContinuation = CheckedContinuation<CreateDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDeviceContinuation) in
            createDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new, empty global network.
    func createGlobalNetwork(input: CreateGlobalNetworkInput) async throws -> CreateGlobalNetworkOutputResponse
    {
        typealias createGlobalNetworkContinuation = CheckedContinuation<CreateGlobalNetworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createGlobalNetworkContinuation) in
            createGlobalNetwork(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new link for a specified site.
    func createLink(input: CreateLinkInput) async throws -> CreateLinkOutputResponse
    {
        typealias createLinkContinuation = CheckedContinuation<CreateLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createLinkContinuation) in
            createLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new site in a global network.
    func createSite(input: CreateSiteInput) async throws -> CreateSiteOutputResponse
    {
        typealias createSiteContinuation = CheckedContinuation<CreateSiteOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSiteContinuation) in
            createSite(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a site-to-site VPN attachment on an edge location of a core network.
    func createSiteToSiteVpnAttachment(input: CreateSiteToSiteVpnAttachmentInput) async throws -> CreateSiteToSiteVpnAttachmentOutputResponse
    {
        typealias createSiteToSiteVpnAttachmentContinuation = CheckedContinuation<CreateSiteToSiteVpnAttachmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSiteToSiteVpnAttachmentContinuation) in
            createSiteToSiteVpnAttachment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a VPC attachment on an edge location of a core network.
    func createVpcAttachment(input: CreateVpcAttachmentInput) async throws -> CreateVpcAttachmentOutputResponse
    {
        typealias createVpcAttachmentContinuation = CheckedContinuation<CreateVpcAttachmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createVpcAttachmentContinuation) in
            createVpcAttachment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an attachment. Supports all attachment types.
    func deleteAttachment(input: DeleteAttachmentInput) async throws -> DeleteAttachmentOutputResponse
    {
        typealias deleteAttachmentContinuation = CheckedContinuation<DeleteAttachmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAttachmentContinuation) in
            deleteAttachment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a Connect peer.
    func deleteConnectPeer(input: DeleteConnectPeerInput) async throws -> DeleteConnectPeerOutputResponse
    {
        typealias deleteConnectPeerContinuation = CheckedContinuation<DeleteConnectPeerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConnectPeerContinuation) in
            deleteConnectPeer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified connection in your global network.
    func deleteConnection(input: DeleteConnectionInput) async throws -> DeleteConnectionOutputResponse
    {
        typealias deleteConnectionContinuation = CheckedContinuation<DeleteConnectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConnectionContinuation) in
            deleteConnection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a core network along with all core network policies. This can only be done if there are no attachments on a core network.
    func deleteCoreNetwork(input: DeleteCoreNetworkInput) async throws -> DeleteCoreNetworkOutputResponse
    {
        typealias deleteCoreNetworkContinuation = CheckedContinuation<DeleteCoreNetworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCoreNetworkContinuation) in
            deleteCoreNetwork(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a policy version from a core network. You can't delete the current LIVE policy.
    func deleteCoreNetworkPolicyVersion(input: DeleteCoreNetworkPolicyVersionInput) async throws -> DeleteCoreNetworkPolicyVersionOutputResponse
    {
        typealias deleteCoreNetworkPolicyVersionContinuation = CheckedContinuation<DeleteCoreNetworkPolicyVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCoreNetworkPolicyVersionContinuation) in
            deleteCoreNetworkPolicyVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing device. You must first disassociate the device from any links and customer gateways.
    func deleteDevice(input: DeleteDeviceInput) async throws -> DeleteDeviceOutputResponse
    {
        typealias deleteDeviceContinuation = CheckedContinuation<DeleteDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDeviceContinuation) in
            deleteDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing global network. You must first delete all global network objects (devices, links, and sites) and deregister all transit gateways.
    func deleteGlobalNetwork(input: DeleteGlobalNetworkInput) async throws -> DeleteGlobalNetworkOutputResponse
    {
        typealias deleteGlobalNetworkContinuation = CheckedContinuation<DeleteGlobalNetworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteGlobalNetworkContinuation) in
            deleteGlobalNetwork(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing link. You must first disassociate the link from any devices and customer gateways.
    func deleteLink(input: DeleteLinkInput) async throws -> DeleteLinkOutputResponse
    {
        typealias deleteLinkContinuation = CheckedContinuation<DeleteLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteLinkContinuation) in
            deleteLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a resource policy for the specified resource. This revokes the access of the principals specified in the resource policy.
    func deleteResourcePolicy(input: DeleteResourcePolicyInput) async throws -> DeleteResourcePolicyOutputResponse
    {
        typealias deleteResourcePolicyContinuation = CheckedContinuation<DeleteResourcePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteResourcePolicyContinuation) in
            deleteResourcePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing site. The site cannot be associated with any device or link.
    func deleteSite(input: DeleteSiteInput) async throws -> DeleteSiteOutputResponse
    {
        typealias deleteSiteContinuation = CheckedContinuation<DeleteSiteOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSiteContinuation) in
            deleteSite(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deregisters a transit gateway from your global network. This action does not delete your transit gateway, or modify any of its attachments. This action removes any customer gateway associations.
    func deregisterTransitGateway(input: DeregisterTransitGatewayInput) async throws -> DeregisterTransitGatewayOutputResponse
    {
        typealias deregisterTransitGatewayContinuation = CheckedContinuation<DeregisterTransitGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterTransitGatewayContinuation) in
            deregisterTransitGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes one or more global networks. By default, all global networks are described. To describe the objects in your global network, you must use the appropriate Get* action. For example, to list the transit gateways in your global network, use [GetTransitGatewayRegistrations].
    func describeGlobalNetworks(input: DescribeGlobalNetworksInput) async throws -> DescribeGlobalNetworksOutputResponse
    {
        typealias describeGlobalNetworksContinuation = CheckedContinuation<DescribeGlobalNetworksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeGlobalNetworksContinuation) in
            describeGlobalNetworks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a core network Connect peer from a device and a link.
    func disassociateConnectPeer(input: DisassociateConnectPeerInput) async throws -> DisassociateConnectPeerOutputResponse
    {
        typealias disassociateConnectPeerContinuation = CheckedContinuation<DisassociateConnectPeerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateConnectPeerContinuation) in
            disassociateConnectPeer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a customer gateway from a device and a link.
    func disassociateCustomerGateway(input: DisassociateCustomerGatewayInput) async throws -> DisassociateCustomerGatewayOutputResponse
    {
        typealias disassociateCustomerGatewayContinuation = CheckedContinuation<DisassociateCustomerGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateCustomerGatewayContinuation) in
            disassociateCustomerGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates an existing device from a link. You must first disassociate any customer gateways that are associated with the link.
    func disassociateLink(input: DisassociateLinkInput) async throws -> DisassociateLinkOutputResponse
    {
        typealias disassociateLinkContinuation = CheckedContinuation<DisassociateLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateLinkContinuation) in
            disassociateLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a transit gateway Connect peer from a device and link.
    func disassociateTransitGatewayConnectPeer(input: DisassociateTransitGatewayConnectPeerInput) async throws -> DisassociateTransitGatewayConnectPeerOutputResponse
    {
        typealias disassociateTransitGatewayConnectPeerContinuation = CheckedContinuation<DisassociateTransitGatewayConnectPeerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateTransitGatewayConnectPeerContinuation) in
            disassociateTransitGatewayConnectPeer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Executes a change set on your core network. Deploys changes globally based on the policy submitted..
    func executeCoreNetworkChangeSet(input: ExecuteCoreNetworkChangeSetInput) async throws -> ExecuteCoreNetworkChangeSetOutputResponse
    {
        typealias executeCoreNetworkChangeSetContinuation = CheckedContinuation<ExecuteCoreNetworkChangeSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: executeCoreNetworkChangeSetContinuation) in
            executeCoreNetworkChangeSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a core network Connect attachment.
    func getConnectAttachment(input: GetConnectAttachmentInput) async throws -> GetConnectAttachmentOutputResponse
    {
        typealias getConnectAttachmentContinuation = CheckedContinuation<GetConnectAttachmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getConnectAttachmentContinuation) in
            getConnectAttachment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a core network Connect peer.
    func getConnectPeer(input: GetConnectPeerInput) async throws -> GetConnectPeerOutputResponse
    {
        typealias getConnectPeerContinuation = CheckedContinuation<GetConnectPeerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getConnectPeerContinuation) in
            getConnectPeer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a core network Connect peer associations.
    func getConnectPeerAssociations(input: GetConnectPeerAssociationsInput) async throws -> GetConnectPeerAssociationsOutputResponse
    {
        typealias getConnectPeerAssociationsContinuation = CheckedContinuation<GetConnectPeerAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getConnectPeerAssociationsContinuation) in
            getConnectPeerAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about one or more of your connections in a global network.
    func getConnections(input: GetConnectionsInput) async throws -> GetConnectionsOutputResponse
    {
        typealias getConnectionsContinuation = CheckedContinuation<GetConnectionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getConnectionsContinuation) in
            getConnections(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a core network. By default it returns the LIVE policy.
    func getCoreNetwork(input: GetCoreNetworkInput) async throws -> GetCoreNetworkOutputResponse
    {
        typealias getCoreNetworkContinuation = CheckedContinuation<GetCoreNetworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCoreNetworkContinuation) in
            getCoreNetwork(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a change set between the LIVE core network policy and a submitted policy.
    func getCoreNetworkChangeSet(input: GetCoreNetworkChangeSetInput) async throws -> GetCoreNetworkChangeSetOutputResponse
    {
        typealias getCoreNetworkChangeSetContinuation = CheckedContinuation<GetCoreNetworkChangeSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCoreNetworkChangeSetContinuation) in
            getCoreNetworkChangeSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets details about a core network policy. You can get details about your current live policy or any previous policy version.
    func getCoreNetworkPolicy(input: GetCoreNetworkPolicyInput) async throws -> GetCoreNetworkPolicyOutputResponse
    {
        typealias getCoreNetworkPolicyContinuation = CheckedContinuation<GetCoreNetworkPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCoreNetworkPolicyContinuation) in
            getCoreNetworkPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the association information for customer gateways that are associated with devices and links in your global network.
    func getCustomerGatewayAssociations(input: GetCustomerGatewayAssociationsInput) async throws -> GetCustomerGatewayAssociationsOutputResponse
    {
        typealias getCustomerGatewayAssociationsContinuation = CheckedContinuation<GetCustomerGatewayAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCustomerGatewayAssociationsContinuation) in
            getCustomerGatewayAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about one or more of your devices in a global network.
    func getDevices(input: GetDevicesInput) async throws -> GetDevicesOutputResponse
    {
        typealias getDevicesContinuation = CheckedContinuation<GetDevicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDevicesContinuation) in
            getDevices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the link associations for a device or a link. Either the device ID or the link ID must be specified.
    func getLinkAssociations(input: GetLinkAssociationsInput) async throws -> GetLinkAssociationsOutputResponse
    {
        typealias getLinkAssociationsContinuation = CheckedContinuation<GetLinkAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLinkAssociationsContinuation) in
            getLinkAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about one or more links in a specified global network. If you specify the site ID, you cannot specify the type or provider in the same request. You can specify the type and provider in the same request.
    func getLinks(input: GetLinksInput) async throws -> GetLinksOutputResponse
    {
        typealias getLinksContinuation = CheckedContinuation<GetLinksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLinksContinuation) in
            getLinks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the count of network resources, by resource type, for the specified global network.
    func getNetworkResourceCounts(input: GetNetworkResourceCountsInput) async throws -> GetNetworkResourceCountsOutputResponse
    {
        typealias getNetworkResourceCountsContinuation = CheckedContinuation<GetNetworkResourceCountsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getNetworkResourceCountsContinuation) in
            getNetworkResourceCounts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the network resource relationships for the specified global network.
    func getNetworkResourceRelationships(input: GetNetworkResourceRelationshipsInput) async throws -> GetNetworkResourceRelationshipsOutputResponse
    {
        typealias getNetworkResourceRelationshipsContinuation = CheckedContinuation<GetNetworkResourceRelationshipsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getNetworkResourceRelationshipsContinuation) in
            getNetworkResourceRelationships(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the network resources for the specified global network. The results include information from the corresponding Describe call for the resource, minus any sensitive information such as pre-shared keys.
    func getNetworkResources(input: GetNetworkResourcesInput) async throws -> GetNetworkResourcesOutputResponse
    {
        typealias getNetworkResourcesContinuation = CheckedContinuation<GetNetworkResourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getNetworkResourcesContinuation) in
            getNetworkResources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the network routes of the specified global network.
    func getNetworkRoutes(input: GetNetworkRoutesInput) async throws -> GetNetworkRoutesOutputResponse
    {
        typealias getNetworkRoutesContinuation = CheckedContinuation<GetNetworkRoutesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getNetworkRoutesContinuation) in
            getNetworkRoutes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the network telemetry of the specified global network.
    func getNetworkTelemetry(input: GetNetworkTelemetryInput) async throws -> GetNetworkTelemetryOutputResponse
    {
        typealias getNetworkTelemetryContinuation = CheckedContinuation<GetNetworkTelemetryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getNetworkTelemetryContinuation) in
            getNetworkTelemetry(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a resource policy.
    func getResourcePolicy(input: GetResourcePolicyInput) async throws -> GetResourcePolicyOutputResponse
    {
        typealias getResourcePolicyContinuation = CheckedContinuation<GetResourcePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getResourcePolicyContinuation) in
            getResourcePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified route analysis.
    func getRouteAnalysis(input: GetRouteAnalysisInput) async throws -> GetRouteAnalysisOutputResponse
    {
        typealias getRouteAnalysisContinuation = CheckedContinuation<GetRouteAnalysisOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRouteAnalysisContinuation) in
            getRouteAnalysis(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a site-to-site VPN attachment.
    func getSiteToSiteVpnAttachment(input: GetSiteToSiteVpnAttachmentInput) async throws -> GetSiteToSiteVpnAttachmentOutputResponse
    {
        typealias getSiteToSiteVpnAttachmentContinuation = CheckedContinuation<GetSiteToSiteVpnAttachmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSiteToSiteVpnAttachmentContinuation) in
            getSiteToSiteVpnAttachment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about one or more of your sites in a global network.
    func getSites(input: GetSitesInput) async throws -> GetSitesOutputResponse
    {
        typealias getSitesContinuation = CheckedContinuation<GetSitesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSitesContinuation) in
            getSites(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about one or more of your transit gateway Connect peer associations in a global network.
    func getTransitGatewayConnectPeerAssociations(input: GetTransitGatewayConnectPeerAssociationsInput) async throws -> GetTransitGatewayConnectPeerAssociationsOutputResponse
    {
        typealias getTransitGatewayConnectPeerAssociationsContinuation = CheckedContinuation<GetTransitGatewayConnectPeerAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTransitGatewayConnectPeerAssociationsContinuation) in
            getTransitGatewayConnectPeerAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the transit gateway registrations in a specified global network.
    func getTransitGatewayRegistrations(input: GetTransitGatewayRegistrationsInput) async throws -> GetTransitGatewayRegistrationsOutputResponse
    {
        typealias getTransitGatewayRegistrationsContinuation = CheckedContinuation<GetTransitGatewayRegistrationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTransitGatewayRegistrationsContinuation) in
            getTransitGatewayRegistrations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a VPC attachment.
    func getVpcAttachment(input: GetVpcAttachmentInput) async throws -> GetVpcAttachmentOutputResponse
    {
        typealias getVpcAttachmentContinuation = CheckedContinuation<GetVpcAttachmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVpcAttachmentContinuation) in
            getVpcAttachment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of core network attachments.
    func listAttachments(input: ListAttachmentsInput) async throws -> ListAttachmentsOutputResponse
    {
        typealias listAttachmentsContinuation = CheckedContinuation<ListAttachmentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAttachmentsContinuation) in
            listAttachments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of core network Connect peers.
    func listConnectPeers(input: ListConnectPeersInput) async throws -> ListConnectPeersOutputResponse
    {
        typealias listConnectPeersContinuation = CheckedContinuation<ListConnectPeersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listConnectPeersContinuation) in
            listConnectPeers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of core network policy versions.
    func listCoreNetworkPolicyVersions(input: ListCoreNetworkPolicyVersionsInput) async throws -> ListCoreNetworkPolicyVersionsOutputResponse
    {
        typealias listCoreNetworkPolicyVersionsContinuation = CheckedContinuation<ListCoreNetworkPolicyVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCoreNetworkPolicyVersionsContinuation) in
            listCoreNetworkPolicyVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of owned and shared core networks.
    func listCoreNetworks(input: ListCoreNetworksInput) async throws -> ListCoreNetworksOutputResponse
    {
        typealias listCoreNetworksContinuation = CheckedContinuation<ListCoreNetworksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCoreNetworksContinuation) in
            listCoreNetworks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags for a specified resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new, immutable version of a core network policy. A subsequent change set is created showing the differences between the LIVE policy and the submitted policy.
    func putCoreNetworkPolicy(input: PutCoreNetworkPolicyInput) async throws -> PutCoreNetworkPolicyOutputResponse
    {
        typealias putCoreNetworkPolicyContinuation = CheckedContinuation<PutCoreNetworkPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putCoreNetworkPolicyContinuation) in
            putCoreNetworkPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates or updates a resource policy.
    func putResourcePolicy(input: PutResourcePolicyInput) async throws -> PutResourcePolicyOutputResponse
    {
        typealias putResourcePolicyContinuation = CheckedContinuation<PutResourcePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putResourcePolicyContinuation) in
            putResourcePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers a transit gateway in your global network. The transit gateway can be in any Amazon Web Services Region, but it must be owned by the same Amazon Web Services account that owns the global network. You cannot register a transit gateway in more than one global network.
    func registerTransitGateway(input: RegisterTransitGatewayInput) async throws -> RegisterTransitGatewayOutputResponse
    {
        typealias registerTransitGatewayContinuation = CheckedContinuation<RegisterTransitGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerTransitGatewayContinuation) in
            registerTransitGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Rejects a core network attachment request.
    func rejectAttachment(input: RejectAttachmentInput) async throws -> RejectAttachmentOutputResponse
    {
        typealias rejectAttachmentContinuation = CheckedContinuation<RejectAttachmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rejectAttachmentContinuation) in
            rejectAttachment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Restores a previous policy version as a new, immutable version of a core network policy. A subsequent change set is created showing the differences between the LIVE policy and restored policy.
    func restoreCoreNetworkPolicyVersion(input: RestoreCoreNetworkPolicyVersionInput) async throws -> RestoreCoreNetworkPolicyVersionOutputResponse
    {
        typealias restoreCoreNetworkPolicyVersionContinuation = CheckedContinuation<RestoreCoreNetworkPolicyVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: restoreCoreNetworkPolicyVersionContinuation) in
            restoreCoreNetworkPolicyVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts analyzing the routing path between the specified source and destination. For more information, see [Route Analyzer](https://docs.aws.amazon.com/vpc/latest/tgw/route-analyzer.html).
    func startRouteAnalysis(input: StartRouteAnalysisInput) async throws -> StartRouteAnalysisOutputResponse
    {
        typealias startRouteAnalysisContinuation = CheckedContinuation<StartRouteAnalysisOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startRouteAnalysisContinuation) in
            startRouteAnalysis(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Tags a specified resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes tags from a specified resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the information for an existing connection. To remove information for any of the parameters, specify an empty string.
    func updateConnection(input: UpdateConnectionInput) async throws -> UpdateConnectionOutputResponse
    {
        typealias updateConnectionContinuation = CheckedContinuation<UpdateConnectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConnectionContinuation) in
            updateConnection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the description of a core network.
    func updateCoreNetwork(input: UpdateCoreNetworkInput) async throws -> UpdateCoreNetworkOutputResponse
    {
        typealias updateCoreNetworkContinuation = CheckedContinuation<UpdateCoreNetworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateCoreNetworkContinuation) in
            updateCoreNetwork(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the details for an existing device. To remove information for any of the parameters, specify an empty string.
    func updateDevice(input: UpdateDeviceInput) async throws -> UpdateDeviceOutputResponse
    {
        typealias updateDeviceContinuation = CheckedContinuation<UpdateDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDeviceContinuation) in
            updateDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing global network. To remove information for any of the parameters, specify an empty string.
    func updateGlobalNetwork(input: UpdateGlobalNetworkInput) async throws -> UpdateGlobalNetworkOutputResponse
    {
        typealias updateGlobalNetworkContinuation = CheckedContinuation<UpdateGlobalNetworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGlobalNetworkContinuation) in
            updateGlobalNetwork(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the details for an existing link. To remove information for any of the parameters, specify an empty string.
    func updateLink(input: UpdateLinkInput) async throws -> UpdateLinkOutputResponse
    {
        typealias updateLinkContinuation = CheckedContinuation<UpdateLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateLinkContinuation) in
            updateLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the resource metadata for the specified global network.
    func updateNetworkResourceMetadata(input: UpdateNetworkResourceMetadataInput) async throws -> UpdateNetworkResourceMetadataOutputResponse
    {
        typealias updateNetworkResourceMetadataContinuation = CheckedContinuation<UpdateNetworkResourceMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateNetworkResourceMetadataContinuation) in
            updateNetworkResourceMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the information for an existing site. To remove information for any of the parameters, specify an empty string.
    func updateSite(input: UpdateSiteInput) async throws -> UpdateSiteOutputResponse
    {
        typealias updateSiteContinuation = CheckedContinuation<UpdateSiteOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSiteContinuation) in
            updateSite(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a VPC attachment.
    func updateVpcAttachment(input: UpdateVpcAttachmentInput) async throws -> UpdateVpcAttachmentOutputResponse
    {
        typealias updateVpcAttachmentContinuation = CheckedContinuation<UpdateVpcAttachmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateVpcAttachmentContinuation) in
            updateVpcAttachment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
