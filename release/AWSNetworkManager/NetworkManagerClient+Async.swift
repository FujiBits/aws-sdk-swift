// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension NetworkManagerClient {
    /// Associates a customer gateway with a device and optionally, with a link. If you
    ///             specify a link, it must be associated with the specified device.
    ///         You can only associate customer gateways that are connected to a VPN attachment on a
    ///             transit gateway. The transit gateway must be registered in your global network. When
    ///             you register a transit gateway, customer gateways that are connected to the transit
    ///             gateway are automatically included in the global network. To list customer gateways
    ///             that are connected to a transit gateway, use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpnConnections.html">DescribeVpnConnections EC2 API and filter by
    ///                 transit-gateway-id.
    ///         You cannot associate a customer gateway with more than one device and link.
    func associateCustomerGateway(input: AssociateCustomerGatewayInput) async throws -> AssociateCustomerGatewayOutputResponse
    {
        typealias associateCustomerGatewayContinuation = CheckedContinuation<AssociateCustomerGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateCustomerGatewayContinuation) in
            associateCustomerGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a link to a device. A device can be associated to multiple links and a link can be associated to multiple devices. The device and link must be in the same global network and the same site.
    func associateLink(input: AssociateLinkInput) async throws -> AssociateLinkOutputResponse
    {
        typealias associateLinkContinuation = CheckedContinuation<AssociateLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateLinkContinuation) in
            associateLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a transit gateway Connect peer with a device, and optionally, with a link. If you
    ///             specify a link, it must be associated with the specified device.
    ///         You can only associate transit gateway Connect peers that have been created on a
    ///             transit gateway that's registered in your global network.
    ///         You cannot associate a transit gateway Connect peer with more than one device and link.
    func associateTransitGatewayConnectPeer(input: AssociateTransitGatewayConnectPeerInput) async throws -> AssociateTransitGatewayConnectPeerOutputResponse
    {
        typealias associateTransitGatewayConnectPeerContinuation = CheckedContinuation<AssociateTransitGatewayConnectPeerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateTransitGatewayConnectPeerContinuation) in
            associateTransitGatewayConnectPeer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a connection between two devices. The devices can be a physical or virtual appliance that connects to a third-party appliance in a VPC, or a physical appliance that connects to another physical appliance in an on-premises network.
    func createConnection(input: CreateConnectionInput) async throws -> CreateConnectionOutputResponse
    {
        typealias createConnectionContinuation = CheckedContinuation<CreateConnectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConnectionContinuation) in
            createConnection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new device in a global network. If you specify both a site ID and a
    ///             location, the location of the site is used for visualization in the Network Manager console.
    func createDevice(input: CreateDeviceInput) async throws -> CreateDeviceOutputResponse
    {
        typealias createDeviceContinuation = CheckedContinuation<CreateDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDeviceContinuation) in
            createDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new, empty global network.
    func createGlobalNetwork(input: CreateGlobalNetworkInput) async throws -> CreateGlobalNetworkOutputResponse
    {
        typealias createGlobalNetworkContinuation = CheckedContinuation<CreateGlobalNetworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createGlobalNetworkContinuation) in
            createGlobalNetwork(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new link for a specified site.
    func createLink(input: CreateLinkInput) async throws -> CreateLinkOutputResponse
    {
        typealias createLinkContinuation = CheckedContinuation<CreateLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createLinkContinuation) in
            createLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new site in a global network.
    func createSite(input: CreateSiteInput) async throws -> CreateSiteOutputResponse
    {
        typealias createSiteContinuation = CheckedContinuation<CreateSiteOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSiteContinuation) in
            createSite(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified connection in your global network.
    func deleteConnection(input: DeleteConnectionInput) async throws -> DeleteConnectionOutputResponse
    {
        typealias deleteConnectionContinuation = CheckedContinuation<DeleteConnectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConnectionContinuation) in
            deleteConnection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing device. You must first disassociate the device from any links and
    ///             customer gateways.
    func deleteDevice(input: DeleteDeviceInput) async throws -> DeleteDeviceOutputResponse
    {
        typealias deleteDeviceContinuation = CheckedContinuation<DeleteDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDeviceContinuation) in
            deleteDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing global network. You must first delete all global network objects
    ///             (devices, links, and sites) and deregister all transit gateways.
    func deleteGlobalNetwork(input: DeleteGlobalNetworkInput) async throws -> DeleteGlobalNetworkOutputResponse
    {
        typealias deleteGlobalNetworkContinuation = CheckedContinuation<DeleteGlobalNetworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteGlobalNetworkContinuation) in
            deleteGlobalNetwork(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing link. You must first disassociate the link from any devices and
    ///             customer gateways.
    func deleteLink(input: DeleteLinkInput) async throws -> DeleteLinkOutputResponse
    {
        typealias deleteLinkContinuation = CheckedContinuation<DeleteLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteLinkContinuation) in
            deleteLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing site. The site cannot be associated with any device or link.
    func deleteSite(input: DeleteSiteInput) async throws -> DeleteSiteOutputResponse
    {
        typealias deleteSiteContinuation = CheckedContinuation<DeleteSiteOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSiteContinuation) in
            deleteSite(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deregisters a transit gateway from your global network. This action does not delete
    ///             your transit gateway, or modify any of its attachments. This action removes any customer gateway associations.
    func deregisterTransitGateway(input: DeregisterTransitGatewayInput) async throws -> DeregisterTransitGatewayOutputResponse
    {
        typealias deregisterTransitGatewayContinuation = CheckedContinuation<DeregisterTransitGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterTransitGatewayContinuation) in
            deregisterTransitGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes one or more global networks. By default, all global networks are
    ///             described. To describe the objects in your global network, you must use the appropriate
    ///                 Get* action. For example, to list the transit gateways in your global
    ///             network, use GetTransitGatewayRegistrations.
    func describeGlobalNetworks(input: DescribeGlobalNetworksInput) async throws -> DescribeGlobalNetworksOutputResponse
    {
        typealias describeGlobalNetworksContinuation = CheckedContinuation<DescribeGlobalNetworksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeGlobalNetworksContinuation) in
            describeGlobalNetworks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a customer gateway from a device and a link.
    func disassociateCustomerGateway(input: DisassociateCustomerGatewayInput) async throws -> DisassociateCustomerGatewayOutputResponse
    {
        typealias disassociateCustomerGatewayContinuation = CheckedContinuation<DisassociateCustomerGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateCustomerGatewayContinuation) in
            disassociateCustomerGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates an existing device from a link. You must first disassociate any customer
    ///             gateways that are associated with the link.
    func disassociateLink(input: DisassociateLinkInput) async throws -> DisassociateLinkOutputResponse
    {
        typealias disassociateLinkContinuation = CheckedContinuation<DisassociateLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateLinkContinuation) in
            disassociateLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a transit gateway Connect peer from a device and link.
    func disassociateTransitGatewayConnectPeer(input: DisassociateTransitGatewayConnectPeerInput) async throws -> DisassociateTransitGatewayConnectPeerOutputResponse
    {
        typealias disassociateTransitGatewayConnectPeerContinuation = CheckedContinuation<DisassociateTransitGatewayConnectPeerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateTransitGatewayConnectPeerContinuation) in
            disassociateTransitGatewayConnectPeer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about one or more of your connections in a global network.
    func getConnections(input: GetConnectionsInput) async throws -> GetConnectionsOutputResponse
    {
        typealias getConnectionsContinuation = CheckedContinuation<GetConnectionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getConnectionsContinuation) in
            getConnections(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the association information for customer gateways that are associated with
    ///             devices and links in your global network.
    func getCustomerGatewayAssociations(input: GetCustomerGatewayAssociationsInput) async throws -> GetCustomerGatewayAssociationsOutputResponse
    {
        typealias getCustomerGatewayAssociationsContinuation = CheckedContinuation<GetCustomerGatewayAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCustomerGatewayAssociationsContinuation) in
            getCustomerGatewayAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about one or more of your devices in a global network.
    func getDevices(input: GetDevicesInput) async throws -> GetDevicesOutputResponse
    {
        typealias getDevicesContinuation = CheckedContinuation<GetDevicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDevicesContinuation) in
            getDevices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the link associations for a device or a link. Either the device ID or the link ID
    ///             must be specified.
    func getLinkAssociations(input: GetLinkAssociationsInput) async throws -> GetLinkAssociationsOutputResponse
    {
        typealias getLinkAssociationsContinuation = CheckedContinuation<GetLinkAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLinkAssociationsContinuation) in
            getLinkAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about one or more links in a specified global network.
    ///         If you specify the site ID, you cannot specify the type or provider in the same request. You can specify the type and provider in the same request.
    func getLinks(input: GetLinksInput) async throws -> GetLinksOutputResponse
    {
        typealias getLinksContinuation = CheckedContinuation<GetLinksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLinksContinuation) in
            getLinks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about one or more of your sites in a global network.
    func getSites(input: GetSitesInput) async throws -> GetSitesOutputResponse
    {
        typealias getSitesContinuation = CheckedContinuation<GetSitesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSitesContinuation) in
            getSites(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about one or more of your transit gateway Connect peer associations in a global network.
    func getTransitGatewayConnectPeerAssociations(input: GetTransitGatewayConnectPeerAssociationsInput) async throws -> GetTransitGatewayConnectPeerAssociationsOutputResponse
    {
        typealias getTransitGatewayConnectPeerAssociationsContinuation = CheckedContinuation<GetTransitGatewayConnectPeerAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTransitGatewayConnectPeerAssociationsContinuation) in
            getTransitGatewayConnectPeerAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the transit gateway registrations in a specified
    ///             global network.
    func getTransitGatewayRegistrations(input: GetTransitGatewayRegistrationsInput) async throws -> GetTransitGatewayRegistrationsOutputResponse
    {
        typealias getTransitGatewayRegistrationsContinuation = CheckedContinuation<GetTransitGatewayRegistrationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTransitGatewayRegistrationsContinuation) in
            getTransitGatewayRegistrations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags for a specified resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers a transit gateway in your global network. The transit gateway can be in any
    ///             AWS Region, but it must be owned by the same AWS account that owns the global network.
    ///             You cannot register a transit gateway in more than one global network.
    func registerTransitGateway(input: RegisterTransitGatewayInput) async throws -> RegisterTransitGatewayOutputResponse
    {
        typealias registerTransitGatewayContinuation = CheckedContinuation<RegisterTransitGatewayOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerTransitGatewayContinuation) in
            registerTransitGateway(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Tags a specified resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes tags from a specified resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the information for an existing connection. To remove information for any of the parameters,
    ///             specify an empty string.
    func updateConnection(input: UpdateConnectionInput) async throws -> UpdateConnectionOutputResponse
    {
        typealias updateConnectionContinuation = CheckedContinuation<UpdateConnectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConnectionContinuation) in
            updateConnection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the details for an existing device. To remove information for any of the
    ///             parameters, specify an empty string.
    func updateDevice(input: UpdateDeviceInput) async throws -> UpdateDeviceOutputResponse
    {
        typealias updateDeviceContinuation = CheckedContinuation<UpdateDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDeviceContinuation) in
            updateDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing global network. To remove information for any of the parameters,
    ///             specify an empty string.
    func updateGlobalNetwork(input: UpdateGlobalNetworkInput) async throws -> UpdateGlobalNetworkOutputResponse
    {
        typealias updateGlobalNetworkContinuation = CheckedContinuation<UpdateGlobalNetworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGlobalNetworkContinuation) in
            updateGlobalNetwork(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the details for an existing link. To remove information for any of the
    ///             parameters, specify an empty string.
    func updateLink(input: UpdateLinkInput) async throws -> UpdateLinkOutputResponse
    {
        typealias updateLinkContinuation = CheckedContinuation<UpdateLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateLinkContinuation) in
            updateLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the information for an existing site. To remove information for any of the
    ///             parameters, specify an empty string.
    func updateSite(input: UpdateSiteInput) async throws -> UpdateSiteOutputResponse
    {
        typealias updateSiteContinuation = CheckedContinuation<UpdateSiteOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSiteContinuation) in
            updateSite(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
