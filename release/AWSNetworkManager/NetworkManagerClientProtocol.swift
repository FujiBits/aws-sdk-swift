// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Transit Gateway Network Manager (Network Manager) enables you to create a global network, in which you can monitor your Amazon Web Services and on-premises networks that are built around transit gateways.
public protocol NetworkManagerClientProtocol {
    /// Accepts a core network attachment request. Once the attachment request is accepted by a core network owner, the attachment is created and connected to a core network.
    func acceptAttachment(input: AcceptAttachmentInput, completion: @escaping (ClientRuntime.SdkResult<AcceptAttachmentOutputResponse, AcceptAttachmentOutputError>) -> Void)
    /// Associates a core network Connect peer with a device and optionally, with a link. If you specify a link, it must be associated with the specified device. You can only associate core network Connect peers that have been created on a core network Connect attachment on a core network.
    func associateConnectPeer(input: AssociateConnectPeerInput, completion: @escaping (ClientRuntime.SdkResult<AssociateConnectPeerOutputResponse, AssociateConnectPeerOutputError>) -> Void)
    /// Associates a customer gateway with a device and optionally, with a link. If you specify a link, it must be associated with the specified device. You can only associate customer gateways that are connected to a VPN attachment on a transit gateway. The transit gateway must be registered in your global network. When you register a transit gateway, customer gateways that are connected to the transit gateway are automatically included in the global network. To list customer gateways that are connected to a transit gateway, use the [DescribeVpnConnections](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpnConnections.html) EC2 API and filter by transit-gateway-id. You cannot associate a customer gateway with more than one device and link.
    func associateCustomerGateway(input: AssociateCustomerGatewayInput, completion: @escaping (ClientRuntime.SdkResult<AssociateCustomerGatewayOutputResponse, AssociateCustomerGatewayOutputError>) -> Void)
    /// Associates a link to a device. A device can be associated to multiple links and a link can be associated to multiple devices. The device and link must be in the same global network and the same site.
    func associateLink(input: AssociateLinkInput, completion: @escaping (ClientRuntime.SdkResult<AssociateLinkOutputResponse, AssociateLinkOutputError>) -> Void)
    /// Associates a transit gateway Connect peer with a device, and optionally, with a link. If you specify a link, it must be associated with the specified device. You can only associate transit gateway Connect peers that have been created on a transit gateway that's registered in your global network. You cannot associate a transit gateway Connect peer with more than one device and link.
    func associateTransitGatewayConnectPeer(input: AssociateTransitGatewayConnectPeerInput, completion: @escaping (ClientRuntime.SdkResult<AssociateTransitGatewayConnectPeerOutputResponse, AssociateTransitGatewayConnectPeerOutputError>) -> Void)
    /// Creates a core network Connect attachment from a specified core network attachment. A core network Connect attachment is a GRE-based tunnel attachment that you can use to establish a connection between a core network and an appliance. A core network Connect attachment uses an existing VPC attachment as the underlying transport mechanism.
    func createConnectAttachment(input: CreateConnectAttachmentInput, completion: @escaping (ClientRuntime.SdkResult<CreateConnectAttachmentOutputResponse, CreateConnectAttachmentOutputError>) -> Void)
    /// Creates a connection between two devices. The devices can be a physical or virtual appliance that connects to a third-party appliance in a VPC, or a physical appliance that connects to another physical appliance in an on-premises network.
    func createConnection(input: CreateConnectionInput, completion: @escaping (ClientRuntime.SdkResult<CreateConnectionOutputResponse, CreateConnectionOutputError>) -> Void)
    /// Creates a core network connect peer for a specified core network connect attachment between a core network and an appliance. The peer address and transit gateway address must be the same IP address family (IPv4 or IPv6).
    func createConnectPeer(input: CreateConnectPeerInput, completion: @escaping (ClientRuntime.SdkResult<CreateConnectPeerOutputResponse, CreateConnectPeerOutputError>) -> Void)
    /// Creates a core network as part of your global network, and optionally, with a core network policy.
    func createCoreNetwork(input: CreateCoreNetworkInput, completion: @escaping (ClientRuntime.SdkResult<CreateCoreNetworkOutputResponse, CreateCoreNetworkOutputError>) -> Void)
    /// Creates a new device in a global network. If you specify both a site ID and a location, the location of the site is used for visualization in the Network Manager console.
    func createDevice(input: CreateDeviceInput, completion: @escaping (ClientRuntime.SdkResult<CreateDeviceOutputResponse, CreateDeviceOutputError>) -> Void)
    /// Creates a new, empty global network.
    func createGlobalNetwork(input: CreateGlobalNetworkInput, completion: @escaping (ClientRuntime.SdkResult<CreateGlobalNetworkOutputResponse, CreateGlobalNetworkOutputError>) -> Void)
    /// Creates a new link for a specified site.
    func createLink(input: CreateLinkInput, completion: @escaping (ClientRuntime.SdkResult<CreateLinkOutputResponse, CreateLinkOutputError>) -> Void)
    /// Creates a new site in a global network.
    func createSite(input: CreateSiteInput, completion: @escaping (ClientRuntime.SdkResult<CreateSiteOutputResponse, CreateSiteOutputError>) -> Void)
    /// Creates a site-to-site VPN attachment on an edge location of a core network.
    func createSiteToSiteVpnAttachment(input: CreateSiteToSiteVpnAttachmentInput, completion: @escaping (ClientRuntime.SdkResult<CreateSiteToSiteVpnAttachmentOutputResponse, CreateSiteToSiteVpnAttachmentOutputError>) -> Void)
    /// Creates a VPC attachment on an edge location of a core network.
    func createVpcAttachment(input: CreateVpcAttachmentInput, completion: @escaping (ClientRuntime.SdkResult<CreateVpcAttachmentOutputResponse, CreateVpcAttachmentOutputError>) -> Void)
    /// Deletes an attachment. Supports all attachment types.
    func deleteAttachment(input: DeleteAttachmentInput, completion: @escaping (ClientRuntime.SdkResult<DeleteAttachmentOutputResponse, DeleteAttachmentOutputError>) -> Void)
    /// Deletes the specified connection in your global network.
    func deleteConnection(input: DeleteConnectionInput, completion: @escaping (ClientRuntime.SdkResult<DeleteConnectionOutputResponse, DeleteConnectionOutputError>) -> Void)
    /// Deletes a Connect peer.
    func deleteConnectPeer(input: DeleteConnectPeerInput, completion: @escaping (ClientRuntime.SdkResult<DeleteConnectPeerOutputResponse, DeleteConnectPeerOutputError>) -> Void)
    /// Deletes a core network along with all core network policies. This can only be done if there are no attachments on a core network.
    func deleteCoreNetwork(input: DeleteCoreNetworkInput, completion: @escaping (ClientRuntime.SdkResult<DeleteCoreNetworkOutputResponse, DeleteCoreNetworkOutputError>) -> Void)
    /// Deletes a policy version from a core network. You can't delete the current LIVE policy.
    func deleteCoreNetworkPolicyVersion(input: DeleteCoreNetworkPolicyVersionInput, completion: @escaping (ClientRuntime.SdkResult<DeleteCoreNetworkPolicyVersionOutputResponse, DeleteCoreNetworkPolicyVersionOutputError>) -> Void)
    /// Deletes an existing device. You must first disassociate the device from any links and customer gateways.
    func deleteDevice(input: DeleteDeviceInput, completion: @escaping (ClientRuntime.SdkResult<DeleteDeviceOutputResponse, DeleteDeviceOutputError>) -> Void)
    /// Deletes an existing global network. You must first delete all global network objects (devices, links, and sites) and deregister all transit gateways.
    func deleteGlobalNetwork(input: DeleteGlobalNetworkInput, completion: @escaping (ClientRuntime.SdkResult<DeleteGlobalNetworkOutputResponse, DeleteGlobalNetworkOutputError>) -> Void)
    /// Deletes an existing link. You must first disassociate the link from any devices and customer gateways.
    func deleteLink(input: DeleteLinkInput, completion: @escaping (ClientRuntime.SdkResult<DeleteLinkOutputResponse, DeleteLinkOutputError>) -> Void)
    /// Deletes a resource policy for the specified resource. This revokes the access of the principals specified in the resource policy.
    func deleteResourcePolicy(input: DeleteResourcePolicyInput, completion: @escaping (ClientRuntime.SdkResult<DeleteResourcePolicyOutputResponse, DeleteResourcePolicyOutputError>) -> Void)
    /// Deletes an existing site. The site cannot be associated with any device or link.
    func deleteSite(input: DeleteSiteInput, completion: @escaping (ClientRuntime.SdkResult<DeleteSiteOutputResponse, DeleteSiteOutputError>) -> Void)
    /// Deregisters a transit gateway from your global network. This action does not delete your transit gateway, or modify any of its attachments. This action removes any customer gateway associations.
    func deregisterTransitGateway(input: DeregisterTransitGatewayInput, completion: @escaping (ClientRuntime.SdkResult<DeregisterTransitGatewayOutputResponse, DeregisterTransitGatewayOutputError>) -> Void)
    /// Describes one or more global networks. By default, all global networks are described. To describe the objects in your global network, you must use the appropriate Get* action. For example, to list the transit gateways in your global network, use [GetTransitGatewayRegistrations].
    func describeGlobalNetworks(input: DescribeGlobalNetworksInput, completion: @escaping (ClientRuntime.SdkResult<DescribeGlobalNetworksOutputResponse, DescribeGlobalNetworksOutputError>) -> Void)
    /// Disassociates a core network Connect peer from a device and a link.
    func disassociateConnectPeer(input: DisassociateConnectPeerInput, completion: @escaping (ClientRuntime.SdkResult<DisassociateConnectPeerOutputResponse, DisassociateConnectPeerOutputError>) -> Void)
    /// Disassociates a customer gateway from a device and a link.
    func disassociateCustomerGateway(input: DisassociateCustomerGatewayInput, completion: @escaping (ClientRuntime.SdkResult<DisassociateCustomerGatewayOutputResponse, DisassociateCustomerGatewayOutputError>) -> Void)
    /// Disassociates an existing device from a link. You must first disassociate any customer gateways that are associated with the link.
    func disassociateLink(input: DisassociateLinkInput, completion: @escaping (ClientRuntime.SdkResult<DisassociateLinkOutputResponse, DisassociateLinkOutputError>) -> Void)
    /// Disassociates a transit gateway Connect peer from a device and link.
    func disassociateTransitGatewayConnectPeer(input: DisassociateTransitGatewayConnectPeerInput, completion: @escaping (ClientRuntime.SdkResult<DisassociateTransitGatewayConnectPeerOutputResponse, DisassociateTransitGatewayConnectPeerOutputError>) -> Void)
    /// Executes a change set on your core network. Deploys changes globally based on the policy submitted..
    func executeCoreNetworkChangeSet(input: ExecuteCoreNetworkChangeSetInput, completion: @escaping (ClientRuntime.SdkResult<ExecuteCoreNetworkChangeSetOutputResponse, ExecuteCoreNetworkChangeSetOutputError>) -> Void)
    /// Returns information about a core network Connect attachment.
    func getConnectAttachment(input: GetConnectAttachmentInput, completion: @escaping (ClientRuntime.SdkResult<GetConnectAttachmentOutputResponse, GetConnectAttachmentOutputError>) -> Void)
    /// Gets information about one or more of your connections in a global network.
    func getConnections(input: GetConnectionsInput, completion: @escaping (ClientRuntime.SdkResult<GetConnectionsOutputResponse, GetConnectionsOutputError>) -> Void)
    /// Returns information about a core network Connect peer.
    func getConnectPeer(input: GetConnectPeerInput, completion: @escaping (ClientRuntime.SdkResult<GetConnectPeerOutputResponse, GetConnectPeerOutputError>) -> Void)
    /// Returns information about a core network Connect peer associations.
    func getConnectPeerAssociations(input: GetConnectPeerAssociationsInput, completion: @escaping (ClientRuntime.SdkResult<GetConnectPeerAssociationsOutputResponse, GetConnectPeerAssociationsOutputError>) -> Void)
    /// Returns information about a core network. By default it returns the LIVE policy.
    func getCoreNetwork(input: GetCoreNetworkInput, completion: @escaping (ClientRuntime.SdkResult<GetCoreNetworkOutputResponse, GetCoreNetworkOutputError>) -> Void)
    /// Returns a change set between the LIVE core network policy and a submitted policy.
    func getCoreNetworkChangeSet(input: GetCoreNetworkChangeSetInput, completion: @escaping (ClientRuntime.SdkResult<GetCoreNetworkChangeSetOutputResponse, GetCoreNetworkChangeSetOutputError>) -> Void)
    /// Gets details about a core network policy. You can get details about your current live policy or any previous policy version.
    func getCoreNetworkPolicy(input: GetCoreNetworkPolicyInput, completion: @escaping (ClientRuntime.SdkResult<GetCoreNetworkPolicyOutputResponse, GetCoreNetworkPolicyOutputError>) -> Void)
    /// Gets the association information for customer gateways that are associated with devices and links in your global network.
    func getCustomerGatewayAssociations(input: GetCustomerGatewayAssociationsInput, completion: @escaping (ClientRuntime.SdkResult<GetCustomerGatewayAssociationsOutputResponse, GetCustomerGatewayAssociationsOutputError>) -> Void)
    /// Gets information about one or more of your devices in a global network.
    func getDevices(input: GetDevicesInput, completion: @escaping (ClientRuntime.SdkResult<GetDevicesOutputResponse, GetDevicesOutputError>) -> Void)
    /// Gets the link associations for a device or a link. Either the device ID or the link ID must be specified.
    func getLinkAssociations(input: GetLinkAssociationsInput, completion: @escaping (ClientRuntime.SdkResult<GetLinkAssociationsOutputResponse, GetLinkAssociationsOutputError>) -> Void)
    /// Gets information about one or more links in a specified global network. If you specify the site ID, you cannot specify the type or provider in the same request. You can specify the type and provider in the same request.
    func getLinks(input: GetLinksInput, completion: @escaping (ClientRuntime.SdkResult<GetLinksOutputResponse, GetLinksOutputError>) -> Void)
    /// Gets the count of network resources, by resource type, for the specified global network.
    func getNetworkResourceCounts(input: GetNetworkResourceCountsInput, completion: @escaping (ClientRuntime.SdkResult<GetNetworkResourceCountsOutputResponse, GetNetworkResourceCountsOutputError>) -> Void)
    /// Gets the network resource relationships for the specified global network.
    func getNetworkResourceRelationships(input: GetNetworkResourceRelationshipsInput, completion: @escaping (ClientRuntime.SdkResult<GetNetworkResourceRelationshipsOutputResponse, GetNetworkResourceRelationshipsOutputError>) -> Void)
    /// Describes the network resources for the specified global network. The results include information from the corresponding Describe call for the resource, minus any sensitive information such as pre-shared keys.
    func getNetworkResources(input: GetNetworkResourcesInput, completion: @escaping (ClientRuntime.SdkResult<GetNetworkResourcesOutputResponse, GetNetworkResourcesOutputError>) -> Void)
    /// Gets the network routes of the specified global network.
    func getNetworkRoutes(input: GetNetworkRoutesInput, completion: @escaping (ClientRuntime.SdkResult<GetNetworkRoutesOutputResponse, GetNetworkRoutesOutputError>) -> Void)
    /// Gets the network telemetry of the specified global network.
    func getNetworkTelemetry(input: GetNetworkTelemetryInput, completion: @escaping (ClientRuntime.SdkResult<GetNetworkTelemetryOutputResponse, GetNetworkTelemetryOutputError>) -> Void)
    /// Returns information about a resource policy.
    func getResourcePolicy(input: GetResourcePolicyInput, completion: @escaping (ClientRuntime.SdkResult<GetResourcePolicyOutputResponse, GetResourcePolicyOutputError>) -> Void)
    /// Gets information about the specified route analysis.
    func getRouteAnalysis(input: GetRouteAnalysisInput, completion: @escaping (ClientRuntime.SdkResult<GetRouteAnalysisOutputResponse, GetRouteAnalysisOutputError>) -> Void)
    /// Gets information about one or more of your sites in a global network.
    func getSites(input: GetSitesInput, completion: @escaping (ClientRuntime.SdkResult<GetSitesOutputResponse, GetSitesOutputError>) -> Void)
    /// Returns information about a site-to-site VPN attachment.
    func getSiteToSiteVpnAttachment(input: GetSiteToSiteVpnAttachmentInput, completion: @escaping (ClientRuntime.SdkResult<GetSiteToSiteVpnAttachmentOutputResponse, GetSiteToSiteVpnAttachmentOutputError>) -> Void)
    /// Gets information about one or more of your transit gateway Connect peer associations in a global network.
    func getTransitGatewayConnectPeerAssociations(input: GetTransitGatewayConnectPeerAssociationsInput, completion: @escaping (ClientRuntime.SdkResult<GetTransitGatewayConnectPeerAssociationsOutputResponse, GetTransitGatewayConnectPeerAssociationsOutputError>) -> Void)
    /// Gets information about the transit gateway registrations in a specified global network.
    func getTransitGatewayRegistrations(input: GetTransitGatewayRegistrationsInput, completion: @escaping (ClientRuntime.SdkResult<GetTransitGatewayRegistrationsOutputResponse, GetTransitGatewayRegistrationsOutputError>) -> Void)
    /// Returns information about a VPC attachment.
    func getVpcAttachment(input: GetVpcAttachmentInput, completion: @escaping (ClientRuntime.SdkResult<GetVpcAttachmentOutputResponse, GetVpcAttachmentOutputError>) -> Void)
    /// Returns a list of core network attachments.
    func listAttachments(input: ListAttachmentsInput, completion: @escaping (ClientRuntime.SdkResult<ListAttachmentsOutputResponse, ListAttachmentsOutputError>) -> Void)
    /// Returns a list of core network Connect peers.
    func listConnectPeers(input: ListConnectPeersInput, completion: @escaping (ClientRuntime.SdkResult<ListConnectPeersOutputResponse, ListConnectPeersOutputError>) -> Void)
    /// Returns a list of core network policy versions.
    func listCoreNetworkPolicyVersions(input: ListCoreNetworkPolicyVersionsInput, completion: @escaping (ClientRuntime.SdkResult<ListCoreNetworkPolicyVersionsOutputResponse, ListCoreNetworkPolicyVersionsOutputError>) -> Void)
    /// Returns a list of owned and shared core networks.
    func listCoreNetworks(input: ListCoreNetworksInput, completion: @escaping (ClientRuntime.SdkResult<ListCoreNetworksOutputResponse, ListCoreNetworksOutputError>) -> Void)
    /// Lists the tags for a specified resource.
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (ClientRuntime.SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// Creates a new, immutable version of a core network policy. A subsequent change set is created showing the differences between the LIVE policy and the submitted policy.
    func putCoreNetworkPolicy(input: PutCoreNetworkPolicyInput, completion: @escaping (ClientRuntime.SdkResult<PutCoreNetworkPolicyOutputResponse, PutCoreNetworkPolicyOutputError>) -> Void)
    /// Creates or updates a resource policy.
    func putResourcePolicy(input: PutResourcePolicyInput, completion: @escaping (ClientRuntime.SdkResult<PutResourcePolicyOutputResponse, PutResourcePolicyOutputError>) -> Void)
    /// Registers a transit gateway in your global network. The transit gateway can be in any Amazon Web Services Region, but it must be owned by the same Amazon Web Services account that owns the global network. You cannot register a transit gateway in more than one global network.
    func registerTransitGateway(input: RegisterTransitGatewayInput, completion: @escaping (ClientRuntime.SdkResult<RegisterTransitGatewayOutputResponse, RegisterTransitGatewayOutputError>) -> Void)
    /// Rejects a core network attachment request.
    func rejectAttachment(input: RejectAttachmentInput, completion: @escaping (ClientRuntime.SdkResult<RejectAttachmentOutputResponse, RejectAttachmentOutputError>) -> Void)
    /// Restores a previous policy version as a new, immutable version of a core network policy. A subsequent change set is created showing the differences between the LIVE policy and restored policy.
    func restoreCoreNetworkPolicyVersion(input: RestoreCoreNetworkPolicyVersionInput, completion: @escaping (ClientRuntime.SdkResult<RestoreCoreNetworkPolicyVersionOutputResponse, RestoreCoreNetworkPolicyVersionOutputError>) -> Void)
    /// Starts analyzing the routing path between the specified source and destination. For more information, see [Route Analyzer](https://docs.aws.amazon.com/vpc/latest/tgw/route-analyzer.html).
    func startRouteAnalysis(input: StartRouteAnalysisInput, completion: @escaping (ClientRuntime.SdkResult<StartRouteAnalysisOutputResponse, StartRouteAnalysisOutputError>) -> Void)
    /// Tags a specified resource.
    func tagResource(input: TagResourceInput, completion: @escaping (ClientRuntime.SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// Removes tags from a specified resource.
    func untagResource(input: UntagResourceInput, completion: @escaping (ClientRuntime.SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// Updates the information for an existing connection. To remove information for any of the parameters, specify an empty string.
    func updateConnection(input: UpdateConnectionInput, completion: @escaping (ClientRuntime.SdkResult<UpdateConnectionOutputResponse, UpdateConnectionOutputError>) -> Void)
    /// Updates the description of a core network.
    func updateCoreNetwork(input: UpdateCoreNetworkInput, completion: @escaping (ClientRuntime.SdkResult<UpdateCoreNetworkOutputResponse, UpdateCoreNetworkOutputError>) -> Void)
    /// Updates the details for an existing device. To remove information for any of the parameters, specify an empty string.
    func updateDevice(input: UpdateDeviceInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDeviceOutputResponse, UpdateDeviceOutputError>) -> Void)
    /// Updates an existing global network. To remove information for any of the parameters, specify an empty string.
    func updateGlobalNetwork(input: UpdateGlobalNetworkInput, completion: @escaping (ClientRuntime.SdkResult<UpdateGlobalNetworkOutputResponse, UpdateGlobalNetworkOutputError>) -> Void)
    /// Updates the details for an existing link. To remove information for any of the parameters, specify an empty string.
    func updateLink(input: UpdateLinkInput, completion: @escaping (ClientRuntime.SdkResult<UpdateLinkOutputResponse, UpdateLinkOutputError>) -> Void)
    /// Updates the resource metadata for the specified global network.
    func updateNetworkResourceMetadata(input: UpdateNetworkResourceMetadataInput, completion: @escaping (ClientRuntime.SdkResult<UpdateNetworkResourceMetadataOutputResponse, UpdateNetworkResourceMetadataOutputError>) -> Void)
    /// Updates the information for an existing site. To remove information for any of the parameters, specify an empty string.
    func updateSite(input: UpdateSiteInput, completion: @escaping (ClientRuntime.SdkResult<UpdateSiteOutputResponse, UpdateSiteOutputError>) -> Void)
    /// Updates a VPC attachment.
    func updateVpcAttachment(input: UpdateVpcAttachmentInput, completion: @escaping (ClientRuntime.SdkResult<UpdateVpcAttachmentOutputResponse, UpdateVpcAttachmentOutputError>) -> Void)
}

public enum NetworkManagerClientTypes {}
