// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension SesV2Client {
    /// Create a configuration set. Configuration sets are groups of
    ///             rules that you can apply to the emails that you send. You apply a configuration set to
    ///             an email by specifying the name of the configuration set when you call the Amazon SES API v2. When
    ///             you apply a configuration set to an email, all of the rules in that configuration set
    ///             are applied to the email.
    func createConfigurationSet(input: CreateConfigurationSetInput) async throws -> CreateConfigurationSetOutputResponse
    {
        typealias createConfigurationSetContinuation = CheckedContinuation<CreateConfigurationSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConfigurationSetContinuation) in
            createConfigurationSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create an event destination. Events include message sends,
    ///             deliveries, opens, clicks, bounces, and complaints. Event
    ///                 destinations are places that you can send information about these events
    ///             to. For example, you can send event data to Amazon SNS to receive notifications when you
    ///             receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term
    ///             storage.
    ///         A single configuration set can include more than one event destination.
    func createConfigurationSetEventDestination(input: CreateConfigurationSetEventDestinationInput) async throws -> CreateConfigurationSetEventDestinationOutputResponse
    {
        typealias createConfigurationSetEventDestinationContinuation = CheckedContinuation<CreateConfigurationSetEventDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConfigurationSetEventDestinationContinuation) in
            createConfigurationSetEventDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a contact, which is an end-user who is receiving the email, and adds them to a
    ///             contact list.
    func createContact(input: CreateContactInput) async throws -> CreateContactOutputResponse
    {
        typealias createContactContinuation = CheckedContinuation<CreateContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createContactContinuation) in
            createContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a contact list.
    func createContactList(input: CreateContactListInput) async throws -> CreateContactListOutputResponse
    {
        typealias createContactListContinuation = CheckedContinuation<CreateContactListOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createContactListContinuation) in
            createContactList(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new custom verification email template.
    ///         For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html">Using Custom Verification Email Templates in the Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func createCustomVerificationEmailTemplate(input: CreateCustomVerificationEmailTemplateInput) async throws -> CreateCustomVerificationEmailTemplateOutputResponse
    {
        typealias createCustomVerificationEmailTemplateContinuation = CheckedContinuation<CreateCustomVerificationEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCustomVerificationEmailTemplateContinuation) in
            createCustomVerificationEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a new pool of dedicated IP addresses. A pool can include one or more dedicated
    ///             IP addresses that are associated with your Amazon Web Services account. You can associate a pool with
    ///             a configuration set. When you send an email that uses that configuration set, the
    ///             message is sent from one of the addresses in the associated pool.
    func createDedicatedIpPool(input: CreateDedicatedIpPoolInput) async throws -> CreateDedicatedIpPoolOutputResponse
    {
        typealias createDedicatedIpPoolContinuation = CheckedContinuation<CreateDedicatedIpPoolOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDedicatedIpPoolContinuation) in
            createDedicatedIpPool(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a new predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled
    ///             by various email providers around the world. When you perform a predictive inbox placement test, you provide a
    ///             sample message that contains the content that you plan to send to your customers. Amazon SES
    ///             then sends that message to special email addresses spread across several major email
    ///             providers. After about 24 hours, the test is complete, and you can use the
    ///                 GetDeliverabilityTestReport operation to view the results of the
    ///             test.
    func createDeliverabilityTestReport(input: CreateDeliverabilityTestReportInput) async throws -> CreateDeliverabilityTestReportOutputResponse
    {
        typealias createDeliverabilityTestReportContinuation = CheckedContinuation<CreateDeliverabilityTestReportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDeliverabilityTestReportContinuation) in
            createDeliverabilityTestReport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts the process of verifying an email identity. An identity is
    ///             an email address or domain that you use when you send email. Before you can use an
    ///             identity to send email, you first have to verify it. By verifying an identity, you
    ///             demonstrate that you're the owner of the identity, and that you've given Amazon SES API v2
    ///             permission to send email from the identity.
    ///         When you verify an email address, Amazon SES sends an email to the address. Your email
    ///             address is verified as soon as you follow the link in the verification email.
    ///
    ///
    ///         When you verify a domain without specifying the DkimSigningAttributes
    ///             object, this operation provides a set of DKIM tokens. You can convert these tokens into
    ///             CNAME records, which you then add to the DNS configuration for your domain. Your domain
    ///             is verified when Amazon SES detects these records in the DNS configuration for your domain.
    ///             This verification method is known as <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM.
    ///         Alternatively, you can perform the verification process by providing your own
    ///             public-private key pair. This verification method is known as Bring Your Own DKIM
    ///             (BYODKIM). To use BYODKIM, your call to the CreateEmailIdentity operation
    ///             has to include the DkimSigningAttributes object. When you specify this
    ///             object, you provide a selector (a component of the DNS record name that identifies the
    ///             public key to use for DKIM authentication) and a private key.
    ///         When you verify a domain, this operation provides a set of DKIM tokens, which you can
    ///             convert into CNAME tokens. You add these CNAME tokens to the DNS configuration for your
    ///             domain. Your domain is verified when Amazon SES detects these records in the DNS
    ///             configuration for your domain. For some DNS providers, it can take 72 hours or more to
    ///             complete the domain verification process.
    ///         Additionally, you can associate an existing configuration set with the email identity that you're verifying.
    func createEmailIdentity(input: CreateEmailIdentityInput) async throws -> CreateEmailIdentityOutputResponse
    {
        typealias createEmailIdentityContinuation = CheckedContinuation<CreateEmailIdentityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEmailIdentityContinuation) in
            createEmailIdentity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates the specified sending authorization policy for the given identity (an email
    ///         address or a domain).
    ///
    ///             This API is for the identity owner only. If you have not verified the identity,
    ///                 this API will return an error.
    ///
    ///         Sending authorization is a feature that enables an identity owner to authorize other
    ///             senders to use its identities. For information about using sending authorization, see
    ///             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide.
    ///
    ///         You can execute this operation no more than once per second.
    func createEmailIdentityPolicy(input: CreateEmailIdentityPolicyInput) async throws -> CreateEmailIdentityPolicyOutputResponse
    {
        typealias createEmailIdentityPolicyContinuation = CheckedContinuation<CreateEmailIdentityPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEmailIdentityPolicyContinuation) in
            createEmailIdentityPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an email template. Email templates enable you to send personalized email to
    ///             one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func createEmailTemplate(input: CreateEmailTemplateInput) async throws -> CreateEmailTemplateOutputResponse
    {
        typealias createEmailTemplateContinuation = CheckedContinuation<CreateEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEmailTemplateContinuation) in
            createEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an import job for a data destination.
    func createImportJob(input: CreateImportJobInput) async throws -> CreateImportJobOutputResponse
    {
        typealias createImportJobContinuation = CheckedContinuation<CreateImportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createImportJobContinuation) in
            createImportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Delete an existing configuration set.
    ///
    ///             Configuration sets are groups of rules that you can apply to the
    ///             emails you send. You apply a configuration set to an email by including a reference to
    ///             the configuration set in the headers of the email. When you apply a configuration set to
    ///             an email, all of the rules in that configuration set are applied to the email.
    func deleteConfigurationSet(input: DeleteConfigurationSetInput) async throws -> DeleteConfigurationSetOutputResponse
    {
        typealias deleteConfigurationSetContinuation = CheckedContinuation<DeleteConfigurationSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConfigurationSetContinuation) in
            deleteConfigurationSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Delete an event destination.
    ///
    ///             Events include message sends, deliveries, opens, clicks, bounces,
    ///             and complaints. Event destinations are places that you can send
    ///             information about these events to. For example, you can send event data to Amazon SNS to
    ///             receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to
    ///             stream data to Amazon S3 for long-term storage.
    func deleteConfigurationSetEventDestination(input: DeleteConfigurationSetEventDestinationInput) async throws -> DeleteConfigurationSetEventDestinationOutputResponse
    {
        typealias deleteConfigurationSetEventDestinationContinuation = CheckedContinuation<DeleteConfigurationSetEventDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConfigurationSetEventDestinationContinuation) in
            deleteConfigurationSetEventDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a contact from a contact list.
    func deleteContact(input: DeleteContactInput) async throws -> DeleteContactOutputResponse
    {
        typealias deleteContactContinuation = CheckedContinuation<DeleteContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteContactContinuation) in
            deleteContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a contact list and all of the contacts on that list.
    func deleteContactList(input: DeleteContactListInput) async throws -> DeleteContactListOutputResponse
    {
        typealias deleteContactListContinuation = CheckedContinuation<DeleteContactListOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteContactListContinuation) in
            deleteContactList(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing custom verification email template.
    ///         For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html">Using Custom Verification Email Templates in the Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func deleteCustomVerificationEmailTemplate(input: DeleteCustomVerificationEmailTemplateInput) async throws -> DeleteCustomVerificationEmailTemplateOutputResponse
    {
        typealias deleteCustomVerificationEmailTemplateContinuation = CheckedContinuation<DeleteCustomVerificationEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCustomVerificationEmailTemplateContinuation) in
            deleteCustomVerificationEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Delete a dedicated IP pool.
    func deleteDedicatedIpPool(input: DeleteDedicatedIpPoolInput) async throws -> DeleteDedicatedIpPoolOutputResponse
    {
        typealias deleteDedicatedIpPoolContinuation = CheckedContinuation<DeleteDedicatedIpPoolOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDedicatedIpPoolContinuation) in
            deleteDedicatedIpPool(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an email identity. An identity can be either an email address or a domain
    ///             name.
    func deleteEmailIdentity(input: DeleteEmailIdentityInput) async throws -> DeleteEmailIdentityOutputResponse
    {
        typealias deleteEmailIdentityContinuation = CheckedContinuation<DeleteEmailIdentityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEmailIdentityContinuation) in
            deleteEmailIdentity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified sending authorization policy for the given identity (an email
    ///             address or a domain). This API returns successfully even if a policy with the specified
    ///             name does not exist.
    ///
    ///             This API is for the identity owner only. If you have not verified the identity,
    ///                 this API will return an error.
    ///
    ///         Sending authorization is a feature that enables an identity owner to authorize other
    ///             senders to use its identities. For information about using sending authorization, see
    ///             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide.
    ///
    ///         You can execute this operation no more than once per second.
    func deleteEmailIdentityPolicy(input: DeleteEmailIdentityPolicyInput) async throws -> DeleteEmailIdentityPolicyOutputResponse
    {
        typealias deleteEmailIdentityPolicyContinuation = CheckedContinuation<DeleteEmailIdentityPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEmailIdentityPolicyContinuation) in
            deleteEmailIdentityPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an email template.
    ///
    ///         You can execute this operation no more than once per second.
    func deleteEmailTemplate(input: DeleteEmailTemplateInput) async throws -> DeleteEmailTemplateOutputResponse
    {
        typealias deleteEmailTemplateContinuation = CheckedContinuation<DeleteEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEmailTemplateContinuation) in
            deleteEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes an email address from the suppression list for your account.
    func deleteSuppressedDestination(input: DeleteSuppressedDestinationInput) async throws -> DeleteSuppressedDestinationOutputResponse
    {
        typealias deleteSuppressedDestinationContinuation = CheckedContinuation<DeleteSuppressedDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSuppressedDestinationContinuation) in
            deleteSuppressedDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Obtain information about the email-sending status and capabilities of your Amazon SES
    ///             account in the current Amazon Web Services Region.
    func getAccount(input: GetAccountInput) async throws -> GetAccountOutputResponse
    {
        typealias getAccountContinuation = CheckedContinuation<GetAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAccountContinuation) in
            getAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve a list of the blacklists that your dedicated IP addresses appear on.
    func getBlacklistReports(input: GetBlacklistReportsInput) async throws -> GetBlacklistReportsOutputResponse
    {
        typealias getBlacklistReportsContinuation = CheckedContinuation<GetBlacklistReportsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBlacklistReportsContinuation) in
            getBlacklistReports(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get information about an existing configuration set, including the dedicated IP pool
    ///             that it's associated with, whether or not it's enabled for sending email, and
    ///             more.
    ///
    ///             Configuration sets are groups of rules that you can apply to the
    ///             emails you send. You apply a configuration set to an email by including a reference to
    ///             the configuration set in the headers of the email. When you apply a configuration set to
    ///             an email, all of the rules in that configuration set are applied to the email.
    func getConfigurationSet(input: GetConfigurationSetInput) async throws -> GetConfigurationSetOutputResponse
    {
        typealias getConfigurationSetContinuation = CheckedContinuation<GetConfigurationSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getConfigurationSetContinuation) in
            getConfigurationSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve a list of event destinations that are associated with a configuration
    ///             set.
    ///
    ///             Events include message sends, deliveries, opens, clicks, bounces,
    ///             and complaints. Event destinations are places that you can send
    ///             information about these events to. For example, you can send event data to Amazon SNS to
    ///             receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to
    ///             stream data to Amazon S3 for long-term storage.
    func getConfigurationSetEventDestinations(input: GetConfigurationSetEventDestinationsInput) async throws -> GetConfigurationSetEventDestinationsOutputResponse
    {
        typealias getConfigurationSetEventDestinationsContinuation = CheckedContinuation<GetConfigurationSetEventDestinationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getConfigurationSetEventDestinationsContinuation) in
            getConfigurationSetEventDestinations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a contact from a contact list.
    func getContact(input: GetContactInput) async throws -> GetContactOutputResponse
    {
        typealias getContactContinuation = CheckedContinuation<GetContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContactContinuation) in
            getContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns contact list metadata. It does not return any information about the contacts
    ///             present in the list.
    func getContactList(input: GetContactListInput) async throws -> GetContactListOutputResponse
    {
        typealias getContactListContinuation = CheckedContinuation<GetContactListOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContactListContinuation) in
            getContactList(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the custom email verification template for the template name you
    ///             specify.
    ///         For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html">Using Custom Verification Email Templates in the Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func getCustomVerificationEmailTemplate(input: GetCustomVerificationEmailTemplateInput) async throws -> GetCustomVerificationEmailTemplateOutputResponse
    {
        typealias getCustomVerificationEmailTemplateContinuation = CheckedContinuation<GetCustomVerificationEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCustomVerificationEmailTemplateContinuation) in
            getCustomVerificationEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get information about a dedicated IP address, including the name of the dedicated IP
    ///             pool that it's associated with, as well information about the automatic warm-up process
    ///             for the address.
    func getDedicatedIp(input: GetDedicatedIpInput) async throws -> GetDedicatedIpOutputResponse
    {
        typealias getDedicatedIpContinuation = CheckedContinuation<GetDedicatedIpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDedicatedIpContinuation) in
            getDedicatedIp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List the dedicated IP addresses that are associated with your Amazon Web Services
    ///             account.
    func getDedicatedIps(input: GetDedicatedIpsInput) async throws -> GetDedicatedIpsOutputResponse
    {
        typealias getDedicatedIpsContinuation = CheckedContinuation<GetDedicatedIpsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDedicatedIpsContinuation) in
            getDedicatedIps(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve information about the status of the Deliverability dashboard for your account. When
    ///             the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and other
    ///             metrics for the domains that you use to send email. You also gain the ability to perform
    ///             predictive inbox placement tests.
    ///
    ///         When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
    ///             to any other fees that you accrue by using Amazon SES and other Amazon Web Services services. For more
    ///             information about the features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/ses/pricing/">Amazon SES Pricing.
    func getDeliverabilityDashboardOptions(input: GetDeliverabilityDashboardOptionsInput) async throws -> GetDeliverabilityDashboardOptionsOutputResponse
    {
        typealias getDeliverabilityDashboardOptionsContinuation = CheckedContinuation<GetDeliverabilityDashboardOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeliverabilityDashboardOptionsContinuation) in
            getDeliverabilityDashboardOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve the results of a predictive inbox placement test.
    func getDeliverabilityTestReport(input: GetDeliverabilityTestReportInput) async throws -> GetDeliverabilityTestReportOutputResponse
    {
        typealias getDeliverabilityTestReportContinuation = CheckedContinuation<GetDeliverabilityTestReportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeliverabilityTestReportContinuation) in
            getDeliverabilityTestReport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve all the deliverability data for a specific campaign. This data is available
    ///             for a campaign only if the campaign sent email by using a domain that the
    ///             Deliverability dashboard is enabled for.
    func getDomainDeliverabilityCampaign(input: GetDomainDeliverabilityCampaignInput) async throws -> GetDomainDeliverabilityCampaignOutputResponse
    {
        typealias getDomainDeliverabilityCampaignContinuation = CheckedContinuation<GetDomainDeliverabilityCampaignOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDomainDeliverabilityCampaignContinuation) in
            getDomainDeliverabilityCampaign(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve inbox placement and engagement rates for the domains that you use to send
    ///             email.
    func getDomainStatisticsReport(input: GetDomainStatisticsReportInput) async throws -> GetDomainStatisticsReportOutputResponse
    {
        typealias getDomainStatisticsReportContinuation = CheckedContinuation<GetDomainStatisticsReportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDomainStatisticsReportContinuation) in
            getDomainStatisticsReport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides information about a specific identity, including the identity's verification
    ///             status, sending authorization policies, its DKIM authentication status, and its custom
    ///             Mail-From settings.
    func getEmailIdentity(input: GetEmailIdentityInput) async throws -> GetEmailIdentityOutputResponse
    {
        typealias getEmailIdentityContinuation = CheckedContinuation<GetEmailIdentityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEmailIdentityContinuation) in
            getEmailIdentity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the requested sending authorization policies for the given identity (an email
    ///             address or a domain). The policies are returned as a map of policy names to policy
    ///             contents. You can retrieve a maximum of 20 policies at a time.
    ///
    ///             This API is for the identity owner only. If you have not verified the identity,
    ///                 this API will return an error.
    ///
    ///         Sending authorization is a feature that enables an identity owner to authorize other
    ///             senders to use its identities. For information about using sending authorization, see
    ///             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func getEmailIdentityPolicies(input: GetEmailIdentityPoliciesInput) async throws -> GetEmailIdentityPoliciesOutputResponse
    {
        typealias getEmailIdentityPoliciesContinuation = CheckedContinuation<GetEmailIdentityPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEmailIdentityPoliciesContinuation) in
            getEmailIdentityPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Displays the template object (which includes the subject line, HTML part and text
    ///             part) for the template you specify.
    ///
    ///         You can execute this operation no more than once per second.
    func getEmailTemplate(input: GetEmailTemplateInput) async throws -> GetEmailTemplateOutputResponse
    {
        typealias getEmailTemplateContinuation = CheckedContinuation<GetEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEmailTemplateContinuation) in
            getEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides information about an import job.
    func getImportJob(input: GetImportJobInput) async throws -> GetImportJobOutputResponse
    {
        typealias getImportJobContinuation = CheckedContinuation<GetImportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getImportJobContinuation) in
            getImportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about a specific email address that's on the suppression list
    ///             for your account.
    func getSuppressedDestination(input: GetSuppressedDestinationInput) async throws -> GetSuppressedDestinationOutputResponse
    {
        typealias getSuppressedDestinationContinuation = CheckedContinuation<GetSuppressedDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSuppressedDestinationContinuation) in
            getSuppressedDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List all of the configuration sets associated with your account in the current
    ///             region.
    ///
    ///             Configuration sets are groups of rules that you can apply to the
    ///             emails you send. You apply a configuration set to an email by including a reference to
    ///             the configuration set in the headers of the email. When you apply a configuration set to
    ///             an email, all of the rules in that configuration set are applied to the email.
    func listConfigurationSets(input: ListConfigurationSetsInput) async throws -> ListConfigurationSetsOutputResponse
    {
        typealias listConfigurationSetsContinuation = CheckedContinuation<ListConfigurationSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listConfigurationSetsContinuation) in
            listConfigurationSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all of the contact lists available.
    func listContactLists(input: ListContactListsInput) async throws -> ListContactListsOutputResponse
    {
        typealias listContactListsContinuation = CheckedContinuation<ListContactListsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listContactListsContinuation) in
            listContactLists(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the contacts present in a specific contact list.
    func listContacts(input: ListContactsInput) async throws -> ListContactsOutputResponse
    {
        typealias listContactsContinuation = CheckedContinuation<ListContactsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listContactsContinuation) in
            listContacts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the existing custom verification email templates for your account in the current
    ///             Amazon Web Services Region.
    ///         For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html">Using Custom Verification Email Templates in the Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func listCustomVerificationEmailTemplates(input: ListCustomVerificationEmailTemplatesInput) async throws -> ListCustomVerificationEmailTemplatesOutputResponse
    {
        typealias listCustomVerificationEmailTemplatesContinuation = CheckedContinuation<ListCustomVerificationEmailTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCustomVerificationEmailTemplatesContinuation) in
            listCustomVerificationEmailTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List all of the dedicated IP pools that exist in your Amazon Web Services account in the current
    ///             Region.
    func listDedicatedIpPools(input: ListDedicatedIpPoolsInput) async throws -> ListDedicatedIpPoolsOutputResponse
    {
        typealias listDedicatedIpPoolsContinuation = CheckedContinuation<ListDedicatedIpPoolsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDedicatedIpPoolsContinuation) in
            listDedicatedIpPools(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Show a list of the predictive inbox placement tests that you've performed, regardless of their statuses. For
    ///             predictive inbox placement tests that are complete, you can use the GetDeliverabilityTestReport
    ///             operation to view the results.
    func listDeliverabilityTestReports(input: ListDeliverabilityTestReportsInput) async throws -> ListDeliverabilityTestReportsOutputResponse
    {
        typealias listDeliverabilityTestReportsContinuation = CheckedContinuation<ListDeliverabilityTestReportsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDeliverabilityTestReportsContinuation) in
            listDeliverabilityTestReports(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve deliverability data for all the campaigns that used a specific domain to send
    ///             email during a specified time range. This data is available for a domain only if you
    ///             enabled the Deliverability dashboard for the domain.
    func listDomainDeliverabilityCampaigns(input: ListDomainDeliverabilityCampaignsInput) async throws -> ListDomainDeliverabilityCampaignsOutputResponse
    {
        typealias listDomainDeliverabilityCampaignsContinuation = CheckedContinuation<ListDomainDeliverabilityCampaignsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDomainDeliverabilityCampaignsContinuation) in
            listDomainDeliverabilityCampaigns(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of all of the email identities that are associated with your Amazon Web Services
    ///             account. An identity can be either an email address or a domain. This operation returns
    ///             identities that are verified as well as those that aren't. This operation returns
    ///             identities that are associated with Amazon SES and Amazon Pinpoint.
    func listEmailIdentities(input: ListEmailIdentitiesInput) async throws -> ListEmailIdentitiesOutputResponse
    {
        typealias listEmailIdentitiesContinuation = CheckedContinuation<ListEmailIdentitiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEmailIdentitiesContinuation) in
            listEmailIdentities(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the email templates present in your Amazon SES account in the current Amazon Web Services
    ///             Region.
    ///
    ///         You can execute this operation no more than once per second.
    func listEmailTemplates(input: ListEmailTemplatesInput) async throws -> ListEmailTemplatesOutputResponse
    {
        typealias listEmailTemplatesContinuation = CheckedContinuation<ListEmailTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEmailTemplatesContinuation) in
            listEmailTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all of the import jobs.
    func listImportJobs(input: ListImportJobsInput) async throws -> ListImportJobsOutputResponse
    {
        typealias listImportJobsContinuation = CheckedContinuation<ListImportJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listImportJobsContinuation) in
            listImportJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of email addresses that are on the suppression list for your
    ///             account.
    func listSuppressedDestinations(input: ListSuppressedDestinationsInput) async throws -> ListSuppressedDestinationsOutputResponse
    {
        typealias listSuppressedDestinationsContinuation = CheckedContinuation<ListSuppressedDestinationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSuppressedDestinationsContinuation) in
            listSuppressedDestinations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve a list of the tags (keys and values) that are associated with a specified
    ///             resource. A tag is a label that you optionally define and associate
    ///             with a resource. Each tag consists of a required tag key and an
    ///             optional associated tag value. A tag key is a general label that
    ///             acts as a category for more specific tag values. A tag value acts as a descriptor within
    ///             a tag key.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enable or disable the automatic warm-up feature for dedicated IP addresses.
    func putAccountDedicatedIpWarmupAttributes(input: PutAccountDedicatedIpWarmupAttributesInput) async throws -> PutAccountDedicatedIpWarmupAttributesOutputResponse
    {
        typealias putAccountDedicatedIpWarmupAttributesContinuation = CheckedContinuation<PutAccountDedicatedIpWarmupAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putAccountDedicatedIpWarmupAttributesContinuation) in
            putAccountDedicatedIpWarmupAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update your Amazon SES account details.
    func putAccountDetails(input: PutAccountDetailsInput) async throws -> PutAccountDetailsOutputResponse
    {
        typealias putAccountDetailsContinuation = CheckedContinuation<PutAccountDetailsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putAccountDetailsContinuation) in
            putAccountDetails(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enable or disable the ability of your account to send email.
    func putAccountSendingAttributes(input: PutAccountSendingAttributesInput) async throws -> PutAccountSendingAttributesOutputResponse
    {
        typealias putAccountSendingAttributesContinuation = CheckedContinuation<PutAccountSendingAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putAccountSendingAttributesContinuation) in
            putAccountSendingAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Change the settings for the account-level suppression list.
    func putAccountSuppressionAttributes(input: PutAccountSuppressionAttributesInput) async throws -> PutAccountSuppressionAttributesOutputResponse
    {
        typealias putAccountSuppressionAttributesContinuation = CheckedContinuation<PutAccountSuppressionAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putAccountSuppressionAttributesContinuation) in
            putAccountSuppressionAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associate a configuration set with a dedicated IP pool. You can use dedicated IP pools
    ///             to create groups of dedicated IP addresses for sending specific types of email.
    func putConfigurationSetDeliveryOptions(input: PutConfigurationSetDeliveryOptionsInput) async throws -> PutConfigurationSetDeliveryOptionsOutputResponse
    {
        typealias putConfigurationSetDeliveryOptionsContinuation = CheckedContinuation<PutConfigurationSetDeliveryOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putConfigurationSetDeliveryOptionsContinuation) in
            putConfigurationSetDeliveryOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enable or disable collection of reputation metrics for emails that you send using a
    ///             particular configuration set in a specific Amazon Web Services Region.
    func putConfigurationSetReputationOptions(input: PutConfigurationSetReputationOptionsInput) async throws -> PutConfigurationSetReputationOptionsOutputResponse
    {
        typealias putConfigurationSetReputationOptionsContinuation = CheckedContinuation<PutConfigurationSetReputationOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putConfigurationSetReputationOptionsContinuation) in
            putConfigurationSetReputationOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enable or disable email sending for messages that use a particular configuration set
    ///             in a specific Amazon Web Services Region.
    func putConfigurationSetSendingOptions(input: PutConfigurationSetSendingOptionsInput) async throws -> PutConfigurationSetSendingOptionsOutputResponse
    {
        typealias putConfigurationSetSendingOptionsContinuation = CheckedContinuation<PutConfigurationSetSendingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putConfigurationSetSendingOptionsContinuation) in
            putConfigurationSetSendingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Specify the account suppression list preferences for a configuration set.
    func putConfigurationSetSuppressionOptions(input: PutConfigurationSetSuppressionOptionsInput) async throws -> PutConfigurationSetSuppressionOptionsOutputResponse
    {
        typealias putConfigurationSetSuppressionOptionsContinuation = CheckedContinuation<PutConfigurationSetSuppressionOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putConfigurationSetSuppressionOptionsContinuation) in
            putConfigurationSetSuppressionOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Specify a custom domain to use for open and click tracking elements in email that you
    ///             send.
    func putConfigurationSetTrackingOptions(input: PutConfigurationSetTrackingOptionsInput) async throws -> PutConfigurationSetTrackingOptionsOutputResponse
    {
        typealias putConfigurationSetTrackingOptionsContinuation = CheckedContinuation<PutConfigurationSetTrackingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putConfigurationSetTrackingOptionsContinuation) in
            putConfigurationSetTrackingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Move a dedicated IP address to an existing dedicated IP pool.
    ///
    ///             The dedicated IP address that you specify must already exist, and must be
    ///                 associated with your Amazon Web Services account.
    ///
    ///
    ///             The dedicated IP pool you specify must already exist. You can create a new pool by
    ///                 using the CreateDedicatedIpPool operation.
    ///
    ///
    func putDedicatedIpInPool(input: PutDedicatedIpInPoolInput) async throws -> PutDedicatedIpInPoolOutputResponse
    {
        typealias putDedicatedIpInPoolContinuation = CheckedContinuation<PutDedicatedIpInPoolOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putDedicatedIpInPoolContinuation) in
            putDedicatedIpInPool(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    func putDedicatedIpWarmupAttributes(input: PutDedicatedIpWarmupAttributesInput) async throws -> PutDedicatedIpWarmupAttributesOutputResponse
    {
        typealias putDedicatedIpWarmupAttributesContinuation = CheckedContinuation<PutDedicatedIpWarmupAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putDedicatedIpWarmupAttributesContinuation) in
            putDedicatedIpWarmupAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enable or disable the Deliverability dashboard. When you enable the Deliverability dashboard, you gain
    ///             access to reputation, deliverability, and other metrics for the domains that you use to
    ///             send email. You also gain the ability to perform predictive inbox placement tests.
    ///
    ///         When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
    ///             to any other fees that you accrue by using Amazon SES and other Amazon Web Services services. For more
    ///             information about the features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/ses/pricing/">Amazon SES Pricing.
    func putDeliverabilityDashboardOption(input: PutDeliverabilityDashboardOptionInput) async throws -> PutDeliverabilityDashboardOptionOutputResponse
    {
        typealias putDeliverabilityDashboardOptionContinuation = CheckedContinuation<PutDeliverabilityDashboardOptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putDeliverabilityDashboardOptionContinuation) in
            putDeliverabilityDashboardOption(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used to associate a configuration set with an email identity.
    func putEmailIdentityConfigurationSetAttributes(input: PutEmailIdentityConfigurationSetAttributesInput) async throws -> PutEmailIdentityConfigurationSetAttributesOutputResponse
    {
        typealias putEmailIdentityConfigurationSetAttributesContinuation = CheckedContinuation<PutEmailIdentityConfigurationSetAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putEmailIdentityConfigurationSetAttributesContinuation) in
            putEmailIdentityConfigurationSetAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used to enable or disable DKIM authentication for an email identity.
    func putEmailIdentityDkimAttributes(input: PutEmailIdentityDkimAttributesInput) async throws -> PutEmailIdentityDkimAttributesOutputResponse
    {
        typealias putEmailIdentityDkimAttributesContinuation = CheckedContinuation<PutEmailIdentityDkimAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putEmailIdentityDkimAttributesContinuation) in
            putEmailIdentityDkimAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used to configure or change the DKIM authentication settings for an email domain
    ///             identity. You can use this operation to do any of the following:
    ///
    ///
    ///                 Update the signing attributes for an identity that uses Bring Your Own DKIM
    ///                     (BYODKIM).
    ///
    ///
    ///                 Update the key length that should be used for Easy DKIM.
    ///
    ///
    ///                 Change from using no DKIM authentication to using Easy DKIM.
    ///
    ///
    ///                 Change from using no DKIM authentication to using BYODKIM.
    ///
    ///
    ///                 Change from using Easy DKIM to using BYODKIM.
    ///
    ///
    ///                 Change from using BYODKIM to using Easy DKIM.
    ///
    ///
    func putEmailIdentityDkimSigningAttributes(input: PutEmailIdentityDkimSigningAttributesInput) async throws -> PutEmailIdentityDkimSigningAttributesOutputResponse
    {
        typealias putEmailIdentityDkimSigningAttributesContinuation = CheckedContinuation<PutEmailIdentityDkimSigningAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putEmailIdentityDkimSigningAttributesContinuation) in
            putEmailIdentityDkimSigningAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used to enable or disable feedback forwarding for an identity. This setting determines
    ///             what happens when an identity is used to send an email that results in a bounce or
    ///             complaint event.
    ///         If the value is true, you receive email notifications when bounce or
    ///             complaint events occur. These notifications are sent to the address that you specified
    ///             in the Return-Path header of the original email.
    ///         You're required to have a method of tracking bounces and complaints. If you haven't
    ///             set up another mechanism for receiving bounce or complaint notifications (for example,
    ///             by setting up an event destination), you receive an email notification when these events
    ///             occur (even if this setting is disabled).
    func putEmailIdentityFeedbackAttributes(input: PutEmailIdentityFeedbackAttributesInput) async throws -> PutEmailIdentityFeedbackAttributesOutputResponse
    {
        typealias putEmailIdentityFeedbackAttributesContinuation = CheckedContinuation<PutEmailIdentityFeedbackAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putEmailIdentityFeedbackAttributesContinuation) in
            putEmailIdentityFeedbackAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used to enable or disable the custom Mail-From domain configuration for an email
    ///             identity.
    func putEmailIdentityMailFromAttributes(input: PutEmailIdentityMailFromAttributesInput) async throws -> PutEmailIdentityMailFromAttributesOutputResponse
    {
        typealias putEmailIdentityMailFromAttributesContinuation = CheckedContinuation<PutEmailIdentityMailFromAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putEmailIdentityMailFromAttributesContinuation) in
            putEmailIdentityMailFromAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds an email address to the suppression list for your account.
    func putSuppressedDestination(input: PutSuppressedDestinationInput) async throws -> PutSuppressedDestinationOutputResponse
    {
        typealias putSuppressedDestinationContinuation = CheckedContinuation<PutSuppressedDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putSuppressedDestinationContinuation) in
            putSuppressedDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Composes an email message to multiple destinations.
    func sendBulkEmail(input: SendBulkEmailInput) async throws -> SendBulkEmailOutputResponse
    {
        typealias sendBulkEmailContinuation = CheckedContinuation<SendBulkEmailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendBulkEmailContinuation) in
            sendBulkEmail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds an email address to the list of identities for your Amazon SES account in the current
    ///             Amazon Web Services Region and attempts to verify it. As a result of executing this operation, a
    ///             customized verification email is sent to the specified address.
    ///         To use this operation, you must first create a custom verification email template. For
    ///             more information about creating and using custom verification email templates, see
    ///                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html">Using Custom Verification Email Templates in the Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func sendCustomVerificationEmail(input: SendCustomVerificationEmailInput) async throws -> SendCustomVerificationEmailOutputResponse
    {
        typealias sendCustomVerificationEmailContinuation = CheckedContinuation<SendCustomVerificationEmailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendCustomVerificationEmailContinuation) in
            sendCustomVerificationEmail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends an email message. You can use the Amazon SES API v2 to send the following types of
    ///             messages:
    ///
    ///
    ///
    ///                   Simple – A standard email message. When
    ///                     you create this type of message, you specify the sender, the recipient, and the
    ///                     message body, and Amazon SES assembles the message for you.
    ///
    ///
    ///
    ///                   Raw – A raw, MIME-formatted email
    ///                     message. When you send this type of email, you have to specify all of the
    ///                     message headers, as well as the message body. You can use this message type to
    ///                     send messages that contain attachments. The message that you specify has to be a
    ///                     valid MIME message.
    ///
    ///
    ///
    ///                   Templated – A message that contains
    ///                     personalization tags. When you send this type of email, Amazon SES API v2 automatically
    ///                     replaces the tags with values that you specify.
    ///
    ///
    func sendEmail(input: SendEmailInput) async throws -> SendEmailOutputResponse
    {
        typealias sendEmailContinuation = CheckedContinuation<SendEmailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendEmailContinuation) in
            sendEmail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Add one or more tags (keys and values) to a specified resource. A
    ///                 tag is a label that you optionally define and associate with a
    ///             resource. Tags can help you categorize and manage resources in different ways, such as
    ///             by purpose, owner, environment, or other criteria. A resource can have as many as 50
    ///             tags.
    ///         Each tag consists of a required tag key and an
    ///                 associated tag value, both of which you define. A tag key is a
    ///             general label that acts as a category for more specific tag values. A tag value acts as
    ///             a descriptor within a tag key.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a preview of the MIME content of an email when provided with a template and a
    ///             set of replacement data.
    ///
    ///         You can execute this operation no more than once per second.
    func testRenderEmailTemplate(input: TestRenderEmailTemplateInput) async throws -> TestRenderEmailTemplateOutputResponse
    {
        typealias testRenderEmailTemplateContinuation = CheckedContinuation<TestRenderEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testRenderEmailTemplateContinuation) in
            testRenderEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Remove one or more tags (keys and values) from a specified resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update the configuration of an event destination for a configuration set.
    ///
    ///             Events include message sends, deliveries, opens, clicks, bounces,
    ///             and complaints. Event destinations are places that you can send
    ///             information about these events to. For example, you can send event data to Amazon SNS to
    ///             receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to
    ///             stream data to Amazon S3 for long-term storage.
    func updateConfigurationSetEventDestination(input: UpdateConfigurationSetEventDestinationInput) async throws -> UpdateConfigurationSetEventDestinationOutputResponse
    {
        typealias updateConfigurationSetEventDestinationContinuation = CheckedContinuation<UpdateConfigurationSetEventDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConfigurationSetEventDestinationContinuation) in
            updateConfigurationSetEventDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a contact's preferences for a list. It is not necessary to specify all
    ///             existing topic preferences in the TopicPreferences object, just the ones that need
    ///             updating.
    func updateContact(input: UpdateContactInput) async throws -> UpdateContactOutputResponse
    {
        typealias updateContactContinuation = CheckedContinuation<UpdateContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateContactContinuation) in
            updateContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates contact list metadata. This operation does a complete replacement.
    func updateContactList(input: UpdateContactListInput) async throws -> UpdateContactListOutputResponse
    {
        typealias updateContactListContinuation = CheckedContinuation<UpdateContactListOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateContactListContinuation) in
            updateContactList(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing custom verification email template.
    ///         For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html">Using Custom Verification Email Templates in the Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func updateCustomVerificationEmailTemplate(input: UpdateCustomVerificationEmailTemplateInput) async throws -> UpdateCustomVerificationEmailTemplateOutputResponse
    {
        typealias updateCustomVerificationEmailTemplateContinuation = CheckedContinuation<UpdateCustomVerificationEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateCustomVerificationEmailTemplateContinuation) in
            updateCustomVerificationEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified sending authorization policy for the given identity (an email
    ///             address or a domain). This API returns successfully even if a policy with the specified
    ///             name does not exist.
    ///
    ///             This API is for the identity owner only. If you have not verified the identity,
    ///                 this API will return an error.
    ///
    ///         Sending authorization is a feature that enables an identity owner to authorize other
    ///             senders to use its identities. For information about using sending authorization, see
    ///             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
    ///                 Guide.
    ///
    ///         You can execute this operation no more than once per second.
    func updateEmailIdentityPolicy(input: UpdateEmailIdentityPolicyInput) async throws -> UpdateEmailIdentityPolicyOutputResponse
    {
        typealias updateEmailIdentityPolicyContinuation = CheckedContinuation<UpdateEmailIdentityPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEmailIdentityPolicyContinuation) in
            updateEmailIdentityPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an email template. Email templates enable you to send personalized email to
    ///             one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
    ///                 Guide.
    ///         You can execute this operation no more than once per second.
    func updateEmailTemplate(input: UpdateEmailTemplateInput) async throws -> UpdateEmailTemplateOutputResponse
    {
        typealias updateEmailTemplateContinuation = CheckedContinuation<UpdateEmailTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEmailTemplateContinuation) in
            updateEmailTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
