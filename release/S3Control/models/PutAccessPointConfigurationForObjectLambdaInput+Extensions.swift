// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutAccessPointConfigurationForObjectLambdaInputHeadersMiddleware: Middleware {
    public let id: String = "PutAccessPointConfigurationForObjectLambdaInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutAccessPointConfigurationForObjectLambdaInput>,
                  next: H) -> Swift.Result<OperationOutput<PutAccessPointConfigurationForObjectLambdaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let accountId = input.operationInput.accountId {
            input.builder.withHeader(name: "x-amz-account-id", value: String(accountId))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutAccessPointConfigurationForObjectLambdaInput>
    public typealias MOutput = OperationOutput<PutAccessPointConfigurationForObjectLambdaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutAccessPointConfigurationForObjectLambdaOutputError>
}

public struct PutAccessPointConfigurationForObjectLambdaInputQueryItemMiddleware: Middleware {
    public let id: String = "PutAccessPointConfigurationForObjectLambdaInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutAccessPointConfigurationForObjectLambdaInput>,
                  next: H) -> Swift.Result<OperationOutput<PutAccessPointConfigurationForObjectLambdaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutAccessPointConfigurationForObjectLambdaInput>
    public typealias MOutput = OperationOutput<PutAccessPointConfigurationForObjectLambdaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutAccessPointConfigurationForObjectLambdaOutputError>
}

public struct PutAccessPointConfigurationForObjectLambdaInputBodyMiddleware: Middleware {
    public let id: String = "PutAccessPointConfigurationForObjectLambdaInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutAccessPointConfigurationForObjectLambdaInput>,
                  next: H) -> Swift.Result<OperationOutput<PutAccessPointConfigurationForObjectLambdaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutAccessPointConfigurationForObjectLambdaInput>
    public typealias MOutput = OperationOutput<PutAccessPointConfigurationForObjectLambdaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutAccessPointConfigurationForObjectLambdaOutputError>
}

extension PutAccessPointConfigurationForObjectLambdaInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configuration = "Configuration"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: Key("xmlns"))
        }
        if let configuration = configuration {
            try container.encode(configuration, forKey: Key("configuration"))
        }
    }
}
