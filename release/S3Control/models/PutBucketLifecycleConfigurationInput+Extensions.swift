// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutBucketLifecycleConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "PutBucketLifecycleConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutBucketLifecycleConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutBucketLifecycleConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let accountId = input.operationInput.accountId {
            input.builder.withHeader(name: "x-amz-account-id", value: String(accountId))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutBucketLifecycleConfigurationInput>
    public typealias MOutput = OperationOutput<PutBucketLifecycleConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutBucketLifecycleConfigurationOutputError>
}

public struct PutBucketLifecycleConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "PutBucketLifecycleConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutBucketLifecycleConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutBucketLifecycleConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutBucketLifecycleConfigurationInput>
    public typealias MOutput = OperationOutput<PutBucketLifecycleConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutBucketLifecycleConfigurationOutputError>
}

public struct PutBucketLifecycleConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "PutBucketLifecycleConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutBucketLifecycleConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutBucketLifecycleConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let lifecycleConfiguration = input.operationInput.lifecycleConfiguration {
            do {
                let encoder = context.getEncoder()
                let data = try encoder.encode(lifecycleConfiguration)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutBucketLifecycleConfigurationInput>
    public typealias MOutput = OperationOutput<PutBucketLifecycleConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutBucketLifecycleConfigurationOutputError>
}

extension PutBucketLifecycleConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case lifecycleConfiguration = "LifecycleConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: Key("xmlns"))
        }
        if let lifecycleConfiguration = lifecycleConfiguration {
            try container.encode(lifecycleConfiguration, forKey: Key("LifecycleConfiguration"))
        }
    }
}
