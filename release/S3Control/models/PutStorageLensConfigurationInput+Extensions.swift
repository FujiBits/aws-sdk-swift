// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutStorageLensConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "PutStorageLensConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutStorageLensConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutStorageLensConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let accountId = input.operationInput.accountId {
            input.builder.withHeader(name: "x-amz-account-id", value: String(accountId))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutStorageLensConfigurationInput>
    public typealias MOutput = OperationOutput<PutStorageLensConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutStorageLensConfigurationOutputError>
}

public struct PutStorageLensConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "PutStorageLensConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutStorageLensConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutStorageLensConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutStorageLensConfigurationInput>
    public typealias MOutput = OperationOutput<PutStorageLensConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutStorageLensConfigurationOutputError>
}

public struct PutStorageLensConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "PutStorageLensConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutStorageLensConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutStorageLensConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutStorageLensConfigurationInput>
    public typealias MOutput = OperationOutput<PutStorageLensConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutStorageLensConfigurationOutputError>
}

extension PutStorageLensConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case storageLensConfiguration = "StorageLensConfiguration"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: Key("xmlns"))
        }
        if let storageLensConfiguration = storageLensConfiguration {
            try container.encode(storageLensConfiguration, forKey: Key("storageLensConfiguration"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("tags"))
            for storagelenstag0 in tags {
                try tagsContainer.encode(storagelenstag0, forKey: Key("Tag"))
            }
        }
    }
}
