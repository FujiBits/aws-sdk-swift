// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateAccessPointInputHeadersMiddleware: Middleware {
    public let id: String = "CreateAccessPointInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAccessPointInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAccessPointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let accountId = input.operationInput.accountId {
            input.builder.withHeader(name: "x-amz-account-id", value: String(accountId))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAccessPointInput>
    public typealias MOutput = OperationOutput<CreateAccessPointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAccessPointOutputError>
}

public struct CreateAccessPointInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateAccessPointInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAccessPointInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAccessPointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAccessPointInput>
    public typealias MOutput = OperationOutput<CreateAccessPointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAccessPointOutputError>
}

public struct CreateAccessPointInputBodyMiddleware: Middleware {
    public let id: String = "CreateAccessPointInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAccessPointInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAccessPointOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAccessPointInput>
    public typealias MOutput = OperationOutput<CreateAccessPointOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAccessPointOutputError>
}

extension CreateAccessPointInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bucket = "Bucket"
        case publicAccessBlockConfiguration = "PublicAccessBlockConfiguration"
        case vpcConfiguration = "VpcConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: Key("xmlns"))
        }
        if let bucket = bucket {
            try container.encode(bucket, forKey: Key("bucket"))
        }
        if let publicAccessBlockConfiguration = publicAccessBlockConfiguration {
            try container.encode(publicAccessBlockConfiguration, forKey: Key("publicAccessBlockConfiguration"))
        }
        if let vpcConfiguration = vpcConfiguration {
            try container.encode(vpcConfiguration, forKey: Key("vpcConfiguration"))
        }
    }
}
