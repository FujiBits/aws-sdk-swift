// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension AmplifyBackendClient {
    /// This operation clones an existing backend.
    func cloneBackend(input: CloneBackendInput) async throws -> CloneBackendOutputResponse
    {
        typealias cloneBackendContinuation = CheckedContinuation<CloneBackendOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cloneBackendContinuation) in
            cloneBackend(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation creates a backend for an Amplify app. Backends are automatically created at the time of app creation.
    func createBackend(input: CreateBackendInput) async throws -> CreateBackendOutputResponse
    {
        typealias createBackendContinuation = CheckedContinuation<CreateBackendOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBackendContinuation) in
            createBackend(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new backend API resource.
    func createBackendAPI(input: CreateBackendAPIInput) async throws -> CreateBackendAPIOutputResponse
    {
        typealias createBackendAPIContinuation = CheckedContinuation<CreateBackendAPIOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBackendAPIContinuation) in
            createBackendAPI(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new backend authentication resource.
    func createBackendAuth(input: CreateBackendAuthInput) async throws -> CreateBackendAuthOutputResponse
    {
        typealias createBackendAuthContinuation = CheckedContinuation<CreateBackendAuthOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBackendAuthContinuation) in
            createBackendAuth(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a config object for a backend.
    func createBackendConfig(input: CreateBackendConfigInput) async throws -> CreateBackendConfigOutputResponse
    {
        typealias createBackendConfigContinuation = CheckedContinuation<CreateBackendConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBackendConfigContinuation) in
            createBackendConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a backend storage resource.
    func createBackendStorage(input: CreateBackendStorageInput) async throws -> CreateBackendStorageOutputResponse
    {
        typealias createBackendStorageContinuation = CheckedContinuation<CreateBackendStorageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBackendStorageContinuation) in
            createBackendStorage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Generates a one-time challenge code to authenticate a user into your Amplify Admin UI.
    func createToken(input: CreateTokenInput) async throws -> CreateTokenOutputResponse
    {
        typealias createTokenContinuation = CheckedContinuation<CreateTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTokenContinuation) in
            createToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes an existing environment from your Amplify project.
    func deleteBackend(input: DeleteBackendInput) async throws -> DeleteBackendOutputResponse
    {
        typealias deleteBackendContinuation = CheckedContinuation<DeleteBackendOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBackendContinuation) in
            deleteBackend(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing backend API resource.
    func deleteBackendAPI(input: DeleteBackendAPIInput) async throws -> DeleteBackendAPIOutputResponse
    {
        typealias deleteBackendAPIContinuation = CheckedContinuation<DeleteBackendAPIOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBackendAPIContinuation) in
            deleteBackendAPI(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing backend authentication resource.
    func deleteBackendAuth(input: DeleteBackendAuthInput) async throws -> DeleteBackendAuthOutputResponse
    {
        typealias deleteBackendAuthContinuation = CheckedContinuation<DeleteBackendAuthOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBackendAuthContinuation) in
            deleteBackendAuth(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified backend storage resource.
    func deleteBackendStorage(input: DeleteBackendStorageInput) async throws -> DeleteBackendStorageOutputResponse
    {
        typealias deleteBackendStorageContinuation = CheckedContinuation<DeleteBackendStorageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBackendStorageContinuation) in
            deleteBackendStorage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the challenge token based on the given appId and sessionId.
    func deleteToken(input: DeleteTokenInput) async throws -> DeleteTokenOutputResponse
    {
        typealias deleteTokenContinuation = CheckedContinuation<DeleteTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTokenContinuation) in
            deleteToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Generates a model schema for an existing backend API resource.
    func generateBackendAPIModels(input: GenerateBackendAPIModelsInput) async throws -> GenerateBackendAPIModelsOutputResponse
    {
        typealias generateBackendAPIModelsContinuation = CheckedContinuation<GenerateBackendAPIModelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: generateBackendAPIModelsContinuation) in
            generateBackendAPIModels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides project-level details for your Amplify UI project.
    func getBackend(input: GetBackendInput) async throws -> GetBackendOutputResponse
    {
        typealias getBackendContinuation = CheckedContinuation<GetBackendOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackendContinuation) in
            getBackend(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the details for a backend API.
    func getBackendAPI(input: GetBackendAPIInput) async throws -> GetBackendAPIOutputResponse
    {
        typealias getBackendAPIContinuation = CheckedContinuation<GetBackendAPIOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackendAPIContinuation) in
            getBackendAPI(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Generates a model schema for existing backend API resource.
    func getBackendAPIModels(input: GetBackendAPIModelsInput) async throws -> GetBackendAPIModelsOutputResponse
    {
        typealias getBackendAPIModelsContinuation = CheckedContinuation<GetBackendAPIModelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackendAPIModelsContinuation) in
            getBackendAPIModels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a backend auth details.
    func getBackendAuth(input: GetBackendAuthInput) async throws -> GetBackendAuthOutputResponse
    {
        typealias getBackendAuthContinuation = CheckedContinuation<GetBackendAuthOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackendAuthContinuation) in
            getBackendAuth(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a specific job.
    func getBackendJob(input: GetBackendJobInput) async throws -> GetBackendJobOutputResponse
    {
        typealias getBackendJobContinuation = CheckedContinuation<GetBackendJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackendJobContinuation) in
            getBackendJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets details for a backend storage resource.
    func getBackendStorage(input: GetBackendStorageInput) async throws -> GetBackendStorageOutputResponse
    {
        typealias getBackendStorageContinuation = CheckedContinuation<GetBackendStorageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackendStorageContinuation) in
            getBackendStorage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the challenge token based on the given appId and sessionId.
    func getToken(input: GetTokenInput) async throws -> GetTokenOutputResponse
    {
        typealias getTokenContinuation = CheckedContinuation<GetTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTokenContinuation) in
            getToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Imports an existing backend authentication resource.
    func importBackendAuth(input: ImportBackendAuthInput) async throws -> ImportBackendAuthOutputResponse
    {
        typealias importBackendAuthContinuation = CheckedContinuation<ImportBackendAuthOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importBackendAuthContinuation) in
            importBackendAuth(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Imports an existing backend storage resource.
    func importBackendStorage(input: ImportBackendStorageInput) async throws -> ImportBackendStorageOutputResponse
    {
        typealias importBackendStorageContinuation = CheckedContinuation<ImportBackendStorageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importBackendStorageContinuation) in
            importBackendStorage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the jobs for the backend of an Amplify app.
    func listBackendJobs(input: ListBackendJobsInput) async throws -> ListBackendJobsOutputResponse
    {
        typealias listBackendJobsContinuation = CheckedContinuation<ListBackendJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBackendJobsContinuation) in
            listBackendJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// The list of S3 buckets in your account.
    func listS3Buckets(input: ListS3BucketsInput) async throws -> ListS3BucketsOutputResponse
    {
        typealias listS3BucketsContinuation = CheckedContinuation<ListS3BucketsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listS3BucketsContinuation) in
            listS3Buckets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes all backend environments from your Amplify project.
    func removeAllBackends(input: RemoveAllBackendsInput) async throws -> RemoveAllBackendsOutputResponse
    {
        typealias removeAllBackendsContinuation = CheckedContinuation<RemoveAllBackendsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeAllBackendsContinuation) in
            removeAllBackends(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the AWS resources required to access the Amplify Admin UI.
    func removeBackendConfig(input: RemoveBackendConfigInput) async throws -> RemoveBackendConfigOutputResponse
    {
        typealias removeBackendConfigContinuation = CheckedContinuation<RemoveBackendConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeBackendConfigContinuation) in
            removeBackendConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing backend API resource.
    func updateBackendAPI(input: UpdateBackendAPIInput) async throws -> UpdateBackendAPIOutputResponse
    {
        typealias updateBackendAPIContinuation = CheckedContinuation<UpdateBackendAPIOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBackendAPIContinuation) in
            updateBackendAPI(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing backend authentication resource.
    func updateBackendAuth(input: UpdateBackendAuthInput) async throws -> UpdateBackendAuthOutputResponse
    {
        typealias updateBackendAuthContinuation = CheckedContinuation<UpdateBackendAuthOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBackendAuthContinuation) in
            updateBackendAuth(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the AWS resources required to access the Amplify Admin UI.
    func updateBackendConfig(input: UpdateBackendConfigInput) async throws -> UpdateBackendConfigOutputResponse
    {
        typealias updateBackendConfigContinuation = CheckedContinuation<UpdateBackendConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBackendConfigContinuation) in
            updateBackendConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a specific job.
    func updateBackendJob(input: UpdateBackendJobInput) async throws -> UpdateBackendJobOutputResponse
    {
        typealias updateBackendJobContinuation = CheckedContinuation<UpdateBackendJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBackendJobContinuation) in
            updateBackendJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing backend storage resource.
    func updateBackendStorage(input: UpdateBackendStorageInput) async throws -> UpdateBackendStorageOutputResponse
    {
        typealias updateBackendStorageContinuation = CheckedContinuation<UpdateBackendStorageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBackendStorageContinuation) in
            updateBackendStorage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
