// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension LexModelBuildingClient {
    /// Creates a new version of the bot based on the $LATEST
    ///       version. If the $LATEST version of this resource hasn't
    ///       changed since you created the last version, Amazon Lex doesn't create a new
    ///       version. It returns the last created version.
    ///
    ///             You can update only the $LATEST version of the bot.
    ///         You can't update the numbered versions that you create with the
    ///           CreateBotVersion operation.
    ///
    ///           When you create the first version of a bot, Amazon Lex sets the version
    ///       to 1. Subsequent versions increment by 1. For more information, see versioning-intro.
    ///           This operation requires permission for the
    ///         lex:CreateBotVersion action.
    func createBotVersion(input: CreateBotVersionInput) async throws -> CreateBotVersionOutputResponse
    {
        typealias createBotVersionContinuation = CheckedContinuation<CreateBotVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBotVersionContinuation) in
            createBotVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new version of an intent based on the
    ///         $LATEST version of the intent. If the $LATEST
    ///       version of this intent hasn't changed since you last updated it, Amazon Lex
    ///       doesn't create a new version. It returns the last version you
    ///       created.
    ///
    ///             You can update only the $LATEST version of the
    ///         intent. You can't update the numbered versions that you create with the
    ///           CreateIntentVersion operation.
    ///
    ///           When you create a version of an intent, Amazon Lex sets the version to
    ///       1. Subsequent versions increment by 1. For more information, see versioning-intro.
    ///          This operation requires permissions to perform the
    ///         lex:CreateIntentVersion action.
    func createIntentVersion(input: CreateIntentVersionInput) async throws -> CreateIntentVersionOutputResponse
    {
        typealias createIntentVersionContinuation = CheckedContinuation<CreateIntentVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createIntentVersionContinuation) in
            createIntentVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new version of a slot type based on the
    ///         $LATEST version of the specified slot type. If the
    ///         $LATEST version of this resource has not changed since the
    ///       last version that you created, Amazon Lex doesn't create a new version. It
    ///       returns the last version that you created.
    ///
    ///             You can update only the $LATEST version of a slot
    ///         type. You can't update the numbered versions that you create with the
    ///           CreateSlotTypeVersion operation.
    ///
    ///
    ///          When you create a version of a slot type, Amazon Lex sets the version to
    ///       1. Subsequent versions increment by 1. For more information, see versioning-intro.
    ///
    ///          This operation requires permissions for the
    ///         lex:CreateSlotTypeVersion action.
    func createSlotTypeVersion(input: CreateSlotTypeVersionInput) async throws -> CreateSlotTypeVersionOutputResponse
    {
        typealias createSlotTypeVersionContinuation = CheckedContinuation<CreateSlotTypeVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSlotTypeVersionContinuation) in
            createSlotTypeVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes all versions of the bot, including the $LATEST
    ///       version. To delete a specific version of the bot, use the DeleteBotVersion operation. The DeleteBot
    ///       operation doesn't immediately remove the bot schema. Instead, it is marked
    ///       for deletion and removed later.
    ///          Amazon Lex stores utterances indefinitely for improving the ability of
    ///       your bot to respond to user inputs. These utterances are not removed when
    ///       the bot is deleted. To remove the utterances, use the DeleteUtterances operation.
    ///          If a bot has an alias, you can't delete it. Instead, the
    ///         DeleteBot operation returns a
    ///         ResourceInUseException exception that includes a reference
    ///       to the alias that refers to the bot. To remove the reference to the bot,
    ///       delete the alias. If you get the same exception again, delete the
    ///       referring alias until the DeleteBot operation is
    ///       successful.
    ///
    ///          This operation requires permissions for the
    ///         lex:DeleteBot action.
    func deleteBot(input: DeleteBotInput) async throws -> DeleteBotOutputResponse
    {
        typealias deleteBotContinuation = CheckedContinuation<DeleteBotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBotContinuation) in
            deleteBot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an alias for the specified bot.
    ///          You can't delete an alias that is used in the association between a
    ///       bot and a messaging channel. If an alias is used in a channel association,
    ///       the DeleteBot operation returns a
    ///         ResourceInUseException exception that includes a reference
    ///       to the channel association that refers to the bot. You can remove the
    ///       reference to the alias by deleting the channel association. If you get the
    ///       same exception again, delete the referring association until the
    ///         DeleteBotAlias operation is successful.
    func deleteBotAlias(input: DeleteBotAliasInput) async throws -> DeleteBotAliasOutputResponse
    {
        typealias deleteBotAliasContinuation = CheckedContinuation<DeleteBotAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBotAliasContinuation) in
            deleteBotAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the association between an Amazon Lex bot and a messaging
    ///       platform.
    ///          This operation requires permission for the
    ///         lex:DeleteBotChannelAssociation action.
    func deleteBotChannelAssociation(input: DeleteBotChannelAssociationInput) async throws -> DeleteBotChannelAssociationOutputResponse
    {
        typealias deleteBotChannelAssociationContinuation = CheckedContinuation<DeleteBotChannelAssociationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBotChannelAssociationContinuation) in
            deleteBotChannelAssociation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a specific version of a bot. To delete all versions of a
    ///       bot, use the DeleteBot operation.
    ///          This operation requires permissions for the
    ///         lex:DeleteBotVersion action.
    func deleteBotVersion(input: DeleteBotVersionInput) async throws -> DeleteBotVersionOutputResponse
    {
        typealias deleteBotVersionContinuation = CheckedContinuation<DeleteBotVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBotVersionContinuation) in
            deleteBotVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes all versions of the intent, including the
    ///         $LATEST version. To delete a specific version of the
    ///       intent, use the DeleteIntentVersion operation.
    ///           You can delete a version of an intent only if it is not
    ///       referenced. To delete an intent that is referred to in one or more bots
    ///       (see how-it-works), you must remove those references
    ///       first.
    ///
    ///              If you get the ResourceInUseException exception, it
    ///         provides an example reference that shows where the intent is referenced.
    ///         To remove the reference to the intent, either update the bot or delete
    ///         it. If you get the same exception when you attempt to delete the intent
    ///         again, repeat until the intent has no references and the call to
    ///           DeleteIntent is successful.
    ///
    ///
    ///           This operation requires permission for the
    ///         lex:DeleteIntent action.
    func deleteIntent(input: DeleteIntentInput) async throws -> DeleteIntentOutputResponse
    {
        typealias deleteIntentContinuation = CheckedContinuation<DeleteIntentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIntentContinuation) in
            deleteIntent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a specific version of an intent. To delete all versions of
    ///       a intent, use the DeleteIntent operation.
    ///          This operation requires permissions for the
    ///         lex:DeleteIntentVersion action.
    func deleteIntentVersion(input: DeleteIntentVersionInput) async throws -> DeleteIntentVersionOutputResponse
    {
        typealias deleteIntentVersionContinuation = CheckedContinuation<DeleteIntentVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIntentVersionContinuation) in
            deleteIntentVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes all versions of the slot type, including the
    ///         $LATEST version. To delete a specific version of the slot
    ///       type, use the DeleteSlotTypeVersion operation.
    ///           You can delete a version of a slot type only if it is not
    ///       referenced. To delete a slot type that is referred to in one or more
    ///       intents, you must remove those references first.
    ///
    ///              If you get the ResourceInUseException exception,
    ///         the exception provides an example reference that shows the intent where
    ///         the slot type is referenced. To remove the reference to the slot type,
    ///         either update the intent or delete it. If you get the same exception
    ///         when you attempt to delete the slot type again, repeat until the slot
    ///         type has no references and the DeleteSlotType call is
    ///         successful.
    ///
    ///          This operation requires permission for the
    ///         lex:DeleteSlotType action.
    func deleteSlotType(input: DeleteSlotTypeInput) async throws -> DeleteSlotTypeOutputResponse
    {
        typealias deleteSlotTypeContinuation = CheckedContinuation<DeleteSlotTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSlotTypeContinuation) in
            deleteSlotType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a specific version of a slot type. To delete all versions
    ///       of a slot type, use the DeleteSlotType operation.
    ///          This operation requires permissions for the
    ///         lex:DeleteSlotTypeVersion action.
    func deleteSlotTypeVersion(input: DeleteSlotTypeVersionInput) async throws -> DeleteSlotTypeVersionOutputResponse
    {
        typealias deleteSlotTypeVersionContinuation = CheckedContinuation<DeleteSlotTypeVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSlotTypeVersionContinuation) in
            deleteSlotTypeVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes stored utterances.
    ///          Amazon Lex stores the utterances that users send to your bot. Utterances
    ///       are stored for 15 days for use with the GetUtterancesView operation, and then stored indefinitely for use in improving the
    ///       ability of your bot to respond to user input.
    ///          Use the DeleteUtterances operation to manually delete
    ///       stored utterances for a specific user. When you use the
    ///         DeleteUtterances operation, utterances stored for improving
    ///       your bot's ability to respond to user input are deleted immediately.
    ///       Utterances stored for use with the GetUtterancesView
    ///       operation are deleted after 15 days.
    ///          This operation requires permissions for the
    ///         lex:DeleteUtterances action.
    func deleteUtterances(input: DeleteUtterancesInput) async throws -> DeleteUtterancesOutputResponse
    {
        typealias deleteUtterancesContinuation = CheckedContinuation<DeleteUtterancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUtterancesContinuation) in
            deleteUtterances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns metadata information for a specific bot. You must provide
    ///       the bot name and the bot version or alias.
    ///           This operation requires permissions for the
    ///         lex:GetBot action.
    func getBot(input: GetBotInput) async throws -> GetBotOutputResponse
    {
        typealias getBotContinuation = CheckedContinuation<GetBotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBotContinuation) in
            getBot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about an Amazon Lex bot alias. For more information
    ///       about aliases, see versioning-aliases.
    ///          This operation requires permissions for the
    ///         lex:GetBotAlias action.
    func getBotAlias(input: GetBotAliasInput) async throws -> GetBotAliasOutputResponse
    {
        typealias getBotAliasContinuation = CheckedContinuation<GetBotAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBotAliasContinuation) in
            getBotAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of aliases for a specified Amazon Lex bot.
    ///          This operation requires permissions for the
    ///         lex:GetBotAliases action.
    func getBotAliases(input: GetBotAliasesInput) async throws -> GetBotAliasesOutputResponse
    {
        typealias getBotAliasesContinuation = CheckedContinuation<GetBotAliasesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBotAliasesContinuation) in
            getBotAliases(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the association between an Amazon Lex bot and
    ///       a messaging platform.
    ///          This operation requires permissions for the
    ///         lex:GetBotChannelAssociation action.
    func getBotChannelAssociation(input: GetBotChannelAssociationInput) async throws -> GetBotChannelAssociationOutputResponse
    {
        typealias getBotChannelAssociationContinuation = CheckedContinuation<GetBotChannelAssociationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBotChannelAssociationContinuation) in
            getBotChannelAssociation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///  Returns a list of all of the channels associated with the
    ///       specified bot.
    ///          The GetBotChannelAssociations operation requires
    ///       permissions for the lex:GetBotChannelAssociations
    ///       action.
    func getBotChannelAssociations(input: GetBotChannelAssociationsInput) async throws -> GetBotChannelAssociationsOutputResponse
    {
        typealias getBotChannelAssociationsContinuation = CheckedContinuation<GetBotChannelAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBotChannelAssociationsContinuation) in
            getBotChannelAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about all of the versions of a bot.
    ///          The GetBotVersions operation returns a
    ///         BotMetadata object for each version of a bot. For example,
    ///       if a bot has three numbered versions, the GetBotVersions
    ///       operation returns four BotMetadata objects in the response,
    ///       one for each numbered version and one for the $LATEST
    ///       version.
    ///          The GetBotVersions operation always returns at least
    ///       one version, the $LATEST version.
    ///          This operation requires permissions for the
    ///         lex:GetBotVersions action.
    func getBotVersions(input: GetBotVersionsInput) async throws -> GetBotVersionsOutputResponse
    {
        typealias getBotVersionsContinuation = CheckedContinuation<GetBotVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBotVersionsContinuation) in
            getBotVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns bot information as follows:
    ///
    ///
    ///                If you provide the nameContains field, the
    ///           response includes information for the $LATEST version of
    ///           all bots whose name contains the specified string.
    ///
    ///
    ///                If you don't specify the nameContains field, the
    ///           operation returns information about the $LATEST version
    ///           of all of your bots.
    ///
    ///
    ///          This operation requires permission for the lex:GetBots
    ///       action.
    func getBots(input: GetBotsInput) async throws -> GetBotsOutputResponse
    {
        typealias getBotsContinuation = CheckedContinuation<GetBotsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBotsContinuation) in
            getBots(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a built-in intent.
    ///          This operation requires permission for the
    ///         lex:GetBuiltinIntent action.
    func getBuiltinIntent(input: GetBuiltinIntentInput) async throws -> GetBuiltinIntentOutputResponse
    {
        typealias getBuiltinIntentContinuation = CheckedContinuation<GetBuiltinIntentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBuiltinIntentContinuation) in
            getBuiltinIntent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of built-in intents that meet the specified
    ///       criteria.
    ///          This operation requires permission for the
    ///         lex:GetBuiltinIntents action.
    func getBuiltinIntents(input: GetBuiltinIntentsInput) async throws -> GetBuiltinIntentsOutputResponse
    {
        typealias getBuiltinIntentsContinuation = CheckedContinuation<GetBuiltinIntentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBuiltinIntentsContinuation) in
            getBuiltinIntents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of built-in slot types that meet the specified
    ///       criteria.
    ///          For a list of built-in slot types, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference">Slot Type Reference in the Alexa Skills
    ///         Kit.
    ///
    ///          This operation requires permission for the
    ///         lex:GetBuiltInSlotTypes action.
    func getBuiltinSlotTypes(input: GetBuiltinSlotTypesInput) async throws -> GetBuiltinSlotTypesOutputResponse
    {
        typealias getBuiltinSlotTypesContinuation = CheckedContinuation<GetBuiltinSlotTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBuiltinSlotTypesContinuation) in
            getBuiltinSlotTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Exports the contents of a Amazon Lex resource in a specified format.
    ///
    func getExport(input: GetExportInput) async throws -> GetExportOutputResponse
    {
        typealias getExportContinuation = CheckedContinuation<GetExportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getExportContinuation) in
            getExport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about an import job started with the
    ///         StartImport operation.
    func getImport(input: GetImportInput) async throws -> GetImportOutputResponse
    {
        typealias getImportContinuation = CheckedContinuation<GetImportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getImportContinuation) in
            getImport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///  Returns information about an intent. In addition to the intent
    ///       name, you must specify the intent version.
    ///           This operation requires permissions to perform the
    ///         lex:GetIntent action.
    func getIntent(input: GetIntentInput) async throws -> GetIntentOutputResponse
    {
        typealias getIntentContinuation = CheckedContinuation<GetIntentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIntentContinuation) in
            getIntent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about all of the versions of an intent.
    ///          The GetIntentVersions operation returns an
    ///         IntentMetadata object for each version of an intent. For
    ///       example, if an intent has three numbered versions, the
    ///         GetIntentVersions operation returns four
    ///         IntentMetadata objects in the response, one for each
    ///       numbered version and one for the $LATEST version.
    ///          The GetIntentVersions operation always returns at
    ///       least one version, the $LATEST version.
    ///          This operation requires permissions for the
    ///         lex:GetIntentVersions action.
    func getIntentVersions(input: GetIntentVersionsInput) async throws -> GetIntentVersionsOutputResponse
    {
        typealias getIntentVersionsContinuation = CheckedContinuation<GetIntentVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIntentVersionsContinuation) in
            getIntentVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns intent information as follows:
    ///
    ///
    ///                If you specify the nameContains field, returns the
    ///             $LATEST version of all intents that contain the
    ///           specified string.
    ///
    ///
    ///                 If you don't specify the nameContains field,
    ///           returns information about the $LATEST version of all
    ///           intents.
    ///
    ///
    ///           The operation requires permission for the
    ///         lex:GetIntents action.
    func getIntents(input: GetIntentsInput) async throws -> GetIntentsOutputResponse
    {
        typealias getIntentsContinuation = CheckedContinuation<GetIntentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIntentsContinuation) in
            getIntents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides details about an ongoing or complete migration from an
    ///       Amazon Lex V1 bot to an Amazon Lex V2 bot. Use this operation to view the migration
    ///       alerts and warnings related to the migration.
    func getMigration(input: GetMigrationInput) async throws -> GetMigrationOutputResponse
    {
        typealias getMigrationContinuation = CheckedContinuation<GetMigrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMigrationContinuation) in
            getMigration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of migrations between Amazon Lex V1 and Amazon Lex V2.
    func getMigrations(input: GetMigrationsInput) async throws -> GetMigrationsOutputResponse
    {
        typealias getMigrationsContinuation = CheckedContinuation<GetMigrationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMigrationsContinuation) in
            getMigrations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a specific version of a slot type. In
    ///       addition to specifying the slot type name, you must specify the slot type
    ///       version.
    ///          This operation requires permissions for the
    ///         lex:GetSlotType action.
    func getSlotType(input: GetSlotTypeInput) async throws -> GetSlotTypeOutputResponse
    {
        typealias getSlotTypeContinuation = CheckedContinuation<GetSlotTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSlotTypeContinuation) in
            getSlotType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about all versions of a slot type.
    ///          The GetSlotTypeVersions operation returns a
    ///         SlotTypeMetadata object for each version of a slot type.
    ///       For example, if a slot type has three numbered versions, the
    ///         GetSlotTypeVersions operation returns four
    ///         SlotTypeMetadata objects in the response, one for each
    ///       numbered version and one for the $LATEST version.
    ///          The GetSlotTypeVersions operation always returns at
    ///       least one version, the $LATEST version.
    ///          This operation requires permissions for the
    ///         lex:GetSlotTypeVersions action.
    func getSlotTypeVersions(input: GetSlotTypeVersionsInput) async throws -> GetSlotTypeVersionsOutputResponse
    {
        typealias getSlotTypeVersionsContinuation = CheckedContinuation<GetSlotTypeVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSlotTypeVersionsContinuation) in
            getSlotTypeVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns slot type information as follows:
    ///
    ///
    ///                If you specify the nameContains field, returns the
    ///             $LATEST version of all slot types that contain the
    ///           specified string.
    ///
    ///
    ///                 If you don't specify the nameContains field,
    ///           returns information about the $LATEST version of all slot
    ///           types.
    ///
    ///
    ///           The operation requires permission for the
    ///         lex:GetSlotTypes action.
    func getSlotTypes(input: GetSlotTypesInput) async throws -> GetSlotTypesOutputResponse
    {
        typealias getSlotTypesContinuation = CheckedContinuation<GetSlotTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSlotTypesContinuation) in
            getSlotTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Use the GetUtterancesView operation to get information
    ///       about the utterances that your users have made to your bot. You can use
    ///       this list to tune the utterances that your bot responds to.
    ///          For example, say that you have created a bot to order flowers.
    ///       After your users have used your bot for a while, use the
    ///         GetUtterancesView operation to see the requests that they
    ///       have made and whether they have been successful. You might find that the
    ///       utterance "I want flowers" is not being recognized. You could add this
    ///       utterance to the OrderFlowers intent so that your bot
    ///       recognizes that utterance.
    ///          After you publish a new version of a bot, you can get information
    ///       about the old version and the new so that you can compare the performance
    ///       across the two versions.
    ///          Utterance statistics are generated once a day. Data is available
    ///       for the last 15 days. You can request information for up to 5 versions of
    ///       your bot in each request. Amazon Lex returns the most frequent utterances
    ///       received by the bot in the last 15 days. The response contains information
    ///       about a maximum of 100 utterances for each version.
    ///          If you set childDirected field to true when you
    ///       created your bot, if you are using slot obfuscation with one or more
    ///       slots, or if you opted out of participating in improving Amazon Lex, utterances
    ///       are not available.
    ///          This operation requires permissions for the
    ///         lex:GetUtterancesView action.
    func getUtterancesView(input: GetUtterancesViewInput) async throws -> GetUtterancesViewOutputResponse
    {
        typealias getUtterancesViewContinuation = CheckedContinuation<GetUtterancesViewOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUtterancesViewContinuation) in
            getUtterancesView(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of tags associated with the specified resource. Only bots,
    ///       bot aliases, and bot channels can have tags associated with them.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an Amazon Lex conversational bot or replaces an existing bot.
    ///       When you create or update a bot you are only required to specify a name, a
    ///       locale, and whether the bot is directed toward children under age 13. You
    ///       can use this to add intents later, or to remove intents from an existing
    ///       bot. When you create a bot with the minimum information, the bot is
    ///       created or updated but Amazon Lex returns the  response
    ///         FAILED. You can build the bot after you add one or more
    ///       intents. For more information about Amazon Lex bots, see how-it-works.
    ///          If you specify the name of an existing bot, the fields in the
    ///       request replace the existing values in the $LATEST version of
    ///       the bot. Amazon Lex removes any fields that you don't provide values for in the
    ///       request, except for the idleTTLInSeconds and
    ///         privacySettings fields, which are set to their default
    ///       values. If you don't specify values for required fields, Amazon Lex throws an
    ///       exception.
    ///
    ///          This operation requires permissions for the lex:PutBot
    ///       action. For more information, see security-iam.
    func putBot(input: PutBotInput) async throws -> PutBotOutputResponse
    {
        typealias putBotContinuation = CheckedContinuation<PutBotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putBotContinuation) in
            putBot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an alias for the specified version of the bot or replaces
    ///       an alias for the specified bot. To change the version of the bot that the
    ///       alias points to, replace the alias. For more information about aliases,
    ///       see versioning-aliases.
    ///          This operation requires permissions for the
    ///         lex:PutBotAlias action.
    func putBotAlias(input: PutBotAliasInput) async throws -> PutBotAliasOutputResponse
    {
        typealias putBotAliasContinuation = CheckedContinuation<PutBotAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putBotAliasContinuation) in
            putBotAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an intent or replaces an existing intent.
    ///          To define the interaction between the user and your bot, you use
    ///       one or more intents. For a pizza ordering bot, for example, you would
    ///       create an OrderPizza intent.
    ///          To create an intent or replace an existing intent, you must provide
    ///       the following:
    ///
    ///
    ///                Intent name. For example, OrderPizza.
    ///
    ///
    ///                Sample utterances. For example, "Can I order a pizza, please."
    ///           and "I want to order a pizza."
    ///
    ///
    ///                Information to be gathered. You specify slot types for the
    ///           information that your bot will request from the user. You can specify
    ///           standard slot types, such as a date or a time, or custom slot types
    ///           such as the size and crust of a pizza.
    ///
    ///
    ///                How the intent will be fulfilled. You can provide a Lambda
    ///           function or configure the intent to return the intent information to
    ///           the client application. If you use a Lambda function, when all of the
    ///           intent information is available, Amazon Lex invokes your Lambda function.
    ///           If you configure your intent to return the intent information to the
    ///           client application.
    ///
    ///
    ///          You can specify other optional information in the request, such
    ///       as:
    ///
    ///
    ///
    ///                A confirmation prompt to ask the user to confirm an intent. For
    ///           example, "Shall I order your pizza?"
    ///
    ///
    ///                A conclusion statement to send to the user after the intent has
    ///           been fulfilled. For example, "I placed your pizza order."
    ///
    ///
    ///                A follow-up prompt that asks the user for additional activity.
    ///           For example, asking "Do you want to order a drink with your
    ///           pizza?"
    ///
    ///
    ///          If you specify an existing intent name to update the intent, Amazon Lex
    ///       replaces the values in the $LATEST version of the intent with
    ///       the values in the request. Amazon Lex removes fields that you don't provide in
    ///       the request. If you don't specify the required fields, Amazon Lex throws an
    ///       exception. When you update the $LATEST version of an intent,
    ///       the status field of any bot that uses the
    ///         $LATEST version of the intent is set to
    ///         NOT_BUILT.
    ///          For more information, see how-it-works.
    ///          This operation requires permissions for the
    ///         lex:PutIntent action.
    func putIntent(input: PutIntentInput) async throws -> PutIntentOutputResponse
    {
        typealias putIntentContinuation = CheckedContinuation<PutIntentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putIntentContinuation) in
            putIntent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a custom slot type or replaces an existing custom slot
    ///       type.
    ///          To create a custom slot type, specify a name for the slot type and
    ///       a set of enumeration values, which are the values that a slot of this type
    ///       can assume. For more information, see how-it-works.
    ///          If you specify the name of an existing slot type, the fields in the
    ///       request replace the existing values in the $LATEST version of
    ///       the slot type. Amazon Lex removes the fields that you don't provide in the
    ///       request. If you don't specify required fields, Amazon Lex throws an exception.
    ///       When you update the $LATEST version of a slot type, if a bot
    ///       uses the $LATEST version of an intent that contains the slot
    ///       type, the bot's status field is set to
    ///       NOT_BUILT.
    ///
    ///          This operation requires permissions for the
    ///         lex:PutSlotType action.
    func putSlotType(input: PutSlotTypeInput) async throws -> PutSlotTypeOutputResponse
    {
        typealias putSlotTypeContinuation = CheckedContinuation<PutSlotTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putSlotTypeContinuation) in
            putSlotType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts a job to import a resource to Amazon Lex.
    func startImport(input: StartImportInput) async throws -> StartImportOutputResponse
    {
        typealias startImportContinuation = CheckedContinuation<StartImportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startImportContinuation) in
            startImport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts migrating a bot from Amazon Lex V1 to Amazon Lex V2. Migrate your bot when
    ///       you want to take advantage of the new features of Amazon Lex V2.
    ///          For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/migrate.html">Migrating a bot in the Amazon Lex
    ///         developer guide.
    func startMigration(input: StartMigrationInput) async throws -> StartMigrationOutputResponse
    {
        typealias startMigrationContinuation = CheckedContinuation<StartMigrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startMigrationContinuation) in
            startMigration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds the specified tags to the specified resource. If a tag key
    ///       already exists, the existing value is replaced with the new value.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes tags from a bot, bot alias or bot channel.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
