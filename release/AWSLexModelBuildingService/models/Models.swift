// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessDeniedException(message: \(Swift.String(describing: message)))"}
}

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Your IAM user or role does not have permission to call the Amazon Lex V2 APIs
///       required to migrate your bot.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BadRequestException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BadRequestException(message: \(Swift.String(describing: message)))"}
}

extension BadRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BadRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request is not well formed. For example, a value is invalid or
///       a required field is missing. Check the field values, and try
///       again.
public struct BadRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BadRequestExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension BadRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LexModelBuildingClientTypes.BotAliasMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botName
        case botVersion
        case checksum
        case conversationLogs
        case createdDate
        case description
        case lastUpdatedDate
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let botName = botName {
            try encodeContainer.encode(botName, forKey: .botName)
        }
        if let botVersion = botVersion {
            try encodeContainer.encode(botVersion, forKey: .botVersion)
        }
        if let checksum = checksum {
            try encodeContainer.encode(checksum, forKey: .checksum)
        }
        if let conversationLogs = conversationLogs {
            try encodeContainer.encode(conversationLogs, forKey: .conversationLogs)
        }
        if let createdDate = createdDate {
            try encodeContainer.encode(createdDate.timeIntervalSince1970, forKey: .createdDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastUpdatedDate = lastUpdatedDate {
            try encodeContainer.encode(lastUpdatedDate.timeIntervalSince1970, forKey: .lastUpdatedDate)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let botNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botName)
        botName = botNameDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let conversationLogsDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ConversationLogsResponse.self, forKey: .conversationLogs)
        conversationLogs = conversationLogsDecoded
    }
}

extension LexModelBuildingClientTypes.BotAliasMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BotAliasMetadata(botName: \(Swift.String(describing: botName)), botVersion: \(Swift.String(describing: botVersion)), checksum: \(Swift.String(describing: checksum)), conversationLogs: \(Swift.String(describing: conversationLogs)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), name: \(Swift.String(describing: name)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides information about a bot alias.
    public struct BotAliasMetadata: Swift.Equatable {
        /// The name of the bot to which the alias points.
        public var botName: Swift.String?
        /// The version of the Amazon Lex bot to which the alias points.
        public var botVersion: Swift.String?
        /// Checksum of the bot alias.
        public var checksum: Swift.String?
        /// Settings that determine how Amazon Lex uses conversation logs for the
        ///       alias.
        public var conversationLogs: LexModelBuildingClientTypes.ConversationLogsResponse?
        /// The date that the bot alias was created.
        public var createdDate: ClientRuntime.Date?
        /// A description of the bot alias.
        public var description: Swift.String?
        /// The date that the bot alias was updated. When you create a
        ///       resource, the creation date and last updated date are the same.
        public var lastUpdatedDate: ClientRuntime.Date?
        /// The name of the bot alias.
        public var name: Swift.String?

        public init (
            botName: Swift.String? = nil,
            botVersion: Swift.String? = nil,
            checksum: Swift.String? = nil,
            conversationLogs: LexModelBuildingClientTypes.ConversationLogsResponse? = nil,
            createdDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedDate: ClientRuntime.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.botName = botName
            self.botVersion = botVersion
            self.checksum = checksum
            self.conversationLogs = conversationLogs
            self.createdDate = createdDate
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.name = name
        }
    }

}

extension LexModelBuildingClientTypes.BotChannelAssociation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botAlias
        case botConfiguration
        case botName
        case createdDate
        case description
        case failureReason
        case name
        case status
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let botAlias = botAlias {
            try encodeContainer.encode(botAlias, forKey: .botAlias)
        }
        if let botConfiguration = botConfiguration {
            var botConfigurationContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .botConfiguration)
            for (dictKey0, channelconfigurationmap0) in botConfiguration {
                try botConfigurationContainer.encode(channelconfigurationmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let botName = botName {
            try encodeContainer.encode(botName, forKey: .botName)
        }
        if let createdDate = createdDate {
            try encodeContainer.encode(createdDate.timeIntervalSince1970, forKey: .createdDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let botAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botAlias)
        botAlias = botAliasDecoded
        let botNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botName)
        botName = botNameDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let typeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ChannelType.self, forKey: .type)
        type = typeDecoded
        let botConfigurationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .botConfiguration)
        var botConfigurationDecoded0: [Swift.String:Swift.String]? = nil
        if let botConfigurationContainer = botConfigurationContainer {
            botConfigurationDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in botConfigurationContainer {
                if let string0 = string0 {
                    botConfigurationDecoded0?[key0] = string0
                }
            }
        }
        botConfiguration = botConfigurationDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ChannelStatus.self, forKey: .status)
        status = statusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension LexModelBuildingClientTypes.BotChannelAssociation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BotChannelAssociation(botAlias: \(Swift.String(describing: botAlias)), botConfiguration: \(Swift.String(describing: botConfiguration)), botName: \(Swift.String(describing: botName)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), failureReason: \(Swift.String(describing: failureReason)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)), type: \(Swift.String(describing: type)))"}
}

extension LexModelBuildingClientTypes {
    /// Represents an association between an Amazon Lex bot and an external
    ///       messaging platform.
    public struct BotChannelAssociation: Swift.Equatable {
        /// An alias pointing to the specific version of the Amazon Lex bot to which
        ///       this association is being made.
        public var botAlias: Swift.String?
        /// Provides information necessary to communicate with the messaging
        ///       platform.
        public var botConfiguration: [Swift.String:Swift.String]?
        /// The name of the Amazon Lex bot to which this association is being made.
        ///
        ///             Currently, Amazon Lex supports associations with Facebook and Slack,
        ///         and Twilio.
        ///
        ///
        public var botName: Swift.String?
        /// The date that the association between the Amazon Lex bot and the channel
        ///       was created.
        public var createdDate: ClientRuntime.Date?
        /// A text description of the association you are creating.
        public var description: Swift.String?
        /// If status is FAILED, Amazon Lex provides the
        ///       reason that it failed to create the association.
        public var failureReason: Swift.String?
        /// The name of the association between the bot and the channel.
        ///
        public var name: Swift.String?
        /// The status of the bot channel.
        ///
        ///
        ///
        ///                   CREATED - The channel has been created and is
        ///           ready for use.
        ///
        ///
        ///
        ///                   IN_PROGRESS - Channel creation is in
        ///           progress.
        ///
        ///
        ///
        ///                   FAILED - There was an error creating the channel.
        ///           For information about the reason for the failure, see the
        ///             failureReason field.
        ///
        ///
        public var status: LexModelBuildingClientTypes.ChannelStatus?
        /// Specifies the type of association by indicating the type of channel
        ///       being established between the Amazon Lex bot and the external messaging
        ///       platform.
        public var type: LexModelBuildingClientTypes.ChannelType?

        public init (
            botAlias: Swift.String? = nil,
            botConfiguration: [Swift.String:Swift.String]? = nil,
            botName: Swift.String? = nil,
            createdDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            name: Swift.String? = nil,
            status: LexModelBuildingClientTypes.ChannelStatus? = nil,
            type: LexModelBuildingClientTypes.ChannelType? = nil
        )
        {
            self.botAlias = botAlias
            self.botConfiguration = botConfiguration
            self.botName = botName
            self.createdDate = createdDate
            self.description = description
            self.failureReason = failureReason
            self.name = name
            self.status = status
            self.type = type
        }
    }

}

extension LexModelBuildingClientTypes.BotMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDate
        case description
        case lastUpdatedDate
        case name
        case status
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdDate = createdDate {
            try encodeContainer.encode(createdDate.timeIntervalSince1970, forKey: .createdDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastUpdatedDate = lastUpdatedDate {
            try encodeContainer.encode(lastUpdatedDate.timeIntervalSince1970, forKey: .lastUpdatedDate)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension LexModelBuildingClientTypes.BotMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BotMetadata(createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)), version: \(Swift.String(describing: version)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides information about a bot. .
    public struct BotMetadata: Swift.Equatable {
        /// The date that the bot was created.
        public var createdDate: ClientRuntime.Date?
        /// A description of the bot.
        public var description: Swift.String?
        /// The date that the bot was updated. When you create a bot, the
        ///       creation date and last updated date are the same.
        public var lastUpdatedDate: ClientRuntime.Date?
        /// The name of the bot.
        public var name: Swift.String?
        /// The status of the bot.
        public var status: LexModelBuildingClientTypes.Status?
        /// The version of the bot. For a new bot, the version is always
        ///         $LATEST.
        public var version: Swift.String?

        public init (
            createdDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedDate: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            status: LexModelBuildingClientTypes.Status? = nil,
            version: Swift.String? = nil
        )
        {
            self.createdDate = createdDate
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.name = name
            self.status = status
            self.version = version
        }
    }

}

extension LexModelBuildingClientTypes.BuiltinIntentMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signature
        case supportedLocales
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let signature = signature {
            try encodeContainer.encode(signature, forKey: .signature)
        }
        if let supportedLocales = supportedLocales {
            var supportedLocalesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedLocales)
            for localelist0 in supportedLocales {
                try supportedLocalesContainer.encode(localelist0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signature)
        signature = signatureDecoded
        let supportedLocalesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Locale?].self, forKey: .supportedLocales)
        var supportedLocalesDecoded0:[LexModelBuildingClientTypes.Locale]? = nil
        if let supportedLocalesContainer = supportedLocalesContainer {
            supportedLocalesDecoded0 = [LexModelBuildingClientTypes.Locale]()
            for string0 in supportedLocalesContainer {
                if let string0 = string0 {
                    supportedLocalesDecoded0?.append(string0)
                }
            }
        }
        supportedLocales = supportedLocalesDecoded0
    }
}

extension LexModelBuildingClientTypes.BuiltinIntentMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BuiltinIntentMetadata(signature: \(Swift.String(describing: signature)), supportedLocales: \(Swift.String(describing: supportedLocales)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides metadata for a built-in intent.
    public struct BuiltinIntentMetadata: Swift.Equatable {
        /// A unique identifier for the built-in intent. To find the signature
        ///       for an intent, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard Built-in Intents in the Alexa Skills
        ///         Kit.
        public var signature: Swift.String?
        /// A list of identifiers for the locales that the intent
        ///       supports.
        public var supportedLocales: [LexModelBuildingClientTypes.Locale]?

        public init (
            signature: Swift.String? = nil,
            supportedLocales: [LexModelBuildingClientTypes.Locale]? = nil
        )
        {
            self.signature = signature
            self.supportedLocales = supportedLocales
        }
    }

}

extension LexModelBuildingClientTypes.BuiltinIntentSlot: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension LexModelBuildingClientTypes.BuiltinIntentSlot: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BuiltinIntentSlot(name: \(Swift.String(describing: name)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides information about a slot used in a built-in
    ///       intent.
    public struct BuiltinIntentSlot: Swift.Equatable {
        /// A list of the slots defined for the intent.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension LexModelBuildingClientTypes.BuiltinSlotTypeMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signature
        case supportedLocales
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let signature = signature {
            try encodeContainer.encode(signature, forKey: .signature)
        }
        if let supportedLocales = supportedLocales {
            var supportedLocalesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedLocales)
            for localelist0 in supportedLocales {
                try supportedLocalesContainer.encode(localelist0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signature)
        signature = signatureDecoded
        let supportedLocalesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Locale?].self, forKey: .supportedLocales)
        var supportedLocalesDecoded0:[LexModelBuildingClientTypes.Locale]? = nil
        if let supportedLocalesContainer = supportedLocalesContainer {
            supportedLocalesDecoded0 = [LexModelBuildingClientTypes.Locale]()
            for string0 in supportedLocalesContainer {
                if let string0 = string0 {
                    supportedLocalesDecoded0?.append(string0)
                }
            }
        }
        supportedLocales = supportedLocalesDecoded0
    }
}

extension LexModelBuildingClientTypes.BuiltinSlotTypeMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BuiltinSlotTypeMetadata(signature: \(Swift.String(describing: signature)), supportedLocales: \(Swift.String(describing: supportedLocales)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides information about a built in slot type.
    public struct BuiltinSlotTypeMetadata: Swift.Equatable {
        /// A unique identifier for the built-in slot type. To find the
        ///       signature for a slot type, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference">Slot Type Reference in the Alexa Skills
        ///         Kit.
        public var signature: Swift.String?
        /// A list of target locales for the slot.
        public var supportedLocales: [LexModelBuildingClientTypes.Locale]?

        public init (
            signature: Swift.String? = nil,
            supportedLocales: [LexModelBuildingClientTypes.Locale]? = nil
        )
        {
            self.signature = signature
            self.supportedLocales = supportedLocales
        }
    }

}

extension LexModelBuildingClientTypes {
    public enum ChannelStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case created
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ChannelStatus] {
            return [
                .created,
                .failed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChannelStatus(rawValue: rawValue) ?? ChannelStatus.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes {
    public enum ChannelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case facebook
        case kik
        case slack
        case twilioSms
        case sdkUnknown(Swift.String)

        public static var allCases: [ChannelType] {
            return [
                .facebook,
                .kik,
                .slack,
                .twilioSms,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .facebook: return "Facebook"
            case .kik: return "Kik"
            case .slack: return "Slack"
            case .twilioSms: return "Twilio-Sms"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChannelType(rawValue: rawValue) ?? ChannelType.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes.CodeHook: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageVersion
        case uri
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let messageVersion = messageVersion {
            try encodeContainer.encode(messageVersion, forKey: .messageVersion)
        }
        if let uri = uri {
            try encodeContainer.encode(uri, forKey: .uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uri)
        uri = uriDecoded
        let messageVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageVersion)
        messageVersion = messageVersionDecoded
    }
}

extension LexModelBuildingClientTypes.CodeHook: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CodeHook(messageVersion: \(Swift.String(describing: messageVersion)), uri: \(Swift.String(describing: uri)))"}
}

extension LexModelBuildingClientTypes {
    /// Specifies a Lambda function that verifies requests to a bot or
    ///       fulfills the user's request to a bot..
    public struct CodeHook: Swift.Equatable {
        /// The version of the request-response that you want Amazon Lex to use to
        ///       invoke your Lambda function. For more information, see using-lambda.
        /// This member is required.
        public var messageVersion: Swift.String?
        /// The Amazon Resource Name (ARN) of the Lambda function.
        /// This member is required.
        public var uri: Swift.String?

        public init (
            messageVersion: Swift.String? = nil,
            uri: Swift.String? = nil
        )
        {
            self.messageVersion = messageVersion
            self.uri = uri
        }
    }

}

extension ConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConflictException(message: \(Swift.String(describing: message)))"}
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///  There was a conflict processing the request. Try your request
///       again.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LexModelBuildingClientTypes {
    public enum ContentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case customPayload
        case plainText
        case ssml
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentType] {
            return [
                .customPayload,
                .plainText,
                .ssml,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .customPayload: return "CustomPayload"
            case .plainText: return "PlainText"
            case .ssml: return "SSML"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContentType(rawValue: rawValue) ?? ContentType.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes.ConversationLogsRequest: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iamRoleArn
        case logSettings
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iamRoleArn = iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
        if let logSettings = logSettings {
            var logSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logSettings)
            for logsettingsrequestlist0 in logSettings {
                try logSettingsContainer.encode(logsettingsrequestlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logSettingsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.LogSettingsRequest?].self, forKey: .logSettings)
        var logSettingsDecoded0:[LexModelBuildingClientTypes.LogSettingsRequest]? = nil
        if let logSettingsContainer = logSettingsContainer {
            logSettingsDecoded0 = [LexModelBuildingClientTypes.LogSettingsRequest]()
            for structure0 in logSettingsContainer {
                if let structure0 = structure0 {
                    logSettingsDecoded0?.append(structure0)
                }
            }
        }
        logSettings = logSettingsDecoded0
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
    }
}

extension LexModelBuildingClientTypes.ConversationLogsRequest: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConversationLogsRequest(iamRoleArn: \(Swift.String(describing: iamRoleArn)), logSettings: \(Swift.String(describing: logSettings)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides the settings needed for conversation logs.
    public struct ConversationLogsRequest: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of an IAM role with permission to write
        ///       to your CloudWatch Logs for text logs and your S3 bucket for audio logs.
        ///       If audio encryption is enabled, this role also provides access permission
        ///       for the AWS KMS key used for encrypting audio logs. For more information,
        ///       see <a href="https://docs.aws.amazon.com/lex/latest/dg/conversation-logs-role-and-policy.html">Creating an
        ///         IAM Role and Policy for Conversation Logs.
        /// This member is required.
        public var iamRoleArn: Swift.String?
        /// The settings for your conversation logs. You can log the conversation
        ///       text, conversation audio, or both.
        /// This member is required.
        public var logSettings: [LexModelBuildingClientTypes.LogSettingsRequest]?

        public init (
            iamRoleArn: Swift.String? = nil,
            logSettings: [LexModelBuildingClientTypes.LogSettingsRequest]? = nil
        )
        {
            self.iamRoleArn = iamRoleArn
            self.logSettings = logSettings
        }
    }

}

extension LexModelBuildingClientTypes.ConversationLogsResponse: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iamRoleArn
        case logSettings
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iamRoleArn = iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
        if let logSettings = logSettings {
            var logSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logSettings)
            for logsettingsresponselist0 in logSettings {
                try logSettingsContainer.encode(logsettingsresponselist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logSettingsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.LogSettingsResponse?].self, forKey: .logSettings)
        var logSettingsDecoded0:[LexModelBuildingClientTypes.LogSettingsResponse]? = nil
        if let logSettingsContainer = logSettingsContainer {
            logSettingsDecoded0 = [LexModelBuildingClientTypes.LogSettingsResponse]()
            for structure0 in logSettingsContainer {
                if let structure0 = structure0 {
                    logSettingsDecoded0?.append(structure0)
                }
            }
        }
        logSettings = logSettingsDecoded0
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
    }
}

extension LexModelBuildingClientTypes.ConversationLogsResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConversationLogsResponse(iamRoleArn: \(Swift.String(describing: iamRoleArn)), logSettings: \(Swift.String(describing: logSettings)))"}
}

extension LexModelBuildingClientTypes {
    /// Contains information about conversation log settings.
    public struct ConversationLogsResponse: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the IAM role used to write your logs
        ///       to CloudWatch Logs or an S3 bucket.
        public var iamRoleArn: Swift.String?
        /// The settings for your conversation logs. You can log text, audio, or
        ///       both.
        public var logSettings: [LexModelBuildingClientTypes.LogSettingsResponse]?

        public init (
            iamRoleArn: Swift.String? = nil,
            logSettings: [LexModelBuildingClientTypes.LogSettingsResponse]? = nil
        )
        {
            self.iamRoleArn = iamRoleArn
            self.logSettings = logSettings
        }
    }

}

public struct CreateBotVersionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBotVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBotVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBotVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBotVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBotVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBotVersionOutputError>
}

extension CreateBotVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBotVersionInput(checksum: \(Swift.String(describing: checksum)), name: \(Swift.String(describing: name)))"}
}

extension CreateBotVersionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checksum = checksum {
            try encodeContainer.encode(checksum, forKey: .checksum)
        }
    }
}

public struct CreateBotVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBotVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBotVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBotVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBotVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBotVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBotVersionOutputError>
}

public struct CreateBotVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBotVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateBotVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBotVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateBotVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBotVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBotVersionOutputError>
}

public struct CreateBotVersionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateBotVersionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateBotVersionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateBotVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(name.urlPercentEncoding())/versions"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateBotVersionInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateBotVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateBotVersionOutputError>
}

public struct CreateBotVersionInput: Swift.Equatable {
    /// Identifies a specific revision of the $LATEST version
    ///       of the bot. If you specify a checksum and the $LATEST version
    ///       of the bot has a different checksum, a
    ///         PreconditionFailedException exception is returned and Amazon Lex
    ///       doesn't publish a new version. If you don't specify a checksum, Amazon Lex
    ///       publishes the $LATEST version.
    public var checksum: Swift.String?
    /// The name of the bot that you want to create a new version of. The
    ///       name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init (
        checksum: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.name = name
    }
}

struct CreateBotVersionInputBody: Swift.Equatable {
    public let checksum: Swift.String?
}

extension CreateBotVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
    }
}

extension CreateBotVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateBotVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PreconditionFailedException" : self = .preconditionFailedException(try PreconditionFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateBotVersionOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case preconditionFailedException(PreconditionFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateBotVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBotVersionOutputResponse(abortStatement: \(Swift.String(describing: abortStatement)), checksum: \(Swift.String(describing: checksum)), childDirected: \(Swift.String(describing: childDirected)), clarificationPrompt: \(Swift.String(describing: clarificationPrompt)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), detectSentiment: \(Swift.String(describing: detectSentiment)), enableModelImprovements: \(Swift.String(describing: enableModelImprovements)), failureReason: \(Swift.String(describing: failureReason)), idleSessionTTLInSeconds: \(Swift.String(describing: idleSessionTTLInSeconds)), intents: \(Swift.String(describing: intents)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), locale: \(Swift.String(describing: locale)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)), version: \(Swift.String(describing: version)), voiceId: \(Swift.String(describing: voiceId)))"}
}

extension CreateBotVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateBotVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.abortStatement = output.abortStatement
            self.checksum = output.checksum
            self.childDirected = output.childDirected
            self.clarificationPrompt = output.clarificationPrompt
            self.createdDate = output.createdDate
            self.description = output.description
            self.detectSentiment = output.detectSentiment
            self.enableModelImprovements = output.enableModelImprovements
            self.failureReason = output.failureReason
            self.idleSessionTTLInSeconds = output.idleSessionTTLInSeconds
            self.intents = output.intents
            self.lastUpdatedDate = output.lastUpdatedDate
            self.locale = output.locale
            self.name = output.name
            self.status = output.status
            self.version = output.version
            self.voiceId = output.voiceId
        } else {
            self.abortStatement = nil
            self.checksum = nil
            self.childDirected = nil
            self.clarificationPrompt = nil
            self.createdDate = nil
            self.description = nil
            self.detectSentiment = nil
            self.enableModelImprovements = nil
            self.failureReason = nil
            self.idleSessionTTLInSeconds = nil
            self.intents = nil
            self.lastUpdatedDate = nil
            self.locale = nil
            self.name = nil
            self.status = nil
            self.version = nil
            self.voiceId = nil
        }
    }
}

public struct CreateBotVersionOutputResponse: Swift.Equatable {
    /// The message that Amazon Lex uses to cancel a conversation. For more
    ///       information, see PutBot.
    public var abortStatement: LexModelBuildingClientTypes.Statement?
    /// Checksum identifying the version of the bot that was
    ///       created.
    public var checksum: Swift.String?
    /// For each Amazon Lex bot created with the Amazon Lex Model Building Service,
    ///       you must specify whether your use of Amazon Lex is related to a website,
    ///       program, or other application that is directed or targeted, in whole or in
    ///       part, to children under age 13 and subject to the Children's Online
    ///       Privacy Protection Act (COPPA) by specifying true or
    ///         false in the childDirected field. By
    ///       specifying true in the childDirected field, you
    ///       confirm that your use of Amazon Lex is related
    ///       to a website, program, or other application that is directed or targeted,
    ///       in whole or in part, to children under age 13 and subject to COPPA. By
    ///       specifying false in the childDirected field, you
    ///       confirm that your use of Amazon Lex is not
    ///       related to a website, program, or other application that is directed or
    ///       targeted, in whole or in part, to children under age 13 and subject to
    ///       COPPA. You may not specify a default value for the
    ///         childDirected field that does not accurately reflect
    ///       whether your use of Amazon Lex is related to a website, program, or other
    ///       application that is directed or targeted, in whole or in part, to children
    ///       under age 13 and subject to COPPA.
    ///          If your use of Amazon Lex relates to a website, program, or other
    ///       application that is directed in whole or in part, to children under age
    ///       13, you must obtain any required verifiable parental consent under COPPA.
    ///       For information regarding the use of Amazon Lex in connection with websites,
    ///       programs, or other applications that are directed or targeted, in whole or
    ///       in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ.
    ///
    public var childDirected: Swift.Bool?
    /// The message that Amazon Lex uses when it doesn't understand the user's
    ///       request. For more information, see PutBot.
    public var clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    /// The date when the bot version was created.
    public var createdDate: ClientRuntime.Date?
    /// A description of the bot.
    public var description: Swift.String?
    /// Indicates whether utterances entered by the user should be sent to
    ///       Amazon Comprehend for sentiment analysis.
    public var detectSentiment: Swift.Bool?
    /// Indicates whether the bot uses accuracy improvements.
    ///         true indicates that the bot is using the improvements,
    ///       otherwise, false.
    public var enableModelImprovements: Swift.Bool?
    /// If status is FAILED, Amazon Lex provides the
    ///       reason that it failed to build the bot.
    public var failureReason: Swift.String?
    /// The maximum time in seconds that Amazon Lex retains the data gathered in
    ///       a conversation. For more information, see PutBot.
    public var idleSessionTTLInSeconds: Swift.Int?
    /// An array of Intent objects. For more information, see
    ///         PutBot.
    public var intents: [LexModelBuildingClientTypes.Intent]?
    /// The date when the $LATEST version of this bot was
    ///       updated.
    public var lastUpdatedDate: ClientRuntime.Date?
    ///  Specifies the target locale for the bot.
    public var locale: LexModelBuildingClientTypes.Locale?
    /// The name of the bot.
    public var name: Swift.String?
    ///  When you send a request to create or update a bot, Amazon Lex sets the
    ///         status response element to BUILDING. After
    ///       Amazon Lex builds the bot, it sets status to READY.
    ///       If Amazon Lex can't build the bot, it sets status to
    ///         FAILED. Amazon Lex returns the reason for the failure in the
    ///         failureReason response element.
    public var status: LexModelBuildingClientTypes.Status?
    /// The version of the bot.
    public var version: Swift.String?
    /// The Amazon Polly voice ID that Amazon Lex uses for voice interactions
    ///       with the user.
    public var voiceId: Swift.String?

    public init (
        abortStatement: LexModelBuildingClientTypes.Statement? = nil,
        checksum: Swift.String? = nil,
        childDirected: Swift.Bool? = nil,
        clarificationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createdDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        detectSentiment: Swift.Bool? = nil,
        enableModelImprovements: Swift.Bool? = nil,
        failureReason: Swift.String? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        intents: [LexModelBuildingClientTypes.Intent]? = nil,
        lastUpdatedDate: ClientRuntime.Date? = nil,
        locale: LexModelBuildingClientTypes.Locale? = nil,
        name: Swift.String? = nil,
        status: LexModelBuildingClientTypes.Status? = nil,
        version: Swift.String? = nil,
        voiceId: Swift.String? = nil
    )
    {
        self.abortStatement = abortStatement
        self.checksum = checksum
        self.childDirected = childDirected
        self.clarificationPrompt = clarificationPrompt
        self.createdDate = createdDate
        self.description = description
        self.detectSentiment = detectSentiment
        self.enableModelImprovements = enableModelImprovements
        self.failureReason = failureReason
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.intents = intents
        self.lastUpdatedDate = lastUpdatedDate
        self.locale = locale
        self.name = name
        self.status = status
        self.version = version
        self.voiceId = voiceId
    }
}

struct CreateBotVersionOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let intents: [LexModelBuildingClientTypes.Intent]?
    public let clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    public let abortStatement: LexModelBuildingClientTypes.Statement?
    public let status: LexModelBuildingClientTypes.Status?
    public let failureReason: Swift.String?
    public let lastUpdatedDate: ClientRuntime.Date?
    public let createdDate: ClientRuntime.Date?
    public let idleSessionTTLInSeconds: Swift.Int?
    public let voiceId: Swift.String?
    public let checksum: Swift.String?
    public let version: Swift.String?
    public let locale: LexModelBuildingClientTypes.Locale?
    public let childDirected: Swift.Bool?
    public let enableModelImprovements: Swift.Bool?
    public let detectSentiment: Swift.Bool?
}

extension CreateBotVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortStatement
        case checksum
        case childDirected
        case clarificationPrompt
        case createdDate
        case description
        case detectSentiment
        case enableModelImprovements
        case failureReason
        case idleSessionTTLInSeconds
        case intents
        case lastUpdatedDate
        case locale
        case name
        case status
        case version
        case voiceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let intentsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Intent?].self, forKey: .intents)
        var intentsDecoded0:[LexModelBuildingClientTypes.Intent]? = nil
        if let intentsContainer = intentsContainer {
            intentsDecoded0 = [LexModelBuildingClientTypes.Intent]()
            for structure0 in intentsContainer {
                if let structure0 = structure0 {
                    intentsDecoded0?.append(structure0)
                }
            }
        }
        intents = intentsDecoded0
        let clarificationPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Prompt.self, forKey: .clarificationPrompt)
        clarificationPrompt = clarificationPromptDecoded
        let abortStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .abortStatement)
        abortStatement = abortStatementDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let idleSessionTTLInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idleSessionTTLInSeconds)
        idleSessionTTLInSeconds = idleSessionTTLInSecondsDecoded
        let voiceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let localeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Locale.self, forKey: .locale)
        locale = localeDecoded
        let childDirectedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .childDirected)
        childDirected = childDirectedDecoded
        let enableModelImprovementsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableModelImprovements)
        enableModelImprovements = enableModelImprovementsDecoded
        let detectSentimentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .detectSentiment)
        detectSentiment = detectSentimentDecoded
    }
}

public struct CreateIntentVersionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateIntentVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateIntentVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateIntentVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateIntentVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateIntentVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateIntentVersionOutputError>
}

extension CreateIntentVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateIntentVersionInput(checksum: \(Swift.String(describing: checksum)), name: \(Swift.String(describing: name)))"}
}

extension CreateIntentVersionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checksum = checksum {
            try encodeContainer.encode(checksum, forKey: .checksum)
        }
    }
}

public struct CreateIntentVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateIntentVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateIntentVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateIntentVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateIntentVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateIntentVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateIntentVersionOutputError>
}

public struct CreateIntentVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateIntentVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateIntentVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateIntentVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateIntentVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateIntentVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateIntentVersionOutputError>
}

public struct CreateIntentVersionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateIntentVersionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateIntentVersionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateIntentVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/intents/\(name.urlPercentEncoding())/versions"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateIntentVersionInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateIntentVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateIntentVersionOutputError>
}

public struct CreateIntentVersionInput: Swift.Equatable {
    /// Checksum of the $LATEST version of the intent that
    ///       should be used to create the new version. If you specify a checksum and
    ///       the $LATEST version of the intent has a different checksum,
    ///       Amazon Lex returns a PreconditionFailedException exception and
    ///       doesn't publish a new version. If you don't specify a checksum, Amazon Lex
    ///       publishes the $LATEST version.
    public var checksum: Swift.String?
    /// The name of the intent that you want to create a new version of.
    ///       The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init (
        checksum: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.name = name
    }
}

struct CreateIntentVersionInputBody: Swift.Equatable {
    public let checksum: Swift.String?
}

extension CreateIntentVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
    }
}

extension CreateIntentVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateIntentVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PreconditionFailedException" : self = .preconditionFailedException(try PreconditionFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateIntentVersionOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case preconditionFailedException(PreconditionFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateIntentVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateIntentVersionOutputResponse(checksum: \(Swift.String(describing: checksum)), conclusionStatement: \(Swift.String(describing: conclusionStatement)), confirmationPrompt: \(Swift.String(describing: confirmationPrompt)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), dialogCodeHook: \(Swift.String(describing: dialogCodeHook)), followUpPrompt: \(Swift.String(describing: followUpPrompt)), fulfillmentActivity: \(Swift.String(describing: fulfillmentActivity)), inputContexts: \(Swift.String(describing: inputContexts)), kendraConfiguration: \(Swift.String(describing: kendraConfiguration)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), name: \(Swift.String(describing: name)), outputContexts: \(Swift.String(describing: outputContexts)), parentIntentSignature: \(Swift.String(describing: parentIntentSignature)), rejectionStatement: \(Swift.String(describing: rejectionStatement)), sampleUtterances: \(Swift.String(describing: sampleUtterances)), slots: \(Swift.String(describing: slots)), version: \(Swift.String(describing: version)))"}
}

extension CreateIntentVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateIntentVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.checksum = output.checksum
            self.conclusionStatement = output.conclusionStatement
            self.confirmationPrompt = output.confirmationPrompt
            self.createdDate = output.createdDate
            self.description = output.description
            self.dialogCodeHook = output.dialogCodeHook
            self.followUpPrompt = output.followUpPrompt
            self.fulfillmentActivity = output.fulfillmentActivity
            self.inputContexts = output.inputContexts
            self.kendraConfiguration = output.kendraConfiguration
            self.lastUpdatedDate = output.lastUpdatedDate
            self.name = output.name
            self.outputContexts = output.outputContexts
            self.parentIntentSignature = output.parentIntentSignature
            self.rejectionStatement = output.rejectionStatement
            self.sampleUtterances = output.sampleUtterances
            self.slots = output.slots
            self.version = output.version
        } else {
            self.checksum = nil
            self.conclusionStatement = nil
            self.confirmationPrompt = nil
            self.createdDate = nil
            self.description = nil
            self.dialogCodeHook = nil
            self.followUpPrompt = nil
            self.fulfillmentActivity = nil
            self.inputContexts = nil
            self.kendraConfiguration = nil
            self.lastUpdatedDate = nil
            self.name = nil
            self.outputContexts = nil
            self.parentIntentSignature = nil
            self.rejectionStatement = nil
            self.sampleUtterances = nil
            self.slots = nil
            self.version = nil
        }
    }
}

public struct CreateIntentVersionOutputResponse: Swift.Equatable {
    /// Checksum of the intent version created.
    public var checksum: Swift.String?
    /// After the Lambda function specified in the
    ///         fulfillmentActivity field fulfills the intent, Amazon Lex
    ///       conveys this statement to the user.
    public var conclusionStatement: LexModelBuildingClientTypes.Statement?
    /// If defined, the prompt that Amazon Lex uses to confirm the user's
    ///       intent before fulfilling it.
    public var confirmationPrompt: LexModelBuildingClientTypes.Prompt?
    /// The date that the intent was created.
    public var createdDate: ClientRuntime.Date?
    /// A description of the intent.
    public var description: Swift.String?
    /// If defined, Amazon Lex invokes this Lambda function for each user
    ///       input.
    public var dialogCodeHook: LexModelBuildingClientTypes.CodeHook?
    /// If defined, Amazon Lex uses this prompt to solicit additional user
    ///       activity after the intent is fulfilled.
    public var followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt?
    ///  Describes how the intent is fulfilled.
    public var fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity?
    /// An array of InputContext objects that lists the contexts
    ///       that must be active for Amazon Lex to choose the intent in a conversation with
    ///       the user.
    public var inputContexts: [LexModelBuildingClientTypes.InputContext]?
    /// Configuration information, if any, for connecting an Amazon Kendra
    ///       index with the AMAZON.KendraSearchIntent intent.
    public var kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration?
    /// The date that the intent was updated.
    public var lastUpdatedDate: ClientRuntime.Date?
    /// The name of the intent.
    public var name: Swift.String?
    /// An array of OutputContext objects that lists the contexts
    ///       that the intent activates when the intent is fulfilled.
    public var outputContexts: [LexModelBuildingClientTypes.OutputContext]?
    /// A unique identifier for a built-in intent.
    public var parentIntentSignature: Swift.String?
    /// If the user answers "no" to the question defined in
    ///         confirmationPrompt, Amazon Lex responds with this statement to
    ///       acknowledge that the intent was canceled.
    public var rejectionStatement: LexModelBuildingClientTypes.Statement?
    /// An array of sample utterances configured for the intent.
    public var sampleUtterances: [Swift.String]?
    /// An array of slot types that defines the information required to
    ///       fulfill the intent.
    public var slots: [LexModelBuildingClientTypes.Slot]?
    /// The version number assigned to the new version of the
    ///       intent.
    public var version: Swift.String?

    public init (
        checksum: Swift.String? = nil,
        conclusionStatement: LexModelBuildingClientTypes.Statement? = nil,
        confirmationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createdDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        dialogCodeHook: LexModelBuildingClientTypes.CodeHook? = nil,
        followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt? = nil,
        fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity? = nil,
        inputContexts: [LexModelBuildingClientTypes.InputContext]? = nil,
        kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration? = nil,
        lastUpdatedDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        outputContexts: [LexModelBuildingClientTypes.OutputContext]? = nil,
        parentIntentSignature: Swift.String? = nil,
        rejectionStatement: LexModelBuildingClientTypes.Statement? = nil,
        sampleUtterances: [Swift.String]? = nil,
        slots: [LexModelBuildingClientTypes.Slot]? = nil,
        version: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.conclusionStatement = conclusionStatement
        self.confirmationPrompt = confirmationPrompt
        self.createdDate = createdDate
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.followUpPrompt = followUpPrompt
        self.fulfillmentActivity = fulfillmentActivity
        self.inputContexts = inputContexts
        self.kendraConfiguration = kendraConfiguration
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.rejectionStatement = rejectionStatement
        self.sampleUtterances = sampleUtterances
        self.slots = slots
        self.version = version
    }
}

struct CreateIntentVersionOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let slots: [LexModelBuildingClientTypes.Slot]?
    public let sampleUtterances: [Swift.String]?
    public let confirmationPrompt: LexModelBuildingClientTypes.Prompt?
    public let rejectionStatement: LexModelBuildingClientTypes.Statement?
    public let followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt?
    public let conclusionStatement: LexModelBuildingClientTypes.Statement?
    public let dialogCodeHook: LexModelBuildingClientTypes.CodeHook?
    public let fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity?
    public let parentIntentSignature: Swift.String?
    public let lastUpdatedDate: ClientRuntime.Date?
    public let createdDate: ClientRuntime.Date?
    public let version: Swift.String?
    public let checksum: Swift.String?
    public let kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration?
    public let inputContexts: [LexModelBuildingClientTypes.InputContext]?
    public let outputContexts: [LexModelBuildingClientTypes.OutputContext]?
}

extension CreateIntentVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
        case conclusionStatement
        case confirmationPrompt
        case createdDate
        case description
        case dialogCodeHook
        case followUpPrompt
        case fulfillmentActivity
        case inputContexts
        case kendraConfiguration
        case lastUpdatedDate
        case name
        case outputContexts
        case parentIntentSignature
        case rejectionStatement
        case sampleUtterances
        case slots
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let slotsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Slot?].self, forKey: .slots)
        var slotsDecoded0:[LexModelBuildingClientTypes.Slot]? = nil
        if let slotsContainer = slotsContainer {
            slotsDecoded0 = [LexModelBuildingClientTypes.Slot]()
            for structure0 in slotsContainer {
                if let structure0 = structure0 {
                    slotsDecoded0?.append(structure0)
                }
            }
        }
        slots = slotsDecoded0
        let sampleUtterancesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sampleUtterances)
        var sampleUtterancesDecoded0:[Swift.String]? = nil
        if let sampleUtterancesContainer = sampleUtterancesContainer {
            sampleUtterancesDecoded0 = [Swift.String]()
            for string0 in sampleUtterancesContainer {
                if let string0 = string0 {
                    sampleUtterancesDecoded0?.append(string0)
                }
            }
        }
        sampleUtterances = sampleUtterancesDecoded0
        let confirmationPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Prompt.self, forKey: .confirmationPrompt)
        confirmationPrompt = confirmationPromptDecoded
        let rejectionStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .rejectionStatement)
        rejectionStatement = rejectionStatementDecoded
        let followUpPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.FollowUpPrompt.self, forKey: .followUpPrompt)
        followUpPrompt = followUpPromptDecoded
        let conclusionStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .conclusionStatement)
        conclusionStatement = conclusionStatementDecoded
        let dialogCodeHookDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.CodeHook.self, forKey: .dialogCodeHook)
        dialogCodeHook = dialogCodeHookDecoded
        let fulfillmentActivityDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.FulfillmentActivity.self, forKey: .fulfillmentActivity)
        fulfillmentActivity = fulfillmentActivityDecoded
        let parentIntentSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentIntentSignature)
        parentIntentSignature = parentIntentSignatureDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let kendraConfigurationDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.KendraConfiguration.self, forKey: .kendraConfiguration)
        kendraConfiguration = kendraConfigurationDecoded
        let inputContextsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.InputContext?].self, forKey: .inputContexts)
        var inputContextsDecoded0:[LexModelBuildingClientTypes.InputContext]? = nil
        if let inputContextsContainer = inputContextsContainer {
            inputContextsDecoded0 = [LexModelBuildingClientTypes.InputContext]()
            for structure0 in inputContextsContainer {
                if let structure0 = structure0 {
                    inputContextsDecoded0?.append(structure0)
                }
            }
        }
        inputContexts = inputContextsDecoded0
        let outputContextsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.OutputContext?].self, forKey: .outputContexts)
        var outputContextsDecoded0:[LexModelBuildingClientTypes.OutputContext]? = nil
        if let outputContextsContainer = outputContextsContainer {
            outputContextsDecoded0 = [LexModelBuildingClientTypes.OutputContext]()
            for structure0 in outputContextsContainer {
                if let structure0 = structure0 {
                    outputContextsDecoded0?.append(structure0)
                }
            }
        }
        outputContexts = outputContextsDecoded0
    }
}

public struct CreateSlotTypeVersionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSlotTypeVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateSlotTypeVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateSlotTypeVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateSlotTypeVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSlotTypeVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateSlotTypeVersionOutputError>
}

extension CreateSlotTypeVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSlotTypeVersionInput(checksum: \(Swift.String(describing: checksum)), name: \(Swift.String(describing: name)))"}
}

extension CreateSlotTypeVersionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checksum = checksum {
            try encodeContainer.encode(checksum, forKey: .checksum)
        }
    }
}

public struct CreateSlotTypeVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSlotTypeVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateSlotTypeVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateSlotTypeVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateSlotTypeVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSlotTypeVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateSlotTypeVersionOutputError>
}

public struct CreateSlotTypeVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSlotTypeVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateSlotTypeVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateSlotTypeVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateSlotTypeVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSlotTypeVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateSlotTypeVersionOutputError>
}

public struct CreateSlotTypeVersionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSlotTypeVersionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateSlotTypeVersionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateSlotTypeVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/slottypes/\(name.urlPercentEncoding())/versions"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateSlotTypeVersionInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSlotTypeVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateSlotTypeVersionOutputError>
}

public struct CreateSlotTypeVersionInput: Swift.Equatable {
    /// Checksum for the $LATEST version of the slot type that
    ///       you want to publish. If you specify a checksum and the
    ///         $LATEST version of the slot type has a different checksum,
    ///       Amazon Lex returns a PreconditionFailedException exception and
    ///       doesn't publish the new version. If you don't specify a checksum, Amazon Lex
    ///       publishes the $LATEST version.
    public var checksum: Swift.String?
    /// The name of the slot type that you want to create a new version
    ///       for. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init (
        checksum: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.name = name
    }
}

struct CreateSlotTypeVersionInputBody: Swift.Equatable {
    public let checksum: Swift.String?
}

extension CreateSlotTypeVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
    }
}

extension CreateSlotTypeVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSlotTypeVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PreconditionFailedException" : self = .preconditionFailedException(try PreconditionFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateSlotTypeVersionOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case preconditionFailedException(PreconditionFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSlotTypeVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSlotTypeVersionOutputResponse(checksum: \(Swift.String(describing: checksum)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), enumerationValues: \(Swift.String(describing: enumerationValues)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), name: \(Swift.String(describing: name)), parentSlotTypeSignature: \(Swift.String(describing: parentSlotTypeSignature)), slotTypeConfigurations: \(Swift.String(describing: slotTypeConfigurations)), valueSelectionStrategy: \(Swift.String(describing: valueSelectionStrategy)), version: \(Swift.String(describing: version)))"}
}

extension CreateSlotTypeVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateSlotTypeVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.checksum = output.checksum
            self.createdDate = output.createdDate
            self.description = output.description
            self.enumerationValues = output.enumerationValues
            self.lastUpdatedDate = output.lastUpdatedDate
            self.name = output.name
            self.parentSlotTypeSignature = output.parentSlotTypeSignature
            self.slotTypeConfigurations = output.slotTypeConfigurations
            self.valueSelectionStrategy = output.valueSelectionStrategy
            self.version = output.version
        } else {
            self.checksum = nil
            self.createdDate = nil
            self.description = nil
            self.enumerationValues = nil
            self.lastUpdatedDate = nil
            self.name = nil
            self.parentSlotTypeSignature = nil
            self.slotTypeConfigurations = nil
            self.valueSelectionStrategy = nil
            self.version = nil
        }
    }
}

public struct CreateSlotTypeVersionOutputResponse: Swift.Equatable {
    /// Checksum of the $LATEST version of the slot
    ///       type.
    public var checksum: Swift.String?
    /// The date that the slot type was created.
    public var createdDate: ClientRuntime.Date?
    /// A description of the slot type.
    public var description: Swift.String?
    /// A list of EnumerationValue objects that defines the
    ///       values that the slot type can take.
    public var enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]?
    /// The date that the slot type was updated. When you create a
    ///       resource, the creation date and last update date are the same.
    public var lastUpdatedDate: ClientRuntime.Date?
    /// The name of the slot type.
    public var name: Swift.String?
    /// The built-in slot type used a the parent of the slot type.
    public var parentSlotTypeSignature: Swift.String?
    /// Configuration information that extends the parent built-in slot
    ///       type.
    public var slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]?
    /// The strategy that Amazon Lex uses to determine the value of the slot.
    ///       For more information, see PutSlotType.
    public var valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy?
    /// The version assigned to the new slot type version.
    public var version: Swift.String?

    public init (
        checksum: Swift.String? = nil,
        createdDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]? = nil,
        lastUpdatedDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        parentSlotTypeSignature: Swift.String? = nil,
        slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]? = nil,
        valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy? = nil,
        version: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.createdDate = createdDate
        self.description = description
        self.enumerationValues = enumerationValues
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.parentSlotTypeSignature = parentSlotTypeSignature
        self.slotTypeConfigurations = slotTypeConfigurations
        self.valueSelectionStrategy = valueSelectionStrategy
        self.version = version
    }
}

struct CreateSlotTypeVersionOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]?
    public let lastUpdatedDate: ClientRuntime.Date?
    public let createdDate: ClientRuntime.Date?
    public let version: Swift.String?
    public let checksum: Swift.String?
    public let valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy?
    public let parentSlotTypeSignature: Swift.String?
    public let slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]?
}

extension CreateSlotTypeVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
        case createdDate
        case description
        case enumerationValues
        case lastUpdatedDate
        case name
        case parentSlotTypeSignature
        case slotTypeConfigurations
        case valueSelectionStrategy
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let enumerationValuesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.EnumerationValue?].self, forKey: .enumerationValues)
        var enumerationValuesDecoded0:[LexModelBuildingClientTypes.EnumerationValue]? = nil
        if let enumerationValuesContainer = enumerationValuesContainer {
            enumerationValuesDecoded0 = [LexModelBuildingClientTypes.EnumerationValue]()
            for structure0 in enumerationValuesContainer {
                if let structure0 = structure0 {
                    enumerationValuesDecoded0?.append(structure0)
                }
            }
        }
        enumerationValues = enumerationValuesDecoded0
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let valueSelectionStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.SlotValueSelectionStrategy.self, forKey: .valueSelectionStrategy)
        valueSelectionStrategy = valueSelectionStrategyDecoded
        let parentSlotTypeSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentSlotTypeSignature)
        parentSlotTypeSignature = parentSlotTypeSignatureDecoded
        let slotTypeConfigurationsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.SlotTypeConfiguration?].self, forKey: .slotTypeConfigurations)
        var slotTypeConfigurationsDecoded0:[LexModelBuildingClientTypes.SlotTypeConfiguration]? = nil
        if let slotTypeConfigurationsContainer = slotTypeConfigurationsContainer {
            slotTypeConfigurationsDecoded0 = [LexModelBuildingClientTypes.SlotTypeConfiguration]()
            for structure0 in slotTypeConfigurationsContainer {
                if let structure0 = structure0 {
                    slotTypeConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        slotTypeConfigurations = slotTypeConfigurationsDecoded0
    }
}

extension DeleteBotAliasInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBotAliasInput(botName: \(Swift.String(describing: botName)), name: \(Swift.String(describing: name)))"}
}

extension DeleteBotAliasInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBotAliasInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBotAliasInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBotAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBotAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBotAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBotAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBotAliasOutputError>
}

public struct DeleteBotAliasInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBotAliasInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBotAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBotAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBotAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBotAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBotAliasOutputError>
}

public struct DeleteBotAliasInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBotAliasInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteBotAliasInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBotAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let botName = input.botName else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("botName is nil and needs a value for the path of this operation"))))
        }
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(botName.urlPercentEncoding())/aliases/\(name.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteBotAliasInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBotAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBotAliasOutputError>
}

public struct DeleteBotAliasInput: Swift.Equatable {
    /// The name of the bot that the alias points to.
    /// This member is required.
    public var botName: Swift.String?
    /// The name of the alias to delete. The name is case sensitive.
    ///
    /// This member is required.
    public var name: Swift.String?

    public init (
        botName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.botName = botName
        self.name = name
    }
}

struct DeleteBotAliasInputBody: Swift.Equatable {
}

extension DeleteBotAliasInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBotAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBotAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBotAliasOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBotAliasOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBotAliasOutputResponse()"}
}

extension DeleteBotAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBotAliasOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBotAliasOutputResponseBody: Swift.Equatable {
}

extension DeleteBotAliasOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBotChannelAssociationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBotChannelAssociationInput(botAlias: \(Swift.String(describing: botAlias)), botName: \(Swift.String(describing: botName)), name: \(Swift.String(describing: name)))"}
}

extension DeleteBotChannelAssociationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBotChannelAssociationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBotChannelAssociationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBotChannelAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBotChannelAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBotChannelAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBotChannelAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBotChannelAssociationOutputError>
}

public struct DeleteBotChannelAssociationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBotChannelAssociationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBotChannelAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBotChannelAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBotChannelAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBotChannelAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBotChannelAssociationOutputError>
}

public struct DeleteBotChannelAssociationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBotChannelAssociationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteBotChannelAssociationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBotChannelAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let botName = input.botName else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("botName is nil and needs a value for the path of this operation"))))
        }
        guard let botAlias = input.botAlias else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("botAlias is nil and needs a value for the path of this operation"))))
        }
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(botName.urlPercentEncoding())/aliases/\(botAlias.urlPercentEncoding())/channels/\(name.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteBotChannelAssociationInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBotChannelAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBotChannelAssociationOutputError>
}

public struct DeleteBotChannelAssociationInput: Swift.Equatable {
    /// An alias that points to the specific version of the Amazon Lex bot to
    ///       which this association is being made.
    /// This member is required.
    public var botAlias: Swift.String?
    /// The name of the Amazon Lex bot.
    /// This member is required.
    public var botName: Swift.String?
    /// The name of the association. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init (
        botAlias: Swift.String? = nil,
        botName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.botAlias = botAlias
        self.botName = botName
        self.name = name
    }
}

struct DeleteBotChannelAssociationInputBody: Swift.Equatable {
}

extension DeleteBotChannelAssociationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBotChannelAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBotChannelAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBotChannelAssociationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBotChannelAssociationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBotChannelAssociationOutputResponse()"}
}

extension DeleteBotChannelAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBotChannelAssociationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBotChannelAssociationOutputResponseBody: Swift.Equatable {
}

extension DeleteBotChannelAssociationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBotInput(name: \(Swift.String(describing: name)))"}
}

extension DeleteBotInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBotOutputError>
}

public struct DeleteBotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBotOutputError>
}

public struct DeleteBotInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBotInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteBotInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(name.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteBotInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBotOutputError>
}

public struct DeleteBotInput: Swift.Equatable {
    /// The name of the bot. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteBotInputBody: Swift.Equatable {
}

extension DeleteBotInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBotOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBotOutputResponse()"}
}

extension DeleteBotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBotOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBotOutputResponseBody: Swift.Equatable {
}

extension DeleteBotOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBotVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBotVersionInput(name: \(Swift.String(describing: name)), version: \(Swift.String(describing: version)))"}
}

extension DeleteBotVersionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteBotVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBotVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBotVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBotVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBotVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBotVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBotVersionOutputError>
}

public struct DeleteBotVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBotVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteBotVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBotVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteBotVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBotVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBotVersionOutputError>
}

public struct DeleteBotVersionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteBotVersionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteBotVersionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteBotVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        guard let version = input.version else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("version is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(name.urlPercentEncoding())/versions/\(version.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteBotVersionInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteBotVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteBotVersionOutputError>
}

public struct DeleteBotVersionInput: Swift.Equatable {
    /// The name of the bot.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the bot to delete. You cannot delete the
    ///         $LATEST version of the bot. To delete the
    ///         $LATEST version, use the DeleteBot
    ///       operation.
    /// This member is required.
    public var version: Swift.String?

    public init (
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

struct DeleteBotVersionInputBody: Swift.Equatable {
}

extension DeleteBotVersionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteBotVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBotVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBotVersionOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBotVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteBotVersionOutputResponse()"}
}

extension DeleteBotVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBotVersionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteBotVersionOutputResponseBody: Swift.Equatable {
}

extension DeleteBotVersionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteIntentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteIntentInput(name: \(Swift.String(describing: name)))"}
}

extension DeleteIntentInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteIntentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIntentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIntentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIntentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIntentOutputError>
}

public struct DeleteIntentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIntentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIntentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIntentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIntentOutputError>
}

public struct DeleteIntentInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIntentInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteIntentInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/intents/\(name.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteIntentInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIntentOutputError>
}

public struct DeleteIntentInput: Swift.Equatable {
    /// The name of the intent. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteIntentInputBody: Swift.Equatable {
}

extension DeleteIntentInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteIntentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteIntentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteIntentOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteIntentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteIntentOutputResponse()"}
}

extension DeleteIntentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteIntentOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteIntentOutputResponseBody: Swift.Equatable {
}

extension DeleteIntentOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteIntentVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteIntentVersionInput(name: \(Swift.String(describing: name)), version: \(Swift.String(describing: version)))"}
}

extension DeleteIntentVersionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteIntentVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIntentVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIntentVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIntentVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIntentVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIntentVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIntentVersionOutputError>
}

public struct DeleteIntentVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIntentVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteIntentVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIntentVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteIntentVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIntentVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIntentVersionOutputError>
}

public struct DeleteIntentVersionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteIntentVersionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteIntentVersionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteIntentVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        guard let version = input.version else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("version is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/intents/\(name.urlPercentEncoding())/versions/\(version.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteIntentVersionInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteIntentVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteIntentVersionOutputError>
}

public struct DeleteIntentVersionInput: Swift.Equatable {
    /// The name of the intent.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the intent to delete. You cannot delete the
    ///         $LATEST version of the intent. To delete the
    ///         $LATEST version, use the DeleteIntent
    ///       operation.
    /// This member is required.
    public var version: Swift.String?

    public init (
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

struct DeleteIntentVersionInputBody: Swift.Equatable {
}

extension DeleteIntentVersionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteIntentVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteIntentVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteIntentVersionOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteIntentVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteIntentVersionOutputResponse()"}
}

extension DeleteIntentVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteIntentVersionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteIntentVersionOutputResponseBody: Swift.Equatable {
}

extension DeleteIntentVersionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSlotTypeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSlotTypeInput(name: \(Swift.String(describing: name)))"}
}

extension DeleteSlotTypeInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteSlotTypeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSlotTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSlotTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSlotTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSlotTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSlotTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSlotTypeOutputError>
}

public struct DeleteSlotTypeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSlotTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSlotTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSlotTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSlotTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSlotTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSlotTypeOutputError>
}

public struct DeleteSlotTypeInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSlotTypeInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteSlotTypeInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSlotTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/slottypes/\(name.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteSlotTypeInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSlotTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSlotTypeOutputError>
}

public struct DeleteSlotTypeInput: Swift.Equatable {
    /// The name of the slot type. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteSlotTypeInputBody: Swift.Equatable {
}

extension DeleteSlotTypeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSlotTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSlotTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSlotTypeOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSlotTypeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSlotTypeOutputResponse()"}
}

extension DeleteSlotTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteSlotTypeOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteSlotTypeOutputResponseBody: Swift.Equatable {
}

extension DeleteSlotTypeOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSlotTypeVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSlotTypeVersionInput(name: \(Swift.String(describing: name)), version: \(Swift.String(describing: version)))"}
}

extension DeleteSlotTypeVersionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteSlotTypeVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSlotTypeVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSlotTypeVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSlotTypeVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSlotTypeVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSlotTypeVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSlotTypeVersionOutputError>
}

public struct DeleteSlotTypeVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSlotTypeVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSlotTypeVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSlotTypeVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSlotTypeVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSlotTypeVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSlotTypeVersionOutputError>
}

public struct DeleteSlotTypeVersionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSlotTypeVersionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteSlotTypeVersionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSlotTypeVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        guard let version = input.version else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("version is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/slottypes/\(name.urlPercentEncoding())/version/\(version.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteSlotTypeVersionInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSlotTypeVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSlotTypeVersionOutputError>
}

public struct DeleteSlotTypeVersionInput: Swift.Equatable {
    /// The name of the slot type.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the slot type to delete. You cannot delete the
    ///         $LATEST version of the slot type. To delete the
    ///         $LATEST version, use the DeleteSlotType
    ///       operation.
    /// This member is required.
    public var version: Swift.String?

    public init (
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

struct DeleteSlotTypeVersionInputBody: Swift.Equatable {
}

extension DeleteSlotTypeVersionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSlotTypeVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSlotTypeVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSlotTypeVersionOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSlotTypeVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSlotTypeVersionOutputResponse()"}
}

extension DeleteSlotTypeVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteSlotTypeVersionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteSlotTypeVersionOutputResponseBody: Swift.Equatable {
}

extension DeleteSlotTypeVersionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteUtterancesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUtterancesInput(botName: \(Swift.String(describing: botName)), userId: \(Swift.String(describing: userId)))"}
}

extension DeleteUtterancesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteUtterancesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteUtterancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteUtterancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteUtterancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteUtterancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteUtterancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteUtterancesOutputError>
}

public struct DeleteUtterancesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteUtterancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteUtterancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteUtterancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteUtterancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteUtterancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteUtterancesOutputError>
}

public struct DeleteUtterancesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteUtterancesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteUtterancesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteUtterancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let botName = input.botName else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("botName is nil and needs a value for the path of this operation"))))
        }
        guard let userId = input.userId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("userId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(botName.urlPercentEncoding())/utterances/\(userId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteUtterancesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteUtterancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteUtterancesOutputError>
}

public struct DeleteUtterancesInput: Swift.Equatable {
    /// The name of the bot that stored the utterances.
    /// This member is required.
    public var botName: Swift.String?
    ///  The unique identifier for the user that made the utterances. This
    ///       is the user ID that was sent in the <a href="http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html">PostContent or <a href="http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText operation request that contained the
    ///       utterance.
    /// This member is required.
    public var userId: Swift.String?

    public init (
        botName: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.botName = botName
        self.userId = userId
    }
}

struct DeleteUtterancesInputBody: Swift.Equatable {
}

extension DeleteUtterancesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteUtterancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteUtterancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteUtterancesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUtterancesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteUtterancesOutputResponse()"}
}

extension DeleteUtterancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteUtterancesOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteUtterancesOutputResponseBody: Swift.Equatable {
}

extension DeleteUtterancesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension LexModelBuildingClientTypes {
    public enum Destination: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cloudwatchLogs
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [Destination] {
            return [
                .cloudwatchLogs,
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cloudwatchLogs: return "CLOUDWATCH_LOGS"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Destination(rawValue: rawValue) ?? Destination.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes.EnumerationValue: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case synonyms
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let synonyms = synonyms {
            var synonymsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .synonyms)
            for synonymlist0 in synonyms {
                try synonymsContainer.encode(synonymlist0)
            }
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let synonymsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .synonyms)
        var synonymsDecoded0:[Swift.String]? = nil
        if let synonymsContainer = synonymsContainer {
            synonymsDecoded0 = [Swift.String]()
            for string0 in synonymsContainer {
                if let string0 = string0 {
                    synonymsDecoded0?.append(string0)
                }
            }
        }
        synonyms = synonymsDecoded0
    }
}

extension LexModelBuildingClientTypes.EnumerationValue: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnumerationValue(synonyms: \(Swift.String(describing: synonyms)), value: \(Swift.String(describing: value)))"}
}

extension LexModelBuildingClientTypes {
    /// Each slot type can have a set of values. Each enumeration value
    ///       represents a value the slot type can take.
    ///          For example, a pizza ordering bot could have a slot type that
    ///       specifies the type of crust that the pizza should have. The slot type
    ///       could include the values
    ///
    ///
    ///                thick
    ///
    ///
    ///                thin
    ///
    ///
    ///                stuffed
    ///
    ///
    public struct EnumerationValue: Swift.Equatable {
        /// Additional values related to the slot type value.
        public var synonyms: [Swift.String]?
        /// The value of the slot type.
        /// This member is required.
        public var value: Swift.String?

        public init (
            synonyms: [Swift.String]? = nil,
            value: Swift.String? = nil
        )
        {
            self.synonyms = synonyms
            self.value = value
        }
    }

}

extension LexModelBuildingClientTypes {
    public enum ExportStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportStatus] {
            return [
                .failed,
                .inProgress,
                .ready,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .ready: return "READY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportStatus(rawValue: rawValue) ?? ExportStatus.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes {
    public enum ExportType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alexaSkillsKit
        case lex
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportType] {
            return [
                .alexaSkillsKit,
                .lex,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alexaSkillsKit: return "ALEXA_SKILLS_KIT"
            case .lex: return "LEX"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportType(rawValue: rawValue) ?? ExportType.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes.FollowUpPrompt: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case prompt
        case rejectionStatement
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let prompt = prompt {
            try encodeContainer.encode(prompt, forKey: .prompt)
        }
        if let rejectionStatement = rejectionStatement {
            try encodeContainer.encode(rejectionStatement, forKey: .rejectionStatement)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let promptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Prompt.self, forKey: .prompt)
        prompt = promptDecoded
        let rejectionStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .rejectionStatement)
        rejectionStatement = rejectionStatementDecoded
    }
}

extension LexModelBuildingClientTypes.FollowUpPrompt: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FollowUpPrompt(prompt: \(Swift.String(describing: prompt)), rejectionStatement: \(Swift.String(describing: rejectionStatement)))"}
}

extension LexModelBuildingClientTypes {
    /// A prompt for additional activity after an intent is fulfilled. For
    ///       example, after the OrderPizza intent is fulfilled, you might
    ///       prompt the user to find out whether the user wants to order
    ///       drinks.
    public struct FollowUpPrompt: Swift.Equatable {
        /// Prompts for information from the user.
        /// This member is required.
        public var prompt: LexModelBuildingClientTypes.Prompt?
        /// If the user answers "no" to the question defined in the
        ///         prompt field, Amazon Lex responds with this statement to
        ///       acknowledge that the intent was canceled.
        /// This member is required.
        public var rejectionStatement: LexModelBuildingClientTypes.Statement?

        public init (
            prompt: LexModelBuildingClientTypes.Prompt? = nil,
            rejectionStatement: LexModelBuildingClientTypes.Statement? = nil
        )
        {
            self.prompt = prompt
            self.rejectionStatement = rejectionStatement
        }
    }

}

extension LexModelBuildingClientTypes.FulfillmentActivity: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeHook
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codeHook = codeHook {
            try encodeContainer.encode(codeHook, forKey: .codeHook)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.FulfillmentActivityType.self, forKey: .type)
        type = typeDecoded
        let codeHookDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.CodeHook.self, forKey: .codeHook)
        codeHook = codeHookDecoded
    }
}

extension LexModelBuildingClientTypes.FulfillmentActivity: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FulfillmentActivity(codeHook: \(Swift.String(describing: codeHook)), type: \(Swift.String(describing: type)))"}
}

extension LexModelBuildingClientTypes {
    ///  Describes how the intent is fulfilled after the user provides all
    ///       of the information required for the intent. You can provide a Lambda
    ///       function to process the intent, or you can return the intent information
    ///       to the client application. We recommend that you use a Lambda function so
    ///       that the relevant logic lives in the Cloud and limit the client-side code
    ///       primarily to presentation. If you need to update the logic, you only
    ///       update the Lambda function; you don't need to upgrade your client
    ///       application.
    ///
    ///
    ///          Consider the following examples:
    ///
    ///
    ///                In a pizza ordering application, after the user provides all of
    ///           the information for placing an order, you use a Lambda function to
    ///           place an order with a pizzeria.
    ///
    ///
    ///                In a gaming application, when a user says "pick up a rock,"
    ///           this information must go back to the client application so that it can
    ///           perform the operation and update the graphics. In this case, you want
    ///           Amazon Lex to return the intent data to the client.
    ///
    ///
    public struct FulfillmentActivity: Swift.Equatable {
        ///  A description of the Lambda function that is run to fulfill the
        ///       intent.
        public var codeHook: LexModelBuildingClientTypes.CodeHook?
        ///  How the intent should be fulfilled, either by running a Lambda
        ///       function or by returning the slot data to the client application.
        ///
        /// This member is required.
        public var type: LexModelBuildingClientTypes.FulfillmentActivityType?

        public init (
            codeHook: LexModelBuildingClientTypes.CodeHook? = nil,
            type: LexModelBuildingClientTypes.FulfillmentActivityType? = nil
        )
        {
            self.codeHook = codeHook
            self.type = type
        }
    }

}

extension LexModelBuildingClientTypes {
    public enum FulfillmentActivityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case codeHook
        case returnIntent
        case sdkUnknown(Swift.String)

        public static var allCases: [FulfillmentActivityType] {
            return [
                .codeHook,
                .returnIntent,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .codeHook: return "CodeHook"
            case .returnIntent: return "ReturnIntent"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FulfillmentActivityType(rawValue: rawValue) ?? FulfillmentActivityType.sdkUnknown(rawValue)
        }
    }
}

extension GetBotAliasInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotAliasInput(botName: \(Swift.String(describing: botName)), name: \(Swift.String(describing: name)))"}
}

extension GetBotAliasInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBotAliasInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotAliasInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBotAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBotAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotAliasOutputError>
}

public struct GetBotAliasInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotAliasInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBotAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBotAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotAliasOutputError>
}

public struct GetBotAliasInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotAliasInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetBotAliasInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let botName = input.botName else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("botName is nil and needs a value for the path of this operation"))))
        }
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(botName.urlPercentEncoding())/aliases/\(name.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetBotAliasInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotAliasOutputError>
}

public struct GetBotAliasInput: Swift.Equatable {
    /// The name of the bot.
    /// This member is required.
    public var botName: Swift.String?
    /// The name of the bot alias. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init (
        botName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.botName = botName
        self.name = name
    }
}

struct GetBotAliasInputBody: Swift.Equatable {
}

extension GetBotAliasInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBotAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBotAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBotAliasOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBotAliasOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotAliasOutputResponse(botName: \(Swift.String(describing: botName)), botVersion: \(Swift.String(describing: botVersion)), checksum: \(Swift.String(describing: checksum)), conversationLogs: \(Swift.String(describing: conversationLogs)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), name: \(Swift.String(describing: name)))"}
}

extension GetBotAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBotAliasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.botName = output.botName
            self.botVersion = output.botVersion
            self.checksum = output.checksum
            self.conversationLogs = output.conversationLogs
            self.createdDate = output.createdDate
            self.description = output.description
            self.lastUpdatedDate = output.lastUpdatedDate
            self.name = output.name
        } else {
            self.botName = nil
            self.botVersion = nil
            self.checksum = nil
            self.conversationLogs = nil
            self.createdDate = nil
            self.description = nil
            self.lastUpdatedDate = nil
            self.name = nil
        }
    }
}

public struct GetBotAliasOutputResponse: Swift.Equatable {
    /// The name of the bot that the alias points to.
    public var botName: Swift.String?
    /// The version of the bot that the alias points to.
    public var botVersion: Swift.String?
    /// Checksum of the bot alias.
    public var checksum: Swift.String?
    /// The settings that determine how Amazon Lex uses conversation logs for the
    ///       alias.
    public var conversationLogs: LexModelBuildingClientTypes.ConversationLogsResponse?
    /// The date that the bot alias was created.
    public var createdDate: ClientRuntime.Date?
    /// A description of the bot alias.
    public var description: Swift.String?
    /// The date that the bot alias was updated. When you create a
    ///       resource, the creation date and the last updated date are the
    ///       same.
    public var lastUpdatedDate: ClientRuntime.Date?
    /// The name of the bot alias.
    public var name: Swift.String?

    public init (
        botName: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        checksum: Swift.String? = nil,
        conversationLogs: LexModelBuildingClientTypes.ConversationLogsResponse? = nil,
        createdDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        lastUpdatedDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil
    )
    {
        self.botName = botName
        self.botVersion = botVersion
        self.checksum = checksum
        self.conversationLogs = conversationLogs
        self.createdDate = createdDate
        self.description = description
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
    }
}

struct GetBotAliasOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let botVersion: Swift.String?
    public let botName: Swift.String?
    public let lastUpdatedDate: ClientRuntime.Date?
    public let createdDate: ClientRuntime.Date?
    public let checksum: Swift.String?
    public let conversationLogs: LexModelBuildingClientTypes.ConversationLogsResponse?
}

extension GetBotAliasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botName
        case botVersion
        case checksum
        case conversationLogs
        case createdDate
        case description
        case lastUpdatedDate
        case name
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let botNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botName)
        botName = botNameDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let conversationLogsDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ConversationLogsResponse.self, forKey: .conversationLogs)
        conversationLogs = conversationLogsDecoded
    }
}

extension GetBotAliasesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotAliasesInput(botName: \(Swift.String(describing: botName)), maxResults: \(Swift.String(describing: maxResults)), nameContains: \(Swift.String(describing: nameContains)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetBotAliasesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBotAliasesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotAliasesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBotAliasesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotAliasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBotAliasesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotAliasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotAliasesOutputError>
}

public struct GetBotAliasesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotAliasesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBotAliasesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotAliasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nameContains = input.operationInput.nameContains {
            let nameContainsQueryItem = ClientRuntime.URLQueryItem(name: "nameContains".urlPercentEncoding(), value: Swift.String(nameContains).urlPercentEncoding())
            input.builder.withQueryItem(nameContainsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBotAliasesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotAliasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotAliasesOutputError>
}

public struct GetBotAliasesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotAliasesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetBotAliasesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotAliasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let botName = input.botName else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("botName is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(botName.urlPercentEncoding())/aliases"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetBotAliasesInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotAliasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotAliasesOutputError>
}

public struct GetBotAliasesInput: Swift.Equatable {
    /// The name of the bot.
    /// This member is required.
    public var botName: Swift.String?
    /// The maximum number of aliases to return in the response. The
    ///       default is 50. .
    public var maxResults: Swift.Int?
    /// Substring to match in bot alias names. An alias will be returned if
    ///       any part of its name matches the substring. For example, "xyz" matches
    ///       both "xyzabc" and "abcxyz."
    public var nameContains: Swift.String?
    /// A pagination token for fetching the next page of aliases. If the
    ///       response to this call is truncated, Amazon Lex returns a pagination token in
    ///       the response. To fetch the next page of aliases, specify the pagination
    ///       token in the next request.
    public var nextToken: Swift.String?

    public init (
        botName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botName = botName
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}

struct GetBotAliasesInputBody: Swift.Equatable {
}

extension GetBotAliasesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBotAliasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBotAliasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBotAliasesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBotAliasesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotAliasesOutputResponse(botAliases: \(Swift.String(describing: botAliases)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetBotAliasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBotAliasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.botAliases = output.botAliases
            self.nextToken = output.nextToken
        } else {
            self.botAliases = nil
            self.nextToken = nil
        }
    }
}

public struct GetBotAliasesOutputResponse: Swift.Equatable {
    /// An array of BotAliasMetadata objects, each describing
    ///       a bot alias.
    public var botAliases: [LexModelBuildingClientTypes.BotAliasMetadata]?
    /// A pagination token for fetching next page of aliases. If the
    ///       response to this call is truncated, Amazon Lex returns a pagination token in
    ///       the response. To fetch the next page of aliases, specify the pagination
    ///       token in the next request.
    public var nextToken: Swift.String?

    public init (
        botAliases: [LexModelBuildingClientTypes.BotAliasMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botAliases = botAliases
        self.nextToken = nextToken
    }
}

struct GetBotAliasesOutputResponseBody: Swift.Equatable {
    public let botAliases: [LexModelBuildingClientTypes.BotAliasMetadata]?
    public let nextToken: Swift.String?
}

extension GetBotAliasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botAliases = "BotAliases"
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botAliasesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.BotAliasMetadata?].self, forKey: .botAliases)
        var botAliasesDecoded0:[LexModelBuildingClientTypes.BotAliasMetadata]? = nil
        if let botAliasesContainer = botAliasesContainer {
            botAliasesDecoded0 = [LexModelBuildingClientTypes.BotAliasMetadata]()
            for structure0 in botAliasesContainer {
                if let structure0 = structure0 {
                    botAliasesDecoded0?.append(structure0)
                }
            }
        }
        botAliases = botAliasesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetBotChannelAssociationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotChannelAssociationInput(botAlias: \(Swift.String(describing: botAlias)), botName: \(Swift.String(describing: botName)), name: \(Swift.String(describing: name)))"}
}

extension GetBotChannelAssociationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBotChannelAssociationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotChannelAssociationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBotChannelAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotChannelAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBotChannelAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotChannelAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotChannelAssociationOutputError>
}

public struct GetBotChannelAssociationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotChannelAssociationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBotChannelAssociationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotChannelAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBotChannelAssociationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotChannelAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotChannelAssociationOutputError>
}

public struct GetBotChannelAssociationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotChannelAssociationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetBotChannelAssociationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotChannelAssociationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let botName = input.botName else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("botName is nil and needs a value for the path of this operation"))))
        }
        guard let botAlias = input.botAlias else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("botAlias is nil and needs a value for the path of this operation"))))
        }
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(botName.urlPercentEncoding())/aliases/\(botAlias.urlPercentEncoding())/channels/\(name.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetBotChannelAssociationInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotChannelAssociationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotChannelAssociationOutputError>
}

public struct GetBotChannelAssociationInput: Swift.Equatable {
    /// An alias pointing to the specific version of the Amazon Lex bot to which
    ///       this association is being made.
    /// This member is required.
    public var botAlias: Swift.String?
    /// The name of the Amazon Lex bot.
    /// This member is required.
    public var botName: Swift.String?
    /// The name of the association between the bot and the channel. The
    ///       name is case sensitive.
    /// This member is required.
    public var name: Swift.String?

    public init (
        botAlias: Swift.String? = nil,
        botName: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.botAlias = botAlias
        self.botName = botName
        self.name = name
    }
}

struct GetBotChannelAssociationInputBody: Swift.Equatable {
}

extension GetBotChannelAssociationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBotChannelAssociationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBotChannelAssociationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBotChannelAssociationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBotChannelAssociationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotChannelAssociationOutputResponse(botAlias: \(Swift.String(describing: botAlias)), botConfiguration: \(Swift.String(describing: botConfiguration)), botName: \(Swift.String(describing: botName)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), failureReason: \(Swift.String(describing: failureReason)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)), type: \(Swift.String(describing: type)))"}
}

extension GetBotChannelAssociationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBotChannelAssociationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.botAlias = output.botAlias
            self.botConfiguration = output.botConfiguration
            self.botName = output.botName
            self.createdDate = output.createdDate
            self.description = output.description
            self.failureReason = output.failureReason
            self.name = output.name
            self.status = output.status
            self.type = output.type
        } else {
            self.botAlias = nil
            self.botConfiguration = nil
            self.botName = nil
            self.createdDate = nil
            self.description = nil
            self.failureReason = nil
            self.name = nil
            self.status = nil
            self.type = nil
        }
    }
}

public struct GetBotChannelAssociationOutputResponse: Swift.Equatable {
    /// An alias pointing to the specific version of the Amazon Lex bot to which
    ///       this association is being made.
    public var botAlias: Swift.String?
    /// Provides information that the messaging platform needs to
    ///       communicate with the Amazon Lex bot.
    public var botConfiguration: [Swift.String:Swift.String]?
    /// The name of the Amazon Lex bot.
    public var botName: Swift.String?
    /// The date that the association between the bot and the channel was
    ///       created.
    public var createdDate: ClientRuntime.Date?
    /// A description of the association between the bot and the
    ///       channel.
    public var description: Swift.String?
    /// If status is FAILED, Amazon Lex provides the
    ///       reason that it failed to create the association.
    public var failureReason: Swift.String?
    /// The name of the association between the bot and the
    ///       channel.
    public var name: Swift.String?
    /// The status of the bot channel.
    ///
    ///
    ///
    ///                   CREATED - The channel has been created and is
    ///           ready for use.
    ///
    ///
    ///
    ///                   IN_PROGRESS - Channel creation is in
    ///           progress.
    ///
    ///
    ///
    ///                   FAILED - There was an error creating the channel.
    ///           For information about the reason for the failure, see the
    ///             failureReason field.
    ///
    ///
    public var status: LexModelBuildingClientTypes.ChannelStatus?
    /// The type of the messaging platform.
    public var type: LexModelBuildingClientTypes.ChannelType?

    public init (
        botAlias: Swift.String? = nil,
        botConfiguration: [Swift.String:Swift.String]? = nil,
        botName: Swift.String? = nil,
        createdDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        name: Swift.String? = nil,
        status: LexModelBuildingClientTypes.ChannelStatus? = nil,
        type: LexModelBuildingClientTypes.ChannelType? = nil
    )
    {
        self.botAlias = botAlias
        self.botConfiguration = botConfiguration
        self.botName = botName
        self.createdDate = createdDate
        self.description = description
        self.failureReason = failureReason
        self.name = name
        self.status = status
        self.type = type
    }
}

struct GetBotChannelAssociationOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let botAlias: Swift.String?
    public let botName: Swift.String?
    public let createdDate: ClientRuntime.Date?
    public let type: LexModelBuildingClientTypes.ChannelType?
    public let botConfiguration: [Swift.String:Swift.String]?
    public let status: LexModelBuildingClientTypes.ChannelStatus?
    public let failureReason: Swift.String?
}

extension GetBotChannelAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botAlias
        case botConfiguration
        case botName
        case createdDate
        case description
        case failureReason
        case name
        case status
        case type
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let botAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botAlias)
        botAlias = botAliasDecoded
        let botNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botName)
        botName = botNameDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let typeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ChannelType.self, forKey: .type)
        type = typeDecoded
        let botConfigurationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .botConfiguration)
        var botConfigurationDecoded0: [Swift.String:Swift.String]? = nil
        if let botConfigurationContainer = botConfigurationContainer {
            botConfigurationDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in botConfigurationContainer {
                if let string0 = string0 {
                    botConfigurationDecoded0?[key0] = string0
                }
            }
        }
        botConfiguration = botConfigurationDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ChannelStatus.self, forKey: .status)
        status = statusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension GetBotChannelAssociationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotChannelAssociationsInput(botAlias: \(Swift.String(describing: botAlias)), botName: \(Swift.String(describing: botName)), maxResults: \(Swift.String(describing: maxResults)), nameContains: \(Swift.String(describing: nameContains)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetBotChannelAssociationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBotChannelAssociationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotChannelAssociationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBotChannelAssociationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotChannelAssociationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBotChannelAssociationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotChannelAssociationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotChannelAssociationsOutputError>
}

public struct GetBotChannelAssociationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotChannelAssociationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBotChannelAssociationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotChannelAssociationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nameContains = input.operationInput.nameContains {
            let nameContainsQueryItem = ClientRuntime.URLQueryItem(name: "nameContains".urlPercentEncoding(), value: Swift.String(nameContains).urlPercentEncoding())
            input.builder.withQueryItem(nameContainsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBotChannelAssociationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotChannelAssociationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotChannelAssociationsOutputError>
}

public struct GetBotChannelAssociationsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotChannelAssociationsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetBotChannelAssociationsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotChannelAssociationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let botName = input.botName else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("botName is nil and needs a value for the path of this operation"))))
        }
        guard let botAlias = input.botAlias else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("botAlias is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(botName.urlPercentEncoding())/aliases/\(botAlias.urlPercentEncoding())/channels"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetBotChannelAssociationsInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotChannelAssociationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotChannelAssociationsOutputError>
}

public struct GetBotChannelAssociationsInput: Swift.Equatable {
    /// An alias pointing to the specific version of the Amazon Lex bot to which
    ///       this association is being made.
    /// This member is required.
    public var botAlias: Swift.String?
    /// The name of the Amazon Lex bot in the association.
    /// This member is required.
    public var botName: Swift.String?
    /// The maximum number of associations to return in the response. The
    ///       default is 50.
    public var maxResults: Swift.Int?
    /// Substring to match in channel association names. An association
    ///       will be returned if any part of its name matches the substring. For
    ///       example, "xyz" matches both "xyzabc" and "abcxyz." To return all bot
    ///       channel associations, use a hyphen ("-") as the nameContains
    ///       parameter.
    public var nameContains: Swift.String?
    /// A pagination token for fetching the next page of associations. If
    ///       the response to this call is truncated, Amazon Lex returns a pagination token
    ///       in the response. To fetch the next page of associations, specify the
    ///       pagination token in the next request.
    public var nextToken: Swift.String?

    public init (
        botAlias: Swift.String? = nil,
        botName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botAlias = botAlias
        self.botName = botName
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}

struct GetBotChannelAssociationsInputBody: Swift.Equatable {
}

extension GetBotChannelAssociationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBotChannelAssociationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBotChannelAssociationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBotChannelAssociationsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBotChannelAssociationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotChannelAssociationsOutputResponse(botChannelAssociations: \(Swift.String(describing: botChannelAssociations)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetBotChannelAssociationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBotChannelAssociationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.botChannelAssociations = output.botChannelAssociations
            self.nextToken = output.nextToken
        } else {
            self.botChannelAssociations = nil
            self.nextToken = nil
        }
    }
}

public struct GetBotChannelAssociationsOutputResponse: Swift.Equatable {
    /// An array of objects, one for each association, that provides
    ///       information about the Amazon Lex bot and its association with the channel.
    ///
    public var botChannelAssociations: [LexModelBuildingClientTypes.BotChannelAssociation]?
    /// A pagination token that fetches the next page of associations. If
    ///       the response to this call is truncated, Amazon Lex returns a pagination token
    ///       in the response. To fetch the next page of associations, specify the
    ///       pagination token in the next request.
    public var nextToken: Swift.String?

    public init (
        botChannelAssociations: [LexModelBuildingClientTypes.BotChannelAssociation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.botChannelAssociations = botChannelAssociations
        self.nextToken = nextToken
    }
}

struct GetBotChannelAssociationsOutputResponseBody: Swift.Equatable {
    public let botChannelAssociations: [LexModelBuildingClientTypes.BotChannelAssociation]?
    public let nextToken: Swift.String?
}

extension GetBotChannelAssociationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botChannelAssociations
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botChannelAssociationsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.BotChannelAssociation?].self, forKey: .botChannelAssociations)
        var botChannelAssociationsDecoded0:[LexModelBuildingClientTypes.BotChannelAssociation]? = nil
        if let botChannelAssociationsContainer = botChannelAssociationsContainer {
            botChannelAssociationsDecoded0 = [LexModelBuildingClientTypes.BotChannelAssociation]()
            for structure0 in botChannelAssociationsContainer {
                if let structure0 = structure0 {
                    botChannelAssociationsDecoded0?.append(structure0)
                }
            }
        }
        botChannelAssociations = botChannelAssociationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetBotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotInput(name: \(Swift.String(describing: name)), versionOrAlias: \(Swift.String(describing: versionOrAlias)))"}
}

extension GetBotInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotOutputError>
}

public struct GetBotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotOutputError>
}

public struct GetBotInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetBotInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        guard let versionOrAlias = input.versionOrAlias else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("versionOrAlias is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(name.urlPercentEncoding())/versions/\(versionOrAlias.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetBotInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotOutputError>
}

public struct GetBotInput: Swift.Equatable {
    /// The name of the bot. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?
    /// The version or alias of the bot.
    /// This member is required.
    public var versionOrAlias: Swift.String?

    public init (
        name: Swift.String? = nil,
        versionOrAlias: Swift.String? = nil
    )
    {
        self.name = name
        self.versionOrAlias = versionOrAlias
    }
}

struct GetBotInputBody: Swift.Equatable {
}

extension GetBotInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBotOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotOutputResponse(abortStatement: \(Swift.String(describing: abortStatement)), checksum: \(Swift.String(describing: checksum)), childDirected: \(Swift.String(describing: childDirected)), clarificationPrompt: \(Swift.String(describing: clarificationPrompt)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), detectSentiment: \(Swift.String(describing: detectSentiment)), enableModelImprovements: \(Swift.String(describing: enableModelImprovements)), failureReason: \(Swift.String(describing: failureReason)), idleSessionTTLInSeconds: \(Swift.String(describing: idleSessionTTLInSeconds)), intents: \(Swift.String(describing: intents)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), locale: \(Swift.String(describing: locale)), name: \(Swift.String(describing: name)), nluIntentConfidenceThreshold: \(Swift.String(describing: nluIntentConfidenceThreshold)), status: \(Swift.String(describing: status)), version: \(Swift.String(describing: version)), voiceId: \(Swift.String(describing: voiceId)))"}
}

extension GetBotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.abortStatement = output.abortStatement
            self.checksum = output.checksum
            self.childDirected = output.childDirected
            self.clarificationPrompt = output.clarificationPrompt
            self.createdDate = output.createdDate
            self.description = output.description
            self.detectSentiment = output.detectSentiment
            self.enableModelImprovements = output.enableModelImprovements
            self.failureReason = output.failureReason
            self.idleSessionTTLInSeconds = output.idleSessionTTLInSeconds
            self.intents = output.intents
            self.lastUpdatedDate = output.lastUpdatedDate
            self.locale = output.locale
            self.name = output.name
            self.nluIntentConfidenceThreshold = output.nluIntentConfidenceThreshold
            self.status = output.status
            self.version = output.version
            self.voiceId = output.voiceId
        } else {
            self.abortStatement = nil
            self.checksum = nil
            self.childDirected = nil
            self.clarificationPrompt = nil
            self.createdDate = nil
            self.description = nil
            self.detectSentiment = nil
            self.enableModelImprovements = nil
            self.failureReason = nil
            self.idleSessionTTLInSeconds = nil
            self.intents = nil
            self.lastUpdatedDate = nil
            self.locale = nil
            self.name = nil
            self.nluIntentConfidenceThreshold = nil
            self.status = nil
            self.version = nil
            self.voiceId = nil
        }
    }
}

public struct GetBotOutputResponse: Swift.Equatable {
    /// The message that Amazon Lex returns when the user elects to end the
    ///       conversation without completing it. For more information, see PutBot.
    public var abortStatement: LexModelBuildingClientTypes.Statement?
    /// Checksum of the bot used to identify a specific revision of the
    ///       bot's $LATEST version.
    public var checksum: Swift.String?
    /// For each Amazon Lex bot created with the Amazon Lex Model Building Service,
    ///       you must specify whether your use of Amazon Lex is related to a website,
    ///       program, or other application that is directed or targeted, in whole or in
    ///       part, to children under age 13 and subject to the Children's Online
    ///       Privacy Protection Act (COPPA) by specifying true or
    ///         false in the childDirected field. By
    ///       specifying true in the childDirected field, you
    ///       confirm that your use of Amazon Lex is related
    ///       to a website, program, or other application that is directed or targeted,
    ///       in whole or in part, to children under age 13 and subject to COPPA. By
    ///       specifying false in the childDirected field, you
    ///       confirm that your use of Amazon Lex is not
    ///       related to a website, program, or other application that is directed or
    ///       targeted, in whole or in part, to children under age 13 and subject to
    ///       COPPA. You may not specify a default value for the
    ///         childDirected field that does not accurately reflect
    ///       whether your use of Amazon Lex is related to a website, program, or other
    ///       application that is directed or targeted, in whole or in part, to children
    ///       under age 13 and subject to COPPA.
    ///          If your use of Amazon Lex relates to a website, program, or other
    ///       application that is directed in whole or in part, to children under age
    ///       13, you must obtain any required verifiable parental consent under COPPA.
    ///       For information regarding the use of Amazon Lex in connection with websites,
    ///       programs, or other applications that are directed or targeted, in whole or
    ///       in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ.
    ///
    public var childDirected: Swift.Bool?
    /// The message Amazon Lex uses when it doesn't understand the user's
    ///       request. For more information, see PutBot.
    public var clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    /// The date that the bot was created.
    public var createdDate: ClientRuntime.Date?
    /// A description of the bot.
    public var description: Swift.String?
    /// Indicates whether user utterances should be sent to Amazon Comprehend
    ///       for sentiment analysis.
    public var detectSentiment: Swift.Bool?
    /// Indicates whether the bot uses accuracy improvements.
    ///         true indicates that the bot is using the improvements,
    ///       otherwise, false.
    public var enableModelImprovements: Swift.Bool?
    /// If status is FAILED, Amazon Lex explains why
    ///       it failed to build the bot.
    public var failureReason: Swift.String?
    /// The maximum time in seconds that Amazon Lex retains the data gathered in
    ///       a conversation. For more information, see PutBot.
    public var idleSessionTTLInSeconds: Swift.Int?
    /// An array of intent objects. For more information, see
    ///         PutBot.
    public var intents: [LexModelBuildingClientTypes.Intent]?
    /// The date that the bot was updated. When you create a resource, the
    ///       creation date and last updated date are the same.
    public var lastUpdatedDate: ClientRuntime.Date?
    ///  The target locale for the bot.
    public var locale: LexModelBuildingClientTypes.Locale?
    /// The name of the bot.
    public var name: Swift.String?
    /// The score that determines where Amazon Lex inserts the
    ///         AMAZON.FallbackIntent,
    ///         AMAZON.KendraSearchIntent, or both when returning
    ///       alternative intents in a <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html">PostContent or
    ///         <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText response.
    ///         AMAZON.FallbackIntent is inserted if the confidence score
    ///       for all intents is below this value.
    ///         AMAZON.KendraSearchIntent is only inserted if it is
    ///       configured for the bot.
    public var nluIntentConfidenceThreshold: Swift.Double?
    /// The status of the bot.
    ///          When the status is BUILDING Amazon Lex is building the bot
    ///       for testing and use.
    ///          If the status of the bot is READY_BASIC_TESTING, you
    ///       can test the bot using the exact utterances specified in the bot's
    ///       intents. When the bot is ready for full testing or to run, the status is
    ///         READY.
    ///          If there was a problem with building the bot, the status is
    ///         FAILED and the failureReason field explains
    ///       why the bot did not build.
    ///          If the bot was saved but not built, the status is
    ///         NOT_BUILT.
    public var status: LexModelBuildingClientTypes.Status?
    /// The version of the bot. For a new bot, the version is always
    ///         $LATEST.
    public var version: Swift.String?
    /// The Amazon Polly voice ID that Amazon Lex uses for voice interaction
    ///       with the user. For more information, see PutBot.
    public var voiceId: Swift.String?

    public init (
        abortStatement: LexModelBuildingClientTypes.Statement? = nil,
        checksum: Swift.String? = nil,
        childDirected: Swift.Bool? = nil,
        clarificationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createdDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        detectSentiment: Swift.Bool? = nil,
        enableModelImprovements: Swift.Bool? = nil,
        failureReason: Swift.String? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        intents: [LexModelBuildingClientTypes.Intent]? = nil,
        lastUpdatedDate: ClientRuntime.Date? = nil,
        locale: LexModelBuildingClientTypes.Locale? = nil,
        name: Swift.String? = nil,
        nluIntentConfidenceThreshold: Swift.Double? = nil,
        status: LexModelBuildingClientTypes.Status? = nil,
        version: Swift.String? = nil,
        voiceId: Swift.String? = nil
    )
    {
        self.abortStatement = abortStatement
        self.checksum = checksum
        self.childDirected = childDirected
        self.clarificationPrompt = clarificationPrompt
        self.createdDate = createdDate
        self.description = description
        self.detectSentiment = detectSentiment
        self.enableModelImprovements = enableModelImprovements
        self.failureReason = failureReason
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.intents = intents
        self.lastUpdatedDate = lastUpdatedDate
        self.locale = locale
        self.name = name
        self.nluIntentConfidenceThreshold = nluIntentConfidenceThreshold
        self.status = status
        self.version = version
        self.voiceId = voiceId
    }
}

struct GetBotOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let intents: [LexModelBuildingClientTypes.Intent]?
    public let enableModelImprovements: Swift.Bool?
    public let nluIntentConfidenceThreshold: Swift.Double?
    public let clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    public let abortStatement: LexModelBuildingClientTypes.Statement?
    public let status: LexModelBuildingClientTypes.Status?
    public let failureReason: Swift.String?
    public let lastUpdatedDate: ClientRuntime.Date?
    public let createdDate: ClientRuntime.Date?
    public let idleSessionTTLInSeconds: Swift.Int?
    public let voiceId: Swift.String?
    public let checksum: Swift.String?
    public let version: Swift.String?
    public let locale: LexModelBuildingClientTypes.Locale?
    public let childDirected: Swift.Bool?
    public let detectSentiment: Swift.Bool?
}

extension GetBotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortStatement
        case checksum
        case childDirected
        case clarificationPrompt
        case createdDate
        case description
        case detectSentiment
        case enableModelImprovements
        case failureReason
        case idleSessionTTLInSeconds
        case intents
        case lastUpdatedDate
        case locale
        case name
        case nluIntentConfidenceThreshold
        case status
        case version
        case voiceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let intentsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Intent?].self, forKey: .intents)
        var intentsDecoded0:[LexModelBuildingClientTypes.Intent]? = nil
        if let intentsContainer = intentsContainer {
            intentsDecoded0 = [LexModelBuildingClientTypes.Intent]()
            for structure0 in intentsContainer {
                if let structure0 = structure0 {
                    intentsDecoded0?.append(structure0)
                }
            }
        }
        intents = intentsDecoded0
        let enableModelImprovementsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableModelImprovements)
        enableModelImprovements = enableModelImprovementsDecoded
        let nluIntentConfidenceThresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .nluIntentConfidenceThreshold)
        nluIntentConfidenceThreshold = nluIntentConfidenceThresholdDecoded
        let clarificationPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Prompt.self, forKey: .clarificationPrompt)
        clarificationPrompt = clarificationPromptDecoded
        let abortStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .abortStatement)
        abortStatement = abortStatementDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let idleSessionTTLInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idleSessionTTLInSeconds)
        idleSessionTTLInSeconds = idleSessionTTLInSecondsDecoded
        let voiceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let localeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Locale.self, forKey: .locale)
        locale = localeDecoded
        let childDirectedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .childDirected)
        childDirected = childDirectedDecoded
        let detectSentimentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .detectSentiment)
        detectSentiment = detectSentimentDecoded
    }
}

extension GetBotVersionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotVersionsInput(maxResults: \(Swift.String(describing: maxResults)), name: \(Swift.String(describing: name)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetBotVersionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBotVersionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotVersionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBotVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBotVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotVersionsOutputError>
}

public struct GetBotVersionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotVersionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBotVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBotVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotVersionsOutputError>
}

public struct GetBotVersionsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotVersionsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetBotVersionsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(name.urlPercentEncoding())/versions"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetBotVersionsInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotVersionsOutputError>
}

public struct GetBotVersionsInput: Swift.Equatable {
    /// The maximum number of bot versions to return in the response. The
    ///       default is 10.
    public var maxResults: Swift.Int?
    /// The name of the bot for which versions should be
    ///       returned.
    /// This member is required.
    public var name: Swift.String?
    /// A pagination token for fetching the next page of bot versions. If
    ///       the response to this call is truncated, Amazon Lex returns a pagination token
    ///       in the response. To fetch the next page of versions, specify the
    ///       pagination token in the next request.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
    }
}

struct GetBotVersionsInputBody: Swift.Equatable {
}

extension GetBotVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBotVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBotVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBotVersionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBotVersionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotVersionsOutputResponse(bots: \(Swift.String(describing: bots)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetBotVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBotVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bots = output.bots
            self.nextToken = output.nextToken
        } else {
            self.bots = nil
            self.nextToken = nil
        }
    }
}

public struct GetBotVersionsOutputResponse: Swift.Equatable {
    /// An array of BotMetadata objects, one for each numbered
    ///       version of the bot plus one for the $LATEST
    ///       version.
    public var bots: [LexModelBuildingClientTypes.BotMetadata]?
    /// A pagination token for fetching the next page of bot versions. If
    ///       the response to this call is truncated, Amazon Lex returns a pagination token
    ///       in the response. To fetch the next page of versions, specify the
    ///       pagination token in the next request.
    public var nextToken: Swift.String?

    public init (
        bots: [LexModelBuildingClientTypes.BotMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.bots = bots
        self.nextToken = nextToken
    }
}

struct GetBotVersionsOutputResponseBody: Swift.Equatable {
    public let bots: [LexModelBuildingClientTypes.BotMetadata]?
    public let nextToken: Swift.String?
}

extension GetBotVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bots
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.BotMetadata?].self, forKey: .bots)
        var botsDecoded0:[LexModelBuildingClientTypes.BotMetadata]? = nil
        if let botsContainer = botsContainer {
            botsDecoded0 = [LexModelBuildingClientTypes.BotMetadata]()
            for structure0 in botsContainer {
                if let structure0 = structure0 {
                    botsDecoded0?.append(structure0)
                }
            }
        }
        bots = botsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetBotsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotsInput(maxResults: \(Swift.String(describing: maxResults)), nameContains: \(Swift.String(describing: nameContains)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetBotsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBotsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotsOutputError>
}

public struct GetBotsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nameContains = input.operationInput.nameContains {
            let nameContainsQueryItem = ClientRuntime.URLQueryItem(name: "nameContains".urlPercentEncoding(), value: Swift.String(nameContains).urlPercentEncoding())
            input.builder.withQueryItem(nameContainsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotsOutputError>
}

public struct GetBotsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBotsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetBotsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/bots"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetBotsInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetBotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBotsOutputError>
}

public struct GetBotsInput: Swift.Equatable {
    /// The maximum number of bots to return in the response that the
    ///       request will return. The default is 10.
    public var maxResults: Swift.Int?
    /// Substring to match in bot names. A bot will be returned if any part
    ///       of its name matches the substring. For example, "xyz" matches both
    ///       "xyzabc" and "abcxyz."
    public var nameContains: Swift.String?
    /// A pagination token that fetches the next page of bots. If the
    ///       response to this call is truncated, Amazon Lex returns a pagination token in
    ///       the response. To fetch the next page of bots, specify the pagination token
    ///       in the next request.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}

struct GetBotsInputBody: Swift.Equatable {
}

extension GetBotsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBotsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBotsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBotsOutputResponse(bots: \(Swift.String(describing: bots)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetBotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bots = output.bots
            self.nextToken = output.nextToken
        } else {
            self.bots = nil
            self.nextToken = nil
        }
    }
}

public struct GetBotsOutputResponse: Swift.Equatable {
    /// An array of botMetadata objects, with one entry for
    ///       each bot.
    public var bots: [LexModelBuildingClientTypes.BotMetadata]?
    /// If the response is truncated, it includes a pagination token that
    ///       you can specify in your next request to fetch the next page of bots.
    ///
    public var nextToken: Swift.String?

    public init (
        bots: [LexModelBuildingClientTypes.BotMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.bots = bots
        self.nextToken = nextToken
    }
}

struct GetBotsOutputResponseBody: Swift.Equatable {
    public let bots: [LexModelBuildingClientTypes.BotMetadata]?
    public let nextToken: Swift.String?
}

extension GetBotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bots
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.BotMetadata?].self, forKey: .bots)
        var botsDecoded0:[LexModelBuildingClientTypes.BotMetadata]? = nil
        if let botsContainer = botsContainer {
            botsDecoded0 = [LexModelBuildingClientTypes.BotMetadata]()
            for structure0 in botsContainer {
                if let structure0 = structure0 {
                    botsDecoded0?.append(structure0)
                }
            }
        }
        bots = botsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetBuiltinIntentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBuiltinIntentInput(signature: \(Swift.String(describing: signature)))"}
}

extension GetBuiltinIntentInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBuiltinIntentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBuiltinIntentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBuiltinIntentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBuiltinIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBuiltinIntentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBuiltinIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBuiltinIntentOutputError>
}

public struct GetBuiltinIntentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBuiltinIntentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBuiltinIntentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBuiltinIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBuiltinIntentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBuiltinIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBuiltinIntentOutputError>
}

public struct GetBuiltinIntentInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBuiltinIntentInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetBuiltinIntentInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBuiltinIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let signature = input.signature else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("signature is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/builtins/intents/\(signature.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetBuiltinIntentInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetBuiltinIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBuiltinIntentOutputError>
}

public struct GetBuiltinIntentInput: Swift.Equatable {
    /// The unique identifier for a built-in intent. To find the signature
    ///       for an intent, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard Built-in Intents in the Alexa Skills
    ///         Kit.
    /// This member is required.
    public var signature: Swift.String?

    public init (
        signature: Swift.String? = nil
    )
    {
        self.signature = signature
    }
}

struct GetBuiltinIntentInputBody: Swift.Equatable {
}

extension GetBuiltinIntentInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBuiltinIntentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBuiltinIntentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBuiltinIntentOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBuiltinIntentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBuiltinIntentOutputResponse(signature: \(Swift.String(describing: signature)), slots: \(Swift.String(describing: slots)), supportedLocales: \(Swift.String(describing: supportedLocales)))"}
}

extension GetBuiltinIntentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBuiltinIntentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.signature = output.signature
            self.slots = output.slots
            self.supportedLocales = output.supportedLocales
        } else {
            self.signature = nil
            self.slots = nil
            self.supportedLocales = nil
        }
    }
}

public struct GetBuiltinIntentOutputResponse: Swift.Equatable {
    /// The unique identifier for a built-in intent.
    public var signature: Swift.String?
    /// An array of BuiltinIntentSlot objects, one entry for
    ///       each slot type in the intent.
    public var slots: [LexModelBuildingClientTypes.BuiltinIntentSlot]?
    /// A list of locales that the intent supports.
    public var supportedLocales: [LexModelBuildingClientTypes.Locale]?

    public init (
        signature: Swift.String? = nil,
        slots: [LexModelBuildingClientTypes.BuiltinIntentSlot]? = nil,
        supportedLocales: [LexModelBuildingClientTypes.Locale]? = nil
    )
    {
        self.signature = signature
        self.slots = slots
        self.supportedLocales = supportedLocales
    }
}

struct GetBuiltinIntentOutputResponseBody: Swift.Equatable {
    public let signature: Swift.String?
    public let supportedLocales: [LexModelBuildingClientTypes.Locale]?
    public let slots: [LexModelBuildingClientTypes.BuiltinIntentSlot]?
}

extension GetBuiltinIntentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signature
        case slots
        case supportedLocales
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signature)
        signature = signatureDecoded
        let supportedLocalesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Locale?].self, forKey: .supportedLocales)
        var supportedLocalesDecoded0:[LexModelBuildingClientTypes.Locale]? = nil
        if let supportedLocalesContainer = supportedLocalesContainer {
            supportedLocalesDecoded0 = [LexModelBuildingClientTypes.Locale]()
            for string0 in supportedLocalesContainer {
                if let string0 = string0 {
                    supportedLocalesDecoded0?.append(string0)
                }
            }
        }
        supportedLocales = supportedLocalesDecoded0
        let slotsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.BuiltinIntentSlot?].self, forKey: .slots)
        var slotsDecoded0:[LexModelBuildingClientTypes.BuiltinIntentSlot]? = nil
        if let slotsContainer = slotsContainer {
            slotsDecoded0 = [LexModelBuildingClientTypes.BuiltinIntentSlot]()
            for structure0 in slotsContainer {
                if let structure0 = structure0 {
                    slotsDecoded0?.append(structure0)
                }
            }
        }
        slots = slotsDecoded0
    }
}

extension GetBuiltinIntentsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBuiltinIntentsInput(locale: \(Swift.String(describing: locale)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), signatureContains: \(Swift.String(describing: signatureContains)))"}
}

extension GetBuiltinIntentsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBuiltinIntentsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBuiltinIntentsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBuiltinIntentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBuiltinIntentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBuiltinIntentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBuiltinIntentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBuiltinIntentsOutputError>
}

public struct GetBuiltinIntentsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBuiltinIntentsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBuiltinIntentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBuiltinIntentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let signatureContains = input.operationInput.signatureContains {
            let signatureContainsQueryItem = ClientRuntime.URLQueryItem(name: "signatureContains".urlPercentEncoding(), value: Swift.String(signatureContains).urlPercentEncoding())
            input.builder.withQueryItem(signatureContainsQueryItem)
        }
        if let locale = input.operationInput.locale {
            let localeQueryItem = ClientRuntime.URLQueryItem(name: "locale".urlPercentEncoding(), value: Swift.String(locale.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(localeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBuiltinIntentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBuiltinIntentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBuiltinIntentsOutputError>
}

public struct GetBuiltinIntentsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBuiltinIntentsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetBuiltinIntentsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBuiltinIntentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/builtins/intents"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetBuiltinIntentsInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetBuiltinIntentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBuiltinIntentsOutputError>
}

public struct GetBuiltinIntentsInput: Swift.Equatable {
    /// A list of locales that the intent supports.
    public var locale: LexModelBuildingClientTypes.Locale?
    /// The maximum number of intents to return in the response. The
    ///       default is 10.
    public var maxResults: Swift.Int?
    /// A pagination token that fetches the next page of intents. If this
    ///       API call is truncated, Amazon Lex returns a pagination token in the response.
    ///       To fetch the next page of intents, use the pagination token in the next
    ///       request.
    public var nextToken: Swift.String?
    /// Substring to match in built-in intent signatures. An intent will be
    ///       returned if any part of its signature matches the substring. For example,
    ///       "xyz" matches both "xyzabc" and "abcxyz." To find the signature for an
    ///       intent, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard Built-in Intents in the Alexa Skills
    ///         Kit.
    public var signatureContains: Swift.String?

    public init (
        locale: LexModelBuildingClientTypes.Locale? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        signatureContains: Swift.String? = nil
    )
    {
        self.locale = locale
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.signatureContains = signatureContains
    }
}

struct GetBuiltinIntentsInputBody: Swift.Equatable {
}

extension GetBuiltinIntentsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBuiltinIntentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBuiltinIntentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBuiltinIntentsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBuiltinIntentsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBuiltinIntentsOutputResponse(intents: \(Swift.String(describing: intents)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetBuiltinIntentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBuiltinIntentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.intents = output.intents
            self.nextToken = output.nextToken
        } else {
            self.intents = nil
            self.nextToken = nil
        }
    }
}

public struct GetBuiltinIntentsOutputResponse: Swift.Equatable {
    /// An array of builtinIntentMetadata objects, one for
    ///       each intent in the response.
    public var intents: [LexModelBuildingClientTypes.BuiltinIntentMetadata]?
    /// A pagination token that fetches the next page of intents. If the
    ///       response to this API call is truncated, Amazon Lex returns a pagination token
    ///       in the response. To fetch the next page of intents, specify the pagination
    ///       token in the next request.
    public var nextToken: Swift.String?

    public init (
        intents: [LexModelBuildingClientTypes.BuiltinIntentMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.intents = intents
        self.nextToken = nextToken
    }
}

struct GetBuiltinIntentsOutputResponseBody: Swift.Equatable {
    public let intents: [LexModelBuildingClientTypes.BuiltinIntentMetadata]?
    public let nextToken: Swift.String?
}

extension GetBuiltinIntentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intents
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intentsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.BuiltinIntentMetadata?].self, forKey: .intents)
        var intentsDecoded0:[LexModelBuildingClientTypes.BuiltinIntentMetadata]? = nil
        if let intentsContainer = intentsContainer {
            intentsDecoded0 = [LexModelBuildingClientTypes.BuiltinIntentMetadata]()
            for structure0 in intentsContainer {
                if let structure0 = structure0 {
                    intentsDecoded0?.append(structure0)
                }
            }
        }
        intents = intentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetBuiltinSlotTypesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBuiltinSlotTypesInput(locale: \(Swift.String(describing: locale)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), signatureContains: \(Swift.String(describing: signatureContains)))"}
}

extension GetBuiltinSlotTypesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetBuiltinSlotTypesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBuiltinSlotTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBuiltinSlotTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBuiltinSlotTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBuiltinSlotTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBuiltinSlotTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBuiltinSlotTypesOutputError>
}

public struct GetBuiltinSlotTypesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBuiltinSlotTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBuiltinSlotTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBuiltinSlotTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let signatureContains = input.operationInput.signatureContains {
            let signatureContainsQueryItem = ClientRuntime.URLQueryItem(name: "signatureContains".urlPercentEncoding(), value: Swift.String(signatureContains).urlPercentEncoding())
            input.builder.withQueryItem(signatureContainsQueryItem)
        }
        if let locale = input.operationInput.locale {
            let localeQueryItem = ClientRuntime.URLQueryItem(name: "locale".urlPercentEncoding(), value: Swift.String(locale.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(localeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBuiltinSlotTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBuiltinSlotTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBuiltinSlotTypesOutputError>
}

public struct GetBuiltinSlotTypesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBuiltinSlotTypesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetBuiltinSlotTypesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBuiltinSlotTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/builtins/slottypes"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetBuiltinSlotTypesInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetBuiltinSlotTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBuiltinSlotTypesOutputError>
}

public struct GetBuiltinSlotTypesInput: Swift.Equatable {
    /// A list of locales that the slot type supports.
    public var locale: LexModelBuildingClientTypes.Locale?
    /// The maximum number of slot types to return in the response. The
    ///       default is 10.
    public var maxResults: Swift.Int?
    /// A pagination token that fetches the next page of slot types. If the
    ///       response to this API call is truncated, Amazon Lex returns a pagination token
    ///       in the response. To fetch the next page of slot types, specify the
    ///       pagination token in the next request.
    public var nextToken: Swift.String?
    /// Substring to match in built-in slot type signatures. A slot type
    ///       will be returned if any part of its signature matches the substring. For
    ///       example, "xyz" matches both "xyzabc" and "abcxyz."
    public var signatureContains: Swift.String?

    public init (
        locale: LexModelBuildingClientTypes.Locale? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        signatureContains: Swift.String? = nil
    )
    {
        self.locale = locale
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.signatureContains = signatureContains
    }
}

struct GetBuiltinSlotTypesInputBody: Swift.Equatable {
}

extension GetBuiltinSlotTypesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetBuiltinSlotTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBuiltinSlotTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBuiltinSlotTypesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBuiltinSlotTypesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBuiltinSlotTypesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), slotTypes: \(Swift.String(describing: slotTypes)))"}
}

extension GetBuiltinSlotTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBuiltinSlotTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.slotTypes = output.slotTypes
        } else {
            self.nextToken = nil
            self.slotTypes = nil
        }
    }
}

public struct GetBuiltinSlotTypesOutputResponse: Swift.Equatable {
    /// If the response is truncated, the response includes a pagination
    ///       token that you can use in your next request to fetch the next page of slot
    ///       types.
    public var nextToken: Swift.String?
    /// An array of BuiltInSlotTypeMetadata objects, one entry
    ///       for each slot type returned.
    public var slotTypes: [LexModelBuildingClientTypes.BuiltinSlotTypeMetadata]?

    public init (
        nextToken: Swift.String? = nil,
        slotTypes: [LexModelBuildingClientTypes.BuiltinSlotTypeMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.slotTypes = slotTypes
    }
}

struct GetBuiltinSlotTypesOutputResponseBody: Swift.Equatable {
    public let slotTypes: [LexModelBuildingClientTypes.BuiltinSlotTypeMetadata]?
    public let nextToken: Swift.String?
}

extension GetBuiltinSlotTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case slotTypes
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let slotTypesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.BuiltinSlotTypeMetadata?].self, forKey: .slotTypes)
        var slotTypesDecoded0:[LexModelBuildingClientTypes.BuiltinSlotTypeMetadata]? = nil
        if let slotTypesContainer = slotTypesContainer {
            slotTypesDecoded0 = [LexModelBuildingClientTypes.BuiltinSlotTypeMetadata]()
            for structure0 in slotTypesContainer {
                if let structure0 = structure0 {
                    slotTypesDecoded0?.append(structure0)
                }
            }
        }
        slotTypes = slotTypesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetExportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetExportInput(exportType: \(Swift.String(describing: exportType)), name: \(Swift.String(describing: name)), resourceType: \(Swift.String(describing: resourceType)), version: \(Swift.String(describing: version)))"}
}

extension GetExportInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetExportInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetExportInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetExportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetExportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetExportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetExportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetExportOutputError>
}

public struct GetExportInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetExportInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetExportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetExportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let exportType = input.operationInput.exportType {
            let exportTypeQueryItem = ClientRuntime.URLQueryItem(name: "exportType".urlPercentEncoding(), value: Swift.String(exportType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(exportTypeQueryItem)
        }
        if let name = input.operationInput.name {
            let nameQueryItem = ClientRuntime.URLQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(name).urlPercentEncoding())
            input.builder.withQueryItem(nameQueryItem)
        }
        if let version = input.operationInput.version {
            let versionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(version).urlPercentEncoding())
            input.builder.withQueryItem(versionQueryItem)
        }
        if let resourceType = input.operationInput.resourceType {
            let resourceTypeQueryItem = ClientRuntime.URLQueryItem(name: "resourceType".urlPercentEncoding(), value: Swift.String(resourceType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(resourceTypeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetExportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetExportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetExportOutputError>
}

public struct GetExportInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetExportInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetExportInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetExportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/exports"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetExportInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetExportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetExportOutputError>
}

public struct GetExportInput: Swift.Equatable {
    /// The format of the exported data.
    /// This member is required.
    public var exportType: LexModelBuildingClientTypes.ExportType?
    /// The name of the bot to export.
    /// This member is required.
    public var name: Swift.String?
    /// The type of resource to export.
    /// This member is required.
    public var resourceType: LexModelBuildingClientTypes.ResourceType?
    /// The version of the bot to export.
    /// This member is required.
    public var version: Swift.String?

    public init (
        exportType: LexModelBuildingClientTypes.ExportType? = nil,
        name: Swift.String? = nil,
        resourceType: LexModelBuildingClientTypes.ResourceType? = nil,
        version: Swift.String? = nil
    )
    {
        self.exportType = exportType
        self.name = name
        self.resourceType = resourceType
        self.version = version
    }
}

struct GetExportInputBody: Swift.Equatable {
}

extension GetExportInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetExportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetExportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetExportOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetExportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetExportOutputResponse(exportStatus: \(Swift.String(describing: exportStatus)), exportType: \(Swift.String(describing: exportType)), failureReason: \(Swift.String(describing: failureReason)), name: \(Swift.String(describing: name)), resourceType: \(Swift.String(describing: resourceType)), url: \(Swift.String(describing: url)), version: \(Swift.String(describing: version)))"}
}

extension GetExportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetExportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.exportStatus = output.exportStatus
            self.exportType = output.exportType
            self.failureReason = output.failureReason
            self.name = output.name
            self.resourceType = output.resourceType
            self.url = output.url
            self.version = output.version
        } else {
            self.exportStatus = nil
            self.exportType = nil
            self.failureReason = nil
            self.name = nil
            self.resourceType = nil
            self.url = nil
            self.version = nil
        }
    }
}

public struct GetExportOutputResponse: Swift.Equatable {
    /// The status of the export.
    ///
    ///
    ///
    ///                   IN_PROGRESS - The export is in progress.
    ///
    ///
    ///
    ///                   READY - The export is complete.
    ///
    ///
    ///
    ///                   FAILED - The export could not be
    ///           completed.
    ///
    ///
    public var exportStatus: LexModelBuildingClientTypes.ExportStatus?
    /// The format of the exported data.
    public var exportType: LexModelBuildingClientTypes.ExportType?
    /// If status is FAILED, Amazon Lex provides the
    ///       reason that it failed to export the resource.
    public var failureReason: Swift.String?
    /// The name of the bot being exported.
    public var name: Swift.String?
    /// The type of the exported resource.
    public var resourceType: LexModelBuildingClientTypes.ResourceType?
    /// An S3 pre-signed URL that provides the location of the exported
    ///       resource. The exported resource is a ZIP archive that contains the
    ///       exported resource in JSON format. The structure of the archive may change.
    ///       Your code should not rely on the archive structure.
    public var url: Swift.String?
    /// The version of the bot being exported.
    public var version: Swift.String?

    public init (
        exportStatus: LexModelBuildingClientTypes.ExportStatus? = nil,
        exportType: LexModelBuildingClientTypes.ExportType? = nil,
        failureReason: Swift.String? = nil,
        name: Swift.String? = nil,
        resourceType: LexModelBuildingClientTypes.ResourceType? = nil,
        url: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.exportStatus = exportStatus
        self.exportType = exportType
        self.failureReason = failureReason
        self.name = name
        self.resourceType = resourceType
        self.url = url
        self.version = version
    }
}

struct GetExportOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let version: Swift.String?
    public let resourceType: LexModelBuildingClientTypes.ResourceType?
    public let exportType: LexModelBuildingClientTypes.ExportType?
    public let exportStatus: LexModelBuildingClientTypes.ExportStatus?
    public let failureReason: Swift.String?
    public let url: Swift.String?
}

extension GetExportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportStatus
        case exportType
        case failureReason
        case name
        case resourceType
        case url
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let exportTypeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ExportType.self, forKey: .exportType)
        exportType = exportTypeDecoded
        let exportStatusDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ExportStatus.self, forKey: .exportStatus)
        exportStatus = exportStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension GetImportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetImportInput(importId: \(Swift.String(describing: importId)))"}
}

extension GetImportInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetImportInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetImportInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetImportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetImportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetImportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetImportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetImportOutputError>
}

public struct GetImportInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetImportInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetImportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetImportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetImportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetImportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetImportOutputError>
}

public struct GetImportInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetImportInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetImportInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetImportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let importId = input.importId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("importId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/imports/\(importId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetImportInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetImportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetImportOutputError>
}

public struct GetImportInput: Swift.Equatable {
    /// The identifier of the import job information to return.
    /// This member is required.
    public var importId: Swift.String?

    public init (
        importId: Swift.String? = nil
    )
    {
        self.importId = importId
    }
}

struct GetImportInputBody: Swift.Equatable {
}

extension GetImportInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetImportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetImportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetImportOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetImportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetImportOutputResponse(createdDate: \(Swift.String(describing: createdDate)), failureReason: \(Swift.String(describing: failureReason)), importId: \(Swift.String(describing: importId)), importStatus: \(Swift.String(describing: importStatus)), mergeStrategy: \(Swift.String(describing: mergeStrategy)), name: \(Swift.String(describing: name)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension GetImportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetImportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdDate = output.createdDate
            self.failureReason = output.failureReason
            self.importId = output.importId
            self.importStatus = output.importStatus
            self.mergeStrategy = output.mergeStrategy
            self.name = output.name
            self.resourceType = output.resourceType
        } else {
            self.createdDate = nil
            self.failureReason = nil
            self.importId = nil
            self.importStatus = nil
            self.mergeStrategy = nil
            self.name = nil
            self.resourceType = nil
        }
    }
}

public struct GetImportOutputResponse: Swift.Equatable {
    /// A timestamp for the date and time that the import job was
    ///       created.
    public var createdDate: ClientRuntime.Date?
    /// A string that describes why an import job failed to
    ///       complete.
    public var failureReason: [Swift.String]?
    /// The identifier for the specific import job.
    public var importId: Swift.String?
    /// The status of the import job. If the status is FAILED,
    ///       you can get the reason for the failure from the failureReason
    ///       field.
    public var importStatus: LexModelBuildingClientTypes.ImportStatus?
    /// The action taken when there was a conflict between an existing
    ///       resource and a resource in the import file.
    public var mergeStrategy: LexModelBuildingClientTypes.MergeStrategy?
    /// The name given to the import job.
    public var name: Swift.String?
    /// The type of resource imported.
    public var resourceType: LexModelBuildingClientTypes.ResourceType?

    public init (
        createdDate: ClientRuntime.Date? = nil,
        failureReason: [Swift.String]? = nil,
        importId: Swift.String? = nil,
        importStatus: LexModelBuildingClientTypes.ImportStatus? = nil,
        mergeStrategy: LexModelBuildingClientTypes.MergeStrategy? = nil,
        name: Swift.String? = nil,
        resourceType: LexModelBuildingClientTypes.ResourceType? = nil
    )
    {
        self.createdDate = createdDate
        self.failureReason = failureReason
        self.importId = importId
        self.importStatus = importStatus
        self.mergeStrategy = mergeStrategy
        self.name = name
        self.resourceType = resourceType
    }
}

struct GetImportOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let resourceType: LexModelBuildingClientTypes.ResourceType?
    public let mergeStrategy: LexModelBuildingClientTypes.MergeStrategy?
    public let importId: Swift.String?
    public let importStatus: LexModelBuildingClientTypes.ImportStatus?
    public let failureReason: [Swift.String]?
    public let createdDate: ClientRuntime.Date?
}

extension GetImportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDate
        case failureReason
        case importId
        case importStatus
        case mergeStrategy
        case name
        case resourceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let mergeStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.MergeStrategy.self, forKey: .mergeStrategy)
        mergeStrategy = mergeStrategyDecoded
        let importIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importId)
        importId = importIdDecoded
        let importStatusDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ImportStatus.self, forKey: .importStatus)
        importStatus = importStatusDecoded
        let failureReasonContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .failureReason)
        var failureReasonDecoded0:[Swift.String]? = nil
        if let failureReasonContainer = failureReasonContainer {
            failureReasonDecoded0 = [Swift.String]()
            for string0 in failureReasonContainer {
                if let string0 = string0 {
                    failureReasonDecoded0?.append(string0)
                }
            }
        }
        failureReason = failureReasonDecoded0
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
    }
}

extension GetIntentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIntentInput(name: \(Swift.String(describing: name)), version: \(Swift.String(describing: version)))"}
}

extension GetIntentInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetIntentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIntentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIntentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIntentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIntentOutputError>
}

public struct GetIntentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIntentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIntentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIntentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIntentOutputError>
}

public struct GetIntentInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIntentInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetIntentInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        guard let version = input.version else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("version is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/intents/\(name.urlPercentEncoding())/versions/\(version.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetIntentInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIntentOutputError>
}

public struct GetIntentInput: Swift.Equatable {
    /// The name of the intent. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the intent.
    /// This member is required.
    public var version: Swift.String?

    public init (
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

struct GetIntentInputBody: Swift.Equatable {
}

extension GetIntentInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetIntentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetIntentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetIntentOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIntentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIntentOutputResponse(checksum: \(Swift.String(describing: checksum)), conclusionStatement: \(Swift.String(describing: conclusionStatement)), confirmationPrompt: \(Swift.String(describing: confirmationPrompt)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), dialogCodeHook: \(Swift.String(describing: dialogCodeHook)), followUpPrompt: \(Swift.String(describing: followUpPrompt)), fulfillmentActivity: \(Swift.String(describing: fulfillmentActivity)), inputContexts: \(Swift.String(describing: inputContexts)), kendraConfiguration: \(Swift.String(describing: kendraConfiguration)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), name: \(Swift.String(describing: name)), outputContexts: \(Swift.String(describing: outputContexts)), parentIntentSignature: \(Swift.String(describing: parentIntentSignature)), rejectionStatement: \(Swift.String(describing: rejectionStatement)), sampleUtterances: \(Swift.String(describing: sampleUtterances)), slots: \(Swift.String(describing: slots)), version: \(Swift.String(describing: version)))"}
}

extension GetIntentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetIntentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.checksum = output.checksum
            self.conclusionStatement = output.conclusionStatement
            self.confirmationPrompt = output.confirmationPrompt
            self.createdDate = output.createdDate
            self.description = output.description
            self.dialogCodeHook = output.dialogCodeHook
            self.followUpPrompt = output.followUpPrompt
            self.fulfillmentActivity = output.fulfillmentActivity
            self.inputContexts = output.inputContexts
            self.kendraConfiguration = output.kendraConfiguration
            self.lastUpdatedDate = output.lastUpdatedDate
            self.name = output.name
            self.outputContexts = output.outputContexts
            self.parentIntentSignature = output.parentIntentSignature
            self.rejectionStatement = output.rejectionStatement
            self.sampleUtterances = output.sampleUtterances
            self.slots = output.slots
            self.version = output.version
        } else {
            self.checksum = nil
            self.conclusionStatement = nil
            self.confirmationPrompt = nil
            self.createdDate = nil
            self.description = nil
            self.dialogCodeHook = nil
            self.followUpPrompt = nil
            self.fulfillmentActivity = nil
            self.inputContexts = nil
            self.kendraConfiguration = nil
            self.lastUpdatedDate = nil
            self.name = nil
            self.outputContexts = nil
            self.parentIntentSignature = nil
            self.rejectionStatement = nil
            self.sampleUtterances = nil
            self.slots = nil
            self.version = nil
        }
    }
}

public struct GetIntentOutputResponse: Swift.Equatable {
    /// Checksum of the intent.
    public var checksum: Swift.String?
    /// After the Lambda function specified in the
    ///         fulfillmentActivity element fulfills the intent, Amazon Lex
    ///       conveys this statement to the user.
    public var conclusionStatement: LexModelBuildingClientTypes.Statement?
    /// If defined in the bot, Amazon Lex uses prompt to confirm the intent
    ///       before fulfilling the user's request. For more information, see PutIntent.
    public var confirmationPrompt: LexModelBuildingClientTypes.Prompt?
    /// The date that the intent was created.
    public var createdDate: ClientRuntime.Date?
    /// A description of the intent.
    public var description: Swift.String?
    /// If defined in the bot, Amazon Amazon Lex invokes this Lambda function
    ///       for each user input. For more information, see PutIntent.
    public var dialogCodeHook: LexModelBuildingClientTypes.CodeHook?
    /// If defined in the bot, Amazon Lex uses this prompt to solicit additional
    ///       user activity after the intent is fulfilled. For more information, see
    ///         PutIntent.
    public var followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt?
    /// Describes how the intent is fulfilled. For more information, see
    ///         PutIntent.
    public var fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity?
    /// An array of InputContext objects that lists the contexts
    ///       that must be active for Amazon Lex to choose the intent in a conversation with
    ///       the user.
    public var inputContexts: [LexModelBuildingClientTypes.InputContext]?
    /// Configuration information, if any, to connect to an Amazon Kendra
    ///       index with the AMAZON.KendraSearchIntent intent.
    public var kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration?
    /// The date that the intent was updated. When you create a resource,
    ///       the creation date and the last updated date are the same.
    public var lastUpdatedDate: ClientRuntime.Date?
    /// The name of the intent.
    public var name: Swift.String?
    /// An array of OutputContext objects that lists the contexts
    ///       that the intent activates when the intent is fulfilled.
    public var outputContexts: [LexModelBuildingClientTypes.OutputContext]?
    /// A unique identifier for a built-in intent.
    public var parentIntentSignature: Swift.String?
    /// If the user answers "no" to the question defined in
    ///         confirmationPrompt, Amazon Lex responds with this statement to
    ///       acknowledge that the intent was canceled.
    public var rejectionStatement: LexModelBuildingClientTypes.Statement?
    /// An array of sample utterances configured for the intent.
    public var sampleUtterances: [Swift.String]?
    /// An array of intent slots configured for the intent.
    public var slots: [LexModelBuildingClientTypes.Slot]?
    /// The version of the intent.
    public var version: Swift.String?

    public init (
        checksum: Swift.String? = nil,
        conclusionStatement: LexModelBuildingClientTypes.Statement? = nil,
        confirmationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createdDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        dialogCodeHook: LexModelBuildingClientTypes.CodeHook? = nil,
        followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt? = nil,
        fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity? = nil,
        inputContexts: [LexModelBuildingClientTypes.InputContext]? = nil,
        kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration? = nil,
        lastUpdatedDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        outputContexts: [LexModelBuildingClientTypes.OutputContext]? = nil,
        parentIntentSignature: Swift.String? = nil,
        rejectionStatement: LexModelBuildingClientTypes.Statement? = nil,
        sampleUtterances: [Swift.String]? = nil,
        slots: [LexModelBuildingClientTypes.Slot]? = nil,
        version: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.conclusionStatement = conclusionStatement
        self.confirmationPrompt = confirmationPrompt
        self.createdDate = createdDate
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.followUpPrompt = followUpPrompt
        self.fulfillmentActivity = fulfillmentActivity
        self.inputContexts = inputContexts
        self.kendraConfiguration = kendraConfiguration
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.rejectionStatement = rejectionStatement
        self.sampleUtterances = sampleUtterances
        self.slots = slots
        self.version = version
    }
}

struct GetIntentOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let slots: [LexModelBuildingClientTypes.Slot]?
    public let sampleUtterances: [Swift.String]?
    public let confirmationPrompt: LexModelBuildingClientTypes.Prompt?
    public let rejectionStatement: LexModelBuildingClientTypes.Statement?
    public let followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt?
    public let conclusionStatement: LexModelBuildingClientTypes.Statement?
    public let dialogCodeHook: LexModelBuildingClientTypes.CodeHook?
    public let fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity?
    public let parentIntentSignature: Swift.String?
    public let lastUpdatedDate: ClientRuntime.Date?
    public let createdDate: ClientRuntime.Date?
    public let version: Swift.String?
    public let checksum: Swift.String?
    public let kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration?
    public let inputContexts: [LexModelBuildingClientTypes.InputContext]?
    public let outputContexts: [LexModelBuildingClientTypes.OutputContext]?
}

extension GetIntentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
        case conclusionStatement
        case confirmationPrompt
        case createdDate
        case description
        case dialogCodeHook
        case followUpPrompt
        case fulfillmentActivity
        case inputContexts
        case kendraConfiguration
        case lastUpdatedDate
        case name
        case outputContexts
        case parentIntentSignature
        case rejectionStatement
        case sampleUtterances
        case slots
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let slotsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Slot?].self, forKey: .slots)
        var slotsDecoded0:[LexModelBuildingClientTypes.Slot]? = nil
        if let slotsContainer = slotsContainer {
            slotsDecoded0 = [LexModelBuildingClientTypes.Slot]()
            for structure0 in slotsContainer {
                if let structure0 = structure0 {
                    slotsDecoded0?.append(structure0)
                }
            }
        }
        slots = slotsDecoded0
        let sampleUtterancesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sampleUtterances)
        var sampleUtterancesDecoded0:[Swift.String]? = nil
        if let sampleUtterancesContainer = sampleUtterancesContainer {
            sampleUtterancesDecoded0 = [Swift.String]()
            for string0 in sampleUtterancesContainer {
                if let string0 = string0 {
                    sampleUtterancesDecoded0?.append(string0)
                }
            }
        }
        sampleUtterances = sampleUtterancesDecoded0
        let confirmationPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Prompt.self, forKey: .confirmationPrompt)
        confirmationPrompt = confirmationPromptDecoded
        let rejectionStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .rejectionStatement)
        rejectionStatement = rejectionStatementDecoded
        let followUpPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.FollowUpPrompt.self, forKey: .followUpPrompt)
        followUpPrompt = followUpPromptDecoded
        let conclusionStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .conclusionStatement)
        conclusionStatement = conclusionStatementDecoded
        let dialogCodeHookDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.CodeHook.self, forKey: .dialogCodeHook)
        dialogCodeHook = dialogCodeHookDecoded
        let fulfillmentActivityDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.FulfillmentActivity.self, forKey: .fulfillmentActivity)
        fulfillmentActivity = fulfillmentActivityDecoded
        let parentIntentSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentIntentSignature)
        parentIntentSignature = parentIntentSignatureDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let kendraConfigurationDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.KendraConfiguration.self, forKey: .kendraConfiguration)
        kendraConfiguration = kendraConfigurationDecoded
        let inputContextsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.InputContext?].self, forKey: .inputContexts)
        var inputContextsDecoded0:[LexModelBuildingClientTypes.InputContext]? = nil
        if let inputContextsContainer = inputContextsContainer {
            inputContextsDecoded0 = [LexModelBuildingClientTypes.InputContext]()
            for structure0 in inputContextsContainer {
                if let structure0 = structure0 {
                    inputContextsDecoded0?.append(structure0)
                }
            }
        }
        inputContexts = inputContextsDecoded0
        let outputContextsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.OutputContext?].self, forKey: .outputContexts)
        var outputContextsDecoded0:[LexModelBuildingClientTypes.OutputContext]? = nil
        if let outputContextsContainer = outputContextsContainer {
            outputContextsDecoded0 = [LexModelBuildingClientTypes.OutputContext]()
            for structure0 in outputContextsContainer {
                if let structure0 = structure0 {
                    outputContextsDecoded0?.append(structure0)
                }
            }
        }
        outputContexts = outputContextsDecoded0
    }
}

extension GetIntentVersionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIntentVersionsInput(maxResults: \(Swift.String(describing: maxResults)), name: \(Swift.String(describing: name)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetIntentVersionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetIntentVersionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIntentVersionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIntentVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIntentVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIntentVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIntentVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIntentVersionsOutputError>
}

public struct GetIntentVersionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIntentVersionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIntentVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIntentVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIntentVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIntentVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIntentVersionsOutputError>
}

public struct GetIntentVersionsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIntentVersionsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetIntentVersionsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIntentVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/intents/\(name.urlPercentEncoding())/versions"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetIntentVersionsInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetIntentVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIntentVersionsOutputError>
}

public struct GetIntentVersionsInput: Swift.Equatable {
    /// The maximum number of intent versions to return in the response.
    ///       The default is 10.
    public var maxResults: Swift.Int?
    /// The name of the intent for which versions should be
    ///       returned.
    /// This member is required.
    public var name: Swift.String?
    /// A pagination token for fetching the next page of intent versions.
    ///       If the response to this call is truncated, Amazon Lex returns a pagination
    ///       token in the response. To fetch the next page of versions, specify the
    ///       pagination token in the next request.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
    }
}

struct GetIntentVersionsInputBody: Swift.Equatable {
}

extension GetIntentVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetIntentVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetIntentVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetIntentVersionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIntentVersionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIntentVersionsOutputResponse(intents: \(Swift.String(describing: intents)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetIntentVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetIntentVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.intents = output.intents
            self.nextToken = output.nextToken
        } else {
            self.intents = nil
            self.nextToken = nil
        }
    }
}

public struct GetIntentVersionsOutputResponse: Swift.Equatable {
    /// An array of IntentMetadata objects, one for each
    ///       numbered version of the intent plus one for the $LATEST
    ///       version.
    public var intents: [LexModelBuildingClientTypes.IntentMetadata]?
    /// A pagination token for fetching the next page of intent versions.
    ///       If the response to this call is truncated, Amazon Lex returns a pagination
    ///       token in the response. To fetch the next page of versions, specify the
    ///       pagination token in the next request.
    public var nextToken: Swift.String?

    public init (
        intents: [LexModelBuildingClientTypes.IntentMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.intents = intents
        self.nextToken = nextToken
    }
}

struct GetIntentVersionsOutputResponseBody: Swift.Equatable {
    public let intents: [LexModelBuildingClientTypes.IntentMetadata]?
    public let nextToken: Swift.String?
}

extension GetIntentVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intents
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intentsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.IntentMetadata?].self, forKey: .intents)
        var intentsDecoded0:[LexModelBuildingClientTypes.IntentMetadata]? = nil
        if let intentsContainer = intentsContainer {
            intentsDecoded0 = [LexModelBuildingClientTypes.IntentMetadata]()
            for structure0 in intentsContainer {
                if let structure0 = structure0 {
                    intentsDecoded0?.append(structure0)
                }
            }
        }
        intents = intentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetIntentsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIntentsInput(maxResults: \(Swift.String(describing: maxResults)), nameContains: \(Swift.String(describing: nameContains)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetIntentsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetIntentsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIntentsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIntentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIntentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIntentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIntentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIntentsOutputError>
}

public struct GetIntentsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIntentsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetIntentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIntentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nameContains = input.operationInput.nameContains {
            let nameContainsQueryItem = ClientRuntime.URLQueryItem(name: "nameContains".urlPercentEncoding(), value: Swift.String(nameContains).urlPercentEncoding())
            input.builder.withQueryItem(nameContainsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetIntentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetIntentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIntentsOutputError>
}

public struct GetIntentsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetIntentsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetIntentsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetIntentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/intents"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetIntentsInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetIntentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetIntentsOutputError>
}

public struct GetIntentsInput: Swift.Equatable {
    /// The maximum number of intents to return in the response. The
    ///       default is 10.
    public var maxResults: Swift.Int?
    /// Substring to match in intent names. An intent will be returned if
    ///       any part of its name matches the substring. For example, "xyz" matches
    ///       both "xyzabc" and "abcxyz."
    public var nameContains: Swift.String?
    /// A pagination token that fetches the next page of intents. If the
    ///       response to this API call is truncated, Amazon Lex returns a pagination token
    ///       in the response. To fetch the next page of intents, specify the pagination
    ///       token in the next request.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}

struct GetIntentsInputBody: Swift.Equatable {
}

extension GetIntentsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetIntentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetIntentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetIntentsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIntentsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetIntentsOutputResponse(intents: \(Swift.String(describing: intents)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetIntentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetIntentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.intents = output.intents
            self.nextToken = output.nextToken
        } else {
            self.intents = nil
            self.nextToken = nil
        }
    }
}

public struct GetIntentsOutputResponse: Swift.Equatable {
    /// An array of Intent objects. For more information, see
    ///         PutBot.
    public var intents: [LexModelBuildingClientTypes.IntentMetadata]?
    /// If the response is truncated, the response includes a pagination
    ///       token that you can specify in your next request to fetch the next page of
    ///       intents.
    public var nextToken: Swift.String?

    public init (
        intents: [LexModelBuildingClientTypes.IntentMetadata]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.intents = intents
        self.nextToken = nextToken
    }
}

struct GetIntentsOutputResponseBody: Swift.Equatable {
    public let intents: [LexModelBuildingClientTypes.IntentMetadata]?
    public let nextToken: Swift.String?
}

extension GetIntentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intents
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intentsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.IntentMetadata?].self, forKey: .intents)
        var intentsDecoded0:[LexModelBuildingClientTypes.IntentMetadata]? = nil
        if let intentsContainer = intentsContainer {
            intentsDecoded0 = [LexModelBuildingClientTypes.IntentMetadata]()
            for structure0 in intentsContainer {
                if let structure0 = structure0 {
                    intentsDecoded0?.append(structure0)
                }
            }
        }
        intents = intentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetMigrationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMigrationInput(migrationId: \(Swift.String(describing: migrationId)))"}
}

extension GetMigrationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetMigrationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMigrationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMigrationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMigrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMigrationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMigrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMigrationOutputError>
}

public struct GetMigrationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMigrationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMigrationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMigrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMigrationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMigrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMigrationOutputError>
}

public struct GetMigrationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMigrationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetMigrationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMigrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let migrationId = input.migrationId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("migrationId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/migrations/\(migrationId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetMigrationInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetMigrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMigrationOutputError>
}

public struct GetMigrationInput: Swift.Equatable {
    /// The unique identifier of the migration to view. The
    ///         migrationID is returned by the  operation.
    /// This member is required.
    public var migrationId: Swift.String?

    public init (
        migrationId: Swift.String? = nil
    )
    {
        self.migrationId = migrationId
    }
}

struct GetMigrationInputBody: Swift.Equatable {
}

extension GetMigrationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetMigrationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMigrationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMigrationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMigrationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMigrationOutputResponse(alerts: \(Swift.String(describing: alerts)), migrationId: \(Swift.String(describing: migrationId)), migrationStatus: \(Swift.String(describing: migrationStatus)), migrationStrategy: \(Swift.String(describing: migrationStrategy)), migrationTimestamp: \(Swift.String(describing: migrationTimestamp)), v1BotLocale: \(Swift.String(describing: v1BotLocale)), v1BotName: \(Swift.String(describing: v1BotName)), v1BotVersion: \(Swift.String(describing: v1BotVersion)), v2BotId: \(Swift.String(describing: v2BotId)), v2BotRole: \(Swift.String(describing: v2BotRole)))"}
}

extension GetMigrationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMigrationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alerts = output.alerts
            self.migrationId = output.migrationId
            self.migrationStatus = output.migrationStatus
            self.migrationStrategy = output.migrationStrategy
            self.migrationTimestamp = output.migrationTimestamp
            self.v1BotLocale = output.v1BotLocale
            self.v1BotName = output.v1BotName
            self.v1BotVersion = output.v1BotVersion
            self.v2BotId = output.v2BotId
            self.v2BotRole = output.v2BotRole
        } else {
            self.alerts = nil
            self.migrationId = nil
            self.migrationStatus = nil
            self.migrationStrategy = nil
            self.migrationTimestamp = nil
            self.v1BotLocale = nil
            self.v1BotName = nil
            self.v1BotVersion = nil
            self.v2BotId = nil
            self.v2BotRole = nil
        }
    }
}

public struct GetMigrationOutputResponse: Swift.Equatable {
    /// A list of alerts and warnings that indicate issues with the migration
    ///       for the Amazon Lex V1 bot to Amazon Lex V2. You receive a warning when an Amazon Lex V1
    ///       feature has a different implementation if Amazon Lex V2.
    ///          For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/migrate.html">Migrating a bot in the Amazon Lex V2
    ///         developer guide.
    public var alerts: [LexModelBuildingClientTypes.MigrationAlert]?
    /// The unique identifier of the migration. This is the same as the
    ///       identifier used when calling the GetMigration
    ///       operation.
    public var migrationId: Swift.String?
    /// Indicates the status of the migration. When the status is
    ///         COMPLETE the migration is finished and the bot is available
    ///       in Amazon Lex V2. There may be alerts and warnings that need to be resolved to
    ///       complete the migration.
    public var migrationStatus: LexModelBuildingClientTypes.MigrationStatus?
    /// The strategy used to conduct the migration.
    ///
    ///
    ///
    ///                   CREATE_NEW - Creates a new Amazon Lex V2 bot and migrates
    ///           the Amazon Lex V1 bot to the new bot.
    ///
    ///
    ///
    ///                   UPDATE_EXISTING - Overwrites the existing Amazon Lex V2 bot
    ///         metadata and the locale being migrated. It doesn't change any other
    ///         locales in the Amazon Lex V2 bot. If the locale doesn't exist, a new locale
    ///         is created in the Amazon Lex V2 bot.
    ///
    ///
    public var migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy?
    /// The date and time that the migration started.
    public var migrationTimestamp: ClientRuntime.Date?
    /// The locale of the Amazon Lex V1 bot migrated to Amazon Lex V2.
    public var v1BotLocale: LexModelBuildingClientTypes.Locale?
    /// The name of the Amazon Lex V1 bot migrated to Amazon Lex V2.
    public var v1BotName: Swift.String?
    /// The version of the Amazon Lex V1 bot migrated to Amazon Lex V2.
    public var v1BotVersion: Swift.String?
    /// The unique identifier of the Amazon Lex V2 bot that the Amazon Lex V1 is being
    ///       migrated to.
    public var v2BotId: Swift.String?
    /// The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.
    public var v2BotRole: Swift.String?

    public init (
        alerts: [LexModelBuildingClientTypes.MigrationAlert]? = nil,
        migrationId: Swift.String? = nil,
        migrationStatus: LexModelBuildingClientTypes.MigrationStatus? = nil,
        migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy? = nil,
        migrationTimestamp: ClientRuntime.Date? = nil,
        v1BotLocale: LexModelBuildingClientTypes.Locale? = nil,
        v1BotName: Swift.String? = nil,
        v1BotVersion: Swift.String? = nil,
        v2BotId: Swift.String? = nil,
        v2BotRole: Swift.String? = nil
    )
    {
        self.alerts = alerts
        self.migrationId = migrationId
        self.migrationStatus = migrationStatus
        self.migrationStrategy = migrationStrategy
        self.migrationTimestamp = migrationTimestamp
        self.v1BotLocale = v1BotLocale
        self.v1BotName = v1BotName
        self.v1BotVersion = v1BotVersion
        self.v2BotId = v2BotId
        self.v2BotRole = v2BotRole
    }
}

struct GetMigrationOutputResponseBody: Swift.Equatable {
    public let migrationId: Swift.String?
    public let v1BotName: Swift.String?
    public let v1BotVersion: Swift.String?
    public let v1BotLocale: LexModelBuildingClientTypes.Locale?
    public let v2BotId: Swift.String?
    public let v2BotRole: Swift.String?
    public let migrationStatus: LexModelBuildingClientTypes.MigrationStatus?
    public let migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy?
    public let migrationTimestamp: ClientRuntime.Date?
    public let alerts: [LexModelBuildingClientTypes.MigrationAlert]?
}

extension GetMigrationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alerts
        case migrationId
        case migrationStatus
        case migrationStrategy
        case migrationTimestamp
        case v1BotLocale
        case v1BotName
        case v1BotVersion
        case v2BotId
        case v2BotRole
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let migrationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .migrationId)
        migrationId = migrationIdDecoded
        let v1BotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v1BotName)
        v1BotName = v1BotNameDecoded
        let v1BotVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v1BotVersion)
        v1BotVersion = v1BotVersionDecoded
        let v1BotLocaleDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Locale.self, forKey: .v1BotLocale)
        v1BotLocale = v1BotLocaleDecoded
        let v2BotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v2BotId)
        v2BotId = v2BotIdDecoded
        let v2BotRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v2BotRole)
        v2BotRole = v2BotRoleDecoded
        let migrationStatusDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.MigrationStatus.self, forKey: .migrationStatus)
        migrationStatus = migrationStatusDecoded
        let migrationStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.MigrationStrategy.self, forKey: .migrationStrategy)
        migrationStrategy = migrationStrategyDecoded
        let migrationTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .migrationTimestamp)
        migrationTimestamp = migrationTimestampDecoded
        let alertsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.MigrationAlert?].self, forKey: .alerts)
        var alertsDecoded0:[LexModelBuildingClientTypes.MigrationAlert]? = nil
        if let alertsContainer = alertsContainer {
            alertsDecoded0 = [LexModelBuildingClientTypes.MigrationAlert]()
            for structure0 in alertsContainer {
                if let structure0 = structure0 {
                    alertsDecoded0?.append(structure0)
                }
            }
        }
        alerts = alertsDecoded0
    }
}

extension GetMigrationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMigrationsInput(maxResults: \(Swift.String(describing: maxResults)), migrationStatusEquals: \(Swift.String(describing: migrationStatusEquals)), nextToken: \(Swift.String(describing: nextToken)), sortByAttribute: \(Swift.String(describing: sortByAttribute)), sortByOrder: \(Swift.String(describing: sortByOrder)), v1BotNameContains: \(Swift.String(describing: v1BotNameContains)))"}
}

extension GetMigrationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetMigrationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMigrationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMigrationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMigrationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMigrationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMigrationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMigrationsOutputError>
}

public struct GetMigrationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMigrationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMigrationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMigrationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let v1BotNameContains = input.operationInput.v1BotNameContains {
            let v1BotNameContainsQueryItem = ClientRuntime.URLQueryItem(name: "v1BotNameContains".urlPercentEncoding(), value: Swift.String(v1BotNameContains).urlPercentEncoding())
            input.builder.withQueryItem(v1BotNameContainsQueryItem)
        }
        if let sortByOrder = input.operationInput.sortByOrder {
            let sortByOrderQueryItem = ClientRuntime.URLQueryItem(name: "sortByOrder".urlPercentEncoding(), value: Swift.String(sortByOrder.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(sortByOrderQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let migrationStatusEquals = input.operationInput.migrationStatusEquals {
            let migrationStatusEqualsQueryItem = ClientRuntime.URLQueryItem(name: "migrationStatusEquals".urlPercentEncoding(), value: Swift.String(migrationStatusEquals.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(migrationStatusEqualsQueryItem)
        }
        if let sortByAttribute = input.operationInput.sortByAttribute {
            let sortByAttributeQueryItem = ClientRuntime.URLQueryItem(name: "sortByAttribute".urlPercentEncoding(), value: Swift.String(sortByAttribute.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(sortByAttributeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMigrationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMigrationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMigrationsOutputError>
}

public struct GetMigrationsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMigrationsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetMigrationsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMigrationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/migrations"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetMigrationsInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetMigrationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMigrationsOutputError>
}

public struct GetMigrationsInput: Swift.Equatable {
    /// The maximum number of migrations to return in the response. The
    ///       default is 10.
    public var maxResults: Swift.Int?
    /// Filters the list to contain only migrations in the specified state.
    public var migrationStatusEquals: LexModelBuildingClientTypes.MigrationStatus?
    /// A pagination token that fetches the next page of migrations. If the
    ///       response to this operation is truncated, Amazon Lex returns a pagination token
    ///       in the response. To fetch the next page of migrations, specify the
    ///       pagination token in the request.
    public var nextToken: Swift.String?
    /// The field to sort the list of migrations by. You can sort by the
    ///       Amazon Lex V1 bot name or the date and time that the migration was
    ///       started.
    public var sortByAttribute: LexModelBuildingClientTypes.MigrationSortAttribute?
    /// The order so sort the list.
    public var sortByOrder: LexModelBuildingClientTypes.SortOrder?
    /// Filters the list to contain only bots whose name contains the
    ///       specified string. The string is matched anywhere in bot name.
    public var v1BotNameContains: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        migrationStatusEquals: LexModelBuildingClientTypes.MigrationStatus? = nil,
        nextToken: Swift.String? = nil,
        sortByAttribute: LexModelBuildingClientTypes.MigrationSortAttribute? = nil,
        sortByOrder: LexModelBuildingClientTypes.SortOrder? = nil,
        v1BotNameContains: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.migrationStatusEquals = migrationStatusEquals
        self.nextToken = nextToken
        self.sortByAttribute = sortByAttribute
        self.sortByOrder = sortByOrder
        self.v1BotNameContains = v1BotNameContains
    }
}

struct GetMigrationsInputBody: Swift.Equatable {
}

extension GetMigrationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetMigrationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMigrationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMigrationsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMigrationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMigrationsOutputResponse(migrationSummaries: \(Swift.String(describing: migrationSummaries)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetMigrationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMigrationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.migrationSummaries = output.migrationSummaries
            self.nextToken = output.nextToken
        } else {
            self.migrationSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct GetMigrationsOutputResponse: Swift.Equatable {
    /// An array of summaries for migrations from Amazon Lex V1 to Amazon Lex V2. To see
    ///       details of the migration, use the migrationId from the
    ///       summary in a call to the
    ///       operation.
    public var migrationSummaries: [LexModelBuildingClientTypes.MigrationSummary]?
    /// If the response is truncated, it includes a pagination token that you
    ///       can specify in your next request to fetch the next page of
    ///       migrations.
    public var nextToken: Swift.String?

    public init (
        migrationSummaries: [LexModelBuildingClientTypes.MigrationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.migrationSummaries = migrationSummaries
        self.nextToken = nextToken
    }
}

struct GetMigrationsOutputResponseBody: Swift.Equatable {
    public let migrationSummaries: [LexModelBuildingClientTypes.MigrationSummary]?
    public let nextToken: Swift.String?
}

extension GetMigrationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case migrationSummaries
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let migrationSummariesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.MigrationSummary?].self, forKey: .migrationSummaries)
        var migrationSummariesDecoded0:[LexModelBuildingClientTypes.MigrationSummary]? = nil
        if let migrationSummariesContainer = migrationSummariesContainer {
            migrationSummariesDecoded0 = [LexModelBuildingClientTypes.MigrationSummary]()
            for structure0 in migrationSummariesContainer {
                if let structure0 = structure0 {
                    migrationSummariesDecoded0?.append(structure0)
                }
            }
        }
        migrationSummaries = migrationSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetSlotTypeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSlotTypeInput(name: \(Swift.String(describing: name)), version: \(Swift.String(describing: version)))"}
}

extension GetSlotTypeInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetSlotTypeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSlotTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSlotTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSlotTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSlotTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSlotTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSlotTypeOutputError>
}

public struct GetSlotTypeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSlotTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSlotTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSlotTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSlotTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSlotTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSlotTypeOutputError>
}

public struct GetSlotTypeInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSlotTypeInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetSlotTypeInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSlotTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        guard let version = input.version else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("version is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/slottypes/\(name.urlPercentEncoding())/versions/\(version.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetSlotTypeInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetSlotTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSlotTypeOutputError>
}

public struct GetSlotTypeInput: Swift.Equatable {
    /// The name of the slot type. The name is case sensitive.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the slot type.
    /// This member is required.
    public var version: Swift.String?

    public init (
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

struct GetSlotTypeInputBody: Swift.Equatable {
}

extension GetSlotTypeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSlotTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSlotTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSlotTypeOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSlotTypeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSlotTypeOutputResponse(checksum: \(Swift.String(describing: checksum)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), enumerationValues: \(Swift.String(describing: enumerationValues)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), name: \(Swift.String(describing: name)), parentSlotTypeSignature: \(Swift.String(describing: parentSlotTypeSignature)), slotTypeConfigurations: \(Swift.String(describing: slotTypeConfigurations)), valueSelectionStrategy: \(Swift.String(describing: valueSelectionStrategy)), version: \(Swift.String(describing: version)))"}
}

extension GetSlotTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSlotTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.checksum = output.checksum
            self.createdDate = output.createdDate
            self.description = output.description
            self.enumerationValues = output.enumerationValues
            self.lastUpdatedDate = output.lastUpdatedDate
            self.name = output.name
            self.parentSlotTypeSignature = output.parentSlotTypeSignature
            self.slotTypeConfigurations = output.slotTypeConfigurations
            self.valueSelectionStrategy = output.valueSelectionStrategy
            self.version = output.version
        } else {
            self.checksum = nil
            self.createdDate = nil
            self.description = nil
            self.enumerationValues = nil
            self.lastUpdatedDate = nil
            self.name = nil
            self.parentSlotTypeSignature = nil
            self.slotTypeConfigurations = nil
            self.valueSelectionStrategy = nil
            self.version = nil
        }
    }
}

public struct GetSlotTypeOutputResponse: Swift.Equatable {
    /// Checksum of the $LATEST version of the slot
    ///       type.
    public var checksum: Swift.String?
    /// The date that the slot type was created.
    public var createdDate: ClientRuntime.Date?
    /// A description of the slot type.
    public var description: Swift.String?
    /// A list of EnumerationValue objects that defines the
    ///       values that the slot type can take.
    public var enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]?
    /// The date that the slot type was updated. When you create a
    ///       resource, the creation date and last update date are the same.
    public var lastUpdatedDate: ClientRuntime.Date?
    /// The name of the slot type.
    public var name: Swift.String?
    /// The built-in slot type used as a parent for the slot type.
    public var parentSlotTypeSignature: Swift.String?
    /// Configuration information that extends the parent built-in slot
    ///       type.
    public var slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]?
    /// The strategy that Amazon Lex uses to determine the value of the slot.
    ///       For more information, see PutSlotType.
    public var valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy?
    /// The version of the slot type.
    public var version: Swift.String?

    public init (
        checksum: Swift.String? = nil,
        createdDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]? = nil,
        lastUpdatedDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        parentSlotTypeSignature: Swift.String? = nil,
        slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]? = nil,
        valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy? = nil,
        version: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.createdDate = createdDate
        self.description = description
        self.enumerationValues = enumerationValues
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.parentSlotTypeSignature = parentSlotTypeSignature
        self.slotTypeConfigurations = slotTypeConfigurations
        self.valueSelectionStrategy = valueSelectionStrategy
        self.version = version
    }
}

struct GetSlotTypeOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]?
    public let lastUpdatedDate: ClientRuntime.Date?
    public let createdDate: ClientRuntime.Date?
    public let version: Swift.String?
    public let checksum: Swift.String?
    public let valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy?
    public let parentSlotTypeSignature: Swift.String?
    public let slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]?
}

extension GetSlotTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
        case createdDate
        case description
        case enumerationValues
        case lastUpdatedDate
        case name
        case parentSlotTypeSignature
        case slotTypeConfigurations
        case valueSelectionStrategy
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let enumerationValuesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.EnumerationValue?].self, forKey: .enumerationValues)
        var enumerationValuesDecoded0:[LexModelBuildingClientTypes.EnumerationValue]? = nil
        if let enumerationValuesContainer = enumerationValuesContainer {
            enumerationValuesDecoded0 = [LexModelBuildingClientTypes.EnumerationValue]()
            for structure0 in enumerationValuesContainer {
                if let structure0 = structure0 {
                    enumerationValuesDecoded0?.append(structure0)
                }
            }
        }
        enumerationValues = enumerationValuesDecoded0
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let valueSelectionStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.SlotValueSelectionStrategy.self, forKey: .valueSelectionStrategy)
        valueSelectionStrategy = valueSelectionStrategyDecoded
        let parentSlotTypeSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentSlotTypeSignature)
        parentSlotTypeSignature = parentSlotTypeSignatureDecoded
        let slotTypeConfigurationsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.SlotTypeConfiguration?].self, forKey: .slotTypeConfigurations)
        var slotTypeConfigurationsDecoded0:[LexModelBuildingClientTypes.SlotTypeConfiguration]? = nil
        if let slotTypeConfigurationsContainer = slotTypeConfigurationsContainer {
            slotTypeConfigurationsDecoded0 = [LexModelBuildingClientTypes.SlotTypeConfiguration]()
            for structure0 in slotTypeConfigurationsContainer {
                if let structure0 = structure0 {
                    slotTypeConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        slotTypeConfigurations = slotTypeConfigurationsDecoded0
    }
}

extension GetSlotTypeVersionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSlotTypeVersionsInput(maxResults: \(Swift.String(describing: maxResults)), name: \(Swift.String(describing: name)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetSlotTypeVersionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetSlotTypeVersionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSlotTypeVersionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSlotTypeVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSlotTypeVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSlotTypeVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSlotTypeVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSlotTypeVersionsOutputError>
}

public struct GetSlotTypeVersionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSlotTypeVersionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSlotTypeVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSlotTypeVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSlotTypeVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSlotTypeVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSlotTypeVersionsOutputError>
}

public struct GetSlotTypeVersionsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSlotTypeVersionsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetSlotTypeVersionsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSlotTypeVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/slottypes/\(name.urlPercentEncoding())/versions"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetSlotTypeVersionsInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetSlotTypeVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSlotTypeVersionsOutputError>
}

public struct GetSlotTypeVersionsInput: Swift.Equatable {
    /// The maximum number of slot type versions to return in the response.
    ///       The default is 10.
    public var maxResults: Swift.Int?
    /// The name of the slot type for which versions should be
    ///       returned.
    /// This member is required.
    public var name: Swift.String?
    /// A pagination token for fetching the next page of slot type
    ///       versions. If the response to this call is truncated, Amazon Lex returns a
    ///       pagination token in the response. To fetch the next page of versions,
    ///       specify the pagination token in the next request.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
    }
}

struct GetSlotTypeVersionsInputBody: Swift.Equatable {
}

extension GetSlotTypeVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSlotTypeVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSlotTypeVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSlotTypeVersionsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSlotTypeVersionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSlotTypeVersionsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), slotTypes: \(Swift.String(describing: slotTypes)))"}
}

extension GetSlotTypeVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSlotTypeVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.slotTypes = output.slotTypes
        } else {
            self.nextToken = nil
            self.slotTypes = nil
        }
    }
}

public struct GetSlotTypeVersionsOutputResponse: Swift.Equatable {
    /// A pagination token for fetching the next page of slot type
    ///       versions. If the response to this call is truncated, Amazon Lex returns a
    ///       pagination token in the response. To fetch the next page of versions,
    ///       specify the pagination token in the next request.
    public var nextToken: Swift.String?
    /// An array of SlotTypeMetadata objects, one for each
    ///       numbered version of the slot type plus one for the $LATEST
    ///       version.
    public var slotTypes: [LexModelBuildingClientTypes.SlotTypeMetadata]?

    public init (
        nextToken: Swift.String? = nil,
        slotTypes: [LexModelBuildingClientTypes.SlotTypeMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.slotTypes = slotTypes
    }
}

struct GetSlotTypeVersionsOutputResponseBody: Swift.Equatable {
    public let slotTypes: [LexModelBuildingClientTypes.SlotTypeMetadata]?
    public let nextToken: Swift.String?
}

extension GetSlotTypeVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case slotTypes
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let slotTypesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.SlotTypeMetadata?].self, forKey: .slotTypes)
        var slotTypesDecoded0:[LexModelBuildingClientTypes.SlotTypeMetadata]? = nil
        if let slotTypesContainer = slotTypesContainer {
            slotTypesDecoded0 = [LexModelBuildingClientTypes.SlotTypeMetadata]()
            for structure0 in slotTypesContainer {
                if let structure0 = structure0 {
                    slotTypesDecoded0?.append(structure0)
                }
            }
        }
        slotTypes = slotTypesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetSlotTypesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSlotTypesInput(maxResults: \(Swift.String(describing: maxResults)), nameContains: \(Swift.String(describing: nameContains)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetSlotTypesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetSlotTypesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSlotTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSlotTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSlotTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSlotTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSlotTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSlotTypesOutputError>
}

public struct GetSlotTypesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSlotTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSlotTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSlotTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nameContains = input.operationInput.nameContains {
            let nameContainsQueryItem = ClientRuntime.URLQueryItem(name: "nameContains".urlPercentEncoding(), value: Swift.String(nameContains).urlPercentEncoding())
            input.builder.withQueryItem(nameContainsQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSlotTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSlotTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSlotTypesOutputError>
}

public struct GetSlotTypesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSlotTypesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetSlotTypesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSlotTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/slottypes"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetSlotTypesInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetSlotTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSlotTypesOutputError>
}

public struct GetSlotTypesInput: Swift.Equatable {
    /// The maximum number of slot types to return in the response. The
    ///       default is 10.
    public var maxResults: Swift.Int?
    /// Substring to match in slot type names. A slot type will be returned
    ///       if any part of its name matches the substring. For example, "xyz" matches
    ///       both "xyzabc" and "abcxyz."
    public var nameContains: Swift.String?
    /// A pagination token that fetches the next page of slot types. If the
    ///       response to this API call is truncated, Amazon Lex returns a pagination token
    ///       in the response. To fetch next page of slot types, specify the pagination
    ///       token in the next request.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}

struct GetSlotTypesInputBody: Swift.Equatable {
}

extension GetSlotTypesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetSlotTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSlotTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSlotTypesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSlotTypesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSlotTypesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), slotTypes: \(Swift.String(describing: slotTypes)))"}
}

extension GetSlotTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSlotTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.slotTypes = output.slotTypes
        } else {
            self.nextToken = nil
            self.slotTypes = nil
        }
    }
}

public struct GetSlotTypesOutputResponse: Swift.Equatable {
    /// If the response is truncated, it includes a pagination token that
    ///       you can specify in your next request to fetch the next page of slot
    ///       types.
    public var nextToken: Swift.String?
    /// An array of objects, one for each slot type, that provides
    ///       information such as the name of the slot type, the version, and a
    ///       description.
    public var slotTypes: [LexModelBuildingClientTypes.SlotTypeMetadata]?

    public init (
        nextToken: Swift.String? = nil,
        slotTypes: [LexModelBuildingClientTypes.SlotTypeMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.slotTypes = slotTypes
    }
}

struct GetSlotTypesOutputResponseBody: Swift.Equatable {
    public let slotTypes: [LexModelBuildingClientTypes.SlotTypeMetadata]?
    public let nextToken: Swift.String?
}

extension GetSlotTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case slotTypes
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let slotTypesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.SlotTypeMetadata?].self, forKey: .slotTypes)
        var slotTypesDecoded0:[LexModelBuildingClientTypes.SlotTypeMetadata]? = nil
        if let slotTypesContainer = slotTypesContainer {
            slotTypesDecoded0 = [LexModelBuildingClientTypes.SlotTypeMetadata]()
            for structure0 in slotTypesContainer {
                if let structure0 = structure0 {
                    slotTypesDecoded0?.append(structure0)
                }
            }
        }
        slotTypes = slotTypesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetUtterancesViewInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUtterancesViewInput(botName: \(Swift.String(describing: botName)), botVersions: \(Swift.String(describing: botVersions)), statusType: \(Swift.String(describing: statusType)))"}
}

extension GetUtterancesViewInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetUtterancesViewInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetUtterancesViewInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetUtterancesViewInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetUtterancesViewOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetUtterancesViewInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetUtterancesViewOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetUtterancesViewOutputError>
}

public struct GetUtterancesViewInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetUtterancesViewInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetUtterancesViewInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetUtterancesViewOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(ClientRuntime.URLQueryItem(name: "view", value: "aggregation"))
        if let statusType = input.operationInput.statusType {
            let statusTypeQueryItem = ClientRuntime.URLQueryItem(name: "status_type".urlPercentEncoding(), value: Swift.String(statusType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusTypeQueryItem)
        }
        if let botVersions = input.operationInput.botVersions {
            botVersions.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "bot_versions".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetUtterancesViewInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetUtterancesViewOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetUtterancesViewOutputError>
}

public struct GetUtterancesViewInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetUtterancesViewInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetUtterancesViewInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetUtterancesViewOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let botName = input.botName else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("botName is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(botName.urlPercentEncoding())/utterances"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetUtterancesViewInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetUtterancesViewOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetUtterancesViewOutputError>
}

public struct GetUtterancesViewInput: Swift.Equatable {
    /// The name of the bot for which utterance information should be
    ///       returned.
    /// This member is required.
    public var botName: Swift.String?
    /// An array of bot versions for which utterance information should be
    ///       returned. The limit is 5 versions per request.
    /// This member is required.
    public var botVersions: [Swift.String]?
    /// To return utterances that were recognized and handled, use
    ///         Detected. To return utterances that were not recognized,
    ///       use Missed.
    /// This member is required.
    public var statusType: LexModelBuildingClientTypes.StatusType?

    public init (
        botName: Swift.String? = nil,
        botVersions: [Swift.String]? = nil,
        statusType: LexModelBuildingClientTypes.StatusType? = nil
    )
    {
        self.botName = botName
        self.botVersions = botVersions
        self.statusType = statusType
    }
}

struct GetUtterancesViewInputBody: Swift.Equatable {
}

extension GetUtterancesViewInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetUtterancesViewOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetUtterancesViewOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetUtterancesViewOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetUtterancesViewOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetUtterancesViewOutputResponse(botName: \(Swift.String(describing: botName)), utterances: \(Swift.String(describing: utterances)))"}
}

extension GetUtterancesViewOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetUtterancesViewOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.botName = output.botName
            self.utterances = output.utterances
        } else {
            self.botName = nil
            self.utterances = nil
        }
    }
}

public struct GetUtterancesViewOutputResponse: Swift.Equatable {
    /// The name of the bot for which utterance information was
    ///       returned.
    public var botName: Swift.String?
    /// An array of UtteranceList objects, each
    ///       containing a list of UtteranceData objects describing
    ///       the utterances that were processed by your bot. The response contains a
    ///       maximum of 100 UtteranceData objects for each version. Amazon Lex
    ///       returns the most frequent utterances received by the bot in the last 15
    ///       days.
    public var utterances: [LexModelBuildingClientTypes.UtteranceList]?

    public init (
        botName: Swift.String? = nil,
        utterances: [LexModelBuildingClientTypes.UtteranceList]? = nil
    )
    {
        self.botName = botName
        self.utterances = utterances
    }
}

struct GetUtterancesViewOutputResponseBody: Swift.Equatable {
    public let botName: Swift.String?
    public let utterances: [LexModelBuildingClientTypes.UtteranceList]?
}

extension GetUtterancesViewOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botName
        case utterances
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botName)
        botName = botNameDecoded
        let utterancesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.UtteranceList?].self, forKey: .utterances)
        var utterancesDecoded0:[LexModelBuildingClientTypes.UtteranceList]? = nil
        if let utterancesContainer = utterancesContainer {
            utterancesDecoded0 = [LexModelBuildingClientTypes.UtteranceList]()
            for structure0 in utterancesContainer {
                if let structure0 = structure0 {
                    utterancesDecoded0?.append(structure0)
                }
            }
        }
        utterances = utterancesDecoded0
    }
}

extension LexModelBuildingClientTypes {
    public enum ImportStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportStatus] {
            return [
                .complete,
                .failed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ImportStatus(rawValue: rawValue) ?? ImportStatus.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes.InputContext: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension LexModelBuildingClientTypes.InputContext: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InputContext(name: \(Swift.String(describing: name)))"}
}

extension LexModelBuildingClientTypes {
    /// The name of a context that must be active for an intent to be selected
    ///       by Amazon Lex.
    public struct InputContext: Swift.Equatable {
        /// The name of the context.
        /// This member is required.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension LexModelBuildingClientTypes.Intent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case intentName
        case intentVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let intentName = intentName {
            try encodeContainer.encode(intentName, forKey: .intentName)
        }
        if let intentVersion = intentVersion {
            try encodeContainer.encode(intentVersion, forKey: .intentVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .intentName)
        intentName = intentNameDecoded
        let intentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .intentVersion)
        intentVersion = intentVersionDecoded
    }
}

extension LexModelBuildingClientTypes.Intent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Intent(intentName: \(Swift.String(describing: intentName)), intentVersion: \(Swift.String(describing: intentVersion)))"}
}

extension LexModelBuildingClientTypes {
    /// Identifies the specific version of an intent.
    public struct Intent: Swift.Equatable {
        /// The name of the intent.
        /// This member is required.
        public var intentName: Swift.String?
        /// The version of the intent.
        /// This member is required.
        public var intentVersion: Swift.String?

        public init (
            intentName: Swift.String? = nil,
            intentVersion: Swift.String? = nil
        )
        {
            self.intentName = intentName
            self.intentVersion = intentVersion
        }
    }

}

extension LexModelBuildingClientTypes.IntentMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDate
        case description
        case lastUpdatedDate
        case name
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdDate = createdDate {
            try encodeContainer.encode(createdDate.timeIntervalSince1970, forKey: .createdDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastUpdatedDate = lastUpdatedDate {
            try encodeContainer.encode(lastUpdatedDate.timeIntervalSince1970, forKey: .lastUpdatedDate)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension LexModelBuildingClientTypes.IntentMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IntentMetadata(createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), name: \(Swift.String(describing: name)), version: \(Swift.String(describing: version)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides information about an intent.
    public struct IntentMetadata: Swift.Equatable {
        /// The date that the intent was created.
        public var createdDate: ClientRuntime.Date?
        /// A description of the intent.
        public var description: Swift.String?
        /// The date that the intent was updated. When you create an intent,
        ///       the creation date and last updated date are the same.
        public var lastUpdatedDate: ClientRuntime.Date?
        /// The name of the intent.
        public var name: Swift.String?
        /// The version of the intent.
        public var version: Swift.String?

        public init (
            createdDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedDate: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.createdDate = createdDate
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.name = name
            self.version = version
        }
    }

}

extension InternalFailureException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalFailureException(message: \(Swift.String(describing: message)))"}
}

extension InternalFailureException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalFailureExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An internal Amazon Lex error occurred. Try your request again.
public struct InternalFailureException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalFailureExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalFailureExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LexModelBuildingClientTypes.KendraConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kendraIndex
        case queryFilterString
        case role
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kendraIndex = kendraIndex {
            try encodeContainer.encode(kendraIndex, forKey: .kendraIndex)
        }
        if let queryFilterString = queryFilterString {
            try encodeContainer.encode(queryFilterString, forKey: .queryFilterString)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kendraIndexDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kendraIndex)
        kendraIndex = kendraIndexDecoded
        let queryFilterStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryFilterString)
        queryFilterString = queryFilterStringDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
    }
}

extension LexModelBuildingClientTypes.KendraConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KendraConfiguration(kendraIndex: \(Swift.String(describing: kendraIndex)), queryFilterString: \(Swift.String(describing: queryFilterString)), role: \(Swift.String(describing: role)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides configuration information for the AMAZON.KendraSearchIntent
    ///       intent. When you use this intent, Amazon Lex searches the specified Amazon
    ///       Kendra index and returns documents from the index that match the user's
    ///       utterance. For more information, see <a href="http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html">
    ///         AMAZON.KendraSearchIntent.
    public struct KendraConfiguration: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Amazon Kendra index that you
        ///       want the AMAZON.KendraSearchIntent intent to search. The index must be in
        ///       the same account and Region as the Amazon Lex bot. If the Amazon Kendra index
        ///       does not exist, you get an exception when you call the
        ///         PutIntent operation.
        /// This member is required.
        public var kendraIndex: Swift.String?
        /// A query filter that Amazon Lex sends to Amazon Kendra to filter the
        ///       response from the query. The filter is in the format defined by Amazon
        ///       Kendra. For more information, see <a href="http://docs.aws.amazon.com/kendra/latest/dg/filtering.html">Filtering
        ///         queries.
        ///          You can override this filter string with a new filter string at
        ///       runtime.
        public var queryFilterString: Swift.String?
        /// The Amazon Resource Name (ARN) of an IAM role that has permission to
        ///       search the Amazon Kendra index. The role must be in the same account and
        ///       Region as the Amazon Lex bot. If the role does not exist, you get an exception
        ///       when you call the PutIntent operation.
        /// This member is required.
        public var role: Swift.String?

        public init (
            kendraIndex: Swift.String? = nil,
            queryFilterString: Swift.String? = nil,
            role: Swift.String? = nil
        )
        {
            self.kendraIndex = kendraIndex
            self.queryFilterString = queryFilterString
            self.role = role
        }
    }

}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)), retryAfterSeconds: \(Swift.String(describing: retryAfterSeconds)))"}
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            self.retryAfterSeconds = retryAfterSecondsHeaderValue
        } else {
            self.retryAfterSeconds = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request exceeded a limit. Try your request again.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var retryAfterSeconds: Swift.String?

    public init (
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.String? = nil
    )
    {
        self.message = message
        self.retryAfterSeconds = retryAfterSeconds
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListTagsForResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let resourceArn = input.resourceArn else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("resourceArn is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/tags/\(resourceArn.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTagsForResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource to get a list of tags
    ///       for.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The tags associated with a resource.
    public var tags: [LexModelBuildingClientTypes.Tag]?

    public init (
        tags: [LexModelBuildingClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let tags: [LexModelBuildingClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LexModelBuildingClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LexModelBuildingClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension LexModelBuildingClientTypes {
    public enum Locale: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deDe
        case enAu
        case enGb
        case enIn
        case enUs
        case es419
        case esEs
        case esUs
        case frCa
        case frFr
        case itIt
        case jaJp
        case koKr
        case sdkUnknown(Swift.String)

        public static var allCases: [Locale] {
            return [
                .deDe,
                .enAu,
                .enGb,
                .enIn,
                .enUs,
                .es419,
                .esEs,
                .esUs,
                .frCa,
                .frFr,
                .itIt,
                .jaJp,
                .koKr,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deDe: return "de-DE"
            case .enAu: return "en-AU"
            case .enGb: return "en-GB"
            case .enIn: return "en-IN"
            case .enUs: return "en-US"
            case .es419: return "es-419"
            case .esEs: return "es-ES"
            case .esUs: return "es-US"
            case .frCa: return "fr-CA"
            case .frFr: return "fr-FR"
            case .itIt: return "it-IT"
            case .jaJp: return "ja-JP"
            case .koKr: return "ko-KR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Locale(rawValue: rawValue) ?? Locale.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes.LogSettingsRequest: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination
        case kmsKeyArn
        case logType
        case resourceArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination.rawValue, forKey: .destination)
        }
        if let kmsKeyArn = kmsKeyArn {
            try encodeContainer.encode(kmsKeyArn, forKey: .kmsKeyArn)
        }
        if let logType = logType {
            try encodeContainer.encode(logType.rawValue, forKey: .logType)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logTypeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.LogType.self, forKey: .logType)
        logType = logTypeDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension LexModelBuildingClientTypes.LogSettingsRequest: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LogSettingsRequest(destination: \(Swift.String(describing: destination)), kmsKeyArn: \(Swift.String(describing: kmsKeyArn)), logType: \(Swift.String(describing: logType)), resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension LexModelBuildingClientTypes {
    /// Settings used to configure delivery mode and destination for
    ///       conversation logs.
    public struct LogSettingsRequest: Swift.Equatable {
        /// Where the logs will be delivered. Text logs are delivered to a
        ///       CloudWatch Logs log group. Audio logs are delivered to an S3
        ///       bucket.
        /// This member is required.
        public var destination: LexModelBuildingClientTypes.Destination?
        /// The Amazon Resource Name (ARN) of the AWS KMS customer managed key for
        ///       encrypting audio logs delivered to an S3 bucket. The key does not apply to
        ///       CloudWatch Logs and is optional for S3 buckets.
        public var kmsKeyArn: Swift.String?
        /// The type of logging to enable. Text logs are delivered to a CloudWatch
        ///       Logs log group. Audio logs are delivered to an S3 bucket.
        /// This member is required.
        public var logType: LexModelBuildingClientTypes.LogType?
        /// The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3
        ///       bucket where the logs should be delivered.
        /// This member is required.
        public var resourceArn: Swift.String?

        public init (
            destination: LexModelBuildingClientTypes.Destination? = nil,
            kmsKeyArn: Swift.String? = nil,
            logType: LexModelBuildingClientTypes.LogType? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.destination = destination
            self.kmsKeyArn = kmsKeyArn
            self.logType = logType
            self.resourceArn = resourceArn
        }
    }

}

extension LexModelBuildingClientTypes.LogSettingsResponse: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination
        case kmsKeyArn
        case logType
        case resourceArn
        case resourcePrefix
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination.rawValue, forKey: .destination)
        }
        if let kmsKeyArn = kmsKeyArn {
            try encodeContainer.encode(kmsKeyArn, forKey: .kmsKeyArn)
        }
        if let logType = logType {
            try encodeContainer.encode(logType.rawValue, forKey: .logType)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let resourcePrefix = resourcePrefix {
            try encodeContainer.encode(resourcePrefix, forKey: .resourcePrefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logTypeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.LogType.self, forKey: .logType)
        logType = logTypeDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let resourcePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourcePrefix)
        resourcePrefix = resourcePrefixDecoded
    }
}

extension LexModelBuildingClientTypes.LogSettingsResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LogSettingsResponse(destination: \(Swift.String(describing: destination)), kmsKeyArn: \(Swift.String(describing: kmsKeyArn)), logType: \(Swift.String(describing: logType)), resourceArn: \(Swift.String(describing: resourceArn)), resourcePrefix: \(Swift.String(describing: resourcePrefix)))"}
}

extension LexModelBuildingClientTypes {
    /// The settings for conversation logs.
    public struct LogSettingsResponse: Swift.Equatable {
        /// The destination where logs are delivered.
        public var destination: LexModelBuildingClientTypes.Destination?
        /// The Amazon Resource Name (ARN) of the key used to encrypt audio logs
        ///       in an S3 bucket.
        public var kmsKeyArn: Swift.String?
        /// The type of logging that is enabled.
        public var logType: LexModelBuildingClientTypes.LogType?
        /// The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3
        ///       bucket where the logs are delivered.
        public var resourceArn: Swift.String?
        /// The resource prefix is the first part of the S3 object key within the
        ///       S3 bucket that you specified to contain audio logs. For CloudWatch Logs it
        ///       is the prefix of the log stream name within the log group that you
        ///       specified.
        public var resourcePrefix: Swift.String?

        public init (
            destination: LexModelBuildingClientTypes.Destination? = nil,
            kmsKeyArn: Swift.String? = nil,
            logType: LexModelBuildingClientTypes.LogType? = nil,
            resourceArn: Swift.String? = nil,
            resourcePrefix: Swift.String? = nil
        )
        {
            self.destination = destination
            self.kmsKeyArn = kmsKeyArn
            self.logType = logType
            self.resourceArn = resourceArn
            self.resourcePrefix = resourcePrefix
        }
    }

}

extension LexModelBuildingClientTypes {
    public enum LogType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case audio
        case text
        case sdkUnknown(Swift.String)

        public static var allCases: [LogType] {
            return [
                .audio,
                .text,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .audio: return "AUDIO"
            case .text: return "TEXT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogType(rawValue: rawValue) ?? LogType.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes {
    public enum MergeStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failOnConflict
        case overwriteLatest
        case sdkUnknown(Swift.String)

        public static var allCases: [MergeStrategy] {
            return [
                .failOnConflict,
                .overwriteLatest,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failOnConflict: return "FAIL_ON_CONFLICT"
            case .overwriteLatest: return "OVERWRITE_LATEST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MergeStrategy(rawValue: rawValue) ?? MergeStrategy.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes.Message: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content
        case contentType
        case groupNumber
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let contentType = contentType {
            try encodeContainer.encode(contentType.rawValue, forKey: .contentType)
        }
        if let groupNumber = groupNumber {
            try encodeContainer.encode(groupNumber, forKey: .groupNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentTypeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ContentType.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
        let groupNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .groupNumber)
        groupNumber = groupNumberDecoded
    }
}

extension LexModelBuildingClientTypes.Message: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Message(content: \(Swift.String(describing: content)), contentType: \(Swift.String(describing: contentType)), groupNumber: \(Swift.String(describing: groupNumber)))"}
}

extension LexModelBuildingClientTypes {
    /// The message object that provides the message text and its
    ///       type.
    public struct Message: Swift.Equatable {
        /// The text of the message.
        /// This member is required.
        public var content: Swift.String?
        /// The content type of the message string.
        /// This member is required.
        public var contentType: LexModelBuildingClientTypes.ContentType?
        /// Identifies the message group that the message belongs to. When a group
        ///       is assigned to a message, Amazon Lex returns one message from each group in the
        ///       response.
        public var groupNumber: Swift.Int?

        public init (
            content: Swift.String? = nil,
            contentType: LexModelBuildingClientTypes.ContentType? = nil,
            groupNumber: Swift.Int? = nil
        )
        {
            self.content = content
            self.contentType = contentType
            self.groupNumber = groupNumber
        }
    }

}

extension LexModelBuildingClientTypes.MigrationAlert: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case message
        case referenceURLs
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            var detailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .details)
            for migrationalertdetails0 in details {
                try detailsContainer.encode(migrationalertdetails0)
            }
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let referenceURLs = referenceURLs {
            var referenceURLsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .referenceURLs)
            for migrationalertreferenceurls0 in referenceURLs {
                try referenceURLsContainer.encode(migrationalertreferenceurls0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.MigrationAlertType.self, forKey: .type)
        type = typeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let detailsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .details)
        var detailsDecoded0:[Swift.String]? = nil
        if let detailsContainer = detailsContainer {
            detailsDecoded0 = [Swift.String]()
            for string0 in detailsContainer {
                if let string0 = string0 {
                    detailsDecoded0?.append(string0)
                }
            }
        }
        details = detailsDecoded0
        let referenceURLsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .referenceURLs)
        var referenceURLsDecoded0:[Swift.String]? = nil
        if let referenceURLsContainer = referenceURLsContainer {
            referenceURLsDecoded0 = [Swift.String]()
            for string0 in referenceURLsContainer {
                if let string0 = string0 {
                    referenceURLsDecoded0?.append(string0)
                }
            }
        }
        referenceURLs = referenceURLsDecoded0
    }
}

extension LexModelBuildingClientTypes.MigrationAlert: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MigrationAlert(details: \(Swift.String(describing: details)), message: \(Swift.String(describing: message)), referenceURLs: \(Swift.String(describing: referenceURLs)), type: \(Swift.String(describing: type)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides information about alerts and warnings that Amazon Lex sends during
    ///       a migration. The alerts include information about how to resolve the
    ///       issue.
    public struct MigrationAlert: Swift.Equatable {
        /// Additional details about the alert.
        public var details: [Swift.String]?
        /// A message that describes why the alert was issued.
        public var message: Swift.String?
        /// A link to the Amazon Lex documentation that describes how to resolve
        ///     the alert.
        public var referenceURLs: [Swift.String]?
        /// The type of alert. There are two kinds of alerts:
        ///
        ///
        ///
        ///                   ERROR - There was an issue with the migration that
        ///           can't be resolved. The migration stops.
        ///
        ///
        ///
        ///                   WARN - There was an issue with the migration that
        ///           requires manual changes to the new Amazon Lex V2 bot. The migration
        ///           continues.
        ///
        ///
        public var type: LexModelBuildingClientTypes.MigrationAlertType?

        public init (
            details: [Swift.String]? = nil,
            message: Swift.String? = nil,
            referenceURLs: [Swift.String]? = nil,
            type: LexModelBuildingClientTypes.MigrationAlertType? = nil
        )
        {
            self.details = details
            self.message = message
            self.referenceURLs = referenceURLs
            self.type = type
        }
    }

}

extension LexModelBuildingClientTypes {
    public enum MigrationAlertType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case error
        case warn
        case sdkUnknown(Swift.String)

        public static var allCases: [MigrationAlertType] {
            return [
                .error,
                .warn,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .error: return "ERROR"
            case .warn: return "WARN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MigrationAlertType(rawValue: rawValue) ?? MigrationAlertType.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes {
    public enum MigrationSortAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case migrationDateTime
        case v1BotName
        case sdkUnknown(Swift.String)

        public static var allCases: [MigrationSortAttribute] {
            return [
                .migrationDateTime,
                .v1BotName,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .migrationDateTime: return "MIGRATION_DATE_TIME"
            case .v1BotName: return "V1_BOT_NAME"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MigrationSortAttribute(rawValue: rawValue) ?? MigrationSortAttribute.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes {
    public enum MigrationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [MigrationStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MigrationStatus(rawValue: rawValue) ?? MigrationStatus.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes {
    public enum MigrationStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createNew
        case updateExisting
        case sdkUnknown(Swift.String)

        public static var allCases: [MigrationStrategy] {
            return [
                .createNew,
                .updateExisting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createNew: return "CREATE_NEW"
            case .updateExisting: return "UPDATE_EXISTING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MigrationStrategy(rawValue: rawValue) ?? MigrationStrategy.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes.MigrationSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case migrationId
        case migrationStatus
        case migrationStrategy
        case migrationTimestamp
        case v1BotLocale
        case v1BotName
        case v1BotVersion
        case v2BotId
        case v2BotRole
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let migrationId = migrationId {
            try encodeContainer.encode(migrationId, forKey: .migrationId)
        }
        if let migrationStatus = migrationStatus {
            try encodeContainer.encode(migrationStatus.rawValue, forKey: .migrationStatus)
        }
        if let migrationStrategy = migrationStrategy {
            try encodeContainer.encode(migrationStrategy.rawValue, forKey: .migrationStrategy)
        }
        if let migrationTimestamp = migrationTimestamp {
            try encodeContainer.encode(migrationTimestamp.timeIntervalSince1970, forKey: .migrationTimestamp)
        }
        if let v1BotLocale = v1BotLocale {
            try encodeContainer.encode(v1BotLocale.rawValue, forKey: .v1BotLocale)
        }
        if let v1BotName = v1BotName {
            try encodeContainer.encode(v1BotName, forKey: .v1BotName)
        }
        if let v1BotVersion = v1BotVersion {
            try encodeContainer.encode(v1BotVersion, forKey: .v1BotVersion)
        }
        if let v2BotId = v2BotId {
            try encodeContainer.encode(v2BotId, forKey: .v2BotId)
        }
        if let v2BotRole = v2BotRole {
            try encodeContainer.encode(v2BotRole, forKey: .v2BotRole)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let migrationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .migrationId)
        migrationId = migrationIdDecoded
        let v1BotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v1BotName)
        v1BotName = v1BotNameDecoded
        let v1BotVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v1BotVersion)
        v1BotVersion = v1BotVersionDecoded
        let v1BotLocaleDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Locale.self, forKey: .v1BotLocale)
        v1BotLocale = v1BotLocaleDecoded
        let v2BotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v2BotId)
        v2BotId = v2BotIdDecoded
        let v2BotRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v2BotRole)
        v2BotRole = v2BotRoleDecoded
        let migrationStatusDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.MigrationStatus.self, forKey: .migrationStatus)
        migrationStatus = migrationStatusDecoded
        let migrationStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.MigrationStrategy.self, forKey: .migrationStrategy)
        migrationStrategy = migrationStrategyDecoded
        let migrationTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .migrationTimestamp)
        migrationTimestamp = migrationTimestampDecoded
    }
}

extension LexModelBuildingClientTypes.MigrationSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MigrationSummary(migrationId: \(Swift.String(describing: migrationId)), migrationStatus: \(Swift.String(describing: migrationStatus)), migrationStrategy: \(Swift.String(describing: migrationStrategy)), migrationTimestamp: \(Swift.String(describing: migrationTimestamp)), v1BotLocale: \(Swift.String(describing: v1BotLocale)), v1BotName: \(Swift.String(describing: v1BotName)), v1BotVersion: \(Swift.String(describing: v1BotVersion)), v2BotId: \(Swift.String(describing: v2BotId)), v2BotRole: \(Swift.String(describing: v2BotRole)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides information about migrating a bot from Amazon Lex V1 to Amazon Lex V2.
    public struct MigrationSummary: Swift.Equatable {
        /// The unique identifier that Amazon Lex assigned to the migration.
        public var migrationId: Swift.String?
        /// The status of the operation. When the status is COMPLETE
        ///     the bot is available in Amazon Lex V2. There may be alerts and warnings that
        ///     need to be resolved to complete the migration.
        public var migrationStatus: LexModelBuildingClientTypes.MigrationStatus?
        /// The strategy used to conduct the migration.
        public var migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy?
        /// The date and time that the migration started.
        public var migrationTimestamp: ClientRuntime.Date?
        /// The locale of the Amazon Lex V1 bot that is the source of the migration.
        public var v1BotLocale: LexModelBuildingClientTypes.Locale?
        /// The name of the Amazon Lex V1 bot that is the source of the migration.
        public var v1BotName: Swift.String?
        /// The version of the Amazon Lex V1 bot that is the source of the migration.
        public var v1BotVersion: Swift.String?
        /// The unique identifier of the Amazon Lex V2 that is the destination of the migration.
        public var v2BotId: Swift.String?
        /// The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.
        public var v2BotRole: Swift.String?

        public init (
            migrationId: Swift.String? = nil,
            migrationStatus: LexModelBuildingClientTypes.MigrationStatus? = nil,
            migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy? = nil,
            migrationTimestamp: ClientRuntime.Date? = nil,
            v1BotLocale: LexModelBuildingClientTypes.Locale? = nil,
            v1BotName: Swift.String? = nil,
            v1BotVersion: Swift.String? = nil,
            v2BotId: Swift.String? = nil,
            v2BotRole: Swift.String? = nil
        )
        {
            self.migrationId = migrationId
            self.migrationStatus = migrationStatus
            self.migrationStrategy = migrationStrategy
            self.migrationTimestamp = migrationTimestamp
            self.v1BotLocale = v1BotLocale
            self.v1BotName = v1BotName
            self.v1BotVersion = v1BotVersion
            self.v2BotId = v2BotId
            self.v2BotRole = v2BotRole
        }
    }

}

extension NotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotFoundException(message: \(Swift.String(describing: message)))"}
}

extension NotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource specified in the request was not found. Check the
///       resource and try again.
public struct NotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LexModelBuildingClientTypes {
    public enum ObfuscationSetting: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case defaultObfuscation
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ObfuscationSetting] {
            return [
                .defaultObfuscation,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .defaultObfuscation: return "DEFAULT_OBFUSCATION"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObfuscationSetting(rawValue: rawValue) ?? ObfuscationSetting.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes.OutputContext: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case timeToLiveInSeconds
        case turnsToLive
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let timeToLiveInSeconds = timeToLiveInSeconds {
            try encodeContainer.encode(timeToLiveInSeconds, forKey: .timeToLiveInSeconds)
        }
        if let turnsToLive = turnsToLive {
            try encodeContainer.encode(turnsToLive, forKey: .turnsToLive)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let timeToLiveInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeToLiveInSeconds)
        timeToLiveInSeconds = timeToLiveInSecondsDecoded
        let turnsToLiveDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .turnsToLive)
        turnsToLive = turnsToLiveDecoded
    }
}

extension LexModelBuildingClientTypes.OutputContext: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OutputContext(name: \(Swift.String(describing: name)), timeToLiveInSeconds: \(Swift.String(describing: timeToLiveInSeconds)), turnsToLive: \(Swift.String(describing: turnsToLive)))"}
}

extension LexModelBuildingClientTypes {
    /// The specification of an output context that is set when an intent is
    ///       fulfilled.
    public struct OutputContext: Swift.Equatable {
        /// The name of the context.
        /// This member is required.
        public var name: Swift.String?
        /// The number of seconds that the context should be active after it is
        ///       first sent in a PostContent or PostText
        ///       response. You can set the value between 5 and 86,400 seconds (24
        ///       hours).
        /// This member is required.
        public var timeToLiveInSeconds: Swift.Int?
        /// The number of conversation turns that the context should be active. A
        ///       conversation turn is one PostContent or PostText
        ///       request and the corresponding response from Amazon Lex.
        /// This member is required.
        public var turnsToLive: Swift.Int?

        public init (
            name: Swift.String? = nil,
            timeToLiveInSeconds: Swift.Int? = nil,
            turnsToLive: Swift.Int? = nil
        )
        {
            self.name = name
            self.timeToLiveInSeconds = timeToLiveInSeconds
            self.turnsToLive = turnsToLive
        }
    }

}

extension PreconditionFailedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PreconditionFailedException(message: \(Swift.String(describing: message)))"}
}

extension PreconditionFailedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PreconditionFailedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///  The checksum of the resource that you are trying to change does
///       not match the checksum in the request. Check the resource's checksum and
///       try again.
public struct PreconditionFailedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PreconditionFailedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension PreconditionFailedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LexModelBuildingClientTypes {
    public enum ProcessBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case build
        case save
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessBehavior] {
            return [
                .build,
                .save,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .build: return "BUILD"
            case .save: return "SAVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProcessBehavior(rawValue: rawValue) ?? ProcessBehavior.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes.Prompt: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxAttempts
        case messages
        case responseCard
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxAttempts = maxAttempts {
            try encodeContainer.encode(maxAttempts, forKey: .maxAttempts)
        }
        if let messages = messages {
            var messagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .messages)
            for messagelist0 in messages {
                try messagesContainer.encode(messagelist0)
            }
        }
        if let responseCard = responseCard {
            try encodeContainer.encode(responseCard, forKey: .responseCard)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messagesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Message?].self, forKey: .messages)
        var messagesDecoded0:[LexModelBuildingClientTypes.Message]? = nil
        if let messagesContainer = messagesContainer {
            messagesDecoded0 = [LexModelBuildingClientTypes.Message]()
            for structure0 in messagesContainer {
                if let structure0 = structure0 {
                    messagesDecoded0?.append(structure0)
                }
            }
        }
        messages = messagesDecoded0
        let maxAttemptsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAttempts)
        maxAttempts = maxAttemptsDecoded
        let responseCardDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .responseCard)
        responseCard = responseCardDecoded
    }
}

extension LexModelBuildingClientTypes.Prompt: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Prompt(maxAttempts: \(Swift.String(describing: maxAttempts)), messages: \(Swift.String(describing: messages)), responseCard: \(Swift.String(describing: responseCard)))"}
}

extension LexModelBuildingClientTypes {
    /// Obtains information from the user. To define a prompt, provide one
    ///       or more messages and specify the number of attempts to get information
    ///       from the user. If you provide more than one message, Amazon Lex chooses one of
    ///       the messages to use to prompt the user. For more information, see how-it-works.
    public struct Prompt: Swift.Equatable {
        /// The number of times to prompt the user for information.
        /// This member is required.
        public var maxAttempts: Swift.Int?
        /// An array of objects, each of which provides a message string and
        ///       its type. You can specify the message string in plain text or in Speech
        ///       Synthesis Markup Language (SSML).
        /// This member is required.
        public var messages: [LexModelBuildingClientTypes.Message]?
        /// A response card. Amazon Lex uses this prompt at runtime, in the
        ///         PostText API response. It substitutes session attributes
        ///       and slot values for placeholders in the response card. For more
        ///       information, see ex-resp-card.
        public var responseCard: Swift.String?

        public init (
            maxAttempts: Swift.Int? = nil,
            messages: [LexModelBuildingClientTypes.Message]? = nil,
            responseCard: Swift.String? = nil
        )
        {
            self.maxAttempts = maxAttempts
            self.messages = messages
            self.responseCard = responseCard
        }
    }

}

public struct PutBotAliasInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBotAliasInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBotAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBotAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBotAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBotAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBotAliasOutputError>
}

extension PutBotAliasInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBotAliasInput(botName: \(Swift.String(describing: botName)), botVersion: \(Swift.String(describing: botVersion)), checksum: \(Swift.String(describing: checksum)), conversationLogs: \(Swift.String(describing: conversationLogs)), description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), tags: \(Swift.String(describing: tags)))"}
}

extension PutBotAliasInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botVersion
        case checksum
        case conversationLogs
        case description
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let botVersion = botVersion {
            try encodeContainer.encode(botVersion, forKey: .botVersion)
        }
        if let checksum = checksum {
            try encodeContainer.encode(checksum, forKey: .checksum)
        }
        if let conversationLogs = conversationLogs {
            try encodeContainer.encode(conversationLogs, forKey: .conversationLogs)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct PutBotAliasInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBotAliasInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBotAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBotAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBotAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBotAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBotAliasOutputError>
}

public struct PutBotAliasInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBotAliasInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBotAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBotAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBotAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBotAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBotAliasOutputError>
}

public struct PutBotAliasInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBotAliasInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: PutBotAliasInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBotAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let botName = input.botName else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("botName is nil and needs a value for the path of this operation"))))
        }
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(botName.urlPercentEncoding())/aliases/\(name.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PutBotAliasInput
    public typealias MOutput = ClientRuntime.OperationOutput<PutBotAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBotAliasOutputError>
}

public struct PutBotAliasInput: Swift.Equatable {
    /// The name of the bot.
    /// This member is required.
    public var botName: Swift.String?
    /// The version of the bot.
    /// This member is required.
    public var botVersion: Swift.String?
    /// Identifies a specific revision of the $LATEST
    ///       version.
    ///          When you create a new bot alias, leave the checksum
    ///       field blank. If you specify a checksum you get a
    ///         BadRequestException exception.
    ///          When you want to update a bot alias, set the checksum
    ///       field to the checksum of the most recent revision of the
    ///         $LATEST version. If you don't specify the
    ///         checksum field, or if the checksum does not match the
    ///         $LATEST version, you get a
    ///         PreconditionFailedException exception.
    public var checksum: Swift.String?
    /// Settings for conversation logs for the alias.
    public var conversationLogs: LexModelBuildingClientTypes.ConversationLogsRequest?
    /// A description of the alias.
    public var description: Swift.String?
    /// The name of the alias. The name is not case
    ///       sensitive.
    /// This member is required.
    public var name: Swift.String?
    /// A list of tags to add to the bot alias. You can only add tags when you
    ///       create an alias, you can't use the PutBotAlias operation to
    ///       update the tags on a bot alias. To update tags, use the
    ///         TagResource operation.
    public var tags: [LexModelBuildingClientTypes.Tag]?

    public init (
        botName: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        checksum: Swift.String? = nil,
        conversationLogs: LexModelBuildingClientTypes.ConversationLogsRequest? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [LexModelBuildingClientTypes.Tag]? = nil
    )
    {
        self.botName = botName
        self.botVersion = botVersion
        self.checksum = checksum
        self.conversationLogs = conversationLogs
        self.description = description
        self.name = name
        self.tags = tags
    }
}

struct PutBotAliasInputBody: Swift.Equatable {
    public let description: Swift.String?
    public let botVersion: Swift.String?
    public let checksum: Swift.String?
    public let conversationLogs: LexModelBuildingClientTypes.ConversationLogsRequest?
    public let tags: [LexModelBuildingClientTypes.Tag]?
}

extension PutBotAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botVersion
        case checksum
        case conversationLogs
        case description
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let conversationLogsDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ConversationLogsRequest.self, forKey: .conversationLogs)
        conversationLogs = conversationLogsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LexModelBuildingClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LexModelBuildingClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PutBotAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutBotAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PreconditionFailedException" : self = .preconditionFailedException(try PreconditionFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBotAliasOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case preconditionFailedException(PreconditionFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBotAliasOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBotAliasOutputResponse(botName: \(Swift.String(describing: botName)), botVersion: \(Swift.String(describing: botVersion)), checksum: \(Swift.String(describing: checksum)), conversationLogs: \(Swift.String(describing: conversationLogs)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), name: \(Swift.String(describing: name)), tags: \(Swift.String(describing: tags)))"}
}

extension PutBotAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutBotAliasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.botName = output.botName
            self.botVersion = output.botVersion
            self.checksum = output.checksum
            self.conversationLogs = output.conversationLogs
            self.createdDate = output.createdDate
            self.description = output.description
            self.lastUpdatedDate = output.lastUpdatedDate
            self.name = output.name
            self.tags = output.tags
        } else {
            self.botName = nil
            self.botVersion = nil
            self.checksum = nil
            self.conversationLogs = nil
            self.createdDate = nil
            self.description = nil
            self.lastUpdatedDate = nil
            self.name = nil
            self.tags = nil
        }
    }
}

public struct PutBotAliasOutputResponse: Swift.Equatable {
    /// The name of the bot that the alias points to.
    public var botName: Swift.String?
    /// The version of the bot that the alias points to.
    public var botVersion: Swift.String?
    /// The checksum for the current version of the alias.
    public var checksum: Swift.String?
    /// The settings that determine how Amazon Lex uses conversation logs for the
    ///       alias.
    public var conversationLogs: LexModelBuildingClientTypes.ConversationLogsResponse?
    /// The date that the bot alias was created.
    public var createdDate: ClientRuntime.Date?
    /// A description of the alias.
    public var description: Swift.String?
    /// The date that the bot alias was updated. When you create a
    ///       resource, the creation date and the last updated date are the
    ///       same.
    public var lastUpdatedDate: ClientRuntime.Date?
    /// The name of the alias.
    public var name: Swift.String?
    /// A list of tags associated with a bot.
    public var tags: [LexModelBuildingClientTypes.Tag]?

    public init (
        botName: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        checksum: Swift.String? = nil,
        conversationLogs: LexModelBuildingClientTypes.ConversationLogsResponse? = nil,
        createdDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        lastUpdatedDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        tags: [LexModelBuildingClientTypes.Tag]? = nil
    )
    {
        self.botName = botName
        self.botVersion = botVersion
        self.checksum = checksum
        self.conversationLogs = conversationLogs
        self.createdDate = createdDate
        self.description = description
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.tags = tags
    }
}

struct PutBotAliasOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let botVersion: Swift.String?
    public let botName: Swift.String?
    public let lastUpdatedDate: ClientRuntime.Date?
    public let createdDate: ClientRuntime.Date?
    public let checksum: Swift.String?
    public let conversationLogs: LexModelBuildingClientTypes.ConversationLogsResponse?
    public let tags: [LexModelBuildingClientTypes.Tag]?
}

extension PutBotAliasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botName
        case botVersion
        case checksum
        case conversationLogs
        case createdDate
        case description
        case lastUpdatedDate
        case name
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let botNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botName)
        botName = botNameDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let conversationLogsDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ConversationLogsResponse.self, forKey: .conversationLogs)
        conversationLogs = conversationLogsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LexModelBuildingClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LexModelBuildingClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public struct PutBotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBotOutputError>
}

extension PutBotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBotInput(abortStatement: \(Swift.String(describing: abortStatement)), checksum: \(Swift.String(describing: checksum)), childDirected: \(Swift.String(describing: childDirected)), clarificationPrompt: \(Swift.String(describing: clarificationPrompt)), createVersion: \(Swift.String(describing: createVersion)), description: \(Swift.String(describing: description)), detectSentiment: \(Swift.String(describing: detectSentiment)), enableModelImprovements: \(Swift.String(describing: enableModelImprovements)), idleSessionTTLInSeconds: \(Swift.String(describing: idleSessionTTLInSeconds)), intents: \(Swift.String(describing: intents)), locale: \(Swift.String(describing: locale)), name: \(Swift.String(describing: name)), nluIntentConfidenceThreshold: \(Swift.String(describing: nluIntentConfidenceThreshold)), processBehavior: \(Swift.String(describing: processBehavior)), tags: \(Swift.String(describing: tags)), voiceId: \(Swift.String(describing: voiceId)))"}
}

extension PutBotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortStatement
        case checksum
        case childDirected
        case clarificationPrompt
        case createVersion
        case description
        case detectSentiment
        case enableModelImprovements
        case idleSessionTTLInSeconds
        case intents
        case locale
        case nluIntentConfidenceThreshold
        case processBehavior
        case tags
        case voiceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let abortStatement = abortStatement {
            try encodeContainer.encode(abortStatement, forKey: .abortStatement)
        }
        if let checksum = checksum {
            try encodeContainer.encode(checksum, forKey: .checksum)
        }
        if let childDirected = childDirected {
            try encodeContainer.encode(childDirected, forKey: .childDirected)
        }
        if let clarificationPrompt = clarificationPrompt {
            try encodeContainer.encode(clarificationPrompt, forKey: .clarificationPrompt)
        }
        if let createVersion = createVersion {
            try encodeContainer.encode(createVersion, forKey: .createVersion)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let detectSentiment = detectSentiment {
            try encodeContainer.encode(detectSentiment, forKey: .detectSentiment)
        }
        if let enableModelImprovements = enableModelImprovements {
            try encodeContainer.encode(enableModelImprovements, forKey: .enableModelImprovements)
        }
        if let idleSessionTTLInSeconds = idleSessionTTLInSeconds {
            try encodeContainer.encode(idleSessionTTLInSeconds, forKey: .idleSessionTTLInSeconds)
        }
        if let intents = intents {
            var intentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .intents)
            for intentlist0 in intents {
                try intentsContainer.encode(intentlist0)
            }
        }
        if let locale = locale {
            try encodeContainer.encode(locale.rawValue, forKey: .locale)
        }
        if let nluIntentConfidenceThreshold = nluIntentConfidenceThreshold {
            try encodeContainer.encode(nluIntentConfidenceThreshold, forKey: .nluIntentConfidenceThreshold)
        }
        if let processBehavior = processBehavior {
            try encodeContainer.encode(processBehavior.rawValue, forKey: .processBehavior)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let voiceId = voiceId {
            try encodeContainer.encode(voiceId, forKey: .voiceId)
        }
    }
}

public struct PutBotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBotOutputError>
}

public struct PutBotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutBotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutBotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBotOutputError>
}

public struct PutBotInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutBotInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: PutBotInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/bots/\(name.urlPercentEncoding())/versions/$LATEST"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PutBotInput
    public typealias MOutput = ClientRuntime.OperationOutput<PutBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutBotOutputError>
}

public struct PutBotInput: Swift.Equatable {
    /// When Amazon Lex can't understand the user's input in context, it tries
    ///       to elicit the information a few times. After that, Amazon Lex sends the message
    ///       defined in abortStatement to the user, and then cancels the
    ///       conversation. To set the number of retries, use the
    ///         valueElicitationPrompt field for the slot type.
    ///          For example, in a pizza ordering bot, Amazon Lex might ask a user "What
    ///       type of crust would you like?" If the user's response is not one of the
    ///       expected responses (for example, "thin crust, "deep dish," etc.), Amazon Lex
    ///       tries to elicit a correct response a few more times.
    ///          For example, in a pizza ordering application,
    ///         OrderPizza might be one of the intents. This intent might
    ///       require the CrustType slot. You specify the
    ///         valueElicitationPrompt field when you create the
    ///         CrustType slot.
    ///          If you have defined a fallback intent the cancel statement will not be
    ///       sent to the user, the fallback intent is used instead. For more
    ///       information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/built-in-intent-fallback.html">
    ///         AMAZON.FallbackIntent.
    public var abortStatement: LexModelBuildingClientTypes.Statement?
    /// Identifies a specific revision of the $LATEST
    ///       version.
    ///          When you create a new bot, leave the checksum field
    ///       blank. If you specify a checksum you get a
    ///         BadRequestException exception.
    ///          When you want to update a bot, set the checksum field
    ///       to the checksum of the most recent revision of the $LATEST
    ///       version. If you don't specify the  checksum field, or if the
    ///       checksum does not match the $LATEST version, you get a
    ///         PreconditionFailedException exception.
    public var checksum: Swift.String?
    /// For each Amazon Lex bot created with the Amazon Lex Model Building Service,
    ///       you must specify whether your use of Amazon Lex is related to a website,
    ///       program, or other application that is directed or targeted, in whole or in
    ///       part, to children under age 13 and subject to the Children's Online
    ///       Privacy Protection Act (COPPA) by specifying true or
    ///         false in the childDirected field. By
    ///       specifying true in the childDirected field, you
    ///       confirm that your use of Amazon Lex is related
    ///       to a website, program, or other application that is directed or targeted,
    ///       in whole or in part, to children under age 13 and subject to COPPA. By
    ///       specifying false in the childDirected field, you
    ///       confirm that your use of Amazon Lex is not
    ///       related to a website, program, or other application that is directed or
    ///       targeted, in whole or in part, to children under age 13 and subject to
    ///       COPPA. You may not specify a default value for the
    ///         childDirected field that does not accurately reflect
    ///       whether your use of Amazon Lex is related to a website, program, or other
    ///       application that is directed or targeted, in whole or in part, to children
    ///       under age 13 and subject to COPPA.
    ///          If your use of Amazon Lex relates to a website, program, or other
    ///       application that is directed in whole or in part, to children under age
    ///       13, you must obtain any required verifiable parental consent under COPPA.
    ///       For information regarding the use of Amazon Lex in connection with websites,
    ///       programs, or other applications that are directed or targeted, in whole or
    ///       in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ.
    ///
    /// This member is required.
    public var childDirected: Swift.Bool?
    /// When Amazon Lex doesn't understand the user's intent, it uses this
    ///       message to get clarification. To specify how many times Amazon Lex should
    ///       repeat the clarification prompt, use the maxAttempts field.
    ///       If Amazon Lex still doesn't understand, it sends the message in the
    ///         abortStatement field.
    ///          When you create a clarification prompt, make sure that it suggests
    ///       the correct response from the user. for example, for a bot that orders
    ///       pizza and drinks, you might create this clarification prompt: "What would
    ///       you like to do? You can say 'Order a pizza' or 'Order a drink.'"
    ///          If you have defined a fallback intent, it will be invoked if the
    ///       clarification prompt is repeated the number of times defined in the
    ///         maxAttempts field. For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/built-in-intent-fallback.html">
    ///         AMAZON.FallbackIntent.
    ///          If you don't define a clarification prompt, at runtime Amazon Lex will
    ///       return a 400 Bad Request exception in three cases:
    ///
    ///
    ///                Follow-up prompt - When the user responds to a follow-up prompt
    ///           but does not provide an intent. For example, in response to a
    ///           follow-up prompt that says "Would you like anything else today?" the
    ///           user says "Yes." Amazon Lex will return a 400 Bad Request exception because
    ///           it does not have a clarification prompt to send to the user to get an
    ///           intent.
    ///
    ///
    ///                Lambda function - When using a Lambda function, you return an
    ///             ElicitIntent dialog type. Since Amazon Lex does not have a
    ///           clarification prompt to get an intent from the user, it returns a 400
    ///           Bad Request exception.
    ///
    ///
    ///                PutSession operation - When using the PutSession
    ///           operation, you send an ElicitIntent dialog type. Since
    ///           Amazon Lex does not have a clarification prompt to get an intent from the
    ///           user, it returns a 400 Bad Request exception.
    ///
    ///
    public var clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    /// When set to true a new numbered version of the bot is
    ///       created. This is the same as calling the CreateBotVersion
    ///       operation. If you don't specify createVersion, the default is
    ///         false.
    public var createVersion: Swift.Bool?
    /// A description of the bot.
    public var description: Swift.String?
    /// When set to true user utterances are sent to Amazon
    ///       Comprehend for sentiment analysis. If you don't specify
    ///         detectSentiment, the default is false.
    public var detectSentiment: Swift.Bool?
    /// Set to true to enable access to natural language
    ///       understanding improvements.
    ///          When you set the enableModelImprovements parameter to
    ///         true you can use the
    ///         nluIntentConfidenceThreshold parameter to configure
    ///       confidence scores. For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html">Confidence Scores.
    ///          You can only set the enableModelImprovements parameter in
    ///       certain Regions. If you set the parameter to true, your bot
    ///       has access to accuracy improvements.
    ///          The Regions where you can set the enableModelImprovements
    ///       parameter to true are:
    ///
    ///
    ///                US East (N. Virginia) (us-east-1)
    ///
    ///
    ///                US West (Oregon) (us-west-2)
    ///
    ///
    ///                Asia Pacific (Sydney) (ap-southeast-2)
    ///
    ///
    ///                EU (Ireland) (eu-west-1)
    ///
    ///
    ///          In other Regions, the enableModelImprovements parameter
    ///       is set to true by default. In these Regions setting the
    ///       parameter to false throws a ValidationException
    ///       exception.
    public var enableModelImprovements: Swift.Bool?
    /// The maximum time in seconds that Amazon Lex retains the data gathered in
    ///       a conversation.
    ///          A user interaction session remains active for the amount of time
    ///       specified. If no conversation occurs during this time, the session expires
    ///       and Amazon Lex deletes any data provided before the timeout.
    ///          For example, suppose that a user chooses the OrderPizza intent, but
    ///       gets sidetracked halfway through placing an order. If the user doesn't
    ///       complete the order within the specified time, Amazon Lex discards the slot
    ///       information that it gathered, and the user must start over.
    ///          If you don't include the idleSessionTTLInSeconds
    ///       element in a PutBot operation request, Amazon Lex uses the default
    ///       value. This is also true if the request replaces an existing
    ///       bot.
    ///          The default is 300 seconds (5 minutes).
    public var idleSessionTTLInSeconds: Swift.Int?
    /// An array of Intent objects. Each intent represents a
    ///       command that a user can express. For example, a pizza ordering bot might
    ///       support an OrderPizza intent. For more information, see how-it-works.
    public var intents: [LexModelBuildingClientTypes.Intent]?
    ///  Specifies the target locale for the bot. Any intent used in the
    ///       bot must be compatible with the locale of the bot.
    ///
    ///          The default is en-US.
    /// This member is required.
    public var locale: LexModelBuildingClientTypes.Locale?
    /// The name of the bot. The name is not case
    ///       sensitive.
    /// This member is required.
    public var name: Swift.String?
    /// Determines the threshold where Amazon Lex will insert the
    ///         AMAZON.FallbackIntent,
    ///         AMAZON.KendraSearchIntent, or both when returning
    ///       alternative intents in a <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html">PostContent or
    ///         <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText response.
    ///         AMAZON.FallbackIntent and
    ///         AMAZON.KendraSearchIntent are only inserted if they are
    ///       configured for the bot.
    ///          You must set the enableModelImprovements parameter to
    ///         true to use confidence scores in the following
    ///       regions.
    ///
    ///
    ///                US East (N. Virginia) (us-east-1)
    ///
    ///
    ///                US West (Oregon) (us-west-2)
    ///
    ///
    ///                Asia Pacific (Sydney) (ap-southeast-2)
    ///
    ///
    ///                EU (Ireland) (eu-west-1)
    ///
    ///
    ///          In other Regions, the enableModelImprovements parameter
    ///       is set to true by default.
    ///          For example, suppose a bot is configured with the confidence threshold
    ///       of 0.80 and the AMAZON.FallbackIntent. Amazon Lex returns three
    ///       alternative intents with the following confidence scores: IntentA (0.70),
    ///       IntentB (0.60), IntentC (0.50). The response from the
    ///         PostText operation would be:
    ///
    ///
    ///                AMAZON.FallbackIntent
    ///
    ///
    ///                IntentA
    ///
    ///
    ///                IntentB
    ///
    ///
    ///                IntentC
    ///
    ///
    public var nluIntentConfidenceThreshold: Swift.Double?
    /// If you set the processBehavior element to
    ///         BUILD, Amazon Lex builds the bot so that it can be run. If you
    ///       set the element to SAVE Amazon Lex saves the bot, but doesn't
    ///       build it.
    ///          If you don't specify this value, the default value is
    ///         BUILD.
    public var processBehavior: LexModelBuildingClientTypes.ProcessBehavior?
    /// A list of tags to add to the bot. You can only add tags when you
    ///       create a bot, you can't use the PutBot operation to update
    ///       the tags on a bot. To update tags, use the TagResource
    ///       operation.
    public var tags: [LexModelBuildingClientTypes.Tag]?
    /// The Amazon Polly voice ID that you want Amazon Lex to use for voice
    ///       interactions with the user. The locale configured for the voice must match
    ///       the locale of the bot. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/voicelist.html">Voices
    ///         in Amazon Polly in the Amazon Polly Developer
    ///         Guide.
    public var voiceId: Swift.String?

    public init (
        abortStatement: LexModelBuildingClientTypes.Statement? = nil,
        checksum: Swift.String? = nil,
        childDirected: Swift.Bool? = nil,
        clarificationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createVersion: Swift.Bool? = nil,
        description: Swift.String? = nil,
        detectSentiment: Swift.Bool? = nil,
        enableModelImprovements: Swift.Bool? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        intents: [LexModelBuildingClientTypes.Intent]? = nil,
        locale: LexModelBuildingClientTypes.Locale? = nil,
        name: Swift.String? = nil,
        nluIntentConfidenceThreshold: Swift.Double? = nil,
        processBehavior: LexModelBuildingClientTypes.ProcessBehavior? = nil,
        tags: [LexModelBuildingClientTypes.Tag]? = nil,
        voiceId: Swift.String? = nil
    )
    {
        self.abortStatement = abortStatement
        self.checksum = checksum
        self.childDirected = childDirected
        self.clarificationPrompt = clarificationPrompt
        self.createVersion = createVersion
        self.description = description
        self.detectSentiment = detectSentiment
        self.enableModelImprovements = enableModelImprovements
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.intents = intents
        self.locale = locale
        self.name = name
        self.nluIntentConfidenceThreshold = nluIntentConfidenceThreshold
        self.processBehavior = processBehavior
        self.tags = tags
        self.voiceId = voiceId
    }
}

struct PutBotInputBody: Swift.Equatable {
    public let description: Swift.String?
    public let intents: [LexModelBuildingClientTypes.Intent]?
    public let enableModelImprovements: Swift.Bool?
    public let nluIntentConfidenceThreshold: Swift.Double?
    public let clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    public let abortStatement: LexModelBuildingClientTypes.Statement?
    public let idleSessionTTLInSeconds: Swift.Int?
    public let voiceId: Swift.String?
    public let checksum: Swift.String?
    public let processBehavior: LexModelBuildingClientTypes.ProcessBehavior?
    public let locale: LexModelBuildingClientTypes.Locale?
    public let childDirected: Swift.Bool?
    public let detectSentiment: Swift.Bool?
    public let createVersion: Swift.Bool?
    public let tags: [LexModelBuildingClientTypes.Tag]?
}

extension PutBotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortStatement
        case checksum
        case childDirected
        case clarificationPrompt
        case createVersion
        case description
        case detectSentiment
        case enableModelImprovements
        case idleSessionTTLInSeconds
        case intents
        case locale
        case nluIntentConfidenceThreshold
        case processBehavior
        case tags
        case voiceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let intentsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Intent?].self, forKey: .intents)
        var intentsDecoded0:[LexModelBuildingClientTypes.Intent]? = nil
        if let intentsContainer = intentsContainer {
            intentsDecoded0 = [LexModelBuildingClientTypes.Intent]()
            for structure0 in intentsContainer {
                if let structure0 = structure0 {
                    intentsDecoded0?.append(structure0)
                }
            }
        }
        intents = intentsDecoded0
        let enableModelImprovementsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableModelImprovements)
        enableModelImprovements = enableModelImprovementsDecoded
        let nluIntentConfidenceThresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .nluIntentConfidenceThreshold)
        nluIntentConfidenceThreshold = nluIntentConfidenceThresholdDecoded
        let clarificationPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Prompt.self, forKey: .clarificationPrompt)
        clarificationPrompt = clarificationPromptDecoded
        let abortStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .abortStatement)
        abortStatement = abortStatementDecoded
        let idleSessionTTLInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idleSessionTTLInSeconds)
        idleSessionTTLInSeconds = idleSessionTTLInSecondsDecoded
        let voiceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let processBehaviorDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ProcessBehavior.self, forKey: .processBehavior)
        processBehavior = processBehaviorDecoded
        let localeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Locale.self, forKey: .locale)
        locale = localeDecoded
        let childDirectedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .childDirected)
        childDirected = childDirectedDecoded
        let detectSentimentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .detectSentiment)
        detectSentiment = detectSentimentDecoded
        let createVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .createVersion)
        createVersion = createVersionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LexModelBuildingClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LexModelBuildingClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PutBotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutBotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PreconditionFailedException" : self = .preconditionFailedException(try PreconditionFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBotOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case preconditionFailedException(PreconditionFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutBotOutputResponse(abortStatement: \(Swift.String(describing: abortStatement)), checksum: \(Swift.String(describing: checksum)), childDirected: \(Swift.String(describing: childDirected)), clarificationPrompt: \(Swift.String(describing: clarificationPrompt)), createVersion: \(Swift.String(describing: createVersion)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), detectSentiment: \(Swift.String(describing: detectSentiment)), enableModelImprovements: \(Swift.String(describing: enableModelImprovements)), failureReason: \(Swift.String(describing: failureReason)), idleSessionTTLInSeconds: \(Swift.String(describing: idleSessionTTLInSeconds)), intents: \(Swift.String(describing: intents)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), locale: \(Swift.String(describing: locale)), name: \(Swift.String(describing: name)), nluIntentConfidenceThreshold: \(Swift.String(describing: nluIntentConfidenceThreshold)), status: \(Swift.String(describing: status)), tags: \(Swift.String(describing: tags)), version: \(Swift.String(describing: version)), voiceId: \(Swift.String(describing: voiceId)))"}
}

extension PutBotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutBotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.abortStatement = output.abortStatement
            self.checksum = output.checksum
            self.childDirected = output.childDirected
            self.clarificationPrompt = output.clarificationPrompt
            self.createVersion = output.createVersion
            self.createdDate = output.createdDate
            self.description = output.description
            self.detectSentiment = output.detectSentiment
            self.enableModelImprovements = output.enableModelImprovements
            self.failureReason = output.failureReason
            self.idleSessionTTLInSeconds = output.idleSessionTTLInSeconds
            self.intents = output.intents
            self.lastUpdatedDate = output.lastUpdatedDate
            self.locale = output.locale
            self.name = output.name
            self.nluIntentConfidenceThreshold = output.nluIntentConfidenceThreshold
            self.status = output.status
            self.tags = output.tags
            self.version = output.version
            self.voiceId = output.voiceId
        } else {
            self.abortStatement = nil
            self.checksum = nil
            self.childDirected = nil
            self.clarificationPrompt = nil
            self.createVersion = nil
            self.createdDate = nil
            self.description = nil
            self.detectSentiment = nil
            self.enableModelImprovements = nil
            self.failureReason = nil
            self.idleSessionTTLInSeconds = nil
            self.intents = nil
            self.lastUpdatedDate = nil
            self.locale = nil
            self.name = nil
            self.nluIntentConfidenceThreshold = nil
            self.status = nil
            self.tags = nil
            self.version = nil
            self.voiceId = nil
        }
    }
}

public struct PutBotOutputResponse: Swift.Equatable {
    /// The message that Amazon Lex uses to cancel a conversation. For more
    ///       information, see PutBot.
    public var abortStatement: LexModelBuildingClientTypes.Statement?
    /// Checksum of the bot that you created.
    public var checksum: Swift.String?
    /// For each Amazon Lex bot created with the Amazon Lex Model Building Service,
    ///       you must specify whether your use of Amazon Lex is related to a website,
    ///       program, or other application that is directed or targeted, in whole or in
    ///       part, to children under age 13 and subject to the Children's Online
    ///       Privacy Protection Act (COPPA) by specifying true or
    ///         false in the childDirected field. By
    ///       specifying true in the childDirected field, you
    ///       confirm that your use of Amazon Lex is related
    ///       to a website, program, or other application that is directed or targeted,
    ///       in whole or in part, to children under age 13 and subject to COPPA. By
    ///       specifying false in the childDirected field, you
    ///       confirm that your use of Amazon Lex is not
    ///       related to a website, program, or other application that is directed or
    ///       targeted, in whole or in part, to children under age 13 and subject to
    ///       COPPA. You may not specify a default value for the
    ///         childDirected field that does not accurately reflect
    ///       whether your use of Amazon Lex is related to a website, program, or other
    ///       application that is directed or targeted, in whole or in part, to children
    ///       under age 13 and subject to COPPA.
    ///          If your use of Amazon Lex relates to a website, program, or other
    ///       application that is directed in whole or in part, to children under age
    ///       13, you must obtain any required verifiable parental consent under COPPA.
    ///       For information regarding the use of Amazon Lex in connection with websites,
    ///       programs, or other applications that are directed or targeted, in whole or
    ///       in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ.
    ///
    public var childDirected: Swift.Bool?
    ///  The prompts that Amazon Lex uses when it doesn't understand the user's
    ///       intent. For more information, see PutBot.
    public var clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    ///
    ///             True if a new version of the bot was created. If the
    ///         createVersion field was not specified in the request, the
    ///         createVersion field is set to false in the
    ///       response.
    public var createVersion: Swift.Bool?
    /// The date that the bot was created.
    public var createdDate: ClientRuntime.Date?
    /// A description of the bot.
    public var description: Swift.String?
    ///
    ///             true if the bot is configured to send user utterances to
    ///       Amazon Comprehend for sentiment analysis. If the
    ///         detectSentiment field was not specified in the request, the
    ///         detectSentiment field is false in the
    ///       response.
    public var detectSentiment: Swift.Bool?
    /// Indicates whether the bot uses accuracy improvements.
    ///         true indicates that the bot is using the improvements,
    ///       otherwise, false.
    public var enableModelImprovements: Swift.Bool?
    /// If status is FAILED, Amazon Lex provides the
    ///       reason that it failed to build the bot.
    public var failureReason: Swift.String?
    /// The maximum length of time that Amazon Lex retains the data gathered in
    ///       a conversation. For more information, see PutBot.
    public var idleSessionTTLInSeconds: Swift.Int?
    /// An array of Intent objects. For more information, see
    ///         PutBot.
    public var intents: [LexModelBuildingClientTypes.Intent]?
    /// The date that the bot was updated. When you create a resource, the
    ///       creation date and last updated date are the same.
    public var lastUpdatedDate: ClientRuntime.Date?
    ///  The target locale for the bot.
    public var locale: LexModelBuildingClientTypes.Locale?
    /// The name of the bot.
    public var name: Swift.String?
    /// The score that determines where Amazon Lex inserts the
    ///         AMAZON.FallbackIntent,
    ///         AMAZON.KendraSearchIntent, or both when returning
    ///       alternative intents in a <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html">PostContent or
    ///         <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText response.
    ///         AMAZON.FallbackIntent is inserted if the confidence score
    ///       for all intents is below this value.
    ///         AMAZON.KendraSearchIntent is only inserted if it is
    ///       configured for the bot.
    public var nluIntentConfidenceThreshold: Swift.Double?
    ///  When you send a request to create a bot with
    ///         processBehavior set to BUILD, Amazon Lex sets the
    ///         status response element to BUILDING.
    ///          In the READY_BASIC_TESTING state you can test the bot
    ///       with user inputs that exactly match the utterances configured for the
    ///       bot's intents and values in the slot types.
    ///          If Amazon Lex can't build the bot, Amazon Lex sets status to
    ///         FAILED. Amazon Lex returns the reason for the failure in the
    ///         failureReason response element.
    ///          When you set processBehavior to SAVE,
    ///       Amazon Lex sets the status code to NOT BUILT.
    ///          When the bot is in the READY state you can test and
    ///       publish the bot.
    public var status: LexModelBuildingClientTypes.Status?
    /// A list of tags associated with the bot.
    public var tags: [LexModelBuildingClientTypes.Tag]?
    /// The version of the bot. For a new bot, the version is always
    ///         $LATEST.
    public var version: Swift.String?
    /// The Amazon Polly voice ID that Amazon Lex uses for voice interaction
    ///       with the user. For more information, see PutBot.
    public var voiceId: Swift.String?

    public init (
        abortStatement: LexModelBuildingClientTypes.Statement? = nil,
        checksum: Swift.String? = nil,
        childDirected: Swift.Bool? = nil,
        clarificationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createVersion: Swift.Bool? = nil,
        createdDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        detectSentiment: Swift.Bool? = nil,
        enableModelImprovements: Swift.Bool? = nil,
        failureReason: Swift.String? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        intents: [LexModelBuildingClientTypes.Intent]? = nil,
        lastUpdatedDate: ClientRuntime.Date? = nil,
        locale: LexModelBuildingClientTypes.Locale? = nil,
        name: Swift.String? = nil,
        nluIntentConfidenceThreshold: Swift.Double? = nil,
        status: LexModelBuildingClientTypes.Status? = nil,
        tags: [LexModelBuildingClientTypes.Tag]? = nil,
        version: Swift.String? = nil,
        voiceId: Swift.String? = nil
    )
    {
        self.abortStatement = abortStatement
        self.checksum = checksum
        self.childDirected = childDirected
        self.clarificationPrompt = clarificationPrompt
        self.createVersion = createVersion
        self.createdDate = createdDate
        self.description = description
        self.detectSentiment = detectSentiment
        self.enableModelImprovements = enableModelImprovements
        self.failureReason = failureReason
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.intents = intents
        self.lastUpdatedDate = lastUpdatedDate
        self.locale = locale
        self.name = name
        self.nluIntentConfidenceThreshold = nluIntentConfidenceThreshold
        self.status = status
        self.tags = tags
        self.version = version
        self.voiceId = voiceId
    }
}

struct PutBotOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let intents: [LexModelBuildingClientTypes.Intent]?
    public let enableModelImprovements: Swift.Bool?
    public let nluIntentConfidenceThreshold: Swift.Double?
    public let clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    public let abortStatement: LexModelBuildingClientTypes.Statement?
    public let status: LexModelBuildingClientTypes.Status?
    public let failureReason: Swift.String?
    public let lastUpdatedDate: ClientRuntime.Date?
    public let createdDate: ClientRuntime.Date?
    public let idleSessionTTLInSeconds: Swift.Int?
    public let voiceId: Swift.String?
    public let checksum: Swift.String?
    public let version: Swift.String?
    public let locale: LexModelBuildingClientTypes.Locale?
    public let childDirected: Swift.Bool?
    public let createVersion: Swift.Bool?
    public let detectSentiment: Swift.Bool?
    public let tags: [LexModelBuildingClientTypes.Tag]?
}

extension PutBotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortStatement
        case checksum
        case childDirected
        case clarificationPrompt
        case createVersion
        case createdDate
        case description
        case detectSentiment
        case enableModelImprovements
        case failureReason
        case idleSessionTTLInSeconds
        case intents
        case lastUpdatedDate
        case locale
        case name
        case nluIntentConfidenceThreshold
        case status
        case tags
        case version
        case voiceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let intentsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Intent?].self, forKey: .intents)
        var intentsDecoded0:[LexModelBuildingClientTypes.Intent]? = nil
        if let intentsContainer = intentsContainer {
            intentsDecoded0 = [LexModelBuildingClientTypes.Intent]()
            for structure0 in intentsContainer {
                if let structure0 = structure0 {
                    intentsDecoded0?.append(structure0)
                }
            }
        }
        intents = intentsDecoded0
        let enableModelImprovementsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableModelImprovements)
        enableModelImprovements = enableModelImprovementsDecoded
        let nluIntentConfidenceThresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .nluIntentConfidenceThreshold)
        nluIntentConfidenceThreshold = nluIntentConfidenceThresholdDecoded
        let clarificationPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Prompt.self, forKey: .clarificationPrompt)
        clarificationPrompt = clarificationPromptDecoded
        let abortStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .abortStatement)
        abortStatement = abortStatementDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let idleSessionTTLInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idleSessionTTLInSeconds)
        idleSessionTTLInSeconds = idleSessionTTLInSecondsDecoded
        let voiceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let localeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Locale.self, forKey: .locale)
        locale = localeDecoded
        let childDirectedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .childDirected)
        childDirected = childDirectedDecoded
        let createVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .createVersion)
        createVersion = createVersionDecoded
        let detectSentimentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .detectSentiment)
        detectSentiment = detectSentimentDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LexModelBuildingClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LexModelBuildingClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public struct PutIntentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutIntentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutIntentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutIntentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutIntentOutputError>
}

extension PutIntentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutIntentInput(checksum: \(Swift.String(describing: checksum)), conclusionStatement: \(Swift.String(describing: conclusionStatement)), confirmationPrompt: \(Swift.String(describing: confirmationPrompt)), createVersion: \(Swift.String(describing: createVersion)), description: \(Swift.String(describing: description)), dialogCodeHook: \(Swift.String(describing: dialogCodeHook)), followUpPrompt: \(Swift.String(describing: followUpPrompt)), fulfillmentActivity: \(Swift.String(describing: fulfillmentActivity)), inputContexts: \(Swift.String(describing: inputContexts)), kendraConfiguration: \(Swift.String(describing: kendraConfiguration)), name: \(Swift.String(describing: name)), outputContexts: \(Swift.String(describing: outputContexts)), parentIntentSignature: \(Swift.String(describing: parentIntentSignature)), rejectionStatement: \(Swift.String(describing: rejectionStatement)), sampleUtterances: \(Swift.String(describing: sampleUtterances)), slots: \(Swift.String(describing: slots)))"}
}

extension PutIntentInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
        case conclusionStatement
        case confirmationPrompt
        case createVersion
        case description
        case dialogCodeHook
        case followUpPrompt
        case fulfillmentActivity
        case inputContexts
        case kendraConfiguration
        case outputContexts
        case parentIntentSignature
        case rejectionStatement
        case sampleUtterances
        case slots
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checksum = checksum {
            try encodeContainer.encode(checksum, forKey: .checksum)
        }
        if let conclusionStatement = conclusionStatement {
            try encodeContainer.encode(conclusionStatement, forKey: .conclusionStatement)
        }
        if let confirmationPrompt = confirmationPrompt {
            try encodeContainer.encode(confirmationPrompt, forKey: .confirmationPrompt)
        }
        if let createVersion = createVersion {
            try encodeContainer.encode(createVersion, forKey: .createVersion)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let dialogCodeHook = dialogCodeHook {
            try encodeContainer.encode(dialogCodeHook, forKey: .dialogCodeHook)
        }
        if let followUpPrompt = followUpPrompt {
            try encodeContainer.encode(followUpPrompt, forKey: .followUpPrompt)
        }
        if let fulfillmentActivity = fulfillmentActivity {
            try encodeContainer.encode(fulfillmentActivity, forKey: .fulfillmentActivity)
        }
        if let inputContexts = inputContexts {
            var inputContextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputContexts)
            for inputcontextlist0 in inputContexts {
                try inputContextsContainer.encode(inputcontextlist0)
            }
        }
        if let kendraConfiguration = kendraConfiguration {
            try encodeContainer.encode(kendraConfiguration, forKey: .kendraConfiguration)
        }
        if let outputContexts = outputContexts {
            var outputContextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputContexts)
            for outputcontextlist0 in outputContexts {
                try outputContextsContainer.encode(outputcontextlist0)
            }
        }
        if let parentIntentSignature = parentIntentSignature {
            try encodeContainer.encode(parentIntentSignature, forKey: .parentIntentSignature)
        }
        if let rejectionStatement = rejectionStatement {
            try encodeContainer.encode(rejectionStatement, forKey: .rejectionStatement)
        }
        if let sampleUtterances = sampleUtterances {
            var sampleUtterancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sampleUtterances)
            for intentutterancelist0 in sampleUtterances {
                try sampleUtterancesContainer.encode(intentutterancelist0)
            }
        }
        if let slots = slots {
            var slotsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .slots)
            for slotlist0 in slots {
                try slotsContainer.encode(slotlist0)
            }
        }
    }
}

public struct PutIntentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutIntentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutIntentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutIntentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutIntentOutputError>
}

public struct PutIntentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutIntentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutIntentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutIntentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutIntentOutputError>
}

public struct PutIntentInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutIntentInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: PutIntentInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/intents/\(name.urlPercentEncoding())/versions/$LATEST"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PutIntentInput
    public typealias MOutput = ClientRuntime.OperationOutput<PutIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutIntentOutputError>
}

public struct PutIntentInput: Swift.Equatable {
    /// Identifies a specific revision of the $LATEST
    ///       version.
    ///          When you create a new intent, leave the checksum field
    ///       blank. If you specify a checksum you get a
    ///         BadRequestException exception.
    ///          When you want to update a intent, set the checksum
    ///       field to the checksum of the most recent revision of the
    ///         $LATEST version. If you don't specify the
    ///         checksum field, or if the checksum does not match the
    ///         $LATEST version, you get a
    ///         PreconditionFailedException exception.
    public var checksum: Swift.String?
    ///  The statement that you want Amazon Lex to convey to the user after the
    ///       intent is successfully fulfilled by the Lambda function.
    ///          This element is relevant only if you provide a Lambda function in
    ///       the fulfillmentActivity. If you return the intent to the
    ///       client application, you can't specify this element.
    ///
    ///             The followUpPrompt and
    ///           conclusionStatement are mutually exclusive. You can
    ///         specify only one.
    ///
    public var conclusionStatement: LexModelBuildingClientTypes.Statement?
    /// Prompts the user to confirm the intent. This question should have a
    ///       yes or no answer.
    ///          Amazon Lex uses this prompt to ensure that the user acknowledges that
    ///       the intent is ready for fulfillment. For example, with the
    ///         OrderPizza intent, you might want to confirm that the order
    ///       is correct before placing it. For other intents, such as intents that
    ///       simply respond to user questions, you might not need to ask the user for
    ///       confirmation before providing the information.
    ///
    ///             You you must provide both the rejectionStatement and
    ///         the confirmationPrompt, or neither.
    ///
    public var confirmationPrompt: LexModelBuildingClientTypes.Prompt?
    /// When set to true a new numbered version of the intent
    ///       is created. This is the same as calling the
    ///         CreateIntentVersion operation. If you do not specify
    ///         createVersion, the default is false.
    public var createVersion: Swift.Bool?
    /// A description of the intent.
    public var description: Swift.String?
    ///  Specifies a Lambda function to invoke for each user input. You can
    ///       invoke this Lambda function to personalize user interaction.
    ///          For example, suppose your bot determines that the user is John.
    ///       Your Lambda function might retrieve John's information from a backend
    ///       database and prepopulate some of the values. For example, if you find that
    ///       John is gluten intolerant, you might set the corresponding intent slot,
    ///         GlutenIntolerant, to true. You might find John's phone
    ///       number and set the corresponding session attribute.
    public var dialogCodeHook: LexModelBuildingClientTypes.CodeHook?
    /// Amazon Lex uses this prompt to solicit additional activity after
    ///       fulfilling an intent. For example, after the OrderPizza
    ///       intent is fulfilled, you might prompt the user to order a drink.
    ///          The action that Amazon Lex takes depends on the user's response, as
    ///       follows:
    ///
    ///
    ///                If the user says "Yes" it responds with the clarification
    ///           prompt that is configured for the bot.
    ///
    ///
    ///                if the user says "Yes" and continues with an utterance that
    ///           triggers an intent it starts a conversation for the intent.
    ///
    ///
    ///                If the user says "No" it responds with the rejection statement
    ///           configured for the the follow-up prompt.
    ///
    ///
    ///                If it doesn't recognize the utterance it repeats the follow-up
    ///           prompt again.
    ///
    ///
    ///
    ///          The followUpPrompt field and the
    ///         conclusionStatement field are mutually exclusive. You can
    ///       specify only one.
    public var followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt?
    /// Required. Describes how the intent is fulfilled. For example, after
    ///       a user provides all of the information for a pizza order,
    ///         fulfillmentActivity defines how the bot places an order
    ///       with a local pizza store.
    ///           You might configure Amazon Lex to return all of the intent information
    ///       to the client application, or direct it to invoke a Lambda function that
    ///       can process the intent (for example, place an order with a pizzeria).
    ///
    public var fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity?
    /// An array of InputContext objects that lists the contexts
    ///       that must be active for Amazon Lex to choose the intent in a conversation with
    ///       the user.
    public var inputContexts: [LexModelBuildingClientTypes.InputContext]?
    /// Configuration information required to use the
    ///         AMAZON.KendraSearchIntent intent to connect to an Amazon
    ///       Kendra index. For more information, see <a href="http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html">
    ///         AMAZON.KendraSearchIntent.
    public var kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration?
    /// The name of the intent. The name is not case
    ///       sensitive.
    ///          The name can't match a built-in intent name, or a built-in intent
    ///       name with "AMAZON." removed. For example, because there is a built-in
    ///       intent called AMAZON.HelpIntent, you can't create a custom
    ///       intent called HelpIntent.
    ///          For a list of built-in intents, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard Built-in Intents in the Alexa Skills
    ///         Kit.
    /// This member is required.
    public var name: Swift.String?
    /// An array of OutputContext objects that lists the contexts
    ///       that the intent activates when the intent is fulfilled.
    public var outputContexts: [LexModelBuildingClientTypes.OutputContext]?
    /// A unique identifier for the built-in intent to base this intent on.
    ///       To find the signature for an intent, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents">Standard Built-in Intents in the Alexa Skills
    ///         Kit.
    public var parentIntentSignature: Swift.String?
    /// When the user answers "no" to the question defined in
    ///         confirmationPrompt, Amazon Lex responds with this statement to
    ///       acknowledge that the intent was canceled.
    ///
    ///             You must provide both the rejectionStatement and the
    ///           confirmationPrompt, or neither.
    ///
    public var rejectionStatement: LexModelBuildingClientTypes.Statement?
    /// An array of utterances (strings) that a user might say to signal
    ///       the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity}
    ///       {PizzaSize} pizzas".
    ///
    ///          In each utterance, a slot name is enclosed in curly braces.
    ///
    public var sampleUtterances: [Swift.String]?
    /// An array of intent slots. At runtime, Amazon Lex elicits required slot
    ///       values from the user using prompts defined in the slots. For more
    ///       information, see how-it-works.
    public var slots: [LexModelBuildingClientTypes.Slot]?

    public init (
        checksum: Swift.String? = nil,
        conclusionStatement: LexModelBuildingClientTypes.Statement? = nil,
        confirmationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createVersion: Swift.Bool? = nil,
        description: Swift.String? = nil,
        dialogCodeHook: LexModelBuildingClientTypes.CodeHook? = nil,
        followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt? = nil,
        fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity? = nil,
        inputContexts: [LexModelBuildingClientTypes.InputContext]? = nil,
        kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration? = nil,
        name: Swift.String? = nil,
        outputContexts: [LexModelBuildingClientTypes.OutputContext]? = nil,
        parentIntentSignature: Swift.String? = nil,
        rejectionStatement: LexModelBuildingClientTypes.Statement? = nil,
        sampleUtterances: [Swift.String]? = nil,
        slots: [LexModelBuildingClientTypes.Slot]? = nil
    )
    {
        self.checksum = checksum
        self.conclusionStatement = conclusionStatement
        self.confirmationPrompt = confirmationPrompt
        self.createVersion = createVersion
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.followUpPrompt = followUpPrompt
        self.fulfillmentActivity = fulfillmentActivity
        self.inputContexts = inputContexts
        self.kendraConfiguration = kendraConfiguration
        self.name = name
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.rejectionStatement = rejectionStatement
        self.sampleUtterances = sampleUtterances
        self.slots = slots
    }
}

struct PutIntentInputBody: Swift.Equatable {
    public let description: Swift.String?
    public let slots: [LexModelBuildingClientTypes.Slot]?
    public let sampleUtterances: [Swift.String]?
    public let confirmationPrompt: LexModelBuildingClientTypes.Prompt?
    public let rejectionStatement: LexModelBuildingClientTypes.Statement?
    public let followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt?
    public let conclusionStatement: LexModelBuildingClientTypes.Statement?
    public let dialogCodeHook: LexModelBuildingClientTypes.CodeHook?
    public let fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity?
    public let parentIntentSignature: Swift.String?
    public let checksum: Swift.String?
    public let createVersion: Swift.Bool?
    public let kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration?
    public let inputContexts: [LexModelBuildingClientTypes.InputContext]?
    public let outputContexts: [LexModelBuildingClientTypes.OutputContext]?
}

extension PutIntentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
        case conclusionStatement
        case confirmationPrompt
        case createVersion
        case description
        case dialogCodeHook
        case followUpPrompt
        case fulfillmentActivity
        case inputContexts
        case kendraConfiguration
        case outputContexts
        case parentIntentSignature
        case rejectionStatement
        case sampleUtterances
        case slots
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let slotsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Slot?].self, forKey: .slots)
        var slotsDecoded0:[LexModelBuildingClientTypes.Slot]? = nil
        if let slotsContainer = slotsContainer {
            slotsDecoded0 = [LexModelBuildingClientTypes.Slot]()
            for structure0 in slotsContainer {
                if let structure0 = structure0 {
                    slotsDecoded0?.append(structure0)
                }
            }
        }
        slots = slotsDecoded0
        let sampleUtterancesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sampleUtterances)
        var sampleUtterancesDecoded0:[Swift.String]? = nil
        if let sampleUtterancesContainer = sampleUtterancesContainer {
            sampleUtterancesDecoded0 = [Swift.String]()
            for string0 in sampleUtterancesContainer {
                if let string0 = string0 {
                    sampleUtterancesDecoded0?.append(string0)
                }
            }
        }
        sampleUtterances = sampleUtterancesDecoded0
        let confirmationPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Prompt.self, forKey: .confirmationPrompt)
        confirmationPrompt = confirmationPromptDecoded
        let rejectionStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .rejectionStatement)
        rejectionStatement = rejectionStatementDecoded
        let followUpPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.FollowUpPrompt.self, forKey: .followUpPrompt)
        followUpPrompt = followUpPromptDecoded
        let conclusionStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .conclusionStatement)
        conclusionStatement = conclusionStatementDecoded
        let dialogCodeHookDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.CodeHook.self, forKey: .dialogCodeHook)
        dialogCodeHook = dialogCodeHookDecoded
        let fulfillmentActivityDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.FulfillmentActivity.self, forKey: .fulfillmentActivity)
        fulfillmentActivity = fulfillmentActivityDecoded
        let parentIntentSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentIntentSignature)
        parentIntentSignature = parentIntentSignatureDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let createVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .createVersion)
        createVersion = createVersionDecoded
        let kendraConfigurationDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.KendraConfiguration.self, forKey: .kendraConfiguration)
        kendraConfiguration = kendraConfigurationDecoded
        let inputContextsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.InputContext?].self, forKey: .inputContexts)
        var inputContextsDecoded0:[LexModelBuildingClientTypes.InputContext]? = nil
        if let inputContextsContainer = inputContextsContainer {
            inputContextsDecoded0 = [LexModelBuildingClientTypes.InputContext]()
            for structure0 in inputContextsContainer {
                if let structure0 = structure0 {
                    inputContextsDecoded0?.append(structure0)
                }
            }
        }
        inputContexts = inputContextsDecoded0
        let outputContextsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.OutputContext?].self, forKey: .outputContexts)
        var outputContextsDecoded0:[LexModelBuildingClientTypes.OutputContext]? = nil
        if let outputContextsContainer = outputContextsContainer {
            outputContextsDecoded0 = [LexModelBuildingClientTypes.OutputContext]()
            for structure0 in outputContextsContainer {
                if let structure0 = structure0 {
                    outputContextsDecoded0?.append(structure0)
                }
            }
        }
        outputContexts = outputContextsDecoded0
    }
}

extension PutIntentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutIntentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PreconditionFailedException" : self = .preconditionFailedException(try PreconditionFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutIntentOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case preconditionFailedException(PreconditionFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutIntentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutIntentOutputResponse(checksum: \(Swift.String(describing: checksum)), conclusionStatement: \(Swift.String(describing: conclusionStatement)), confirmationPrompt: \(Swift.String(describing: confirmationPrompt)), createVersion: \(Swift.String(describing: createVersion)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), dialogCodeHook: \(Swift.String(describing: dialogCodeHook)), followUpPrompt: \(Swift.String(describing: followUpPrompt)), fulfillmentActivity: \(Swift.String(describing: fulfillmentActivity)), inputContexts: \(Swift.String(describing: inputContexts)), kendraConfiguration: \(Swift.String(describing: kendraConfiguration)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), name: \(Swift.String(describing: name)), outputContexts: \(Swift.String(describing: outputContexts)), parentIntentSignature: \(Swift.String(describing: parentIntentSignature)), rejectionStatement: \(Swift.String(describing: rejectionStatement)), sampleUtterances: \(Swift.String(describing: sampleUtterances)), slots: \(Swift.String(describing: slots)), version: \(Swift.String(describing: version)))"}
}

extension PutIntentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutIntentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.checksum = output.checksum
            self.conclusionStatement = output.conclusionStatement
            self.confirmationPrompt = output.confirmationPrompt
            self.createVersion = output.createVersion
            self.createdDate = output.createdDate
            self.description = output.description
            self.dialogCodeHook = output.dialogCodeHook
            self.followUpPrompt = output.followUpPrompt
            self.fulfillmentActivity = output.fulfillmentActivity
            self.inputContexts = output.inputContexts
            self.kendraConfiguration = output.kendraConfiguration
            self.lastUpdatedDate = output.lastUpdatedDate
            self.name = output.name
            self.outputContexts = output.outputContexts
            self.parentIntentSignature = output.parentIntentSignature
            self.rejectionStatement = output.rejectionStatement
            self.sampleUtterances = output.sampleUtterances
            self.slots = output.slots
            self.version = output.version
        } else {
            self.checksum = nil
            self.conclusionStatement = nil
            self.confirmationPrompt = nil
            self.createVersion = nil
            self.createdDate = nil
            self.description = nil
            self.dialogCodeHook = nil
            self.followUpPrompt = nil
            self.fulfillmentActivity = nil
            self.inputContexts = nil
            self.kendraConfiguration = nil
            self.lastUpdatedDate = nil
            self.name = nil
            self.outputContexts = nil
            self.parentIntentSignature = nil
            self.rejectionStatement = nil
            self.sampleUtterances = nil
            self.slots = nil
            self.version = nil
        }
    }
}

public struct PutIntentOutputResponse: Swift.Equatable {
    /// Checksum of the $LATESTversion of the intent created
    ///       or updated.
    public var checksum: Swift.String?
    /// After the Lambda function specified in
    ///         thefulfillmentActivityintent fulfills the intent, Amazon Lex
    ///       conveys this statement to the user.
    public var conclusionStatement: LexModelBuildingClientTypes.Statement?
    /// If defined in the intent, Amazon Lex prompts the user to confirm the
    ///       intent before fulfilling it.
    public var confirmationPrompt: LexModelBuildingClientTypes.Prompt?
    ///
    ///             True if a new version of the intent was created. If
    ///       the createVersion field was not specified in the request, the
    ///         createVersion field is set to false in the
    ///       response.
    public var createVersion: Swift.Bool?
    /// The date that the intent was created.
    public var createdDate: ClientRuntime.Date?
    /// A description of the intent.
    public var description: Swift.String?
    /// If defined in the intent, Amazon Lex invokes this Lambda function for
    ///       each user input.
    public var dialogCodeHook: LexModelBuildingClientTypes.CodeHook?
    /// If defined in the intent, Amazon Lex uses this prompt to solicit
    ///       additional user activity after the intent is fulfilled.
    public var followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt?
    /// If defined in the intent, Amazon Lex invokes this Lambda function to
    ///       fulfill the intent after the user provides all of the information required
    ///       by the intent.
    public var fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity?
    /// An array of InputContext objects that lists the contexts
    ///       that must be active for Amazon Lex to choose the intent in a conversation with
    ///       the user.
    public var inputContexts: [LexModelBuildingClientTypes.InputContext]?
    /// Configuration information, if any, required to connect to an Amazon
    ///       Kendra index and use the AMAZON.KendraSearchIntent
    ///       intent.
    public var kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration?
    /// The date that the intent was updated. When you create a resource,
    ///       the creation date and last update dates are the same.
    public var lastUpdatedDate: ClientRuntime.Date?
    /// The name of the intent.
    public var name: Swift.String?
    /// An array of OutputContext objects that lists the contexts
    ///       that the intent activates when the intent is fulfilled.
    public var outputContexts: [LexModelBuildingClientTypes.OutputContext]?
    /// A unique identifier for the built-in intent that this intent is
    ///       based on.
    public var parentIntentSignature: Swift.String?
    /// If the user answers "no" to the question defined in
    ///         confirmationPrompt Amazon Lex responds with this statement to
    ///       acknowledge that the intent was canceled.
    public var rejectionStatement: LexModelBuildingClientTypes.Statement?
    ///  An array of sample utterances that are configured for the intent.
    ///
    public var sampleUtterances: [Swift.String]?
    /// An array of intent slots that are configured for the
    ///       intent.
    public var slots: [LexModelBuildingClientTypes.Slot]?
    /// The version of the intent. For a new intent, the version is always
    ///         $LATEST.
    public var version: Swift.String?

    public init (
        checksum: Swift.String? = nil,
        conclusionStatement: LexModelBuildingClientTypes.Statement? = nil,
        confirmationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createVersion: Swift.Bool? = nil,
        createdDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        dialogCodeHook: LexModelBuildingClientTypes.CodeHook? = nil,
        followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt? = nil,
        fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity? = nil,
        inputContexts: [LexModelBuildingClientTypes.InputContext]? = nil,
        kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration? = nil,
        lastUpdatedDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        outputContexts: [LexModelBuildingClientTypes.OutputContext]? = nil,
        parentIntentSignature: Swift.String? = nil,
        rejectionStatement: LexModelBuildingClientTypes.Statement? = nil,
        sampleUtterances: [Swift.String]? = nil,
        slots: [LexModelBuildingClientTypes.Slot]? = nil,
        version: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.conclusionStatement = conclusionStatement
        self.confirmationPrompt = confirmationPrompt
        self.createVersion = createVersion
        self.createdDate = createdDate
        self.description = description
        self.dialogCodeHook = dialogCodeHook
        self.followUpPrompt = followUpPrompt
        self.fulfillmentActivity = fulfillmentActivity
        self.inputContexts = inputContexts
        self.kendraConfiguration = kendraConfiguration
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.outputContexts = outputContexts
        self.parentIntentSignature = parentIntentSignature
        self.rejectionStatement = rejectionStatement
        self.sampleUtterances = sampleUtterances
        self.slots = slots
        self.version = version
    }
}

struct PutIntentOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let slots: [LexModelBuildingClientTypes.Slot]?
    public let sampleUtterances: [Swift.String]?
    public let confirmationPrompt: LexModelBuildingClientTypes.Prompt?
    public let rejectionStatement: LexModelBuildingClientTypes.Statement?
    public let followUpPrompt: LexModelBuildingClientTypes.FollowUpPrompt?
    public let conclusionStatement: LexModelBuildingClientTypes.Statement?
    public let dialogCodeHook: LexModelBuildingClientTypes.CodeHook?
    public let fulfillmentActivity: LexModelBuildingClientTypes.FulfillmentActivity?
    public let parentIntentSignature: Swift.String?
    public let lastUpdatedDate: ClientRuntime.Date?
    public let createdDate: ClientRuntime.Date?
    public let version: Swift.String?
    public let checksum: Swift.String?
    public let createVersion: Swift.Bool?
    public let kendraConfiguration: LexModelBuildingClientTypes.KendraConfiguration?
    public let inputContexts: [LexModelBuildingClientTypes.InputContext]?
    public let outputContexts: [LexModelBuildingClientTypes.OutputContext]?
}

extension PutIntentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
        case conclusionStatement
        case confirmationPrompt
        case createVersion
        case createdDate
        case description
        case dialogCodeHook
        case followUpPrompt
        case fulfillmentActivity
        case inputContexts
        case kendraConfiguration
        case lastUpdatedDate
        case name
        case outputContexts
        case parentIntentSignature
        case rejectionStatement
        case sampleUtterances
        case slots
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let slotsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Slot?].self, forKey: .slots)
        var slotsDecoded0:[LexModelBuildingClientTypes.Slot]? = nil
        if let slotsContainer = slotsContainer {
            slotsDecoded0 = [LexModelBuildingClientTypes.Slot]()
            for structure0 in slotsContainer {
                if let structure0 = structure0 {
                    slotsDecoded0?.append(structure0)
                }
            }
        }
        slots = slotsDecoded0
        let sampleUtterancesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sampleUtterances)
        var sampleUtterancesDecoded0:[Swift.String]? = nil
        if let sampleUtterancesContainer = sampleUtterancesContainer {
            sampleUtterancesDecoded0 = [Swift.String]()
            for string0 in sampleUtterancesContainer {
                if let string0 = string0 {
                    sampleUtterancesDecoded0?.append(string0)
                }
            }
        }
        sampleUtterances = sampleUtterancesDecoded0
        let confirmationPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Prompt.self, forKey: .confirmationPrompt)
        confirmationPrompt = confirmationPromptDecoded
        let rejectionStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .rejectionStatement)
        rejectionStatement = rejectionStatementDecoded
        let followUpPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.FollowUpPrompt.self, forKey: .followUpPrompt)
        followUpPrompt = followUpPromptDecoded
        let conclusionStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .conclusionStatement)
        conclusionStatement = conclusionStatementDecoded
        let dialogCodeHookDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.CodeHook.self, forKey: .dialogCodeHook)
        dialogCodeHook = dialogCodeHookDecoded
        let fulfillmentActivityDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.FulfillmentActivity.self, forKey: .fulfillmentActivity)
        fulfillmentActivity = fulfillmentActivityDecoded
        let parentIntentSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentIntentSignature)
        parentIntentSignature = parentIntentSignatureDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let createVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .createVersion)
        createVersion = createVersionDecoded
        let kendraConfigurationDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.KendraConfiguration.self, forKey: .kendraConfiguration)
        kendraConfiguration = kendraConfigurationDecoded
        let inputContextsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.InputContext?].self, forKey: .inputContexts)
        var inputContextsDecoded0:[LexModelBuildingClientTypes.InputContext]? = nil
        if let inputContextsContainer = inputContextsContainer {
            inputContextsDecoded0 = [LexModelBuildingClientTypes.InputContext]()
            for structure0 in inputContextsContainer {
                if let structure0 = structure0 {
                    inputContextsDecoded0?.append(structure0)
                }
            }
        }
        inputContexts = inputContextsDecoded0
        let outputContextsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.OutputContext?].self, forKey: .outputContexts)
        var outputContextsDecoded0:[LexModelBuildingClientTypes.OutputContext]? = nil
        if let outputContextsContainer = outputContextsContainer {
            outputContextsDecoded0 = [LexModelBuildingClientTypes.OutputContext]()
            for structure0 in outputContextsContainer {
                if let structure0 = structure0 {
                    outputContextsDecoded0?.append(structure0)
                }
            }
        }
        outputContexts = outputContextsDecoded0
    }
}

public struct PutSlotTypeInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutSlotTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutSlotTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutSlotTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutSlotTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutSlotTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutSlotTypeOutputError>
}

extension PutSlotTypeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutSlotTypeInput(checksum: \(Swift.String(describing: checksum)), createVersion: \(Swift.String(describing: createVersion)), description: \(Swift.String(describing: description)), enumerationValues: \(Swift.String(describing: enumerationValues)), name: \(Swift.String(describing: name)), parentSlotTypeSignature: \(Swift.String(describing: parentSlotTypeSignature)), slotTypeConfigurations: \(Swift.String(describing: slotTypeConfigurations)), valueSelectionStrategy: \(Swift.String(describing: valueSelectionStrategy)))"}
}

extension PutSlotTypeInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
        case createVersion
        case description
        case enumerationValues
        case parentSlotTypeSignature
        case slotTypeConfigurations
        case valueSelectionStrategy
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checksum = checksum {
            try encodeContainer.encode(checksum, forKey: .checksum)
        }
        if let createVersion = createVersion {
            try encodeContainer.encode(createVersion, forKey: .createVersion)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let enumerationValues = enumerationValues {
            var enumerationValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .enumerationValues)
            for enumerationvalues0 in enumerationValues {
                try enumerationValuesContainer.encode(enumerationvalues0)
            }
        }
        if let parentSlotTypeSignature = parentSlotTypeSignature {
            try encodeContainer.encode(parentSlotTypeSignature, forKey: .parentSlotTypeSignature)
        }
        if let slotTypeConfigurations = slotTypeConfigurations {
            var slotTypeConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .slotTypeConfigurations)
            for slottypeconfigurations0 in slotTypeConfigurations {
                try slotTypeConfigurationsContainer.encode(slottypeconfigurations0)
            }
        }
        if let valueSelectionStrategy = valueSelectionStrategy {
            try encodeContainer.encode(valueSelectionStrategy.rawValue, forKey: .valueSelectionStrategy)
        }
    }
}

public struct PutSlotTypeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutSlotTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutSlotTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutSlotTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutSlotTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutSlotTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutSlotTypeOutputError>
}

public struct PutSlotTypeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutSlotTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutSlotTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutSlotTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutSlotTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutSlotTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutSlotTypeOutputError>
}

public struct PutSlotTypeInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutSlotTypeInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: PutSlotTypeInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutSlotTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let name = input.name else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("name is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/slottypes/\(name.urlPercentEncoding())/versions/$LATEST"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PutSlotTypeInput
    public typealias MOutput = ClientRuntime.OperationOutput<PutSlotTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutSlotTypeOutputError>
}

public struct PutSlotTypeInput: Swift.Equatable {
    /// Identifies a specific revision of the $LATEST
    ///       version.
    ///          When you create a new slot type, leave the checksum
    ///       field blank. If you specify a checksum you get a
    ///         BadRequestException exception.
    ///          When you want to update a slot type, set the checksum
    ///       field to the checksum of the most recent revision of the
    ///         $LATEST version. If you don't specify the
    ///         checksum field, or if the checksum does not match the
    ///         $LATEST version, you get a
    ///         PreconditionFailedException exception.
    public var checksum: Swift.String?
    /// When set to true a new numbered version of the slot
    ///       type is created. This is the same as calling the
    ///         CreateSlotTypeVersion operation. If you do not specify
    ///         createVersion, the default is false.
    public var createVersion: Swift.Bool?
    /// A description of the slot type.
    public var description: Swift.String?
    /// A list of EnumerationValue objects that defines the
    ///       values that the slot type can take. Each value can have a list of
    ///         synonyms, which are additional values that help train the
    ///       machine learning model about the values that it resolves for a slot.
    ///          A regular expression slot type doesn't require enumeration values.
    ///       All other slot types require a list of enumeration values.
    ///          When Amazon Lex resolves a slot value, it generates a resolution list
    ///       that contains up to five possible values for the slot. If you are using a
    ///       Lambda function, this resolution list is passed to the function. If you
    ///       are not using a Lambda function you can choose to return the value that
    ///       the user entered or the first value in the resolution list as the slot
    ///       value. The valueSelectionStrategy field indicates the option
    ///       to use.
    public var enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]?
    /// The name of the slot type. The name is not
    ///       case sensitive.
    ///          The name can't match a built-in slot type name, or a built-in slot
    ///       type name with "AMAZON." removed. For example, because there is a built-in
    ///       slot type called AMAZON.DATE, you can't create a custom slot
    ///       type called DATE.
    ///          For a list of built-in slot types, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference">Slot Type Reference in the Alexa Skills
    ///         Kit.
    /// This member is required.
    public var name: Swift.String?
    /// The built-in slot type used as the parent of the slot type. When you
    ///       define a parent slot type, the new slot type has all of the same
    ///       configuration as the parent.
    ///          Only AMAZON.AlphaNumeric is supported.
    public var parentSlotTypeSignature: Swift.String?
    /// Configuration information that extends the parent built-in slot type.
    ///       The configuration is added to the settings for the parent slot
    ///       type.
    public var slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]?
    /// Determines the slot resolution strategy that Amazon Lex uses to return
    ///       slot type values. The field can be set to one of the following
    ///       values:
    ///
    ///
    ///
    ///                   ORIGINAL_VALUE - Returns the value entered by the
    ///           user, if the user value is similar to the slot value.
    ///
    ///
    ///
    ///                   TOP_RESOLUTION - If there is a resolution list for
    ///           the slot, return the first value in the resolution list as the slot
    ///           type value. If there is no resolution list, null is
    ///           returned.
    ///
    ///
    ///          If you don't specify the valueSelectionStrategy, the
    ///       default is ORIGINAL_VALUE.
    public var valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy?

    public init (
        checksum: Swift.String? = nil,
        createVersion: Swift.Bool? = nil,
        description: Swift.String? = nil,
        enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]? = nil,
        name: Swift.String? = nil,
        parentSlotTypeSignature: Swift.String? = nil,
        slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]? = nil,
        valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy? = nil
    )
    {
        self.checksum = checksum
        self.createVersion = createVersion
        self.description = description
        self.enumerationValues = enumerationValues
        self.name = name
        self.parentSlotTypeSignature = parentSlotTypeSignature
        self.slotTypeConfigurations = slotTypeConfigurations
        self.valueSelectionStrategy = valueSelectionStrategy
    }
}

struct PutSlotTypeInputBody: Swift.Equatable {
    public let description: Swift.String?
    public let enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]?
    public let checksum: Swift.String?
    public let valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy?
    public let createVersion: Swift.Bool?
    public let parentSlotTypeSignature: Swift.String?
    public let slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]?
}

extension PutSlotTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
        case createVersion
        case description
        case enumerationValues
        case parentSlotTypeSignature
        case slotTypeConfigurations
        case valueSelectionStrategy
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let enumerationValuesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.EnumerationValue?].self, forKey: .enumerationValues)
        var enumerationValuesDecoded0:[LexModelBuildingClientTypes.EnumerationValue]? = nil
        if let enumerationValuesContainer = enumerationValuesContainer {
            enumerationValuesDecoded0 = [LexModelBuildingClientTypes.EnumerationValue]()
            for structure0 in enumerationValuesContainer {
                if let structure0 = structure0 {
                    enumerationValuesDecoded0?.append(structure0)
                }
            }
        }
        enumerationValues = enumerationValuesDecoded0
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let valueSelectionStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.SlotValueSelectionStrategy.self, forKey: .valueSelectionStrategy)
        valueSelectionStrategy = valueSelectionStrategyDecoded
        let createVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .createVersion)
        createVersion = createVersionDecoded
        let parentSlotTypeSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentSlotTypeSignature)
        parentSlotTypeSignature = parentSlotTypeSignatureDecoded
        let slotTypeConfigurationsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.SlotTypeConfiguration?].self, forKey: .slotTypeConfigurations)
        var slotTypeConfigurationsDecoded0:[LexModelBuildingClientTypes.SlotTypeConfiguration]? = nil
        if let slotTypeConfigurationsContainer = slotTypeConfigurationsContainer {
            slotTypeConfigurationsDecoded0 = [LexModelBuildingClientTypes.SlotTypeConfiguration]()
            for structure0 in slotTypeConfigurationsContainer {
                if let structure0 = structure0 {
                    slotTypeConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        slotTypeConfigurations = slotTypeConfigurationsDecoded0
    }
}

extension PutSlotTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutSlotTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PreconditionFailedException" : self = .preconditionFailedException(try PreconditionFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutSlotTypeOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case preconditionFailedException(PreconditionFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutSlotTypeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutSlotTypeOutputResponse(checksum: \(Swift.String(describing: checksum)), createVersion: \(Swift.String(describing: createVersion)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), enumerationValues: \(Swift.String(describing: enumerationValues)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), name: \(Swift.String(describing: name)), parentSlotTypeSignature: \(Swift.String(describing: parentSlotTypeSignature)), slotTypeConfigurations: \(Swift.String(describing: slotTypeConfigurations)), valueSelectionStrategy: \(Swift.String(describing: valueSelectionStrategy)), version: \(Swift.String(describing: version)))"}
}

extension PutSlotTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutSlotTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.checksum = output.checksum
            self.createVersion = output.createVersion
            self.createdDate = output.createdDate
            self.description = output.description
            self.enumerationValues = output.enumerationValues
            self.lastUpdatedDate = output.lastUpdatedDate
            self.name = output.name
            self.parentSlotTypeSignature = output.parentSlotTypeSignature
            self.slotTypeConfigurations = output.slotTypeConfigurations
            self.valueSelectionStrategy = output.valueSelectionStrategy
            self.version = output.version
        } else {
            self.checksum = nil
            self.createVersion = nil
            self.createdDate = nil
            self.description = nil
            self.enumerationValues = nil
            self.lastUpdatedDate = nil
            self.name = nil
            self.parentSlotTypeSignature = nil
            self.slotTypeConfigurations = nil
            self.valueSelectionStrategy = nil
            self.version = nil
        }
    }
}

public struct PutSlotTypeOutputResponse: Swift.Equatable {
    /// Checksum of the $LATEST version of the slot
    ///       type.
    public var checksum: Swift.String?
    ///
    ///             True if a new version of the slot type was created. If
    ///       the createVersion field was not specified in the request, the
    ///         createVersion field is set to false in the
    ///       response.
    public var createVersion: Swift.Bool?
    /// The date that the slot type was created.
    public var createdDate: ClientRuntime.Date?
    /// A description of the slot type.
    public var description: Swift.String?
    /// A list of EnumerationValue objects that defines the
    ///       values that the slot type can take.
    public var enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]?
    /// The date that the slot type was updated. When you create a slot
    ///       type, the creation date and last update date are the same.
    public var lastUpdatedDate: ClientRuntime.Date?
    /// The name of the slot type.
    public var name: Swift.String?
    /// The built-in slot type used as the parent of the slot type.
    public var parentSlotTypeSignature: Swift.String?
    /// Configuration information that extends the parent built-in slot
    ///       type.
    public var slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]?
    /// The slot resolution strategy that Amazon Lex uses to determine the value
    ///       of the slot. For more information, see PutSlotType.
    public var valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy?
    /// The version of the slot type. For a new slot type, the version is
    ///       always $LATEST.
    public var version: Swift.String?

    public init (
        checksum: Swift.String? = nil,
        createVersion: Swift.Bool? = nil,
        createdDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]? = nil,
        lastUpdatedDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        parentSlotTypeSignature: Swift.String? = nil,
        slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]? = nil,
        valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy? = nil,
        version: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.createVersion = createVersion
        self.createdDate = createdDate
        self.description = description
        self.enumerationValues = enumerationValues
        self.lastUpdatedDate = lastUpdatedDate
        self.name = name
        self.parentSlotTypeSignature = parentSlotTypeSignature
        self.slotTypeConfigurations = slotTypeConfigurations
        self.valueSelectionStrategy = valueSelectionStrategy
        self.version = version
    }
}

struct PutSlotTypeOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]?
    public let lastUpdatedDate: ClientRuntime.Date?
    public let createdDate: ClientRuntime.Date?
    public let version: Swift.String?
    public let checksum: Swift.String?
    public let valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy?
    public let createVersion: Swift.Bool?
    public let parentSlotTypeSignature: Swift.String?
    public let slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]?
}

extension PutSlotTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
        case createVersion
        case createdDate
        case description
        case enumerationValues
        case lastUpdatedDate
        case name
        case parentSlotTypeSignature
        case slotTypeConfigurations
        case valueSelectionStrategy
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let enumerationValuesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.EnumerationValue?].self, forKey: .enumerationValues)
        var enumerationValuesDecoded0:[LexModelBuildingClientTypes.EnumerationValue]? = nil
        if let enumerationValuesContainer = enumerationValuesContainer {
            enumerationValuesDecoded0 = [LexModelBuildingClientTypes.EnumerationValue]()
            for structure0 in enumerationValuesContainer {
                if let structure0 = structure0 {
                    enumerationValuesDecoded0?.append(structure0)
                }
            }
        }
        enumerationValues = enumerationValuesDecoded0
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let valueSelectionStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.SlotValueSelectionStrategy.self, forKey: .valueSelectionStrategy)
        valueSelectionStrategy = valueSelectionStrategyDecoded
        let createVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .createVersion)
        createVersion = createVersionDecoded
        let parentSlotTypeSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentSlotTypeSignature)
        parentSlotTypeSignature = parentSlotTypeSignatureDecoded
        let slotTypeConfigurationsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.SlotTypeConfiguration?].self, forKey: .slotTypeConfigurations)
        var slotTypeConfigurationsDecoded0:[LexModelBuildingClientTypes.SlotTypeConfiguration]? = nil
        if let slotTypeConfigurationsContainer = slotTypeConfigurationsContainer {
            slotTypeConfigurationsDecoded0 = [LexModelBuildingClientTypes.SlotTypeConfiguration]()
            for structure0 in slotTypeConfigurationsContainer {
                if let structure0 = structure0 {
                    slotTypeConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        slotTypeConfigurations = slotTypeConfigurationsDecoded0
    }
}

extension LexModelBuildingClientTypes {
    public enum ReferenceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bot
        case botalias
        case botchannel
        case intent
        case sdkUnknown(Swift.String)

        public static var allCases: [ReferenceType] {
            return [
                .bot,
                .botalias,
                .botchannel,
                .intent,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bot: return "Bot"
            case .botalias: return "BotAlias"
            case .botchannel: return "BotChannel"
            case .intent: return "Intent"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReferenceType(rawValue: rawValue) ?? ReferenceType.sdkUnknown(rawValue)
        }
    }
}

extension ResourceInUseException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceInUseException(exampleReference: \(Swift.String(describing: exampleReference)), referenceType: \(Swift.String(describing: referenceType)))"}
}

extension ResourceInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.exampleReference = output.exampleReference
            self.referenceType = output.referenceType
        } else {
            self.exampleReference = nil
            self.referenceType = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource that you are attempting to delete is referred to by
///       another resource. Use this information to remove references to the
///       resource that you are trying to delete.
///          The body of the exception contains a JSON object that describes the
///       resource.
///
///             { "resourceType": BOT | BOTALIAS | BOTCHANNEL |
///         INTENT,
///
///
///             "resourceReference": {
///
///
///             "name": string, "version":
///           string } }
///
public struct ResourceInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Describes the resource that refers to the resource that you are
    ///       attempting to delete. This object is returned as part of the
    ///         ResourceInUseException exception.
    public var exampleReference: LexModelBuildingClientTypes.ResourceReference?
    public var referenceType: LexModelBuildingClientTypes.ReferenceType?

    public init (
        exampleReference: LexModelBuildingClientTypes.ResourceReference? = nil,
        referenceType: LexModelBuildingClientTypes.ReferenceType? = nil
    )
    {
        self.exampleReference = exampleReference
        self.referenceType = referenceType
    }
}

struct ResourceInUseExceptionBody: Swift.Equatable {
    public let referenceType: LexModelBuildingClientTypes.ReferenceType?
    public let exampleReference: LexModelBuildingClientTypes.ResourceReference?
}

extension ResourceInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exampleReference
        case referenceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let referenceTypeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ReferenceType.self, forKey: .referenceType)
        referenceType = referenceTypeDecoded
        let exampleReferenceDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ResourceReference.self, forKey: .exampleReference)
        exampleReference = exampleReferenceDecoded
    }
}

extension LexModelBuildingClientTypes.ResourceReference: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension LexModelBuildingClientTypes.ResourceReference: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceReference(name: \(Swift.String(describing: name)), version: \(Swift.String(describing: version)))"}
}

extension LexModelBuildingClientTypes {
    /// Describes the resource that refers to the resource that you are
    ///       attempting to delete. This object is returned as part of the
    ///         ResourceInUseException exception.
    public struct ResourceReference: Swift.Equatable {
        /// The name of the resource that is using the resource that you are
        ///       trying to delete.
        public var name: Swift.String?
        /// The version of the resource that is using the resource that you are
        ///       trying to delete.
        public var version: Swift.String?

        public init (
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.name = name
            self.version = version
        }
    }

}

extension LexModelBuildingClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bot
        case intent
        case slotType
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .bot,
                .intent,
                .slotType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bot: return "BOT"
            case .intent: return "INTENT"
            case .slotType: return "SLOT_TYPE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes.Slot: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValueSpec
        case description
        case name
        case obfuscationSetting
        case priority
        case responseCard
        case sampleUtterances
        case slotConstraint
        case slotType
        case slotTypeVersion
        case valueElicitationPrompt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultValueSpec = defaultValueSpec {
            try encodeContainer.encode(defaultValueSpec, forKey: .defaultValueSpec)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let obfuscationSetting = obfuscationSetting {
            try encodeContainer.encode(obfuscationSetting.rawValue, forKey: .obfuscationSetting)
        }
        if let priority = priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let responseCard = responseCard {
            try encodeContainer.encode(responseCard, forKey: .responseCard)
        }
        if let sampleUtterances = sampleUtterances {
            var sampleUtterancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sampleUtterances)
            for slotutterancelist0 in sampleUtterances {
                try sampleUtterancesContainer.encode(slotutterancelist0)
            }
        }
        if let slotConstraint = slotConstraint {
            try encodeContainer.encode(slotConstraint.rawValue, forKey: .slotConstraint)
        }
        if let slotType = slotType {
            try encodeContainer.encode(slotType, forKey: .slotType)
        }
        if let slotTypeVersion = slotTypeVersion {
            try encodeContainer.encode(slotTypeVersion, forKey: .slotTypeVersion)
        }
        if let valueElicitationPrompt = valueElicitationPrompt {
            try encodeContainer.encode(valueElicitationPrompt, forKey: .valueElicitationPrompt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let slotConstraintDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.SlotConstraint.self, forKey: .slotConstraint)
        slotConstraint = slotConstraintDecoded
        let slotTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slotType)
        slotType = slotTypeDecoded
        let slotTypeVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slotTypeVersion)
        slotTypeVersion = slotTypeVersionDecoded
        let valueElicitationPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Prompt.self, forKey: .valueElicitationPrompt)
        valueElicitationPrompt = valueElicitationPromptDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let sampleUtterancesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sampleUtterances)
        var sampleUtterancesDecoded0:[Swift.String]? = nil
        if let sampleUtterancesContainer = sampleUtterancesContainer {
            sampleUtterancesDecoded0 = [Swift.String]()
            for string0 in sampleUtterancesContainer {
                if let string0 = string0 {
                    sampleUtterancesDecoded0?.append(string0)
                }
            }
        }
        sampleUtterances = sampleUtterancesDecoded0
        let responseCardDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .responseCard)
        responseCard = responseCardDecoded
        let obfuscationSettingDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ObfuscationSetting.self, forKey: .obfuscationSetting)
        obfuscationSetting = obfuscationSettingDecoded
        let defaultValueSpecDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.SlotDefaultValueSpec.self, forKey: .defaultValueSpec)
        defaultValueSpec = defaultValueSpecDecoded
    }
}

extension LexModelBuildingClientTypes.Slot: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Slot(defaultValueSpec: \(Swift.String(describing: defaultValueSpec)), description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), obfuscationSetting: \(Swift.String(describing: obfuscationSetting)), priority: \(Swift.String(describing: priority)), responseCard: \(Swift.String(describing: responseCard)), sampleUtterances: \(Swift.String(describing: sampleUtterances)), slotConstraint: \(Swift.String(describing: slotConstraint)), slotType: \(Swift.String(describing: slotType)), slotTypeVersion: \(Swift.String(describing: slotTypeVersion)), valueElicitationPrompt: \(Swift.String(describing: valueElicitationPrompt)))"}
}

extension LexModelBuildingClientTypes {
    /// Identifies the version of a specific slot.
    public struct Slot: Swift.Equatable {
        /// A list of default values for the slot. Default values are used when
        ///       Amazon Lex hasn't determined a value for a slot. You can specify default values
        ///       from context variables, session attributes, and defined values.
        public var defaultValueSpec: LexModelBuildingClientTypes.SlotDefaultValueSpec?
        /// A description of the slot.
        public var description: Swift.String?
        /// The name of the slot.
        /// This member is required.
        public var name: Swift.String?
        /// Determines whether a slot is obfuscated in conversation logs and
        ///       stored utterances. When you obfuscate a slot, the value is replaced by the
        ///       slot name in curly braces ({}). For example, if the slot name is
        ///       "full_name", obfuscated values are replaced with "{full_name}". For more
        ///       information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/how-obfuscate.html"> Slot Obfuscation .
        ///
        public var obfuscationSetting: LexModelBuildingClientTypes.ObfuscationSetting?
        ///  Directs Amazon Lex the order in which to elicit this slot value from
        ///       the user. For example, if the intent has two slots with priorities 1 and
        ///       2, AWS Amazon Lex first elicits a value for the slot with priority 1.
        ///          If multiple slots share the same priority, the order in which Amazon Lex
        ///       elicits values is arbitrary.
        public var priority: Swift.Int?
        ///  A set of possible responses for the slot type used by text-based
        ///       clients. A user chooses an option from the response card, instead of using
        ///       text to reply.
        public var responseCard: Swift.String?
        ///  If you know a specific pattern with which users might respond to
        ///       an Amazon Lex request for a slot value, you can provide those utterances to
        ///       improve accuracy. This is optional. In most cases, Amazon Lex is capable of
        ///       understanding user utterances.
        public var sampleUtterances: [Swift.String]?
        /// Specifies whether the slot is required or optional.
        /// This member is required.
        public var slotConstraint: LexModelBuildingClientTypes.SlotConstraint?
        /// The type of the slot, either a custom slot type that you defined or
        ///       one of the built-in slot types.
        public var slotType: Swift.String?
        /// The version of the slot type.
        public var slotTypeVersion: Swift.String?
        /// The prompt that Amazon Lex uses to elicit the slot value from the
        ///       user.
        public var valueElicitationPrompt: LexModelBuildingClientTypes.Prompt?

        public init (
            defaultValueSpec: LexModelBuildingClientTypes.SlotDefaultValueSpec? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            obfuscationSetting: LexModelBuildingClientTypes.ObfuscationSetting? = nil,
            priority: Swift.Int? = nil,
            responseCard: Swift.String? = nil,
            sampleUtterances: [Swift.String]? = nil,
            slotConstraint: LexModelBuildingClientTypes.SlotConstraint? = nil,
            slotType: Swift.String? = nil,
            slotTypeVersion: Swift.String? = nil,
            valueElicitationPrompt: LexModelBuildingClientTypes.Prompt? = nil
        )
        {
            self.defaultValueSpec = defaultValueSpec
            self.description = description
            self.name = name
            self.obfuscationSetting = obfuscationSetting
            self.priority = priority
            self.responseCard = responseCard
            self.sampleUtterances = sampleUtterances
            self.slotConstraint = slotConstraint
            self.slotType = slotType
            self.slotTypeVersion = slotTypeVersion
            self.valueElicitationPrompt = valueElicitationPrompt
        }
    }

}

extension LexModelBuildingClientTypes {
    public enum SlotConstraint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `optional`
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotConstraint] {
            return [
                .optional,
                .required,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .optional: return "Optional"
            case .required: return "Required"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SlotConstraint(rawValue: rawValue) ?? SlotConstraint.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes.SlotDefaultValue: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultValue = defaultValue {
            try encodeContainer.encode(defaultValue, forKey: .defaultValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
    }
}

extension LexModelBuildingClientTypes.SlotDefaultValue: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SlotDefaultValue(defaultValue: \(Swift.String(describing: defaultValue)))"}
}

extension LexModelBuildingClientTypes {
    /// A default value for a slot.
    public struct SlotDefaultValue: Swift.Equatable {
        /// The default value for the slot. You can specify one of the
        ///       following:
        ///
        ///
        ///
        ///                   #context-name.slot-name - The slot value "slot-name"
        ///           in the context "context-name."
        ///
        ///
        ///
        ///                   {attribute} - The slot value of the session attribute
        ///           "attribute."
        ///
        ///
        ///
        ///                   'value' - The discrete value "value."
        ///
        ///
        /// This member is required.
        public var defaultValue: Swift.String?

        public init (
            defaultValue: Swift.String? = nil
        )
        {
            self.defaultValue = defaultValue
        }
    }

}

extension LexModelBuildingClientTypes.SlotDefaultValueSpec: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValueList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultValueList = defaultValueList {
            var defaultValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .defaultValueList)
            for slotdefaultvaluelist0 in defaultValueList {
                try defaultValueListContainer.encode(slotdefaultvaluelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultValueListContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.SlotDefaultValue?].self, forKey: .defaultValueList)
        var defaultValueListDecoded0:[LexModelBuildingClientTypes.SlotDefaultValue]? = nil
        if let defaultValueListContainer = defaultValueListContainer {
            defaultValueListDecoded0 = [LexModelBuildingClientTypes.SlotDefaultValue]()
            for structure0 in defaultValueListContainer {
                if let structure0 = structure0 {
                    defaultValueListDecoded0?.append(structure0)
                }
            }
        }
        defaultValueList = defaultValueListDecoded0
    }
}

extension LexModelBuildingClientTypes.SlotDefaultValueSpec: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SlotDefaultValueSpec(defaultValueList: \(Swift.String(describing: defaultValueList)))"}
}

extension LexModelBuildingClientTypes {
    /// Contains the default values for a slot. Default values are used when
    ///       Amazon Lex hasn't determined a value for a slot.
    public struct SlotDefaultValueSpec: Swift.Equatable {
        /// The default values for a slot. You can specify more than one default.
        ///       For example, you can specify a default value to use from a matching
        ///       context variable, a session attribute, or a fixed value.
        ///          The default value chosen is selected based on the order that you
        ///       specify them in the list. For example, if you specify a context variable
        ///       and a fixed value in that order, Amazon Lex uses the context variable if it is
        ///       available, else it uses the fixed value.
        /// This member is required.
        public var defaultValueList: [LexModelBuildingClientTypes.SlotDefaultValue]?

        public init (
            defaultValueList: [LexModelBuildingClientTypes.SlotDefaultValue]? = nil
        )
        {
            self.defaultValueList = defaultValueList
        }
    }

}

extension LexModelBuildingClientTypes.SlotTypeConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regexConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regexConfiguration = regexConfiguration {
            try encodeContainer.encode(regexConfiguration, forKey: .regexConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexConfigurationDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.SlotTypeRegexConfiguration.self, forKey: .regexConfiguration)
        regexConfiguration = regexConfigurationDecoded
    }
}

extension LexModelBuildingClientTypes.SlotTypeConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SlotTypeConfiguration(regexConfiguration: \(Swift.String(describing: regexConfiguration)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides configuration information for a slot type.
    public struct SlotTypeConfiguration: Swift.Equatable {
        /// A regular expression used to validate the value of a slot.
        public var regexConfiguration: LexModelBuildingClientTypes.SlotTypeRegexConfiguration?

        public init (
            regexConfiguration: LexModelBuildingClientTypes.SlotTypeRegexConfiguration? = nil
        )
        {
            self.regexConfiguration = regexConfiguration
        }
    }

}

extension LexModelBuildingClientTypes.SlotTypeMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDate
        case description
        case lastUpdatedDate
        case name
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdDate = createdDate {
            try encodeContainer.encode(createdDate.timeIntervalSince1970, forKey: .createdDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastUpdatedDate = lastUpdatedDate {
            try encodeContainer.encode(lastUpdatedDate.timeIntervalSince1970, forKey: .lastUpdatedDate)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension LexModelBuildingClientTypes.SlotTypeMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SlotTypeMetadata(createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), name: \(Swift.String(describing: name)), version: \(Swift.String(describing: version)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides information about a slot type..
    public struct SlotTypeMetadata: Swift.Equatable {
        /// The date that the slot type was created.
        public var createdDate: ClientRuntime.Date?
        /// A description of the slot type.
        public var description: Swift.String?
        /// The date that the slot type was updated. When you create a
        ///       resource, the creation date and last updated date are the same.
        public var lastUpdatedDate: ClientRuntime.Date?
        /// The name of the slot type.
        public var name: Swift.String?
        /// The version of the slot type.
        public var version: Swift.String?

        public init (
            createdDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedDate: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.createdDate = createdDate
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.name = name
            self.version = version
        }
    }

}

extension LexModelBuildingClientTypes.SlotTypeRegexConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pattern
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pattern = pattern {
            try encodeContainer.encode(pattern, forKey: .pattern)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let patternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pattern)
        pattern = patternDecoded
    }
}

extension LexModelBuildingClientTypes.SlotTypeRegexConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SlotTypeRegexConfiguration(pattern: \(Swift.String(describing: pattern)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides a regular expression used to validate the value of a
    ///       slot.
    public struct SlotTypeRegexConfiguration: Swift.Equatable {
        /// A regular expression used to validate the value of a slot.
        ///          Use a standard regular expression. Amazon Lex supports the following
        ///       characters in the regular expression:
        ///
        ///
        ///                A-Z, a-z
        ///
        ///
        ///                0-9
        ///
        ///
        ///                Unicode characters ("\ u<Unicode>")
        ///
        ///
        ///          Represent Unicode characters with four digits, for example
        ///       "\u0041" or "\u005A".
        ///          The following regular expression operators are not supported:
        ///
        ///
        ///                Infinite repeaters: *, +, or {x,} with no upper bound.
        ///
        ///
        ///                Wild card (.)
        ///
        ///
        /// This member is required.
        public var pattern: Swift.String?

        public init (
            pattern: Swift.String? = nil
        )
        {
            self.pattern = pattern
        }
    }

}

extension LexModelBuildingClientTypes {
    public enum SlotValueSelectionStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case originalValue
        case topResolution
        case sdkUnknown(Swift.String)

        public static var allCases: [SlotValueSelectionStrategy] {
            return [
                .originalValue,
                .topResolution,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .originalValue: return "ORIGINAL_VALUE"
            case .topResolution: return "TOP_RESOLUTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SlotValueSelectionStrategy(rawValue: rawValue) ?? SlotValueSelectionStrategy.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes {
    public enum SortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortOrder(rawValue: rawValue) ?? SortOrder.sdkUnknown(rawValue)
        }
    }
}

public struct StartImportInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartImportInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartImportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartImportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartImportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartImportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartImportOutputError>
}

extension StartImportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartImportInput(mergeStrategy: \(Swift.String(describing: mergeStrategy)), payload: \(Swift.String(describing: payload)), resourceType: \(Swift.String(describing: resourceType)), tags: \(Swift.String(describing: tags)))"}
}

extension StartImportInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mergeStrategy
        case payload
        case resourceType
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mergeStrategy = mergeStrategy {
            try encodeContainer.encode(mergeStrategy.rawValue, forKey: .mergeStrategy)
        }
        if let payload = payload {
            try encodeContainer.encode(payload.base64EncodedString(), forKey: .payload)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct StartImportInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartImportInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartImportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartImportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartImportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartImportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartImportOutputError>
}

public struct StartImportInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartImportInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartImportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartImportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartImportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartImportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartImportOutputError>
}

public struct StartImportInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartImportInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: StartImportInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartImportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/imports"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartImportInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartImportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartImportOutputError>
}

public struct StartImportInput: Swift.Equatable {
    /// Specifies the action that the StartImport operation
    ///       should take when there is an existing resource with the same
    ///       name.
    ///
    ///
    ///                FAIL_ON_CONFLICT - The import operation is stopped on the first
    ///           conflict between a resource in the import file and an existing
    ///           resource. The name of the resource causing the conflict is in the
    ///             failureReason field of the response to the
    ///             GetImport operation.
    ///                OVERWRITE_LATEST - The import operation proceeds even if there
    ///           is a conflict with an existing resource. The $LASTEST version of the
    ///           existing resource is overwritten with the data from the import
    ///           file.
    ///
    ///
    /// This member is required.
    public var mergeStrategy: LexModelBuildingClientTypes.MergeStrategy?
    /// A zip archive in binary format. The archive should contain one file, a
    ///       JSON file containing the resource to import. The resource should match the
    ///       type specified in the resourceType field.
    /// This member is required.
    public var payload: ClientRuntime.Data?
    /// Specifies the type of resource to export. Each resource also
    ///       exports any resources that it depends on.
    ///
    ///
    ///                A bot exports dependent intents.
    ///
    ///
    ///                An intent exports dependent slot types.
    ///
    ///
    /// This member is required.
    public var resourceType: LexModelBuildingClientTypes.ResourceType?
    /// A list of tags to add to the imported bot. You can only add tags when
    ///       you import a bot, you can't add tags to an intent or slot type.
    public var tags: [LexModelBuildingClientTypes.Tag]?

    public init (
        mergeStrategy: LexModelBuildingClientTypes.MergeStrategy? = nil,
        payload: ClientRuntime.Data? = nil,
        resourceType: LexModelBuildingClientTypes.ResourceType? = nil,
        tags: [LexModelBuildingClientTypes.Tag]? = nil
    )
    {
        self.mergeStrategy = mergeStrategy
        self.payload = payload
        self.resourceType = resourceType
        self.tags = tags
    }
}

struct StartImportInputBody: Swift.Equatable {
    public let payload: ClientRuntime.Data?
    public let resourceType: LexModelBuildingClientTypes.ResourceType?
    public let mergeStrategy: LexModelBuildingClientTypes.MergeStrategy?
    public let tags: [LexModelBuildingClientTypes.Tag]?
}

extension StartImportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mergeStrategy
        case payload
        case resourceType
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let payloadDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .payload)
        payload = payloadDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let mergeStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.MergeStrategy.self, forKey: .mergeStrategy)
        mergeStrategy = mergeStrategyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LexModelBuildingClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LexModelBuildingClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StartImportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartImportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartImportOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartImportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartImportOutputResponse(createdDate: \(Swift.String(describing: createdDate)), importId: \(Swift.String(describing: importId)), importStatus: \(Swift.String(describing: importStatus)), mergeStrategy: \(Swift.String(describing: mergeStrategy)), name: \(Swift.String(describing: name)), resourceType: \(Swift.String(describing: resourceType)), tags: \(Swift.String(describing: tags)))"}
}

extension StartImportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartImportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdDate = output.createdDate
            self.importId = output.importId
            self.importStatus = output.importStatus
            self.mergeStrategy = output.mergeStrategy
            self.name = output.name
            self.resourceType = output.resourceType
            self.tags = output.tags
        } else {
            self.createdDate = nil
            self.importId = nil
            self.importStatus = nil
            self.mergeStrategy = nil
            self.name = nil
            self.resourceType = nil
            self.tags = nil
        }
    }
}

public struct StartImportOutputResponse: Swift.Equatable {
    /// A timestamp for the date and time that the import job was
    ///       requested.
    public var createdDate: ClientRuntime.Date?
    /// The identifier for the specific import job.
    public var importId: Swift.String?
    /// The status of the import job. If the status is FAILED,
    ///       you can get the reason for the failure using the GetImport
    ///       operation.
    public var importStatus: LexModelBuildingClientTypes.ImportStatus?
    /// The action to take when there is a merge conflict.
    public var mergeStrategy: LexModelBuildingClientTypes.MergeStrategy?
    /// The name given to the import job.
    public var name: Swift.String?
    /// The type of resource to import.
    public var resourceType: LexModelBuildingClientTypes.ResourceType?
    /// A list of tags added to the imported bot.
    public var tags: [LexModelBuildingClientTypes.Tag]?

    public init (
        createdDate: ClientRuntime.Date? = nil,
        importId: Swift.String? = nil,
        importStatus: LexModelBuildingClientTypes.ImportStatus? = nil,
        mergeStrategy: LexModelBuildingClientTypes.MergeStrategy? = nil,
        name: Swift.String? = nil,
        resourceType: LexModelBuildingClientTypes.ResourceType? = nil,
        tags: [LexModelBuildingClientTypes.Tag]? = nil
    )
    {
        self.createdDate = createdDate
        self.importId = importId
        self.importStatus = importStatus
        self.mergeStrategy = mergeStrategy
        self.name = name
        self.resourceType = resourceType
        self.tags = tags
    }
}

struct StartImportOutputResponseBody: Swift.Equatable {
    public let name: Swift.String?
    public let resourceType: LexModelBuildingClientTypes.ResourceType?
    public let mergeStrategy: LexModelBuildingClientTypes.MergeStrategy?
    public let importId: Swift.String?
    public let importStatus: LexModelBuildingClientTypes.ImportStatus?
    public let tags: [LexModelBuildingClientTypes.Tag]?
    public let createdDate: ClientRuntime.Date?
}

extension StartImportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDate
        case importId
        case importStatus
        case mergeStrategy
        case name
        case resourceType
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let mergeStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.MergeStrategy.self, forKey: .mergeStrategy)
        mergeStrategy = mergeStrategyDecoded
        let importIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importId)
        importId = importIdDecoded
        let importStatusDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ImportStatus.self, forKey: .importStatus)
        importStatus = importStatusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LexModelBuildingClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LexModelBuildingClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
    }
}

public struct StartMigrationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartMigrationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartMigrationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartMigrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartMigrationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartMigrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartMigrationOutputError>
}

extension StartMigrationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartMigrationInput(migrationStrategy: \(Swift.String(describing: migrationStrategy)), v1BotName: \(Swift.String(describing: v1BotName)), v1BotVersion: \(Swift.String(describing: v1BotVersion)), v2BotName: \(Swift.String(describing: v2BotName)), v2BotRole: \(Swift.String(describing: v2BotRole)))"}
}

extension StartMigrationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case migrationStrategy
        case v1BotName
        case v1BotVersion
        case v2BotName
        case v2BotRole
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let migrationStrategy = migrationStrategy {
            try encodeContainer.encode(migrationStrategy.rawValue, forKey: .migrationStrategy)
        }
        if let v1BotName = v1BotName {
            try encodeContainer.encode(v1BotName, forKey: .v1BotName)
        }
        if let v1BotVersion = v1BotVersion {
            try encodeContainer.encode(v1BotVersion, forKey: .v1BotVersion)
        }
        if let v2BotName = v2BotName {
            try encodeContainer.encode(v2BotName, forKey: .v2BotName)
        }
        if let v2BotRole = v2BotRole {
            try encodeContainer.encode(v2BotRole, forKey: .v2BotRole)
        }
    }
}

public struct StartMigrationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartMigrationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartMigrationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartMigrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartMigrationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartMigrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartMigrationOutputError>
}

public struct StartMigrationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartMigrationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartMigrationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartMigrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartMigrationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartMigrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartMigrationOutputError>
}

public struct StartMigrationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartMigrationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: StartMigrationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartMigrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/migrations"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartMigrationInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartMigrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartMigrationOutputError>
}

public struct StartMigrationInput: Swift.Equatable {
    /// The strategy used to conduct the migration.
    ///
    ///
    ///
    ///                   CREATE_NEW - Creates a new Amazon Lex V2 bot and migrates
    ///           the Amazon Lex V1 bot to the new bot.
    ///
    ///
    ///
    ///                   UPDATE_EXISTING - Overwrites the existing Amazon Lex V2 bot
    ///           metadata and the locale being migrated. It doesn't change any other
    ///           locales in the Amazon Lex V2 bot. If the locale doesn't exist, a new locale
    ///           is created in the Amazon Lex V2 bot.
    ///
    ///
    /// This member is required.
    public var migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy?
    /// The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.
    /// This member is required.
    public var v1BotName: Swift.String?
    /// The version of the bot to migrate to Amazon Lex V2. You can migrate the
    ///         $LATEST version as well as any numbered version.
    /// This member is required.
    public var v1BotVersion: Swift.String?
    /// The name of the Amazon Lex V2 bot that you are migrating the Amazon Lex V1 bot to.
    ///
    ///
    ///                If the Amazon Lex V2 bot doesn't exist, you must use the
    ///             CREATE_NEW migration strategy.
    ///
    ///
    ///                If the Amazon Lex V2 bot exists, you must use the
    ///             UPDATE_EXISTING migration strategy to change the
    ///           contents of the Amazon Lex V2 bot.
    ///
    ///
    /// This member is required.
    public var v2BotName: Swift.String?
    /// The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.
    /// This member is required.
    public var v2BotRole: Swift.String?

    public init (
        migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy? = nil,
        v1BotName: Swift.String? = nil,
        v1BotVersion: Swift.String? = nil,
        v2BotName: Swift.String? = nil,
        v2BotRole: Swift.String? = nil
    )
    {
        self.migrationStrategy = migrationStrategy
        self.v1BotName = v1BotName
        self.v1BotVersion = v1BotVersion
        self.v2BotName = v2BotName
        self.v2BotRole = v2BotRole
    }
}

struct StartMigrationInputBody: Swift.Equatable {
    public let v1BotName: Swift.String?
    public let v1BotVersion: Swift.String?
    public let v2BotName: Swift.String?
    public let v2BotRole: Swift.String?
    public let migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy?
}

extension StartMigrationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case migrationStrategy
        case v1BotName
        case v1BotVersion
        case v2BotName
        case v2BotRole
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let v1BotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v1BotName)
        v1BotName = v1BotNameDecoded
        let v1BotVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v1BotVersion)
        v1BotVersion = v1BotVersionDecoded
        let v2BotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v2BotName)
        v2BotName = v2BotNameDecoded
        let v2BotRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v2BotRole)
        v2BotRole = v2BotRoleDecoded
        let migrationStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.MigrationStrategy.self, forKey: .migrationStrategy)
        migrationStrategy = migrationStrategyDecoded
    }
}

extension StartMigrationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartMigrationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartMigrationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMigrationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartMigrationOutputResponse(migrationId: \(Swift.String(describing: migrationId)), migrationStrategy: \(Swift.String(describing: migrationStrategy)), migrationTimestamp: \(Swift.String(describing: migrationTimestamp)), v1BotLocale: \(Swift.String(describing: v1BotLocale)), v1BotName: \(Swift.String(describing: v1BotName)), v1BotVersion: \(Swift.String(describing: v1BotVersion)), v2BotId: \(Swift.String(describing: v2BotId)), v2BotRole: \(Swift.String(describing: v2BotRole)))"}
}

extension StartMigrationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartMigrationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.migrationId = output.migrationId
            self.migrationStrategy = output.migrationStrategy
            self.migrationTimestamp = output.migrationTimestamp
            self.v1BotLocale = output.v1BotLocale
            self.v1BotName = output.v1BotName
            self.v1BotVersion = output.v1BotVersion
            self.v2BotId = output.v2BotId
            self.v2BotRole = output.v2BotRole
        } else {
            self.migrationId = nil
            self.migrationStrategy = nil
            self.migrationTimestamp = nil
            self.v1BotLocale = nil
            self.v1BotName = nil
            self.v1BotVersion = nil
            self.v2BotId = nil
            self.v2BotRole = nil
        }
    }
}

public struct StartMigrationOutputResponse: Swift.Equatable {
    /// The unique identifier that Amazon Lex assigned to the migration.
    public var migrationId: Swift.String?
    /// The strategy used to conduct the migration.
    public var migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy?
    /// The date and time that the migration started.
    public var migrationTimestamp: ClientRuntime.Date?
    /// The locale used for the Amazon Lex V1 bot.
    public var v1BotLocale: LexModelBuildingClientTypes.Locale?
    /// The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.
    public var v1BotName: Swift.String?
    /// The version of the bot to migrate to Amazon Lex V2.
    public var v1BotVersion: Swift.String?
    /// The unique identifier for the Amazon Lex V2 bot.
    public var v2BotId: Swift.String?
    /// The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.
    public var v2BotRole: Swift.String?

    public init (
        migrationId: Swift.String? = nil,
        migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy? = nil,
        migrationTimestamp: ClientRuntime.Date? = nil,
        v1BotLocale: LexModelBuildingClientTypes.Locale? = nil,
        v1BotName: Swift.String? = nil,
        v1BotVersion: Swift.String? = nil,
        v2BotId: Swift.String? = nil,
        v2BotRole: Swift.String? = nil
    )
    {
        self.migrationId = migrationId
        self.migrationStrategy = migrationStrategy
        self.migrationTimestamp = migrationTimestamp
        self.v1BotLocale = v1BotLocale
        self.v1BotName = v1BotName
        self.v1BotVersion = v1BotVersion
        self.v2BotId = v2BotId
        self.v2BotRole = v2BotRole
    }
}

struct StartMigrationOutputResponseBody: Swift.Equatable {
    public let v1BotName: Swift.String?
    public let v1BotVersion: Swift.String?
    public let v1BotLocale: LexModelBuildingClientTypes.Locale?
    public let v2BotId: Swift.String?
    public let v2BotRole: Swift.String?
    public let migrationId: Swift.String?
    public let migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy?
    public let migrationTimestamp: ClientRuntime.Date?
}

extension StartMigrationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case migrationId
        case migrationStrategy
        case migrationTimestamp
        case v1BotLocale
        case v1BotName
        case v1BotVersion
        case v2BotId
        case v2BotRole
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let v1BotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v1BotName)
        v1BotName = v1BotNameDecoded
        let v1BotVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v1BotVersion)
        v1BotVersion = v1BotVersionDecoded
        let v1BotLocaleDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Locale.self, forKey: .v1BotLocale)
        v1BotLocale = v1BotLocaleDecoded
        let v2BotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v2BotId)
        v2BotId = v2BotIdDecoded
        let v2BotRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v2BotRole)
        v2BotRole = v2BotRoleDecoded
        let migrationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .migrationId)
        migrationId = migrationIdDecoded
        let migrationStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.MigrationStrategy.self, forKey: .migrationStrategy)
        migrationStrategy = migrationStrategyDecoded
        let migrationTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .migrationTimestamp)
        migrationTimestamp = migrationTimestampDecoded
    }
}

extension LexModelBuildingClientTypes.Statement: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messages
        case responseCard
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let messages = messages {
            var messagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .messages)
            for messagelist0 in messages {
                try messagesContainer.encode(messagelist0)
            }
        }
        if let responseCard = responseCard {
            try encodeContainer.encode(responseCard, forKey: .responseCard)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messagesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Message?].self, forKey: .messages)
        var messagesDecoded0:[LexModelBuildingClientTypes.Message]? = nil
        if let messagesContainer = messagesContainer {
            messagesDecoded0 = [LexModelBuildingClientTypes.Message]()
            for structure0 in messagesContainer {
                if let structure0 = structure0 {
                    messagesDecoded0?.append(structure0)
                }
            }
        }
        messages = messagesDecoded0
        let responseCardDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .responseCard)
        responseCard = responseCardDecoded
    }
}

extension LexModelBuildingClientTypes.Statement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Statement(messages: \(Swift.String(describing: messages)), responseCard: \(Swift.String(describing: responseCard)))"}
}

extension LexModelBuildingClientTypes {
    /// A collection of messages that convey information to the user. At
    ///       runtime, Amazon Lex selects the message to convey.
    public struct Statement: Swift.Equatable {
        /// A collection of message objects.
        /// This member is required.
        public var messages: [LexModelBuildingClientTypes.Message]?
        ///  At runtime, if the client is using the <a href="http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText API, Amazon Lex includes the response card in the response.
        ///       It substitutes all of the session attributes and slot values for
        ///       placeholders in the response card.
        public var responseCard: Swift.String?

        public init (
            messages: [LexModelBuildingClientTypes.Message]? = nil,
            responseCard: Swift.String? = nil
        )
        {
            self.messages = messages
            self.responseCard = responseCard
        }
    }

}

extension LexModelBuildingClientTypes {
    public enum Status: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case building
        case failed
        case notBuilt
        case ready
        case readyBasicTesting
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .building,
                .failed,
                .notBuilt,
                .ready,
                .readyBasicTesting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .building: return "BUILDING"
            case .failed: return "FAILED"
            case .notBuilt: return "NOT_BUILT"
            case .ready: return "READY"
            case .readyBasicTesting: return "READY_BASIC_TESTING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Status(rawValue: rawValue) ?? Status.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes {
    public enum StatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case detected
        case missed
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusType] {
            return [
                .detected,
                .missed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .detected: return "Detected"
            case .missed: return "Missed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StatusType(rawValue: rawValue) ?? StatusType.sdkUnknown(rawValue)
        }
    }
}

extension LexModelBuildingClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension LexModelBuildingClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension LexModelBuildingClientTypes {
    /// A list of key/value pairs that identify a bot, bot alias, or bot
    ///       channel. Tag keys and values can consist of Unicode letters, digits, white
    ///       space, and any of the following symbols: _ . : / = + - @.
    public struct Tag: Swift.Equatable {
        /// The key for the tag. Keys are not case-sensitive and must be
        ///       unique.
        /// This member is required.
        public var key: Swift.String?
        /// The value associated with a key. The value may be an empty string but
        ///       it can't be null.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: TagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let resourceArn = input.resourceArn else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("resourceArn is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/tags/\(resourceArn.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = TagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the bot, bot alias, or bot channel
    ///       to tag.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of tag keys to add to the resource. If a tag key already
    ///       exists, the existing value is replaced with the new value.
    /// This member is required.
    public var tags: [LexModelBuildingClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [LexModelBuildingClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let tags: [LexModelBuildingClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LexModelBuildingClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LexModelBuildingClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let tagKeys = input.operationInput.tagKeys {
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UntagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let resourceArn = input.resourceArn else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("resourceArn is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/tags/\(resourceArn.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UntagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource to remove the tags
    ///       from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of tag keys to remove from the resource. If a tag key does not
    ///       exist on the resource, it is ignored.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension LexModelBuildingClientTypes.UtteranceData: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count
        case distinctUsers
        case firstUtteredDate
        case lastUtteredDate
        case utteranceString
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let count = count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let distinctUsers = distinctUsers {
            try encodeContainer.encode(distinctUsers, forKey: .distinctUsers)
        }
        if let firstUtteredDate = firstUtteredDate {
            try encodeContainer.encode(firstUtteredDate.timeIntervalSince1970, forKey: .firstUtteredDate)
        }
        if let lastUtteredDate = lastUtteredDate {
            try encodeContainer.encode(lastUtteredDate.timeIntervalSince1970, forKey: .lastUtteredDate)
        }
        if let utteranceString = utteranceString {
            try encodeContainer.encode(utteranceString, forKey: .utteranceString)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let utteranceStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .utteranceString)
        utteranceString = utteranceStringDecoded
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
        let distinctUsersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .distinctUsers)
        distinctUsers = distinctUsersDecoded
        let firstUtteredDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .firstUtteredDate)
        firstUtteredDate = firstUtteredDateDecoded
        let lastUtteredDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUtteredDate)
        lastUtteredDate = lastUtteredDateDecoded
    }
}

extension LexModelBuildingClientTypes.UtteranceData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UtteranceData(count: \(Swift.String(describing: count)), distinctUsers: \(Swift.String(describing: distinctUsers)), firstUtteredDate: \(Swift.String(describing: firstUtteredDate)), lastUtteredDate: \(Swift.String(describing: lastUtteredDate)), utteranceString: \(Swift.String(describing: utteranceString)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides information about a single utterance that was made to your
    ///       bot.
    public struct UtteranceData: Swift.Equatable {
        /// The number of times that the utterance was processed.
        public var count: Swift.Int?
        /// The total number of individuals that used the utterance.
        public var distinctUsers: Swift.Int?
        /// The date that the utterance was first recorded.
        public var firstUtteredDate: ClientRuntime.Date?
        /// The date that the utterance was last recorded.
        public var lastUtteredDate: ClientRuntime.Date?
        /// The text that was entered by the user or the text representation of
        ///       an audio clip.
        public var utteranceString: Swift.String?

        public init (
            count: Swift.Int? = nil,
            distinctUsers: Swift.Int? = nil,
            firstUtteredDate: ClientRuntime.Date? = nil,
            lastUtteredDate: ClientRuntime.Date? = nil,
            utteranceString: Swift.String? = nil
        )
        {
            self.count = count
            self.distinctUsers = distinctUsers
            self.firstUtteredDate = firstUtteredDate
            self.lastUtteredDate = lastUtteredDate
            self.utteranceString = utteranceString
        }
    }

}

extension LexModelBuildingClientTypes.UtteranceList: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botVersion
        case utterances
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let botVersion = botVersion {
            try encodeContainer.encode(botVersion, forKey: .botVersion)
        }
        if let utterances = utterances {
            var utterancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .utterances)
            for listofutterance0 in utterances {
                try utterancesContainer.encode(listofutterance0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let utterancesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.UtteranceData?].self, forKey: .utterances)
        var utterancesDecoded0:[LexModelBuildingClientTypes.UtteranceData]? = nil
        if let utterancesContainer = utterancesContainer {
            utterancesDecoded0 = [LexModelBuildingClientTypes.UtteranceData]()
            for structure0 in utterancesContainer {
                if let structure0 = structure0 {
                    utterancesDecoded0?.append(structure0)
                }
            }
        }
        utterances = utterancesDecoded0
    }
}

extension LexModelBuildingClientTypes.UtteranceList: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UtteranceList(botVersion: \(Swift.String(describing: botVersion)), utterances: \(Swift.String(describing: utterances)))"}
}

extension LexModelBuildingClientTypes {
    /// Provides a list of utterances that have been made to a specific
    ///       version of your bot. The list contains a maximum of 100
    ///       utterances.
    public struct UtteranceList: Swift.Equatable {
        /// The version of the bot that processed the list.
        public var botVersion: Swift.String?
        /// One or more UtteranceData objects that contain
        ///       information about the utterances that have been made to a bot. The maximum
        ///       number of object is 100.
        public var utterances: [LexModelBuildingClientTypes.UtteranceData]?

        public init (
            botVersion: Swift.String? = nil,
            utterances: [LexModelBuildingClientTypes.UtteranceData]? = nil
        )
        {
            self.botVersion = botVersion
            self.utterances = utterances
        }
    }

}
