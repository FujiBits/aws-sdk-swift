// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation
import Logging

public class SupportClient {
    let client: ClientRuntime.SdkHttpClient
    let config: AWSClientRuntime.AWSClientConfiguration
    let serviceName = "Support"
    let encoder: ClientRuntime.RequestEncoder
    let decoder: ClientRuntime.ResponseDecoder

    public init(config: AWSClientRuntime.AWSClientConfiguration) {
        client = ClientRuntime.SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public convenience init(region: Swift.String? = nil) throws {
        let unwrappedRegion = region ?? "us-east-1"
        let config = try SupportClientConfiguration(region: unwrappedRegion)
        self.init(config: config)
    }

    deinit {
        client.close()
    }

    public class SupportClientConfiguration: AWSClientRuntime.AWSClientConfiguration {

        public var clientLogMode: ClientRuntime.ClientLogMode
        public var decoder: ClientRuntime.ResponseDecoder?
        public var encoder: ClientRuntime.RequestEncoder?
        public var httpClientConfiguration: ClientRuntime.HttpClientConfiguration
        public var httpClientEngine: ClientRuntime.HttpClientEngine
        public var idempotencyTokenGenerator: ClientRuntime.IdempotencyTokenGenerator
        public var logger: ClientRuntime.LogAgent
        public var retrier: ClientRuntime.Retrier

        public var credentialsProvider: AWSClientRuntime.AWSCredentialsProvider
        public var endpointResolver: AWSClientRuntime.EndpointResolver
        public var region: Swift.String
        public var signingRegion: Swift.String

        public init(
            credentialsProvider: AWSClientRuntime.AWSCredentialsProvider? = nil,
            endpointResolver: AWSClientRuntime.EndpointResolver? = nil,
            region: Swift.String,
            signingRegion: Swift.String? = nil,
            runtimeConfig: ClientRuntime.SDKRuntimeConfiguration
        ) throws {
            self.region = region
            self.signingRegion = signingRegion ?? region
            self.endpointResolver = endpointResolver ?? DefaultEndpointResolver()
            if let credProvider = credentialsProvider {
                self.credentialsProvider = credProvider
            } else {
                self.credentialsProvider = try AWSClientRuntime.AWSCredentialsProvider.fromChain()
            }
            self.clientLogMode = runtimeConfig.clientLogMode
            self.decoder = runtimeConfig.decoder
            self.encoder = runtimeConfig.encoder
            self.httpClientConfiguration = runtimeConfig.httpClientConfiguration
            self.httpClientEngine = runtimeConfig.httpClientEngine
            self.idempotencyTokenGenerator = runtimeConfig.idempotencyTokenGenerator
            self.logger = runtimeConfig.logger
            self.retrier = runtimeConfig.retrier
        }

        public convenience init(
            credentialsProvider: AWSClientRuntime.AWSCredentialsProvider? = nil,
            endpointResolver: AWSClientRuntime.EndpointResolver? = nil,
            region: Swift.String,
            signingRegion: Swift.String? = nil
        ) throws {
            let defaultRuntimeConfig = try ClientRuntime.DefaultSDKRuntimeConfiguration("SupportClient")
            try self.init(credentialsProvider: credentialsProvider, endpointResolver: endpointResolver, region: region, signingRegion: signingRegion, runtimeConfig: defaultRuntimeConfig)
        }
    }
}

public struct SupportClientLogHandlerFactory: ClientRuntime.SDKLogHandlerFactory {
    public var label = "SupportClient"
    let logLevel: ClientRuntime.SDKLogLevel
    public func construct(label: String) -> LogHandler {
        var handler = StreamLogHandler.standardOutput(label: label)
        handler.logLevel = logLevel.toLoggerType()
        return handler
    }
    public init(logLevel: ClientRuntime.SDKLogLevel) {
        self.logLevel = logLevel
    }
}

extension SupportClient: SupportClientProtocol {
    /// <p>Adds one or more attachments to an attachment set. </p>
    ///         <p>An attachment set is a temporary container for attachments that you add to a case or
    ///             case communication. The set is available for 1 hour after it's created. The
    ///                 <code>expiryTime</code> returned in the response is when the set expires. </p>
    ///         <note>
    ///             <ul>
    ///                <li>
    ///                     <p>You must have a Business or Enterprise Support plan to use the AWS Support
    ///                         API. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you call the AWS Support API from an account that does not have a
    ///                         Business or Enterprise Support plan, the
    ///                             <code>SubscriptionRequiredException</code> error message appears. For
    ///                         information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a>.</p>
    ///                 </li>
    ///             </ul>
    ///         </note>
    public func addAttachmentsToSet(input: AddAttachmentsToSetInput, completion: @escaping (ClientRuntime.SdkResult<AddAttachmentsToSetOutputResponse, AddAttachmentsToSetOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "addAttachmentsToSet")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "support.\(config.region).amazonaws.com")
                      .withSigningName(value: "support")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AddAttachmentsToSetInput, AddAttachmentsToSetOutputResponse, AddAttachmentsToSetOutputError>(id: "addAttachmentsToSet")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AddAttachmentsToSetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AddAttachmentsToSetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AddAttachmentsToSetInput, AddAttachmentsToSetOutputResponse, AddAttachmentsToSetOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: AddAttachmentsToSetInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<AddAttachmentsToSetInput, AddAttachmentsToSetOutputResponse, AddAttachmentsToSetOutputError>(xAmzTarget: "AWSSupport_20130415.AddAttachmentsToSet"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds additional customer communication to an AWS Support case. Use the <code>caseId</code>
    ///             parameter to identify the case to which to add communication. You can list a set of
    ///             email addresses to copy on the communication by using the <code>ccEmailAddresses</code>
    ///             parameter. The <code>communicationBody</code> value contains the text of the
    ///             communication.</p>
    ///
    ///         <note>
    ///             <ul>
    ///                <li>
    ///                     <p>You must have a Business or Enterprise Support plan to use the AWS Support
    ///                         API. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you call the AWS Support API from an account that does not have a
    ///                         Business or Enterprise Support plan, the
    ///                             <code>SubscriptionRequiredException</code> error message appears. For
    ///                         information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a>.</p>
    ///                 </li>
    ///             </ul>
    ///         </note>
    public func addCommunicationToCase(input: AddCommunicationToCaseInput, completion: @escaping (ClientRuntime.SdkResult<AddCommunicationToCaseOutputResponse, AddCommunicationToCaseOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "addCommunicationToCase")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "support.\(config.region).amazonaws.com")
                      .withSigningName(value: "support")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AddCommunicationToCaseInput, AddCommunicationToCaseOutputResponse, AddCommunicationToCaseOutputError>(id: "addCommunicationToCase")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AddCommunicationToCaseInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AddCommunicationToCaseInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AddCommunicationToCaseInput, AddCommunicationToCaseOutputResponse, AddCommunicationToCaseOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: AddCommunicationToCaseInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<AddCommunicationToCaseInput, AddCommunicationToCaseOutputResponse, AddCommunicationToCaseOutputError>(xAmzTarget: "AWSSupport_20130415.AddCommunicationToCase"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a case in the AWS Support Center. This operation is similar to how you create a case
    ///             in the AWS Support Center <a href="https://console.aws.amazon.com/support/home#/case/create">Create
    ///                 Case</a> page.</p>
    ///         <p>The AWS Support API doesn't support requesting service limit increases. You can submit a
    ///             service limit increase in the following ways: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>Submit a request from the AWS Support Center <a href="https://console.aws.amazon.com/support/home#/case/create">Create Case</a> page.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Use the Service Quotas <a href="https://docs.aws.amazon.com/servicequotas/2019-06-24/apireference/API_RequestServiceQuotaIncrease.html">RequestServiceQuotaIncrease</a> operation.</p>
    ///             </li>
    ///          </ul>
    ///         <p>A successful <code>CreateCase</code> request returns an AWS Support case number. You can use
    ///             the <a>DescribeCases</a> operation and specify the case number to get
    ///             existing AWS Support cases. After you create a case, use the <a>AddCommunicationToCase</a> operation to add additional communication or
    ///             attachments to an existing case.</p>
    ///         <p>The <code>caseId</code> is separate from the <code>displayId</code> that appears in
    ///             the <a href="https://console.aws.amazon.com/support">AWS Support Center</a>. Use the <a>DescribeCases</a> operation to get the <code>displayId</code>.</p>
    ///         <note>
    ///             <ul>
    ///                <li>
    ///                     <p>You must have a Business or Enterprise Support plan to use the AWS Support
    ///                         API. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you call the AWS Support API from an account that does not have a
    ///                         Business or Enterprise Support plan, the
    ///                             <code>SubscriptionRequiredException</code> error message appears. For
    ///                         information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a>.</p>
    ///                 </li>
    ///             </ul>
    ///         </note>
    public func createCase(input: CreateCaseInput, completion: @escaping (ClientRuntime.SdkResult<CreateCaseOutputResponse, CreateCaseOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createCase")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "support.\(config.region).amazonaws.com")
                      .withSigningName(value: "support")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateCaseInput, CreateCaseOutputResponse, CreateCaseOutputError>(id: "createCase")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateCaseInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateCaseInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateCaseInput, CreateCaseOutputResponse, CreateCaseOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateCaseInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<CreateCaseInput, CreateCaseOutputResponse, CreateCaseOutputError>(xAmzTarget: "AWSSupport_20130415.CreateCase"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the attachment that has the specified ID. Attachments can include screenshots,
    ///             error logs, or other files that describe your issue. Attachment IDs are generated by the
    ///             case management system when you add an attachment to a case or case communication.
    ///             Attachment IDs are returned in the <a>AttachmentDetails</a> objects that are
    ///             returned by the <a>DescribeCommunications</a> operation.</p>
    ///         <note>
    ///             <ul>
    ///                <li>
    ///                     <p>You must have a Business or Enterprise Support plan to use the AWS Support
    ///                         API. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you call the AWS Support API from an account that does not have a
    ///                         Business or Enterprise Support plan, the
    ///                             <code>SubscriptionRequiredException</code> error message appears. For
    ///                         information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a>.</p>
    ///                 </li>
    ///             </ul>
    ///         </note>
    public func describeAttachment(input: DescribeAttachmentInput, completion: @escaping (ClientRuntime.SdkResult<DescribeAttachmentOutputResponse, DescribeAttachmentOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeAttachment")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "support.\(config.region).amazonaws.com")
                      .withSigningName(value: "support")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeAttachmentInput, DescribeAttachmentOutputResponse, DescribeAttachmentOutputError>(id: "describeAttachment")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeAttachmentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeAttachmentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeAttachmentInput, DescribeAttachmentOutputResponse, DescribeAttachmentOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeAttachmentInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<DescribeAttachmentInput, DescribeAttachmentOutputResponse, DescribeAttachmentOutputError>(xAmzTarget: "AWSSupport_20130415.DescribeAttachment"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of cases that you specify by passing one or more case IDs. You can use
    ///             the <code>afterTime</code> and <code>beforeTime</code> parameters to filter the cases by
    ///             date. You can set values for the <code>includeResolvedCases</code> and
    ///                 <code>includeCommunications</code> parameters to specify how much information to
    ///             return.</p>
    ///         <p>The response returns the following in JSON format:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>One or more <a href="https://docs.aws.amazon.com/awssupport/latest/APIReference/API_CaseDetails.html">CaseDetails</a> data types.</p>
    ///             </li>
    ///             <li>
    ///                 <p>One or more <code>nextToken</code> values, which specify where to paginate the
    ///                     returned records represented by the <code>CaseDetails</code> objects.</p>
    ///             </li>
    ///          </ul>
    ///         <p>Case data is available for 12 months after creation. If a case was created more than
    ///             12 months ago, a request might return an error.</p>
    ///         <note>
    ///             <ul>
    ///                <li>
    ///                     <p>You must have a Business or Enterprise Support plan to use the AWS Support
    ///                         API. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you call the AWS Support API from an account that does not have a
    ///                         Business or Enterprise Support plan, the
    ///                             <code>SubscriptionRequiredException</code> error message appears. For
    ///                         information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a>.</p>
    ///                 </li>
    ///             </ul>
    ///         </note>
    public func describeCases(input: DescribeCasesInput, completion: @escaping (ClientRuntime.SdkResult<DescribeCasesOutputResponse, DescribeCasesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeCases")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "support.\(config.region).amazonaws.com")
                      .withSigningName(value: "support")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeCasesInput, DescribeCasesOutputResponse, DescribeCasesOutputError>(id: "describeCases")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeCasesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeCasesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeCasesInput, DescribeCasesOutputResponse, DescribeCasesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeCasesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<DescribeCasesInput, DescribeCasesOutputResponse, DescribeCasesOutputError>(xAmzTarget: "AWSSupport_20130415.DescribeCases"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns communications and attachments for one or more support cases. Use the
    ///                 <code>afterTime</code> and <code>beforeTime</code> parameters to filter by date. You
    ///             can use the <code>caseId</code> parameter to restrict the results to a specific
    ///             case.</p>
    ///         <p>Case data is available for 12 months after creation. If a case was created more than
    ///             12 months ago, a request for data might cause an error.</p>
    ///         <p>You can use the <code>maxResults</code> and <code>nextToken</code> parameters to
    ///             control the pagination of the results. Set <code>maxResults</code> to the number of
    ///             cases that you want to display on each page, and use <code>nextToken</code> to specify
    ///             the resumption of pagination.</p>
    ///         <note>
    ///             <ul>
    ///                <li>
    ///                     <p>You must have a Business or Enterprise Support plan to use the AWS Support
    ///                         API. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you call the AWS Support API from an account that does not have a
    ///                         Business or Enterprise Support plan, the
    ///                             <code>SubscriptionRequiredException</code> error message appears. For
    ///                         information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a>.</p>
    ///                 </li>
    ///             </ul>
    ///         </note>
    public func describeCommunications(input: DescribeCommunicationsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeCommunicationsOutputResponse, DescribeCommunicationsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeCommunications")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "support.\(config.region).amazonaws.com")
                      .withSigningName(value: "support")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeCommunicationsInput, DescribeCommunicationsOutputResponse, DescribeCommunicationsOutputError>(id: "describeCommunications")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeCommunicationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeCommunicationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeCommunicationsInput, DescribeCommunicationsOutputResponse, DescribeCommunicationsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeCommunicationsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<DescribeCommunicationsInput, DescribeCommunicationsOutputResponse, DescribeCommunicationsOutputError>(xAmzTarget: "AWSSupport_20130415.DescribeCommunications"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the current list of AWS services and a list of service categories for each
    ///             service. You then use service names and categories in your <a>CreateCase</a>
    ///             requests. Each AWS service has its own set of categories.</p>
    ///         <p>The service codes and category codes correspond to the values that appear in the
    ///                 <b>Service</b> and <b>Category</b> lists on the AWS Support Center <a href="https://console.aws.amazon.com/support/home#/case/create">Create Case</a> page. The values in those fields
    ///             don't necessarily match the service codes and categories returned by the
    ///                 <code>DescribeServices</code> operation. Always use the service codes and categories
    ///             that the <code>DescribeServices</code> operation returns, so that you have the most
    ///             recent set of service and category codes.</p>
    ///         <note>
    ///             <ul>
    ///                <li>
    ///                     <p>You must have a Business or Enterprise Support plan to use the AWS Support
    ///                         API. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you call the AWS Support API from an account that does not have a
    ///                         Business or Enterprise Support plan, the
    ///                             <code>SubscriptionRequiredException</code> error message appears. For
    ///                         information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a>.</p>
    ///                 </li>
    ///             </ul>
    ///         </note>
    public func describeServices(input: DescribeServicesInput, completion: @escaping (ClientRuntime.SdkResult<DescribeServicesOutputResponse, DescribeServicesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeServices")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "support.\(config.region).amazonaws.com")
                      .withSigningName(value: "support")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeServicesInput, DescribeServicesOutputResponse, DescribeServicesOutputError>(id: "describeServices")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeServicesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeServicesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeServicesInput, DescribeServicesOutputResponse, DescribeServicesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeServicesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<DescribeServicesInput, DescribeServicesOutputResponse, DescribeServicesOutputError>(xAmzTarget: "AWSSupport_20130415.DescribeServices"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the list of severity levels that you can assign to a support case. The severity
    ///             level for a case is also a field in the <a>CaseDetails</a> data type that you
    ///             include for a <a>CreateCase</a> request.</p>
    ///         <note>
    ///             <ul>
    ///                <li>
    ///                     <p>You must have a Business or Enterprise Support plan to use the AWS Support
    ///                         API. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you call the AWS Support API from an account that does not have a
    ///                         Business or Enterprise Support plan, the
    ///                             <code>SubscriptionRequiredException</code> error message appears. For
    ///                         information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a>.</p>
    ///                 </li>
    ///             </ul>
    ///         </note>
    public func describeSeverityLevels(input: DescribeSeverityLevelsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeSeverityLevelsOutputResponse, DescribeSeverityLevelsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeSeverityLevels")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "support.\(config.region).amazonaws.com")
                      .withSigningName(value: "support")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeSeverityLevelsInput, DescribeSeverityLevelsOutputResponse, DescribeSeverityLevelsOutputError>(id: "describeSeverityLevels")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeSeverityLevelsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeSeverityLevelsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeSeverityLevelsInput, DescribeSeverityLevelsOutputResponse, DescribeSeverityLevelsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeSeverityLevelsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<DescribeSeverityLevelsInput, DescribeSeverityLevelsOutputResponse, DescribeSeverityLevelsOutputError>(xAmzTarget: "AWSSupport_20130415.DescribeSeverityLevels"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the refresh status of the AWS Trusted Advisor checks that have the specified check
    ///             IDs. You can get the check IDs by calling the <a>DescribeTrustedAdvisorChecks</a> operation.</p>
    ///         <p>Some checks are refreshed automatically, and you can't return their refresh statuses
    ///             by using the <code>DescribeTrustedAdvisorCheckRefreshStatuses</code> operation. If you
    ///             call this operation for these checks, you might see an
    ///                 <code>InvalidParameterValue</code> error.</p>
    ///         <note>
    ///             <ul>
    ///                <li>
    ///                     <p>You must have a Business or Enterprise Support plan to use the AWS Support
    ///                         API. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you call the AWS Support API from an account that does not have a
    ///                         Business or Enterprise Support plan, the
    ///                             <code>SubscriptionRequiredException</code> error message appears. For
    ///                         information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a>.</p>
    ///                 </li>
    ///             </ul>
    ///         </note>
    public func describeTrustedAdvisorCheckRefreshStatuses(input: DescribeTrustedAdvisorCheckRefreshStatusesInput, completion: @escaping (ClientRuntime.SdkResult<DescribeTrustedAdvisorCheckRefreshStatusesOutputResponse, DescribeTrustedAdvisorCheckRefreshStatusesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeTrustedAdvisorCheckRefreshStatuses")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "support.\(config.region).amazonaws.com")
                      .withSigningName(value: "support")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeTrustedAdvisorCheckRefreshStatusesInput, DescribeTrustedAdvisorCheckRefreshStatusesOutputResponse, DescribeTrustedAdvisorCheckRefreshStatusesOutputError>(id: "describeTrustedAdvisorCheckRefreshStatuses")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeTrustedAdvisorCheckRefreshStatusesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeTrustedAdvisorCheckRefreshStatusesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeTrustedAdvisorCheckRefreshStatusesInput, DescribeTrustedAdvisorCheckRefreshStatusesOutputResponse, DescribeTrustedAdvisorCheckRefreshStatusesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeTrustedAdvisorCheckRefreshStatusesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<DescribeTrustedAdvisorCheckRefreshStatusesInput, DescribeTrustedAdvisorCheckRefreshStatusesOutputResponse, DescribeTrustedAdvisorCheckRefreshStatusesOutputError>(xAmzTarget: "AWSSupport_20130415.DescribeTrustedAdvisorCheckRefreshStatuses"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the results of the AWS Trusted Advisor check that has the specified check ID. You
    ///             can get the check IDs by calling the <a>DescribeTrustedAdvisorChecks</a>
    ///             operation.</p>
    ///         <p>The response contains a <a>TrustedAdvisorCheckResult</a> object, which
    ///             contains these three objects:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <a>TrustedAdvisorCategorySpecificSummary</a>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <a>TrustedAdvisorResourceDetail</a>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <a>TrustedAdvisorResourcesSummary</a>
    ///                 </p>
    ///             </li>
    ///          </ul>
    ///         <p>In addition, the response contains these fields:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>status</b> - The alert status of the check
    ///                     can be <code>ok</code> (green), <code>warning</code> (yellow),
    ///                         <code>error</code> (red), or <code>not_available</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>timestamp</b> - The time of the last refresh
    ///                     of the check.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>checkId</b> - The unique identifier for the
    ///                     check.</p>
    ///             </li>
    ///          </ul>
    ///
    ///         <note>
    ///             <ul>
    ///                <li>
    ///                     <p>You must have a Business or Enterprise Support plan to use the AWS Support
    ///                         API. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you call the AWS Support API from an account that does not have a
    ///                         Business or Enterprise Support plan, the
    ///                             <code>SubscriptionRequiredException</code> error message appears. For
    ///                         information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a>.</p>
    ///                 </li>
    ///             </ul>
    ///         </note>
    public func describeTrustedAdvisorCheckResult(input: DescribeTrustedAdvisorCheckResultInput, completion: @escaping (ClientRuntime.SdkResult<DescribeTrustedAdvisorCheckResultOutputResponse, DescribeTrustedAdvisorCheckResultOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeTrustedAdvisorCheckResult")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "support.\(config.region).amazonaws.com")
                      .withSigningName(value: "support")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeTrustedAdvisorCheckResultInput, DescribeTrustedAdvisorCheckResultOutputResponse, DescribeTrustedAdvisorCheckResultOutputError>(id: "describeTrustedAdvisorCheckResult")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeTrustedAdvisorCheckResultInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeTrustedAdvisorCheckResultInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeTrustedAdvisorCheckResultInput, DescribeTrustedAdvisorCheckResultOutputResponse, DescribeTrustedAdvisorCheckResultOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeTrustedAdvisorCheckResultInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<DescribeTrustedAdvisorCheckResultInput, DescribeTrustedAdvisorCheckResultOutputResponse, DescribeTrustedAdvisorCheckResultOutputError>(xAmzTarget: "AWSSupport_20130415.DescribeTrustedAdvisorCheckResult"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the results for the AWS Trusted Advisor check summaries for the check IDs that you
    ///             specified. You can get the check IDs by calling the <a>DescribeTrustedAdvisorChecks</a> operation.</p>
    ///         <p>The response contains an array of <a>TrustedAdvisorCheckSummary</a>
    ///             objects.</p>
    ///         <note>
    ///             <ul>
    ///                <li>
    ///                     <p>You must have a Business or Enterprise Support plan to use the AWS Support
    ///                         API. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you call the AWS Support API from an account that does not have a
    ///                         Business or Enterprise Support plan, the
    ///                             <code>SubscriptionRequiredException</code> error message appears. For
    ///                         information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a>.</p>
    ///                 </li>
    ///             </ul>
    ///         </note>
    public func describeTrustedAdvisorCheckSummaries(input: DescribeTrustedAdvisorCheckSummariesInput, completion: @escaping (ClientRuntime.SdkResult<DescribeTrustedAdvisorCheckSummariesOutputResponse, DescribeTrustedAdvisorCheckSummariesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeTrustedAdvisorCheckSummaries")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "support.\(config.region).amazonaws.com")
                      .withSigningName(value: "support")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeTrustedAdvisorCheckSummariesInput, DescribeTrustedAdvisorCheckSummariesOutputResponse, DescribeTrustedAdvisorCheckSummariesOutputError>(id: "describeTrustedAdvisorCheckSummaries")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeTrustedAdvisorCheckSummariesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeTrustedAdvisorCheckSummariesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeTrustedAdvisorCheckSummariesInput, DescribeTrustedAdvisorCheckSummariesOutputResponse, DescribeTrustedAdvisorCheckSummariesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeTrustedAdvisorCheckSummariesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<DescribeTrustedAdvisorCheckSummariesInput, DescribeTrustedAdvisorCheckSummariesOutputResponse, DescribeTrustedAdvisorCheckSummariesOutputError>(xAmzTarget: "AWSSupport_20130415.DescribeTrustedAdvisorCheckSummaries"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns information about all available AWS Trusted Advisor checks, including the name, ID,
    ///             category, description, and metadata. You must specify a language code. The AWS Support API
    ///             currently supports English ("en") and Japanese ("ja"). The response contains a <a>TrustedAdvisorCheckDescription</a> object for each check. You must set the
    ///             AWS Region to us-east-1.</p>
    ///
    ///
    ///         <note>
    ///             <ul>
    ///                <li>
    ///                     <p>You must have a Business or Enterprise Support plan to use the AWS Support
    ///                         API. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you call the AWS Support API from an account that does not have a
    ///                         Business or Enterprise Support plan, the
    ///                         <code>SubscriptionRequiredException</code> error message appears. For
    ///                         information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a>.</p>
    ///                 </li>
    ///                <li>
    ///                     <p>The names and descriptions for Trusted Advisor checks are subject to change. We recommend
    ///                         that you specify the check ID in your code to uniquely identify a check.</p>
    ///                 </li>
    ///             </ul>
    ///         </note>
    public func describeTrustedAdvisorChecks(input: DescribeTrustedAdvisorChecksInput, completion: @escaping (ClientRuntime.SdkResult<DescribeTrustedAdvisorChecksOutputResponse, DescribeTrustedAdvisorChecksOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeTrustedAdvisorChecks")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "support.\(config.region).amazonaws.com")
                      .withSigningName(value: "support")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeTrustedAdvisorChecksInput, DescribeTrustedAdvisorChecksOutputResponse, DescribeTrustedAdvisorChecksOutputError>(id: "describeTrustedAdvisorChecks")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeTrustedAdvisorChecksInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeTrustedAdvisorChecksInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeTrustedAdvisorChecksInput, DescribeTrustedAdvisorChecksOutputResponse, DescribeTrustedAdvisorChecksOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeTrustedAdvisorChecksInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<DescribeTrustedAdvisorChecksInput, DescribeTrustedAdvisorChecksOutputResponse, DescribeTrustedAdvisorChecksOutputError>(xAmzTarget: "AWSSupport_20130415.DescribeTrustedAdvisorChecks"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Refreshes the AWS Trusted Advisor check that you specify using the check ID. You can get the
    ///             check IDs by calling the <a>DescribeTrustedAdvisorChecks</a>
    ///             operation.</p>
    ///         <note>
    ///             <p>Some checks are refreshed automatically. If you call the
    ///                     <code>RefreshTrustedAdvisorCheck</code> operation to refresh them, you might see
    ///                 the <code>InvalidParameterValue</code> error.</p>
    ///         </note>
    ///         <p>The response contains a <a>TrustedAdvisorCheckRefreshStatus</a>
    ///             object.</p>
    ///         <note>
    ///             <ul>
    ///                <li>
    ///                     <p>You must have a Business or Enterprise Support plan to use the AWS Support
    ///                         API. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you call the AWS Support API from an account that does not have a
    ///                         Business or Enterprise Support plan, the
    ///                             <code>SubscriptionRequiredException</code> error message appears. For
    ///                         information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a>.</p>
    ///                 </li>
    ///             </ul>
    ///         </note>
    public func refreshTrustedAdvisorCheck(input: RefreshTrustedAdvisorCheckInput, completion: @escaping (ClientRuntime.SdkResult<RefreshTrustedAdvisorCheckOutputResponse, RefreshTrustedAdvisorCheckOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "refreshTrustedAdvisorCheck")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "support.\(config.region).amazonaws.com")
                      .withSigningName(value: "support")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RefreshTrustedAdvisorCheckInput, RefreshTrustedAdvisorCheckOutputResponse, RefreshTrustedAdvisorCheckOutputError>(id: "refreshTrustedAdvisorCheck")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RefreshTrustedAdvisorCheckInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RefreshTrustedAdvisorCheckInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RefreshTrustedAdvisorCheckInput, RefreshTrustedAdvisorCheckOutputResponse, RefreshTrustedAdvisorCheckOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: RefreshTrustedAdvisorCheckInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<RefreshTrustedAdvisorCheckInput, RefreshTrustedAdvisorCheckOutputResponse, RefreshTrustedAdvisorCheckOutputError>(xAmzTarget: "AWSSupport_20130415.RefreshTrustedAdvisorCheck"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Resolves a support case. This operation takes a <code>caseId</code> and returns the
    ///             initial and final state of the case.</p>
    ///         <note>
    ///             <ul>
    ///                <li>
    ///                     <p>You must have a Business or Enterprise Support plan to use the AWS Support
    ///                         API. </p>
    ///                 </li>
    ///                <li>
    ///                     <p>If you call the AWS Support API from an account that does not have a
    ///                         Business or Enterprise Support plan, the
    ///                             <code>SubscriptionRequiredException</code> error message appears. For
    ///                         information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a>.</p>
    ///                 </li>
    ///             </ul>
    ///         </note>
    public func resolveCase(input: ResolveCaseInput, completion: @escaping (ClientRuntime.SdkResult<ResolveCaseOutputResponse, ResolveCaseOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "resolveCase")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "support.\(config.region).amazonaws.com")
                      .withSigningName(value: "support")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ResolveCaseInput, ResolveCaseOutputResponse, ResolveCaseOutputError>(id: "resolveCase")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ResolveCaseInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ResolveCaseInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ResolveCaseInput, ResolveCaseOutputResponse, ResolveCaseOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ResolveCaseInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<ResolveCaseInput, ResolveCaseOutputResponse, ResolveCaseOutputError>(xAmzTarget: "AWSSupport_20130415.ResolveCase"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
