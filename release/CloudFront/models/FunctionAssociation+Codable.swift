// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FunctionAssociation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eventType = "EventType"
        case functionARN = "FunctionARN"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://cloudfront.amazonaws.com/doc/2020-05-31/", forKey: Key("xmlns"))
        }
        if let eventType = eventType {
            try container.encode(eventType, forKey: Key("eventType"))
        }
        if let functionARN = functionARN {
            try container.encode(functionARN, forKey: Key("functionARN"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .functionARN)
        functionARN = functionARNDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(EventType.self, forKey: .eventType)
        eventType = eventTypeDecoded
    }
}
