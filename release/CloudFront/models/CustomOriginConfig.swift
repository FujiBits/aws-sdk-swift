// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A custom origin. A custom origin is any origin that is <i>not</i> an Amazon S3
/// 			bucket, with one exception. An Amazon S3 bucket that is <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html">configured with
/// 			static website hosting</a>
///             <i>is</i> a custom origin.</p>
public struct CustomOriginConfig: Equatable {
    /// <p>The HTTP port that CloudFront uses to connect to the origin. Specify the HTTP port that the origin
    /// 			listens on.</p>
    public let hTTPPort: Int?
    /// <p>The HTTPS port that CloudFront uses to connect to the origin. Specify the HTTPS port that the
    /// 			origin listens on.</p>
    public let hTTPSPort: Int?
    /// <p>Specifies how long, in seconds, CloudFront persists its connection to the origin. The minimum
    /// 			timeout is 1 second, the maximum is 60 seconds, and the default (if you don’t specify
    /// 			otherwise) is 5 seconds.</p>
    /// 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginKeepaliveTimeout">Origin Keep-alive Timeout</a> in the
    /// 			<i>Amazon CloudFront Developer Guide</i>.</p>
    public let originKeepaliveTimeout: Int?
    /// <p>Specifies the protocol (HTTP or HTTPS) that CloudFront uses to connect to the origin. Valid values
    /// 			are:</p>
    /// 		       <ul>
    ///             <li>
    /// 				           <p>
    ///                   <code>http-only</code> – CloudFront always uses HTTP to connect to the
    /// 					origin.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    ///                   <code>match-viewer</code> – CloudFront connects to the origin using the same
    /// 					protocol that the viewer used to connect to CloudFront.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    ///                   <code>https-only</code> – CloudFront always uses HTTPS to connect to the
    /// 					origin.</p>
    /// 			         </li>
    ///          </ul>
    public let originProtocolPolicy: OriginProtocolPolicy?
    /// <p>Specifies how long, in seconds, CloudFront waits for a response from the origin. This is also
    /// 			known as the <i>origin response timeout</i>. The minimum timeout is 1
    /// 			second, the maximum is 60 seconds, and the default (if you don’t specify otherwise) is
    /// 			30 seconds.</p>
    /// 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginResponseTimeout">Origin Response Timeout</a> in the
    /// 			<i>Amazon CloudFront Developer Guide</i>.</p>
    public let originReadTimeout: Int?
    /// <p>Specifies the minimum SSL/TLS protocol that CloudFront uses when connecting to your origin over
    /// 			HTTPS. Valid values include <code>SSLv3</code>, <code>TLSv1</code>,
    /// 			<code>TLSv1.1</code>, and <code>TLSv1.2</code>.</p>
    /// 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginSSLProtocols">Minimum Origin SSL Protocol</a> in the
    /// 			<i>Amazon CloudFront Developer Guide</i>.</p>
    public let originSslProtocols: OriginSslProtocols?

    public init (
        hTTPPort: Int? = nil,
        hTTPSPort: Int? = nil,
        originKeepaliveTimeout: Int? = nil,
        originProtocolPolicy: OriginProtocolPolicy? = nil,
        originReadTimeout: Int? = nil,
        originSslProtocols: OriginSslProtocols? = nil
    )
    {
        self.hTTPPort = hTTPPort
        self.hTTPSPort = hTTPSPort
        self.originKeepaliveTimeout = originKeepaliveTimeout
        self.originProtocolPolicy = originProtocolPolicy
        self.originReadTimeout = originReadTimeout
        self.originSslProtocols = originSslProtocols
    }
}

extension CustomOriginConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CustomOriginConfig(hTTPPort: \(String(describing: hTTPPort)), hTTPSPort: \(String(describing: hTTPSPort)), originKeepaliveTimeout: \(String(describing: originKeepaliveTimeout)), originProtocolPolicy: \(String(describing: originProtocolPolicy)), originReadTimeout: \(String(describing: originReadTimeout)), originSslProtocols: \(String(describing: originSslProtocols)))"}
}
