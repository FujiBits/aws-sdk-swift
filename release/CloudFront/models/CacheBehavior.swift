// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A complex type that describes how CloudFront processes requests.</p>
/// 		       <p>You must create at least as many cache behaviors (including the default cache behavior) as
/// 			you have origins if you want CloudFront to serve objects from all of the origins. Each cache
/// 			behavior specifies the one origin from which you want CloudFront to get objects. If you have
/// 			two origins and only the default cache behavior, the default cache behavior will cause
/// 			CloudFront to get objects from one of the origins, but the other origin is never used.</p>
/// 		       <p>For the current quota (formerly known as limit) on the number of cache behaviors that you
/// 			can add to a distribution, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html">Quotas</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
/// 		       <p>If you don’t want to specify any cache behaviors, include only an empty
/// 			<code>CacheBehaviors</code> element. Don’t include an empty <code>CacheBehavior</code>
/// 			element because this is invalid.</p>
/// 		       <p>To delete all cache behaviors in an existing distribution, update the distribution
/// 			configuration and include only an empty <code>CacheBehaviors</code> element.</p>
/// 		       <p>To add, change, or remove one or more cache behaviors, update the distribution
/// 			configuration and specify all of the cache behaviors that you want to include in the updated
/// 			distribution.</p>
/// 		       <p>For more information about cache behaviors, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesCacheBehavior">Cache Behavior Settings</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
public struct CacheBehavior: Equatable {
    /// <p>A complex type that controls which HTTP methods CloudFront processes and forwards to your
    /// 			Amazon S3 bucket or your custom origin. There are three choices:</p>
    /// 		       <ul>
    ///             <li>
    /// 				           <p>CloudFront forwards only <code>GET</code> and <code>HEAD</code> requests.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>CloudFront forwards only <code>GET</code>, <code>HEAD</code>, and <code>OPTIONS</code>
    /// 					requests.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>CloudFront forwards <code>GET, HEAD, OPTIONS, PUT, PATCH, POST</code>, and
    /// 						<code>DELETE</code> requests.</p>
    /// 			         </li>
    ///          </ul>
    /// 		       <p>If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or
    /// 			to your custom origin so users can't perform operations that you don't want them to. For
    /// 			example, you might not want users to have permissions to delete objects from your
    /// 			origin.</p>
    public let allowedMethods: AllowedMethods?
    /// <p>The unique identifier of the cache policy that is attached to this cache behavior. For more
    /// 			information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy">Creating cache policies</a> or <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html">Using the managed cache policies</a> in the
    ///             <i>Amazon CloudFront Developer Guide</i>.</p>
    ///         <p>A <code>CacheBehavior</code> must include either a
    ///             <code>CachePolicyId</code> or <code>ForwardedValues</code>. We recommend that you
    ///             use a <code>CachePolicyId</code>.</p>
    public let cachePolicyId: String?
    /// <p>Whether you want CloudFront to automatically compress certain files for this cache behavior.
    /// 			If so, specify true; if not, specify false. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html">Serving Compressed Files</a> in the
    /// 				<i>Amazon CloudFront Developer Guide</i>.</p>
    public let compress: Bool?
    /// <p>This field is deprecated. We recommend that you use the <code>DefaultTTL</code> field in a
    /// 			cache policy instead of this field. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy">Creating cache policies</a> or <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html">Using the managed cache policies</a> in the
    /// 			<i>Amazon CloudFront Developer Guide</i>.</p>
    /// 		       <p>The default amount of time that you want objects to stay in CloudFront caches before CloudFront
    /// 			forwards another request to your origin to determine whether the object has been updated. The
    /// 			value that you specify applies only when your origin does not add HTTP headers such as
    /// 				<code>Cache-Control max-age</code>, <code>Cache-Control s-maxage</code>, and
    /// 				<code>Expires</code> to objects. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html">Managing How Long Content Stays
    /// 				in an Edge Cache (Expiration)</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    @available(*, deprecated)
    public let defaultTTL: Int?
    /// <p>The value of <code>ID</code> for the field-level encryption configuration that you want CloudFront
    /// 			to use for encrypting specific fields of data for this cache behavior.</p>
    public let fieldLevelEncryptionId: String?
    /// <p>This field is deprecated. We recommend that you use a cache policy or an origin
    /// 			request policy instead of this field. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-policies.html">Working with policies</a> in the
    /// 			<i>Amazon CloudFront Developer Guide</i>.</p>
    /// 		       <p>If you want to include values in the cache key, use a cache policy. For more
    /// 			information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy">Creating cache policies</a> or <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html">Using the managed cache policies</a> in the
    /// 			<i>Amazon CloudFront Developer Guide</i>.</p>
    /// 		       <p>If you want to send values to the origin but not include them in the cache key, use an
    /// 			origin request policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy">Creating origin request policies</a> or <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html">Using the managed origin request policies</a> in the
    ///             <i>Amazon CloudFront Developer Guide</i>.</p>
    ///         <p>A <code>CacheBehavior</code> must include either a
    ///             <code>CachePolicyId</code> or <code>ForwardedValues</code>. We recommend that you
    ///             use a <code>CachePolicyId</code>.</p>
    /// 		       <p>A complex type that specifies how CloudFront handles query strings, cookies, and HTTP headers.</p>
    @available(*, deprecated)
    public let forwardedValues: ForwardedValues?
    /// <p>A list of CloudFront functions that are associated with this cache behavior. CloudFront functions must
    /// 			be published to the <code>LIVE</code> stage to associate them with a cache
    /// 			behavior.</p>
    public let functionAssociations: FunctionAssociations?
    /// <p>A complex type that contains zero or more Lambda function associations for a cache
    /// 			behavior.</p>
    public let lambdaFunctionAssociations: LambdaFunctionAssociations?
    /// <p>This field is deprecated. We recommend that you use the <code>MaxTTL</code> field in a cache
    /// 			policy instead of this field. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy">Creating cache policies</a> or <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html">Using the managed cache policies</a> in the
    /// 			<i>Amazon CloudFront Developer Guide</i>.</p>
    /// 		       <p>The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront
    /// 			forwards another request to your origin to determine whether the object has been updated. The
    /// 			value that you specify applies only when your origin adds HTTP headers such as
    /// 				<code>Cache-Control max-age</code>, <code>Cache-Control s-maxage</code>, and
    /// 				<code>Expires</code> to objects. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html">Managing How Long Content Stays
    /// 				in an Edge Cache (Expiration)</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    @available(*, deprecated)
    public let maxTTL: Int?
    /// <p>This field is deprecated. We recommend that you use the <code>MinTTL</code> field in a cache
    /// 			policy instead of this field. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy">Creating cache policies</a> or <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html">Using the managed cache policies</a> in the
    /// 			<i>Amazon CloudFront Developer Guide</i>.</p>
    /// 		       <p>The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront
    /// 			forwards another request to your origin to determine whether the object has been updated. For
    /// 			more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html">
    /// 				Managing How Long Content Stays in an Edge Cache (Expiration)</a> in the <i>
    /// 				Amazon CloudFront Developer Guide</i>.</p>
    /// 		       <p>You must specify <code>0</code> for <code>MinTTL</code> if you configure CloudFront to
    /// 			forward all headers to your origin (under <code>Headers</code>, if you specify <code>1</code>
    /// 			for <code>Quantity</code> and <code>*</code> for <code>Name</code>).</p>
    @available(*, deprecated)
    public let minTTL: Int?
    /// <p>The unique identifier of the origin request policy that is attached to this cache behavior.
    /// 			For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy">Creating origin request policies</a> or <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html">Using the managed origin request policies</a> in the
    /// 			<i>Amazon CloudFront Developer Guide</i>.</p>
    public let originRequestPolicyId: String?
    /// <p>The pattern (for example, <code>images/*.jpg</code>) that specifies which requests to
    /// 			apply the behavior to. When CloudFront receives a viewer request, the requested path is compared
    /// 			with path patterns in the order in which cache behaviors are listed in the
    /// 			distribution.</p>
    /// 		       <note>
    /// 			         <p>You can optionally include a slash (<code>/</code>) at the beginning of the path
    /// 				pattern. For example, <code>/images/*.jpg</code>. CloudFront behavior is the same with or without
    /// 				the leading <code>/</code>.</p>
    /// 		       </note>
    /// 		       <p>The path pattern for the default cache behavior is <code>*</code> and cannot be
    /// 			changed. If the request for an object does not match the path pattern for any cache behaviors,
    /// 			CloudFront applies the behavior in the default cache behavior.</p>
    /// 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesPathPattern">Path
    /// 				Pattern</a> in the <i> Amazon CloudFront Developer Guide</i>.</p>
    public let pathPattern: String?
    /// <p>The Amazon Resource Name (ARN) of the real-time log configuration that is attached to this
    /// 			cache behavior. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html">Real-time logs</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    public let realtimeLogConfigArn: String?
    /// <p>Indicates whether you want to distribute media files in the Microsoft Smooth Streaming
    /// 			format using the origin that is associated with this cache behavior. If so, specify
    /// 				<code>true</code>; if not, specify <code>false</code>. If you specify <code>true</code> for
    /// 				<code>SmoothStreaming</code>, you can still distribute other content using this cache
    /// 			behavior if the content matches the value of <code>PathPattern</code>. </p>
    public let smoothStreaming: Bool?
    /// <p>The value of <code>ID</code> for the origin that you want CloudFront to route requests to
    /// 			when they match this cache behavior.</p>
    public let targetOriginId: String?
    /// <p>A list of key groups that CloudFront can use to validate signed URLs or signed cookies.</p>
    /// 		       <p>When a cache behavior contains trusted key groups, CloudFront requires signed URLs or signed
    /// 			cookies for all requests that match the cache behavior. The URLs or cookies must be
    /// 			signed with a private key whose corresponding public key is in the key group. The signed
    /// 			URL or cookie contains information about which public key CloudFront should use to verify the
    /// 			signature. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">Serving private content</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    public let trustedKeyGroups: TrustedKeyGroups?
    /// <important>
    /// 			         <p>We recommend using <code>TrustedKeyGroups</code> instead of
    /// 				<code>TrustedSigners</code>.</p>
    /// 		       </important>
    /// 		       <p>A list of AWS account IDs whose public keys CloudFront can use to validate signed URLs or signed
    /// 			cookies.</p>
    /// 		       <p>When a cache behavior contains trusted signers, CloudFront requires signed URLs or signed cookies
    /// 			for all requests that match the cache behavior. The URLs or cookies must be signed with
    /// 			the private key of a CloudFront key pair in the trusted signer’s AWS account. The signed URL
    /// 			or cookie contains information about which public key CloudFront should use to verify the
    /// 			signature. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">Serving private content</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    public let trustedSigners: TrustedSigners?
    /// <p>The protocol that viewers can use to access the files in the origin specified by
    /// 				<code>TargetOriginId</code> when a request matches the path pattern in
    /// 				<code>PathPattern</code>. You can specify the following options:</p>
    /// 		       <ul>
    ///             <li>
    /// 				           <p>
    ///                   <code>allow-all</code>: Viewers can use HTTP or HTTPS.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    ///                   <code>redirect-to-https</code>: If a viewer submits an HTTP request, CloudFront returns
    /// 					an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The
    /// 					viewer then resubmits the request using the new URL. </p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>
    ///                   <code>https-only</code>: If a viewer sends an HTTP request, CloudFront returns an HTTP
    /// 					status code of 403 (Forbidden). </p>
    /// 			         </li>
    ///          </ul>
    /// 		       <p>For more information about requiring the HTTPS protocol, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html">Requiring HTTPS Between Viewers and CloudFront</a> in the
    /// 			<i>Amazon CloudFront Developer Guide</i>.</p>
    /// 		       <note>
    /// 			         <p>The only way to guarantee that viewers retrieve an object that was fetched from the origin
    /// 				using HTTPS is never to use any other protocol to fetch the object. If you have
    /// 				recently changed from HTTP to HTTPS, we recommend that you clear your objects’ cache
    /// 				because cached objects are protocol agnostic. That means that an edge location will
    /// 				return an object from the cache regardless of whether the current request protocol
    /// 				matches the protocol used previously. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html">Managing Cache Expiration</a> in the
    /// 				<i>Amazon CloudFront Developer Guide</i>.</p>
    /// 		       </note>
    public let viewerProtocolPolicy: ViewerProtocolPolicy?

    public init (
        allowedMethods: AllowedMethods? = nil,
        cachePolicyId: String? = nil,
        compress: Bool? = nil,
        defaultTTL: Int? = nil,
        fieldLevelEncryptionId: String? = nil,
        forwardedValues: ForwardedValues? = nil,
        functionAssociations: FunctionAssociations? = nil,
        lambdaFunctionAssociations: LambdaFunctionAssociations? = nil,
        maxTTL: Int? = nil,
        minTTL: Int? = nil,
        originRequestPolicyId: String? = nil,
        pathPattern: String? = nil,
        realtimeLogConfigArn: String? = nil,
        smoothStreaming: Bool? = nil,
        targetOriginId: String? = nil,
        trustedKeyGroups: TrustedKeyGroups? = nil,
        trustedSigners: TrustedSigners? = nil,
        viewerProtocolPolicy: ViewerProtocolPolicy? = nil
    )
    {
        self.allowedMethods = allowedMethods
        self.cachePolicyId = cachePolicyId
        self.compress = compress
        self.defaultTTL = defaultTTL
        self.fieldLevelEncryptionId = fieldLevelEncryptionId
        self.forwardedValues = forwardedValues
        self.functionAssociations = functionAssociations
        self.lambdaFunctionAssociations = lambdaFunctionAssociations
        self.maxTTL = maxTTL
        self.minTTL = minTTL
        self.originRequestPolicyId = originRequestPolicyId
        self.pathPattern = pathPattern
        self.realtimeLogConfigArn = realtimeLogConfigArn
        self.smoothStreaming = smoothStreaming
        self.targetOriginId = targetOriginId
        self.trustedKeyGroups = trustedKeyGroups
        self.trustedSigners = trustedSigners
        self.viewerProtocolPolicy = viewerProtocolPolicy
    }
}

extension CacheBehavior: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CacheBehavior(allowedMethods: \(String(describing: allowedMethods)), cachePolicyId: \(String(describing: cachePolicyId)), compress: \(String(describing: compress)), defaultTTL: \(String(describing: defaultTTL)), fieldLevelEncryptionId: \(String(describing: fieldLevelEncryptionId)), forwardedValues: \(String(describing: forwardedValues)), functionAssociations: \(String(describing: functionAssociations)), lambdaFunctionAssociations: \(String(describing: lambdaFunctionAssociations)), maxTTL: \(String(describing: maxTTL)), minTTL: \(String(describing: minTTL)), originRequestPolicyId: \(String(describing: originRequestPolicyId)), pathPattern: \(String(describing: pathPattern)), realtimeLogConfigArn: \(String(describing: realtimeLogConfigArn)), smoothStreaming: \(String(describing: smoothStreaming)), targetOriginId: \(String(describing: targetOriginId)), trustedKeyGroups: \(String(describing: trustedKeyGroups)), trustedSigners: \(String(describing: trustedSigners)), viewerProtocolPolicy: \(String(describing: viewerProtocolPolicy)))"}
}
