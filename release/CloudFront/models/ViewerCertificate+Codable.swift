// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ViewerCertificate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aCMCertificateArn = "ACMCertificateArn"
        case certificate = "Certificate"
        case certificateSource = "CertificateSource"
        case cloudFrontDefaultCertificate = "CloudFrontDefaultCertificate"
        case iAMCertificateId = "IAMCertificateId"
        case minimumProtocolVersion = "MinimumProtocolVersion"
        case sSLSupportMethod = "SSLSupportMethod"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://cloudfront.amazonaws.com/doc/2020-05-31/", forKey: Key("xmlns"))
        }
        if let aCMCertificateArn = aCMCertificateArn {
            try container.encode(aCMCertificateArn, forKey: Key("aCMCertificateArn"))
        }
        if let certificate = certificate {
            try container.encode(certificate, forKey: Key("certificate"))
        }
        if let certificateSource = certificateSource {
            try container.encode(certificateSource, forKey: Key("certificateSource"))
        }
        if let cloudFrontDefaultCertificate = cloudFrontDefaultCertificate {
            try container.encode(cloudFrontDefaultCertificate, forKey: Key("cloudFrontDefaultCertificate"))
        }
        if let iAMCertificateId = iAMCertificateId {
            try container.encode(iAMCertificateId, forKey: Key("iAMCertificateId"))
        }
        if let minimumProtocolVersion = minimumProtocolVersion {
            try container.encode(minimumProtocolVersion, forKey: Key("minimumProtocolVersion"))
        }
        if let sSLSupportMethod = sSLSupportMethod {
            try container.encode(sSLSupportMethod, forKey: Key("sSLSupportMethod"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudFrontDefaultCertificateDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .cloudFrontDefaultCertificate)
        cloudFrontDefaultCertificate = cloudFrontDefaultCertificateDecoded
        let iAMCertificateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iAMCertificateId)
        iAMCertificateId = iAMCertificateIdDecoded
        let aCMCertificateArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aCMCertificateArn)
        aCMCertificateArn = aCMCertificateArnDecoded
        let sSLSupportMethodDecoded = try containerValues.decodeIfPresent(SSLSupportMethod.self, forKey: .sSLSupportMethod)
        sSLSupportMethod = sSLSupportMethodDecoded
        let minimumProtocolVersionDecoded = try containerValues.decodeIfPresent(MinimumProtocolVersion.self, forKey: .minimumProtocolVersion)
        minimumProtocolVersion = minimumProtocolVersionDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificate)
        certificate = certificateDecoded
        let certificateSourceDecoded = try containerValues.decodeIfPresent(CertificateSource.self, forKey: .certificateSource)
        certificateSource = certificateSourceDecoded
    }
}
