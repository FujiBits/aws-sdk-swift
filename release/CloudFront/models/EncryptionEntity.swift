// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Complex data type for field-level encryption profiles that includes the encryption key and field pattern specifications. </p>
public struct EncryptionEntity: Equatable {
    /// <p>Field patterns in a field-level encryption content type profile specify the fields that you want to be encrypted. You can provide the
    /// 			full field name, or any beginning characters followed by a wildcard (*). You can't overlap field patterns. For example, you can't have
    /// 			both ABC* and AB*. Note that field patterns are case-sensitive. </p>
    public let fieldPatterns: FieldPatterns?
    /// <p>The provider associated with the public key being used for encryption. This value must also be provided with the private key
    /// 		for applications to be able to decrypt data.</p>
    public let providerId: String?
    /// <p>The public key associated with a set of field-level encryption patterns, to be used when encrypting the fields that match
    /// 			the patterns. </p>
    public let publicKeyId: String?

    public init (
        fieldPatterns: FieldPatterns? = nil,
        providerId: String? = nil,
        publicKeyId: String? = nil
    )
    {
        self.fieldPatterns = fieldPatterns
        self.providerId = providerId
        self.publicKeyId = publicKeyId
    }
}

extension EncryptionEntity: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EncryptionEntity(fieldPatterns: \(String(describing: fieldPatterns)), providerId: \(String(describing: providerId)), publicKeyId: \(String(describing: publicKeyId)))"}
}
