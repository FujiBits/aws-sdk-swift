// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p> A summary of the information for a CloudFront streaming distribution.</p>
public struct StreamingDistributionSummary: Equatable {
    /// <p> The ARN (Amazon Resource Name) for the streaming distribution. For example:
    /// 				<code>arn:aws:cloudfront::123456789012:streaming-distribution/EDFDVBD632BHDS5</code>, where
    /// 				<code>123456789012</code> is your AWS account ID.</p>
    public let aRN: String?
    /// <p>A complex type that contains information about CNAMEs (alternate domain names), if any,
    /// 			for this streaming distribution.</p>
    public let aliases: Aliases?
    /// <p>The comment originally specified when this distribution was created.</p>
    public let comment: String?
    /// <p>The domain name corresponding to the distribution, for example, <code>d111111abcdef8.cloudfront.net</code>.</p>
    public let domainName: String?
    /// <p>Whether the distribution is enabled to accept end user requests for content.</p>
    public let enabled: Bool?
    /// <p>The identifier for the distribution, for example, <code>EDFDVBD632BHDS5</code>.</p>
    public let id: String?
    /// <p>The date and time the distribution was last modified.</p>
    public let lastModifiedTime: Date?
    /// <p>A complex type that contains information about price class for this streaming
    /// 			distribution. </p>
    public let priceClass: PriceClass?
    /// <p>A complex type that contains information about the Amazon S3 bucket from which you want
    /// 			CloudFront to get your media files for distribution.</p>
    public let s3Origin: S3Origin?
    /// <p> Indicates the current status of the distribution. When the status is
    /// 			<code>Deployed</code>, the distribution's information is fully propagated throughout the
    /// 			Amazon CloudFront system.</p>
    public let status: String?
    /// <p>A complex type that specifies the AWS accounts, if any, that you want to allow to
    /// 			create signed URLs for private content. If you want to require signed URLs in requests for
    /// 			objects in the target origin that match the <code>PathPattern</code> for this cache behavior,
    /// 			specify <code>true</code> for <code>Enabled</code>, and specify the applicable values for
    /// 				<code>Quantity</code> and <code>Items</code>.If you don't want to require signed URLs in
    /// 			requests for objects that match <code>PathPattern</code>, specify <code>false</code> for
    /// 				<code>Enabled</code> and <code>0</code> for <code>Quantity</code>. Omit <code>Items</code>.
    /// 			To add, change, or remove one or more trusted signers, change <code>Enabled</code> to
    /// 				<code>true</code> (if it's currently <code>false</code>), change <code>Quantity</code> as
    /// 			applicable, and specify all of the trusted signers that you want to include in the updated
    /// 			distribution.</p>
    /// 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">Serving Private
    /// 			Content through CloudFront</a> in the <i>Amazon CloudFront Developer Guide</i>. </p>
    public let trustedSigners: TrustedSigners?

    public init (
        aRN: String? = nil,
        aliases: Aliases? = nil,
        comment: String? = nil,
        domainName: String? = nil,
        enabled: Bool? = nil,
        id: String? = nil,
        lastModifiedTime: Date? = nil,
        priceClass: PriceClass? = nil,
        s3Origin: S3Origin? = nil,
        status: String? = nil,
        trustedSigners: TrustedSigners? = nil
    )
    {
        self.aRN = aRN
        self.aliases = aliases
        self.comment = comment
        self.domainName = domainName
        self.enabled = enabled
        self.id = id
        self.lastModifiedTime = lastModifiedTime
        self.priceClass = priceClass
        self.s3Origin = s3Origin
        self.status = status
        self.trustedSigners = trustedSigners
    }
}

extension StreamingDistributionSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StreamingDistributionSummary(aRN: \(String(describing: aRN)), aliases: \(String(describing: aliases)), comment: \(String(describing: comment)), domainName: \(String(describing: domainName)), enabled: \(String(describing: enabled)), id: \(String(describing: id)), lastModifiedTime: \(String(describing: lastModifiedTime)), priceClass: \(String(describing: priceClass)), s3Origin: \(String(describing: s3Origin)), status: \(String(describing: status)), trustedSigners: \(String(describing: trustedSigners)))"}
}
