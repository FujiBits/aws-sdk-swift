// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A complex type that specifies a list of Lambda functions associations for a cache
/// 			behavior.</p>
///
/// 		       <p>If you want to invoke one or more Lambda functions triggered by requests that match the
/// 				<code>PathPattern</code> of the cache behavior, specify the applicable values for
/// 				<code>Quantity</code> and <code>Items</code>. Note that there can be up to 4
/// 				<code>LambdaFunctionAssociation</code> items in this list (one for each possible value of
/// 				<code>EventType</code>) and each <code>EventType</code> can be associated with the Lambda
/// 			function only once.</p>
///
/// 		       <p>If you don't want to invoke any Lambda functions for the requests that match
/// 				<code>PathPattern</code>, specify <code>0</code> for <code>Quantity</code> and omit
/// 				<code>Items</code>. </p>
public struct LambdaFunctionAssociations: Equatable {
    /// <p>
    ///             <b>Optional</b>: A complex type that contains <code>LambdaFunctionAssociation</code> items
    /// 			for this cache behavior. If <code>Quantity</code> is <code>0</code>, you can omit <code>Items</code>.</p>
    public let items: [LambdaFunctionAssociation]?
    /// <p>The number of Lambda function associations for this cache behavior.</p>
    public let quantity: Int?

    public init (
        items: [LambdaFunctionAssociation]? = nil,
        quantity: Int? = nil
    )
    {
        self.items = items
        self.quantity = quantity
    }
}

extension LambdaFunctionAssociations: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LambdaFunctionAssociations(items: \(String(describing: items)), quantity: \(String(describing: quantity)))"}
}
