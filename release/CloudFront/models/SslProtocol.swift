// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum SslProtocol {
    case sslv3
    case tlsv1
    case tlsv11
    case tlsv12
    case sdkUnknown(String)
}

extension SslProtocol : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SslProtocol] {
        return [
            .sslv3,
            .tlsv1,
            .tlsv11,
            .tlsv12,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .sslv3: return "SSLv3"
        case .tlsv1: return "TLSv1"
        case .tlsv11: return "TLSv1.1"
        case .tlsv12: return "TLSv1.2"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SslProtocol(rawValue: rawValue) ?? SslProtocol.sdkUnknown(rawValue)
    }
}
