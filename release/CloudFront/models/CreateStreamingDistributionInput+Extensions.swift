// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateStreamingDistributionInputHeadersMiddleware: Middleware {
    public let id: String = "CreateStreamingDistributionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateStreamingDistributionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateStreamingDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateStreamingDistributionInput>
    public typealias MOutput = OperationOutput<CreateStreamingDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateStreamingDistributionOutputError>
}

public struct CreateStreamingDistributionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateStreamingDistributionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateStreamingDistributionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateStreamingDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateStreamingDistributionInput>
    public typealias MOutput = OperationOutput<CreateStreamingDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateStreamingDistributionOutputError>
}

public struct CreateStreamingDistributionInputBodyMiddleware: Middleware {
    public let id: String = "CreateStreamingDistributionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateStreamingDistributionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateStreamingDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let streamingDistributionConfig = input.operationInput.streamingDistributionConfig {
            do {
                let encoder = context.getEncoder()
                let data = try encoder.encode(streamingDistributionConfig)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            } catch let err {
                return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateStreamingDistributionInput>
    public typealias MOutput = OperationOutput<CreateStreamingDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateStreamingDistributionOutputError>
}

extension CreateStreamingDistributionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case streamingDistributionConfig = "StreamingDistributionConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://cloudfront.amazonaws.com/doc/2020-05-31/", forKey: Key("xmlns"))
        }
        if let streamingDistributionConfig = streamingDistributionConfig {
            try container.encode(streamingDistributionConfig, forKey: Key("StreamingDistributionConfig"))
        }
    }
}
