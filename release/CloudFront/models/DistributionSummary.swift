// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>A summary of the information about a CloudFront distribution.</p>
public struct DistributionSummary: Equatable {
    /// <p>The ARN (Amazon Resource Name) for the distribution. For example:
    /// 				<code>arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5</code>, where
    /// 				<code>123456789012</code> is your AWS account ID.</p>
    public let aRN: String?
    /// <p>AWS services in China customers must file for an Internet Content Provider (ICP) recordal if they want to serve content
    /// 			publicly on an alternate domain name, also known as a CNAME, that they've added to CloudFront. AliasICPRecordal provides the ICP
    /// 			recordal status for CNAMEs associated with distributions.</p>
    /// 		       <p>For more information about ICP recordals, see  <a href="https://docs.amazonaws.cn/en_us/aws/latest/userguide/accounts-and-credentials.html">
    /// 			Signup, Accounts, and Credentials</a> in <i>Getting Started with AWS services in China</i>.</p>
    public let aliasICPRecordals: [AliasICPRecordal]?
    /// <p>A complex type that contains information about CNAMEs (alternate domain names), if any,
    /// 			for this distribution.</p>
    public let aliases: Aliases?
    /// <p>A complex type that contains zero or more <code>CacheBehavior</code>
    /// 			elements.</p>
    public let cacheBehaviors: CacheBehaviors?
    /// <p>The comment originally specified when this distribution was created.</p>
    public let comment: String?
    /// <p>A complex type that contains zero or more <code>CustomErrorResponses</code>
    /// 			elements.</p>
    public let customErrorResponses: CustomErrorResponses?
    /// <p>A complex type that describes the default cache behavior if you don't specify a
    /// 				<code>CacheBehavior</code> element or if files don't match any of the values of
    /// 				<code>PathPattern</code> in <code>CacheBehavior</code> elements. You must create exactly one
    /// 			default cache behavior.</p>
    public let defaultCacheBehavior: DefaultCacheBehavior?
    /// <p>The domain name that corresponds to the distribution, for example, <code>d111111abcdef8.cloudfront.net</code>.</p>
    public let domainName: String?
    /// <p>Whether the distribution is enabled to accept user requests for content.</p>
    public let enabled: Bool?
    /// <p> Specify the maximum HTTP version that you want viewers to use to communicate with
    /// 			CloudFront. The default value for new web distributions is <code>http2</code>. Viewers that don't
    /// 			support <code>HTTP/2</code> will automatically use an earlier version.</p>
    public let httpVersion: HttpVersion?
    /// <p>The identifier for the distribution. For example:
    /// 			<code>EDFDVBD632BHDS5</code>.</p>
    public let id: String?
    /// <p>Whether CloudFront responds to IPv6 DNS requests with an IPv6 address for your
    /// 			distribution.</p>
    public let isIPV6Enabled: Bool?
    /// <p>The date and time the distribution was last modified.</p>
    public let lastModifiedTime: Date?
    /// <p> A complex type that contains information about origin groups for this
    /// 			distribution.</p>
    public let originGroups: OriginGroups?
    /// <p>A complex type that contains information about origins for this distribution.</p>
    public let origins: Origins?
    /// <p>A complex type that contains information about price class for this streaming
    /// 			distribution. </p>
    public let priceClass: PriceClass?
    /// <p>A complex type that identifies ways in which you want to restrict distribution of your
    /// 			content.</p>
    public let restrictions: Restrictions?
    /// <p>The current status of the distribution. When the status is <code>Deployed</code>, the
    /// 			distribution's information is propagated to all CloudFront edge locations.</p>
    public let status: String?
    /// <p>A complex type that determines the distributionâ€™s SSL/TLS configuration for
    /// 			communicating with viewers.</p>
    public let viewerCertificate: ViewerCertificate?
    /// <p>The Web ACL Id (if any) associated with the distribution.</p>
    public let webACLId: String?

    public init (
        aRN: String? = nil,
        aliasICPRecordals: [AliasICPRecordal]? = nil,
        aliases: Aliases? = nil,
        cacheBehaviors: CacheBehaviors? = nil,
        comment: String? = nil,
        customErrorResponses: CustomErrorResponses? = nil,
        defaultCacheBehavior: DefaultCacheBehavior? = nil,
        domainName: String? = nil,
        enabled: Bool? = nil,
        httpVersion: HttpVersion? = nil,
        id: String? = nil,
        isIPV6Enabled: Bool? = nil,
        lastModifiedTime: Date? = nil,
        originGroups: OriginGroups? = nil,
        origins: Origins? = nil,
        priceClass: PriceClass? = nil,
        restrictions: Restrictions? = nil,
        status: String? = nil,
        viewerCertificate: ViewerCertificate? = nil,
        webACLId: String? = nil
    )
    {
        self.aRN = aRN
        self.aliasICPRecordals = aliasICPRecordals
        self.aliases = aliases
        self.cacheBehaviors = cacheBehaviors
        self.comment = comment
        self.customErrorResponses = customErrorResponses
        self.defaultCacheBehavior = defaultCacheBehavior
        self.domainName = domainName
        self.enabled = enabled
        self.httpVersion = httpVersion
        self.id = id
        self.isIPV6Enabled = isIPV6Enabled
        self.lastModifiedTime = lastModifiedTime
        self.originGroups = originGroups
        self.origins = origins
        self.priceClass = priceClass
        self.restrictions = restrictions
        self.status = status
        self.viewerCertificate = viewerCertificate
        self.webACLId = webACLId
    }
}

extension DistributionSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DistributionSummary(aRN: \(String(describing: aRN)), aliasICPRecordals: \(String(describing: aliasICPRecordals)), aliases: \(String(describing: aliases)), cacheBehaviors: \(String(describing: cacheBehaviors)), comment: \(String(describing: comment)), customErrorResponses: \(String(describing: customErrorResponses)), defaultCacheBehavior: \(String(describing: defaultCacheBehavior)), domainName: \(String(describing: domainName)), enabled: \(String(describing: enabled)), httpVersion: \(String(describing: httpVersion)), id: \(String(describing: id)), isIPV6Enabled: \(String(describing: isIPV6Enabled)), lastModifiedTime: \(String(describing: lastModifiedTime)), originGroups: \(String(describing: originGroups)), origins: \(String(describing: origins)), priceClass: \(String(describing: priceClass)), restrictions: \(String(describing: restrictions)), status: \(String(describing: status)), viewerCertificate: \(String(describing: viewerCertificate)), webACLId: \(String(describing: webACLId)))"}
}
