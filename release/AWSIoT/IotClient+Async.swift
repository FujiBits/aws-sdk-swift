// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension IotClient {
    /// Accepts a pending certificate transfer. The default state of the certificate is INACTIVE. To check for pending certificate transfers, call [ListCertificates] to enumerate your certificates. Requires permission to access the [AcceptCertificateTransfer](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func acceptCertificateTransfer(input: AcceptCertificateTransferInput) async throws -> AcceptCertificateTransferOutputResponse
    {
        typealias acceptCertificateTransferContinuation = CheckedContinuation<AcceptCertificateTransferOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acceptCertificateTransferContinuation) in
            acceptCertificateTransfer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a thing to a billing group. Requires permission to access the [AddThingToBillingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func addThingToBillingGroup(input: AddThingToBillingGroupInput) async throws -> AddThingToBillingGroupOutputResponse
    {
        typealias addThingToBillingGroupContinuation = CheckedContinuation<AddThingToBillingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addThingToBillingGroupContinuation) in
            addThingToBillingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a thing to a thing group. Requires permission to access the [AddThingToThingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func addThingToThingGroup(input: AddThingToThingGroupInput) async throws -> AddThingToThingGroupOutputResponse
    {
        typealias addThingToThingGroupContinuation = CheckedContinuation<AddThingToThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addThingToThingGroupContinuation) in
            addThingToThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a group with a continuous job. The following criteria must be met:
    ///
    /// * The job must have been created with the targetSelection field set to "CONTINUOUS".
    ///
    /// * The job status must currently be "IN_PROGRESS".
    ///
    /// * The total number of targets associated with a job must not exceed 100.
    ///
    ///
    /// Requires permission to access the [AssociateTargetsWithJob](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func associateTargetsWithJob(input: AssociateTargetsWithJobInput) async throws -> AssociateTargetsWithJobOutputResponse
    {
        typealias associateTargetsWithJobContinuation = CheckedContinuation<AssociateTargetsWithJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateTargetsWithJobContinuation) in
            associateTargetsWithJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Attaches the specified policy to the specified principal (certificate or other credential). Requires permission to access the [AttachPolicy](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func attachPolicy(input: AttachPolicyInput) async throws -> AttachPolicyOutputResponse
    {
        typealias attachPolicyContinuation = CheckedContinuation<AttachPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachPolicyContinuation) in
            attachPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Attaches the specified policy to the specified principal (certificate or other credential). Note: This action is deprecated. Please use [AttachPolicy] instead. Requires permission to access the [AttachPrincipalPolicy](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    @available(*, deprecated)
    func attachPrincipalPolicy(input: AttachPrincipalPolicyInput) async throws -> AttachPrincipalPolicyOutputResponse
    {
        typealias attachPrincipalPolicyContinuation = CheckedContinuation<AttachPrincipalPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachPrincipalPolicyContinuation) in
            attachPrincipalPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a Device Defender security profile with a thing group or this account. Each thing group or account can have up to five security profiles associated with it. Requires permission to access the [AttachSecurityProfile](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func attachSecurityProfile(input: AttachSecurityProfileInput) async throws -> AttachSecurityProfileOutputResponse
    {
        typealias attachSecurityProfileContinuation = CheckedContinuation<AttachSecurityProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachSecurityProfileContinuation) in
            attachSecurityProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Attaches the specified principal to the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities. Requires permission to access the [AttachThingPrincipal](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func attachThingPrincipal(input: AttachThingPrincipalInput) async throws -> AttachThingPrincipalOutputResponse
    {
        typealias attachThingPrincipalContinuation = CheckedContinuation<AttachThingPrincipalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachThingPrincipalContinuation) in
            attachThingPrincipal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Cancels a mitigation action task that is in progress. If the task is not in progress, an InvalidRequestException occurs. Requires permission to access the [CancelAuditMitigationActionsTask](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func cancelAuditMitigationActionsTask(input: CancelAuditMitigationActionsTaskInput) async throws -> CancelAuditMitigationActionsTaskOutputResponse
    {
        typealias cancelAuditMitigationActionsTaskContinuation = CheckedContinuation<CancelAuditMitigationActionsTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelAuditMitigationActionsTaskContinuation) in
            cancelAuditMitigationActionsTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Cancels an audit that is in progress. The audit can be either scheduled or on demand. If the audit isn't in progress, an "InvalidRequestException" occurs. Requires permission to access the [CancelAuditTask](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func cancelAuditTask(input: CancelAuditTaskInput) async throws -> CancelAuditTaskOutputResponse
    {
        typealias cancelAuditTaskContinuation = CheckedContinuation<CancelAuditTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelAuditTaskContinuation) in
            cancelAuditTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Cancels a pending transfer for the specified certificate. Note Only the transfer source account can use this operation to cancel a transfer. (Transfer destinations can use [RejectCertificateTransfer] instead.) After transfer, IoT returns the certificate to the source account in the INACTIVE state. After the destination account has accepted the transfer, the transfer cannot be cancelled. After a certificate transfer is cancelled, the status of the certificate changes from PENDING_TRANSFER to INACTIVE. Requires permission to access the [CancelCertificateTransfer](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func cancelCertificateTransfer(input: CancelCertificateTransferInput) async throws -> CancelCertificateTransferOutputResponse
    {
        typealias cancelCertificateTransferContinuation = CheckedContinuation<CancelCertificateTransferOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelCertificateTransferContinuation) in
            cancelCertificateTransfer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Cancels a Device Defender ML Detect mitigation action. Requires permission to access the [CancelDetectMitigationActionsTask](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func cancelDetectMitigationActionsTask(input: CancelDetectMitigationActionsTaskInput) async throws -> CancelDetectMitigationActionsTaskOutputResponse
    {
        typealias cancelDetectMitigationActionsTaskContinuation = CheckedContinuation<CancelDetectMitigationActionsTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelDetectMitigationActionsTaskContinuation) in
            cancelDetectMitigationActionsTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Cancels a job. Requires permission to access the [CancelJob](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func cancelJob(input: CancelJobInput) async throws -> CancelJobOutputResponse
    {
        typealias cancelJobContinuation = CheckedContinuation<CancelJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelJobContinuation) in
            cancelJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Cancels the execution of a job for a given thing. Requires permission to access the [CancelJobExecution](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func cancelJobExecution(input: CancelJobExecutionInput) async throws -> CancelJobExecutionOutputResponse
    {
        typealias cancelJobExecutionContinuation = CheckedContinuation<CancelJobExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelJobExecutionContinuation) in
            cancelJobExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Clears the default authorizer. Requires permission to access the [ClearDefaultAuthorizer](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func clearDefaultAuthorizer(input: ClearDefaultAuthorizerInput) async throws -> ClearDefaultAuthorizerOutputResponse
    {
        typealias clearDefaultAuthorizerContinuation = CheckedContinuation<ClearDefaultAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: clearDefaultAuthorizerContinuation) in
            clearDefaultAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Confirms a topic rule destination. When you create a rule requiring a destination, IoT sends a confirmation message to the endpoint or base address you specify. The message includes a token which you pass back when calling ConfirmTopicRuleDestination to confirm that you own or have access to the endpoint. Requires permission to access the [ConfirmTopicRuleDestination](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func confirmTopicRuleDestination(input: ConfirmTopicRuleDestinationInput) async throws -> ConfirmTopicRuleDestinationOutputResponse
    {
        typealias confirmTopicRuleDestinationContinuation = CheckedContinuation<ConfirmTopicRuleDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: confirmTopicRuleDestinationContinuation) in
            confirmTopicRuleDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a Device Defender audit suppression. Requires permission to access the [CreateAuditSuppression](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createAuditSuppression(input: CreateAuditSuppressionInput) async throws -> CreateAuditSuppressionOutputResponse
    {
        typealias createAuditSuppressionContinuation = CheckedContinuation<CreateAuditSuppressionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAuditSuppressionContinuation) in
            createAuditSuppression(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an authorizer. Requires permission to access the [CreateAuthorizer](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createAuthorizer(input: CreateAuthorizerInput) async throws -> CreateAuthorizerOutputResponse
    {
        typealias createAuthorizerContinuation = CheckedContinuation<CreateAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAuthorizerContinuation) in
            createAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a billing group. Requires permission to access the [CreateBillingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createBillingGroup(input: CreateBillingGroupInput) async throws -> CreateBillingGroupOutputResponse
    {
        typealias createBillingGroupContinuation = CheckedContinuation<CreateBillingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBillingGroupContinuation) in
            createBillingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an X.509 certificate using the specified certificate signing request. Note: The CSR must include a public key that is either an RSA key with a length of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384 curves. Note: Reusing the same certificate signing request (CSR) results in a distinct certificate. Requires permission to access the [CreateCertificateFromCsr](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action. You can create multiple certificates in a batch by creating a directory, copying multiple .csr files into that directory, and then specifying that directory on the command line. The following commands show how to create a batch of certificates given a batch of CSRs. Assuming a set of CSRs are located inside of the directory my-csr-directory: On Linux and OS X, the command is: $ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{} This command lists all of the CSRs in my-csr-directory and pipes each CSR file name to the aws iot create-certificate-from-csr Amazon Web Services CLI command to create a certificate for the corresponding CSR. The aws iot create-certificate-from-csr part of the command can also be run in parallel to speed up the certificate creation process: $ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{} On Windows PowerShell, the command to create certificates for all CSRs in my-csr-directory is: > ls -Name my-csr-directory | %{aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/$_} On a Windows command prompt, the command to create certificates for all CSRs in my-csr-directory is: > forfiles /p my-csr-directory /c "cmd /c aws iot create-certificate-from-csr --certificate-signing-request file://@path"
    func createCertificateFromCsr(input: CreateCertificateFromCsrInput) async throws -> CreateCertificateFromCsrOutputResponse
    {
        typealias createCertificateFromCsrContinuation = CheckedContinuation<CreateCertificateFromCsrOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCertificateFromCsrContinuation) in
            createCertificateFromCsr(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Use this API to define a Custom Metric published by your devices to Device Defender. Requires permission to access the [CreateCustomMetric](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createCustomMetric(input: CreateCustomMetricInput) async throws -> CreateCustomMetricOutputResponse
    {
        typealias createCustomMetricContinuation = CheckedContinuation<CreateCustomMetricOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCustomMetricContinuation) in
            createCustomMetric(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a dimension that you can use to limit the scope of a metric used in a security profile for IoT Device Defender. For example, using a TOPIC_FILTER dimension, you can narrow down the scope of the metric only to MQTT topics whose name match the pattern specified in the dimension. Requires permission to access the [CreateDimension](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createDimension(input: CreateDimensionInput) async throws -> CreateDimensionOutputResponse
    {
        typealias createDimensionContinuation = CheckedContinuation<CreateDimensionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDimensionContinuation) in
            createDimension(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a domain configuration. Requires permission to access the [CreateDomainConfiguration](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createDomainConfiguration(input: CreateDomainConfigurationInput) async throws -> CreateDomainConfigurationOutputResponse
    {
        typealias createDomainConfigurationContinuation = CheckedContinuation<CreateDomainConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDomainConfigurationContinuation) in
            createDomainConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a dynamic thing group. Requires permission to access the [CreateDynamicThingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createDynamicThingGroup(input: CreateDynamicThingGroupInput) async throws -> CreateDynamicThingGroupOutputResponse
    {
        typealias createDynamicThingGroupContinuation = CheckedContinuation<CreateDynamicThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDynamicThingGroupContinuation) in
            createDynamicThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a fleet metric. Requires permission to access the [CreateFleetMetric](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createFleetMetric(input: CreateFleetMetricInput) async throws -> CreateFleetMetricOutputResponse
    {
        typealias createFleetMetricContinuation = CheckedContinuation<CreateFleetMetricOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFleetMetricContinuation) in
            createFleetMetric(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a job. Requires permission to access the [CreateJob](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createJob(input: CreateJobInput) async throws -> CreateJobOutputResponse
    {
        typealias createJobContinuation = CheckedContinuation<CreateJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createJobContinuation) in
            createJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a job template. Requires permission to access the [CreateJobTemplate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createJobTemplate(input: CreateJobTemplateInput) async throws -> CreateJobTemplateOutputResponse
    {
        typealias createJobTemplateContinuation = CheckedContinuation<CreateJobTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createJobTemplateContinuation) in
            createJobTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued public key. You can also call CreateKeysAndCertificate over MQTT from a device, for more information, see [Provisioning MQTT API](https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#provision-mqtt-api). Note This is the only time IoT issues the private key for this certificate, so it is important to keep it in a secure location. Requires permission to access the [CreateKeysAndCertificate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createKeysAndCertificate(input: CreateKeysAndCertificateInput) async throws -> CreateKeysAndCertificateOutputResponse
    {
        typealias createKeysAndCertificateContinuation = CheckedContinuation<CreateKeysAndCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createKeysAndCertificateContinuation) in
            createKeysAndCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Defines an action that can be applied to audit findings by using StartAuditMitigationActionsTask. Only certain types of mitigation actions can be applied to specific check names. For more information, see [Mitigation actions](https://docs.aws.amazon.com/iot/latest/developerguide/device-defender-mitigation-actions.html). Each mitigation action can apply only one type of change. Requires permission to access the [CreateMitigationAction](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createMitigationAction(input: CreateMitigationActionInput) async throws -> CreateMitigationActionOutputResponse
    {
        typealias createMitigationActionContinuation = CheckedContinuation<CreateMitigationActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMitigationActionContinuation) in
            createMitigationAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an IoT OTA update on a target group of things or groups. Requires permission to access the [CreateOTAUpdate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createOTAUpdate(input: CreateOTAUpdateInput) async throws -> CreateOTAUpdateOutputResponse
    {
        typealias createOTAUpdateContinuation = CheckedContinuation<CreateOTAUpdateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createOTAUpdateContinuation) in
            createOTAUpdate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an IoT policy. The created policy is the default version for the policy. This operation creates a policy version with a version identifier of 1 and sets 1 as the policy's default version. Requires permission to access the [CreatePolicy](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createPolicy(input: CreatePolicyInput) async throws -> CreatePolicyOutputResponse
    {
        typealias createPolicyContinuation = CheckedContinuation<CreatePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPolicyContinuation) in
            createPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new version of the specified IoT policy. To update a policy, create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must use [DeletePolicyVersion] to delete an existing version before you create a new one. Optionally, you can set the new version as the policy's default version. The default version is the operative version (that is, the version that is in effect for the certificates to which the policy is attached). Requires permission to access the [CreatePolicyVersion](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createPolicyVersion(input: CreatePolicyVersionInput) async throws -> CreatePolicyVersionOutputResponse
    {
        typealias createPolicyVersionContinuation = CheckedContinuation<CreatePolicyVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPolicyVersionContinuation) in
            createPolicyVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a provisioning claim. Requires permission to access the [CreateProvisioningClaim](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createProvisioningClaim(input: CreateProvisioningClaimInput) async throws -> CreateProvisioningClaimOutputResponse
    {
        typealias createProvisioningClaimContinuation = CheckedContinuation<CreateProvisioningClaimOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProvisioningClaimContinuation) in
            createProvisioningClaim(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a fleet provisioning template. Requires permission to access the [CreateProvisioningTemplate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createProvisioningTemplate(input: CreateProvisioningTemplateInput) async throws -> CreateProvisioningTemplateOutputResponse
    {
        typealias createProvisioningTemplateContinuation = CheckedContinuation<CreateProvisioningTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProvisioningTemplateContinuation) in
            createProvisioningTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new version of a fleet provisioning template. Requires permission to access the [CreateProvisioningTemplateVersion](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createProvisioningTemplateVersion(input: CreateProvisioningTemplateVersionInput) async throws -> CreateProvisioningTemplateVersionOutputResponse
    {
        typealias createProvisioningTemplateVersionContinuation = CheckedContinuation<CreateProvisioningTemplateVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProvisioningTemplateVersionContinuation) in
            createProvisioningTemplateVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a role alias. Requires permission to access the [CreateRoleAlias](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createRoleAlias(input: CreateRoleAliasInput) async throws -> CreateRoleAliasOutputResponse
    {
        typealias createRoleAliasContinuation = CheckedContinuation<CreateRoleAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRoleAliasContinuation) in
            createRoleAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a scheduled audit that is run at a specified time interval. Requires permission to access the [CreateScheduledAudit](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createScheduledAudit(input: CreateScheduledAuditInput) async throws -> CreateScheduledAuditOutputResponse
    {
        typealias createScheduledAuditContinuation = CheckedContinuation<CreateScheduledAuditOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createScheduledAuditContinuation) in
            createScheduledAudit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a Device Defender security profile. Requires permission to access the [CreateSecurityProfile](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createSecurityProfile(input: CreateSecurityProfileInput) async throws -> CreateSecurityProfileOutputResponse
    {
        typealias createSecurityProfileContinuation = CheckedContinuation<CreateSecurityProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSecurityProfileContinuation) in
            createSecurityProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a stream for delivering one or more large files in chunks over MQTT. A stream transports data bytes in chunks or blocks packaged as MQTT messages from a source like S3. You can have one or more files associated with a stream. Requires permission to access the [CreateStream](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createStream(input: CreateStreamInput) async throws -> CreateStreamOutputResponse
    {
        typealias createStreamContinuation = CheckedContinuation<CreateStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createStreamContinuation) in
            createStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a thing record in the registry. If this call is made multiple times using the same thing name and configuration, the call will succeed. If this call is made with the same thing name but different configuration a ResourceAlreadyExistsException is thrown. This is a control plane operation. See [Authorization](https://docs.aws.amazon.com/iot/latest/developerguide/iot-authorization.html) for information about authorizing control plane actions. Requires permission to access the [CreateThing](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createThing(input: CreateThingInput) async throws -> CreateThingOutputResponse
    {
        typealias createThingContinuation = CheckedContinuation<CreateThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createThingContinuation) in
            createThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a thing group. This is a control plane operation. See [Authorization](https://docs.aws.amazon.com/iot/latest/developerguide/iot-authorization.html) for information about authorizing control plane actions. Requires permission to access the [CreateThingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createThingGroup(input: CreateThingGroupInput) async throws -> CreateThingGroupOutputResponse
    {
        typealias createThingGroupContinuation = CheckedContinuation<CreateThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createThingGroupContinuation) in
            createThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new thing type. Requires permission to access the [CreateThingType](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createThingType(input: CreateThingTypeInput) async throws -> CreateThingTypeOutputResponse
    {
        typealias createThingTypeContinuation = CheckedContinuation<CreateThingTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createThingTypeContinuation) in
            createThingType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule. Requires permission to access the [CreateTopicRule](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createTopicRule(input: CreateTopicRuleInput) async throws -> CreateTopicRuleOutputResponse
    {
        typealias createTopicRuleContinuation = CheckedContinuation<CreateTopicRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTopicRuleContinuation) in
            createTopicRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a topic rule destination. The destination must be confirmed prior to use. Requires permission to access the [CreateTopicRuleDestination](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func createTopicRuleDestination(input: CreateTopicRuleDestinationInput) async throws -> CreateTopicRuleDestinationOutputResponse
    {
        typealias createTopicRuleDestinationContinuation = CheckedContinuation<CreateTopicRuleDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTopicRuleDestinationContinuation) in
            createTopicRuleDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Restores the default settings for Device Defender audits for this account. Any configuration data you entered is deleted and all audit checks are reset to disabled. Requires permission to access the [DeleteAccountAuditConfiguration](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteAccountAuditConfiguration(input: DeleteAccountAuditConfigurationInput) async throws -> DeleteAccountAuditConfigurationOutputResponse
    {
        typealias deleteAccountAuditConfigurationContinuation = CheckedContinuation<DeleteAccountAuditConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAccountAuditConfigurationContinuation) in
            deleteAccountAuditConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a Device Defender audit suppression. Requires permission to access the [DeleteAuditSuppression](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteAuditSuppression(input: DeleteAuditSuppressionInput) async throws -> DeleteAuditSuppressionOutputResponse
    {
        typealias deleteAuditSuppressionContinuation = CheckedContinuation<DeleteAuditSuppressionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAuditSuppressionContinuation) in
            deleteAuditSuppression(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an authorizer. Requires permission to access the [DeleteAuthorizer](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteAuthorizer(input: DeleteAuthorizerInput) async throws -> DeleteAuthorizerOutputResponse
    {
        typealias deleteAuthorizerContinuation = CheckedContinuation<DeleteAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAuthorizerContinuation) in
            deleteAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the billing group. Requires permission to access the [DeleteBillingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteBillingGroup(input: DeleteBillingGroupInput) async throws -> DeleteBillingGroupOutputResponse
    {
        typealias deleteBillingGroupContinuation = CheckedContinuation<DeleteBillingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBillingGroupContinuation) in
            deleteBillingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a registered CA certificate. Requires permission to access the [DeleteCACertificate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteCACertificate(input: DeleteCACertificateInput) async throws -> DeleteCACertificateOutputResponse
    {
        typealias deleteCACertificateContinuation = CheckedContinuation<DeleteCACertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCACertificateContinuation) in
            deleteCACertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified certificate. A certificate cannot be deleted if it has a policy or IoT thing attached to it or if its status is set to ACTIVE. To delete a certificate, first use the [DetachPolicy] action to detach all policies. Next, use the [UpdateCertificate] action to set the certificate to the INACTIVE status. Requires permission to access the [DeleteCertificate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteCertificate(input: DeleteCertificateInput) async throws -> DeleteCertificateOutputResponse
    {
        typealias deleteCertificateContinuation = CheckedContinuation<DeleteCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCertificateContinuation) in
            deleteCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a Device Defender detect custom metric. Requires permission to access the [DeleteCustomMetric](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action. Before you can delete a custom metric, you must first remove the custom metric from all security profiles it's a part of. The security profile associated with the custom metric can be found using the [ListSecurityProfiles](https://docs.aws.amazon.com/iot/latest/apireference/API_ListSecurityProfiles.html) API with metricName set to your custom metric name.
    func deleteCustomMetric(input: DeleteCustomMetricInput) async throws -> DeleteCustomMetricOutputResponse
    {
        typealias deleteCustomMetricContinuation = CheckedContinuation<DeleteCustomMetricOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCustomMetricContinuation) in
            deleteCustomMetric(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified dimension from your Amazon Web Services accounts. Requires permission to access the [DeleteDimension](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteDimension(input: DeleteDimensionInput) async throws -> DeleteDimensionOutputResponse
    {
        typealias deleteDimensionContinuation = CheckedContinuation<DeleteDimensionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDimensionContinuation) in
            deleteDimension(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified domain configuration. Requires permission to access the [DeleteDomainConfiguration](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteDomainConfiguration(input: DeleteDomainConfigurationInput) async throws -> DeleteDomainConfigurationOutputResponse
    {
        typealias deleteDomainConfigurationContinuation = CheckedContinuation<DeleteDomainConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDomainConfigurationContinuation) in
            deleteDomainConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a dynamic thing group. Requires permission to access the [DeleteDynamicThingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteDynamicThingGroup(input: DeleteDynamicThingGroupInput) async throws -> DeleteDynamicThingGroupOutputResponse
    {
        typealias deleteDynamicThingGroupContinuation = CheckedContinuation<DeleteDynamicThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDynamicThingGroupContinuation) in
            deleteDynamicThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified fleet metric. Returns successfully with no error if the deletion is successful or you specify a fleet metric that doesn't exist. Requires permission to access the [DeleteFleetMetric](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteFleetMetric(input: DeleteFleetMetricInput) async throws -> DeleteFleetMetricOutputResponse
    {
        typealias deleteFleetMetricContinuation = CheckedContinuation<DeleteFleetMetricOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFleetMetricContinuation) in
            deleteFleetMetric(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a job and its related job executions. Deleting a job may take time, depending on the number of job executions created for the job and various other factors. While the job is being deleted, the status of the job will be shown as "DELETION_IN_PROGRESS". Attempting to delete or cancel a job whose status is already "DELETION_IN_PROGRESS" will result in an error. Only 10 jobs may have status "DELETION_IN_PROGRESS" at the same time, or a LimitExceededException will occur. Requires permission to access the [DeleteJob](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteJob(input: DeleteJobInput) async throws -> DeleteJobOutputResponse
    {
        typealias deleteJobContinuation = CheckedContinuation<DeleteJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteJobContinuation) in
            deleteJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a job execution. Requires permission to access the [DeleteJobExecution](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteJobExecution(input: DeleteJobExecutionInput) async throws -> DeleteJobExecutionOutputResponse
    {
        typealias deleteJobExecutionContinuation = CheckedContinuation<DeleteJobExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteJobExecutionContinuation) in
            deleteJobExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified job template.
    func deleteJobTemplate(input: DeleteJobTemplateInput) async throws -> DeleteJobTemplateOutputResponse
    {
        typealias deleteJobTemplateContinuation = CheckedContinuation<DeleteJobTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteJobTemplateContinuation) in
            deleteJobTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a defined mitigation action from your Amazon Web Services accounts. Requires permission to access the [DeleteMitigationAction](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteMitigationAction(input: DeleteMitigationActionInput) async throws -> DeleteMitigationActionOutputResponse
    {
        typealias deleteMitigationActionContinuation = CheckedContinuation<DeleteMitigationActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMitigationActionContinuation) in
            deleteMitigationAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Delete an OTA update. Requires permission to access the [DeleteOTAUpdate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteOTAUpdate(input: DeleteOTAUpdateInput) async throws -> DeleteOTAUpdateOutputResponse
    {
        typealias deleteOTAUpdateContinuation = CheckedContinuation<DeleteOTAUpdateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteOTAUpdateContinuation) in
            deleteOTAUpdate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified policy. A policy cannot be deleted if it has non-default versions or it is attached to any certificate. To delete a policy, use the [DeletePolicyVersion] action to delete all non-default versions of the policy; use the [DetachPolicy] action to detach the policy from any certificate; and then use the DeletePolicy action to delete the policy. When a policy is deleted using DeletePolicy, its default version is deleted with it. Because of the distributed nature of Amazon Web Services, it can take up to five minutes after a policy is detached before it's ready to be deleted. Requires permission to access the [DeletePolicy](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deletePolicy(input: DeletePolicyInput) async throws -> DeletePolicyOutputResponse
    {
        typealias deletePolicyContinuation = CheckedContinuation<DeletePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePolicyContinuation) in
            deletePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified version of the specified policy. You cannot delete the default version of a policy using this action. To delete the default version of a policy, use [DeletePolicy]. To find out which version of a policy is marked as the default version, use ListPolicyVersions. Requires permission to access the [DeletePolicyVersion](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deletePolicyVersion(input: DeletePolicyVersionInput) async throws -> DeletePolicyVersionOutputResponse
    {
        typealias deletePolicyVersionContinuation = CheckedContinuation<DeletePolicyVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePolicyVersionContinuation) in
            deletePolicyVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a fleet provisioning template. Requires permission to access the [DeleteProvisioningTemplate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteProvisioningTemplate(input: DeleteProvisioningTemplateInput) async throws -> DeleteProvisioningTemplateOutputResponse
    {
        typealias deleteProvisioningTemplateContinuation = CheckedContinuation<DeleteProvisioningTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProvisioningTemplateContinuation) in
            deleteProvisioningTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a fleet provisioning template version. Requires permission to access the [DeleteProvisioningTemplateVersion](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteProvisioningTemplateVersion(input: DeleteProvisioningTemplateVersionInput) async throws -> DeleteProvisioningTemplateVersionOutputResponse
    {
        typealias deleteProvisioningTemplateVersionContinuation = CheckedContinuation<DeleteProvisioningTemplateVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProvisioningTemplateVersionContinuation) in
            deleteProvisioningTemplateVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a CA certificate registration code. Requires permission to access the [DeleteRegistrationCode](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteRegistrationCode(input: DeleteRegistrationCodeInput) async throws -> DeleteRegistrationCodeOutputResponse
    {
        typealias deleteRegistrationCodeContinuation = CheckedContinuation<DeleteRegistrationCodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRegistrationCodeContinuation) in
            deleteRegistrationCode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a role alias Requires permission to access the [DeleteRoleAlias](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteRoleAlias(input: DeleteRoleAliasInput) async throws -> DeleteRoleAliasOutputResponse
    {
        typealias deleteRoleAliasContinuation = CheckedContinuation<DeleteRoleAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRoleAliasContinuation) in
            deleteRoleAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a scheduled audit. Requires permission to access the [DeleteScheduledAudit](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteScheduledAudit(input: DeleteScheduledAuditInput) async throws -> DeleteScheduledAuditOutputResponse
    {
        typealias deleteScheduledAuditContinuation = CheckedContinuation<DeleteScheduledAuditOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteScheduledAuditContinuation) in
            deleteScheduledAudit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a Device Defender security profile. Requires permission to access the [DeleteSecurityProfile](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteSecurityProfile(input: DeleteSecurityProfileInput) async throws -> DeleteSecurityProfileOutputResponse
    {
        typealias deleteSecurityProfileContinuation = CheckedContinuation<DeleteSecurityProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSecurityProfileContinuation) in
            deleteSecurityProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a stream. Requires permission to access the [DeleteStream](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteStream(input: DeleteStreamInput) async throws -> DeleteStreamOutputResponse
    {
        typealias deleteStreamContinuation = CheckedContinuation<DeleteStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteStreamContinuation) in
            deleteStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified thing. Returns successfully with no error if the deletion is successful or you specify a thing that doesn't exist. Requires permission to access the [DeleteThing](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteThing(input: DeleteThingInput) async throws -> DeleteThingOutputResponse
    {
        typealias deleteThingContinuation = CheckedContinuation<DeleteThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteThingContinuation) in
            deleteThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a thing group. Requires permission to access the [DeleteThingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteThingGroup(input: DeleteThingGroupInput) async throws -> DeleteThingGroupOutputResponse
    {
        typealias deleteThingGroupContinuation = CheckedContinuation<DeleteThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteThingGroupContinuation) in
            deleteThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified thing type. You cannot delete a thing type if it has things associated with it. To delete a thing type, first mark it as deprecated by calling [DeprecateThingType], then remove any associated things by calling [UpdateThing] to change the thing type on any associated thing, and finally use [DeleteThingType] to delete the thing type. Requires permission to access the [DeleteThingType](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteThingType(input: DeleteThingTypeInput) async throws -> DeleteThingTypeOutputResponse
    {
        typealias deleteThingTypeContinuation = CheckedContinuation<DeleteThingTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteThingTypeContinuation) in
            deleteThingType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the rule. Requires permission to access the [DeleteTopicRule](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteTopicRule(input: DeleteTopicRuleInput) async throws -> DeleteTopicRuleOutputResponse
    {
        typealias deleteTopicRuleContinuation = CheckedContinuation<DeleteTopicRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTopicRuleContinuation) in
            deleteTopicRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a topic rule destination. Requires permission to access the [DeleteTopicRuleDestination](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteTopicRuleDestination(input: DeleteTopicRuleDestinationInput) async throws -> DeleteTopicRuleDestinationOutputResponse
    {
        typealias deleteTopicRuleDestinationContinuation = CheckedContinuation<DeleteTopicRuleDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTopicRuleDestinationContinuation) in
            deleteTopicRuleDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a logging level. Requires permission to access the [DeleteV2LoggingLevel](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deleteV2LoggingLevel(input: DeleteV2LoggingLevelInput) async throws -> DeleteV2LoggingLevelOutputResponse
    {
        typealias deleteV2LoggingLevelContinuation = CheckedContinuation<DeleteV2LoggingLevelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteV2LoggingLevelContinuation) in
            deleteV2LoggingLevel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deprecates a thing type. You can not associate new things with deprecated thing type. Requires permission to access the [DeprecateThingType](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func deprecateThingType(input: DeprecateThingTypeInput) async throws -> DeprecateThingTypeOutputResponse
    {
        typealias deprecateThingTypeContinuation = CheckedContinuation<DeprecateThingTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deprecateThingTypeContinuation) in
            deprecateThingType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled. Requires permission to access the [DescribeAccountAuditConfiguration](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeAccountAuditConfiguration(input: DescribeAccountAuditConfigurationInput) async throws -> DescribeAccountAuditConfigurationOutputResponse
    {
        typealias describeAccountAuditConfigurationContinuation = CheckedContinuation<DescribeAccountAuditConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccountAuditConfigurationContinuation) in
            describeAccountAuditConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a single audit finding. Properties include the reason for noncompliance, the severity of the issue, and the start time when the audit that returned the finding. Requires permission to access the [DescribeAuditFinding](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeAuditFinding(input: DescribeAuditFindingInput) async throws -> DescribeAuditFindingOutputResponse
    {
        typealias describeAuditFindingContinuation = CheckedContinuation<DescribeAuditFindingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAuditFindingContinuation) in
            describeAuditFinding(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about an audit mitigation task that is used to apply mitigation actions to a set of audit findings. Properties include the actions being applied, the audit checks to which they're being applied, the task status, and aggregated task statistics.
    func describeAuditMitigationActionsTask(input: DescribeAuditMitigationActionsTaskInput) async throws -> DescribeAuditMitigationActionsTaskOutputResponse
    {
        typealias describeAuditMitigationActionsTaskContinuation = CheckedContinuation<DescribeAuditMitigationActionsTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAuditMitigationActionsTaskContinuation) in
            describeAuditMitigationActionsTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a Device Defender audit suppression.
    func describeAuditSuppression(input: DescribeAuditSuppressionInput) async throws -> DescribeAuditSuppressionOutputResponse
    {
        typealias describeAuditSuppressionContinuation = CheckedContinuation<DescribeAuditSuppressionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAuditSuppressionContinuation) in
            describeAuditSuppression(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a Device Defender audit. Requires permission to access the [DescribeAuditTask](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeAuditTask(input: DescribeAuditTaskInput) async throws -> DescribeAuditTaskOutputResponse
    {
        typealias describeAuditTaskContinuation = CheckedContinuation<DescribeAuditTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAuditTaskContinuation) in
            describeAuditTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an authorizer. Requires permission to access the [DescribeAuthorizer](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeAuthorizer(input: DescribeAuthorizerInput) async throws -> DescribeAuthorizerOutputResponse
    {
        typealias describeAuthorizerContinuation = CheckedContinuation<DescribeAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAuthorizerContinuation) in
            describeAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a billing group. Requires permission to access the [DescribeBillingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeBillingGroup(input: DescribeBillingGroupInput) async throws -> DescribeBillingGroupOutputResponse
    {
        typealias describeBillingGroupContinuation = CheckedContinuation<DescribeBillingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeBillingGroupContinuation) in
            describeBillingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a registered CA certificate. Requires permission to access the [DescribeCACertificate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeCACertificate(input: DescribeCACertificateInput) async throws -> DescribeCACertificateOutputResponse
    {
        typealias describeCACertificateContinuation = CheckedContinuation<DescribeCACertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCACertificateContinuation) in
            describeCACertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified certificate. Requires permission to access the [DescribeCertificate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeCertificate(input: DescribeCertificateInput) async throws -> DescribeCertificateOutputResponse
    {
        typealias describeCertificateContinuation = CheckedContinuation<DescribeCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCertificateContinuation) in
            describeCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a Device Defender detect custom metric. Requires permission to access the [DescribeCustomMetric](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeCustomMetric(input: DescribeCustomMetricInput) async throws -> DescribeCustomMetricOutputResponse
    {
        typealias describeCustomMetricContinuation = CheckedContinuation<DescribeCustomMetricOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCustomMetricContinuation) in
            describeCustomMetric(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the default authorizer. Requires permission to access the [DescribeDefaultAuthorizer](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeDefaultAuthorizer(input: DescribeDefaultAuthorizerInput) async throws -> DescribeDefaultAuthorizerOutputResponse
    {
        typealias describeDefaultAuthorizerContinuation = CheckedContinuation<DescribeDefaultAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDefaultAuthorizerContinuation) in
            describeDefaultAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a Device Defender ML Detect mitigation action. Requires permission to access the [DescribeDetectMitigationActionsTask](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeDetectMitigationActionsTask(input: DescribeDetectMitigationActionsTaskInput) async throws -> DescribeDetectMitigationActionsTaskOutputResponse
    {
        typealias describeDetectMitigationActionsTaskContinuation = CheckedContinuation<DescribeDetectMitigationActionsTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDetectMitigationActionsTaskContinuation) in
            describeDetectMitigationActionsTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides details about a dimension that is defined in your Amazon Web Services accounts. Requires permission to access the [DescribeDimension](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeDimension(input: DescribeDimensionInput) async throws -> DescribeDimensionOutputResponse
    {
        typealias describeDimensionContinuation = CheckedContinuation<DescribeDimensionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDimensionContinuation) in
            describeDimension(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets summary information about a domain configuration. Requires permission to access the [DescribeDomainConfiguration](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeDomainConfiguration(input: DescribeDomainConfigurationInput) async throws -> DescribeDomainConfigurationOutputResponse
    {
        typealias describeDomainConfigurationContinuation = CheckedContinuation<DescribeDomainConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDomainConfigurationContinuation) in
            describeDomainConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a unique endpoint specific to the Amazon Web Services account making the call. Requires permission to access the [DescribeEndpoint](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeEndpoint(input: DescribeEndpointInput) async throws -> DescribeEndpointOutputResponse
    {
        typealias describeEndpointContinuation = CheckedContinuation<DescribeEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEndpointContinuation) in
            describeEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes event configurations. Requires permission to access the [DescribeEventConfigurations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeEventConfigurations(input: DescribeEventConfigurationsInput) async throws -> DescribeEventConfigurationsOutputResponse
    {
        typealias describeEventConfigurationsContinuation = CheckedContinuation<DescribeEventConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEventConfigurationsContinuation) in
            describeEventConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified fleet metric. Requires permission to access the [DescribeFleetMetric](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeFleetMetric(input: DescribeFleetMetricInput) async throws -> DescribeFleetMetricOutputResponse
    {
        typealias describeFleetMetricContinuation = CheckedContinuation<DescribeFleetMetricOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeFleetMetricContinuation) in
            describeFleetMetric(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a search index. Requires permission to access the [DescribeIndex](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeIndex(input: DescribeIndexInput) async throws -> DescribeIndexOutputResponse
    {
        typealias describeIndexContinuation = CheckedContinuation<DescribeIndexOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeIndexContinuation) in
            describeIndex(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a job. Requires permission to access the [DescribeJob](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeJob(input: DescribeJobInput) async throws -> DescribeJobOutputResponse
    {
        typealias describeJobContinuation = CheckedContinuation<DescribeJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeJobContinuation) in
            describeJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a job execution. Requires permission to access the [DescribeJobExecution](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeJobExecution(input: DescribeJobExecutionInput) async throws -> DescribeJobExecutionOutputResponse
    {
        typealias describeJobExecutionContinuation = CheckedContinuation<DescribeJobExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeJobExecutionContinuation) in
            describeJobExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a job template.
    func describeJobTemplate(input: DescribeJobTemplateInput) async throws -> DescribeJobTemplateOutputResponse
    {
        typealias describeJobTemplateContinuation = CheckedContinuation<DescribeJobTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeJobTemplateContinuation) in
            describeJobTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a mitigation action. Requires permission to access the [DescribeMitigationAction](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeMitigationAction(input: DescribeMitigationActionInput) async throws -> DescribeMitigationActionOutputResponse
    {
        typealias describeMitigationActionContinuation = CheckedContinuation<DescribeMitigationActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMitigationActionContinuation) in
            describeMitigationAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a fleet provisioning template. Requires permission to access the [DescribeProvisioningTemplate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeProvisioningTemplate(input: DescribeProvisioningTemplateInput) async throws -> DescribeProvisioningTemplateOutputResponse
    {
        typealias describeProvisioningTemplateContinuation = CheckedContinuation<DescribeProvisioningTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProvisioningTemplateContinuation) in
            describeProvisioningTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a fleet provisioning template version. Requires permission to access the [DescribeProvisioningTemplateVersion](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeProvisioningTemplateVersion(input: DescribeProvisioningTemplateVersionInput) async throws -> DescribeProvisioningTemplateVersionOutputResponse
    {
        typealias describeProvisioningTemplateVersionContinuation = CheckedContinuation<DescribeProvisioningTemplateVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProvisioningTemplateVersionContinuation) in
            describeProvisioningTemplateVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a role alias. Requires permission to access the [DescribeRoleAlias](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeRoleAlias(input: DescribeRoleAliasInput) async throws -> DescribeRoleAliasOutputResponse
    {
        typealias describeRoleAliasContinuation = CheckedContinuation<DescribeRoleAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRoleAliasContinuation) in
            describeRoleAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a scheduled audit. Requires permission to access the [DescribeScheduledAudit](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeScheduledAudit(input: DescribeScheduledAuditInput) async throws -> DescribeScheduledAuditOutputResponse
    {
        typealias describeScheduledAuditContinuation = CheckedContinuation<DescribeScheduledAuditOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeScheduledAuditContinuation) in
            describeScheduledAudit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a Device Defender security profile. Requires permission to access the [DescribeSecurityProfile](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeSecurityProfile(input: DescribeSecurityProfileInput) async throws -> DescribeSecurityProfileOutputResponse
    {
        typealias describeSecurityProfileContinuation = CheckedContinuation<DescribeSecurityProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSecurityProfileContinuation) in
            describeSecurityProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a stream. Requires permission to access the [DescribeStream](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeStream(input: DescribeStreamInput) async throws -> DescribeStreamOutputResponse
    {
        typealias describeStreamContinuation = CheckedContinuation<DescribeStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStreamContinuation) in
            describeStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified thing. Requires permission to access the [DescribeThing](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeThing(input: DescribeThingInput) async throws -> DescribeThingOutputResponse
    {
        typealias describeThingContinuation = CheckedContinuation<DescribeThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeThingContinuation) in
            describeThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describe a thing group. Requires permission to access the [DescribeThingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeThingGroup(input: DescribeThingGroupInput) async throws -> DescribeThingGroupOutputResponse
    {
        typealias describeThingGroupContinuation = CheckedContinuation<DescribeThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeThingGroupContinuation) in
            describeThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a bulk thing provisioning task. Requires permission to access the [DescribeThingRegistrationTask](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeThingRegistrationTask(input: DescribeThingRegistrationTaskInput) async throws -> DescribeThingRegistrationTaskOutputResponse
    {
        typealias describeThingRegistrationTaskContinuation = CheckedContinuation<DescribeThingRegistrationTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeThingRegistrationTaskContinuation) in
            describeThingRegistrationTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified thing type. Requires permission to access the [DescribeThingType](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func describeThingType(input: DescribeThingTypeInput) async throws -> DescribeThingTypeOutputResponse
    {
        typealias describeThingTypeContinuation = CheckedContinuation<DescribeThingTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeThingTypeContinuation) in
            describeThingType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Detaches a policy from the specified target. Because of the distributed nature of Amazon Web Services, it can take up to five minutes after a policy is detached before it's ready to be deleted. Requires permission to access the [DetachPolicy](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func detachPolicy(input: DetachPolicyInput) async throws -> DetachPolicyOutputResponse
    {
        typealias detachPolicyContinuation = CheckedContinuation<DetachPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachPolicyContinuation) in
            detachPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified policy from the specified certificate. This action is deprecated. Please use [DetachPolicy] instead. Requires permission to access the [DetachPrincipalPolicy](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    @available(*, deprecated)
    func detachPrincipalPolicy(input: DetachPrincipalPolicyInput) async throws -> DetachPrincipalPolicyOutputResponse
    {
        typealias detachPrincipalPolicyContinuation = CheckedContinuation<DetachPrincipalPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachPrincipalPolicyContinuation) in
            detachPrincipalPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a Device Defender security profile from a thing group or from this account. Requires permission to access the [DetachSecurityProfile](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func detachSecurityProfile(input: DetachSecurityProfileInput) async throws -> DetachSecurityProfileOutputResponse
    {
        typealias detachSecurityProfileContinuation = CheckedContinuation<DetachSecurityProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachSecurityProfileContinuation) in
            detachSecurityProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Detaches the specified principal from the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities. This call is asynchronous. It might take several seconds for the detachment to propagate. Requires permission to access the [DetachThingPrincipal](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func detachThingPrincipal(input: DetachThingPrincipalInput) async throws -> DetachThingPrincipalOutputResponse
    {
        typealias detachThingPrincipalContinuation = CheckedContinuation<DetachThingPrincipalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachThingPrincipalContinuation) in
            detachThingPrincipal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables the rule. Requires permission to access the [DisableTopicRule](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func disableTopicRule(input: DisableTopicRuleInput) async throws -> DisableTopicRuleOutputResponse
    {
        typealias disableTopicRuleContinuation = CheckedContinuation<DisableTopicRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableTopicRuleContinuation) in
            disableTopicRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables the rule. Requires permission to access the [EnableTopicRule](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func enableTopicRule(input: EnableTopicRuleInput) async throws -> EnableTopicRuleOutputResponse
    {
        typealias enableTopicRuleContinuation = CheckedContinuation<EnableTopicRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableTopicRuleContinuation) in
            enableTopicRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a Device Defender's ML Detect Security Profile training model's status. Requires permission to access the [GetBehaviorModelTrainingSummaries](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getBehaviorModelTrainingSummaries(input: GetBehaviorModelTrainingSummariesInput) async throws -> GetBehaviorModelTrainingSummariesOutputResponse
    {
        typealias getBehaviorModelTrainingSummariesContinuation = CheckedContinuation<GetBehaviorModelTrainingSummariesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBehaviorModelTrainingSummariesContinuation) in
            getBehaviorModelTrainingSummaries(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Aggregates on indexed data with search queries pertaining to particular fields. Requires permission to access the [GetBucketsAggregation](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getBucketsAggregation(input: GetBucketsAggregationInput) async throws -> GetBucketsAggregationOutputResponse
    {
        typealias getBucketsAggregationContinuation = CheckedContinuation<GetBucketsAggregationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBucketsAggregationContinuation) in
            getBucketsAggregation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the approximate count of unique values that match the query. Requires permission to access the [GetCardinality](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getCardinality(input: GetCardinalityInput) async throws -> GetCardinalityOutputResponse
    {
        typealias getCardinalityContinuation = CheckedContinuation<GetCardinalityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCardinalityContinuation) in
            getCardinality(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of the policies that have an effect on the authorization behavior of the specified device when it connects to the IoT device gateway. Requires permission to access the [GetEffectivePolicies](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getEffectivePolicies(input: GetEffectivePoliciesInput) async throws -> GetEffectivePoliciesOutputResponse
    {
        typealias getEffectivePoliciesContinuation = CheckedContinuation<GetEffectivePoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEffectivePoliciesContinuation) in
            getEffectivePolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the indexing configuration. Requires permission to access the [GetIndexingConfiguration](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getIndexingConfiguration(input: GetIndexingConfigurationInput) async throws -> GetIndexingConfigurationOutputResponse
    {
        typealias getIndexingConfigurationContinuation = CheckedContinuation<GetIndexingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIndexingConfigurationContinuation) in
            getIndexingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a job document. Requires permission to access the [GetJobDocument](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getJobDocument(input: GetJobDocumentInput) async throws -> GetJobDocumentOutputResponse
    {
        typealias getJobDocumentContinuation = CheckedContinuation<GetJobDocumentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getJobDocumentContinuation) in
            getJobDocument(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the logging options. NOTE: use of this command is not recommended. Use GetV2LoggingOptions instead. Requires permission to access the [GetLoggingOptions](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getLoggingOptions(input: GetLoggingOptionsInput) async throws -> GetLoggingOptionsOutputResponse
    {
        typealias getLoggingOptionsContinuation = CheckedContinuation<GetLoggingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLoggingOptionsContinuation) in
            getLoggingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets an OTA update. Requires permission to access the [GetOTAUpdate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getOTAUpdate(input: GetOTAUpdateInput) async throws -> GetOTAUpdateOutputResponse
    {
        typealias getOTAUpdateContinuation = CheckedContinuation<GetOTAUpdateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getOTAUpdateContinuation) in
            getOTAUpdate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Groups the aggregated values that match the query into percentile groupings. The default percentile groupings are: 1,5,25,50,75,95,99, although you can specify your own when you call GetPercentiles. This function returns a value for each percentile group specified (or the default percentile groupings). The percentile group "1" contains the aggregated field value that occurs in approximately one percent of the values that match the query. The percentile group "5" contains the aggregated field value that occurs in approximately five percent of the values that match the query, and so on. The result is an approximation, the more values that match the query, the more accurate the percentile values. Requires permission to access the [GetPercentiles](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getPercentiles(input: GetPercentilesInput) async throws -> GetPercentilesOutputResponse
    {
        typealias getPercentilesContinuation = CheckedContinuation<GetPercentilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPercentilesContinuation) in
            getPercentiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified policy with the policy document of the default version. Requires permission to access the [GetPolicy](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getPolicy(input: GetPolicyInput) async throws -> GetPolicyOutputResponse
    {
        typealias getPolicyContinuation = CheckedContinuation<GetPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPolicyContinuation) in
            getPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified policy version. Requires permission to access the [GetPolicyVersion](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getPolicyVersion(input: GetPolicyVersionInput) async throws -> GetPolicyVersionOutputResponse
    {
        typealias getPolicyVersionContinuation = CheckedContinuation<GetPolicyVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPolicyVersionContinuation) in
            getPolicyVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a registration code used to register a CA certificate with IoT. Requires permission to access the [GetRegistrationCode](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getRegistrationCode(input: GetRegistrationCodeInput) async throws -> GetRegistrationCodeOutputResponse
    {
        typealias getRegistrationCodeContinuation = CheckedContinuation<GetRegistrationCodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRegistrationCodeContinuation) in
            getRegistrationCode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the count, average, sum, minimum, maximum, sum of squares, variance, and standard deviation for the specified aggregated field. If the aggregation field is of type String, only the count statistic is returned. Requires permission to access the [GetStatistics](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getStatistics(input: GetStatisticsInput) async throws -> GetStatisticsOutputResponse
    {
        typealias getStatisticsContinuation = CheckedContinuation<GetStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getStatisticsContinuation) in
            getStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the rule. Requires permission to access the [GetTopicRule](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getTopicRule(input: GetTopicRuleInput) async throws -> GetTopicRuleOutputResponse
    {
        typealias getTopicRuleContinuation = CheckedContinuation<GetTopicRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTopicRuleContinuation) in
            getTopicRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a topic rule destination. Requires permission to access the [GetTopicRuleDestination](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getTopicRuleDestination(input: GetTopicRuleDestinationInput) async throws -> GetTopicRuleDestinationOutputResponse
    {
        typealias getTopicRuleDestinationContinuation = CheckedContinuation<GetTopicRuleDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTopicRuleDestinationContinuation) in
            getTopicRuleDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the fine grained logging options. Requires permission to access the [GetV2LoggingOptions](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func getV2LoggingOptions(input: GetV2LoggingOptionsInput) async throws -> GetV2LoggingOptionsOutputResponse
    {
        typealias getV2LoggingOptionsContinuation = CheckedContinuation<GetV2LoggingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getV2LoggingOptionsContinuation) in
            getV2LoggingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the active violations for a given Device Defender security profile. Requires permission to access the [ListActiveViolations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listActiveViolations(input: ListActiveViolationsInput) async throws -> ListActiveViolationsOutputResponse
    {
        typealias listActiveViolationsContinuation = CheckedContinuation<ListActiveViolationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listActiveViolationsContinuation) in
            listActiveViolations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the policies attached to the specified thing group. Requires permission to access the [ListAttachedPolicies](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listAttachedPolicies(input: ListAttachedPoliciesInput) async throws -> ListAttachedPoliciesOutputResponse
    {
        typealias listAttachedPoliciesContinuation = CheckedContinuation<ListAttachedPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAttachedPoliciesContinuation) in
            listAttachedPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the findings (results) of a Device Defender audit or of the audits performed during a specified time period. (Findings are retained for 90 days.) Requires permission to access the [ListAuditFindings](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listAuditFindings(input: ListAuditFindingsInput) async throws -> ListAuditFindingsOutputResponse
    {
        typealias listAuditFindingsContinuation = CheckedContinuation<ListAuditFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAuditFindingsContinuation) in
            listAuditFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the status of audit mitigation action tasks that were executed. Requires permission to access the [ListAuditMitigationActionsExecutions](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listAuditMitigationActionsExecutions(input: ListAuditMitigationActionsExecutionsInput) async throws -> ListAuditMitigationActionsExecutionsOutputResponse
    {
        typealias listAuditMitigationActionsExecutionsContinuation = CheckedContinuation<ListAuditMitigationActionsExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAuditMitigationActionsExecutionsContinuation) in
            listAuditMitigationActionsExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of audit mitigation action tasks that match the specified filters. Requires permission to access the [ListAuditMitigationActionsTasks](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listAuditMitigationActionsTasks(input: ListAuditMitigationActionsTasksInput) async throws -> ListAuditMitigationActionsTasksOutputResponse
    {
        typealias listAuditMitigationActionsTasksContinuation = CheckedContinuation<ListAuditMitigationActionsTasksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAuditMitigationActionsTasksContinuation) in
            listAuditMitigationActionsTasks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists your Device Defender audit listings. Requires permission to access the [ListAuditSuppressions](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listAuditSuppressions(input: ListAuditSuppressionsInput) async throws -> ListAuditSuppressionsOutputResponse
    {
        typealias listAuditSuppressionsContinuation = CheckedContinuation<ListAuditSuppressionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAuditSuppressionsContinuation) in
            listAuditSuppressions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the Device Defender audits that have been performed during a given time period. Requires permission to access the [ListAuditTasks](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listAuditTasks(input: ListAuditTasksInput) async throws -> ListAuditTasksOutputResponse
    {
        typealias listAuditTasksContinuation = CheckedContinuation<ListAuditTasksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAuditTasksContinuation) in
            listAuditTasks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the authorizers registered in your account. Requires permission to access the [ListAuthorizers](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listAuthorizers(input: ListAuthorizersInput) async throws -> ListAuthorizersOutputResponse
    {
        typealias listAuthorizersContinuation = CheckedContinuation<ListAuthorizersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAuthorizersContinuation) in
            listAuthorizers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the billing groups you have created. Requires permission to access the [ListBillingGroups](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listBillingGroups(input: ListBillingGroupsInput) async throws -> ListBillingGroupsOutputResponse
    {
        typealias listBillingGroupsContinuation = CheckedContinuation<ListBillingGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBillingGroupsContinuation) in
            listBillingGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the CA certificates registered for your Amazon Web Services account. The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results. Requires permission to access the [ListCACertificates](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listCACertificates(input: ListCACertificatesInput) async throws -> ListCACertificatesOutputResponse
    {
        typealias listCACertificatesContinuation = CheckedContinuation<ListCACertificatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCACertificatesContinuation) in
            listCACertificates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the certificates registered in your Amazon Web Services account. The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results. Requires permission to access the [ListCertificates](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listCertificates(input: ListCertificatesInput) async throws -> ListCertificatesOutputResponse
    {
        typealias listCertificatesContinuation = CheckedContinuation<ListCertificatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCertificatesContinuation) in
            listCertificates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List the device certificates signed by the specified CA certificate. Requires permission to access the [ListCertificatesByCA](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listCertificatesByCA(input: ListCertificatesByCAInput) async throws -> ListCertificatesByCAOutputResponse
    {
        typealias listCertificatesByCAContinuation = CheckedContinuation<ListCertificatesByCAOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCertificatesByCAContinuation) in
            listCertificatesByCA(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists your Device Defender detect custom metrics. Requires permission to access the [ListCustomMetrics](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listCustomMetrics(input: ListCustomMetricsInput) async throws -> ListCustomMetricsOutputResponse
    {
        typealias listCustomMetricsContinuation = CheckedContinuation<ListCustomMetricsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCustomMetricsContinuation) in
            listCustomMetrics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists mitigation actions executions for a Device Defender ML Detect Security Profile. Requires permission to access the [ListDetectMitigationActionsExecutions](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listDetectMitigationActionsExecutions(input: ListDetectMitigationActionsExecutionsInput) async throws -> ListDetectMitigationActionsExecutionsOutputResponse
    {
        typealias listDetectMitigationActionsExecutionsContinuation = CheckedContinuation<ListDetectMitigationActionsExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDetectMitigationActionsExecutionsContinuation) in
            listDetectMitigationActionsExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List of Device Defender ML Detect mitigation actions tasks. Requires permission to access the [ListDetectMitigationActionsTasks](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listDetectMitigationActionsTasks(input: ListDetectMitigationActionsTasksInput) async throws -> ListDetectMitigationActionsTasksOutputResponse
    {
        typealias listDetectMitigationActionsTasksContinuation = CheckedContinuation<ListDetectMitigationActionsTasksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDetectMitigationActionsTasksContinuation) in
            listDetectMitigationActionsTasks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List the set of dimensions that are defined for your Amazon Web Services accounts. Requires permission to access the [ListDimensions](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listDimensions(input: ListDimensionsInput) async throws -> ListDimensionsOutputResponse
    {
        typealias listDimensionsContinuation = CheckedContinuation<ListDimensionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDimensionsContinuation) in
            listDimensions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of domain configurations for the user. This list is sorted alphabetically by domain configuration name. Requires permission to access the [ListDomainConfigurations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listDomainConfigurations(input: ListDomainConfigurationsInput) async throws -> ListDomainConfigurationsOutputResponse
    {
        typealias listDomainConfigurationsContinuation = CheckedContinuation<ListDomainConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDomainConfigurationsContinuation) in
            listDomainConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all your fleet metrics. Requires permission to access the [ListFleetMetrics](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listFleetMetrics(input: ListFleetMetricsInput) async throws -> ListFleetMetricsOutputResponse
    {
        typealias listFleetMetricsContinuation = CheckedContinuation<ListFleetMetricsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFleetMetricsContinuation) in
            listFleetMetrics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the search indices. Requires permission to access the [ListIndices](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listIndices(input: ListIndicesInput) async throws -> ListIndicesOutputResponse
    {
        typealias listIndicesContinuation = CheckedContinuation<ListIndicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIndicesContinuation) in
            listIndices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the job executions for a job. Requires permission to access the [ListJobExecutionsForJob](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listJobExecutionsForJob(input: ListJobExecutionsForJobInput) async throws -> ListJobExecutionsForJobOutputResponse
    {
        typealias listJobExecutionsForJobContinuation = CheckedContinuation<ListJobExecutionsForJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJobExecutionsForJobContinuation) in
            listJobExecutionsForJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the job executions for the specified thing. Requires permission to access the [ListJobExecutionsForThing](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listJobExecutionsForThing(input: ListJobExecutionsForThingInput) async throws -> ListJobExecutionsForThingOutputResponse
    {
        typealias listJobExecutionsForThingContinuation = CheckedContinuation<ListJobExecutionsForThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJobExecutionsForThingContinuation) in
            listJobExecutionsForThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of job templates. Requires permission to access the [ListJobTemplates](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listJobTemplates(input: ListJobTemplatesInput) async throws -> ListJobTemplatesOutputResponse
    {
        typealias listJobTemplatesContinuation = CheckedContinuation<ListJobTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJobTemplatesContinuation) in
            listJobTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists jobs. Requires permission to access the [ListJobs](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listJobs(input: ListJobsInput) async throws -> ListJobsOutputResponse
    {
        typealias listJobsContinuation = CheckedContinuation<ListJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJobsContinuation) in
            listJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of all mitigation actions that match the specified filter criteria. Requires permission to access the [ListMitigationActions](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listMitigationActions(input: ListMitigationActionsInput) async throws -> ListMitigationActionsOutputResponse
    {
        typealias listMitigationActionsContinuation = CheckedContinuation<ListMitigationActionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMitigationActionsContinuation) in
            listMitigationActions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists OTA updates. Requires permission to access the [ListOTAUpdates](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listOTAUpdates(input: ListOTAUpdatesInput) async throws -> ListOTAUpdatesOutputResponse
    {
        typealias listOTAUpdatesContinuation = CheckedContinuation<ListOTAUpdatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOTAUpdatesContinuation) in
            listOTAUpdates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists certificates that are being transferred but not yet accepted. Requires permission to access the [ListOutgoingCertificates](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listOutgoingCertificates(input: ListOutgoingCertificatesInput) async throws -> ListOutgoingCertificatesOutputResponse
    {
        typealias listOutgoingCertificatesContinuation = CheckedContinuation<ListOutgoingCertificatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOutgoingCertificatesContinuation) in
            listOutgoingCertificates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists your policies. Requires permission to access the [ListPolicies](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listPolicies(input: ListPoliciesInput) async throws -> ListPoliciesOutputResponse
    {
        typealias listPoliciesContinuation = CheckedContinuation<ListPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPoliciesContinuation) in
            listPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the principals associated with the specified policy. Note: This action is deprecated. Please use [ListTargetsForPolicy] instead. Requires permission to access the [ListPolicyPrincipals](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    @available(*, deprecated)
    func listPolicyPrincipals(input: ListPolicyPrincipalsInput) async throws -> ListPolicyPrincipalsOutputResponse
    {
        typealias listPolicyPrincipalsContinuation = CheckedContinuation<ListPolicyPrincipalsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPolicyPrincipalsContinuation) in
            listPolicyPrincipals(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the versions of the specified policy and identifies the default version. Requires permission to access the [ListPolicyVersions](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listPolicyVersions(input: ListPolicyVersionsInput) async throws -> ListPolicyVersionsOutputResponse
    {
        typealias listPolicyVersionsContinuation = CheckedContinuation<ListPolicyVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPolicyVersionsContinuation) in
            listPolicyVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the policies attached to the specified principal. If you use an Cognito identity, the ID must be in [AmazonCognito Identity format](https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax). Note: This action is deprecated. Please use [ListAttachedPolicies] instead. Requires permission to access the [ListPrincipalPolicies](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    @available(*, deprecated)
    func listPrincipalPolicies(input: ListPrincipalPoliciesInput) async throws -> ListPrincipalPoliciesOutputResponse
    {
        typealias listPrincipalPoliciesContinuation = CheckedContinuation<ListPrincipalPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPrincipalPoliciesContinuation) in
            listPrincipalPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the things associated with the specified principal. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities. Requires permission to access the [ListPrincipalThings](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listPrincipalThings(input: ListPrincipalThingsInput) async throws -> ListPrincipalThingsOutputResponse
    {
        typealias listPrincipalThingsContinuation = CheckedContinuation<ListPrincipalThingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPrincipalThingsContinuation) in
            listPrincipalThings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// A list of fleet provisioning template versions. Requires permission to access the [ListProvisioningTemplateVersions](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listProvisioningTemplateVersions(input: ListProvisioningTemplateVersionsInput) async throws -> ListProvisioningTemplateVersionsOutputResponse
    {
        typealias listProvisioningTemplateVersionsContinuation = CheckedContinuation<ListProvisioningTemplateVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProvisioningTemplateVersionsContinuation) in
            listProvisioningTemplateVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the fleet provisioning templates in your Amazon Web Services account. Requires permission to access the [ListProvisioningTemplates](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listProvisioningTemplates(input: ListProvisioningTemplatesInput) async throws -> ListProvisioningTemplatesOutputResponse
    {
        typealias listProvisioningTemplatesContinuation = CheckedContinuation<ListProvisioningTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProvisioningTemplatesContinuation) in
            listProvisioningTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the role aliases registered in your account. Requires permission to access the [ListRoleAliases](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listRoleAliases(input: ListRoleAliasesInput) async throws -> ListRoleAliasesOutputResponse
    {
        typealias listRoleAliasesContinuation = CheckedContinuation<ListRoleAliasesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRoleAliasesContinuation) in
            listRoleAliases(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all of your scheduled audits. Requires permission to access the [ListScheduledAudits](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listScheduledAudits(input: ListScheduledAuditsInput) async throws -> ListScheduledAuditsOutputResponse
    {
        typealias listScheduledAuditsContinuation = CheckedContinuation<ListScheduledAuditsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listScheduledAuditsContinuation) in
            listScheduledAudits(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the Device Defender security profiles you've created. You can filter security profiles by dimension or custom metric. Requires permission to access the [ListSecurityProfiles](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action. dimensionName and metricName cannot be used in the same request.
    func listSecurityProfiles(input: ListSecurityProfilesInput) async throws -> ListSecurityProfilesOutputResponse
    {
        typealias listSecurityProfilesContinuation = CheckedContinuation<ListSecurityProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSecurityProfilesContinuation) in
            listSecurityProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the Device Defender security profiles attached to a target (thing group). Requires permission to access the [ListSecurityProfilesForTarget](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listSecurityProfilesForTarget(input: ListSecurityProfilesForTargetInput) async throws -> ListSecurityProfilesForTargetOutputResponse
    {
        typealias listSecurityProfilesForTargetContinuation = CheckedContinuation<ListSecurityProfilesForTargetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSecurityProfilesForTargetContinuation) in
            listSecurityProfilesForTarget(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all of the streams in your Amazon Web Services account. Requires permission to access the [ListStreams](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listStreams(input: ListStreamsInput) async throws -> ListStreamsOutputResponse
    {
        typealias listStreamsContinuation = CheckedContinuation<ListStreamsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listStreamsContinuation) in
            listStreams(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags (metadata) you have assigned to the resource. Requires permission to access the [ListTagsForResource](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List targets for the specified policy. Requires permission to access the [ListTargetsForPolicy](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listTargetsForPolicy(input: ListTargetsForPolicyInput) async throws -> ListTargetsForPolicyOutputResponse
    {
        typealias listTargetsForPolicyContinuation = CheckedContinuation<ListTargetsForPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTargetsForPolicyContinuation) in
            listTargetsForPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the targets (thing groups) associated with a given Device Defender security profile. Requires permission to access the [ListTargetsForSecurityProfile](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listTargetsForSecurityProfile(input: ListTargetsForSecurityProfileInput) async throws -> ListTargetsForSecurityProfileOutputResponse
    {
        typealias listTargetsForSecurityProfileContinuation = CheckedContinuation<ListTargetsForSecurityProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTargetsForSecurityProfileContinuation) in
            listTargetsForSecurityProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List the thing groups in your account. Requires permission to access the [ListThingGroups](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listThingGroups(input: ListThingGroupsInput) async throws -> ListThingGroupsOutputResponse
    {
        typealias listThingGroupsContinuation = CheckedContinuation<ListThingGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingGroupsContinuation) in
            listThingGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List the thing groups to which the specified thing belongs. Requires permission to access the [ListThingGroupsForThing](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listThingGroupsForThing(input: ListThingGroupsForThingInput) async throws -> ListThingGroupsForThingOutputResponse
    {
        typealias listThingGroupsForThingContinuation = CheckedContinuation<ListThingGroupsForThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingGroupsForThingContinuation) in
            listThingGroupsForThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the principals associated with the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities. Requires permission to access the [ListThingPrincipals](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listThingPrincipals(input: ListThingPrincipalsInput) async throws -> ListThingPrincipalsOutputResponse
    {
        typealias listThingPrincipalsContinuation = CheckedContinuation<ListThingPrincipalsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingPrincipalsContinuation) in
            listThingPrincipals(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Information about the thing registration tasks.
    func listThingRegistrationTaskReports(input: ListThingRegistrationTaskReportsInput) async throws -> ListThingRegistrationTaskReportsOutputResponse
    {
        typealias listThingRegistrationTaskReportsContinuation = CheckedContinuation<ListThingRegistrationTaskReportsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingRegistrationTaskReportsContinuation) in
            listThingRegistrationTaskReports(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List bulk thing provisioning tasks. Requires permission to access the [ListThingRegistrationTasks](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listThingRegistrationTasks(input: ListThingRegistrationTasksInput) async throws -> ListThingRegistrationTasksOutputResponse
    {
        typealias listThingRegistrationTasksContinuation = CheckedContinuation<ListThingRegistrationTasksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingRegistrationTasksContinuation) in
            listThingRegistrationTasks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the existing thing types. Requires permission to access the [ListThingTypes](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listThingTypes(input: ListThingTypesInput) async throws -> ListThingTypesOutputResponse
    {
        typealias listThingTypesContinuation = CheckedContinuation<ListThingTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingTypesContinuation) in
            listThingTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists your things. Use the attributeName and attributeValue parameters to filter your things. For example, calling ListThings with attributeName=Color and attributeValue=Red retrieves all things in the registry that contain an attribute Color with the value Red. Requires permission to access the [ListThings](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action. You will not be charged for calling this API if an Access denied error is returned. You will also not be charged if no attributes or pagination token was provided in request and no pagination token and no results were returned.
    func listThings(input: ListThingsInput) async throws -> ListThingsOutputResponse
    {
        typealias listThingsContinuation = CheckedContinuation<ListThingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingsContinuation) in
            listThings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the things you have added to the given billing group. Requires permission to access the [ListThingsInBillingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listThingsInBillingGroup(input: ListThingsInBillingGroupInput) async throws -> ListThingsInBillingGroupOutputResponse
    {
        typealias listThingsInBillingGroupContinuation = CheckedContinuation<ListThingsInBillingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingsInBillingGroupContinuation) in
            listThingsInBillingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the things in the specified group. Requires permission to access the [ListThingsInThingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listThingsInThingGroup(input: ListThingsInThingGroupInput) async throws -> ListThingsInThingGroupOutputResponse
    {
        typealias listThingsInThingGroupContinuation = CheckedContinuation<ListThingsInThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThingsInThingGroupContinuation) in
            listThingsInThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all the topic rule destinations in your Amazon Web Services account. Requires permission to access the [ListTopicRuleDestinations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listTopicRuleDestinations(input: ListTopicRuleDestinationsInput) async throws -> ListTopicRuleDestinationsOutputResponse
    {
        typealias listTopicRuleDestinationsContinuation = CheckedContinuation<ListTopicRuleDestinationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTopicRuleDestinationsContinuation) in
            listTopicRuleDestinations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the rules for the specific topic. Requires permission to access the [ListTopicRules](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listTopicRules(input: ListTopicRulesInput) async throws -> ListTopicRulesOutputResponse
    {
        typealias listTopicRulesContinuation = CheckedContinuation<ListTopicRulesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTopicRulesContinuation) in
            listTopicRules(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists logging levels. Requires permission to access the [ListV2LoggingLevels](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listV2LoggingLevels(input: ListV2LoggingLevelsInput) async throws -> ListV2LoggingLevelsOutputResponse
    {
        typealias listV2LoggingLevelsContinuation = CheckedContinuation<ListV2LoggingLevelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listV2LoggingLevelsContinuation) in
            listV2LoggingLevels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the Device Defender security profile violations discovered during the given time period. You can use filters to limit the results to those alerts issued for a particular security profile, behavior, or thing (device). Requires permission to access the [ListViolationEvents](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func listViolationEvents(input: ListViolationEventsInput) async throws -> ListViolationEventsOutputResponse
    {
        typealias listViolationEventsContinuation = CheckedContinuation<ListViolationEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listViolationEventsContinuation) in
            listViolationEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Set a verification state and provide a description of that verification state on a violation (detect alarm).
    func putVerificationStateOnViolation(input: PutVerificationStateOnViolationInput) async throws -> PutVerificationStateOnViolationOutputResponse
    {
        typealias putVerificationStateOnViolationContinuation = CheckedContinuation<PutVerificationStateOnViolationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putVerificationStateOnViolationContinuation) in
            putVerificationStateOnViolation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers a CA certificate with IoT. This CA certificate can then be used to sign device certificates, which can be then registered with IoT. You can register up to 10 CA certificates per Amazon Web Services account that have the same subject field. This enables you to have up to 10 certificate authorities sign your device certificates. If you have more than one CA certificate registered, make sure you pass the CA certificate when you register your device certificates with the [RegisterCertificate] action. Requires permission to access the [RegisterCACertificate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func registerCACertificate(input: RegisterCACertificateInput) async throws -> RegisterCACertificateOutputResponse
    {
        typealias registerCACertificateContinuation = CheckedContinuation<RegisterCACertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerCACertificateContinuation) in
            registerCACertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers a device certificate with IoT. If you have more than one CA certificate that has the same subject field, you must specify the CA certificate that was used to sign the device certificate being registered. Requires permission to access the [RegisterCertificate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func registerCertificate(input: RegisterCertificateInput) async throws -> RegisterCertificateOutputResponse
    {
        typealias registerCertificateContinuation = CheckedContinuation<RegisterCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerCertificateContinuation) in
            registerCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Register a certificate that does not have a certificate authority (CA).
    func registerCertificateWithoutCA(input: RegisterCertificateWithoutCAInput) async throws -> RegisterCertificateWithoutCAOutputResponse
    {
        typealias registerCertificateWithoutCAContinuation = CheckedContinuation<RegisterCertificateWithoutCAOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerCertificateWithoutCAContinuation) in
            registerCertificateWithoutCA(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provisions a thing in the device registry. RegisterThing calls other IoT control plane APIs. These calls might exceed your account level [ IoT Throttling Limits](https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_iot) and cause throttle errors. Please contact [Amazon Web Services Customer Support](https://console.aws.amazon.com/support/home) to raise your throttling limits if necessary. Requires permission to access the [RegisterThing](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func registerThing(input: RegisterThingInput) async throws -> RegisterThingOutputResponse
    {
        typealias registerThingContinuation = CheckedContinuation<RegisterThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerThingContinuation) in
            registerThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Rejects a pending certificate transfer. After IoT rejects a certificate transfer, the certificate status changes from PENDING_TRANSFER to INACTIVE. To check for pending certificate transfers, call [ListCertificates] to enumerate your certificates. This operation can only be called by the transfer destination. After it is called, the certificate will be returned to the source's account in the INACTIVE state. Requires permission to access the [RejectCertificateTransfer](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func rejectCertificateTransfer(input: RejectCertificateTransferInput) async throws -> RejectCertificateTransferOutputResponse
    {
        typealias rejectCertificateTransferContinuation = CheckedContinuation<RejectCertificateTransferOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rejectCertificateTransferContinuation) in
            rejectCertificateTransfer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the given thing from the billing group. Requires permission to access the [RemoveThingFromBillingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func removeThingFromBillingGroup(input: RemoveThingFromBillingGroupInput) async throws -> RemoveThingFromBillingGroupOutputResponse
    {
        typealias removeThingFromBillingGroupContinuation = CheckedContinuation<RemoveThingFromBillingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeThingFromBillingGroupContinuation) in
            removeThingFromBillingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Remove the specified thing from the specified group. You must specify either a thingGroupArn or a thingGroupName to identify the thing group and either a thingArn or a thingName to identify the thing to remove from the thing group. Requires permission to access the [RemoveThingFromThingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func removeThingFromThingGroup(input: RemoveThingFromThingGroupInput) async throws -> RemoveThingFromThingGroupOutputResponse
    {
        typealias removeThingFromThingGroupContinuation = CheckedContinuation<RemoveThingFromThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeThingFromThingGroupContinuation) in
            removeThingFromThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Replaces the rule. You must specify all parameters for the new rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule. Requires permission to access the [ReplaceTopicRule](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func replaceTopicRule(input: ReplaceTopicRuleInput) async throws -> ReplaceTopicRuleOutputResponse
    {
        typealias replaceTopicRuleContinuation = CheckedContinuation<ReplaceTopicRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: replaceTopicRuleContinuation) in
            replaceTopicRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// The query search index. Requires permission to access the [SearchIndex](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func searchIndex(input: SearchIndexInput) async throws -> SearchIndexOutputResponse
    {
        typealias searchIndexContinuation = CheckedContinuation<SearchIndexOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchIndexContinuation) in
            searchIndex(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the default authorizer. This will be used if a websocket connection is made without specifying an authorizer. Requires permission to access the [SetDefaultAuthorizer](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func setDefaultAuthorizer(input: SetDefaultAuthorizerInput) async throws -> SetDefaultAuthorizerOutputResponse
    {
        typealias setDefaultAuthorizerContinuation = CheckedContinuation<SetDefaultAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setDefaultAuthorizerContinuation) in
            setDefaultAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the specified version of the specified policy as the policy's default (operative) version. This action affects all certificates to which the policy is attached. To list the principals the policy is attached to, use the [ListPrincipalPolicies] action. Requires permission to access the [SetDefaultPolicyVersion](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func setDefaultPolicyVersion(input: SetDefaultPolicyVersionInput) async throws -> SetDefaultPolicyVersionOutputResponse
    {
        typealias setDefaultPolicyVersionContinuation = CheckedContinuation<SetDefaultPolicyVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setDefaultPolicyVersionContinuation) in
            setDefaultPolicyVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the logging options. NOTE: use of this command is not recommended. Use SetV2LoggingOptions instead. Requires permission to access the [SetLoggingOptions](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func setLoggingOptions(input: SetLoggingOptionsInput) async throws -> SetLoggingOptionsOutputResponse
    {
        typealias setLoggingOptionsContinuation = CheckedContinuation<SetLoggingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setLoggingOptionsContinuation) in
            setLoggingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the logging level. Requires permission to access the [SetV2LoggingLevel](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func setV2LoggingLevel(input: SetV2LoggingLevelInput) async throws -> SetV2LoggingLevelOutputResponse
    {
        typealias setV2LoggingLevelContinuation = CheckedContinuation<SetV2LoggingLevelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setV2LoggingLevelContinuation) in
            setV2LoggingLevel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the logging options for the V2 logging service. Requires permission to access the [SetV2LoggingOptions](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func setV2LoggingOptions(input: SetV2LoggingOptionsInput) async throws -> SetV2LoggingOptionsOutputResponse
    {
        typealias setV2LoggingOptionsContinuation = CheckedContinuation<SetV2LoggingOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setV2LoggingOptionsContinuation) in
            setV2LoggingOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts a task that applies a set of mitigation actions to the specified target. Requires permission to access the [StartAuditMitigationActionsTask](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func startAuditMitigationActionsTask(input: StartAuditMitigationActionsTaskInput) async throws -> StartAuditMitigationActionsTaskOutputResponse
    {
        typealias startAuditMitigationActionsTaskContinuation = CheckedContinuation<StartAuditMitigationActionsTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startAuditMitigationActionsTaskContinuation) in
            startAuditMitigationActionsTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts a Device Defender ML Detect mitigation actions task. Requires permission to access the [StartDetectMitigationActionsTask](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func startDetectMitigationActionsTask(input: StartDetectMitigationActionsTaskInput) async throws -> StartDetectMitigationActionsTaskOutputResponse
    {
        typealias startDetectMitigationActionsTaskContinuation = CheckedContinuation<StartDetectMitigationActionsTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startDetectMitigationActionsTaskContinuation) in
            startDetectMitigationActionsTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an on-demand Device Defender audit. Requires permission to access the [StartOnDemandAuditTask](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func startOnDemandAuditTask(input: StartOnDemandAuditTaskInput) async throws -> StartOnDemandAuditTaskOutputResponse
    {
        typealias startOnDemandAuditTaskContinuation = CheckedContinuation<StartOnDemandAuditTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startOnDemandAuditTaskContinuation) in
            startOnDemandAuditTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a bulk thing provisioning task. Requires permission to access the [StartThingRegistrationTask](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func startThingRegistrationTask(input: StartThingRegistrationTaskInput) async throws -> StartThingRegistrationTaskOutputResponse
    {
        typealias startThingRegistrationTaskContinuation = CheckedContinuation<StartThingRegistrationTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startThingRegistrationTaskContinuation) in
            startThingRegistrationTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Cancels a bulk thing provisioning task. Requires permission to access the [StopThingRegistrationTask](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func stopThingRegistrationTask(input: StopThingRegistrationTaskInput) async throws -> StopThingRegistrationTaskOutputResponse
    {
        typealias stopThingRegistrationTaskContinuation = CheckedContinuation<StopThingRegistrationTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopThingRegistrationTaskContinuation) in
            stopThingRegistrationTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource. Requires permission to access the [TagResource](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Tests if a specified principal is authorized to perform an IoT action on a specified resource. Use this to test and debug the authorization behavior of devices that connect to the IoT device gateway. Requires permission to access the [TestAuthorization](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func testAuthorization(input: TestAuthorizationInput) async throws -> TestAuthorizationOutputResponse
    {
        typealias testAuthorizationContinuation = CheckedContinuation<TestAuthorizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testAuthorizationContinuation) in
            testAuthorization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Tests a custom authorization behavior by invoking a specified custom authorizer. Use this to test and debug the custom authorization behavior of devices that connect to the IoT device gateway. Requires permission to access the [TestInvokeAuthorizer](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func testInvokeAuthorizer(input: TestInvokeAuthorizerInput) async throws -> TestInvokeAuthorizerOutputResponse
    {
        typealias testInvokeAuthorizerContinuation = CheckedContinuation<TestInvokeAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testInvokeAuthorizerContinuation) in
            testInvokeAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Transfers the specified certificate to the specified Amazon Web Services account. Requires permission to access the [TransferCertificate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action. You can cancel the transfer until it is acknowledged by the recipient. No notification is sent to the transfer destination's account. It is up to the caller to notify the transfer target. The certificate being transferred must not be in the ACTIVE state. You can use the [UpdateCertificate] action to deactivate it. The certificate must not have any policies attached to it. You can use the [DetachPolicy] action to detach them.
    func transferCertificate(input: TransferCertificateInput) async throws -> TransferCertificateOutputResponse
    {
        typealias transferCertificateContinuation = CheckedContinuation<TransferCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: transferCertificateContinuation) in
            transferCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the given tags (metadata) from the resource. Requires permission to access the [UntagResource](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Configures or reconfigures the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled. Requires permission to access the [UpdateAccountAuditConfiguration](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateAccountAuditConfiguration(input: UpdateAccountAuditConfigurationInput) async throws -> UpdateAccountAuditConfigurationOutputResponse
    {
        typealias updateAccountAuditConfigurationContinuation = CheckedContinuation<UpdateAccountAuditConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAccountAuditConfigurationContinuation) in
            updateAccountAuditConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a Device Defender audit suppression.
    func updateAuditSuppression(input: UpdateAuditSuppressionInput) async throws -> UpdateAuditSuppressionOutputResponse
    {
        typealias updateAuditSuppressionContinuation = CheckedContinuation<UpdateAuditSuppressionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAuditSuppressionContinuation) in
            updateAuditSuppression(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an authorizer. Requires permission to access the [UpdateAuthorizer](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateAuthorizer(input: UpdateAuthorizerInput) async throws -> UpdateAuthorizerOutputResponse
    {
        typealias updateAuthorizerContinuation = CheckedContinuation<UpdateAuthorizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAuthorizerContinuation) in
            updateAuthorizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates information about the billing group. Requires permission to access the [UpdateBillingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateBillingGroup(input: UpdateBillingGroupInput) async throws -> UpdateBillingGroupOutputResponse
    {
        typealias updateBillingGroupContinuation = CheckedContinuation<UpdateBillingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBillingGroupContinuation) in
            updateBillingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a registered CA certificate. Requires permission to access the [UpdateCACertificate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateCACertificate(input: UpdateCACertificateInput) async throws -> UpdateCACertificateOutputResponse
    {
        typealias updateCACertificateContinuation = CheckedContinuation<UpdateCACertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateCACertificateContinuation) in
            updateCACertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the status of the specified certificate. This operation is idempotent. Requires permission to access the [UpdateCertificate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action. Certificates must be in the ACTIVE state to authenticate devices that use a certificate to connect to IoT. Within a few minutes of updating a certificate from the ACTIVE state to any other state, IoT disconnects all devices that used that certificate to connect. Devices cannot use a certificate that is not in the ACTIVE state to reconnect.
    func updateCertificate(input: UpdateCertificateInput) async throws -> UpdateCertificateOutputResponse
    {
        typealias updateCertificateContinuation = CheckedContinuation<UpdateCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateCertificateContinuation) in
            updateCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a Device Defender detect custom metric. Requires permission to access the [UpdateCustomMetric](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateCustomMetric(input: UpdateCustomMetricInput) async throws -> UpdateCustomMetricOutputResponse
    {
        typealias updateCustomMetricContinuation = CheckedContinuation<UpdateCustomMetricOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateCustomMetricContinuation) in
            updateCustomMetric(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the definition for a dimension. You cannot change the type of a dimension after it is created (you can delete it and recreate it). Requires permission to access the [UpdateDimension](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateDimension(input: UpdateDimensionInput) async throws -> UpdateDimensionOutputResponse
    {
        typealias updateDimensionContinuation = CheckedContinuation<UpdateDimensionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDimensionContinuation) in
            updateDimension(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates values stored in the domain configuration. Domain configurations for default endpoints can't be updated. Requires permission to access the [UpdateDomainConfiguration](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateDomainConfiguration(input: UpdateDomainConfigurationInput) async throws -> UpdateDomainConfigurationOutputResponse
    {
        typealias updateDomainConfigurationContinuation = CheckedContinuation<UpdateDomainConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDomainConfigurationContinuation) in
            updateDomainConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a dynamic thing group. Requires permission to access the [UpdateDynamicThingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateDynamicThingGroup(input: UpdateDynamicThingGroupInput) async throws -> UpdateDynamicThingGroupOutputResponse
    {
        typealias updateDynamicThingGroupContinuation = CheckedContinuation<UpdateDynamicThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDynamicThingGroupContinuation) in
            updateDynamicThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the event configurations. Requires permission to access the [UpdateEventConfigurations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateEventConfigurations(input: UpdateEventConfigurationsInput) async throws -> UpdateEventConfigurationsOutputResponse
    {
        typealias updateEventConfigurationsContinuation = CheckedContinuation<UpdateEventConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEventConfigurationsContinuation) in
            updateEventConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the data for a fleet metric. Requires permission to access the [UpdateFleetMetric](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateFleetMetric(input: UpdateFleetMetricInput) async throws -> UpdateFleetMetricOutputResponse
    {
        typealias updateFleetMetricContinuation = CheckedContinuation<UpdateFleetMetricOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFleetMetricContinuation) in
            updateFleetMetric(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the search configuration. Requires permission to access the [UpdateIndexingConfiguration](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateIndexingConfiguration(input: UpdateIndexingConfigurationInput) async throws -> UpdateIndexingConfigurationOutputResponse
    {
        typealias updateIndexingConfigurationContinuation = CheckedContinuation<UpdateIndexingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateIndexingConfigurationContinuation) in
            updateIndexingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates supported fields of the specified job. Requires permission to access the [UpdateJob](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateJob(input: UpdateJobInput) async throws -> UpdateJobOutputResponse
    {
        typealias updateJobContinuation = CheckedContinuation<UpdateJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateJobContinuation) in
            updateJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the definition for the specified mitigation action. Requires permission to access the [UpdateMitigationAction](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateMitigationAction(input: UpdateMitigationActionInput) async throws -> UpdateMitigationActionOutputResponse
    {
        typealias updateMitigationActionContinuation = CheckedContinuation<UpdateMitigationActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMitigationActionContinuation) in
            updateMitigationAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a fleet provisioning template. Requires permission to access the [UpdateProvisioningTemplate](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateProvisioningTemplate(input: UpdateProvisioningTemplateInput) async throws -> UpdateProvisioningTemplateOutputResponse
    {
        typealias updateProvisioningTemplateContinuation = CheckedContinuation<UpdateProvisioningTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProvisioningTemplateContinuation) in
            updateProvisioningTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a role alias. Requires permission to access the [UpdateRoleAlias](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateRoleAlias(input: UpdateRoleAliasInput) async throws -> UpdateRoleAliasOutputResponse
    {
        typealias updateRoleAliasContinuation = CheckedContinuation<UpdateRoleAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRoleAliasContinuation) in
            updateRoleAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a scheduled audit, including which checks are performed and how often the audit takes place. Requires permission to access the [UpdateScheduledAudit](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateScheduledAudit(input: UpdateScheduledAuditInput) async throws -> UpdateScheduledAuditOutputResponse
    {
        typealias updateScheduledAuditContinuation = CheckedContinuation<UpdateScheduledAuditOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateScheduledAuditContinuation) in
            updateScheduledAudit(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a Device Defender security profile. Requires permission to access the [UpdateSecurityProfile](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateSecurityProfile(input: UpdateSecurityProfileInput) async throws -> UpdateSecurityProfileOutputResponse
    {
        typealias updateSecurityProfileContinuation = CheckedContinuation<UpdateSecurityProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSecurityProfileContinuation) in
            updateSecurityProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing stream. The stream version will be incremented by one. Requires permission to access the [UpdateStream](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateStream(input: UpdateStreamInput) async throws -> UpdateStreamOutputResponse
    {
        typealias updateStreamContinuation = CheckedContinuation<UpdateStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateStreamContinuation) in
            updateStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the data for a thing. Requires permission to access the [UpdateThing](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateThing(input: UpdateThingInput) async throws -> UpdateThingOutputResponse
    {
        typealias updateThingContinuation = CheckedContinuation<UpdateThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateThingContinuation) in
            updateThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update a thing group. Requires permission to access the [UpdateThingGroup](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateThingGroup(input: UpdateThingGroupInput) async throws -> UpdateThingGroupOutputResponse
    {
        typealias updateThingGroupContinuation = CheckedContinuation<UpdateThingGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateThingGroupContinuation) in
            updateThingGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the groups to which the thing belongs. Requires permission to access the [UpdateThingGroupsForThing](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateThingGroupsForThing(input: UpdateThingGroupsForThingInput) async throws -> UpdateThingGroupsForThingOutputResponse
    {
        typealias updateThingGroupsForThingContinuation = CheckedContinuation<UpdateThingGroupsForThingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateThingGroupsForThingContinuation) in
            updateThingGroupsForThing(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a topic rule destination. You use this to change the status, endpoint URL, or confirmation URL of the destination. Requires permission to access the [UpdateTopicRuleDestination](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func updateTopicRuleDestination(input: UpdateTopicRuleDestinationInput) async throws -> UpdateTopicRuleDestinationOutputResponse
    {
        typealias updateTopicRuleDestinationContinuation = CheckedContinuation<UpdateTopicRuleDestinationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTopicRuleDestinationContinuation) in
            updateTopicRuleDestination(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Validates a Device Defender security profile behaviors specification. Requires permission to access the [ValidateSecurityProfileBehaviors](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions) action.
    func validateSecurityProfileBehaviors(input: ValidateSecurityProfileBehaviorsInput) async throws -> ValidateSecurityProfileBehaviorsOutputResponse
    {
        typealias validateSecurityProfileBehaviorsContinuation = CheckedContinuation<ValidateSecurityProfileBehaviorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: validateSecurityProfileBehaviorsContinuation) in
            validateSecurityProfileBehaviors(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
