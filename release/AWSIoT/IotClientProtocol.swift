// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname>AWS IoT</fullname>
///         AWS IoT provides secure, bi-directional communication between Internet-connected
///             devices (such as sensors, actuators, embedded devices, or smart appliances) and the AWS
///             cloud. You can discover your custom IoT-Data endpoint to communicate with, configure
///             rules for data processing and integration with other services, organize resources
///             associated with each device (Registry), configure logging, and create and manage
///             policies and credentials to authenticate devices.
///         The service endpoints that expose this API are listed in
///             <a href="https://docs.aws.amazon.com/general/latest/gr/iot-core.html">AWS IoT Core Endpoints and Quotas.
///             You must use the endpoint for the region that has the resources you want to access.
///         The service name used by <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">AWS
///                 Signature Version 4 to sign the request is:
///             execute-api.
///         For more information about how AWS IoT works, see the <a href="https://docs.aws.amazon.com/iot/latest/developerguide/aws-iot-how-it-works.html">Developer
///             Guide.
///         For information about how to use the credentials provider for AWS IoT, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/authorizing-direct-aws.html">Authorizing Direct Calls to AWS Services.
public protocol IotClientProtocol {
    /// Accepts a pending certificate transfer. The default state of the certificate is
    ///          INACTIVE.
    ///          To check for pending certificate transfers, call ListCertificates
    ///          to enumerate your certificates.
    func acceptCertificateTransfer(input: AcceptCertificateTransferInput, completion: @escaping (ClientRuntime.SdkResult<AcceptCertificateTransferOutputResponse, AcceptCertificateTransferOutputError>) -> Void)
    /// Adds a thing to a billing group.
    func addThingToBillingGroup(input: AddThingToBillingGroupInput, completion: @escaping (ClientRuntime.SdkResult<AddThingToBillingGroupOutputResponse, AddThingToBillingGroupOutputError>) -> Void)
    /// Adds a thing to a thing group.
    func addThingToThingGroup(input: AddThingToThingGroupInput, completion: @escaping (ClientRuntime.SdkResult<AddThingToThingGroupOutputResponse, AddThingToThingGroupOutputError>) -> Void)
    /// Associates a group with a continuous job. The following criteria must be met:
    ///
    ///
    ///                 The job must have been created with the targetSelection field set to
    ///                     "CONTINUOUS".
    ///
    ///
    ///                 The job status must currently be "IN_PROGRESS".
    ///
    ///
    ///                 The total number of targets associated with a job must not exceed 100.
    ///
    ///
    func associateTargetsWithJob(input: AssociateTargetsWithJobInput, completion: @escaping (ClientRuntime.SdkResult<AssociateTargetsWithJobOutputResponse, AssociateTargetsWithJobOutputError>) -> Void)
    /// Attaches the specified policy to the specified principal (certificate or other
    ///          credential).
    func attachPolicy(input: AttachPolicyInput, completion: @escaping (ClientRuntime.SdkResult<AttachPolicyOutputResponse, AttachPolicyOutputError>) -> Void)
    /// Attaches the specified policy to the specified principal (certificate or other
    ///          credential).
    ///
    ///             Note: This API is deprecated. Please use AttachPolicy instead.
    @available(*, deprecated)
    func attachPrincipalPolicy(input: AttachPrincipalPolicyInput, completion: @escaping (ClientRuntime.SdkResult<AttachPrincipalPolicyOutputResponse, AttachPrincipalPolicyOutputError>) -> Void)
    /// Associates a Device Defender security profile with a thing group or this account. Each
    ///         thing group or account can have up to five security profiles associated with it.
    func attachSecurityProfile(input: AttachSecurityProfileInput, completion: @escaping (ClientRuntime.SdkResult<AttachSecurityProfileOutputResponse, AttachSecurityProfileOutputError>) -> Void)
    /// Attaches the specified principal to the specified thing. A principal can be X.509
    /// 			certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
    /// 			identities.
    func attachThingPrincipal(input: AttachThingPrincipalInput, completion: @escaping (ClientRuntime.SdkResult<AttachThingPrincipalOutputResponse, AttachThingPrincipalOutputError>) -> Void)
    /// Cancels a mitigation action task that is in progress. If the task
    ///       is not
    ///       in progress, an InvalidRequestException occurs.
    func cancelAuditMitigationActionsTask(input: CancelAuditMitigationActionsTaskInput, completion: @escaping (ClientRuntime.SdkResult<CancelAuditMitigationActionsTaskOutputResponse, CancelAuditMitigationActionsTaskOutputError>) -> Void)
    /// Cancels an audit that is in progress. The audit can be either scheduled or on demand. If the audit isn't in progress, an "InvalidRequestException" occurs.
    func cancelAuditTask(input: CancelAuditTaskInput, completion: @escaping (ClientRuntime.SdkResult<CancelAuditTaskOutputResponse, CancelAuditTaskOutputError>) -> Void)
    /// Cancels a pending transfer for the specified certificate.
    ///
    ///             Note Only the transfer source account can use this
    ///          operation to cancel a transfer. (Transfer destinations can use RejectCertificateTransfer instead.) After transfer, AWS IoT returns the
    ///          certificate to the source account in the INACTIVE state. After the destination account has
    ///          accepted the transfer, the transfer cannot be cancelled.
    ///          After a certificate transfer is cancelled, the status of the certificate changes from
    ///          PENDING_TRANSFER to INACTIVE.
    func cancelCertificateTransfer(input: CancelCertificateTransferInput, completion: @escaping (ClientRuntime.SdkResult<CancelCertificateTransferOutputResponse, CancelCertificateTransferOutputError>) -> Void)
    ///
    ///         Cancels a Device Defender ML Detect mitigation action.
    ///
    func cancelDetectMitigationActionsTask(input: CancelDetectMitigationActionsTaskInput, completion: @escaping (ClientRuntime.SdkResult<CancelDetectMitigationActionsTaskOutputResponse, CancelDetectMitigationActionsTaskOutputError>) -> Void)
    /// Cancels a job.
    func cancelJob(input: CancelJobInput, completion: @escaping (ClientRuntime.SdkResult<CancelJobOutputResponse, CancelJobOutputError>) -> Void)
    /// Cancels the execution of a job for a given thing.
    func cancelJobExecution(input: CancelJobExecutionInput, completion: @escaping (ClientRuntime.SdkResult<CancelJobExecutionOutputResponse, CancelJobExecutionOutputError>) -> Void)
    /// Clears the default authorizer.
    func clearDefaultAuthorizer(input: ClearDefaultAuthorizerInput, completion: @escaping (ClientRuntime.SdkResult<ClearDefaultAuthorizerOutputResponse, ClearDefaultAuthorizerOutputError>) -> Void)
    /// Confirms a topic rule destination. When you create a rule requiring a destination, AWS
    ///          IoT sends a confirmation message to the endpoint or base address you specify. The message
    ///          includes a token which you pass back when calling ConfirmTopicRuleDestination
    ///          to confirm that you own or have access to the endpoint.
    func confirmTopicRuleDestination(input: ConfirmTopicRuleDestinationInput, completion: @escaping (ClientRuntime.SdkResult<ConfirmTopicRuleDestinationOutputResponse, ConfirmTopicRuleDestinationOutputError>) -> Void)
    ///
    ///       Creates a Device Defender audit suppression.
    ///
    func createAuditSuppression(input: CreateAuditSuppressionInput, completion: @escaping (ClientRuntime.SdkResult<CreateAuditSuppressionOutputResponse, CreateAuditSuppressionOutputError>) -> Void)
    /// Creates an authorizer.
    func createAuthorizer(input: CreateAuthorizerInput, completion: @escaping (ClientRuntime.SdkResult<CreateAuthorizerOutputResponse, CreateAuthorizerOutputError>) -> Void)
    /// Creates a billing group.
    func createBillingGroup(input: CreateBillingGroupInput, completion: @escaping (ClientRuntime.SdkResult<CreateBillingGroupOutputResponse, CreateBillingGroupOutputError>) -> Void)
    /// Creates an X.509 certificate using the specified certificate signing
    ///          request.
    ///
    ///             Note: The CSR must include a public key that is either an
    ///          RSA key with a length of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384
    ///          curves.
    ///
    ///             Note: Reusing the same certificate signing request (CSR)
    ///          results in a distinct certificate.
    ///          You can create multiple certificates in a batch by creating a directory, copying
    ///          multiple .csr files into that directory, and then specifying that directory on the command
    ///          line. The following commands show how to create a batch of certificates given a batch of
    ///          CSRs.
    ///          Assuming a set of CSRs are located inside of the directory
    ///          my-csr-directory:
    ///
    ///          On Linux and OS X, the command is:
    ///
    ///          $ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr
    ///          --certificate-signing-request file://my-csr-directory/{}
    ///          This command lists all of the CSRs in my-csr-directory and pipes each CSR file name
    ///          to the aws iot create-certificate-from-csr AWS CLI command to create a certificate for the
    ///          corresponding CSR.
    ///          The aws iot create-certificate-from-csr part of the command can also be run in
    ///          parallel to speed up the certificate creation process:
    ///          $ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr
    ///          --certificate-signing-request file://my-csr-directory/{}
    ///          On Windows PowerShell, the command to create certificates for all CSRs in
    ///          my-csr-directory is:
    ///          > ls -Name my-csr-directory | %{aws iot create-certificate-from-csr
    ///          --certificate-signing-request file://my-csr-directory/$_}
    ///          On a Windows command prompt, the command to create certificates for all CSRs in
    ///          my-csr-directory is:
    ///          > forfiles /p my-csr-directory /c "cmd /c aws iot create-certificate-from-csr
    ///          --certificate-signing-request file://@path"
    func createCertificateFromCsr(input: CreateCertificateFromCsrInput, completion: @escaping (ClientRuntime.SdkResult<CreateCertificateFromCsrOutputResponse, CreateCertificateFromCsrOutputError>) -> Void)
    ///  Use this API to define a
    ///       Custom
    ///       Metric
    ///       published by your devices to Device Defender.
    func createCustomMetric(input: CreateCustomMetricInput, completion: @escaping (ClientRuntime.SdkResult<CreateCustomMetricOutputResponse, CreateCustomMetricOutputError>) -> Void)
    /// Create a dimension that you can use to limit the scope of a metric used in a security profile for AWS IoT Device Defender. For example, using a TOPIC_FILTER dimension, you can narrow down the scope of the metric only to MQTT topics whose name match the pattern specified in the dimension.
    func createDimension(input: CreateDimensionInput, completion: @escaping (ClientRuntime.SdkResult<CreateDimensionOutputResponse, CreateDimensionOutputError>) -> Void)
    /// Creates a domain configuration.
    func createDomainConfiguration(input: CreateDomainConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<CreateDomainConfigurationOutputResponse, CreateDomainConfigurationOutputError>) -> Void)
    /// Creates a dynamic thing group.
    func createDynamicThingGroup(input: CreateDynamicThingGroupInput, completion: @escaping (ClientRuntime.SdkResult<CreateDynamicThingGroupOutputResponse, CreateDynamicThingGroupOutputError>) -> Void)
    /// Creates a job.
    func createJob(input: CreateJobInput, completion: @escaping (ClientRuntime.SdkResult<CreateJobOutputResponse, CreateJobOutputError>) -> Void)
    /// Creates a job template.
    func createJobTemplate(input: CreateJobTemplateInput, completion: @escaping (ClientRuntime.SdkResult<CreateJobTemplateOutputResponse, CreateJobTemplateOutputError>) -> Void)
    /// Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued
    ///          public key. You can also call CreateKeysAndCertificate over MQTT from a
    ///          device, for more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#provision-mqtt-api">Provisioning MQTT API.
    ///
    ///             Note This is the only time AWS IoT issues the private key
    ///          for this certificate, so it is important to keep it in a secure location.
    func createKeysAndCertificate(input: CreateKeysAndCertificateInput, completion: @escaping (ClientRuntime.SdkResult<CreateKeysAndCertificateOutputResponse, CreateKeysAndCertificateOutputError>) -> Void)
    /// Defines an action that can be applied to audit findings by using StartAuditMitigationActionsTask. Only certain types of mitigation actions can be applied to specific check names. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/device-defender-mitigation-actions.html">Mitigation actions. Each mitigation action can apply only one type of change.
    func createMitigationAction(input: CreateMitigationActionInput, completion: @escaping (ClientRuntime.SdkResult<CreateMitigationActionOutputResponse, CreateMitigationActionOutputError>) -> Void)
    /// Creates an AWS IoT OTAUpdate on a target group of things or groups.
    func createOTAUpdate(input: CreateOTAUpdateInput, completion: @escaping (ClientRuntime.SdkResult<CreateOTAUpdateOutputResponse, CreateOTAUpdateOutputError>) -> Void)
    /// Creates an AWS IoT policy.
    ///          The created policy is the default version for the policy. This operation creates a
    ///          policy version with a version identifier of 1 and sets
    ///             1 as the policy's default version.
    func createPolicy(input: CreatePolicyInput, completion: @escaping (ClientRuntime.SdkResult<CreatePolicyOutputResponse, CreatePolicyOutputError>) -> Void)
    /// Creates a new version of the specified AWS IoT policy. To update a policy, create a
    ///          new policy version. A managed policy can have up to five versions. If the policy has five
    ///          versions, you must use DeletePolicyVersion to delete an existing version
    ///          before you create a new one.
    ///          Optionally, you can set the new version as the policy's default version. The default
    ///          version is the operative version (that is, the version that is in effect for the
    ///          certificates to which the policy is attached).
    func createPolicyVersion(input: CreatePolicyVersionInput, completion: @escaping (ClientRuntime.SdkResult<CreatePolicyVersionOutputResponse, CreatePolicyVersionOutputError>) -> Void)
    /// Creates a provisioning claim.
    func createProvisioningClaim(input: CreateProvisioningClaimInput, completion: @escaping (ClientRuntime.SdkResult<CreateProvisioningClaimOutputResponse, CreateProvisioningClaimOutputError>) -> Void)
    /// Creates a fleet provisioning template.
    func createProvisioningTemplate(input: CreateProvisioningTemplateInput, completion: @escaping (ClientRuntime.SdkResult<CreateProvisioningTemplateOutputResponse, CreateProvisioningTemplateOutputError>) -> Void)
    /// Creates a new version of a fleet provisioning template.
    func createProvisioningTemplateVersion(input: CreateProvisioningTemplateVersionInput, completion: @escaping (ClientRuntime.SdkResult<CreateProvisioningTemplateVersionOutputResponse, CreateProvisioningTemplateVersionOutputError>) -> Void)
    /// Creates a role alias.
    func createRoleAlias(input: CreateRoleAliasInput, completion: @escaping (ClientRuntime.SdkResult<CreateRoleAliasOutputResponse, CreateRoleAliasOutputError>) -> Void)
    /// Creates a scheduled audit that is run at a specified
    ///           time interval.
    func createScheduledAudit(input: CreateScheduledAuditInput, completion: @escaping (ClientRuntime.SdkResult<CreateScheduledAuditOutputResponse, CreateScheduledAuditOutputError>) -> Void)
    /// Creates a Device Defender security profile.
    func createSecurityProfile(input: CreateSecurityProfileInput, completion: @escaping (ClientRuntime.SdkResult<CreateSecurityProfileOutputResponse, CreateSecurityProfileOutputError>) -> Void)
    /// Creates a stream for delivering one or more large files in chunks over MQTT. A stream transports data
    ///             bytes in chunks or blocks packaged as MQTT messages from a source like S3. You can have one or more files
    ///             associated with a stream.
    func createStream(input: CreateStreamInput, completion: @escaping (ClientRuntime.SdkResult<CreateStreamOutputResponse, CreateStreamOutputError>) -> Void)
    /// Creates a thing record in the registry. If this call is made multiple times using
    /// 			the same thing name and configuration, the call will succeed. If this call is made with
    /// 			the same thing name but different configuration a
    /// 				ResourceAlreadyExistsException is thrown.
    /// 		
    /// 			         This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-authorization.html">Authorization for
    /// 				information about authorizing control plane actions.
    /// 		
    func createThing(input: CreateThingInput, completion: @escaping (ClientRuntime.SdkResult<CreateThingOutputResponse, CreateThingOutputError>) -> Void)
    /// Create a thing group.
    /// 		
    /// 			         This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-authorization.html">Authorization for
    /// 				information about authorizing control plane actions.
    /// 		
    func createThingGroup(input: CreateThingGroupInput, completion: @escaping (ClientRuntime.SdkResult<CreateThingGroupOutputResponse, CreateThingGroupOutputError>) -> Void)
    /// Creates a new thing type.
    func createThingType(input: CreateThingTypeInput, completion: @escaping (ClientRuntime.SdkResult<CreateThingTypeOutputResponse, CreateThingTypeOutputError>) -> Void)
    /// Creates a rule. Creating rules is an administrator-level action. Any user who has
    ///          permission to create rules will be able to access data processed by the rule.
    func createTopicRule(input: CreateTopicRuleInput, completion: @escaping (ClientRuntime.SdkResult<CreateTopicRuleOutputResponse, CreateTopicRuleOutputError>) -> Void)
    /// Creates a topic rule destination. The destination must be confirmed prior to use.
    func createTopicRuleDestination(input: CreateTopicRuleDestinationInput, completion: @escaping (ClientRuntime.SdkResult<CreateTopicRuleDestinationOutputResponse, CreateTopicRuleDestinationOutputError>) -> Void)
    /// Restores the default settings for Device Defender audits for this account. Any
    ///           configuration data you entered is deleted and all audit checks are reset to
    ///           disabled.
    func deleteAccountAuditConfiguration(input: DeleteAccountAuditConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<DeleteAccountAuditConfigurationOutputResponse, DeleteAccountAuditConfigurationOutputError>) -> Void)
    ///
    ///       Deletes a Device Defender audit suppression.
    ///
    func deleteAuditSuppression(input: DeleteAuditSuppressionInput, completion: @escaping (ClientRuntime.SdkResult<DeleteAuditSuppressionOutputResponse, DeleteAuditSuppressionOutputError>) -> Void)
    /// Deletes an authorizer.
    func deleteAuthorizer(input: DeleteAuthorizerInput, completion: @escaping (ClientRuntime.SdkResult<DeleteAuthorizerOutputResponse, DeleteAuthorizerOutputError>) -> Void)
    /// Deletes the billing group.
    func deleteBillingGroup(input: DeleteBillingGroupInput, completion: @escaping (ClientRuntime.SdkResult<DeleteBillingGroupOutputResponse, DeleteBillingGroupOutputError>) -> Void)
    /// Deletes a registered CA certificate.
    func deleteCACertificate(input: DeleteCACertificateInput, completion: @escaping (ClientRuntime.SdkResult<DeleteCACertificateOutputResponse, DeleteCACertificateOutputError>) -> Void)
    /// Deletes the specified certificate.
    ///          A certificate cannot be deleted if it has a policy or IoT thing attached to it or if
    ///          its status is set to ACTIVE. To delete a certificate, first use the DetachPrincipalPolicy API to detach all policies. Next, use the UpdateCertificate API to set the certificate to the INACTIVE
    ///          status.
    func deleteCertificate(input: DeleteCertificateInput, completion: @escaping (ClientRuntime.SdkResult<DeleteCertificateOutputResponse, DeleteCertificateOutputError>) -> Void)
    ///
    ///             Before you can delete a custom metric, you must first remove the custom metric from all
    ///         security profiles it's a part of.
    ///         The
    ///         security
    ///         profile associated with the custom metric can be found using the <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_ListSecurityProfiles.html">ListSecurityProfiles
    ///         API with metricName set to your custom metric name.
    ///
    ///
    ///       Deletes a Device Defender detect custom metric.
    ///
    func deleteCustomMetric(input: DeleteCustomMetricInput, completion: @escaping (ClientRuntime.SdkResult<DeleteCustomMetricOutputResponse, DeleteCustomMetricOutputError>) -> Void)
    /// Removes the specified dimension from your AWS account.
    func deleteDimension(input: DeleteDimensionInput, completion: @escaping (ClientRuntime.SdkResult<DeleteDimensionOutputResponse, DeleteDimensionOutputError>) -> Void)
    /// Deletes the specified domain configuration.
    func deleteDomainConfiguration(input: DeleteDomainConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<DeleteDomainConfigurationOutputResponse, DeleteDomainConfigurationOutputError>) -> Void)
    /// Deletes a dynamic thing group.
    func deleteDynamicThingGroup(input: DeleteDynamicThingGroupInput, completion: @escaping (ClientRuntime.SdkResult<DeleteDynamicThingGroupOutputResponse, DeleteDynamicThingGroupOutputError>) -> Void)
    /// Deletes a job and its related job executions.
    ///          Deleting a job may take time, depending on the number of job
    ///         executions created for the job and various other factors. While the job
    ///         is being deleted, the status of the job will be shown as
    ///         "DELETION_IN_PROGRESS". Attempting to delete or cancel a job whose status
    ///         is already "DELETION_IN_PROGRESS" will result in an error.
    ///          Only 10 jobs may have status "DELETION_IN_PROGRESS" at the same time, or
    ///         a LimitExceededException will occur.
    func deleteJob(input: DeleteJobInput, completion: @escaping (ClientRuntime.SdkResult<DeleteJobOutputResponse, DeleteJobOutputError>) -> Void)
    /// Deletes a job execution.
    func deleteJobExecution(input: DeleteJobExecutionInput, completion: @escaping (ClientRuntime.SdkResult<DeleteJobExecutionOutputResponse, DeleteJobExecutionOutputError>) -> Void)
    /// Deletes the specified job template.
    func deleteJobTemplate(input: DeleteJobTemplateInput, completion: @escaping (ClientRuntime.SdkResult<DeleteJobTemplateOutputResponse, DeleteJobTemplateOutputError>) -> Void)
    /// Deletes a defined mitigation action from your AWS account.
    func deleteMitigationAction(input: DeleteMitigationActionInput, completion: @escaping (ClientRuntime.SdkResult<DeleteMitigationActionOutputResponse, DeleteMitigationActionOutputError>) -> Void)
    /// Delete an OTA update.
    func deleteOTAUpdate(input: DeleteOTAUpdateInput, completion: @escaping (ClientRuntime.SdkResult<DeleteOTAUpdateOutputResponse, DeleteOTAUpdateOutputError>) -> Void)
    /// Deletes the specified policy.
    ///          A policy cannot be deleted if it has non-default versions or it is attached to any
    ///          certificate.
    ///          To delete a policy, use the DeletePolicyVersion API to delete all non-default
    ///          versions of the policy; use the DetachPrincipalPolicy API to detach the policy from any
    ///          certificate; and then use the DeletePolicy API to delete the policy.
    ///          When a policy is deleted using DeletePolicy, its default version is deleted with
    ///          it.
    func deletePolicy(input: DeletePolicyInput, completion: @escaping (ClientRuntime.SdkResult<DeletePolicyOutputResponse, DeletePolicyOutputError>) -> Void)
    /// Deletes the specified version of the specified policy. You cannot delete the default
    ///          version of a policy using this API. To delete the default version of a policy, use DeletePolicy. To find out which version of a policy is marked as the default
    ///          version, use ListPolicyVersions.
    func deletePolicyVersion(input: DeletePolicyVersionInput, completion: @escaping (ClientRuntime.SdkResult<DeletePolicyVersionOutputResponse, DeletePolicyVersionOutputError>) -> Void)
    /// Deletes a fleet provisioning template.
    func deleteProvisioningTemplate(input: DeleteProvisioningTemplateInput, completion: @escaping (ClientRuntime.SdkResult<DeleteProvisioningTemplateOutputResponse, DeleteProvisioningTemplateOutputError>) -> Void)
    /// Deletes a fleet provisioning template version.
    func deleteProvisioningTemplateVersion(input: DeleteProvisioningTemplateVersionInput, completion: @escaping (ClientRuntime.SdkResult<DeleteProvisioningTemplateVersionOutputResponse, DeleteProvisioningTemplateVersionOutputError>) -> Void)
    /// Deletes a CA certificate registration code.
    func deleteRegistrationCode(input: DeleteRegistrationCodeInput, completion: @escaping (ClientRuntime.SdkResult<DeleteRegistrationCodeOutputResponse, DeleteRegistrationCodeOutputError>) -> Void)
    /// Deletes a role alias
    func deleteRoleAlias(input: DeleteRoleAliasInput, completion: @escaping (ClientRuntime.SdkResult<DeleteRoleAliasOutputResponse, DeleteRoleAliasOutputError>) -> Void)
    /// Deletes a scheduled audit.
    func deleteScheduledAudit(input: DeleteScheduledAuditInput, completion: @escaping (ClientRuntime.SdkResult<DeleteScheduledAuditOutputResponse, DeleteScheduledAuditOutputError>) -> Void)
    /// Deletes a Device Defender security profile.
    func deleteSecurityProfile(input: DeleteSecurityProfileInput, completion: @escaping (ClientRuntime.SdkResult<DeleteSecurityProfileOutputResponse, DeleteSecurityProfileOutputError>) -> Void)
    /// Deletes a stream.
    func deleteStream(input: DeleteStreamInput, completion: @escaping (ClientRuntime.SdkResult<DeleteStreamOutputResponse, DeleteStreamOutputError>) -> Void)
    /// Deletes the specified thing. Returns successfully with no error if the deletion is
    /// 			successful or you specify a thing that doesn't exist.
    func deleteThing(input: DeleteThingInput, completion: @escaping (ClientRuntime.SdkResult<DeleteThingOutputResponse, DeleteThingOutputError>) -> Void)
    /// Deletes a thing group.
    func deleteThingGroup(input: DeleteThingGroupInput, completion: @escaping (ClientRuntime.SdkResult<DeleteThingGroupOutputResponse, DeleteThingGroupOutputError>) -> Void)
    /// Deletes the specified thing type. You cannot delete a thing type if it has things
    /// 			associated with it. To delete a thing type, first mark it as deprecated by calling DeprecateThingType, then remove any associated things by calling UpdateThing to change the thing type on any associated thing, and
    /// 			finally use DeleteThingType to delete the thing type.
    func deleteThingType(input: DeleteThingTypeInput, completion: @escaping (ClientRuntime.SdkResult<DeleteThingTypeOutputResponse, DeleteThingTypeOutputError>) -> Void)
    /// Deletes the rule.
    func deleteTopicRule(input: DeleteTopicRuleInput, completion: @escaping (ClientRuntime.SdkResult<DeleteTopicRuleOutputResponse, DeleteTopicRuleOutputError>) -> Void)
    /// Deletes a topic rule destination.
    func deleteTopicRuleDestination(input: DeleteTopicRuleDestinationInput, completion: @escaping (ClientRuntime.SdkResult<DeleteTopicRuleDestinationOutputResponse, DeleteTopicRuleDestinationOutputError>) -> Void)
    /// Deletes a logging level.
    func deleteV2LoggingLevel(input: DeleteV2LoggingLevelInput, completion: @escaping (ClientRuntime.SdkResult<DeleteV2LoggingLevelOutputResponse, DeleteV2LoggingLevelOutputError>) -> Void)
    /// Deprecates a thing type. You can not associate new things with deprecated thing
    /// 			type.
    func deprecateThingType(input: DeprecateThingTypeInput, completion: @escaping (ClientRuntime.SdkResult<DeprecateThingTypeOutputResponse, DeprecateThingTypeOutputError>) -> Void)
    /// Gets information about the Device Defender audit settings for this account.
    ///           Settings include how audit notifications are sent and which audit checks are
    ///           enabled or disabled.
    func describeAccountAuditConfiguration(input: DescribeAccountAuditConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<DescribeAccountAuditConfigurationOutputResponse, DescribeAccountAuditConfigurationOutputError>) -> Void)
    /// Gets information about a single audit finding. Properties include the reason for
    ///       noncompliance, the severity of the issue,
    ///       and the start time
    ///       when the audit that returned the
    ///       finding.
    func describeAuditFinding(input: DescribeAuditFindingInput, completion: @escaping (ClientRuntime.SdkResult<DescribeAuditFindingOutputResponse, DescribeAuditFindingOutputError>) -> Void)
    /// Gets information about an audit mitigation task that is used to apply mitigation actions to a set of audit findings. Properties include the actions being applied, the audit checks to which they're being applied, the task status, and aggregated task statistics.
    func describeAuditMitigationActionsTask(input: DescribeAuditMitigationActionsTaskInput, completion: @escaping (ClientRuntime.SdkResult<DescribeAuditMitigationActionsTaskOutputResponse, DescribeAuditMitigationActionsTaskOutputError>) -> Void)
    ///
    ///       Gets information about a Device Defender audit suppression.
    ///
    func describeAuditSuppression(input: DescribeAuditSuppressionInput, completion: @escaping (ClientRuntime.SdkResult<DescribeAuditSuppressionOutputResponse, DescribeAuditSuppressionOutputError>) -> Void)
    /// Gets information about a Device Defender audit.
    func describeAuditTask(input: DescribeAuditTaskInput, completion: @escaping (ClientRuntime.SdkResult<DescribeAuditTaskOutputResponse, DescribeAuditTaskOutputError>) -> Void)
    /// Describes an authorizer.
    func describeAuthorizer(input: DescribeAuthorizerInput, completion: @escaping (ClientRuntime.SdkResult<DescribeAuthorizerOutputResponse, DescribeAuthorizerOutputError>) -> Void)
    /// Returns information about a billing group.
    func describeBillingGroup(input: DescribeBillingGroupInput, completion: @escaping (ClientRuntime.SdkResult<DescribeBillingGroupOutputResponse, DescribeBillingGroupOutputError>) -> Void)
    /// Describes a registered CA certificate.
    func describeCACertificate(input: DescribeCACertificateInput, completion: @escaping (ClientRuntime.SdkResult<DescribeCACertificateOutputResponse, DescribeCACertificateOutputError>) -> Void)
    /// Gets information about the specified certificate.
    func describeCertificate(input: DescribeCertificateInput, completion: @escaping (ClientRuntime.SdkResult<DescribeCertificateOutputResponse, DescribeCertificateOutputError>) -> Void)
    ///
    ///       Gets information about a Device Defender detect custom metric.
    ///
    func describeCustomMetric(input: DescribeCustomMetricInput, completion: @escaping (ClientRuntime.SdkResult<DescribeCustomMetricOutputResponse, DescribeCustomMetricOutputError>) -> Void)
    /// Describes the default authorizer.
    func describeDefaultAuthorizer(input: DescribeDefaultAuthorizerInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDefaultAuthorizerOutputResponse, DescribeDefaultAuthorizerOutputError>) -> Void)
    ///
    ///       Gets information about a Device Defender ML Detect mitigation action.
    ///
    func describeDetectMitigationActionsTask(input: DescribeDetectMitigationActionsTaskInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDetectMitigationActionsTaskOutputResponse, DescribeDetectMitigationActionsTaskOutputError>) -> Void)
    /// Provides details about a dimension that is defined in your AWS account.
    func describeDimension(input: DescribeDimensionInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDimensionOutputResponse, DescribeDimensionOutputError>) -> Void)
    /// Gets summary information about a domain configuration.
    func describeDomainConfiguration(input: DescribeDomainConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<DescribeDomainConfigurationOutputResponse, DescribeDomainConfigurationOutputError>) -> Void)
    /// Returns a unique endpoint specific to the AWS account making the call.
    func describeEndpoint(input: DescribeEndpointInput, completion: @escaping (ClientRuntime.SdkResult<DescribeEndpointOutputResponse, DescribeEndpointOutputError>) -> Void)
    /// Describes event configurations.
    func describeEventConfigurations(input: DescribeEventConfigurationsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeEventConfigurationsOutputResponse, DescribeEventConfigurationsOutputError>) -> Void)
    /// Describes a search index.
    func describeIndex(input: DescribeIndexInput, completion: @escaping (ClientRuntime.SdkResult<DescribeIndexOutputResponse, DescribeIndexOutputError>) -> Void)
    /// Describes a job.
    func describeJob(input: DescribeJobInput, completion: @escaping (ClientRuntime.SdkResult<DescribeJobOutputResponse, DescribeJobOutputError>) -> Void)
    /// Describes a job execution.
    func describeJobExecution(input: DescribeJobExecutionInput, completion: @escaping (ClientRuntime.SdkResult<DescribeJobExecutionOutputResponse, DescribeJobExecutionOutputError>) -> Void)
    /// Returns information about a job template.
    func describeJobTemplate(input: DescribeJobTemplateInput, completion: @escaping (ClientRuntime.SdkResult<DescribeJobTemplateOutputResponse, DescribeJobTemplateOutputError>) -> Void)
    /// Gets information about a mitigation action.
    func describeMitigationAction(input: DescribeMitigationActionInput, completion: @escaping (ClientRuntime.SdkResult<DescribeMitigationActionOutputResponse, DescribeMitigationActionOutputError>) -> Void)
    /// Returns information about a fleet provisioning template.
    func describeProvisioningTemplate(input: DescribeProvisioningTemplateInput, completion: @escaping (ClientRuntime.SdkResult<DescribeProvisioningTemplateOutputResponse, DescribeProvisioningTemplateOutputError>) -> Void)
    /// Returns information about a fleet provisioning template version.
    func describeProvisioningTemplateVersion(input: DescribeProvisioningTemplateVersionInput, completion: @escaping (ClientRuntime.SdkResult<DescribeProvisioningTemplateVersionOutputResponse, DescribeProvisioningTemplateVersionOutputError>) -> Void)
    /// Describes a role alias.
    func describeRoleAlias(input: DescribeRoleAliasInput, completion: @escaping (ClientRuntime.SdkResult<DescribeRoleAliasOutputResponse, DescribeRoleAliasOutputError>) -> Void)
    /// Gets information about a scheduled audit.
    func describeScheduledAudit(input: DescribeScheduledAuditInput, completion: @escaping (ClientRuntime.SdkResult<DescribeScheduledAuditOutputResponse, DescribeScheduledAuditOutputError>) -> Void)
    /// Gets information about a Device Defender security profile.
    func describeSecurityProfile(input: DescribeSecurityProfileInput, completion: @escaping (ClientRuntime.SdkResult<DescribeSecurityProfileOutputResponse, DescribeSecurityProfileOutputError>) -> Void)
    /// Gets information about a stream.
    func describeStream(input: DescribeStreamInput, completion: @escaping (ClientRuntime.SdkResult<DescribeStreamOutputResponse, DescribeStreamOutputError>) -> Void)
    /// Gets information about the specified thing.
    func describeThing(input: DescribeThingInput, completion: @escaping (ClientRuntime.SdkResult<DescribeThingOutputResponse, DescribeThingOutputError>) -> Void)
    /// Describe a thing group.
    func describeThingGroup(input: DescribeThingGroupInput, completion: @escaping (ClientRuntime.SdkResult<DescribeThingGroupOutputResponse, DescribeThingGroupOutputError>) -> Void)
    /// Describes a bulk thing provisioning task.
    func describeThingRegistrationTask(input: DescribeThingRegistrationTaskInput, completion: @escaping (ClientRuntime.SdkResult<DescribeThingRegistrationTaskOutputResponse, DescribeThingRegistrationTaskOutputError>) -> Void)
    /// Gets information about the specified thing type.
    func describeThingType(input: DescribeThingTypeInput, completion: @escaping (ClientRuntime.SdkResult<DescribeThingTypeOutputResponse, DescribeThingTypeOutputError>) -> Void)
    /// Detaches a policy from the specified target.
    func detachPolicy(input: DetachPolicyInput, completion: @escaping (ClientRuntime.SdkResult<DetachPolicyOutputResponse, DetachPolicyOutputError>) -> Void)
    /// Removes the specified policy from the specified certificate.
    ///
    ///             Note: This API is deprecated. Please use DetachPolicy instead.
    @available(*, deprecated)
    func detachPrincipalPolicy(input: DetachPrincipalPolicyInput, completion: @escaping (ClientRuntime.SdkResult<DetachPrincipalPolicyOutputResponse, DetachPrincipalPolicyOutputError>) -> Void)
    /// Disassociates a Device Defender security profile from a thing group or from this account.
    func detachSecurityProfile(input: DetachSecurityProfileInput, completion: @escaping (ClientRuntime.SdkResult<DetachSecurityProfileOutputResponse, DetachSecurityProfileOutputError>) -> Void)
    /// Detaches the specified principal from the specified thing. A principal can be X.509
    /// 			certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
    /// 			identities.
    /// 		
    /// 			         This call is asynchronous. It might take several seconds for the detachment to
    /// 				propagate.
    /// 		
    func detachThingPrincipal(input: DetachThingPrincipalInput, completion: @escaping (ClientRuntime.SdkResult<DetachThingPrincipalOutputResponse, DetachThingPrincipalOutputError>) -> Void)
    /// Disables the rule.
    func disableTopicRule(input: DisableTopicRuleInput, completion: @escaping (ClientRuntime.SdkResult<DisableTopicRuleOutputResponse, DisableTopicRuleOutputError>) -> Void)
    /// Enables the rule.
    func enableTopicRule(input: EnableTopicRuleInput, completion: @escaping (ClientRuntime.SdkResult<EnableTopicRuleOutputResponse, EnableTopicRuleOutputError>) -> Void)
    ///
    ///       Returns a Device Defender's ML Detect Security Profile training model's status.
    ///
    func getBehaviorModelTrainingSummaries(input: GetBehaviorModelTrainingSummariesInput, completion: @escaping (ClientRuntime.SdkResult<GetBehaviorModelTrainingSummariesOutputResponse, GetBehaviorModelTrainingSummariesOutputError>) -> Void)
    /// Returns the approximate count of unique values that match the query.
    func getCardinality(input: GetCardinalityInput, completion: @escaping (ClientRuntime.SdkResult<GetCardinalityOutputResponse, GetCardinalityOutputError>) -> Void)
    /// Gets a list of the policies that have an effect on the authorization behavior of the
    ///          specified device when it connects to the AWS IoT device gateway.
    func getEffectivePolicies(input: GetEffectivePoliciesInput, completion: @escaping (ClientRuntime.SdkResult<GetEffectivePoliciesOutputResponse, GetEffectivePoliciesOutputError>) -> Void)
    /// Gets the indexing configuration.
    func getIndexingConfiguration(input: GetIndexingConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<GetIndexingConfigurationOutputResponse, GetIndexingConfigurationOutputError>) -> Void)
    /// Gets a job document.
    func getJobDocument(input: GetJobDocumentInput, completion: @escaping (ClientRuntime.SdkResult<GetJobDocumentOutputResponse, GetJobDocumentOutputError>) -> Void)
    /// Gets the logging options.
    ///          NOTE: use of this command is not recommended. Use GetV2LoggingOptions
    ///          instead.
    func getLoggingOptions(input: GetLoggingOptionsInput, completion: @escaping (ClientRuntime.SdkResult<GetLoggingOptionsOutputResponse, GetLoggingOptionsOutputError>) -> Void)
    /// Gets an OTA update.
    func getOTAUpdate(input: GetOTAUpdateInput, completion: @escaping (ClientRuntime.SdkResult<GetOTAUpdateOutputResponse, GetOTAUpdateOutputError>) -> Void)
    /// Groups the aggregated values that match the query into percentile groupings. The default
    ///         percentile groupings are: 1,5,25,50,75,95,99, although you can specify your own
    ///         when you call GetPercentiles. This function returns a value for each
    ///         percentile group specified (or the default percentile groupings). The percentile group
    ///         "1" contains the aggregated field value that occurs in approximately one percent of the
    ///         values that match the query. The percentile group "5" contains the aggregated field value
    ///         that occurs in approximately five percent of the values that match the query, and so on.
    ///         The result is an approximation, the more values that match the query, the more accurate
    ///         the percentile values.
    func getPercentiles(input: GetPercentilesInput, completion: @escaping (ClientRuntime.SdkResult<GetPercentilesOutputResponse, GetPercentilesOutputError>) -> Void)
    /// Gets information about the specified policy with the policy document of the default
    ///          version.
    func getPolicy(input: GetPolicyInput, completion: @escaping (ClientRuntime.SdkResult<GetPolicyOutputResponse, GetPolicyOutputError>) -> Void)
    /// Gets information about the specified policy version.
    func getPolicyVersion(input: GetPolicyVersionInput, completion: @escaping (ClientRuntime.SdkResult<GetPolicyVersionOutputResponse, GetPolicyVersionOutputError>) -> Void)
    /// Gets a registration code used to register a CA certificate with AWS IoT.
    func getRegistrationCode(input: GetRegistrationCodeInput, completion: @escaping (ClientRuntime.SdkResult<GetRegistrationCodeOutputResponse, GetRegistrationCodeOutputError>) -> Void)
    /// Returns the count, average, sum, minimum, maximum, sum of squares, variance,
    ///       and standard deviation for the specified aggregated field. If the aggregation field is of type
    ///       String, only the count statistic is returned.
    func getStatistics(input: GetStatisticsInput, completion: @escaping (ClientRuntime.SdkResult<GetStatisticsOutputResponse, GetStatisticsOutputError>) -> Void)
    /// Gets information about the rule.
    func getTopicRule(input: GetTopicRuleInput, completion: @escaping (ClientRuntime.SdkResult<GetTopicRuleOutputResponse, GetTopicRuleOutputError>) -> Void)
    /// Gets information about a topic rule destination.
    func getTopicRuleDestination(input: GetTopicRuleDestinationInput, completion: @escaping (ClientRuntime.SdkResult<GetTopicRuleDestinationOutputResponse, GetTopicRuleDestinationOutputError>) -> Void)
    /// Gets the fine grained logging options.
    func getV2LoggingOptions(input: GetV2LoggingOptionsInput, completion: @escaping (ClientRuntime.SdkResult<GetV2LoggingOptionsOutputResponse, GetV2LoggingOptionsOutputError>) -> Void)
    /// Lists the active violations for a given Device Defender security profile.
    func listActiveViolations(input: ListActiveViolationsInput, completion: @escaping (ClientRuntime.SdkResult<ListActiveViolationsOutputResponse, ListActiveViolationsOutputError>) -> Void)
    /// Lists the policies attached to the specified thing group.
    func listAttachedPolicies(input: ListAttachedPoliciesInput, completion: @escaping (ClientRuntime.SdkResult<ListAttachedPoliciesOutputResponse, ListAttachedPoliciesOutputError>) -> Void)
    /// Lists the findings (results) of a Device Defender audit or of the audits
    ///         performed during a specified time period. (Findings are retained for 90 days.)
    func listAuditFindings(input: ListAuditFindingsInput, completion: @escaping (ClientRuntime.SdkResult<ListAuditFindingsOutputResponse, ListAuditFindingsOutputError>) -> Void)
    /// Gets the status of audit mitigation action tasks that were
    ///       executed.
    func listAuditMitigationActionsExecutions(input: ListAuditMitigationActionsExecutionsInput, completion: @escaping (ClientRuntime.SdkResult<ListAuditMitigationActionsExecutionsOutputResponse, ListAuditMitigationActionsExecutionsOutputError>) -> Void)
    /// Gets a list of audit mitigation action tasks that match the specified filters.
    func listAuditMitigationActionsTasks(input: ListAuditMitigationActionsTasksInput, completion: @escaping (ClientRuntime.SdkResult<ListAuditMitigationActionsTasksOutputResponse, ListAuditMitigationActionsTasksOutputError>) -> Void)
    ///
    ///       Lists your Device Defender audit listings.
    ///
    func listAuditSuppressions(input: ListAuditSuppressionsInput, completion: @escaping (ClientRuntime.SdkResult<ListAuditSuppressionsOutputResponse, ListAuditSuppressionsOutputError>) -> Void)
    /// Lists the Device Defender audits that have been performed during a given
    ///           time period.
    func listAuditTasks(input: ListAuditTasksInput, completion: @escaping (ClientRuntime.SdkResult<ListAuditTasksOutputResponse, ListAuditTasksOutputError>) -> Void)
    /// Lists the authorizers registered in your account.
    func listAuthorizers(input: ListAuthorizersInput, completion: @escaping (ClientRuntime.SdkResult<ListAuthorizersOutputResponse, ListAuthorizersOutputError>) -> Void)
    /// Lists the billing groups you have created.
    func listBillingGroups(input: ListBillingGroupsInput, completion: @escaping (ClientRuntime.SdkResult<ListBillingGroupsOutputResponse, ListBillingGroupsOutputError>) -> Void)
    /// Lists the CA certificates registered for your AWS account.
    ///          The results are paginated with a default page size of 25. You can use the returned
    ///          marker to retrieve additional results.
    func listCACertificates(input: ListCACertificatesInput, completion: @escaping (ClientRuntime.SdkResult<ListCACertificatesOutputResponse, ListCACertificatesOutputError>) -> Void)
    /// Lists the certificates registered in your AWS account.
    ///          The results are paginated with a default page size of 25. You can use the returned
    ///          marker to retrieve additional results.
    func listCertificates(input: ListCertificatesInput, completion: @escaping (ClientRuntime.SdkResult<ListCertificatesOutputResponse, ListCertificatesOutputError>) -> Void)
    /// List the device certificates signed by the specified CA certificate.
    func listCertificatesByCA(input: ListCertificatesByCAInput, completion: @escaping (ClientRuntime.SdkResult<ListCertificatesByCAOutputResponse, ListCertificatesByCAOutputError>) -> Void)
    ///
    ///       Lists your Device Defender detect custom metrics.
    ///
    func listCustomMetrics(input: ListCustomMetricsInput, completion: @escaping (ClientRuntime.SdkResult<ListCustomMetricsOutputResponse, ListCustomMetricsOutputError>) -> Void)
    ///
    ///       Lists mitigation actions executions for a Device Defender ML Detect Security Profile.
    ///
    func listDetectMitigationActionsExecutions(input: ListDetectMitigationActionsExecutionsInput, completion: @escaping (ClientRuntime.SdkResult<ListDetectMitigationActionsExecutionsOutputResponse, ListDetectMitigationActionsExecutionsOutputError>) -> Void)
    ///
    ///       List of Device Defender ML Detect mitigation actions tasks.
    ///
    func listDetectMitigationActionsTasks(input: ListDetectMitigationActionsTasksInput, completion: @escaping (ClientRuntime.SdkResult<ListDetectMitigationActionsTasksOutputResponse, ListDetectMitigationActionsTasksOutputError>) -> Void)
    /// List the set of dimensions that are defined for your AWS account.
    func listDimensions(input: ListDimensionsInput, completion: @escaping (ClientRuntime.SdkResult<ListDimensionsOutputResponse, ListDimensionsOutputError>) -> Void)
    /// Gets a list of domain configurations for the user. This list is sorted alphabetically by domain configuration name.
    func listDomainConfigurations(input: ListDomainConfigurationsInput, completion: @escaping (ClientRuntime.SdkResult<ListDomainConfigurationsOutputResponse, ListDomainConfigurationsOutputError>) -> Void)
    /// Lists the search indices.
    func listIndices(input: ListIndicesInput, completion: @escaping (ClientRuntime.SdkResult<ListIndicesOutputResponse, ListIndicesOutputError>) -> Void)
    /// Lists the job executions for a job.
    func listJobExecutionsForJob(input: ListJobExecutionsForJobInput, completion: @escaping (ClientRuntime.SdkResult<ListJobExecutionsForJobOutputResponse, ListJobExecutionsForJobOutputError>) -> Void)
    /// Lists the job executions for the specified thing.
    func listJobExecutionsForThing(input: ListJobExecutionsForThingInput, completion: @escaping (ClientRuntime.SdkResult<ListJobExecutionsForThingOutputResponse, ListJobExecutionsForThingOutputError>) -> Void)
    /// Lists jobs.
    func listJobs(input: ListJobsInput, completion: @escaping (ClientRuntime.SdkResult<ListJobsOutputResponse, ListJobsOutputError>) -> Void)
    /// Returns a list of job templates.
    func listJobTemplates(input: ListJobTemplatesInput, completion: @escaping (ClientRuntime.SdkResult<ListJobTemplatesOutputResponse, ListJobTemplatesOutputError>) -> Void)
    /// Gets a list of all mitigation actions that match the specified filter criteria.
    func listMitigationActions(input: ListMitigationActionsInput, completion: @escaping (ClientRuntime.SdkResult<ListMitigationActionsOutputResponse, ListMitigationActionsOutputError>) -> Void)
    /// Lists OTA updates.
    func listOTAUpdates(input: ListOTAUpdatesInput, completion: @escaping (ClientRuntime.SdkResult<ListOTAUpdatesOutputResponse, ListOTAUpdatesOutputError>) -> Void)
    /// Lists certificates that are being transferred but not yet accepted.
    func listOutgoingCertificates(input: ListOutgoingCertificatesInput, completion: @escaping (ClientRuntime.SdkResult<ListOutgoingCertificatesOutputResponse, ListOutgoingCertificatesOutputError>) -> Void)
    /// Lists your policies.
    func listPolicies(input: ListPoliciesInput, completion: @escaping (ClientRuntime.SdkResult<ListPoliciesOutputResponse, ListPoliciesOutputError>) -> Void)
    /// Lists the principals associated with the specified policy.
    ///
    ///             Note: This API is deprecated. Please use ListTargetsForPolicy instead.
    @available(*, deprecated)
    func listPolicyPrincipals(input: ListPolicyPrincipalsInput, completion: @escaping (ClientRuntime.SdkResult<ListPolicyPrincipalsOutputResponse, ListPolicyPrincipalsOutputError>) -> Void)
    /// Lists the versions of the specified policy and identifies the default
    ///          version.
    func listPolicyVersions(input: ListPolicyVersionsInput, completion: @escaping (ClientRuntime.SdkResult<ListPolicyVersionsOutputResponse, ListPolicyVersionsOutputError>) -> Void)
    /// Lists the policies attached to the specified principal. If you use an Cognito
    ///          identity, the ID must be in <a href="https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax">AmazonCognito Identity format.
    ///
    ///             Note: This API is deprecated. Please use ListAttachedPolicies instead.
    @available(*, deprecated)
    func listPrincipalPolicies(input: ListPrincipalPoliciesInput, completion: @escaping (ClientRuntime.SdkResult<ListPrincipalPoliciesOutputResponse, ListPrincipalPoliciesOutputError>) -> Void)
    /// Lists the things associated with the specified principal. A principal can be X.509
    /// 			certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
    /// 			identities.
    func listPrincipalThings(input: ListPrincipalThingsInput, completion: @escaping (ClientRuntime.SdkResult<ListPrincipalThingsOutputResponse, ListPrincipalThingsOutputError>) -> Void)
    /// Lists the fleet provisioning templates in your AWS account.
    func listProvisioningTemplates(input: ListProvisioningTemplatesInput, completion: @escaping (ClientRuntime.SdkResult<ListProvisioningTemplatesOutputResponse, ListProvisioningTemplatesOutputError>) -> Void)
    /// A list of fleet provisioning template versions.
    func listProvisioningTemplateVersions(input: ListProvisioningTemplateVersionsInput, completion: @escaping (ClientRuntime.SdkResult<ListProvisioningTemplateVersionsOutputResponse, ListProvisioningTemplateVersionsOutputError>) -> Void)
    /// Lists the role aliases registered in your account.
    func listRoleAliases(input: ListRoleAliasesInput, completion: @escaping (ClientRuntime.SdkResult<ListRoleAliasesOutputResponse, ListRoleAliasesOutputError>) -> Void)
    /// Lists all of your scheduled audits.
    func listScheduledAudits(input: ListScheduledAuditsInput, completion: @escaping (ClientRuntime.SdkResult<ListScheduledAuditsOutputResponse, ListScheduledAuditsOutputError>) -> Void)
    /// Lists the Device Defender security profiles
    ///       you've
    ///       created. You can filter security profiles by dimension or custom metric.
    ///
    ///
    ///                dimensionName and metricName cannot be used in the same request.
    ///
    func listSecurityProfiles(input: ListSecurityProfilesInput, completion: @escaping (ClientRuntime.SdkResult<ListSecurityProfilesOutputResponse, ListSecurityProfilesOutputError>) -> Void)
    /// Lists the Device Defender security profiles attached to a target (thing group).
    func listSecurityProfilesForTarget(input: ListSecurityProfilesForTargetInput, completion: @escaping (ClientRuntime.SdkResult<ListSecurityProfilesForTargetOutputResponse, ListSecurityProfilesForTargetOutputError>) -> Void)
    /// Lists all of the streams in your AWS account.
    func listStreams(input: ListStreamsInput, completion: @escaping (ClientRuntime.SdkResult<ListStreamsOutputResponse, ListStreamsOutputError>) -> Void)
    /// Lists the tags (metadata) you have assigned to the resource.
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (ClientRuntime.SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// List targets for the specified policy.
    func listTargetsForPolicy(input: ListTargetsForPolicyInput, completion: @escaping (ClientRuntime.SdkResult<ListTargetsForPolicyOutputResponse, ListTargetsForPolicyOutputError>) -> Void)
    /// Lists the targets (thing groups) associated with a given Device Defender security profile.
    func listTargetsForSecurityProfile(input: ListTargetsForSecurityProfileInput, completion: @escaping (ClientRuntime.SdkResult<ListTargetsForSecurityProfileOutputResponse, ListTargetsForSecurityProfileOutputError>) -> Void)
    /// List the thing groups in your account.
    func listThingGroups(input: ListThingGroupsInput, completion: @escaping (ClientRuntime.SdkResult<ListThingGroupsOutputResponse, ListThingGroupsOutputError>) -> Void)
    /// List the thing groups to which the specified thing belongs.
    func listThingGroupsForThing(input: ListThingGroupsForThingInput, completion: @escaping (ClientRuntime.SdkResult<ListThingGroupsForThingOutputResponse, ListThingGroupsForThingOutputError>) -> Void)
    /// Lists the principals associated with the specified thing. A principal can be X.509
    /// 			certificates, IAM users, groups, and roles, Amazon Cognito identities or federated
    /// 			identities.
    func listThingPrincipals(input: ListThingPrincipalsInput, completion: @escaping (ClientRuntime.SdkResult<ListThingPrincipalsOutputResponse, ListThingPrincipalsOutputError>) -> Void)
    /// Information about the thing registration tasks.
    func listThingRegistrationTaskReports(input: ListThingRegistrationTaskReportsInput, completion: @escaping (ClientRuntime.SdkResult<ListThingRegistrationTaskReportsOutputResponse, ListThingRegistrationTaskReportsOutputError>) -> Void)
    /// List bulk thing provisioning tasks.
    func listThingRegistrationTasks(input: ListThingRegistrationTasksInput, completion: @escaping (ClientRuntime.SdkResult<ListThingRegistrationTasksOutputResponse, ListThingRegistrationTasksOutputError>) -> Void)
    /// Lists your things. Use the attributeName and
    /// 				attributeValue parameters to filter your things.
    /// 			For example, calling ListThings with attributeName=Color and
    /// 			attributeValue=Red retrieves all things in the registry that contain an attribute
    /// 				Color with the value Red.
    /// 		
    /// 			         You will not be charged for calling this API if an Access denied error is returned. You will also not be charged if no attributes or pagination token was provided in request and no pagination token and no results were returned.
    /// 		
    func listThings(input: ListThingsInput, completion: @escaping (ClientRuntime.SdkResult<ListThingsOutputResponse, ListThingsOutputError>) -> Void)
    /// Lists the things you have added to the given billing group.
    func listThingsInBillingGroup(input: ListThingsInBillingGroupInput, completion: @escaping (ClientRuntime.SdkResult<ListThingsInBillingGroupOutputResponse, ListThingsInBillingGroupOutputError>) -> Void)
    /// Lists the things in the specified group.
    func listThingsInThingGroup(input: ListThingsInThingGroupInput, completion: @escaping (ClientRuntime.SdkResult<ListThingsInThingGroupOutputResponse, ListThingsInThingGroupOutputError>) -> Void)
    /// Lists the existing thing types.
    func listThingTypes(input: ListThingTypesInput, completion: @escaping (ClientRuntime.SdkResult<ListThingTypesOutputResponse, ListThingTypesOutputError>) -> Void)
    /// Lists all the topic rule destinations in your AWS account.
    func listTopicRuleDestinations(input: ListTopicRuleDestinationsInput, completion: @escaping (ClientRuntime.SdkResult<ListTopicRuleDestinationsOutputResponse, ListTopicRuleDestinationsOutputError>) -> Void)
    /// Lists the rules for the specific topic.
    func listTopicRules(input: ListTopicRulesInput, completion: @escaping (ClientRuntime.SdkResult<ListTopicRulesOutputResponse, ListTopicRulesOutputError>) -> Void)
    /// Lists logging levels.
    func listV2LoggingLevels(input: ListV2LoggingLevelsInput, completion: @escaping (ClientRuntime.SdkResult<ListV2LoggingLevelsOutputResponse, ListV2LoggingLevelsOutputError>) -> Void)
    /// Lists the Device Defender security profile violations discovered during the given time period.
    ///       You can use filters to limit the results to those alerts issued for a particular security profile,
    ///       behavior, or thing (device).
    func listViolationEvents(input: ListViolationEventsInput, completion: @escaping (ClientRuntime.SdkResult<ListViolationEventsOutputResponse, ListViolationEventsOutputError>) -> Void)
    /// Registers a CA certificate with AWS IoT. This CA certificate can then be used to sign
    ///          device certificates, which can be then registered with AWS IoT. You can register up to 10
    ///          CA certificates per AWS account that have the same subject field. This enables you to have
    ///          up to 10 certificate authorities sign your device certificates. If you have more than one
    ///          CA certificate registered, make sure you pass the CA certificate when you register your
    ///          device certificates with the RegisterCertificate API.
    func registerCACertificate(input: RegisterCACertificateInput, completion: @escaping (ClientRuntime.SdkResult<RegisterCACertificateOutputResponse, RegisterCACertificateOutputError>) -> Void)
    /// Registers a device certificate with AWS IoT. If you have more than one CA certificate
    ///          that has the same subject field, you must specify the CA certificate that was used to sign
    ///          the device certificate being registered.
    func registerCertificate(input: RegisterCertificateInput, completion: @escaping (ClientRuntime.SdkResult<RegisterCertificateOutputResponse, RegisterCertificateOutputError>) -> Void)
    /// Register a certificate that does not have a certificate authority (CA).
    func registerCertificateWithoutCA(input: RegisterCertificateWithoutCAInput, completion: @escaping (ClientRuntime.SdkResult<RegisterCertificateWithoutCAOutputResponse, RegisterCertificateWithoutCAOutputError>) -> Void)
    /// Provisions a thing in the device registry. RegisterThing calls other AWS IoT control
    ///          plane APIs. These calls might exceed your account level <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_iot">
    ///             AWS IoT Throttling Limits and cause throttle errors. Please contact <a href="https://console.aws.amazon.com/support/home">AWS Customer Support to raise
    ///          your throttling limits if necessary.
    func registerThing(input: RegisterThingInput, completion: @escaping (ClientRuntime.SdkResult<RegisterThingOutputResponse, RegisterThingOutputError>) -> Void)
    /// Rejects a pending certificate transfer. After AWS IoT rejects a certificate transfer,
    ///          the certificate status changes from PENDING_TRANSFER to
    ///             INACTIVE.
    ///          To check for pending certificate transfers, call ListCertificates
    ///          to enumerate your certificates.
    ///          This operation can only be called by the transfer destination. After it is called,
    ///          the certificate will be returned to the source's account in the INACTIVE state.
    func rejectCertificateTransfer(input: RejectCertificateTransferInput, completion: @escaping (ClientRuntime.SdkResult<RejectCertificateTransferOutputResponse, RejectCertificateTransferOutputError>) -> Void)
    /// Removes the given thing from the billing group.
    func removeThingFromBillingGroup(input: RemoveThingFromBillingGroupInput, completion: @escaping (ClientRuntime.SdkResult<RemoveThingFromBillingGroupOutputResponse, RemoveThingFromBillingGroupOutputError>) -> Void)
    /// Remove the specified thing from the specified group.
    /// 		       You must specify either a thingGroupArn or a
    /// 			thingGroupName to identify the thing group and
    /// 			either a thingArn or a thingName to
    /// 			identify the thing to remove from the thing group.
    /// 		
    func removeThingFromThingGroup(input: RemoveThingFromThingGroupInput, completion: @escaping (ClientRuntime.SdkResult<RemoveThingFromThingGroupOutputResponse, RemoveThingFromThingGroupOutputError>) -> Void)
    /// Replaces the rule. You must specify all parameters for the new rule. Creating rules
    ///          is an administrator-level action. Any user who has permission to create rules will be able
    ///          to access data processed by the rule.
    func replaceTopicRule(input: ReplaceTopicRuleInput, completion: @escaping (ClientRuntime.SdkResult<ReplaceTopicRuleOutputResponse, ReplaceTopicRuleOutputError>) -> Void)
    /// The query search index.
    func searchIndex(input: SearchIndexInput, completion: @escaping (ClientRuntime.SdkResult<SearchIndexOutputResponse, SearchIndexOutputError>) -> Void)
    /// Sets the default authorizer. This will be used if a websocket connection is made
    ///          without specifying an authorizer.
    func setDefaultAuthorizer(input: SetDefaultAuthorizerInput, completion: @escaping (ClientRuntime.SdkResult<SetDefaultAuthorizerOutputResponse, SetDefaultAuthorizerOutputError>) -> Void)
    /// Sets the specified version of the specified policy as the policy's default
    ///          (operative) version. This action affects all certificates to which the policy is attached.
    ///          To list the principals the policy is attached to, use the ListPrincipalPolicy
    ///          API.
    func setDefaultPolicyVersion(input: SetDefaultPolicyVersionInput, completion: @escaping (ClientRuntime.SdkResult<SetDefaultPolicyVersionOutputResponse, SetDefaultPolicyVersionOutputError>) -> Void)
    /// Sets the logging options.
    ///          NOTE: use of this command is not recommended. Use SetV2LoggingOptions
    ///          instead.
    func setLoggingOptions(input: SetLoggingOptionsInput, completion: @escaping (ClientRuntime.SdkResult<SetLoggingOptionsOutputResponse, SetLoggingOptionsOutputError>) -> Void)
    /// Sets the logging level.
    func setV2LoggingLevel(input: SetV2LoggingLevelInput, completion: @escaping (ClientRuntime.SdkResult<SetV2LoggingLevelOutputResponse, SetV2LoggingLevelOutputError>) -> Void)
    /// Sets the logging options for the V2 logging service.
    func setV2LoggingOptions(input: SetV2LoggingOptionsInput, completion: @escaping (ClientRuntime.SdkResult<SetV2LoggingOptionsOutputResponse, SetV2LoggingOptionsOutputError>) -> Void)
    /// Starts a task that applies a set of mitigation actions to the specified target.
    func startAuditMitigationActionsTask(input: StartAuditMitigationActionsTaskInput, completion: @escaping (ClientRuntime.SdkResult<StartAuditMitigationActionsTaskOutputResponse, StartAuditMitigationActionsTaskOutputError>) -> Void)
    ///
    ///       Starts a Device Defender ML Detect mitigation actions task.
    ///
    func startDetectMitigationActionsTask(input: StartDetectMitigationActionsTaskInput, completion: @escaping (ClientRuntime.SdkResult<StartDetectMitigationActionsTaskOutputResponse, StartDetectMitigationActionsTaskOutputError>) -> Void)
    /// Starts an on-demand Device Defender audit.
    func startOnDemandAuditTask(input: StartOnDemandAuditTaskInput, completion: @escaping (ClientRuntime.SdkResult<StartOnDemandAuditTaskOutputResponse, StartOnDemandAuditTaskOutputError>) -> Void)
    /// Creates a bulk thing provisioning task.
    func startThingRegistrationTask(input: StartThingRegistrationTaskInput, completion: @escaping (ClientRuntime.SdkResult<StartThingRegistrationTaskOutputResponse, StartThingRegistrationTaskOutputError>) -> Void)
    /// Cancels a bulk thing provisioning task.
    func stopThingRegistrationTask(input: StopThingRegistrationTaskInput, completion: @escaping (ClientRuntime.SdkResult<StopThingRegistrationTaskOutputResponse, StopThingRegistrationTaskOutputError>) -> Void)
    /// Adds to or modifies the tags of the given resource. Tags are metadata which can be
    /// 			used to manage a resource.
    func tagResource(input: TagResourceInput, completion: @escaping (ClientRuntime.SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// Tests if a specified principal is authorized to perform an AWS IoT action on a
    ///          specified resource. Use this to test and debug the authorization behavior of devices that
    ///          connect to the AWS IoT device gateway.
    func testAuthorization(input: TestAuthorizationInput, completion: @escaping (ClientRuntime.SdkResult<TestAuthorizationOutputResponse, TestAuthorizationOutputError>) -> Void)
    /// Tests a custom authorization behavior by invoking a specified custom authorizer. Use
    ///          this to test and debug the custom authorization behavior of devices that connect to the AWS
    ///          IoT device gateway.
    func testInvokeAuthorizer(input: TestInvokeAuthorizerInput, completion: @escaping (ClientRuntime.SdkResult<TestInvokeAuthorizerOutputResponse, TestInvokeAuthorizerOutputError>) -> Void)
    /// Transfers the specified certificate to the specified AWS account.
    ///          You can cancel the transfer until it is acknowledged by the recipient.
    ///          No notification is sent to the transfer destination's account. It is up to the caller
    ///          to notify the transfer target.
    ///          The certificate being transferred must not be in the ACTIVE state. You can use the
    ///          UpdateCertificate API to deactivate it.
    ///          The certificate must not have any policies attached to it. You can use the
    ///          DetachPrincipalPolicy API to detach them.
    func transferCertificate(input: TransferCertificateInput, completion: @escaping (ClientRuntime.SdkResult<TransferCertificateOutputResponse, TransferCertificateOutputError>) -> Void)
    /// Removes the given tags (metadata) from the resource.
    func untagResource(input: UntagResourceInput, completion: @escaping (ClientRuntime.SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// Configures or reconfigures the Device Defender audit settings for this account.
    ///           Settings include how audit notifications are sent and which audit checks are
    ///           enabled or disabled.
    func updateAccountAuditConfiguration(input: UpdateAccountAuditConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<UpdateAccountAuditConfigurationOutputResponse, UpdateAccountAuditConfigurationOutputError>) -> Void)
    ///
    ///       Updates a Device Defender audit suppression.
    ///
    func updateAuditSuppression(input: UpdateAuditSuppressionInput, completion: @escaping (ClientRuntime.SdkResult<UpdateAuditSuppressionOutputResponse, UpdateAuditSuppressionOutputError>) -> Void)
    /// Updates an authorizer.
    func updateAuthorizer(input: UpdateAuthorizerInput, completion: @escaping (ClientRuntime.SdkResult<UpdateAuthorizerOutputResponse, UpdateAuthorizerOutputError>) -> Void)
    /// Updates information about the billing group.
    func updateBillingGroup(input: UpdateBillingGroupInput, completion: @escaping (ClientRuntime.SdkResult<UpdateBillingGroupOutputResponse, UpdateBillingGroupOutputError>) -> Void)
    /// Updates a registered CA certificate.
    func updateCACertificate(input: UpdateCACertificateInput, completion: @escaping (ClientRuntime.SdkResult<UpdateCACertificateOutputResponse, UpdateCACertificateOutputError>) -> Void)
    /// Updates the status of the specified certificate. This operation is
    ///          idempotent.
    ///          Certificates must be in the ACTIVE state to authenticate devices that use
    ///          a certificate to connect to AWS IoT.
    ///          Within a few minutes of updating a certificate from the ACTIVE state to any other
    ///          state, AWS IoT disconnects all devices that used that certificate to connect. Devices cannot
    ///          use a certificate that is not in the ACTIVE state to reconnect.
    func updateCertificate(input: UpdateCertificateInput, completion: @escaping (ClientRuntime.SdkResult<UpdateCertificateOutputResponse, UpdateCertificateOutputError>) -> Void)
    /// Updates a
    ///       Device Defender detect custom metric.
    func updateCustomMetric(input: UpdateCustomMetricInput, completion: @escaping (ClientRuntime.SdkResult<UpdateCustomMetricOutputResponse, UpdateCustomMetricOutputError>) -> Void)
    /// Updates the definition for a dimension. You
    ///       cannot
    ///       change the type of a dimension after
    ///       it is created (you can delete it and
    ///       recreate
    ///       it).
    func updateDimension(input: UpdateDimensionInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDimensionOutputResponse, UpdateDimensionOutputError>) -> Void)
    /// Updates values stored in the domain configuration. Domain configurations for default endpoints can't be updated.
    func updateDomainConfiguration(input: UpdateDomainConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDomainConfigurationOutputResponse, UpdateDomainConfigurationOutputError>) -> Void)
    /// Updates a dynamic thing group.
    func updateDynamicThingGroup(input: UpdateDynamicThingGroupInput, completion: @escaping (ClientRuntime.SdkResult<UpdateDynamicThingGroupOutputResponse, UpdateDynamicThingGroupOutputError>) -> Void)
    /// Updates the event configurations.
    func updateEventConfigurations(input: UpdateEventConfigurationsInput, completion: @escaping (ClientRuntime.SdkResult<UpdateEventConfigurationsOutputResponse, UpdateEventConfigurationsOutputError>) -> Void)
    /// Updates the search configuration.
    func updateIndexingConfiguration(input: UpdateIndexingConfigurationInput, completion: @escaping (ClientRuntime.SdkResult<UpdateIndexingConfigurationOutputResponse, UpdateIndexingConfigurationOutputError>) -> Void)
    /// Updates supported fields of the specified job.
    func updateJob(input: UpdateJobInput, completion: @escaping (ClientRuntime.SdkResult<UpdateJobOutputResponse, UpdateJobOutputError>) -> Void)
    /// Updates the definition for the specified mitigation action.
    func updateMitigationAction(input: UpdateMitigationActionInput, completion: @escaping (ClientRuntime.SdkResult<UpdateMitigationActionOutputResponse, UpdateMitigationActionOutputError>) -> Void)
    /// Updates a fleet provisioning template.
    func updateProvisioningTemplate(input: UpdateProvisioningTemplateInput, completion: @escaping (ClientRuntime.SdkResult<UpdateProvisioningTemplateOutputResponse, UpdateProvisioningTemplateOutputError>) -> Void)
    /// Updates a role alias.
    func updateRoleAlias(input: UpdateRoleAliasInput, completion: @escaping (ClientRuntime.SdkResult<UpdateRoleAliasOutputResponse, UpdateRoleAliasOutputError>) -> Void)
    /// Updates a scheduled audit, including which checks are performed and
    ///           how often the audit takes place.
    func updateScheduledAudit(input: UpdateScheduledAuditInput, completion: @escaping (ClientRuntime.SdkResult<UpdateScheduledAuditOutputResponse, UpdateScheduledAuditOutputError>) -> Void)
    /// Updates a Device Defender security profile.
    func updateSecurityProfile(input: UpdateSecurityProfileInput, completion: @escaping (ClientRuntime.SdkResult<UpdateSecurityProfileOutputResponse, UpdateSecurityProfileOutputError>) -> Void)
    /// Updates an existing stream. The stream version will be incremented by one.
    func updateStream(input: UpdateStreamInput, completion: @escaping (ClientRuntime.SdkResult<UpdateStreamOutputResponse, UpdateStreamOutputError>) -> Void)
    /// Updates the data for a thing.
    func updateThing(input: UpdateThingInput, completion: @escaping (ClientRuntime.SdkResult<UpdateThingOutputResponse, UpdateThingOutputError>) -> Void)
    /// Update a thing group.
    func updateThingGroup(input: UpdateThingGroupInput, completion: @escaping (ClientRuntime.SdkResult<UpdateThingGroupOutputResponse, UpdateThingGroupOutputError>) -> Void)
    /// Updates the groups to which the thing belongs.
    func updateThingGroupsForThing(input: UpdateThingGroupsForThingInput, completion: @escaping (ClientRuntime.SdkResult<UpdateThingGroupsForThingOutputResponse, UpdateThingGroupsForThingOutputError>) -> Void)
    /// Updates a topic rule destination. You use this to change the status, endpoint URL, or
    ///          confirmation URL of the destination.
    func updateTopicRuleDestination(input: UpdateTopicRuleDestinationInput, completion: @escaping (ClientRuntime.SdkResult<UpdateTopicRuleDestinationOutputResponse, UpdateTopicRuleDestinationOutputError>) -> Void)
    /// Validates a Device Defender security profile behaviors specification.
    func validateSecurityProfileBehaviors(input: ValidateSecurityProfileBehaviorsInput, completion: @escaping (ClientRuntime.SdkResult<ValidateSecurityProfileBehaviorsOutputResponse, ValidateSecurityProfileBehaviorsOutputError>) -> Void)
}

public enum IotClientTypes {}
