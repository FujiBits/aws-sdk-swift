// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct BatchGetFrameMetricDataInputHeadersMiddleware: Middleware {
    public let id: String = "BatchGetFrameMetricDataInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetFrameMetricDataInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetFrameMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetFrameMetricDataInput>
    public typealias MOutput = OperationOutput<BatchGetFrameMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetFrameMetricDataOutputError>
}

public struct BatchGetFrameMetricDataInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchGetFrameMetricDataInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetFrameMetricDataInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetFrameMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let period = input.operationInput.period {
            let periodQueryItem = URLQueryItem(name: "period".urlPercentEncoding(), value: String(period).urlPercentEncoding())
            input.builder.withQueryItem(periodQueryItem)
        }
        if let startTime = input.operationInput.startTime {
            let startTimeQueryItem = URLQueryItem(name: "startTime".urlPercentEncoding(), value: String(startTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(startTimeQueryItem)
        }
        if let endTime = input.operationInput.endTime {
            let endTimeQueryItem = URLQueryItem(name: "endTime".urlPercentEncoding(), value: String(endTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(endTimeQueryItem)
        }
        if let targetResolution = input.operationInput.targetResolution {
            let targetResolutionQueryItem = URLQueryItem(name: "targetResolution".urlPercentEncoding(), value: String(targetResolution.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(targetResolutionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetFrameMetricDataInput>
    public typealias MOutput = OperationOutput<BatchGetFrameMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetFrameMetricDataOutputError>
}

public struct BatchGetFrameMetricDataInputBodyMiddleware: Middleware {
    public let id: String = "BatchGetFrameMetricDataInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetFrameMetricDataInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetFrameMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetFrameMetricDataInput>
    public typealias MOutput = OperationOutput<BatchGetFrameMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetFrameMetricDataOutputError>
}

extension BatchGetFrameMetricDataInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case frameMetrics
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let frameMetrics = frameMetrics {
            var frameMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .frameMetrics)
            for framemetrics0 in frameMetrics {
                try frameMetricsContainer.encode(framemetrics0)
            }
        }
    }
}
