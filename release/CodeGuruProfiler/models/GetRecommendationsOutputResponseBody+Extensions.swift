// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetRecommendationsOutputResponseBody: Equatable {
    public let profilingGroupName: String?
    public let profileStartTime: Date?
    public let profileEndTime: Date?
    public let recommendations: [Recommendation]?
    public let anomalies: [Anomaly]?
}

extension GetRecommendationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case anomalies
        case profileEndTime
        case profileStartTime
        case profilingGroupName
        case recommendations
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let profilingGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .profilingGroupName)
        profilingGroupName = profilingGroupNameDecoded
        let profileStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .profileStartTime)
        profileStartTime = profileStartTimeDecoded
        let profileEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .profileEndTime)
        profileEndTime = profileEndTimeDecoded
        let recommendationsContainer = try containerValues.decodeIfPresent([Recommendation?].self, forKey: .recommendations)
        var recommendationsDecoded0:[Recommendation]? = nil
        if let recommendationsContainer = recommendationsContainer {
            recommendationsDecoded0 = [Recommendation]()
            for structure0 in recommendationsContainer {
                if let structure0 = structure0 {
                    recommendationsDecoded0?.append(structure0)
                }
            }
        }
        recommendations = recommendationsDecoded0
        let anomaliesContainer = try containerValues.decodeIfPresent([Anomaly?].self, forKey: .anomalies)
        var anomaliesDecoded0:[Anomaly]? = nil
        if let anomaliesContainer = anomaliesContainer {
            anomaliesDecoded0 = [Anomaly]()
            for structure0 in anomaliesContainer {
                if let structure0 = structure0 {
                    anomaliesDecoded0?.append(structure0)
                }
            }
        }
        anomalies = anomaliesDecoded0
    }
}
