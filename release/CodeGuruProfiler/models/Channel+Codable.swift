// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Channel: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eventPublishers
        case id
        case uri
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventPublishers = eventPublishers {
            var eventPublishersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventPublishers)
            for eventpublishers0 in eventPublishers {
                try eventPublishersContainer.encode(eventpublishers0.rawValue)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let uri = uri {
            try encodeContainer.encode(uri, forKey: .uri)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let uriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uri)
        uri = uriDecoded
        let eventPublishersContainer = try containerValues.decodeIfPresent(Set<EventPublisher>.self, forKey: .eventPublishers)
        var eventPublishersDecoded0:Set<EventPublisher>? = nil
        if let eventPublishersContainer = eventPublishersContainer {
            eventPublishersDecoded0 = Set<EventPublisher>()
            for string0 in eventPublishersContainer {
                eventPublishersDecoded0?.insert(string0)
            }
        }
        eventPublishers = eventPublishersDecoded0
    }
}
