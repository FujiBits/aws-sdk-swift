// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum AggregationPeriod {
    /// Period of one day.
    case p1d
    /// Period of one hour.
    case pt1h
    /// Period of five minutes.
    case pt5m
    case sdkUnknown(String)
}

extension AggregationPeriod : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AggregationPeriod] {
        return [
            .p1d,
            .pt1h,
            .pt5m,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .p1d: return "P1D"
        case .pt1h: return "PT1H"
        case .pt5m: return "PT5M"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AggregationPeriod(rawValue: rawValue) ?? AggregationPeriod.sdkUnknown(rawValue)
    }
}
