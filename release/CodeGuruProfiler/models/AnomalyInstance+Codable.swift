// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AnomalyInstance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endTime
        case id
        case startTime
        case userFeedback
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let userFeedback = userFeedback {
            try encodeContainer.encode(userFeedback, forKey: .userFeedback)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let userFeedbackDecoded = try containerValues.decodeIfPresent(UserFeedback.self, forKey: .userFeedback)
        userFeedback = userFeedbackDecoded
    }
}
