// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListProfilingGroupsOutputResponseBody: Equatable {
    public let profilingGroupNames: [String]?
    public let profilingGroups: [ProfilingGroupDescription]?
    public let nextToken: String?
}

extension ListProfilingGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case profilingGroupNames
        case profilingGroups
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let profilingGroupNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .profilingGroupNames)
        var profilingGroupNamesDecoded0:[String]? = nil
        if let profilingGroupNamesContainer = profilingGroupNamesContainer {
            profilingGroupNamesDecoded0 = [String]()
            for string0 in profilingGroupNamesContainer {
                if let string0 = string0 {
                    profilingGroupNamesDecoded0?.append(string0)
                }
            }
        }
        profilingGroupNames = profilingGroupNamesDecoded0
        let profilingGroupsContainer = try containerValues.decodeIfPresent([ProfilingGroupDescription?].self, forKey: .profilingGroups)
        var profilingGroupsDecoded0:[ProfilingGroupDescription]? = nil
        if let profilingGroupsContainer = profilingGroupsContainer {
            profilingGroupsDecoded0 = [ProfilingGroupDescription]()
            for structure0 in profilingGroupsContainer {
                if let structure0 = structure0 {
                    profilingGroupsDecoded0?.append(structure0)
                }
            }
        }
        profilingGroups = profilingGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
