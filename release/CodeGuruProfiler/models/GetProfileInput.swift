// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>The structure representing the getProfileRequest.</p>
public struct GetProfileInput: Equatable {
    /// <p>
    ///          The format of the returned profiling data. The format maps to the
    ///          <code>Accept</code> and <code>Content-Type</code> headers of the
    ///          HTTP request. You can specify one of the following:
    ///         or the default .
    ///       </p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>application/json</code> — standard JSON format
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>application/x-amzn-ion</code> — the Amazon Ion data format. For more information,
    ///                see <a href="http://amzn.github.io/ion-docs/">Amazon Ion</a>.
    ///             </p>
    ///             </li>
    ///          </ul>
    public let accept: String?
    /// <p>
    ///          The end time of the requested profile. Specify using
    ///          the ISO 8601 format. For example,
    ///          2020-06-01T13:15:02.001Z  represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.
    ///       </p>
    ///          <p>
    ///          If you specify <code>endTime</code>, then you must also specify <code>period</code>
    ///          or <code>startTime</code>, but not both.
    ///       </p>
    public let endTime: Date?
    /// <p>
    ///          The maximum depth of the stacks in the code that is represented in
    ///          the aggregated profile. For example, if CodeGuru Profiler finds a method <code>A</code>,
    ///          which calls method <code>B</code>, which calls method <code>C</code>, which
    ///          calls method <code>D</code>, then the depth is 4. If the <code>maxDepth</code> is
    ///          set to 2, then the aggregated profile contains representations of methods <code>A</code>
    ///          and <code>B</code>.
    ///       </p>
    public let maxDepth: Int?
    /// <p>
    ///          Used with <code>startTime</code> or <code>endTime</code> to specify
    ///          the time range for the returned aggregated profile. Specify using
    ///          the ISO 8601 format. For example, <code>P1DT1H1M1S</code>.
    ///       </p>
    ///
    ///          <p>
    ///          To get the latest aggregated profile, specify only <code>period</code>.
    ///       </p>
    public let period: String?
    /// <p>The name of the profiling group to get.</p>
    public let profilingGroupName: String?
    /// <p>The start time of the profile to get. Specify using
    ///          the ISO 8601 format. For example,
    ///          2020-06-01T13:15:02.001Z  represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.</p>
    ///
    ///          <p>
    ///          If you specify <code>startTime</code>, then you must also specify <code>period</code>
    ///          or <code>endTime</code>, but not both.
    ///       </p>
    public let startTime: Date?

    public init (
        accept: String? = nil,
        endTime: Date? = nil,
        maxDepth: Int? = nil,
        period: String? = nil,
        profilingGroupName: String? = nil,
        startTime: Date? = nil
    )
    {
        self.accept = accept
        self.endTime = endTime
        self.maxDepth = maxDepth
        self.period = period
        self.profilingGroupName = profilingGroupName
        self.startTime = startTime
    }
}

extension GetProfileInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetProfileInput(accept: \(String(describing: accept)), endTime: \(String(describing: endTime)), maxDepth: \(String(describing: maxDepth)), period: \(String(describing: period)), profilingGroupName: \(String(describing: profilingGroupName)), startTime: \(String(describing: startTime)))"}
}
