// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Metric: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case frameName
        case threadStates
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let frameName = frameName {
            try encodeContainer.encode(frameName, forKey: .frameName)
        }
        if let threadStates = threadStates {
            var threadStatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threadStates)
            for strings0 in threadStates {
                try threadStatesContainer.encode(strings0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let frameNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .frameName)
        frameName = frameNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(MetricType.self, forKey: .type)
        type = typeDecoded
        let threadStatesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .threadStates)
        var threadStatesDecoded0:[String]? = nil
        if let threadStatesContainer = threadStatesContainer {
            threadStatesDecoded0 = [String]()
            for string0 in threadStatesContainer {
                if let string0 = string0 {
                    threadStatesDecoded0?.append(string0)
                }
            }
        }
        threadStates = threadStatesDecoded0
    }
}
