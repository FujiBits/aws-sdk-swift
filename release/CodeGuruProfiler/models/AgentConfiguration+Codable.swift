// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AgentConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case agentParameters
        case periodInSeconds
        case shouldProfile
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentParameters = agentParameters {
            var agentParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .agentParameters)
            for (dictKey0, agentparameters0) in agentParameters {
                try agentParametersContainer.encode(agentparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let periodInSeconds = periodInSeconds {
            try encodeContainer.encode(periodInSeconds, forKey: .periodInSeconds)
        }
        if let shouldProfile = shouldProfile {
            try encodeContainer.encode(shouldProfile, forKey: .shouldProfile)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shouldProfileDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .shouldProfile)
        shouldProfile = shouldProfileDecoded
        let periodInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .periodInSeconds)
        periodInSeconds = periodInSecondsDecoded
        let agentParametersContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .agentParameters)
        var agentParametersDecoded0: [String:String]? = nil
        if let agentParametersContainer = agentParametersContainer {
            agentParametersDecoded0 = [String:String]()
            for (key0, string0) in agentParametersContainer {
                if let string0 = string0 {
                    agentParametersDecoded0?[key0] = string0
                }
            }
        }
        agentParameters = agentParametersDecoded0
    }
}
