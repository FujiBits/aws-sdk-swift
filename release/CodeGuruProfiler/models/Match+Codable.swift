// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Match: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case frameAddress
        case targetFramesIndex
        case thresholdBreachValue
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let frameAddress = frameAddress {
            try encodeContainer.encode(frameAddress, forKey: .frameAddress)
        }
        if let targetFramesIndex = targetFramesIndex {
            try encodeContainer.encode(targetFramesIndex, forKey: .targetFramesIndex)
        }
        if let thresholdBreachValue = thresholdBreachValue {
            try encodeContainer.encode(thresholdBreachValue, forKey: .thresholdBreachValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetFramesIndexDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .targetFramesIndex)
        targetFramesIndex = targetFramesIndexDecoded
        let frameAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .frameAddress)
        frameAddress = frameAddressDecoded
        let thresholdBreachValueDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .thresholdBreachValue)
        thresholdBreachValue = thresholdBreachValueDecoded
    }
}
