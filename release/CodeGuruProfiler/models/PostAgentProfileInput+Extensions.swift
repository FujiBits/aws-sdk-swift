// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PostAgentProfileInputHeadersMiddleware: Middleware {
    public let id: String = "PostAgentProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PostAgentProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<PostAgentProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentType = input.operationInput.contentType {
            input.builder.withHeader(name: "Content-Type", value: String(contentType))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PostAgentProfileInput>
    public typealias MOutput = OperationOutput<PostAgentProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PostAgentProfileOutputError>
}

public struct PostAgentProfileInputQueryItemMiddleware: Middleware {
    public let id: String = "PostAgentProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PostAgentProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<PostAgentProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let profileToken = input.operationInput.profileToken {
            let profileTokenQueryItem = URLQueryItem(name: "profileToken".urlPercentEncoding(), value: String(profileToken).urlPercentEncoding())
            input.builder.withQueryItem(profileTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PostAgentProfileInput>
    public typealias MOutput = OperationOutput<PostAgentProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PostAgentProfileOutputError>
}

public struct PostAgentProfileInputBodyMiddleware: Middleware {
    public let id: String = "PostAgentProfileInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PostAgentProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<PostAgentProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let agentProfile = input.operationInput.agentProfile {
            let data = agentProfile
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PostAgentProfileInput>
    public typealias MOutput = OperationOutput<PostAgentProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PostAgentProfileOutputError>
}

extension PostAgentProfileInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case agentProfile
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentProfile = agentProfile {
            try encodeContainer.encode(agentProfile.base64EncodedString(), forKey: .agentProfile)
        }
    }
}
