// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum MetadataField {
    /// Unique identifier for the agent instance.
    case agentId
    /// AWS requestId of the Lambda invocation.
    case awsRequestId
    /// Compute platform on which agent is running.
    case computePlatform
    /// Execution environment on which Lambda function is running.
    case executionEnvironment
    /// Function ARN that's used to invoke the Lambda function.
    case lambdaFunctionArn
    /// Memory allocated for the Lambda function.
    case lambdaMemoryLimitInMb
    /// Time in milliseconds for the previous Lambda invocation.
    case lambdaPreviousExecutionTimeInMilliseconds
    /// Time in milliseconds left before the execution times out.
    case lambdaRemainingTimeInMilliseconds
    /// Time in milliseconds between two invocations of the Lambda function.
    case lambdaTimeGapBetweenInvokesInMilliseconds
    case sdkUnknown(String)
}

extension MetadataField : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MetadataField] {
        return [
            .agentId,
            .awsRequestId,
            .computePlatform,
            .executionEnvironment,
            .lambdaFunctionArn,
            .lambdaMemoryLimitInMb,
            .lambdaPreviousExecutionTimeInMilliseconds,
            .lambdaRemainingTimeInMilliseconds,
            .lambdaTimeGapBetweenInvokesInMilliseconds,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .agentId: return "AgentId"
        case .awsRequestId: return "AwsRequestId"
        case .computePlatform: return "ComputePlatform"
        case .executionEnvironment: return "ExecutionEnvironment"
        case .lambdaFunctionArn: return "LambdaFunctionArn"
        case .lambdaMemoryLimitInMb: return "LambdaMemoryLimitInMB"
        case .lambdaPreviousExecutionTimeInMilliseconds: return "LambdaPreviousExecutionTimeInMilliseconds"
        case .lambdaRemainingTimeInMilliseconds: return "LambdaRemainingTimeInMilliseconds"
        case .lambdaTimeGapBetweenInvokesInMilliseconds: return "LambdaTimeGapBetweenInvokesInMilliseconds"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MetadataField(rawValue: rawValue) ?? MetadataField.sdkUnknown(rawValue)
    }
}
