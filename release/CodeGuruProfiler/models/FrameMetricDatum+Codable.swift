// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FrameMetricDatum: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case frameMetric
        case values
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let frameMetric = frameMetric {
            try encodeContainer.encode(frameMetric, forKey: .frameMetric)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for framemetricvalues0 in values {
                try valuesContainer.encode(framemetricvalues0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let frameMetricDecoded = try containerValues.decodeIfPresent(FrameMetric.self, forKey: .frameMetric)
        frameMetric = frameMetricDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Double?].self, forKey: .values)
        var valuesDecoded0:[Double]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Double]()
            for double0 in valuesContainer {
                if let double0 = double0 {
                    valuesDecoded0?.append(double0)
                }
            }
        }
        values = valuesDecoded0
    }
}
