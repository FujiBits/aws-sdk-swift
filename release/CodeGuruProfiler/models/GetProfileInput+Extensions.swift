// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetProfileInputHeadersMiddleware: Middleware {
    public let id: String = "GetProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<GetProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let accept = input.operationInput.accept {
            input.builder.withHeader(name: "Accept", value: String(accept))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetProfileInput>
    public typealias MOutput = OperationOutput<GetProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetProfileOutputError>
}

public struct GetProfileInputQueryItemMiddleware: Middleware {
    public let id: String = "GetProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<GetProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let maxDepth = input.operationInput.maxDepth {
            let maxDepthQueryItem = URLQueryItem(name: "maxDepth".urlPercentEncoding(), value: String(maxDepth).urlPercentEncoding())
            input.builder.withQueryItem(maxDepthQueryItem)
        }
        if let period = input.operationInput.period {
            let periodQueryItem = URLQueryItem(name: "period".urlPercentEncoding(), value: String(period).urlPercentEncoding())
            input.builder.withQueryItem(periodQueryItem)
        }
        if let startTime = input.operationInput.startTime {
            let startTimeQueryItem = URLQueryItem(name: "startTime".urlPercentEncoding(), value: String(startTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(startTimeQueryItem)
        }
        if let endTime = input.operationInput.endTime {
            let endTimeQueryItem = URLQueryItem(name: "endTime".urlPercentEncoding(), value: String(endTime.iso8601WithoutFractionalSeconds()).urlPercentEncoding())
            input.builder.withQueryItem(endTimeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetProfileInput>
    public typealias MOutput = OperationOutput<GetProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetProfileOutputError>
}

extension GetProfileInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
