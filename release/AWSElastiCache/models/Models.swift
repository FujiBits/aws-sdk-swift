// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension APICallRateForCustomerExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<APICallRateForCustomerExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The customer has exceeded the allowed rate of API calls.
public struct APICallRateForCustomerExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct APICallRateForCustomerExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension APICallRateForCustomerExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes {
    public enum AZMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case crossAz
        case singleAz
        case sdkUnknown(Swift.String)

        public static var allCases: [AZMode] {
            return [
                .crossAz,
                .singleAz,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .crossAz: return "cross-az"
            case .singleAz: return "single-az"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AZMode(rawValue: rawValue) ?? AZMode.sdkUnknown(rawValue)
        }
    }
}

extension AddTagsToResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("AddTagsToResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension AddTagsToResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of an AddTagsToResource operation.
public struct AddTagsToResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. ElastiCache resources are cluster and snapshot. For more information about ARNs, see [Amazon Resource Names (ARNs) and Amazon Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    /// This member is required.
    var resourceName: Swift.String?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    /// This member is required.
    var tags: [ElastiCacheClientTypes.Tag]?

    public init (
        resourceName: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.resourceName = resourceName
        self.tags = tags
    }
}

extension AddTagsToResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AddTagsToResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFound" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupNotFound" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFound" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidARN" : self = .invalidARNFault(try InvalidARNFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupState" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodeNotFound" : self = .reservedCacheNodeNotFoundFault(try ReservedCacheNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFoundFault" : self = .snapshotNotFoundFault(try SnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFound" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFound" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddTagsToResourceOutputError: Swift.Error, Swift.Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case invalidARNFault(InvalidARNFault)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case reservedCacheNodeNotFoundFault(ReservedCacheNodeNotFoundFault)
    case snapshotNotFoundFault(SnapshotNotFoundFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsToResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AddTagsToResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tagList = output.tagList
        } else {
            self.tagList = nil
        }
    }
}

/// Represents the output from the AddTagsToResource, ListTagsForResource, and RemoveTagsFromResource operations.
public struct AddTagsToResourceOutputResponse: Swift.Equatable {
    /// A list of tags as key-value pairs.
    var tagList: [ElastiCacheClientTypes.Tag]?

    public init (
        tagList: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

struct AddTagsToResourceOutputResponseBody: Swift.Equatable {
    let tagList: [ElastiCacheClientTypes.Tag]?
}

extension AddTagsToResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagList = "TagList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("AddTagsToResourceResult"))
        if containerValues.contains(.tagList) {
            struct KeyVal0{struct Tag{}}
            let tagListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tagList)
            if let tagListWrappedContainer = tagListWrappedContainer {
                let tagListContainer = try tagListWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.Tag].self, forKey: .member)
                var tagListBuffer:[ElastiCacheClientTypes.Tag]? = nil
                if let tagListContainer = tagListContainer {
                    tagListBuffer = [ElastiCacheClientTypes.Tag]()
                    for structureContainer0 in tagListContainer {
                        tagListBuffer?.append(structureContainer0)
                    }
                }
                tagList = tagListBuffer
            } else {
                tagList = []
            }
        } else {
            tagList = nil
        }
    }
}

extension ElastiCacheClientTypes {
    public enum AuthTokenUpdateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rotating
        case setting
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthTokenUpdateStatus] {
            return [
                .rotating,
                .setting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rotating: return "ROTATING"
            case .setting: return "SETTING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthTokenUpdateStatus(rawValue: rawValue) ?? AuthTokenUpdateStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes {
    public enum AuthTokenUpdateStrategyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case rotate
        case `set`
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthTokenUpdateStrategyType] {
            return [
                .delete,
                .rotate,
                .set,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .rotate: return "ROTATE"
            case .set: return "SET"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthTokenUpdateStrategyType(rawValue: rawValue) ?? AuthTokenUpdateStrategyType.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes.Authentication: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case passwordCount = "PasswordCount"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let passwordCount = passwordCount {
            try container.encode(passwordCount, forKey: ClientRuntime.Key("PasswordCount"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.AuthenticationType.self, forKey: .type)
        type = typeDecoded
        let passwordCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .passwordCount)
        passwordCount = passwordCountDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Indicates whether the user requires a password to authenticate.
    public struct Authentication: Swift.Equatable {
        /// The number of passwords belonging to the user. The maximum is two.
        var passwordCount: Swift.Int?
        /// Indicates whether the user requires a password to authenticate.
        var type: ElastiCacheClientTypes.AuthenticationType?

        public init (
            passwordCount: Swift.Int? = nil,
            type: ElastiCacheClientTypes.AuthenticationType? = nil
        )
        {
            self.passwordCount = passwordCount
            self.type = type
        }
    }

}

extension ElastiCacheClientTypes {
    public enum AuthenticationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noPassword
        case password
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthenticationType] {
            return [
                .noPassword,
                .password,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noPassword: return "no-password"
            case .password: return "password"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AuthenticationType(rawValue: rawValue) ?? AuthenticationType.sdkUnknown(rawValue)
        }
    }
}

extension AuthorizationAlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<AuthorizationAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified Amazon EC2 security group is already authorized for the specified cache security group.
public struct AuthorizationAlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AuthorizationAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension AuthorizationAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AuthorizationNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<AuthorizationNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified Amazon EC2 security group is not authorized for the specified cache security group.
public struct AuthorizationNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AuthorizationNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension AuthorizationNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AuthorizeCacheSecurityGroupIngressInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheSecurityGroupName = cacheSecurityGroupName {
            try container.encode(cacheSecurityGroupName, forKey: ClientRuntime.Key("CacheSecurityGroupName"))
        }
        if let eC2SecurityGroupName = eC2SecurityGroupName {
            try container.encode(eC2SecurityGroupName, forKey: ClientRuntime.Key("EC2SecurityGroupName"))
        }
        if let eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId {
            try container.encode(eC2SecurityGroupOwnerId, forKey: ClientRuntime.Key("EC2SecurityGroupOwnerId"))
        }
        try container.encode("AuthorizeCacheSecurityGroupIngress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension AuthorizeCacheSecurityGroupIngressInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of an AuthorizeCacheSecurityGroupIngress operation.
public struct AuthorizeCacheSecurityGroupIngressInput: Swift.Equatable {
    /// The cache security group that allows network ingress.
    /// This member is required.
    var cacheSecurityGroupName: Swift.String?
    /// The Amazon EC2 security group to be authorized for ingress to the cache security group.
    /// This member is required.
    var eC2SecurityGroupName: Swift.String?
    /// The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter.
    /// This member is required.
    var eC2SecurityGroupOwnerId: Swift.String?

    public init (
        cacheSecurityGroupName: Swift.String? = nil,
        eC2SecurityGroupName: Swift.String? = nil,
        eC2SecurityGroupOwnerId: Swift.String? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
        self.eC2SecurityGroupName = eC2SecurityGroupName
        self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
    }
}

extension AuthorizeCacheSecurityGroupIngressOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AuthorizeCacheSecurityGroupIngressOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AuthorizationAlreadyExists" : self = .authorizationAlreadyExistsFault(try AuthorizationAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFound" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheSecurityGroupState" : self = .invalidCacheSecurityGroupStateFault(try InvalidCacheSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AuthorizeCacheSecurityGroupIngressOutputError: Swift.Error, Swift.Equatable {
    case authorizationAlreadyExistsFault(AuthorizationAlreadyExistsFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case invalidCacheSecurityGroupStateFault(InvalidCacheSecurityGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AuthorizeCacheSecurityGroupIngressOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AuthorizeCacheSecurityGroupIngressOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheSecurityGroup = output.cacheSecurityGroup
        } else {
            self.cacheSecurityGroup = nil
        }
    }
}

public struct AuthorizeCacheSecurityGroupIngressOutputResponse: Swift.Equatable {
    /// Represents the output of one of the following operations:
    ///
    /// * AuthorizeCacheSecurityGroupIngress
    ///
    /// * CreateCacheSecurityGroup
    ///
    /// * RevokeCacheSecurityGroupIngress
    var cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup?

    public init (
        cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup? = nil
    )
    {
        self.cacheSecurityGroup = cacheSecurityGroup
    }
}

struct AuthorizeCacheSecurityGroupIngressOutputResponseBody: Swift.Equatable {
    let cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup?
}

extension AuthorizeCacheSecurityGroupIngressOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheSecurityGroup = "CacheSecurityGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("AuthorizeCacheSecurityGroupIngressResult"))
        let cacheSecurityGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.CacheSecurityGroup.self, forKey: .cacheSecurityGroup)
        cacheSecurityGroup = cacheSecurityGroupDecoded
    }
}

extension ElastiCacheClientTypes {
    public enum AutomaticFailoverStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case disabling
        case enabled
        case enabling
        case sdkUnknown(Swift.String)

        public static var allCases: [AutomaticFailoverStatus] {
            return [
                .disabled,
                .disabling,
                .enabled,
                .enabling,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .disabling: return "disabling"
            case .enabled: return "enabled"
            case .enabling: return "enabling"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutomaticFailoverStatus(rawValue: rawValue) ?? AutomaticFailoverStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes.AvailabilityZone: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Describes an Availability Zone in which the cluster is launched.
    public struct AvailabilityZone: Swift.Equatable {
        /// The name of the Availability Zone.
        var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension BatchApplyUpdateActionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterIds = cacheClusterIds {
            var cacheClusterIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheClusterIds"))
            for (index0, string0) in cacheClusterIds.enumerated() {
                try cacheClusterIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupIds = replicationGroupIds {
            var replicationGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplicationGroupIds"))
            for (index0, string0) in replicationGroupIds.enumerated() {
                try replicationGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: ClientRuntime.Key("ServiceUpdateName"))
        }
        try container.encode("BatchApplyUpdateAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension BatchApplyUpdateActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchApplyUpdateActionInput: Swift.Equatable {
    /// The cache cluster IDs
    var cacheClusterIds: [Swift.String]?
    /// The replication group IDs
    var replicationGroupIds: [Swift.String]?
    /// The unique ID of the service update
    /// This member is required.
    var serviceUpdateName: Swift.String?

    public init (
        cacheClusterIds: [Swift.String]? = nil,
        replicationGroupIds: [Swift.String]? = nil,
        serviceUpdateName: Swift.String? = nil
    )
    {
        self.cacheClusterIds = cacheClusterIds
        self.replicationGroupIds = replicationGroupIds
        self.serviceUpdateName = serviceUpdateName
    }
}

extension BatchApplyUpdateActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension BatchApplyUpdateActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUpdateNotFoundFault" : self = .serviceUpdateNotFoundFault(try ServiceUpdateNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchApplyUpdateActionOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case serviceUpdateNotFoundFault(ServiceUpdateNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchApplyUpdateActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchApplyUpdateActionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.processedUpdateActions = output.processedUpdateActions
            self.unprocessedUpdateActions = output.unprocessedUpdateActions
        } else {
            self.processedUpdateActions = nil
            self.unprocessedUpdateActions = nil
        }
    }
}

public struct BatchApplyUpdateActionOutputResponse: Swift.Equatable {
    /// Update actions that have been processed successfully
    var processedUpdateActions: [ElastiCacheClientTypes.ProcessedUpdateAction]?
    /// Update actions that haven't been processed successfully
    var unprocessedUpdateActions: [ElastiCacheClientTypes.UnprocessedUpdateAction]?

    public init (
        processedUpdateActions: [ElastiCacheClientTypes.ProcessedUpdateAction]? = nil,
        unprocessedUpdateActions: [ElastiCacheClientTypes.UnprocessedUpdateAction]? = nil
    )
    {
        self.processedUpdateActions = processedUpdateActions
        self.unprocessedUpdateActions = unprocessedUpdateActions
    }
}

struct BatchApplyUpdateActionOutputResponseBody: Swift.Equatable {
    let processedUpdateActions: [ElastiCacheClientTypes.ProcessedUpdateAction]?
    let unprocessedUpdateActions: [ElastiCacheClientTypes.UnprocessedUpdateAction]?
}

extension BatchApplyUpdateActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processedUpdateActions = "ProcessedUpdateActions"
        case unprocessedUpdateActions = "UnprocessedUpdateActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("BatchApplyUpdateActionResult"))
        if containerValues.contains(.processedUpdateActions) {
            struct KeyVal0{struct ProcessedUpdateAction{}}
            let processedUpdateActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ProcessedUpdateAction>.CodingKeys.self, forKey: .processedUpdateActions)
            if let processedUpdateActionsWrappedContainer = processedUpdateActionsWrappedContainer {
                let processedUpdateActionsContainer = try processedUpdateActionsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.ProcessedUpdateAction].self, forKey: .member)
                var processedUpdateActionsBuffer:[ElastiCacheClientTypes.ProcessedUpdateAction]? = nil
                if let processedUpdateActionsContainer = processedUpdateActionsContainer {
                    processedUpdateActionsBuffer = [ElastiCacheClientTypes.ProcessedUpdateAction]()
                    for structureContainer0 in processedUpdateActionsContainer {
                        processedUpdateActionsBuffer?.append(structureContainer0)
                    }
                }
                processedUpdateActions = processedUpdateActionsBuffer
            } else {
                processedUpdateActions = []
            }
        } else {
            processedUpdateActions = nil
        }
        if containerValues.contains(.unprocessedUpdateActions) {
            struct KeyVal0{struct UnprocessedUpdateAction{}}
            let unprocessedUpdateActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.UnprocessedUpdateAction>.CodingKeys.self, forKey: .unprocessedUpdateActions)
            if let unprocessedUpdateActionsWrappedContainer = unprocessedUpdateActionsWrappedContainer {
                let unprocessedUpdateActionsContainer = try unprocessedUpdateActionsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.UnprocessedUpdateAction].self, forKey: .member)
                var unprocessedUpdateActionsBuffer:[ElastiCacheClientTypes.UnprocessedUpdateAction]? = nil
                if let unprocessedUpdateActionsContainer = unprocessedUpdateActionsContainer {
                    unprocessedUpdateActionsBuffer = [ElastiCacheClientTypes.UnprocessedUpdateAction]()
                    for structureContainer0 in unprocessedUpdateActionsContainer {
                        unprocessedUpdateActionsBuffer?.append(structureContainer0)
                    }
                }
                unprocessedUpdateActions = unprocessedUpdateActionsBuffer
            } else {
                unprocessedUpdateActions = []
            }
        } else {
            unprocessedUpdateActions = nil
        }
    }
}

extension BatchStopUpdateActionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterIds = cacheClusterIds {
            var cacheClusterIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheClusterIds"))
            for (index0, string0) in cacheClusterIds.enumerated() {
                try cacheClusterIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupIds = replicationGroupIds {
            var replicationGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplicationGroupIds"))
            for (index0, string0) in replicationGroupIds.enumerated() {
                try replicationGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: ClientRuntime.Key("ServiceUpdateName"))
        }
        try container.encode("BatchStopUpdateAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension BatchStopUpdateActionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchStopUpdateActionInput: Swift.Equatable {
    /// The cache cluster IDs
    var cacheClusterIds: [Swift.String]?
    /// The replication group IDs
    var replicationGroupIds: [Swift.String]?
    /// The unique ID of the service update
    /// This member is required.
    var serviceUpdateName: Swift.String?

    public init (
        cacheClusterIds: [Swift.String]? = nil,
        replicationGroupIds: [Swift.String]? = nil,
        serviceUpdateName: Swift.String? = nil
    )
    {
        self.cacheClusterIds = cacheClusterIds
        self.replicationGroupIds = replicationGroupIds
        self.serviceUpdateName = serviceUpdateName
    }
}

extension BatchStopUpdateActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension BatchStopUpdateActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUpdateNotFoundFault" : self = .serviceUpdateNotFoundFault(try ServiceUpdateNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchStopUpdateActionOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case serviceUpdateNotFoundFault(ServiceUpdateNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchStopUpdateActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchStopUpdateActionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.processedUpdateActions = output.processedUpdateActions
            self.unprocessedUpdateActions = output.unprocessedUpdateActions
        } else {
            self.processedUpdateActions = nil
            self.unprocessedUpdateActions = nil
        }
    }
}

public struct BatchStopUpdateActionOutputResponse: Swift.Equatable {
    /// Update actions that have been processed successfully
    var processedUpdateActions: [ElastiCacheClientTypes.ProcessedUpdateAction]?
    /// Update actions that haven't been processed successfully
    var unprocessedUpdateActions: [ElastiCacheClientTypes.UnprocessedUpdateAction]?

    public init (
        processedUpdateActions: [ElastiCacheClientTypes.ProcessedUpdateAction]? = nil,
        unprocessedUpdateActions: [ElastiCacheClientTypes.UnprocessedUpdateAction]? = nil
    )
    {
        self.processedUpdateActions = processedUpdateActions
        self.unprocessedUpdateActions = unprocessedUpdateActions
    }
}

struct BatchStopUpdateActionOutputResponseBody: Swift.Equatable {
    let processedUpdateActions: [ElastiCacheClientTypes.ProcessedUpdateAction]?
    let unprocessedUpdateActions: [ElastiCacheClientTypes.UnprocessedUpdateAction]?
}

extension BatchStopUpdateActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processedUpdateActions = "ProcessedUpdateActions"
        case unprocessedUpdateActions = "UnprocessedUpdateActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("BatchStopUpdateActionResult"))
        if containerValues.contains(.processedUpdateActions) {
            struct KeyVal0{struct ProcessedUpdateAction{}}
            let processedUpdateActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ProcessedUpdateAction>.CodingKeys.self, forKey: .processedUpdateActions)
            if let processedUpdateActionsWrappedContainer = processedUpdateActionsWrappedContainer {
                let processedUpdateActionsContainer = try processedUpdateActionsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.ProcessedUpdateAction].self, forKey: .member)
                var processedUpdateActionsBuffer:[ElastiCacheClientTypes.ProcessedUpdateAction]? = nil
                if let processedUpdateActionsContainer = processedUpdateActionsContainer {
                    processedUpdateActionsBuffer = [ElastiCacheClientTypes.ProcessedUpdateAction]()
                    for structureContainer0 in processedUpdateActionsContainer {
                        processedUpdateActionsBuffer?.append(structureContainer0)
                    }
                }
                processedUpdateActions = processedUpdateActionsBuffer
            } else {
                processedUpdateActions = []
            }
        } else {
            processedUpdateActions = nil
        }
        if containerValues.contains(.unprocessedUpdateActions) {
            struct KeyVal0{struct UnprocessedUpdateAction{}}
            let unprocessedUpdateActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.UnprocessedUpdateAction>.CodingKeys.self, forKey: .unprocessedUpdateActions)
            if let unprocessedUpdateActionsWrappedContainer = unprocessedUpdateActionsWrappedContainer {
                let unprocessedUpdateActionsContainer = try unprocessedUpdateActionsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.UnprocessedUpdateAction].self, forKey: .member)
                var unprocessedUpdateActionsBuffer:[ElastiCacheClientTypes.UnprocessedUpdateAction]? = nil
                if let unprocessedUpdateActionsContainer = unprocessedUpdateActionsContainer {
                    unprocessedUpdateActionsBuffer = [ElastiCacheClientTypes.UnprocessedUpdateAction]()
                    for structureContainer0 in unprocessedUpdateActionsContainer {
                        unprocessedUpdateActionsBuffer?.append(structureContainer0)
                    }
                }
                unprocessedUpdateActions = unprocessedUpdateActionsBuffer
            } else {
                unprocessedUpdateActions = []
            }
        } else {
            unprocessedUpdateActions = nil
        }
    }
}

extension ElastiCacheClientTypes.CacheCluster: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case atRestEncryptionEnabled = "AtRestEncryptionEnabled"
        case authTokenEnabled = "AuthTokenEnabled"
        case authTokenLastModifiedDate = "AuthTokenLastModifiedDate"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case cacheClusterCreateTime = "CacheClusterCreateTime"
        case cacheClusterId = "CacheClusterId"
        case cacheClusterStatus = "CacheClusterStatus"
        case cacheNodeType = "CacheNodeType"
        case cacheNodes = "CacheNodes"
        case cacheParameterGroup = "CacheParameterGroup"
        case cacheSecurityGroups = "CacheSecurityGroups"
        case cacheSubnetGroupName = "CacheSubnetGroupName"
        case clientDownloadLandingPage = "ClientDownloadLandingPage"
        case configurationEndpoint = "ConfigurationEndpoint"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case logDeliveryConfigurations = "LogDeliveryConfigurations"
        case notificationConfiguration = "NotificationConfiguration"
        case numCacheNodes = "NumCacheNodes"
        case pendingModifiedValues = "PendingModifiedValues"
        case preferredAvailabilityZone = "PreferredAvailabilityZone"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case preferredOutpostArn = "PreferredOutpostArn"
        case replicationGroupId = "ReplicationGroupId"
        case replicationGroupLogDeliveryEnabled = "ReplicationGroupLogDeliveryEnabled"
        case securityGroups = "SecurityGroups"
        case snapshotRetentionLimit = "SnapshotRetentionLimit"
        case snapshotWindow = "SnapshotWindow"
        case transitEncryptionEnabled = "TransitEncryptionEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: ClientRuntime.Key("ARN"))
        }
        if let atRestEncryptionEnabled = atRestEncryptionEnabled {
            try container.encode(atRestEncryptionEnabled, forKey: ClientRuntime.Key("AtRestEncryptionEnabled"))
        }
        if let authTokenEnabled = authTokenEnabled {
            try container.encode(authTokenEnabled, forKey: ClientRuntime.Key("AuthTokenEnabled"))
        }
        if let authTokenLastModifiedDate = authTokenLastModifiedDate {
            try container.encode(ClientRuntime.TimestampWrapper(authTokenLastModifiedDate, format: .dateTime), forKey: ClientRuntime.Key("authTokenLastModifiedDate"))
        }
        if autoMinorVersionUpgrade != false {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let cacheClusterCreateTime = cacheClusterCreateTime {
            try container.encode(ClientRuntime.TimestampWrapper(cacheClusterCreateTime, format: .dateTime), forKey: ClientRuntime.Key("cacheClusterCreateTime"))
        }
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let cacheClusterStatus = cacheClusterStatus {
            try container.encode(cacheClusterStatus, forKey: ClientRuntime.Key("CacheClusterStatus"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let cacheNodes = cacheNodes {
            var cacheNodesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheNodes"))
            for (index0, cachenode0) in cacheNodes.enumerated() {
                try cacheNodesContainer.encode(cachenode0, forKey: ClientRuntime.Key("CacheNode.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheParameterGroup = cacheParameterGroup {
            try container.encode(cacheParameterGroup, forKey: ClientRuntime.Key("CacheParameterGroup"))
        }
        if let cacheSecurityGroups = cacheSecurityGroups {
            var cacheSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheSecurityGroups"))
            for (index0, cachesecuritygroupmembership0) in cacheSecurityGroups.enumerated() {
                try cacheSecurityGroupsContainer.encode(cachesecuritygroupmembership0, forKey: ClientRuntime.Key("CacheSecurityGroup.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: ClientRuntime.Key("CacheSubnetGroupName"))
        }
        if let clientDownloadLandingPage = clientDownloadLandingPage {
            try container.encode(clientDownloadLandingPage, forKey: ClientRuntime.Key("ClientDownloadLandingPage"))
        }
        if let configurationEndpoint = configurationEndpoint {
            try container.encode(configurationEndpoint, forKey: ClientRuntime.Key("ConfigurationEndpoint"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogDeliveryConfigurations"))
            for (index0, logdeliveryconfiguration0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(logdeliveryconfiguration0, forKey: ClientRuntime.Key("LogDeliveryConfiguration.\(index0.advanced(by: 1))"))
            }
        }
        if let notificationConfiguration = notificationConfiguration {
            try container.encode(notificationConfiguration, forKey: ClientRuntime.Key("NotificationConfiguration"))
        }
        if let numCacheNodes = numCacheNodes {
            try container.encode(numCacheNodes, forKey: ClientRuntime.Key("NumCacheNodes"))
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try container.encode(pendingModifiedValues, forKey: ClientRuntime.Key("PendingModifiedValues"))
        }
        if let preferredAvailabilityZone = preferredAvailabilityZone {
            try container.encode(preferredAvailabilityZone, forKey: ClientRuntime.Key("PreferredAvailabilityZone"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let preferredOutpostArn = preferredOutpostArn {
            try container.encode(preferredOutpostArn, forKey: ClientRuntime.Key("PreferredOutpostArn"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if replicationGroupLogDeliveryEnabled != false {
            try container.encode(replicationGroupLogDeliveryEnabled, forKey: ClientRuntime.Key("ReplicationGroupLogDeliveryEnabled"))
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
            for (index0, securitygroupmembership0) in securityGroups.enumerated() {
                try securityGroupsContainer.encode(securitygroupmembership0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: ClientRuntime.Key("SnapshotRetentionLimit"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: ClientRuntime.Key("SnapshotWindow"))
        }
        if let transitEncryptionEnabled = transitEncryptionEnabled {
            try container.encode(transitEncryptionEnabled, forKey: ClientRuntime.Key("TransitEncryptionEnabled"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let configurationEndpointDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Endpoint.self, forKey: .configurationEndpoint)
        configurationEndpoint = configurationEndpointDecoded
        let clientDownloadLandingPageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientDownloadLandingPage)
        clientDownloadLandingPage = clientDownloadLandingPageDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let cacheClusterStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterStatus)
        cacheClusterStatus = cacheClusterStatusDecoded
        let numCacheNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numCacheNodes)
        numCacheNodes = numCacheNodesDecoded
        let preferredAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredAvailabilityZone)
        preferredAvailabilityZone = preferredAvailabilityZoneDecoded
        let preferredOutpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredOutpostArn)
        preferredOutpostArn = preferredOutpostArnDecoded
        let cacheClusterCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterCreateTime)
        var cacheClusterCreateTimeBuffer:ClientRuntime.Date? = nil
        if let cacheClusterCreateTimeDecoded = cacheClusterCreateTimeDecoded {
            cacheClusterCreateTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(cacheClusterCreateTimeDecoded, format: .dateTime)
        }
        cacheClusterCreateTime = cacheClusterCreateTimeBuffer
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.PendingModifiedValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        let notificationConfigurationDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.NotificationConfiguration.self, forKey: .notificationConfiguration)
        notificationConfiguration = notificationConfigurationDecoded
        if containerValues.contains(.cacheSecurityGroups) {
            struct KeyVal0{struct CacheSecurityGroup{}}
            let cacheSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheSecurityGroup>.CodingKeys.self, forKey: .cacheSecurityGroups)
            if let cacheSecurityGroupsWrappedContainer = cacheSecurityGroupsWrappedContainer {
                let cacheSecurityGroupsContainer = try cacheSecurityGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheSecurityGroupMembership].self, forKey: .member)
                var cacheSecurityGroupsBuffer:[ElastiCacheClientTypes.CacheSecurityGroupMembership]? = nil
                if let cacheSecurityGroupsContainer = cacheSecurityGroupsContainer {
                    cacheSecurityGroupsBuffer = [ElastiCacheClientTypes.CacheSecurityGroupMembership]()
                    for structureContainer0 in cacheSecurityGroupsContainer {
                        cacheSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                cacheSecurityGroups = cacheSecurityGroupsBuffer
            } else {
                cacheSecurityGroups = []
            }
        } else {
            cacheSecurityGroups = nil
        }
        let cacheParameterGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.CacheParameterGroupStatus.self, forKey: .cacheParameterGroup)
        cacheParameterGroup = cacheParameterGroupDecoded
        let cacheSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheSubnetGroupName)
        cacheSubnetGroupName = cacheSubnetGroupNameDecoded
        if containerValues.contains(.cacheNodes) {
            struct KeyVal0{struct CacheNode{}}
            let cacheNodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNode>.CodingKeys.self, forKey: .cacheNodes)
            if let cacheNodesWrappedContainer = cacheNodesWrappedContainer {
                let cacheNodesContainer = try cacheNodesWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheNode].self, forKey: .member)
                var cacheNodesBuffer:[ElastiCacheClientTypes.CacheNode]? = nil
                if let cacheNodesContainer = cacheNodesContainer {
                    cacheNodesBuffer = [ElastiCacheClientTypes.CacheNode]()
                    for structureContainer0 in cacheNodesContainer {
                        cacheNodesBuffer?.append(structureContainer0)
                    }
                }
                cacheNodes = cacheNodesBuffer
            } else {
                cacheNodes = []
            }
        } else {
            cacheNodes = nil
        }
        let autoMinorVersionUpgradeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoMinorVersionUpgrade)
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
        if containerValues.contains(.securityGroups) {
            struct KeyVal0{struct member{}}
            let securityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .securityGroups)
            if let securityGroupsWrappedContainer = securityGroupsWrappedContainer {
                let securityGroupsContainer = try securityGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.SecurityGroupMembership].self, forKey: .member)
                var securityGroupsBuffer:[ElastiCacheClientTypes.SecurityGroupMembership]? = nil
                if let securityGroupsContainer = securityGroupsContainer {
                    securityGroupsBuffer = [ElastiCacheClientTypes.SecurityGroupMembership]()
                    for structureContainer0 in securityGroupsContainer {
                        securityGroupsBuffer?.append(structureContainer0)
                    }
                }
                securityGroups = securityGroupsBuffer
            } else {
                securityGroups = []
            }
        } else {
            securityGroups = nil
        }
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let snapshotRetentionLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snapshotRetentionLimit)
        snapshotRetentionLimit = snapshotRetentionLimitDecoded
        let snapshotWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotWindow)
        snapshotWindow = snapshotWindowDecoded
        let authTokenEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .authTokenEnabled)
        authTokenEnabled = authTokenEnabledDecoded
        let authTokenLastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authTokenLastModifiedDate)
        var authTokenLastModifiedDateBuffer:ClientRuntime.Date? = nil
        if let authTokenLastModifiedDateDecoded = authTokenLastModifiedDateDecoded {
            authTokenLastModifiedDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(authTokenLastModifiedDateDecoded, format: .dateTime)
        }
        authTokenLastModifiedDate = authTokenLastModifiedDateBuffer
        let transitEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .transitEncryptionEnabled)
        transitEncryptionEnabled = transitEncryptionEnabledDecoded
        let atRestEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .atRestEncryptionEnabled)
        atRestEncryptionEnabled = atRestEncryptionEnabledDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let replicationGroupLogDeliveryEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .replicationGroupLogDeliveryEnabled)
        replicationGroupLogDeliveryEnabled = replicationGroupLogDeliveryEnabledDecoded
        if containerValues.contains(.logDeliveryConfigurations) {
            struct KeyVal0{struct LogDeliveryConfiguration{}}
            let logDeliveryConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.LogDeliveryConfiguration>.CodingKeys.self, forKey: .logDeliveryConfigurations)
            if let logDeliveryConfigurationsWrappedContainer = logDeliveryConfigurationsWrappedContainer {
                let logDeliveryConfigurationsContainer = try logDeliveryConfigurationsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.LogDeliveryConfiguration].self, forKey: .member)
                var logDeliveryConfigurationsBuffer:[ElastiCacheClientTypes.LogDeliveryConfiguration]? = nil
                if let logDeliveryConfigurationsContainer = logDeliveryConfigurationsContainer {
                    logDeliveryConfigurationsBuffer = [ElastiCacheClientTypes.LogDeliveryConfiguration]()
                    for structureContainer0 in logDeliveryConfigurationsContainer {
                        logDeliveryConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                logDeliveryConfigurations = logDeliveryConfigurationsBuffer
            } else {
                logDeliveryConfigurations = []
            }
        } else {
            logDeliveryConfigurations = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// Contains all of the attributes of a specific cluster.
    public struct CacheCluster: Swift.Equatable {
        /// The ARN (Amazon Resource Name) of the cache cluster.
        var aRN: Swift.String?
        /// A flag that enables encryption at-rest when set to true. You cannot modify the value of AtRestEncryptionEnabled after the cluster is created. To enable at-rest encryption on a cluster you must set AtRestEncryptionEnabled to true when you create a cluster. Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6, 4.x or later. Default: false
        var atRestEncryptionEnabled: Swift.Bool?
        /// A flag that enables using an AuthToken (password) when issuing Redis commands. Default: false
        var authTokenEnabled: Swift.Bool?
        /// The date the auth token was last modified
        var authTokenLastModifiedDate: ClientRuntime.Date?
        ///  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
        var autoMinorVersionUpgrade: Swift.Bool
        /// The date and time when the cluster was created.
        var cacheClusterCreateTime: ClientRuntime.Date?
        /// The user-supplied identifier of the cluster. This identifier is a unique key that identifies a cluster.
        var cacheClusterId: Swift.String?
        /// The current state of this cluster, one of the following values: available, creating, deleted, deleting, incompatible-network, modifying, rebooting cluster nodes, restore-failed, or snapshotting.
        var cacheClusterStatus: Swift.String?
        /// The name of the compute and memory capacity node type for the cluster. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
        ///
        /// * General purpose:
        ///
        /// * Current generation: M6g node types: (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
        ///
        /// * Previous generation: (not recommended) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
        ///
        ///
        ///
        ///
        /// * Compute optimized:
        ///
        /// * Previous generation: (not recommended) C1 node types: cache.c1.xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized with data tiering:
        ///
        /// * Current generation: R6gd node types (available only for Redis engine version 6.2 onward). cache.r6gd.xlarge, cache.r6gd.2xlarge, cache.r6gd.4xlarge, cache.r6gd.8xlarge, cache.r6gd.12xlarge, cache.r6gd.16xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized:
        ///
        /// * Current generation: R6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
        ///
        /// * Previous generation: (not recommended) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
        ///
        ///
        /// cache.r3.4xlarge, cache.r3.8xlarge
        ///
        ///
        ///
        ///
        ///
        /// Additional node type info
        ///
        /// * All current generation instance types are created in Amazon VPC by default.
        ///
        /// * Redis append-only files (AOF) are not supported for T1 or T2 instances.
        ///
        /// * Redis Multi-AZ with automatic failover is not supported on T1 instances.
        ///
        /// * Redis configuration variables appendonly and appendfsync are not supported on Redis version 2.8.22 and later.
        var cacheNodeType: Swift.String?
        /// A list of cache nodes that are members of the cluster.
        var cacheNodes: [ElastiCacheClientTypes.CacheNode]?
        /// Status of the cache parameter group.
        var cacheParameterGroup: ElastiCacheClientTypes.CacheParameterGroupStatus?
        /// A list of cache security group elements, composed of name and status sub-elements.
        var cacheSecurityGroups: [ElastiCacheClientTypes.CacheSecurityGroupMembership]?
        /// The name of the cache subnet group associated with the cluster.
        var cacheSubnetGroupName: Swift.String?
        /// The URL of the web page where you can download the latest ElastiCache client library.
        var clientDownloadLandingPage: Swift.String?
        /// Represents a Memcached cluster endpoint which can be used by an application to connect to any node in the cluster. The configuration endpoint will always have .cfg in it. Example: mem-3.9dvc4r.cfg.usw2.cache.amazonaws.com:11211
        var configurationEndpoint: ElastiCacheClientTypes.Endpoint?
        /// The name of the cache engine (memcached or redis) to be used for this cluster.
        var engine: Swift.String?
        /// The version of the cache engine that is used in this cluster.
        var engineVersion: Swift.String?
        /// Returns the destination, format and type of the logs.
        var logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfiguration]?
        /// Describes a notification topic and its status. Notification topics are used for publishing ElastiCache events to subscribers using Amazon Simple Notification Service (SNS).
        var notificationConfiguration: ElastiCacheClientTypes.NotificationConfiguration?
        /// The number of cache nodes in the cluster. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.
        var numCacheNodes: Swift.Int?
        /// A group of settings that are applied to the cluster in the future, or that are currently being applied.
        var pendingModifiedValues: ElastiCacheClientTypes.PendingModifiedValues?
        /// The name of the Availability Zone in which the cluster is located or "Multiple" if the cache nodes are located in different Availability Zones.
        var preferredAvailabilityZone: Swift.String?
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:
        ///
        /// * sun
        ///
        /// * mon
        ///
        /// * tue
        ///
        /// * wed
        ///
        /// * thu
        ///
        /// * fri
        ///
        /// * sat
        ///
        ///
        /// Example: sun:23:00-mon:01:30
        var preferredMaintenanceWindow: Swift.String?
        /// The outpost ARN in which the cache cluster is created.
        var preferredOutpostArn: Swift.String?
        /// The replication group to which this cluster belongs. If this field is empty, the cluster is not associated with any replication group.
        var replicationGroupId: Swift.String?
        /// A boolean value indicating whether log delivery is enabled for the replication group.
        var replicationGroupLogDeliveryEnabled: Swift.Bool
        /// A list of VPC Security Groups associated with the cluster.
        var securityGroups: [ElastiCacheClientTypes.SecurityGroupMembership]?
        /// The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
        var snapshotRetentionLimit: Swift.Int?
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. Example: 05:00-09:00
        var snapshotWindow: Swift.String?
        /// A flag that enables in-transit encryption when set to true. You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster. Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6, 4.x or later. Default: false
        var transitEncryptionEnabled: Swift.Bool?

        public init (
            aRN: Swift.String? = nil,
            atRestEncryptionEnabled: Swift.Bool? = nil,
            authTokenEnabled: Swift.Bool? = nil,
            authTokenLastModifiedDate: ClientRuntime.Date? = nil,
            autoMinorVersionUpgrade: Swift.Bool = false,
            cacheClusterCreateTime: ClientRuntime.Date? = nil,
            cacheClusterId: Swift.String? = nil,
            cacheClusterStatus: Swift.String? = nil,
            cacheNodeType: Swift.String? = nil,
            cacheNodes: [ElastiCacheClientTypes.CacheNode]? = nil,
            cacheParameterGroup: ElastiCacheClientTypes.CacheParameterGroupStatus? = nil,
            cacheSecurityGroups: [ElastiCacheClientTypes.CacheSecurityGroupMembership]? = nil,
            cacheSubnetGroupName: Swift.String? = nil,
            clientDownloadLandingPage: Swift.String? = nil,
            configurationEndpoint: ElastiCacheClientTypes.Endpoint? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfiguration]? = nil,
            notificationConfiguration: ElastiCacheClientTypes.NotificationConfiguration? = nil,
            numCacheNodes: Swift.Int? = nil,
            pendingModifiedValues: ElastiCacheClientTypes.PendingModifiedValues? = nil,
            preferredAvailabilityZone: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            preferredOutpostArn: Swift.String? = nil,
            replicationGroupId: Swift.String? = nil,
            replicationGroupLogDeliveryEnabled: Swift.Bool = false,
            securityGroups: [ElastiCacheClientTypes.SecurityGroupMembership]? = nil,
            snapshotRetentionLimit: Swift.Int? = nil,
            snapshotWindow: Swift.String? = nil,
            transitEncryptionEnabled: Swift.Bool? = nil
        )
        {
            self.aRN = aRN
            self.atRestEncryptionEnabled = atRestEncryptionEnabled
            self.authTokenEnabled = authTokenEnabled
            self.authTokenLastModifiedDate = authTokenLastModifiedDate
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.cacheClusterCreateTime = cacheClusterCreateTime
            self.cacheClusterId = cacheClusterId
            self.cacheClusterStatus = cacheClusterStatus
            self.cacheNodeType = cacheNodeType
            self.cacheNodes = cacheNodes
            self.cacheParameterGroup = cacheParameterGroup
            self.cacheSecurityGroups = cacheSecurityGroups
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.clientDownloadLandingPage = clientDownloadLandingPage
            self.configurationEndpoint = configurationEndpoint
            self.engine = engine
            self.engineVersion = engineVersion
            self.logDeliveryConfigurations = logDeliveryConfigurations
            self.notificationConfiguration = notificationConfiguration
            self.numCacheNodes = numCacheNodes
            self.pendingModifiedValues = pendingModifiedValues
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.preferredOutpostArn = preferredOutpostArn
            self.replicationGroupId = replicationGroupId
            self.replicationGroupLogDeliveryEnabled = replicationGroupLogDeliveryEnabled
            self.securityGroups = securityGroups
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.snapshotWindow = snapshotWindow
            self.transitEncryptionEnabled = transitEncryptionEnabled
        }
    }

}

extension CacheClusterAlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CacheClusterAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You already have a cluster with the given identifier.
public struct CacheClusterAlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CacheClusterAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CacheClusterAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheClusterNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CacheClusterNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested cluster ID does not refer to an existing cluster.
public struct CacheClusterNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CacheClusterNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CacheClusterNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.CacheEngineVersion: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheEngineDescription = "CacheEngineDescription"
        case cacheEngineVersionDescription = "CacheEngineVersionDescription"
        case cacheParameterGroupFamily = "CacheParameterGroupFamily"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheEngineDescription = cacheEngineDescription {
            try container.encode(cacheEngineDescription, forKey: ClientRuntime.Key("CacheEngineDescription"))
        }
        if let cacheEngineVersionDescription = cacheEngineVersionDescription {
            try container.encode(cacheEngineVersionDescription, forKey: ClientRuntime.Key("CacheEngineVersionDescription"))
        }
        if let cacheParameterGroupFamily = cacheParameterGroupFamily {
            try container.encode(cacheParameterGroupFamily, forKey: ClientRuntime.Key("CacheParameterGroupFamily"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let cacheParameterGroupFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheParameterGroupFamily)
        cacheParameterGroupFamily = cacheParameterGroupFamilyDecoded
        let cacheEngineDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheEngineDescription)
        cacheEngineDescription = cacheEngineDescriptionDecoded
        let cacheEngineVersionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheEngineVersionDescription)
        cacheEngineVersionDescription = cacheEngineVersionDescriptionDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Provides all of the details about a particular cache engine version.
    public struct CacheEngineVersion: Swift.Equatable {
        /// The description of the cache engine.
        var cacheEngineDescription: Swift.String?
        /// The description of the cache engine version.
        var cacheEngineVersionDescription: Swift.String?
        /// The name of the cache parameter group family associated with this cache engine. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.0 | redis6.2
        var cacheParameterGroupFamily: Swift.String?
        /// The name of the cache engine.
        var engine: Swift.String?
        /// The version number of the cache engine.
        var engineVersion: Swift.String?

        public init (
            cacheEngineDescription: Swift.String? = nil,
            cacheEngineVersionDescription: Swift.String? = nil,
            cacheParameterGroupFamily: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil
        )
        {
            self.cacheEngineDescription = cacheEngineDescription
            self.cacheEngineVersionDescription = cacheEngineVersionDescription
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.engine = engine
            self.engineVersion = engineVersion
        }
    }

}

extension ElastiCacheClientTypes.CacheNode: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheNodeCreateTime = "CacheNodeCreateTime"
        case cacheNodeId = "CacheNodeId"
        case cacheNodeStatus = "CacheNodeStatus"
        case customerAvailabilityZone = "CustomerAvailabilityZone"
        case customerOutpostArn = "CustomerOutpostArn"
        case endpoint = "Endpoint"
        case parameterGroupStatus = "ParameterGroupStatus"
        case sourceCacheNodeId = "SourceCacheNodeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheNodeCreateTime = cacheNodeCreateTime {
            try container.encode(ClientRuntime.TimestampWrapper(cacheNodeCreateTime, format: .dateTime), forKey: ClientRuntime.Key("cacheNodeCreateTime"))
        }
        if let cacheNodeId = cacheNodeId {
            try container.encode(cacheNodeId, forKey: ClientRuntime.Key("CacheNodeId"))
        }
        if let cacheNodeStatus = cacheNodeStatus {
            try container.encode(cacheNodeStatus, forKey: ClientRuntime.Key("CacheNodeStatus"))
        }
        if let customerAvailabilityZone = customerAvailabilityZone {
            try container.encode(customerAvailabilityZone, forKey: ClientRuntime.Key("CustomerAvailabilityZone"))
        }
        if let customerOutpostArn = customerOutpostArn {
            try container.encode(customerOutpostArn, forKey: ClientRuntime.Key("CustomerOutpostArn"))
        }
        if let endpoint = endpoint {
            try container.encode(endpoint, forKey: ClientRuntime.Key("Endpoint"))
        }
        if let parameterGroupStatus = parameterGroupStatus {
            try container.encode(parameterGroupStatus, forKey: ClientRuntime.Key("ParameterGroupStatus"))
        }
        if let sourceCacheNodeId = sourceCacheNodeId {
            try container.encode(sourceCacheNodeId, forKey: ClientRuntime.Key("SourceCacheNodeId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeId)
        cacheNodeId = cacheNodeIdDecoded
        let cacheNodeStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeStatus)
        cacheNodeStatus = cacheNodeStatusDecoded
        let cacheNodeCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeCreateTime)
        var cacheNodeCreateTimeBuffer:ClientRuntime.Date? = nil
        if let cacheNodeCreateTimeDecoded = cacheNodeCreateTimeDecoded {
            cacheNodeCreateTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(cacheNodeCreateTimeDecoded, format: .dateTime)
        }
        cacheNodeCreateTime = cacheNodeCreateTimeBuffer
        let endpointDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Endpoint.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let parameterGroupStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupStatus)
        parameterGroupStatus = parameterGroupStatusDecoded
        let sourceCacheNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceCacheNodeId)
        sourceCacheNodeId = sourceCacheNodeIdDecoded
        let customerAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAvailabilityZone)
        customerAvailabilityZone = customerAvailabilityZoneDecoded
        let customerOutpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerOutpostArn)
        customerOutpostArn = customerOutpostArnDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Represents an individual cache node within a cluster. Each cache node runs its own instance of the cluster's protocol-compliant caching software - either Memcached or Redis. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
    ///
    /// * General purpose:
    ///
    /// * Current generation: M6g node types: (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
    ///
    /// * Previous generation: (not recommended) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
    ///
    ///
    ///
    ///
    /// * Compute optimized:
    ///
    /// * Previous generation: (not recommended) C1 node types: cache.c1.xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized with data tiering:
    ///
    /// * Current generation: R6gd node types (available only for Redis engine version 6.2 onward). cache.r6gd.xlarge, cache.r6gd.2xlarge, cache.r6gd.4xlarge, cache.r6gd.8xlarge, cache.r6gd.12xlarge, cache.r6gd.16xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized:
    ///
    /// * Current generation: R6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
    ///
    /// * Previous generation: (not recommended) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
    ///
    ///
    /// cache.r3.4xlarge, cache.r3.8xlarge
    ///
    ///
    ///
    ///
    ///
    /// Additional node type info
    ///
    /// * All current generation instance types are created in Amazon VPC by default.
    ///
    /// * Redis append-only files (AOF) are not supported for T1 or T2 instances.
    ///
    /// * Redis Multi-AZ with automatic failover is not supported on T1 instances.
    ///
    /// * Redis configuration variables appendonly and appendfsync are not supported on Redis version 2.8.22 and later.
    public struct CacheNode: Swift.Equatable {
        /// The date and time when the cache node was created.
        var cacheNodeCreateTime: ClientRuntime.Date?
        /// The cache node identifier. A node ID is a numeric identifier (0001, 0002, etc.). The combination of cluster ID and node ID uniquely identifies every cache node used in a customer's Amazon account.
        var cacheNodeId: Swift.String?
        /// The current state of this cache node, one of the following values: available, creating, rebooting, or deleting.
        var cacheNodeStatus: Swift.String?
        /// The Availability Zone where this node was created and now resides.
        var customerAvailabilityZone: Swift.String?
        /// The customer outpost ARN of the cache node.
        var customerOutpostArn: Swift.String?
        /// The hostname for connecting to this cache node.
        var endpoint: ElastiCacheClientTypes.Endpoint?
        /// The status of the parameter group applied to this cache node.
        var parameterGroupStatus: Swift.String?
        /// The ID of the primary node to which this read replica node is synchronized. If this field is empty, this node is not associated with a primary cluster.
        var sourceCacheNodeId: Swift.String?

        public init (
            cacheNodeCreateTime: ClientRuntime.Date? = nil,
            cacheNodeId: Swift.String? = nil,
            cacheNodeStatus: Swift.String? = nil,
            customerAvailabilityZone: Swift.String? = nil,
            customerOutpostArn: Swift.String? = nil,
            endpoint: ElastiCacheClientTypes.Endpoint? = nil,
            parameterGroupStatus: Swift.String? = nil,
            sourceCacheNodeId: Swift.String? = nil
        )
        {
            self.cacheNodeCreateTime = cacheNodeCreateTime
            self.cacheNodeId = cacheNodeId
            self.cacheNodeStatus = cacheNodeStatus
            self.customerAvailabilityZone = customerAvailabilityZone
            self.customerOutpostArn = customerOutpostArn
            self.endpoint = endpoint
            self.parameterGroupStatus = parameterGroupStatus
            self.sourceCacheNodeId = sourceCacheNodeId
        }
    }

}

extension ElastiCacheClientTypes.CacheNodeTypeSpecificParameter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValues = "AllowedValues"
        case cacheNodeTypeSpecificValues = "CacheNodeTypeSpecificValues"
        case changeType = "ChangeType"
        case dataType = "DataType"
        case description = "Description"
        case isModifiable = "IsModifiable"
        case minimumEngineVersion = "MinimumEngineVersion"
        case parameterName = "ParameterName"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowedValues = allowedValues {
            try container.encode(allowedValues, forKey: ClientRuntime.Key("AllowedValues"))
        }
        if let cacheNodeTypeSpecificValues = cacheNodeTypeSpecificValues {
            var cacheNodeTypeSpecificValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheNodeTypeSpecificValues"))
            for (index0, cachenodetypespecificvalue0) in cacheNodeTypeSpecificValues.enumerated() {
                try cacheNodeTypeSpecificValuesContainer.encode(cachenodetypespecificvalue0, forKey: ClientRuntime.Key("CacheNodeTypeSpecificValue.\(index0.advanced(by: 1))"))
            }
        }
        if let changeType = changeType {
            try container.encode(changeType, forKey: ClientRuntime.Key("ChangeType"))
        }
        if let dataType = dataType {
            try container.encode(dataType, forKey: ClientRuntime.Key("DataType"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if isModifiable != false {
            try container.encode(isModifiable, forKey: ClientRuntime.Key("IsModifiable"))
        }
        if let minimumEngineVersion = minimumEngineVersion {
            try container.encode(minimumEngineVersion, forKey: ClientRuntime.Key("MinimumEngineVersion"))
        }
        if let parameterName = parameterName {
            try container.encode(parameterName, forKey: ClientRuntime.Key("ParameterName"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataType)
        dataType = dataTypeDecoded
        let allowedValuesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allowedValues)
        allowedValues = allowedValuesDecoded
        let isModifiableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isModifiable)
        isModifiable = isModifiableDecoded
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        if containerValues.contains(.cacheNodeTypeSpecificValues) {
            struct KeyVal0{struct CacheNodeTypeSpecificValue{}}
            let cacheNodeTypeSpecificValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeTypeSpecificValue>.CodingKeys.self, forKey: .cacheNodeTypeSpecificValues)
            if let cacheNodeTypeSpecificValuesWrappedContainer = cacheNodeTypeSpecificValuesWrappedContainer {
                let cacheNodeTypeSpecificValuesContainer = try cacheNodeTypeSpecificValuesWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheNodeTypeSpecificValue].self, forKey: .member)
                var cacheNodeTypeSpecificValuesBuffer:[ElastiCacheClientTypes.CacheNodeTypeSpecificValue]? = nil
                if let cacheNodeTypeSpecificValuesContainer = cacheNodeTypeSpecificValuesContainer {
                    cacheNodeTypeSpecificValuesBuffer = [ElastiCacheClientTypes.CacheNodeTypeSpecificValue]()
                    for structureContainer0 in cacheNodeTypeSpecificValuesContainer {
                        cacheNodeTypeSpecificValuesBuffer?.append(structureContainer0)
                    }
                }
                cacheNodeTypeSpecificValues = cacheNodeTypeSpecificValuesBuffer
            } else {
                cacheNodeTypeSpecificValues = []
            }
        } else {
            cacheNodeTypeSpecificValues = nil
        }
        let changeTypeDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ChangeType.self, forKey: .changeType)
        changeType = changeTypeDecoded
    }
}

extension ElastiCacheClientTypes {
    /// A parameter that has a different value for each cache node type it is applied to. For example, in a Redis cluster, a cache.m1.large cache node type would have a larger maxmemory value than a cache.m1.small type.
    public struct CacheNodeTypeSpecificParameter: Swift.Equatable {
        /// The valid range of values for the parameter.
        var allowedValues: Swift.String?
        /// A list of cache node types and their corresponding values for this parameter.
        var cacheNodeTypeSpecificValues: [ElastiCacheClientTypes.CacheNodeTypeSpecificValue]?
        /// Indicates whether a change to the parameter is applied immediately or requires a reboot for the change to be applied. You can force a reboot or wait until the next maintenance window's reboot. For more information, see [Rebooting a Cluster](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html).
        var changeType: ElastiCacheClientTypes.ChangeType?
        /// The valid data type for the parameter.
        var dataType: Swift.String?
        /// A description of the parameter.
        var description: Swift.String?
        /// Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        var isModifiable: Swift.Bool
        /// The earliest cache engine version to which the parameter can apply.
        var minimumEngineVersion: Swift.String?
        /// The name of the parameter.
        var parameterName: Swift.String?
        /// The source of the parameter value.
        var source: Swift.String?

        public init (
            allowedValues: Swift.String? = nil,
            cacheNodeTypeSpecificValues: [ElastiCacheClientTypes.CacheNodeTypeSpecificValue]? = nil,
            changeType: ElastiCacheClientTypes.ChangeType? = nil,
            dataType: Swift.String? = nil,
            description: Swift.String? = nil,
            isModifiable: Swift.Bool = false,
            minimumEngineVersion: Swift.String? = nil,
            parameterName: Swift.String? = nil,
            source: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.cacheNodeTypeSpecificValues = cacheNodeTypeSpecificValues
            self.changeType = changeType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.parameterName = parameterName
            self.source = source
        }
    }

}

extension ElastiCacheClientTypes.CacheNodeTypeSpecificValue: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheNodeType = "CacheNodeType"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension ElastiCacheClientTypes {
    /// A value that applies only to a certain cache node type.
    public struct CacheNodeTypeSpecificValue: Swift.Equatable {
        /// The cache node type for which this value applies.
        var cacheNodeType: Swift.String?
        /// The value for the cache node type.
        var value: Swift.String?

        public init (
            cacheNodeType: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.cacheNodeType = cacheNodeType
            self.value = value
        }
    }

}

extension ElastiCacheClientTypes.CacheNodeUpdateStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheNodeId = "CacheNodeId"
        case nodeDeletionDate = "NodeDeletionDate"
        case nodeUpdateEndDate = "NodeUpdateEndDate"
        case nodeUpdateInitiatedBy = "NodeUpdateInitiatedBy"
        case nodeUpdateInitiatedDate = "NodeUpdateInitiatedDate"
        case nodeUpdateStartDate = "NodeUpdateStartDate"
        case nodeUpdateStatus = "NodeUpdateStatus"
        case nodeUpdateStatusModifiedDate = "NodeUpdateStatusModifiedDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheNodeId = cacheNodeId {
            try container.encode(cacheNodeId, forKey: ClientRuntime.Key("CacheNodeId"))
        }
        if let nodeDeletionDate = nodeDeletionDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeDeletionDate, format: .dateTime), forKey: ClientRuntime.Key("nodeDeletionDate"))
        }
        if let nodeUpdateEndDate = nodeUpdateEndDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeUpdateEndDate, format: .dateTime), forKey: ClientRuntime.Key("nodeUpdateEndDate"))
        }
        if let nodeUpdateInitiatedBy = nodeUpdateInitiatedBy {
            try container.encode(nodeUpdateInitiatedBy, forKey: ClientRuntime.Key("NodeUpdateInitiatedBy"))
        }
        if let nodeUpdateInitiatedDate = nodeUpdateInitiatedDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeUpdateInitiatedDate, format: .dateTime), forKey: ClientRuntime.Key("nodeUpdateInitiatedDate"))
        }
        if let nodeUpdateStartDate = nodeUpdateStartDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeUpdateStartDate, format: .dateTime), forKey: ClientRuntime.Key("nodeUpdateStartDate"))
        }
        if let nodeUpdateStatus = nodeUpdateStatus {
            try container.encode(nodeUpdateStatus, forKey: ClientRuntime.Key("NodeUpdateStatus"))
        }
        if let nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeUpdateStatusModifiedDate, format: .dateTime), forKey: ClientRuntime.Key("nodeUpdateStatusModifiedDate"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeId)
        cacheNodeId = cacheNodeIdDecoded
        let nodeUpdateStatusDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.NodeUpdateStatus.self, forKey: .nodeUpdateStatus)
        nodeUpdateStatus = nodeUpdateStatusDecoded
        let nodeDeletionDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeDeletionDate)
        var nodeDeletionDateBuffer:ClientRuntime.Date? = nil
        if let nodeDeletionDateDecoded = nodeDeletionDateDecoded {
            nodeDeletionDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeDeletionDateDecoded, format: .dateTime)
        }
        nodeDeletionDate = nodeDeletionDateBuffer
        let nodeUpdateStartDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeUpdateStartDate)
        var nodeUpdateStartDateBuffer:ClientRuntime.Date? = nil
        if let nodeUpdateStartDateDecoded = nodeUpdateStartDateDecoded {
            nodeUpdateStartDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeUpdateStartDateDecoded, format: .dateTime)
        }
        nodeUpdateStartDate = nodeUpdateStartDateBuffer
        let nodeUpdateEndDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeUpdateEndDate)
        var nodeUpdateEndDateBuffer:ClientRuntime.Date? = nil
        if let nodeUpdateEndDateDecoded = nodeUpdateEndDateDecoded {
            nodeUpdateEndDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeUpdateEndDateDecoded, format: .dateTime)
        }
        nodeUpdateEndDate = nodeUpdateEndDateBuffer
        let nodeUpdateInitiatedByDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.NodeUpdateInitiatedBy.self, forKey: .nodeUpdateInitiatedBy)
        nodeUpdateInitiatedBy = nodeUpdateInitiatedByDecoded
        let nodeUpdateInitiatedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeUpdateInitiatedDate)
        var nodeUpdateInitiatedDateBuffer:ClientRuntime.Date? = nil
        if let nodeUpdateInitiatedDateDecoded = nodeUpdateInitiatedDateDecoded {
            nodeUpdateInitiatedDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeUpdateInitiatedDateDecoded, format: .dateTime)
        }
        nodeUpdateInitiatedDate = nodeUpdateInitiatedDateBuffer
        let nodeUpdateStatusModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeUpdateStatusModifiedDate)
        var nodeUpdateStatusModifiedDateBuffer:ClientRuntime.Date? = nil
        if let nodeUpdateStatusModifiedDateDecoded = nodeUpdateStatusModifiedDateDecoded {
            nodeUpdateStatusModifiedDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeUpdateStatusModifiedDateDecoded, format: .dateTime)
        }
        nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDateBuffer
    }
}

extension ElastiCacheClientTypes {
    /// The status of the service update on the cache node
    public struct CacheNodeUpdateStatus: Swift.Equatable {
        /// The node ID of the cache cluster
        var cacheNodeId: Swift.String?
        /// The deletion date of the node
        var nodeDeletionDate: ClientRuntime.Date?
        /// The end date of the update for a node
        var nodeUpdateEndDate: ClientRuntime.Date?
        /// Reflects whether the update was initiated by the customer or automatically applied
        var nodeUpdateInitiatedBy: ElastiCacheClientTypes.NodeUpdateInitiatedBy?
        /// The date when the update is triggered
        var nodeUpdateInitiatedDate: ClientRuntime.Date?
        /// The start date of the update for a node
        var nodeUpdateStartDate: ClientRuntime.Date?
        /// The update status of the node
        var nodeUpdateStatus: ElastiCacheClientTypes.NodeUpdateStatus?
        /// The date when the NodeUpdateStatus was last modified>
        var nodeUpdateStatusModifiedDate: ClientRuntime.Date?

        public init (
            cacheNodeId: Swift.String? = nil,
            nodeDeletionDate: ClientRuntime.Date? = nil,
            nodeUpdateEndDate: ClientRuntime.Date? = nil,
            nodeUpdateInitiatedBy: ElastiCacheClientTypes.NodeUpdateInitiatedBy? = nil,
            nodeUpdateInitiatedDate: ClientRuntime.Date? = nil,
            nodeUpdateStartDate: ClientRuntime.Date? = nil,
            nodeUpdateStatus: ElastiCacheClientTypes.NodeUpdateStatus? = nil,
            nodeUpdateStatusModifiedDate: ClientRuntime.Date? = nil
        )
        {
            self.cacheNodeId = cacheNodeId
            self.nodeDeletionDate = nodeDeletionDate
            self.nodeUpdateEndDate = nodeUpdateEndDate
            self.nodeUpdateInitiatedBy = nodeUpdateInitiatedBy
            self.nodeUpdateInitiatedDate = nodeUpdateInitiatedDate
            self.nodeUpdateStartDate = nodeUpdateStartDate
            self.nodeUpdateStatus = nodeUpdateStatus
            self.nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDate
        }
    }

}

extension ElastiCacheClientTypes.CacheParameterGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case cacheParameterGroupFamily = "CacheParameterGroupFamily"
        case cacheParameterGroupName = "CacheParameterGroupName"
        case description = "Description"
        case isGlobal = "IsGlobal"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: ClientRuntime.Key("ARN"))
        }
        if let cacheParameterGroupFamily = cacheParameterGroupFamily {
            try container.encode(cacheParameterGroupFamily, forKey: ClientRuntime.Key("CacheParameterGroupFamily"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if isGlobal != false {
            try container.encode(isGlobal, forKey: ClientRuntime.Key("IsGlobal"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheParameterGroupName)
        cacheParameterGroupName = cacheParameterGroupNameDecoded
        let cacheParameterGroupFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheParameterGroupFamily)
        cacheParameterGroupFamily = cacheParameterGroupFamilyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let isGlobalDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isGlobal)
        isGlobal = isGlobalDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Represents the output of a CreateCacheParameterGroup operation.
    public struct CacheParameterGroup: Swift.Equatable {
        /// The ARN (Amazon Resource Name) of the cache parameter group.
        var aRN: Swift.String?
        /// The name of the cache parameter group family that this cache parameter group is compatible with. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.0 |
        var cacheParameterGroupFamily: Swift.String?
        /// The name of the cache parameter group.
        var cacheParameterGroupName: Swift.String?
        /// The description for this cache parameter group.
        var description: Swift.String?
        /// Indicates whether the parameter group is associated with a Global datastore
        var isGlobal: Swift.Bool

        public init (
            aRN: Swift.String? = nil,
            cacheParameterGroupFamily: Swift.String? = nil,
            cacheParameterGroupName: Swift.String? = nil,
            description: Swift.String? = nil,
            isGlobal: Swift.Bool = false
        )
        {
            self.aRN = aRN
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.cacheParameterGroupName = cacheParameterGroupName
            self.description = description
            self.isGlobal = isGlobal
        }
    }

}

extension CacheParameterGroupAlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CacheParameterGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A cache parameter group with the requested name already exists.
public struct CacheParameterGroupAlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CacheParameterGroupAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CacheParameterGroupAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheParameterGroupNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CacheParameterGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested cache parameter group name does not refer to an existing cache parameter group.
public struct CacheParameterGroupNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CacheParameterGroupNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CacheParameterGroupNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheParameterGroupQuotaExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CacheParameterGroupQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request cannot be processed because it would exceed the maximum number of cache security groups.
public struct CacheParameterGroupQuotaExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CacheParameterGroupQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CacheParameterGroupQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.CacheParameterGroupStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheNodeIdsToReboot = "CacheNodeIdsToReboot"
        case cacheParameterGroupName = "CacheParameterGroupName"
        case parameterApplyStatus = "ParameterApplyStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheNodeIdsToReboot = cacheNodeIdsToReboot {
            var cacheNodeIdsToRebootContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheNodeIdsToReboot"))
            for (index0, string0) in cacheNodeIdsToReboot.enumerated() {
                try cacheNodeIdsToRebootContainer.encode(string0, forKey: ClientRuntime.Key("CacheNodeId.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let parameterApplyStatus = parameterApplyStatus {
            try container.encode(parameterApplyStatus, forKey: ClientRuntime.Key("ParameterApplyStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheParameterGroupName)
        cacheParameterGroupName = cacheParameterGroupNameDecoded
        let parameterApplyStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterApplyStatus)
        parameterApplyStatus = parameterApplyStatusDecoded
        if containerValues.contains(.cacheNodeIdsToReboot) {
            struct KeyVal0{struct CacheNodeId{}}
            let cacheNodeIdsToRebootWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeId>.CodingKeys.self, forKey: .cacheNodeIdsToReboot)
            if let cacheNodeIdsToRebootWrappedContainer = cacheNodeIdsToRebootWrappedContainer {
                let cacheNodeIdsToRebootContainer = try cacheNodeIdsToRebootWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var cacheNodeIdsToRebootBuffer:[Swift.String]? = nil
                if let cacheNodeIdsToRebootContainer = cacheNodeIdsToRebootContainer {
                    cacheNodeIdsToRebootBuffer = [Swift.String]()
                    for stringContainer0 in cacheNodeIdsToRebootContainer {
                        cacheNodeIdsToRebootBuffer?.append(stringContainer0)
                    }
                }
                cacheNodeIdsToReboot = cacheNodeIdsToRebootBuffer
            } else {
                cacheNodeIdsToReboot = []
            }
        } else {
            cacheNodeIdsToReboot = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// Status of the cache parameter group.
    public struct CacheParameterGroupStatus: Swift.Equatable {
        /// A list of the cache node IDs which need to be rebooted for parameter changes to be applied. A node ID is a numeric identifier (0001, 0002, etc.).
        var cacheNodeIdsToReboot: [Swift.String]?
        /// The name of the cache parameter group.
        var cacheParameterGroupName: Swift.String?
        /// The status of parameter updates.
        var parameterApplyStatus: Swift.String?

        public init (
            cacheNodeIdsToReboot: [Swift.String]? = nil,
            cacheParameterGroupName: Swift.String? = nil,
            parameterApplyStatus: Swift.String? = nil
        )
        {
            self.cacheNodeIdsToReboot = cacheNodeIdsToReboot
            self.cacheParameterGroupName = cacheParameterGroupName
            self.parameterApplyStatus = parameterApplyStatus
        }
    }

}

extension ElastiCacheClientTypes.CacheSecurityGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case cacheSecurityGroupName = "CacheSecurityGroupName"
        case description = "Description"
        case eC2SecurityGroups = "EC2SecurityGroups"
        case ownerId = "OwnerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: ClientRuntime.Key("ARN"))
        }
        if let cacheSecurityGroupName = cacheSecurityGroupName {
            try container.encode(cacheSecurityGroupName, forKey: ClientRuntime.Key("CacheSecurityGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let eC2SecurityGroups = eC2SecurityGroups {
            var eC2SecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EC2SecurityGroups"))
            for (index0, ec2securitygroup0) in eC2SecurityGroups.enumerated() {
                try eC2SecurityGroupsContainer.encode(ec2securitygroup0, forKey: ClientRuntime.Key("EC2SecurityGroup.\(index0.advanced(by: 1))"))
            }
        }
        if let ownerId = ownerId {
            try container.encode(ownerId, forKey: ClientRuntime.Key("OwnerId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let cacheSecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheSecurityGroupName)
        cacheSecurityGroupName = cacheSecurityGroupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.eC2SecurityGroups) {
            struct KeyVal0{struct EC2SecurityGroup{}}
            let eC2SecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.EC2SecurityGroup>.CodingKeys.self, forKey: .eC2SecurityGroups)
            if let eC2SecurityGroupsWrappedContainer = eC2SecurityGroupsWrappedContainer {
                let eC2SecurityGroupsContainer = try eC2SecurityGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.EC2SecurityGroup].self, forKey: .member)
                var eC2SecurityGroupsBuffer:[ElastiCacheClientTypes.EC2SecurityGroup]? = nil
                if let eC2SecurityGroupsContainer = eC2SecurityGroupsContainer {
                    eC2SecurityGroupsBuffer = [ElastiCacheClientTypes.EC2SecurityGroup]()
                    for structureContainer0 in eC2SecurityGroupsContainer {
                        eC2SecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                eC2SecurityGroups = eC2SecurityGroupsBuffer
            } else {
                eC2SecurityGroups = []
            }
        } else {
            eC2SecurityGroups = nil
        }
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Represents the output of one of the following operations:
    ///
    /// * AuthorizeCacheSecurityGroupIngress
    ///
    /// * CreateCacheSecurityGroup
    ///
    /// * RevokeCacheSecurityGroupIngress
    public struct CacheSecurityGroup: Swift.Equatable {
        /// The ARN of the cache security group,
        var aRN: Swift.String?
        /// The name of the cache security group.
        var cacheSecurityGroupName: Swift.String?
        /// The description of the cache security group.
        var description: Swift.String?
        /// A list of Amazon EC2 security groups that are associated with this cache security group.
        var eC2SecurityGroups: [ElastiCacheClientTypes.EC2SecurityGroup]?
        /// The Amazon account ID of the cache security group owner.
        var ownerId: Swift.String?

        public init (
            aRN: Swift.String? = nil,
            cacheSecurityGroupName: Swift.String? = nil,
            description: Swift.String? = nil,
            eC2SecurityGroups: [ElastiCacheClientTypes.EC2SecurityGroup]? = nil,
            ownerId: Swift.String? = nil
        )
        {
            self.aRN = aRN
            self.cacheSecurityGroupName = cacheSecurityGroupName
            self.description = description
            self.eC2SecurityGroups = eC2SecurityGroups
            self.ownerId = ownerId
        }
    }

}

extension CacheSecurityGroupAlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CacheSecurityGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A cache security group with the specified name already exists.
public struct CacheSecurityGroupAlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSecurityGroupAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CacheSecurityGroupAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.CacheSecurityGroupMembership: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheSecurityGroupName = "CacheSecurityGroupName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheSecurityGroupName = cacheSecurityGroupName {
            try container.encode(cacheSecurityGroupName, forKey: ClientRuntime.Key("CacheSecurityGroupName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheSecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheSecurityGroupName)
        cacheSecurityGroupName = cacheSecurityGroupNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Represents a cluster's status within a particular cache security group.
    public struct CacheSecurityGroupMembership: Swift.Equatable {
        /// The name of the cache security group.
        var cacheSecurityGroupName: Swift.String?
        /// The membership status in the cache security group. The status changes when a cache security group is modified, or when the cache security groups assigned to a cluster are modified.
        var status: Swift.String?

        public init (
            cacheSecurityGroupName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.cacheSecurityGroupName = cacheSecurityGroupName
            self.status = status
        }
    }

}

extension CacheSecurityGroupNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CacheSecurityGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested cache security group name does not refer to an existing cache security group.
public struct CacheSecurityGroupNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSecurityGroupNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CacheSecurityGroupNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheSecurityGroupQuotaExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CacheSecurityGroupQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request cannot be processed because it would exceed the allowed number of cache security groups.
public struct CacheSecurityGroupQuotaExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSecurityGroupQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CacheSecurityGroupQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.CacheSubnetGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case cacheSubnetGroupDescription = "CacheSubnetGroupDescription"
        case cacheSubnetGroupName = "CacheSubnetGroupName"
        case subnets = "Subnets"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: ClientRuntime.Key("ARN"))
        }
        if let cacheSubnetGroupDescription = cacheSubnetGroupDescription {
            try container.encode(cacheSubnetGroupDescription, forKey: ClientRuntime.Key("CacheSubnetGroupDescription"))
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: ClientRuntime.Key("CacheSubnetGroupName"))
        }
        if let subnets = subnets {
            var subnetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Subnets"))
            for (index0, subnet0) in subnets.enumerated() {
                try subnetsContainer.encode(subnet0, forKey: ClientRuntime.Key("Subnet.\(index0.advanced(by: 1))"))
            }
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheSubnetGroupName)
        cacheSubnetGroupName = cacheSubnetGroupNameDecoded
        let cacheSubnetGroupDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheSubnetGroupDescription)
        cacheSubnetGroupDescription = cacheSubnetGroupDescriptionDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        if containerValues.contains(.subnets) {
            struct KeyVal0{struct Subnet{}}
            let subnetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Subnet>.CodingKeys.self, forKey: .subnets)
            if let subnetsWrappedContainer = subnetsWrappedContainer {
                let subnetsContainer = try subnetsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.Subnet].self, forKey: .member)
                var subnetsBuffer:[ElastiCacheClientTypes.Subnet]? = nil
                if let subnetsContainer = subnetsContainer {
                    subnetsBuffer = [ElastiCacheClientTypes.Subnet]()
                    for structureContainer0 in subnetsContainer {
                        subnetsBuffer?.append(structureContainer0)
                    }
                }
                subnets = subnetsBuffer
            } else {
                subnets = []
            }
        } else {
            subnets = nil
        }
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Represents the output of one of the following operations:
    ///
    /// * CreateCacheSubnetGroup
    ///
    /// * ModifyCacheSubnetGroup
    public struct CacheSubnetGroup: Swift.Equatable {
        /// The ARN (Amazon Resource Name) of the cache subnet group.
        var aRN: Swift.String?
        /// The description of the cache subnet group.
        var cacheSubnetGroupDescription: Swift.String?
        /// The name of the cache subnet group.
        var cacheSubnetGroupName: Swift.String?
        /// A list of subnets associated with the cache subnet group.
        var subnets: [ElastiCacheClientTypes.Subnet]?
        /// The Amazon Virtual Private Cloud identifier (VPC ID) of the cache subnet group.
        var vpcId: Swift.String?

        public init (
            aRN: Swift.String? = nil,
            cacheSubnetGroupDescription: Swift.String? = nil,
            cacheSubnetGroupName: Swift.String? = nil,
            subnets: [ElastiCacheClientTypes.Subnet]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.aRN = aRN
            self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.subnets = subnets
            self.vpcId = vpcId
        }
    }

}

extension CacheSubnetGroupAlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CacheSubnetGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested cache subnet group name is already in use by an existing cache subnet group.
public struct CacheSubnetGroupAlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSubnetGroupAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CacheSubnetGroupAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheSubnetGroupInUse {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CacheSubnetGroupInUseBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested cache subnet group is currently in use.
public struct CacheSubnetGroupInUse: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSubnetGroupInUseBody: Swift.Equatable {
    let message: Swift.String?
}

extension CacheSubnetGroupInUseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheSubnetGroupNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CacheSubnetGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested cache subnet group name does not refer to an existing cache subnet group.
public struct CacheSubnetGroupNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSubnetGroupNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CacheSubnetGroupNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheSubnetGroupQuotaExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CacheSubnetGroupQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request cannot be processed because it would exceed the allowed number of cache subnet groups.
public struct CacheSubnetGroupQuotaExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSubnetGroupQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CacheSubnetGroupQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CacheSubnetQuotaExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<CacheSubnetQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request cannot be processed because it would exceed the allowed number of subnets in a cache subnet group.
public struct CacheSubnetQuotaExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CacheSubnetQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension CacheSubnetQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes {
    public enum ChangeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case immediate
        case requiresReboot
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeType] {
            return [
                .immediate,
                .requiresReboot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .immediate: return "immediate"
            case .requiresReboot: return "requires-reboot"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeType(rawValue: rawValue) ?? ChangeType.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes.CloudWatchLogsDestinationDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroup = "LogGroup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logGroup = logGroup {
            try container.encode(logGroup, forKey: ClientRuntime.Key("LogGroup"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroup)
        logGroup = logGroupDecoded
    }
}

extension ElastiCacheClientTypes {
    /// The configuration details of the CloudWatch Logs destination.
    public struct CloudWatchLogsDestinationDetails: Swift.Equatable {
        /// The name of the CloudWatch Logs log group.
        var logGroup: Swift.String?

        public init (
            logGroup: Swift.String? = nil
        )
        {
            self.logGroup = logGroup
        }
    }

}

extension ClusterQuotaForCustomerExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ClusterQuotaForCustomerExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request cannot be processed because it would exceed the allowed number of clusters per customer.
public struct ClusterQuotaForCustomerExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ClusterQuotaForCustomerExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ClusterQuotaForCustomerExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CompleteMigrationInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if force != false {
            try container.encode(force, forKey: ClientRuntime.Key("Force"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        try container.encode("CompleteMigration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension CompleteMigrationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CompleteMigrationInput: Swift.Equatable {
    /// Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
    var force: Swift.Bool
    /// The ID of the replication group to which data is being migrated.
    /// This member is required.
    var replicationGroupId: Swift.String?

    public init (
        force: Swift.Bool = false,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.force = force
        self.replicationGroupId = replicationGroupId
    }
}

extension CompleteMigrationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CompleteMigrationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidReplicationGroupState" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotUnderMigrationFault" : self = .replicationGroupNotUnderMigrationFault(try ReplicationGroupNotUnderMigrationFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CompleteMigrationOutputError: Swift.Error, Swift.Equatable {
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case replicationGroupNotUnderMigrationFault(ReplicationGroupNotUnderMigrationFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CompleteMigrationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CompleteMigrationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct CompleteMigrationOutputResponse: Swift.Equatable {
    /// Contains all of the attributes of a specific Redis replication group.
    var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init (
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct CompleteMigrationOutputResponseBody: Swift.Equatable {
    let replicationGroup: ElastiCacheClientTypes.ReplicationGroup?
}

extension CompleteMigrationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CompleteMigrationResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

extension ElastiCacheClientTypes.ConfigureShard: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case newReplicaCount = "NewReplicaCount"
        case nodeGroupId = "NodeGroupId"
        case preferredAvailabilityZones = "PreferredAvailabilityZones"
        case preferredOutpostArns = "PreferredOutpostArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if newReplicaCount != 0 {
            try container.encode(newReplicaCount, forKey: ClientRuntime.Key("NewReplicaCount"))
        }
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: ClientRuntime.Key("NodeGroupId"))
        }
        if let preferredAvailabilityZones = preferredAvailabilityZones {
            var preferredAvailabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PreferredAvailabilityZones"))
            for (index0, string0) in preferredAvailabilityZones.enumerated() {
                try preferredAvailabilityZonesContainer.encode(string0, forKey: ClientRuntime.Key("PreferredAvailabilityZone.\(index0.advanced(by: 1))"))
            }
        }
        if let preferredOutpostArns = preferredOutpostArns {
            var preferredOutpostArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PreferredOutpostArns"))
            for (index0, string0) in preferredOutpostArns.enumerated() {
                try preferredOutpostArnsContainer.encode(string0, forKey: ClientRuntime.Key("PreferredOutpostArn.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        let newReplicaCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .newReplicaCount)
        newReplicaCount = newReplicaCountDecoded
        if containerValues.contains(.preferredAvailabilityZones) {
            struct KeyVal0{struct PreferredAvailabilityZone{}}
            let preferredAvailabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.PreferredAvailabilityZone>.CodingKeys.self, forKey: .preferredAvailabilityZones)
            if let preferredAvailabilityZonesWrappedContainer = preferredAvailabilityZonesWrappedContainer {
                let preferredAvailabilityZonesContainer = try preferredAvailabilityZonesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var preferredAvailabilityZonesBuffer:[Swift.String]? = nil
                if let preferredAvailabilityZonesContainer = preferredAvailabilityZonesContainer {
                    preferredAvailabilityZonesBuffer = [Swift.String]()
                    for stringContainer0 in preferredAvailabilityZonesContainer {
                        preferredAvailabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                preferredAvailabilityZones = preferredAvailabilityZonesBuffer
            } else {
                preferredAvailabilityZones = []
            }
        } else {
            preferredAvailabilityZones = nil
        }
        if containerValues.contains(.preferredOutpostArns) {
            struct KeyVal0{struct PreferredOutpostArn{}}
            let preferredOutpostArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.PreferredOutpostArn>.CodingKeys.self, forKey: .preferredOutpostArns)
            if let preferredOutpostArnsWrappedContainer = preferredOutpostArnsWrappedContainer {
                let preferredOutpostArnsContainer = try preferredOutpostArnsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var preferredOutpostArnsBuffer:[Swift.String]? = nil
                if let preferredOutpostArnsContainer = preferredOutpostArnsContainer {
                    preferredOutpostArnsBuffer = [Swift.String]()
                    for stringContainer0 in preferredOutpostArnsContainer {
                        preferredOutpostArnsBuffer?.append(stringContainer0)
                    }
                }
                preferredOutpostArns = preferredOutpostArnsBuffer
            } else {
                preferredOutpostArns = []
            }
        } else {
            preferredOutpostArns = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// Node group (shard) configuration options when adding or removing replicas. Each node group (shard) configuration has the following members: NodeGroupId, NewReplicaCount, and PreferredAvailabilityZones.
    public struct ConfigureShard: Swift.Equatable {
        /// The number of replicas you want in this node group at the end of this operation. The maximum value for NewReplicaCount is 5. The minimum value depends upon the type of Redis replication group you are working with. The minimum number of replicas in a shard or replication group is:
        ///
        /// * Redis (cluster mode disabled)
        ///
        /// * If Multi-AZ: 1
        ///
        /// * If Multi-AZ: 0
        ///
        ///
        ///
        ///
        /// * Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)
        /// This member is required.
        var newReplicaCount: Swift.Int
        /// The 4-digit id for the node group you are configuring. For Redis (cluster mode disabled) replication groups, the node group id is always 0001. To find a Redis (cluster mode enabled)'s node group's (shard's) id, see [Finding a Shard's Id](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/shard-find-id.html).
        /// This member is required.
        var nodeGroupId: Swift.String?
        /// A list of PreferredAvailabilityZone strings that specify which availability zones the replication group's nodes are to be in. The nummber of PreferredAvailabilityZone values must equal the value of NewReplicaCount plus 1 to account for the primary node. If this member of ReplicaConfiguration is omitted, ElastiCache for Redis selects the availability zone for each of the replicas.
        var preferredAvailabilityZones: [Swift.String]?
        /// The outpost ARNs in which the cache cluster is created.
        var preferredOutpostArns: [Swift.String]?

        public init (
            newReplicaCount: Swift.Int = 0,
            nodeGroupId: Swift.String? = nil,
            preferredAvailabilityZones: [Swift.String]? = nil,
            preferredOutpostArns: [Swift.String]? = nil
        )
        {
            self.newReplicaCount = newReplicaCount
            self.nodeGroupId = nodeGroupId
            self.preferredAvailabilityZones = preferredAvailabilityZones
            self.preferredOutpostArns = preferredOutpostArns
        }
    }

}

extension CopySnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let sourceSnapshotName = sourceSnapshotName {
            try container.encode(sourceSnapshotName, forKey: ClientRuntime.Key("SourceSnapshotName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        if let targetBucket = targetBucket {
            try container.encode(targetBucket, forKey: ClientRuntime.Key("TargetBucket"))
        }
        if let targetSnapshotName = targetSnapshotName {
            try container.encode(targetSnapshotName, forKey: ClientRuntime.Key("TargetSnapshotName"))
        }
        try container.encode("CopySnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension CopySnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a CopySnapshotMessage operation.
public struct CopySnapshotInput: Swift.Equatable {
    /// The ID of the KMS key used to encrypt the target snapshot.
    var kmsKeyId: Swift.String?
    /// The name of an existing snapshot from which to make a copy.
    /// This member is required.
    var sourceSnapshotName: Swift.String?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    var tags: [ElastiCacheClientTypes.Tag]?
    /// The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access. When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see [Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access) in the Amazon ElastiCache User Guide. For more information, see [Exporting a Snapshot](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html) in the Amazon ElastiCache User Guide.
    var targetBucket: Swift.String?
    /// A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
    /// This member is required.
    var targetSnapshotName: Swift.String?

    public init (
        kmsKeyId: Swift.String? = nil,
        sourceSnapshotName: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil,
        targetBucket: Swift.String? = nil,
        targetSnapshotName: Swift.String? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.sourceSnapshotName = sourceSnapshotName
        self.tags = tags
        self.targetBucket = targetBucket
        self.targetSnapshotName = targetSnapshotName
    }
}

extension CopySnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CopySnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSnapshotState" : self = .invalidSnapshotStateFault(try InvalidSnapshotStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotAlreadyExistsFault" : self = .snapshotAlreadyExistsFault(try SnapshotAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFoundFault" : self = .snapshotNotFoundFault(try SnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotQuotaExceededFault" : self = .snapshotQuotaExceededFault(try SnapshotQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CopySnapshotOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidSnapshotStateFault(InvalidSnapshotStateFault)
    case snapshotAlreadyExistsFault(SnapshotAlreadyExistsFault)
    case snapshotNotFoundFault(SnapshotNotFoundFault)
    case snapshotQuotaExceededFault(SnapshotQuotaExceededFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CopySnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CopySnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.snapshot = output.snapshot
        } else {
            self.snapshot = nil
        }
    }
}

public struct CopySnapshotOutputResponse: Swift.Equatable {
    /// Represents a copy of an entire Redis cluster as of the time when the snapshot was taken.
    var snapshot: ElastiCacheClientTypes.Snapshot?

    public init (
        snapshot: ElastiCacheClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

struct CopySnapshotOutputResponseBody: Swift.Equatable {
    let snapshot: ElastiCacheClientTypes.Snapshot?
}

extension CopySnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshot = "Snapshot"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CopySnapshotResult"))
        let snapshotDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Snapshot.self, forKey: .snapshot)
        snapshot = snapshotDecoded
    }
}

extension CreateCacheClusterInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aZMode = aZMode {
            try container.encode(aZMode, forKey: ClientRuntime.Key("AZMode"))
        }
        if let authToken = authToken {
            try container.encode(authToken, forKey: ClientRuntime.Key("AuthToken"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let cacheSecurityGroupNames = cacheSecurityGroupNames {
            var cacheSecurityGroupNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheSecurityGroupNames"))
            for (index0, string0) in cacheSecurityGroupNames.enumerated() {
                try cacheSecurityGroupNamesContainer.encode(string0, forKey: ClientRuntime.Key("CacheSecurityGroupName.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: ClientRuntime.Key("CacheSubnetGroupName"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogDeliveryConfigurations"))
            for (index0, logdeliveryconfigurationrequest0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(logdeliveryconfigurationrequest0, forKey: ClientRuntime.Key("LogDeliveryConfigurationRequest.\(index0.advanced(by: 1))"))
            }
        }
        if let notificationTopicArn = notificationTopicArn {
            try container.encode(notificationTopicArn, forKey: ClientRuntime.Key("NotificationTopicArn"))
        }
        if let numCacheNodes = numCacheNodes {
            try container.encode(numCacheNodes, forKey: ClientRuntime.Key("NumCacheNodes"))
        }
        if let outpostMode = outpostMode {
            try container.encode(outpostMode, forKey: ClientRuntime.Key("OutpostMode"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredAvailabilityZone = preferredAvailabilityZone {
            try container.encode(preferredAvailabilityZone, forKey: ClientRuntime.Key("PreferredAvailabilityZone"))
        }
        if let preferredAvailabilityZones = preferredAvailabilityZones {
            var preferredAvailabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PreferredAvailabilityZones"))
            for (index0, string0) in preferredAvailabilityZones.enumerated() {
                try preferredAvailabilityZonesContainer.encode(string0, forKey: ClientRuntime.Key("PreferredAvailabilityZone.\(index0.advanced(by: 1))"))
            }
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let preferredOutpostArn = preferredOutpostArn {
            try container.encode(preferredOutpostArn, forKey: ClientRuntime.Key("PreferredOutpostArn"))
        }
        if let preferredOutpostArns = preferredOutpostArns {
            var preferredOutpostArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PreferredOutpostArns"))
            for (index0, string0) in preferredOutpostArns.enumerated() {
                try preferredOutpostArnsContainer.encode(string0, forKey: ClientRuntime.Key("PreferredOutpostArn.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroupIds"))
            for (index0, string0) in securityGroupIds.enumerated() {
                try securityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("SecurityGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotArns = snapshotArns {
            var snapshotArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SnapshotArns"))
            for (index0, string0) in snapshotArns.enumerated() {
                try snapshotArnsContainer.encode(string0, forKey: ClientRuntime.Key("SnapshotArn.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotName = snapshotName {
            try container.encode(snapshotName, forKey: ClientRuntime.Key("SnapshotName"))
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: ClientRuntime.Key("SnapshotRetentionLimit"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: ClientRuntime.Key("SnapshotWindow"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateCacheCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateCacheClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a CreateCacheCluster operation.
public struct CreateCacheClusterInput: Swift.Equatable {
    /// Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region. This parameter is only supported for Memcached clusters. If the AZMode and PreferredAvailabilityZones are not specified, ElastiCache assumes single-az mode.
    var aZMode: ElastiCacheClientTypes.AZMode?
    /// Reserved parameter. The password used to access a password protected server. Password constraints:
    ///
    /// * Must be only printable ASCII characters.
    ///
    /// * Must be at least 16 characters and no more than 128 characters in length.
    ///
    /// * The only permitted printable special characters are !, &, #, $, ^, <, >, and -. Other printable special characters cannot be used in the AUTH token.
    ///
    ///
    /// For more information, see [AUTH password](http://redis.io/commands/AUTH) at http://redis.io/commands/AUTH.
    var authToken: Swift.String?
    ///  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
    var autoMinorVersionUpgrade: Swift.Bool?
    /// The node group (shard) identifier. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * A name must contain from 1 to 50 alphanumeric characters or hyphens.
    ///
    /// * The first character must be a letter.
    ///
    /// * A name cannot end with a hyphen or contain two consecutive hyphens.
    /// This member is required.
    var cacheClusterId: Swift.String?
    /// The compute and memory capacity of the nodes in the node group (shard). The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
    ///
    /// * General purpose:
    ///
    /// * Current generation: M6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
    ///
    /// * Previous generation: (not recommended) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
    ///
    ///
    ///
    ///
    /// * Compute optimized:
    ///
    /// * Previous generation: (not recommended) C1 node types: cache.c1.xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized with data tiering:
    ///
    /// * Current generation: R6gd node types (available only for Redis engine version 6.2 onward). cache.r6gd.xlarge, cache.r6gd.2xlarge, cache.r6gd.4xlarge, cache.r6gd.8xlarge, cache.r6gd.12xlarge, cache.r6gd.16xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized:
    ///
    /// * Current generation: R6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
    ///
    /// * Previous generation: (not recommended) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
    ///
    ///
    /// cache.r3.4xlarge, cache.r3.8xlarge
    ///
    ///
    ///
    ///
    ///
    /// Additional node type info
    ///
    /// * All current generation instance types are created in Amazon VPC by default.
    ///
    /// * Redis append-only files (AOF) are not supported for T1 or T2 instances.
    ///
    /// * Redis Multi-AZ with automatic failover is not supported on T1 instances.
    ///
    /// * Redis configuration variables appendonly and appendfsync are not supported on Redis version 2.8.22 and later.
    var cacheNodeType: Swift.String?
    /// The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has cluster-enabled='yes' when creating a cluster.
    var cacheParameterGroupName: Swift.String?
    /// A list of security group names to associate with this cluster. Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).
    var cacheSecurityGroupNames: [Swift.String]?
    /// The name of the subnet group to be used for the cluster. Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC). If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see [Subnets and Subnet Groups](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html).
    var cacheSubnetGroupName: Swift.String?
    /// The name of the cache engine to be used for this cluster. Valid values for this parameter are: memcached | redis
    var engine: Swift.String?
    /// The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation. Important: You can upgrade to a newer engine version (see [Selecting a Cache Engine and Version](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement)), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version.
    var engineVersion: Swift.String?
    /// Specifies the destination, format and type of the logs.
    var logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]?
    /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent. The Amazon SNS topic owner must be the same as the cluster owner.
    var notificationTopicArn: Swift.String?
    /// The initial number of cache nodes that the cluster has. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40. If you need more than 40 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at [http://aws.amazon.com/contact-us/elasticache-node-limit-request/](http://aws.amazon.com/contact-us/elasticache-node-limit-request/).
    var numCacheNodes: Swift.Int?
    /// Specifies whether the nodes in the cluster are created in a single outpost or across multiple outposts.
    var outpostMode: ElastiCacheClientTypes.OutpostMode?
    /// The port number on which each of the cache nodes accepts connections.
    var port: Swift.Int?
    /// The EC2 Availability Zone in which the cluster is created. All nodes belonging to this cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use PreferredAvailabilityZones. Default: System chosen Availability Zone.
    var preferredAvailabilityZone: Swift.String?
    /// A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important. This option is only supported on Memcached. If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group. The number of Availability Zones listed must equal the value of NumCacheNodes. If you want all the nodes in the same Availability Zone, use PreferredAvailabilityZone instead, or repeat the Availability Zone multiple times in the list. Default: System chosen Availability Zones.
    var preferredAvailabilityZones: [Swift.String]?
    /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:
    var preferredMaintenanceWindow: Swift.String?
    /// The outpost ARN in which the cache cluster is created.
    var preferredOutpostArn: Swift.String?
    /// The outpost ARNs in which the cache cluster is created.
    var preferredOutpostArns: [Swift.String]?
    /// The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group. If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones. This parameter is only valid if the Engine parameter is redis.
    var replicationGroupId: Swift.String?
    /// One or more VPC security groups associated with the cluster. Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).
    var securityGroupIds: [Swift.String]?
    /// A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas. This parameter is only valid if the Engine parameter is redis. Example of an Amazon S3 ARN: arn:aws:s3:::my_bucket/snapshot1.rdb
    var snapshotArns: [Swift.String]?
    /// The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to restoring while the new node group (shard) is being created. This parameter is only valid if the Engine parameter is redis.
    var snapshotName: Swift.String?
    /// The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot taken today is retained for 5 days before being deleted. This parameter is only valid if the Engine parameter is redis. Default: 0 (i.e., automatic backups are disabled for this cache cluster).
    var snapshotRetentionLimit: Swift.Int?
    /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). Example: 05:00-09:00 If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range. This parameter is only valid if the Engine parameter is redis.
    var snapshotWindow: Swift.String?
    /// A list of tags to be added to this resource.
    var tags: [ElastiCacheClientTypes.Tag]?

    public init (
        aZMode: ElastiCacheClientTypes.AZMode? = nil,
        authToken: Swift.String? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        cacheClusterId: Swift.String? = nil,
        cacheNodeType: Swift.String? = nil,
        cacheParameterGroupName: Swift.String? = nil,
        cacheSecurityGroupNames: [Swift.String]? = nil,
        cacheSubnetGroupName: Swift.String? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]? = nil,
        notificationTopicArn: Swift.String? = nil,
        numCacheNodes: Swift.Int? = nil,
        outpostMode: ElastiCacheClientTypes.OutpostMode? = nil,
        port: Swift.Int? = nil,
        preferredAvailabilityZone: Swift.String? = nil,
        preferredAvailabilityZones: [Swift.String]? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        preferredOutpostArn: Swift.String? = nil,
        preferredOutpostArns: [Swift.String]? = nil,
        replicationGroupId: Swift.String? = nil,
        securityGroupIds: [Swift.String]? = nil,
        snapshotArns: [Swift.String]? = nil,
        snapshotName: Swift.String? = nil,
        snapshotRetentionLimit: Swift.Int? = nil,
        snapshotWindow: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.aZMode = aZMode
        self.authToken = authToken
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.cacheClusterId = cacheClusterId
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSecurityGroupNames = cacheSecurityGroupNames
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.engine = engine
        self.engineVersion = engineVersion
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.notificationTopicArn = notificationTopicArn
        self.numCacheNodes = numCacheNodes
        self.outpostMode = outpostMode
        self.port = port
        self.preferredAvailabilityZone = preferredAvailabilityZone
        self.preferredAvailabilityZones = preferredAvailabilityZones
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.preferredOutpostArn = preferredOutpostArn
        self.preferredOutpostArns = preferredOutpostArns
        self.replicationGroupId = replicationGroupId
        self.securityGroupIds = securityGroupIds
        self.snapshotArns = snapshotArns
        self.snapshotName = snapshotName
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
        self.tags = tags
    }
}

extension CreateCacheClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateCacheClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheClusterAlreadyExists" : self = .cacheClusterAlreadyExistsFault(try CacheClusterAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupNotFound" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFound" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClusterQuotaForCustomerExceeded" : self = .clusterQuotaForCustomerExceededFault(try ClusterQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCacheClusterCapacity" : self = .insufficientCacheClusterCapacityFault(try InsufficientCacheClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupState" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCNetworkStateFault" : self = .invalidVPCNetworkStateFault(try InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForClusterExceeded" : self = .nodeQuotaForClusterExceededFault(try NodeQuotaForClusterExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForCustomerExceeded" : self = .nodeQuotaForCustomerExceededFault(try NodeQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCacheClusterOutputError: Swift.Error, Swift.Equatable {
    case cacheClusterAlreadyExistsFault(CacheClusterAlreadyExistsFault)
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case clusterQuotaForCustomerExceededFault(ClusterQuotaForCustomerExceededFault)
    case insufficientCacheClusterCapacityFault(InsufficientCacheClusterCapacityFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case invalidVPCNetworkStateFault(InvalidVPCNetworkStateFault)
    case nodeQuotaForClusterExceededFault(NodeQuotaForClusterExceededFault)
    case nodeQuotaForCustomerExceededFault(NodeQuotaForCustomerExceededFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCacheClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateCacheClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheCluster = output.cacheCluster
        } else {
            self.cacheCluster = nil
        }
    }
}

public struct CreateCacheClusterOutputResponse: Swift.Equatable {
    /// Contains all of the attributes of a specific cluster.
    var cacheCluster: ElastiCacheClientTypes.CacheCluster?

    public init (
        cacheCluster: ElastiCacheClientTypes.CacheCluster? = nil
    )
    {
        self.cacheCluster = cacheCluster
    }
}

struct CreateCacheClusterOutputResponseBody: Swift.Equatable {
    let cacheCluster: ElastiCacheClientTypes.CacheCluster?
}

extension CreateCacheClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheCluster = "CacheCluster"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateCacheClusterResult"))
        let cacheClusterDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.CacheCluster.self, forKey: .cacheCluster)
        cacheCluster = cacheClusterDecoded
    }
}

extension CreateCacheParameterGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheParameterGroupFamily = cacheParameterGroupFamily {
            try container.encode(cacheParameterGroupFamily, forKey: ClientRuntime.Key("CacheParameterGroupFamily"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateCacheParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateCacheParameterGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a CreateCacheParameterGroup operation.
public struct CreateCacheParameterGroupInput: Swift.Equatable {
    /// The name of the cache parameter group family that the cache parameter group can be used with. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.0 | redis6.2
    /// This member is required.
    var cacheParameterGroupFamily: Swift.String?
    /// A user-specified name for the cache parameter group.
    /// This member is required.
    var cacheParameterGroupName: Swift.String?
    /// A user-specified description for the cache parameter group.
    /// This member is required.
    var description: Swift.String?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    var tags: [ElastiCacheClientTypes.Tag]?

    public init (
        cacheParameterGroupFamily: Swift.String? = nil,
        cacheParameterGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.cacheParameterGroupFamily = cacheParameterGroupFamily
        self.cacheParameterGroupName = cacheParameterGroupName
        self.description = description
        self.tags = tags
    }
}

extension CreateCacheParameterGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateCacheParameterGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheParameterGroupAlreadyExists" : self = .cacheParameterGroupAlreadyExistsFault(try CacheParameterGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupQuotaExceeded" : self = .cacheParameterGroupQuotaExceededFault(try CacheParameterGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheParameterGroupState" : self = .invalidCacheParameterGroupStateFault(try InvalidCacheParameterGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCacheParameterGroupOutputError: Swift.Error, Swift.Equatable {
    case cacheParameterGroupAlreadyExistsFault(CacheParameterGroupAlreadyExistsFault)
    case cacheParameterGroupQuotaExceededFault(CacheParameterGroupQuotaExceededFault)
    case invalidCacheParameterGroupStateFault(InvalidCacheParameterGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCacheParameterGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateCacheParameterGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheParameterGroup = output.cacheParameterGroup
        } else {
            self.cacheParameterGroup = nil
        }
    }
}

public struct CreateCacheParameterGroupOutputResponse: Swift.Equatable {
    /// Represents the output of a CreateCacheParameterGroup operation.
    var cacheParameterGroup: ElastiCacheClientTypes.CacheParameterGroup?

    public init (
        cacheParameterGroup: ElastiCacheClientTypes.CacheParameterGroup? = nil
    )
    {
        self.cacheParameterGroup = cacheParameterGroup
    }
}

struct CreateCacheParameterGroupOutputResponseBody: Swift.Equatable {
    let cacheParameterGroup: ElastiCacheClientTypes.CacheParameterGroup?
}

extension CreateCacheParameterGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheParameterGroup = "CacheParameterGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateCacheParameterGroupResult"))
        let cacheParameterGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.CacheParameterGroup.self, forKey: .cacheParameterGroup)
        cacheParameterGroup = cacheParameterGroupDecoded
    }
}

extension CreateCacheSecurityGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheSecurityGroupName = cacheSecurityGroupName {
            try container.encode(cacheSecurityGroupName, forKey: ClientRuntime.Key("CacheSecurityGroupName"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateCacheSecurityGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateCacheSecurityGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a CreateCacheSecurityGroup operation.
public struct CreateCacheSecurityGroupInput: Swift.Equatable {
    /// A name for the cache security group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default". Example: mysecuritygroup
    /// This member is required.
    var cacheSecurityGroupName: Swift.String?
    /// A description for the cache security group.
    /// This member is required.
    var description: Swift.String?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    var tags: [ElastiCacheClientTypes.Tag]?

    public init (
        cacheSecurityGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
        self.description = description
        self.tags = tags
    }
}

extension CreateCacheSecurityGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateCacheSecurityGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheSecurityGroupAlreadyExists" : self = .cacheSecurityGroupAlreadyExistsFault(try CacheSecurityGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "QuotaExceeded.CacheSecurityGroup" : self = .cacheSecurityGroupQuotaExceededFault(try CacheSecurityGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCacheSecurityGroupOutputError: Swift.Error, Swift.Equatable {
    case cacheSecurityGroupAlreadyExistsFault(CacheSecurityGroupAlreadyExistsFault)
    case cacheSecurityGroupQuotaExceededFault(CacheSecurityGroupQuotaExceededFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCacheSecurityGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateCacheSecurityGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheSecurityGroup = output.cacheSecurityGroup
        } else {
            self.cacheSecurityGroup = nil
        }
    }
}

public struct CreateCacheSecurityGroupOutputResponse: Swift.Equatable {
    /// Represents the output of one of the following operations:
    ///
    /// * AuthorizeCacheSecurityGroupIngress
    ///
    /// * CreateCacheSecurityGroup
    ///
    /// * RevokeCacheSecurityGroupIngress
    var cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup?

    public init (
        cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup? = nil
    )
    {
        self.cacheSecurityGroup = cacheSecurityGroup
    }
}

struct CreateCacheSecurityGroupOutputResponseBody: Swift.Equatable {
    let cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup?
}

extension CreateCacheSecurityGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheSecurityGroup = "CacheSecurityGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateCacheSecurityGroupResult"))
        let cacheSecurityGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.CacheSecurityGroup.self, forKey: .cacheSecurityGroup)
        cacheSecurityGroup = cacheSecurityGroupDecoded
    }
}

extension CreateCacheSubnetGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheSubnetGroupDescription = cacheSubnetGroupDescription {
            try container.encode(cacheSubnetGroupDescription, forKey: ClientRuntime.Key("CacheSubnetGroupDescription"))
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: ClientRuntime.Key("CacheSubnetGroupName"))
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIds"))
            for (index0, string0) in subnetIds.enumerated() {
                try subnetIdsContainer.encode(string0, forKey: ClientRuntime.Key("SubnetIdentifier.\(index0.advanced(by: 1))"))
            }
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateCacheSubnetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateCacheSubnetGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a CreateCacheSubnetGroup operation.
public struct CreateCacheSubnetGroupInput: Swift.Equatable {
    /// A description for the cache subnet group.
    /// This member is required.
    var cacheSubnetGroupDescription: Swift.String?
    /// A name for the cache subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters or hyphens. Example: mysubnetgroup
    /// This member is required.
    var cacheSubnetGroupName: Swift.String?
    /// A list of VPC subnet IDs for the cache subnet group.
    /// This member is required.
    var subnetIds: [Swift.String]?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    var tags: [ElastiCacheClientTypes.Tag]?

    public init (
        cacheSubnetGroupDescription: Swift.String? = nil,
        cacheSubnetGroupName: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.subnetIds = subnetIds
        self.tags = tags
    }
}

extension CreateCacheSubnetGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateCacheSubnetGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheSubnetGroupAlreadyExists" : self = .cacheSubnetGroupAlreadyExistsFault(try CacheSubnetGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetGroupQuotaExceeded" : self = .cacheSubnetGroupQuotaExceededFault(try CacheSubnetGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetQuotaExceededFault" : self = .cacheSubnetQuotaExceededFault(try CacheSubnetQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSubnet" : self = .invalidSubnet(try InvalidSubnet(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SubnetNotAllowedFault" : self = .subnetNotAllowedFault(try SubnetNotAllowedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCacheSubnetGroupOutputError: Swift.Error, Swift.Equatable {
    case cacheSubnetGroupAlreadyExistsFault(CacheSubnetGroupAlreadyExistsFault)
    case cacheSubnetGroupQuotaExceededFault(CacheSubnetGroupQuotaExceededFault)
    case cacheSubnetQuotaExceededFault(CacheSubnetQuotaExceededFault)
    case invalidSubnet(InvalidSubnet)
    case subnetNotAllowedFault(SubnetNotAllowedFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCacheSubnetGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateCacheSubnetGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheSubnetGroup = output.cacheSubnetGroup
        } else {
            self.cacheSubnetGroup = nil
        }
    }
}

public struct CreateCacheSubnetGroupOutputResponse: Swift.Equatable {
    /// Represents the output of one of the following operations:
    ///
    /// * CreateCacheSubnetGroup
    ///
    /// * ModifyCacheSubnetGroup
    var cacheSubnetGroup: ElastiCacheClientTypes.CacheSubnetGroup?

    public init (
        cacheSubnetGroup: ElastiCacheClientTypes.CacheSubnetGroup? = nil
    )
    {
        self.cacheSubnetGroup = cacheSubnetGroup
    }
}

struct CreateCacheSubnetGroupOutputResponseBody: Swift.Equatable {
    let cacheSubnetGroup: ElastiCacheClientTypes.CacheSubnetGroup?
}

extension CreateCacheSubnetGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheSubnetGroup = "CacheSubnetGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateCacheSubnetGroupResult"))
        let cacheSubnetGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.CacheSubnetGroup.self, forKey: .cacheSubnetGroup)
        cacheSubnetGroup = cacheSubnetGroupDecoded
    }
}

extension CreateGlobalReplicationGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let globalReplicationGroupDescription = globalReplicationGroupDescription {
            try container.encode(globalReplicationGroupDescription, forKey: ClientRuntime.Key("GlobalReplicationGroupDescription"))
        }
        if let globalReplicationGroupIdSuffix = globalReplicationGroupIdSuffix {
            try container.encode(globalReplicationGroupIdSuffix, forKey: ClientRuntime.Key("GlobalReplicationGroupIdSuffix"))
        }
        if let primaryReplicationGroupId = primaryReplicationGroupId {
            try container.encode(primaryReplicationGroupId, forKey: ClientRuntime.Key("PrimaryReplicationGroupId"))
        }
        try container.encode("CreateGlobalReplicationGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateGlobalReplicationGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateGlobalReplicationGroupInput: Swift.Equatable {
    /// Provides details of the Global datastore
    var globalReplicationGroupDescription: Swift.String?
    /// The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix to the Global datastore ID when it is created. Each Amazon Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with "dsdfu" along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions. For a full list of Amazon Regions and their respective Global datastore iD prefixes, see [Using the Amazon CLI with Global datastores ](http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastores-CLI.html).
    /// This member is required.
    var globalReplicationGroupIdSuffix: Swift.String?
    /// The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.
    /// This member is required.
    var primaryReplicationGroupId: Swift.String?

    public init (
        globalReplicationGroupDescription: Swift.String? = nil,
        globalReplicationGroupIdSuffix: Swift.String? = nil,
        primaryReplicationGroupId: Swift.String? = nil
    )
    {
        self.globalReplicationGroupDescription = globalReplicationGroupDescription
        self.globalReplicationGroupIdSuffix = globalReplicationGroupIdSuffix
        self.primaryReplicationGroupId = primaryReplicationGroupId
    }
}

extension CreateGlobalReplicationGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateGlobalReplicationGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupAlreadyExistsFault" : self = .globalReplicationGroupAlreadyExistsFault(try GlobalReplicationGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupState" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleNotFoundFault" : self = .serviceLinkedRoleNotFoundFault(try ServiceLinkedRoleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateGlobalReplicationGroupOutputError: Swift.Error, Swift.Equatable {
    case globalReplicationGroupAlreadyExistsFault(GlobalReplicationGroupAlreadyExistsFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case serviceLinkedRoleNotFoundFault(ServiceLinkedRoleNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGlobalReplicationGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct CreateGlobalReplicationGroupOutputResponse: Swift.Equatable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init (
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct CreateGlobalReplicationGroupOutputResponseBody: Swift.Equatable {
    let globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?
}

extension CreateGlobalReplicationGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

extension CreateReplicationGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let atRestEncryptionEnabled = atRestEncryptionEnabled {
            try container.encode(atRestEncryptionEnabled, forKey: ClientRuntime.Key("AtRestEncryptionEnabled"))
        }
        if let authToken = authToken {
            try container.encode(authToken, forKey: ClientRuntime.Key("AuthToken"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let automaticFailoverEnabled = automaticFailoverEnabled {
            try container.encode(automaticFailoverEnabled, forKey: ClientRuntime.Key("AutomaticFailoverEnabled"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let cacheSecurityGroupNames = cacheSecurityGroupNames {
            var cacheSecurityGroupNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheSecurityGroupNames"))
            for (index0, string0) in cacheSecurityGroupNames.enumerated() {
                try cacheSecurityGroupNamesContainer.encode(string0, forKey: ClientRuntime.Key("CacheSecurityGroupName.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: ClientRuntime.Key("CacheSubnetGroupName"))
        }
        if let dataTieringEnabled = dataTieringEnabled {
            try container.encode(dataTieringEnabled, forKey: ClientRuntime.Key("DataTieringEnabled"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: ClientRuntime.Key("GlobalReplicationGroupId"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogDeliveryConfigurations"))
            for (index0, logdeliveryconfigurationrequest0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(logdeliveryconfigurationrequest0, forKey: ClientRuntime.Key("LogDeliveryConfigurationRequest.\(index0.advanced(by: 1))"))
            }
        }
        if let multiAZEnabled = multiAZEnabled {
            try container.encode(multiAZEnabled, forKey: ClientRuntime.Key("MultiAZEnabled"))
        }
        if let nodeGroupConfiguration = nodeGroupConfiguration {
            var nodeGroupConfigurationContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NodeGroupConfiguration"))
            for (index0, nodegroupconfiguration0) in nodeGroupConfiguration.enumerated() {
                try nodeGroupConfigurationContainer.encode(nodegroupconfiguration0, forKey: ClientRuntime.Key("NodeGroupConfiguration.\(index0.advanced(by: 1))"))
            }
        }
        if let notificationTopicArn = notificationTopicArn {
            try container.encode(notificationTopicArn, forKey: ClientRuntime.Key("NotificationTopicArn"))
        }
        if let numCacheClusters = numCacheClusters {
            try container.encode(numCacheClusters, forKey: ClientRuntime.Key("NumCacheClusters"))
        }
        if let numNodeGroups = numNodeGroups {
            try container.encode(numNodeGroups, forKey: ClientRuntime.Key("NumNodeGroups"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredCacheClusterAZs = preferredCacheClusterAZs {
            var preferredCacheClusterAZsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PreferredCacheClusterAZs"))
            for (index0, string0) in preferredCacheClusterAZs.enumerated() {
                try preferredCacheClusterAZsContainer.encode(string0, forKey: ClientRuntime.Key("AvailabilityZone.\(index0.advanced(by: 1))"))
            }
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let primaryClusterId = primaryClusterId {
            try container.encode(primaryClusterId, forKey: ClientRuntime.Key("PrimaryClusterId"))
        }
        if let replicasPerNodeGroup = replicasPerNodeGroup {
            try container.encode(replicasPerNodeGroup, forKey: ClientRuntime.Key("ReplicasPerNodeGroup"))
        }
        if let replicationGroupDescription = replicationGroupDescription {
            try container.encode(replicationGroupDescription, forKey: ClientRuntime.Key("ReplicationGroupDescription"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroupIds"))
            for (index0, string0) in securityGroupIds.enumerated() {
                try securityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("SecurityGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotArns = snapshotArns {
            var snapshotArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SnapshotArns"))
            for (index0, string0) in snapshotArns.enumerated() {
                try snapshotArnsContainer.encode(string0, forKey: ClientRuntime.Key("SnapshotArn.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotName = snapshotName {
            try container.encode(snapshotName, forKey: ClientRuntime.Key("SnapshotName"))
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: ClientRuntime.Key("SnapshotRetentionLimit"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: ClientRuntime.Key("SnapshotWindow"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        if let transitEncryptionEnabled = transitEncryptionEnabled {
            try container.encode(transitEncryptionEnabled, forKey: ClientRuntime.Key("TransitEncryptionEnabled"))
        }
        if let userGroupIds = userGroupIds {
            var userGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserGroupIds"))
            for (index0, usergroupid0) in userGroupIds.enumerated() {
                try userGroupIdsContainer.encode(usergroupid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateReplicationGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateReplicationGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a CreateReplicationGroup operation.
public struct CreateReplicationGroupInput: Swift.Equatable {
    /// A flag that enables encryption at rest when set to true. You cannot modify the value of AtRestEncryptionEnabled after the replication group is created. To enable encryption at rest on a replication group you must set AtRestEncryptionEnabled to true when you create the replication group. Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6, 4.x or later. Default: false
    var atRestEncryptionEnabled: Swift.Bool?
    /// Reserved parameter. The password used to access a password protected server. AuthToken can be specified only on replication groups where TransitEncryptionEnabled is true. For HIPAA compliance, you must specify TransitEncryptionEnabled as true, an AuthToken, and a CacheSubnetGroup. Password constraints:
    ///
    /// * Must be only printable ASCII characters.
    ///
    /// * Must be at least 16 characters and no more than 128 characters in length.
    ///
    /// * The only permitted printable special characters are !, &, #, $, ^, <, >, and -. Other printable special characters cannot be used in the AUTH token.
    ///
    ///
    /// For more information, see [AUTH password](http://redis.io/commands/AUTH) at http://redis.io/commands/AUTH.
    var authToken: Swift.String?
    ///  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
    var autoMinorVersionUpgrade: Swift.Bool?
    /// Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails. AutomaticFailoverEnabled must be enabled for Redis (cluster mode enabled) replication groups. Default: false
    var automaticFailoverEnabled: Swift.Bool?
    /// The compute and memory capacity of the nodes in the node group (shard). The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
    ///
    /// * General purpose:
    ///
    /// * Current generation: M6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward):
    ///
    ///
    /// cache.t4g.micro, cache.t4g.small, cache.t4g.medium
    ///
    ///
    /// T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
    ///
    /// * Previous generation: (not recommended) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
    ///
    ///
    ///
    ///
    /// * Compute optimized:
    ///
    /// * Previous generation: (not recommended) C1 node types: cache.c1.xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized with data tiering:
    ///
    /// * Current generation: R6gd node types (available only for Redis engine version 6.2 onward). cache.r6gd.xlarge, cache.r6gd.2xlarge, cache.r6gd.4xlarge, cache.r6gd.8xlarge, cache.r6gd.12xlarge, cache.r6gd.16xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized:
    ///
    /// * Current generation: R6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
    ///
    /// * Previous generation: (not recommended) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
    ///
    ///
    /// cache.r3.4xlarge, cache.r3.8xlarge
    ///
    ///
    ///
    ///
    ///
    /// Additional node type info
    ///
    /// * All current generation instance types are created in Amazon VPC by default.
    ///
    /// * Redis append-only files (AOF) are not supported for T1 or T2 instances.
    ///
    /// * Redis Multi-AZ with automatic failover is not supported on T1 instances.
    ///
    /// * Redis configuration variables appendonly and appendfsync are not supported on Redis version 2.8.22 and later.
    var cacheNodeType: Swift.String?
    /// The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used. If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name.
    ///
    /// * To create a Redis (cluster mode disabled) replication group, use CacheParameterGroupName=default.redis3.2.
    ///
    /// * To create a Redis (cluster mode enabled) replication group, use CacheParameterGroupName=default.redis3.2.cluster.on.
    var cacheParameterGroupName: Swift.String?
    /// A list of cache security group names to associate with this replication group.
    var cacheSecurityGroupNames: [Swift.String]?
    /// The name of the cache subnet group to be used for the replication group. If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see [Subnets and Subnet Groups](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html).
    var cacheSubnetGroupName: Swift.String?
    /// Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see [Data tiering](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html).
    var dataTieringEnabled: Swift.Bool?
    /// The name of the cache engine to be used for the clusters in this replication group. Must be Redis.
    var engine: Swift.String?
    /// The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation. Important: You can upgrade to a newer engine version (see [Selecting a Cache Engine and Version](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement)) in the ElastiCache User Guide, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version.
    var engineVersion: Swift.String?
    /// The name of the Global datastore
    var globalReplicationGroupId: Swift.String?
    /// The ID of the KMS key used to encrypt the disk in the cluster.
    var kmsKeyId: Swift.String?
    /// Specifies the destination, format and type of the logs.
    var logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]?
    /// A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see [Minimizing Downtime: Multi-AZ](http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html).
    var multiAZEnabled: Swift.Bool?
    /// A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: PrimaryAvailabilityZone, ReplicaAvailabilityZones, ReplicaCount, and Slots. If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, it is required when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file. You must configure each node group (shard) using this parameter because you must specify the slots for each node group.
    var nodeGroupConfiguration: [ElastiCacheClientTypes.NodeGroupConfiguration]?
    /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent. The Amazon SNS topic owner must be the same as the cluster owner.
    var notificationTopicArn: Swift.String?
    /// The number of clusters this replication group initially has. This parameter is not used if there is more than one node group (shard). You should use ReplicasPerNodeGroup instead. If AutomaticFailoverEnabled is true, the value of this parameter must be at least 2. If AutomaticFailoverEnabled is false you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6. The maximum permitted value for NumCacheClusters is 6 (1 primary plus 5 replicas).
    var numCacheClusters: Swift.Int?
    /// An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1. Default: 1
    var numNodeGroups: Swift.Int?
    /// The port number on which each member of the replication group accepts connections.
    var port: Swift.Int?
    /// A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list. This parameter is not used if there is more than one node group (shard). You should use NodeGroupConfiguration instead. If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group. The number of Availability Zones listed must equal the value of NumCacheClusters. Default: system chosen Availability Zones.
    var preferredCacheClusterAZs: [Swift.String]?
    /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are: Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:
    ///
    /// * sun
    ///
    /// * mon
    ///
    /// * tue
    ///
    /// * wed
    ///
    /// * thu
    ///
    /// * fri
    ///
    /// * sat
    ///
    ///
    /// Example: sun:23:00-mon:01:30
    var preferredMaintenanceWindow: Swift.String?
    /// The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of available. This parameter is not required if NumCacheClusters, NumNodeGroups, or ReplicasPerNodeGroup is specified.
    var primaryClusterId: Swift.String?
    /// An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
    var replicasPerNodeGroup: Swift.Int?
    /// A user-created description for the replication group.
    /// This member is required.
    var replicationGroupDescription: Swift.String?
    /// The replication group identifier. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * A name must contain from 1 to 40 alphanumeric characters or hyphens.
    ///
    /// * The first character must be a letter.
    ///
    /// * A name cannot end with a hyphen or contain two consecutive hyphens.
    /// This member is required.
    var replicationGroupId: Swift.String?
    /// One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).
    var securityGroupIds: [Swift.String]?
    /// A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter NumNodeGroups or the number of node groups configured by NodeGroupConfiguration regardless of the number of ARNs specified here. Example of an Amazon S3 ARN: arn:aws:s3:::my_bucket/snapshot1.rdb
    var snapshotArns: [Swift.String]?
    /// The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to restoring while the new replication group is being created.
    var snapshotName: Swift.String?
    /// The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted. Default: 0 (i.e., automatic backups are disabled for this cluster).
    var snapshotRetentionLimit: Swift.Int?
    /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). Example: 05:00-09:00 If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.
    var snapshotWindow: Swift.String?
    /// A list of tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=myKey, Value=myKeyValue. You can include multiple tags as shown following: Key=myKey, Value=myKeyValue Key=mySecondKey, Value=mySecondKeyValue. Tags on replication groups will be replicated to all nodes.
    var tags: [ElastiCacheClientTypes.Tag]?
    /// A flag that enables in-transit encryption when set to true. You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster. This parameter is valid only if the Engine parameter is redis, the EngineVersion parameter is 3.2.6, 4.x or later, and the cluster is being created in an Amazon VPC. If you enable in-transit encryption, you must also specify a value for CacheSubnetGroup. Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6, 4.x or later. Default: false For HIPAA compliance, you must specify TransitEncryptionEnabled as true, an AuthToken, and a CacheSubnetGroup.
    var transitEncryptionEnabled: Swift.Bool?
    /// The user group to associate with the replication group.
    var userGroupIds: [Swift.String]?

    public init (
        atRestEncryptionEnabled: Swift.Bool? = nil,
        authToken: Swift.String? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        automaticFailoverEnabled: Swift.Bool? = nil,
        cacheNodeType: Swift.String? = nil,
        cacheParameterGroupName: Swift.String? = nil,
        cacheSecurityGroupNames: [Swift.String]? = nil,
        cacheSubnetGroupName: Swift.String? = nil,
        dataTieringEnabled: Swift.Bool? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        globalReplicationGroupId: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]? = nil,
        multiAZEnabled: Swift.Bool? = nil,
        nodeGroupConfiguration: [ElastiCacheClientTypes.NodeGroupConfiguration]? = nil,
        notificationTopicArn: Swift.String? = nil,
        numCacheClusters: Swift.Int? = nil,
        numNodeGroups: Swift.Int? = nil,
        port: Swift.Int? = nil,
        preferredCacheClusterAZs: [Swift.String]? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        primaryClusterId: Swift.String? = nil,
        replicasPerNodeGroup: Swift.Int? = nil,
        replicationGroupDescription: Swift.String? = nil,
        replicationGroupId: Swift.String? = nil,
        securityGroupIds: [Swift.String]? = nil,
        snapshotArns: [Swift.String]? = nil,
        snapshotName: Swift.String? = nil,
        snapshotRetentionLimit: Swift.Int? = nil,
        snapshotWindow: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil,
        transitEncryptionEnabled: Swift.Bool? = nil,
        userGroupIds: [Swift.String]? = nil
    )
    {
        self.atRestEncryptionEnabled = atRestEncryptionEnabled
        self.authToken = authToken
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.automaticFailoverEnabled = automaticFailoverEnabled
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSecurityGroupNames = cacheSecurityGroupNames
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.dataTieringEnabled = dataTieringEnabled
        self.engine = engine
        self.engineVersion = engineVersion
        self.globalReplicationGroupId = globalReplicationGroupId
        self.kmsKeyId = kmsKeyId
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.multiAZEnabled = multiAZEnabled
        self.nodeGroupConfiguration = nodeGroupConfiguration
        self.notificationTopicArn = notificationTopicArn
        self.numCacheClusters = numCacheClusters
        self.numNodeGroups = numNodeGroups
        self.port = port
        self.preferredCacheClusterAZs = preferredCacheClusterAZs
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.primaryClusterId = primaryClusterId
        self.replicasPerNodeGroup = replicasPerNodeGroup
        self.replicationGroupDescription = replicationGroupDescription
        self.replicationGroupId = replicationGroupId
        self.securityGroupIds = securityGroupIds
        self.snapshotArns = snapshotArns
        self.snapshotName = snapshotName
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
        self.tags = tags
        self.transitEncryptionEnabled = transitEncryptionEnabled
        self.userGroupIds = userGroupIds
    }
}

extension CreateReplicationGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateReplicationGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFound" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupNotFound" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFound" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClusterQuotaForCustomerExceeded" : self = .clusterQuotaForCustomerExceededFault(try ClusterQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCacheClusterCapacity" : self = .insufficientCacheClusterCapacityFault(try InsufficientCacheClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterState" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupState" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserGroupState" : self = .invalidUserGroupStateFault(try InvalidUserGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCNetworkStateFault" : self = .invalidVPCNetworkStateFault(try InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeGroupsPerReplicationGroupQuotaExceeded" : self = .nodeGroupsPerReplicationGroupQuotaExceededFault(try NodeGroupsPerReplicationGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForClusterExceeded" : self = .nodeQuotaForClusterExceededFault(try NodeQuotaForClusterExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForCustomerExceeded" : self = .nodeQuotaForCustomerExceededFault(try NodeQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupAlreadyExists" : self = .replicationGroupAlreadyExistsFault(try ReplicationGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFound" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateReplicationGroupOutputError: Swift.Error, Swift.Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case clusterQuotaForCustomerExceededFault(ClusterQuotaForCustomerExceededFault)
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case insufficientCacheClusterCapacityFault(InsufficientCacheClusterCapacityFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidUserGroupStateFault(InvalidUserGroupStateFault)
    case invalidVPCNetworkStateFault(InvalidVPCNetworkStateFault)
    case nodeGroupsPerReplicationGroupQuotaExceededFault(NodeGroupsPerReplicationGroupQuotaExceededFault)
    case nodeQuotaForClusterExceededFault(NodeQuotaForClusterExceededFault)
    case nodeQuotaForCustomerExceededFault(NodeQuotaForCustomerExceededFault)
    case replicationGroupAlreadyExistsFault(ReplicationGroupAlreadyExistsFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateReplicationGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct CreateReplicationGroupOutputResponse: Swift.Equatable {
    /// Contains all of the attributes of a specific Redis replication group.
    var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init (
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct CreateReplicationGroupOutputResponseBody: Swift.Equatable {
    let replicationGroup: ElastiCacheClientTypes.ReplicationGroup?
}

extension CreateReplicationGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateReplicationGroupResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

extension CreateSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let snapshotName = snapshotName {
            try container.encode(snapshotName, forKey: ClientRuntime.Key("SnapshotName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a CreateSnapshot operation.
public struct CreateSnapshotInput: Swift.Equatable {
    /// The identifier of an existing cluster. The snapshot is created from this cluster.
    var cacheClusterId: Swift.String?
    /// The ID of the KMS key used to encrypt the snapshot.
    var kmsKeyId: Swift.String?
    /// The identifier of an existing replication group. The snapshot is created from this replication group.
    var replicationGroupId: Swift.String?
    /// A name for the snapshot being created.
    /// This member is required.
    var snapshotName: Swift.String?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    var tags: [ElastiCacheClientTypes.Tag]?

    public init (
        cacheClusterId: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        replicationGroupId: Swift.String? = nil,
        snapshotName: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.kmsKeyId = kmsKeyId
        self.replicationGroupId = replicationGroupId
        self.snapshotName = snapshotName
        self.tags = tags
    }
}

extension CreateSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFound" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterState" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupState" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotAlreadyExistsFault" : self = .snapshotAlreadyExistsFault(try SnapshotAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotFeatureNotSupportedFault" : self = .snapshotFeatureNotSupportedFault(try SnapshotFeatureNotSupportedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotQuotaExceededFault" : self = .snapshotQuotaExceededFault(try SnapshotQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateSnapshotOutputError: Swift.Error, Swift.Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case snapshotAlreadyExistsFault(SnapshotAlreadyExistsFault)
    case snapshotFeatureNotSupportedFault(SnapshotFeatureNotSupportedFault)
    case snapshotQuotaExceededFault(SnapshotQuotaExceededFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.snapshot = output.snapshot
        } else {
            self.snapshot = nil
        }
    }
}

public struct CreateSnapshotOutputResponse: Swift.Equatable {
    /// Represents a copy of an entire Redis cluster as of the time when the snapshot was taken.
    var snapshot: ElastiCacheClientTypes.Snapshot?

    public init (
        snapshot: ElastiCacheClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

struct CreateSnapshotOutputResponseBody: Swift.Equatable {
    let snapshot: ElastiCacheClientTypes.Snapshot?
}

extension CreateSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshot = "Snapshot"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateSnapshotResult"))
        let snapshotDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Snapshot.self, forKey: .snapshot)
        snapshot = snapshotDecoded
    }
}

extension CreateUserGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        if let userGroupId = userGroupId {
            try container.encode(userGroupId, forKey: ClientRuntime.Key("UserGroupId"))
        }
        if let userIds = userIds {
            var userIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserIds"))
            for (index0, userid0) in userIds.enumerated() {
                try userIdsContainer.encode(userid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateUserGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateUserGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateUserGroupInput: Swift.Equatable {
    /// The current supported value is Redis.
    /// This member is required.
    var engine: Swift.String?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    var tags: [ElastiCacheClientTypes.Tag]?
    /// The ID of the user group.
    /// This member is required.
    var userGroupId: Swift.String?
    /// The list of user IDs that belong to the user group.
    var userIds: [Swift.String]?

    public init (
        engine: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil,
        userGroupId: Swift.String? = nil,
        userIds: [Swift.String]? = nil
    )
    {
        self.engine = engine
        self.tags = tags
        self.userGroupId = userGroupId
        self.userIds = userIds
    }
}

extension CreateUserGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateUserGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DefaultUserRequired" : self = .defaultUserRequired(try DefaultUserRequired(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateUserName" : self = .duplicateUserNameFault(try DuplicateUserNameFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleNotFoundFault" : self = .serviceLinkedRoleNotFoundFault(try ServiceLinkedRoleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupAlreadyExists" : self = .userGroupAlreadyExistsFault(try UserGroupAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupQuotaExceeded" : self = .userGroupQuotaExceededFault(try UserGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFound" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateUserGroupOutputError: Swift.Error, Swift.Equatable {
    case defaultUserRequired(DefaultUserRequired)
    case duplicateUserNameFault(DuplicateUserNameFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case serviceLinkedRoleNotFoundFault(ServiceLinkedRoleNotFoundFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case userGroupAlreadyExistsFault(UserGroupAlreadyExistsFault)
    case userGroupQuotaExceededFault(UserGroupQuotaExceededFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateUserGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateUserGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aRN = output.aRN
            self.engine = output.engine
            self.minimumEngineVersion = output.minimumEngineVersion
            self.pendingChanges = output.pendingChanges
            self.replicationGroups = output.replicationGroups
            self.status = output.status
            self.userGroupId = output.userGroupId
            self.userIds = output.userIds
        } else {
            self.aRN = nil
            self.engine = nil
            self.minimumEngineVersion = nil
            self.pendingChanges = nil
            self.replicationGroups = nil
            self.status = nil
            self.userGroupId = nil
            self.userIds = nil
        }
    }
}

public struct CreateUserGroupOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the user group.
    var aRN: Swift.String?
    /// The current supported value is Redis.
    var engine: Swift.String?
    /// The minimum engine version required, which is Redis 6.0
    var minimumEngineVersion: Swift.String?
    /// A list of updates being applied to the user group.
    var pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges?
    /// A list of replication groups that the user group can access.
    var replicationGroups: [Swift.String]?
    /// Indicates user group status. Can be "creating", "active", "modifying", "deleting".
    var status: Swift.String?
    /// The ID of the user group.
    var userGroupId: Swift.String?
    /// The list of user IDs that belong to the user group.
    var userIds: [Swift.String]?

    public init (
        aRN: Swift.String? = nil,
        engine: Swift.String? = nil,
        minimumEngineVersion: Swift.String? = nil,
        pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges? = nil,
        replicationGroups: [Swift.String]? = nil,
        status: Swift.String? = nil,
        userGroupId: Swift.String? = nil,
        userIds: [Swift.String]? = nil
    )
    {
        self.aRN = aRN
        self.engine = engine
        self.minimumEngineVersion = minimumEngineVersion
        self.pendingChanges = pendingChanges
        self.replicationGroups = replicationGroups
        self.status = status
        self.userGroupId = userGroupId
        self.userIds = userIds
    }
}

struct CreateUserGroupOutputResponseBody: Swift.Equatable {
    let userGroupId: Swift.String?
    let status: Swift.String?
    let engine: Swift.String?
    let userIds: [Swift.String]?
    let minimumEngineVersion: Swift.String?
    let pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges?
    let replicationGroups: [Swift.String]?
    let aRN: Swift.String?
}

extension CreateUserGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case engine = "Engine"
        case minimumEngineVersion = "MinimumEngineVersion"
        case pendingChanges = "PendingChanges"
        case replicationGroups = "ReplicationGroups"
        case status = "Status"
        case userGroupId = "UserGroupId"
        case userIds = "UserIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateUserGroupResult"))
        let userGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userGroupId)
        userGroupId = userGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        if containerValues.contains(.userIds) {
            struct KeyVal0{struct member{}}
            let userIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIds)
            if let userIdsWrappedContainer = userIdsWrappedContainer {
                let userIdsContainer = try userIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userIdsBuffer:[Swift.String]? = nil
                if let userIdsContainer = userIdsContainer {
                    userIdsBuffer = [Swift.String]()
                    for stringContainer0 in userIdsContainer {
                        userIdsBuffer?.append(stringContainer0)
                    }
                }
                userIds = userIdsBuffer
            } else {
                userIds = []
            }
        } else {
            userIds = nil
        }
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        let pendingChangesDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.UserGroupPendingChanges.self, forKey: .pendingChanges)
        pendingChanges = pendingChangesDecoded
        if containerValues.contains(.replicationGroups) {
            struct KeyVal0{struct member{}}
            let replicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replicationGroups)
            if let replicationGroupsWrappedContainer = replicationGroupsWrappedContainer {
                let replicationGroupsContainer = try replicationGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var replicationGroupsBuffer:[Swift.String]? = nil
                if let replicationGroupsContainer = replicationGroupsContainer {
                    replicationGroupsBuffer = [Swift.String]()
                    for stringContainer0 in replicationGroupsContainer {
                        replicationGroupsBuffer?.append(stringContainer0)
                    }
                }
                replicationGroups = replicationGroupsBuffer
            } else {
                replicationGroups = []
            }
        } else {
            replicationGroups = nil
        }
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension CreateUserInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accessString = accessString {
            try container.encode(accessString, forKey: ClientRuntime.Key("AccessString"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let noPasswordRequired = noPasswordRequired {
            try container.encode(noPasswordRequired, forKey: ClientRuntime.Key("NoPasswordRequired"))
        }
        if let passwords = passwords {
            var passwordsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Passwords"))
            for (index0, string0) in passwords.enumerated() {
                try passwordsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        if let userId = userId {
            try container.encode(userId, forKey: ClientRuntime.Key("UserId"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
        try container.encode("CreateUser", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateUserInput: Swift.Equatable {
    /// Access permissions string used for this user.
    /// This member is required.
    var accessString: Swift.String?
    /// The current supported value is Redis.
    /// This member is required.
    var engine: Swift.String?
    /// Indicates a password is not required for this user.
    var noPasswordRequired: Swift.Bool?
    /// Passwords used for this user. You can create up to two passwords for each user.
    var passwords: [Swift.String]?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    var tags: [ElastiCacheClientTypes.Tag]?
    /// The ID of the user.
    /// This member is required.
    var userId: Swift.String?
    /// The username of the user.
    /// This member is required.
    var userName: Swift.String?

    public init (
        accessString: Swift.String? = nil,
        engine: Swift.String? = nil,
        noPasswordRequired: Swift.Bool? = nil,
        passwords: [Swift.String]? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil,
        userId: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.accessString = accessString
        self.engine = engine
        self.noPasswordRequired = noPasswordRequired
        self.passwords = passwords
        self.tags = tags
        self.userId = userId
        self.userName = userName
    }
}

extension CreateUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DuplicateUserName" : self = .duplicateUserNameFault(try DuplicateUserNameFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleNotFoundFault" : self = .serviceLinkedRoleNotFoundFault(try ServiceLinkedRoleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserAlreadyExists" : self = .userAlreadyExistsFault(try UserAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserQuotaExceeded" : self = .userQuotaExceededFault(try UserQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateUserOutputError: Swift.Error, Swift.Equatable {
    case duplicateUserNameFault(DuplicateUserNameFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case serviceLinkedRoleNotFoundFault(ServiceLinkedRoleNotFoundFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case userAlreadyExistsFault(UserAlreadyExistsFault)
    case userQuotaExceededFault(UserQuotaExceededFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateUserOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aRN = output.aRN
            self.accessString = output.accessString
            self.authentication = output.authentication
            self.engine = output.engine
            self.minimumEngineVersion = output.minimumEngineVersion
            self.status = output.status
            self.userGroupIds = output.userGroupIds
            self.userId = output.userId
            self.userName = output.userName
        } else {
            self.aRN = nil
            self.accessString = nil
            self.authentication = nil
            self.engine = nil
            self.minimumEngineVersion = nil
            self.status = nil
            self.userGroupIds = nil
            self.userId = nil
            self.userName = nil
        }
    }
}

public struct CreateUserOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the user.
    var aRN: Swift.String?
    /// Access permissions string used for this user.
    var accessString: Swift.String?
    /// Denotes whether the user requires a password to authenticate.
    var authentication: ElastiCacheClientTypes.Authentication?
    /// The current supported value is Redis.
    var engine: Swift.String?
    /// The minimum engine version required, which is Redis 6.0
    var minimumEngineVersion: Swift.String?
    /// Indicates the user status. Can be "active", "modifying" or "deleting".
    var status: Swift.String?
    /// Returns a list of the user group IDs the user belongs to.
    var userGroupIds: [Swift.String]?
    /// The ID of the user.
    var userId: Swift.String?
    /// The username of the user.
    var userName: Swift.String?

    public init (
        aRN: Swift.String? = nil,
        accessString: Swift.String? = nil,
        authentication: ElastiCacheClientTypes.Authentication? = nil,
        engine: Swift.String? = nil,
        minimumEngineVersion: Swift.String? = nil,
        status: Swift.String? = nil,
        userGroupIds: [Swift.String]? = nil,
        userId: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.aRN = aRN
        self.accessString = accessString
        self.authentication = authentication
        self.engine = engine
        self.minimumEngineVersion = minimumEngineVersion
        self.status = status
        self.userGroupIds = userGroupIds
        self.userId = userId
        self.userName = userName
    }
}

struct CreateUserOutputResponseBody: Swift.Equatable {
    let userId: Swift.String?
    let userName: Swift.String?
    let status: Swift.String?
    let engine: Swift.String?
    let minimumEngineVersion: Swift.String?
    let accessString: Swift.String?
    let userGroupIds: [Swift.String]?
    let authentication: ElastiCacheClientTypes.Authentication?
    let aRN: Swift.String?
}

extension CreateUserOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case accessString = "AccessString"
        case authentication = "Authentication"
        case engine = "Engine"
        case minimumEngineVersion = "MinimumEngineVersion"
        case status = "Status"
        case userGroupIds = "UserGroupIds"
        case userId = "UserId"
        case userName = "UserName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateUserResult"))
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        let accessStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessString)
        accessString = accessStringDecoded
        if containerValues.contains(.userGroupIds) {
            struct KeyVal0{struct member{}}
            let userGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIds)
            if let userGroupIdsWrappedContainer = userGroupIdsWrappedContainer {
                let userGroupIdsContainer = try userGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userGroupIdsBuffer:[Swift.String]? = nil
                if let userGroupIdsContainer = userGroupIdsContainer {
                    userGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in userGroupIdsContainer {
                        userGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                userGroupIds = userGroupIdsBuffer
            } else {
                userGroupIds = []
            }
        } else {
            userGroupIds = nil
        }
        let authenticationDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Authentication.self, forKey: .authentication)
        authentication = authenticationDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension ElastiCacheClientTypes.CustomerNodeEndpoint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case port = "Port"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let address = address {
            try container.encode(address, forKey: ClientRuntime.Key("Address"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
    }
}

extension ElastiCacheClientTypes {
    /// The endpoint from which data should be migrated.
    public struct CustomerNodeEndpoint: Swift.Equatable {
        /// The address of the node endpoint
        var address: Swift.String?
        /// The port of the node endpoint
        var port: Swift.Int?

        public init (
            address: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.address = address
            self.port = port
        }
    }

}

extension ElastiCacheClientTypes {
    public enum DataTieringStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DataTieringStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataTieringStatus(rawValue: rawValue) ?? DataTieringStatus.sdkUnknown(rawValue)
        }
    }
}

extension DecreaseNodeGroupsInGlobalReplicationGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: ClientRuntime.Key("ApplyImmediately"))
        }
        if let globalNodeGroupsToRemove = globalNodeGroupsToRemove {
            var globalNodeGroupsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("GlobalNodeGroupsToRemove"))
            for (index0, string0) in globalNodeGroupsToRemove.enumerated() {
                try globalNodeGroupsToRemoveContainer.encode(string0, forKey: ClientRuntime.Key("GlobalNodeGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let globalNodeGroupsToRetain = globalNodeGroupsToRetain {
            var globalNodeGroupsToRetainContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("GlobalNodeGroupsToRetain"))
            for (index0, string0) in globalNodeGroupsToRetain.enumerated() {
                try globalNodeGroupsToRetainContainer.encode(string0, forKey: ClientRuntime.Key("GlobalNodeGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: ClientRuntime.Key("GlobalReplicationGroupId"))
        }
        if nodeGroupCount != 0 {
            try container.encode(nodeGroupCount, forKey: ClientRuntime.Key("NodeGroupCount"))
        }
        try container.encode("DecreaseNodeGroupsInGlobalReplicationGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DecreaseNodeGroupsInGlobalReplicationGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DecreaseNodeGroupsInGlobalReplicationGroupInput: Swift.Equatable {
    /// Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is true.
    /// This member is required.
    var applyImmediately: Swift.Bool
    /// If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRemove is a list of NodeGroupIds to remove from the cluster. ElastiCache for Redis will attempt to remove all node groups listed by GlobalNodeGroupsToRemove from the cluster.
    var globalNodeGroupsToRemove: [Swift.String]?
    /// If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRetain is a list of NodeGroupIds to retain from the cluster. ElastiCache for Redis will attempt to retain all node groups listed by GlobalNodeGroupsToRetain from the cluster.
    var globalNodeGroupsToRetain: [Swift.String]?
    /// The name of the Global datastore
    /// This member is required.
    var globalReplicationGroupId: Swift.String?
    /// The number of node groups (shards) that results from the modification of the shard configuration
    /// This member is required.
    var nodeGroupCount: Swift.Int

    public init (
        applyImmediately: Swift.Bool = false,
        globalNodeGroupsToRemove: [Swift.String]? = nil,
        globalNodeGroupsToRetain: [Swift.String]? = nil,
        globalReplicationGroupId: Swift.String? = nil,
        nodeGroupCount: Swift.Int = 0
    )
    {
        self.applyImmediately = applyImmediately
        self.globalNodeGroupsToRemove = globalNodeGroupsToRemove
        self.globalNodeGroupsToRetain = globalNodeGroupsToRetain
        self.globalReplicationGroupId = globalReplicationGroupId
        self.nodeGroupCount = nodeGroupCount
    }
}

extension DecreaseNodeGroupsInGlobalReplicationGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DecreaseNodeGroupsInGlobalReplicationGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupState" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DecreaseNodeGroupsInGlobalReplicationGroupOutputError: Swift.Error, Swift.Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DecreaseNodeGroupsInGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse: Swift.Equatable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init (
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct DecreaseNodeGroupsInGlobalReplicationGroupOutputResponseBody: Swift.Equatable {
    let globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?
}

extension DecreaseNodeGroupsInGlobalReplicationGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DecreaseNodeGroupsInGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

extension DecreaseReplicaCountInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: ClientRuntime.Key("ApplyImmediately"))
        }
        if let newReplicaCount = newReplicaCount {
            try container.encode(newReplicaCount, forKey: ClientRuntime.Key("NewReplicaCount"))
        }
        if let replicaConfiguration = replicaConfiguration {
            var replicaConfigurationContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplicaConfiguration"))
            for (index0, configureshard0) in replicaConfiguration.enumerated() {
                try replicaConfigurationContainer.encode(configureshard0, forKey: ClientRuntime.Key("ConfigureShard.\(index0.advanced(by: 1))"))
            }
        }
        if let replicasToRemove = replicasToRemove {
            var replicasToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplicasToRemove"))
            for (index0, string0) in replicasToRemove.enumerated() {
                try replicasToRemoveContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        try container.encode("DecreaseReplicaCount", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DecreaseReplicaCountInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DecreaseReplicaCountInput: Swift.Equatable {
    /// If True, the number of replica nodes is decreased immediately. ApplyImmediately=False is not currently supported.
    /// This member is required.
    var applyImmediately: Swift.Bool
    /// The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups. The minimum number of replicas in a shard or replication group is:
    ///
    /// * Redis (cluster mode disabled)
    ///
    /// * If Multi-AZ is enabled: 1
    ///
    /// * If Multi-AZ is not enabled: 0
    ///
    ///
    ///
    ///
    /// * Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)
    var newReplicaCount: Swift.Int?
    /// A list of ConfigureShard objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The ConfigureShard has three members: NewReplicaCount, NodeGroupId, and PreferredAvailabilityZones.
    var replicaConfiguration: [ElastiCacheClientTypes.ConfigureShard]?
    /// A list of the node ids to remove from the replication group or node group (shard).
    var replicasToRemove: [Swift.String]?
    /// The id of the replication group from which you want to remove replica nodes.
    /// This member is required.
    var replicationGroupId: Swift.String?

    public init (
        applyImmediately: Swift.Bool = false,
        newReplicaCount: Swift.Int? = nil,
        replicaConfiguration: [ElastiCacheClientTypes.ConfigureShard]? = nil,
        replicasToRemove: [Swift.String]? = nil,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.newReplicaCount = newReplicaCount
        self.replicaConfiguration = replicaConfiguration
        self.replicasToRemove = replicasToRemove
        self.replicationGroupId = replicationGroupId
    }
}

extension DecreaseReplicaCountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DecreaseReplicaCountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClusterQuotaForCustomerExceeded" : self = .clusterQuotaForCustomerExceededFault(try ClusterQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCacheClusterCapacity" : self = .insufficientCacheClusterCapacityFault(try InsufficientCacheClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterState" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupState" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCNetworkStateFault" : self = .invalidVPCNetworkStateFault(try InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeGroupsPerReplicationGroupQuotaExceeded" : self = .nodeGroupsPerReplicationGroupQuotaExceededFault(try NodeGroupsPerReplicationGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForCustomerExceeded" : self = .nodeQuotaForCustomerExceededFault(try NodeQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoOperationFault" : self = .noOperationFault(try NoOperationFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleNotFoundFault" : self = .serviceLinkedRoleNotFoundFault(try ServiceLinkedRoleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DecreaseReplicaCountOutputError: Swift.Error, Swift.Equatable {
    case clusterQuotaForCustomerExceededFault(ClusterQuotaForCustomerExceededFault)
    case insufficientCacheClusterCapacityFault(InsufficientCacheClusterCapacityFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case invalidVPCNetworkStateFault(InvalidVPCNetworkStateFault)
    case nodeGroupsPerReplicationGroupQuotaExceededFault(NodeGroupsPerReplicationGroupQuotaExceededFault)
    case nodeQuotaForCustomerExceededFault(NodeQuotaForCustomerExceededFault)
    case noOperationFault(NoOperationFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case serviceLinkedRoleNotFoundFault(ServiceLinkedRoleNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DecreaseReplicaCountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DecreaseReplicaCountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct DecreaseReplicaCountOutputResponse: Swift.Equatable {
    /// Contains all of the attributes of a specific Redis replication group.
    var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init (
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct DecreaseReplicaCountOutputResponseBody: Swift.Equatable {
    let replicationGroup: ElastiCacheClientTypes.ReplicationGroup?
}

extension DecreaseReplicaCountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DecreaseReplicaCountResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

extension DefaultUserAssociatedToUserGroupFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<DefaultUserAssociatedToUserGroupFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The default user assigned to the user group.
public struct DefaultUserAssociatedToUserGroupFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DefaultUserAssociatedToUserGroupFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension DefaultUserAssociatedToUserGroupFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DefaultUserRequired {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<DefaultUserRequiredBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You must add default user to a user group.
public struct DefaultUserRequired: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DefaultUserRequiredBody: Swift.Equatable {
    let message: Swift.String?
}

extension DefaultUserRequiredBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeleteCacheClusterInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let finalSnapshotIdentifier = finalSnapshotIdentifier {
            try container.encode(finalSnapshotIdentifier, forKey: ClientRuntime.Key("FinalSnapshotIdentifier"))
        }
        try container.encode("DeleteCacheCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteCacheClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeleteCacheCluster operation.
public struct DeleteCacheClusterInput: Swift.Equatable {
    /// The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
    /// This member is required.
    var cacheClusterId: Swift.String?
    /// The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
    var finalSnapshotIdentifier: Swift.String?

    public init (
        cacheClusterId: Swift.String? = nil,
        finalSnapshotIdentifier: Swift.String? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.finalSnapshotIdentifier = finalSnapshotIdentifier
    }
}

extension DeleteCacheClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteCacheClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFound" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterState" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotAlreadyExistsFault" : self = .snapshotAlreadyExistsFault(try SnapshotAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotFeatureNotSupportedFault" : self = .snapshotFeatureNotSupportedFault(try SnapshotFeatureNotSupportedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotQuotaExceededFault" : self = .snapshotQuotaExceededFault(try SnapshotQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCacheClusterOutputError: Swift.Error, Swift.Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case snapshotAlreadyExistsFault(SnapshotAlreadyExistsFault)
    case snapshotFeatureNotSupportedFault(SnapshotFeatureNotSupportedFault)
    case snapshotQuotaExceededFault(SnapshotQuotaExceededFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCacheClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteCacheClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheCluster = output.cacheCluster
        } else {
            self.cacheCluster = nil
        }
    }
}

public struct DeleteCacheClusterOutputResponse: Swift.Equatable {
    /// Contains all of the attributes of a specific cluster.
    var cacheCluster: ElastiCacheClientTypes.CacheCluster?

    public init (
        cacheCluster: ElastiCacheClientTypes.CacheCluster? = nil
    )
    {
        self.cacheCluster = cacheCluster
    }
}

struct DeleteCacheClusterOutputResponseBody: Swift.Equatable {
    let cacheCluster: ElastiCacheClientTypes.CacheCluster?
}

extension DeleteCacheClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheCluster = "CacheCluster"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteCacheClusterResult"))
        let cacheClusterDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.CacheCluster.self, forKey: .cacheCluster)
        cacheCluster = cacheClusterDecoded
    }
}

extension DeleteCacheParameterGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        try container.encode("DeleteCacheParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteCacheParameterGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeleteCacheParameterGroup operation.
public struct DeleteCacheParameterGroupInput: Swift.Equatable {
    /// The name of the cache parameter group to delete. The specified cache security group must not be associated with any clusters.
    /// This member is required.
    var cacheParameterGroupName: Swift.String?

    public init (
        cacheParameterGroupName: Swift.String? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
    }
}

extension DeleteCacheParameterGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteCacheParameterGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheParameterGroupNotFound" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheParameterGroupState" : self = .invalidCacheParameterGroupStateFault(try InvalidCacheParameterGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCacheParameterGroupOutputError: Swift.Error, Swift.Equatable {
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case invalidCacheParameterGroupStateFault(InvalidCacheParameterGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCacheParameterGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCacheParameterGroupOutputResponse: Swift.Equatable {

}

extension DeleteCacheSecurityGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheSecurityGroupName = cacheSecurityGroupName {
            try container.encode(cacheSecurityGroupName, forKey: ClientRuntime.Key("CacheSecurityGroupName"))
        }
        try container.encode("DeleteCacheSecurityGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteCacheSecurityGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeleteCacheSecurityGroup operation.
public struct DeleteCacheSecurityGroupInput: Swift.Equatable {
    /// The name of the cache security group to delete. You cannot delete the default security group.
    /// This member is required.
    var cacheSecurityGroupName: Swift.String?

    public init (
        cacheSecurityGroupName: Swift.String? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
    }
}

extension DeleteCacheSecurityGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteCacheSecurityGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheSecurityGroupNotFound" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheSecurityGroupState" : self = .invalidCacheSecurityGroupStateFault(try InvalidCacheSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCacheSecurityGroupOutputError: Swift.Error, Swift.Equatable {
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case invalidCacheSecurityGroupStateFault(InvalidCacheSecurityGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCacheSecurityGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCacheSecurityGroupOutputResponse: Swift.Equatable {

}

extension DeleteCacheSubnetGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: ClientRuntime.Key("CacheSubnetGroupName"))
        }
        try container.encode("DeleteCacheSubnetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteCacheSubnetGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeleteCacheSubnetGroup operation.
public struct DeleteCacheSubnetGroupInput: Swift.Equatable {
    /// The name of the cache subnet group to delete. Constraints: Must contain no more than 255 alphanumeric characters or hyphens.
    /// This member is required.
    var cacheSubnetGroupName: Swift.String?

    public init (
        cacheSubnetGroupName: Swift.String? = nil
    )
    {
        self.cacheSubnetGroupName = cacheSubnetGroupName
    }
}

extension DeleteCacheSubnetGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteCacheSubnetGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheSubnetGroupInUse" : self = .cacheSubnetGroupInUse(try CacheSubnetGroupInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCacheSubnetGroupOutputError: Swift.Error, Swift.Equatable {
    case cacheSubnetGroupInUse(CacheSubnetGroupInUse)
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCacheSubnetGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCacheSubnetGroupOutputResponse: Swift.Equatable {

}

extension DeleteGlobalReplicationGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: ClientRuntime.Key("GlobalReplicationGroupId"))
        }
        if retainPrimaryReplicationGroup != false {
            try container.encode(retainPrimaryReplicationGroup, forKey: ClientRuntime.Key("RetainPrimaryReplicationGroup"))
        }
        try container.encode("DeleteGlobalReplicationGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteGlobalReplicationGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteGlobalReplicationGroupInput: Swift.Equatable {
    /// The name of the Global datastore
    /// This member is required.
    var globalReplicationGroupId: Swift.String?
    /// The primary replication group is retained as a standalone replication group.
    /// This member is required.
    var retainPrimaryReplicationGroup: Swift.Bool

    public init (
        globalReplicationGroupId: Swift.String? = nil,
        retainPrimaryReplicationGroup: Swift.Bool = false
    )
    {
        self.globalReplicationGroupId = globalReplicationGroupId
        self.retainPrimaryReplicationGroup = retainPrimaryReplicationGroup
    }
}

extension DeleteGlobalReplicationGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteGlobalReplicationGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupState" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteGlobalReplicationGroupOutputError: Swift.Error, Swift.Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGlobalReplicationGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct DeleteGlobalReplicationGroupOutputResponse: Swift.Equatable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init (
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct DeleteGlobalReplicationGroupOutputResponseBody: Swift.Equatable {
    let globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?
}

extension DeleteGlobalReplicationGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

extension DeleteReplicationGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let finalSnapshotIdentifier = finalSnapshotIdentifier {
            try container.encode(finalSnapshotIdentifier, forKey: ClientRuntime.Key("FinalSnapshotIdentifier"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let retainPrimaryCluster = retainPrimaryCluster {
            try container.encode(retainPrimaryCluster, forKey: ClientRuntime.Key("RetainPrimaryCluster"))
        }
        try container.encode("DeleteReplicationGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteReplicationGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeleteReplicationGroup operation.
public struct DeleteReplicationGroupInput: Swift.Equatable {
    /// The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
    var finalSnapshotIdentifier: Swift.String?
    /// The identifier for the cluster to be deleted. This parameter is not case sensitive.
    /// This member is required.
    var replicationGroupId: Swift.String?
    /// If set to true, all of the read replicas are deleted, but the primary node is retained.
    var retainPrimaryCluster: Swift.Bool?

    public init (
        finalSnapshotIdentifier: Swift.String? = nil,
        replicationGroupId: Swift.String? = nil,
        retainPrimaryCluster: Swift.Bool? = nil
    )
    {
        self.finalSnapshotIdentifier = finalSnapshotIdentifier
        self.replicationGroupId = replicationGroupId
        self.retainPrimaryCluster = retainPrimaryCluster
    }
}

extension DeleteReplicationGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteReplicationGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupState" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotAlreadyExistsFault" : self = .snapshotAlreadyExistsFault(try SnapshotAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotFeatureNotSupportedFault" : self = .snapshotFeatureNotSupportedFault(try SnapshotFeatureNotSupportedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotQuotaExceededFault" : self = .snapshotQuotaExceededFault(try SnapshotQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteReplicationGroupOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case snapshotAlreadyExistsFault(SnapshotAlreadyExistsFault)
    case snapshotFeatureNotSupportedFault(SnapshotFeatureNotSupportedFault)
    case snapshotQuotaExceededFault(SnapshotQuotaExceededFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteReplicationGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct DeleteReplicationGroupOutputResponse: Swift.Equatable {
    /// Contains all of the attributes of a specific Redis replication group.
    var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init (
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct DeleteReplicationGroupOutputResponseBody: Swift.Equatable {
    let replicationGroup: ElastiCacheClientTypes.ReplicationGroup?
}

extension DeleteReplicationGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteReplicationGroupResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

extension DeleteSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let snapshotName = snapshotName {
            try container.encode(snapshotName, forKey: ClientRuntime.Key("SnapshotName"))
        }
        try container.encode("DeleteSnapshot", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteSnapshotInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeleteSnapshot operation.
public struct DeleteSnapshotInput: Swift.Equatable {
    /// The name of the snapshot to be deleted.
    /// This member is required.
    var snapshotName: Swift.String?

    public init (
        snapshotName: Swift.String? = nil
    )
    {
        self.snapshotName = snapshotName
    }
}

extension DeleteSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSnapshotState" : self = .invalidSnapshotStateFault(try InvalidSnapshotStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFoundFault" : self = .snapshotNotFoundFault(try SnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSnapshotOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidSnapshotStateFault(InvalidSnapshotStateFault)
    case snapshotNotFoundFault(SnapshotNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.snapshot = output.snapshot
        } else {
            self.snapshot = nil
        }
    }
}

public struct DeleteSnapshotOutputResponse: Swift.Equatable {
    /// Represents a copy of an entire Redis cluster as of the time when the snapshot was taken.
    var snapshot: ElastiCacheClientTypes.Snapshot?

    public init (
        snapshot: ElastiCacheClientTypes.Snapshot? = nil
    )
    {
        self.snapshot = snapshot
    }
}

struct DeleteSnapshotOutputResponseBody: Swift.Equatable {
    let snapshot: ElastiCacheClientTypes.Snapshot?
}

extension DeleteSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshot = "Snapshot"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteSnapshotResult"))
        let snapshotDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Snapshot.self, forKey: .snapshot)
        snapshot = snapshotDecoded
    }
}

extension DeleteUserGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let userGroupId = userGroupId {
            try container.encode(userGroupId, forKey: ClientRuntime.Key("UserGroupId"))
        }
        try container.encode("DeleteUserGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteUserGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteUserGroupInput: Swift.Equatable {
    /// The ID of the user group.
    /// This member is required.
    var userGroupId: Swift.String?

    public init (
        userGroupId: Swift.String? = nil
    )
    {
        self.userGroupId = userGroupId
    }
}

extension DeleteUserGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteUserGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserGroupState" : self = .invalidUserGroupStateFault(try InvalidUserGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleNotFoundFault" : self = .serviceLinkedRoleNotFoundFault(try ServiceLinkedRoleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFound" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteUserGroupOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidUserGroupStateFault(InvalidUserGroupStateFault)
    case serviceLinkedRoleNotFoundFault(ServiceLinkedRoleNotFoundFault)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteUserGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aRN = output.aRN
            self.engine = output.engine
            self.minimumEngineVersion = output.minimumEngineVersion
            self.pendingChanges = output.pendingChanges
            self.replicationGroups = output.replicationGroups
            self.status = output.status
            self.userGroupId = output.userGroupId
            self.userIds = output.userIds
        } else {
            self.aRN = nil
            self.engine = nil
            self.minimumEngineVersion = nil
            self.pendingChanges = nil
            self.replicationGroups = nil
            self.status = nil
            self.userGroupId = nil
            self.userIds = nil
        }
    }
}

public struct DeleteUserGroupOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the user group.
    var aRN: Swift.String?
    /// The current supported value is Redis.
    var engine: Swift.String?
    /// The minimum engine version required, which is Redis 6.0
    var minimumEngineVersion: Swift.String?
    /// A list of updates being applied to the user group.
    var pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges?
    /// A list of replication groups that the user group can access.
    var replicationGroups: [Swift.String]?
    /// Indicates user group status. Can be "creating", "active", "modifying", "deleting".
    var status: Swift.String?
    /// The ID of the user group.
    var userGroupId: Swift.String?
    /// The list of user IDs that belong to the user group.
    var userIds: [Swift.String]?

    public init (
        aRN: Swift.String? = nil,
        engine: Swift.String? = nil,
        minimumEngineVersion: Swift.String? = nil,
        pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges? = nil,
        replicationGroups: [Swift.String]? = nil,
        status: Swift.String? = nil,
        userGroupId: Swift.String? = nil,
        userIds: [Swift.String]? = nil
    )
    {
        self.aRN = aRN
        self.engine = engine
        self.minimumEngineVersion = minimumEngineVersion
        self.pendingChanges = pendingChanges
        self.replicationGroups = replicationGroups
        self.status = status
        self.userGroupId = userGroupId
        self.userIds = userIds
    }
}

struct DeleteUserGroupOutputResponseBody: Swift.Equatable {
    let userGroupId: Swift.String?
    let status: Swift.String?
    let engine: Swift.String?
    let userIds: [Swift.String]?
    let minimumEngineVersion: Swift.String?
    let pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges?
    let replicationGroups: [Swift.String]?
    let aRN: Swift.String?
}

extension DeleteUserGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case engine = "Engine"
        case minimumEngineVersion = "MinimumEngineVersion"
        case pendingChanges = "PendingChanges"
        case replicationGroups = "ReplicationGroups"
        case status = "Status"
        case userGroupId = "UserGroupId"
        case userIds = "UserIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteUserGroupResult"))
        let userGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userGroupId)
        userGroupId = userGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        if containerValues.contains(.userIds) {
            struct KeyVal0{struct member{}}
            let userIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIds)
            if let userIdsWrappedContainer = userIdsWrappedContainer {
                let userIdsContainer = try userIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userIdsBuffer:[Swift.String]? = nil
                if let userIdsContainer = userIdsContainer {
                    userIdsBuffer = [Swift.String]()
                    for stringContainer0 in userIdsContainer {
                        userIdsBuffer?.append(stringContainer0)
                    }
                }
                userIds = userIdsBuffer
            } else {
                userIds = []
            }
        } else {
            userIds = nil
        }
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        let pendingChangesDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.UserGroupPendingChanges.self, forKey: .pendingChanges)
        pendingChanges = pendingChangesDecoded
        if containerValues.contains(.replicationGroups) {
            struct KeyVal0{struct member{}}
            let replicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replicationGroups)
            if let replicationGroupsWrappedContainer = replicationGroupsWrappedContainer {
                let replicationGroupsContainer = try replicationGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var replicationGroupsBuffer:[Swift.String]? = nil
                if let replicationGroupsContainer = replicationGroupsContainer {
                    replicationGroupsBuffer = [Swift.String]()
                    for stringContainer0 in replicationGroupsContainer {
                        replicationGroupsBuffer?.append(stringContainer0)
                    }
                }
                replicationGroups = replicationGroupsBuffer
            } else {
                replicationGroups = []
            }
        } else {
            replicationGroups = nil
        }
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension DeleteUserInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let userId = userId {
            try container.encode(userId, forKey: ClientRuntime.Key("UserId"))
        }
        try container.encode("DeleteUser", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteUserInput: Swift.Equatable {
    /// The ID of the user.
    /// This member is required.
    var userId: Swift.String?

    public init (
        userId: Swift.String? = nil
    )
    {
        self.userId = userId
    }
}

extension DeleteUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DefaultUserAssociatedToUserGroup" : self = .defaultUserAssociatedToUserGroupFault(try DefaultUserAssociatedToUserGroupFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserState" : self = .invalidUserStateFault(try InvalidUserStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleNotFoundFault" : self = .serviceLinkedRoleNotFoundFault(try ServiceLinkedRoleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFound" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteUserOutputError: Swift.Error, Swift.Equatable {
    case defaultUserAssociatedToUserGroupFault(DefaultUserAssociatedToUserGroupFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidUserStateFault(InvalidUserStateFault)
    case serviceLinkedRoleNotFoundFault(ServiceLinkedRoleNotFoundFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteUserOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aRN = output.aRN
            self.accessString = output.accessString
            self.authentication = output.authentication
            self.engine = output.engine
            self.minimumEngineVersion = output.minimumEngineVersion
            self.status = output.status
            self.userGroupIds = output.userGroupIds
            self.userId = output.userId
            self.userName = output.userName
        } else {
            self.aRN = nil
            self.accessString = nil
            self.authentication = nil
            self.engine = nil
            self.minimumEngineVersion = nil
            self.status = nil
            self.userGroupIds = nil
            self.userId = nil
            self.userName = nil
        }
    }
}

public struct DeleteUserOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the user.
    var aRN: Swift.String?
    /// Access permissions string used for this user.
    var accessString: Swift.String?
    /// Denotes whether the user requires a password to authenticate.
    var authentication: ElastiCacheClientTypes.Authentication?
    /// The current supported value is Redis.
    var engine: Swift.String?
    /// The minimum engine version required, which is Redis 6.0
    var minimumEngineVersion: Swift.String?
    /// Indicates the user status. Can be "active", "modifying" or "deleting".
    var status: Swift.String?
    /// Returns a list of the user group IDs the user belongs to.
    var userGroupIds: [Swift.String]?
    /// The ID of the user.
    var userId: Swift.String?
    /// The username of the user.
    var userName: Swift.String?

    public init (
        aRN: Swift.String? = nil,
        accessString: Swift.String? = nil,
        authentication: ElastiCacheClientTypes.Authentication? = nil,
        engine: Swift.String? = nil,
        minimumEngineVersion: Swift.String? = nil,
        status: Swift.String? = nil,
        userGroupIds: [Swift.String]? = nil,
        userId: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.aRN = aRN
        self.accessString = accessString
        self.authentication = authentication
        self.engine = engine
        self.minimumEngineVersion = minimumEngineVersion
        self.status = status
        self.userGroupIds = userGroupIds
        self.userId = userId
        self.userName = userName
    }
}

struct DeleteUserOutputResponseBody: Swift.Equatable {
    let userId: Swift.String?
    let userName: Swift.String?
    let status: Swift.String?
    let engine: Swift.String?
    let minimumEngineVersion: Swift.String?
    let accessString: Swift.String?
    let userGroupIds: [Swift.String]?
    let authentication: ElastiCacheClientTypes.Authentication?
    let aRN: Swift.String?
}

extension DeleteUserOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case accessString = "AccessString"
        case authentication = "Authentication"
        case engine = "Engine"
        case minimumEngineVersion = "MinimumEngineVersion"
        case status = "Status"
        case userGroupIds = "UserGroupIds"
        case userId = "UserId"
        case userName = "UserName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteUserResult"))
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        let accessStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessString)
        accessString = accessStringDecoded
        if containerValues.contains(.userGroupIds) {
            struct KeyVal0{struct member{}}
            let userGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIds)
            if let userGroupIdsWrappedContainer = userGroupIdsWrappedContainer {
                let userGroupIdsContainer = try userGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userGroupIdsBuffer:[Swift.String]? = nil
                if let userGroupIdsContainer = userGroupIdsContainer {
                    userGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in userGroupIdsContainer {
                        userGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                userGroupIds = userGroupIdsBuffer
            } else {
                userGroupIds = []
            }
        } else {
            userGroupIds = nil
        }
        let authenticationDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Authentication.self, forKey: .authentication)
        authentication = authenticationDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension DescribeCacheClustersInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let showCacheClustersNotInReplicationGroups = showCacheClustersNotInReplicationGroups {
            try container.encode(showCacheClustersNotInReplicationGroups, forKey: ClientRuntime.Key("ShowCacheClustersNotInReplicationGroups"))
        }
        if let showCacheNodeInfo = showCacheNodeInfo {
            try container.encode(showCacheNodeInfo, forKey: ClientRuntime.Key("ShowCacheNodeInfo"))
        }
        try container.encode("DescribeCacheClusters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeCacheClustersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DescribeCacheClusters operation.
public struct DescribeCacheClustersInput: Swift.Equatable {
    /// The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
    var cacheClusterId: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    var maxRecords: Swift.Int?
    /// An optional flag that can be included in the DescribeCacheCluster request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
    var showCacheClustersNotInReplicationGroups: Swift.Bool?
    /// An optional flag that can be included in the DescribeCacheCluster request to retrieve information about the individual cache nodes.
    var showCacheNodeInfo: Swift.Bool?

    public init (
        cacheClusterId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        showCacheClustersNotInReplicationGroups: Swift.Bool? = nil,
        showCacheNodeInfo: Swift.Bool? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.marker = marker
        self.maxRecords = maxRecords
        self.showCacheClustersNotInReplicationGroups = showCacheClustersNotInReplicationGroups
        self.showCacheNodeInfo = showCacheNodeInfo
    }
}

extension DescribeCacheClustersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeCacheClustersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFound" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCacheClustersOutputError: Swift.Error, Swift.Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCacheClustersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeCacheClustersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheClusters = output.cacheClusters
            self.marker = output.marker
        } else {
            self.cacheClusters = nil
            self.marker = nil
        }
    }
}

/// Represents the output of a DescribeCacheClusters operation.
public struct DescribeCacheClustersOutputResponse: Swift.Equatable {
    /// A list of clusters. Each item in the list contains detailed information about one cluster.
    var cacheClusters: [ElastiCacheClientTypes.CacheCluster]?
    /// Provides an identifier to allow retrieval of paginated results.
    var marker: Swift.String?

    public init (
        cacheClusters: [ElastiCacheClientTypes.CacheCluster]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.cacheClusters = cacheClusters
        self.marker = marker
    }
}

struct DescribeCacheClustersOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let cacheClusters: [ElastiCacheClientTypes.CacheCluster]?
}

extension DescribeCacheClustersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheClusters = "CacheClusters"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeCacheClustersResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheClusters) {
            struct KeyVal0{struct CacheCluster{}}
            let cacheClustersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheCluster>.CodingKeys.self, forKey: .cacheClusters)
            if let cacheClustersWrappedContainer = cacheClustersWrappedContainer {
                let cacheClustersContainer = try cacheClustersWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheCluster].self, forKey: .member)
                var cacheClustersBuffer:[ElastiCacheClientTypes.CacheCluster]? = nil
                if let cacheClustersContainer = cacheClustersContainer {
                    cacheClustersBuffer = [ElastiCacheClientTypes.CacheCluster]()
                    for structureContainer0 in cacheClustersContainer {
                        cacheClustersBuffer?.append(structureContainer0)
                    }
                }
                cacheClusters = cacheClustersBuffer
            } else {
                cacheClusters = []
            }
        } else {
            cacheClusters = nil
        }
    }
}

extension DescribeCacheEngineVersionsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheParameterGroupFamily = cacheParameterGroupFamily {
            try container.encode(cacheParameterGroupFamily, forKey: ClientRuntime.Key("CacheParameterGroupFamily"))
        }
        if defaultOnly != false {
            try container.encode(defaultOnly, forKey: ClientRuntime.Key("DefaultOnly"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeCacheEngineVersions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeCacheEngineVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DescribeCacheEngineVersions operation.
public struct DescribeCacheEngineVersionsInput: Swift.Equatable {
    /// The name of a specific cache parameter group family to return details for. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.x | redis6.2 Constraints:
    ///
    /// * Must be 1 to 255 alphanumeric characters
    ///
    /// * First character must be a letter
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens
    var cacheParameterGroupFamily: Swift.String?
    /// If true, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
    var defaultOnly: Swift.Bool
    /// The cache engine to return. Valid values: memcached | redis
    var engine: Swift.String?
    /// The cache engine version to return. Example: 1.4.14
    var engineVersion: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    var maxRecords: Swift.Int?

    public init (
        cacheParameterGroupFamily: Swift.String? = nil,
        defaultOnly: Swift.Bool = false,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.cacheParameterGroupFamily = cacheParameterGroupFamily
        self.defaultOnly = defaultOnly
        self.engine = engine
        self.engineVersion = engineVersion
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeCacheEngineVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeCacheEngineVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCacheEngineVersionsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCacheEngineVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeCacheEngineVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheEngineVersions = output.cacheEngineVersions
            self.marker = output.marker
        } else {
            self.cacheEngineVersions = nil
            self.marker = nil
        }
    }
}

/// Represents the output of a [DescribeCacheEngineVersions] operation.
public struct DescribeCacheEngineVersionsOutputResponse: Swift.Equatable {
    /// A list of cache engine version details. Each element in the list contains detailed information about one cache engine version.
    var cacheEngineVersions: [ElastiCacheClientTypes.CacheEngineVersion]?
    /// Provides an identifier to allow retrieval of paginated results.
    var marker: Swift.String?

    public init (
        cacheEngineVersions: [ElastiCacheClientTypes.CacheEngineVersion]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.cacheEngineVersions = cacheEngineVersions
        self.marker = marker
    }
}

struct DescribeCacheEngineVersionsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let cacheEngineVersions: [ElastiCacheClientTypes.CacheEngineVersion]?
}

extension DescribeCacheEngineVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheEngineVersions = "CacheEngineVersions"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeCacheEngineVersionsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheEngineVersions) {
            struct KeyVal0{struct CacheEngineVersion{}}
            let cacheEngineVersionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheEngineVersion>.CodingKeys.self, forKey: .cacheEngineVersions)
            if let cacheEngineVersionsWrappedContainer = cacheEngineVersionsWrappedContainer {
                let cacheEngineVersionsContainer = try cacheEngineVersionsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheEngineVersion].self, forKey: .member)
                var cacheEngineVersionsBuffer:[ElastiCacheClientTypes.CacheEngineVersion]? = nil
                if let cacheEngineVersionsContainer = cacheEngineVersionsContainer {
                    cacheEngineVersionsBuffer = [ElastiCacheClientTypes.CacheEngineVersion]()
                    for structureContainer0 in cacheEngineVersionsContainer {
                        cacheEngineVersionsBuffer?.append(structureContainer0)
                    }
                }
                cacheEngineVersions = cacheEngineVersionsBuffer
            } else {
                cacheEngineVersions = []
            }
        } else {
            cacheEngineVersions = nil
        }
    }
}

extension DescribeCacheParameterGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeCacheParameterGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeCacheParameterGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DescribeCacheParameterGroups operation.
public struct DescribeCacheParameterGroupsInput: Swift.Equatable {
    /// The name of a specific cache parameter group to return details for.
    var cacheParameterGroupName: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    var maxRecords: Swift.Int?

    public init (
        cacheParameterGroupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeCacheParameterGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeCacheParameterGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheParameterGroupNotFound" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCacheParameterGroupsOutputError: Swift.Error, Swift.Equatable {
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCacheParameterGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeCacheParameterGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheParameterGroups = output.cacheParameterGroups
            self.marker = output.marker
        } else {
            self.cacheParameterGroups = nil
            self.marker = nil
        }
    }
}

/// Represents the output of a DescribeCacheParameterGroups operation.
public struct DescribeCacheParameterGroupsOutputResponse: Swift.Equatable {
    /// A list of cache parameter groups. Each element in the list contains detailed information about one cache parameter group.
    var cacheParameterGroups: [ElastiCacheClientTypes.CacheParameterGroup]?
    /// Provides an identifier to allow retrieval of paginated results.
    var marker: Swift.String?

    public init (
        cacheParameterGroups: [ElastiCacheClientTypes.CacheParameterGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.cacheParameterGroups = cacheParameterGroups
        self.marker = marker
    }
}

struct DescribeCacheParameterGroupsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let cacheParameterGroups: [ElastiCacheClientTypes.CacheParameterGroup]?
}

extension DescribeCacheParameterGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheParameterGroups = "CacheParameterGroups"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeCacheParameterGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheParameterGroups) {
            struct KeyVal0{struct CacheParameterGroup{}}
            let cacheParameterGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheParameterGroup>.CodingKeys.self, forKey: .cacheParameterGroups)
            if let cacheParameterGroupsWrappedContainer = cacheParameterGroupsWrappedContainer {
                let cacheParameterGroupsContainer = try cacheParameterGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheParameterGroup].self, forKey: .member)
                var cacheParameterGroupsBuffer:[ElastiCacheClientTypes.CacheParameterGroup]? = nil
                if let cacheParameterGroupsContainer = cacheParameterGroupsContainer {
                    cacheParameterGroupsBuffer = [ElastiCacheClientTypes.CacheParameterGroup]()
                    for structureContainer0 in cacheParameterGroupsContainer {
                        cacheParameterGroupsBuffer?.append(structureContainer0)
                    }
                }
                cacheParameterGroups = cacheParameterGroupsBuffer
            } else {
                cacheParameterGroups = []
            }
        } else {
            cacheParameterGroups = nil
        }
    }
}

extension DescribeCacheParametersInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        try container.encode("DescribeCacheParameters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeCacheParametersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DescribeCacheParameters operation.
public struct DescribeCacheParametersInput: Swift.Equatable {
    /// The name of a specific cache parameter group to return details for.
    /// This member is required.
    var cacheParameterGroupName: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    var maxRecords: Swift.Int?
    /// The parameter types to return. Valid values: user | system | engine-default
    var source: Swift.String?

    public init (
        cacheParameterGroupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        source: Swift.String? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
        self.marker = marker
        self.maxRecords = maxRecords
        self.source = source
    }
}

extension DescribeCacheParametersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeCacheParametersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheParameterGroupNotFound" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCacheParametersOutputError: Swift.Error, Swift.Equatable {
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCacheParametersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeCacheParametersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheNodeTypeSpecificParameters = output.cacheNodeTypeSpecificParameters
            self.marker = output.marker
            self.parameters = output.parameters
        } else {
            self.cacheNodeTypeSpecificParameters = nil
            self.marker = nil
            self.parameters = nil
        }
    }
}

/// Represents the output of a DescribeCacheParameters operation.
public struct DescribeCacheParametersOutputResponse: Swift.Equatable {
    /// A list of parameters specific to a particular cache node type. Each element in the list contains detailed information about one parameter.
    var cacheNodeTypeSpecificParameters: [ElastiCacheClientTypes.CacheNodeTypeSpecificParameter]?
    /// Provides an identifier to allow retrieval of paginated results.
    var marker: Swift.String?
    /// A list of [Parameter] instances.
    var parameters: [ElastiCacheClientTypes.Parameter]?

    public init (
        cacheNodeTypeSpecificParameters: [ElastiCacheClientTypes.CacheNodeTypeSpecificParameter]? = nil,
        marker: Swift.String? = nil,
        parameters: [ElastiCacheClientTypes.Parameter]? = nil
    )
    {
        self.cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParameters
        self.marker = marker
        self.parameters = parameters
    }
}

struct DescribeCacheParametersOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let parameters: [ElastiCacheClientTypes.Parameter]?
    let cacheNodeTypeSpecificParameters: [ElastiCacheClientTypes.CacheNodeTypeSpecificParameter]?
}

extension DescribeCacheParametersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheNodeTypeSpecificParameters = "CacheNodeTypeSpecificParameters"
        case marker = "Marker"
        case parameters = "Parameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeCacheParametersResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct Parameter{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Parameter>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[ElastiCacheClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [ElastiCacheClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        if containerValues.contains(.cacheNodeTypeSpecificParameters) {
            struct KeyVal0{struct CacheNodeTypeSpecificParameter{}}
            let cacheNodeTypeSpecificParametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeTypeSpecificParameter>.CodingKeys.self, forKey: .cacheNodeTypeSpecificParameters)
            if let cacheNodeTypeSpecificParametersWrappedContainer = cacheNodeTypeSpecificParametersWrappedContainer {
                let cacheNodeTypeSpecificParametersContainer = try cacheNodeTypeSpecificParametersWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheNodeTypeSpecificParameter].self, forKey: .member)
                var cacheNodeTypeSpecificParametersBuffer:[ElastiCacheClientTypes.CacheNodeTypeSpecificParameter]? = nil
                if let cacheNodeTypeSpecificParametersContainer = cacheNodeTypeSpecificParametersContainer {
                    cacheNodeTypeSpecificParametersBuffer = [ElastiCacheClientTypes.CacheNodeTypeSpecificParameter]()
                    for structureContainer0 in cacheNodeTypeSpecificParametersContainer {
                        cacheNodeTypeSpecificParametersBuffer?.append(structureContainer0)
                    }
                }
                cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParametersBuffer
            } else {
                cacheNodeTypeSpecificParameters = []
            }
        } else {
            cacheNodeTypeSpecificParameters = nil
        }
    }
}

extension DescribeCacheSecurityGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheSecurityGroupName = cacheSecurityGroupName {
            try container.encode(cacheSecurityGroupName, forKey: ClientRuntime.Key("CacheSecurityGroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeCacheSecurityGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeCacheSecurityGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DescribeCacheSecurityGroups operation.
public struct DescribeCacheSecurityGroupsInput: Swift.Equatable {
    /// The name of the cache security group to return details for.
    var cacheSecurityGroupName: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    var maxRecords: Swift.Int?

    public init (
        cacheSecurityGroupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeCacheSecurityGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeCacheSecurityGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheSecurityGroupNotFound" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCacheSecurityGroupsOutputError: Swift.Error, Swift.Equatable {
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCacheSecurityGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeCacheSecurityGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheSecurityGroups = output.cacheSecurityGroups
            self.marker = output.marker
        } else {
            self.cacheSecurityGroups = nil
            self.marker = nil
        }
    }
}

/// Represents the output of a DescribeCacheSecurityGroups operation.
public struct DescribeCacheSecurityGroupsOutputResponse: Swift.Equatable {
    /// A list of cache security groups. Each element in the list contains detailed information about one group.
    var cacheSecurityGroups: [ElastiCacheClientTypes.CacheSecurityGroup]?
    /// Provides an identifier to allow retrieval of paginated results.
    var marker: Swift.String?

    public init (
        cacheSecurityGroups: [ElastiCacheClientTypes.CacheSecurityGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.cacheSecurityGroups = cacheSecurityGroups
        self.marker = marker
    }
}

struct DescribeCacheSecurityGroupsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let cacheSecurityGroups: [ElastiCacheClientTypes.CacheSecurityGroup]?
}

extension DescribeCacheSecurityGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheSecurityGroups = "CacheSecurityGroups"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeCacheSecurityGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheSecurityGroups) {
            struct KeyVal0{struct CacheSecurityGroup{}}
            let cacheSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheSecurityGroup>.CodingKeys.self, forKey: .cacheSecurityGroups)
            if let cacheSecurityGroupsWrappedContainer = cacheSecurityGroupsWrappedContainer {
                let cacheSecurityGroupsContainer = try cacheSecurityGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheSecurityGroup].self, forKey: .member)
                var cacheSecurityGroupsBuffer:[ElastiCacheClientTypes.CacheSecurityGroup]? = nil
                if let cacheSecurityGroupsContainer = cacheSecurityGroupsContainer {
                    cacheSecurityGroupsBuffer = [ElastiCacheClientTypes.CacheSecurityGroup]()
                    for structureContainer0 in cacheSecurityGroupsContainer {
                        cacheSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                cacheSecurityGroups = cacheSecurityGroupsBuffer
            } else {
                cacheSecurityGroups = []
            }
        } else {
            cacheSecurityGroups = nil
        }
    }
}

extension DescribeCacheSubnetGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: ClientRuntime.Key("CacheSubnetGroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeCacheSubnetGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeCacheSubnetGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DescribeCacheSubnetGroups operation.
public struct DescribeCacheSubnetGroupsInput: Swift.Equatable {
    /// The name of the cache subnet group to return details for.
    var cacheSubnetGroupName: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    var maxRecords: Swift.Int?

    public init (
        cacheSubnetGroupName: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeCacheSubnetGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeCacheSubnetGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCacheSubnetGroupsOutputError: Swift.Error, Swift.Equatable {
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCacheSubnetGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeCacheSubnetGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheSubnetGroups = output.cacheSubnetGroups
            self.marker = output.marker
        } else {
            self.cacheSubnetGroups = nil
            self.marker = nil
        }
    }
}

/// Represents the output of a DescribeCacheSubnetGroups operation.
public struct DescribeCacheSubnetGroupsOutputResponse: Swift.Equatable {
    /// A list of cache subnet groups. Each element in the list contains detailed information about one group.
    var cacheSubnetGroups: [ElastiCacheClientTypes.CacheSubnetGroup]?
    /// Provides an identifier to allow retrieval of paginated results.
    var marker: Swift.String?

    public init (
        cacheSubnetGroups: [ElastiCacheClientTypes.CacheSubnetGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.cacheSubnetGroups = cacheSubnetGroups
        self.marker = marker
    }
}

struct DescribeCacheSubnetGroupsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let cacheSubnetGroups: [ElastiCacheClientTypes.CacheSubnetGroup]?
}

extension DescribeCacheSubnetGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheSubnetGroups = "CacheSubnetGroups"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeCacheSubnetGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheSubnetGroups) {
            struct KeyVal0{struct CacheSubnetGroup{}}
            let cacheSubnetGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheSubnetGroup>.CodingKeys.self, forKey: .cacheSubnetGroups)
            if let cacheSubnetGroupsWrappedContainer = cacheSubnetGroupsWrappedContainer {
                let cacheSubnetGroupsContainer = try cacheSubnetGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheSubnetGroup].self, forKey: .member)
                var cacheSubnetGroupsBuffer:[ElastiCacheClientTypes.CacheSubnetGroup]? = nil
                if let cacheSubnetGroupsContainer = cacheSubnetGroupsContainer {
                    cacheSubnetGroupsBuffer = [ElastiCacheClientTypes.CacheSubnetGroup]()
                    for structureContainer0 in cacheSubnetGroupsContainer {
                        cacheSubnetGroupsBuffer?.append(structureContainer0)
                    }
                }
                cacheSubnetGroups = cacheSubnetGroupsBuffer
            } else {
                cacheSubnetGroups = []
            }
        } else {
            cacheSubnetGroups = nil
        }
    }
}

extension DescribeEngineDefaultParametersInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheParameterGroupFamily = cacheParameterGroupFamily {
            try container.encode(cacheParameterGroupFamily, forKey: ClientRuntime.Key("CacheParameterGroupFamily"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        try container.encode("DescribeEngineDefaultParameters", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEngineDefaultParametersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DescribeEngineDefaultParameters operation.
public struct DescribeEngineDefaultParametersInput: Swift.Equatable {
    /// The name of the cache parameter group family. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.x | redis6.2
    /// This member is required.
    var cacheParameterGroupFamily: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    var maxRecords: Swift.Int?

    public init (
        cacheParameterGroupFamily: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil
    )
    {
        self.cacheParameterGroupFamily = cacheParameterGroupFamily
        self.marker = marker
        self.maxRecords = maxRecords
    }
}

extension DescribeEngineDefaultParametersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeEngineDefaultParametersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEngineDefaultParametersOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEngineDefaultParametersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeEngineDefaultParametersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.engineDefaults = output.engineDefaults
        } else {
            self.engineDefaults = nil
        }
    }
}

public struct DescribeEngineDefaultParametersOutputResponse: Swift.Equatable {
    /// Represents the output of a DescribeEngineDefaultParameters operation.
    var engineDefaults: ElastiCacheClientTypes.EngineDefaults?

    public init (
        engineDefaults: ElastiCacheClientTypes.EngineDefaults? = nil
    )
    {
        self.engineDefaults = engineDefaults
    }
}

struct DescribeEngineDefaultParametersOutputResponseBody: Swift.Equatable {
    let engineDefaults: ElastiCacheClientTypes.EngineDefaults?
}

extension DescribeEngineDefaultParametersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case engineDefaults = "EngineDefaults"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEngineDefaultParametersResult"))
        let engineDefaultsDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.EngineDefaults.self, forKey: .engineDefaults)
        engineDefaults = engineDefaultsDecoded
    }
}

extension DescribeEventsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let sourceIdentifier = sourceIdentifier {
            try container.encode(sourceIdentifier, forKey: ClientRuntime.Key("SourceIdentifier"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        try container.encode("DescribeEvents", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DescribeEvents operation.
public struct DescribeEventsInput: Swift.Equatable {
    /// The number of minutes worth of events to retrieve.
    var duration: Swift.Int?
    /// The end of the time interval for which to retrieve events, specified in ISO 8601 format. Example: 2017-03-30T07:03:49.555Z
    var endTime: ClientRuntime.Date?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    var maxRecords: Swift.Int?
    /// The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
    var sourceIdentifier: Swift.String?
    /// The event source to retrieve events for. If no value is specified, all events are returned.
    var sourceType: ElastiCacheClientTypes.SourceType?
    /// The beginning of the time interval to retrieve events for, specified in ISO 8601 format. Example: 2017-03-30T07:03:49.555Z
    var startTime: ClientRuntime.Date?

    public init (
        duration: Swift.Int? = nil,
        endTime: ClientRuntime.Date? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        sourceIdentifier: Swift.String? = nil,
        sourceType: ElastiCacheClientTypes.SourceType? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.duration = duration
        self.endTime = endTime
        self.marker = marker
        self.maxRecords = maxRecords
        self.sourceIdentifier = sourceIdentifier
        self.sourceType = sourceType
        self.startTime = startTime
    }
}

extension DescribeEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEventsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.events = output.events
            self.marker = output.marker
        } else {
            self.events = nil
            self.marker = nil
        }
    }
}

/// Represents the output of a DescribeEvents operation.
public struct DescribeEventsOutputResponse: Swift.Equatable {
    /// A list of events. Each element in the list contains detailed information about one event.
    var events: [ElastiCacheClientTypes.Event]?
    /// Provides an identifier to allow retrieval of paginated results.
    var marker: Swift.String?

    public init (
        events: [ElastiCacheClientTypes.Event]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.events = events
        self.marker = marker
    }
}

struct DescribeEventsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let events: [ElastiCacheClientTypes.Event]?
}

extension DescribeEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Events"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEventsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.events) {
            struct KeyVal0{struct Event{}}
            let eventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Event>.CodingKeys.self, forKey: .events)
            if let eventsWrappedContainer = eventsWrappedContainer {
                let eventsContainer = try eventsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.Event].self, forKey: .member)
                var eventsBuffer:[ElastiCacheClientTypes.Event]? = nil
                if let eventsContainer = eventsContainer {
                    eventsBuffer = [ElastiCacheClientTypes.Event]()
                    for structureContainer0 in eventsContainer {
                        eventsBuffer?.append(structureContainer0)
                    }
                }
                events = eventsBuffer
            } else {
                events = []
            }
        } else {
            events = nil
        }
    }
}

extension DescribeGlobalReplicationGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: ClientRuntime.Key("GlobalReplicationGroupId"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let showMemberInfo = showMemberInfo {
            try container.encode(showMemberInfo, forKey: ClientRuntime.Key("ShowMemberInfo"))
        }
        try container.encode("DescribeGlobalReplicationGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeGlobalReplicationGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeGlobalReplicationGroupsInput: Swift.Equatable {
    /// The name of the Global datastore
    var globalReplicationGroupId: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.
    var maxRecords: Swift.Int?
    /// Returns the list of members that comprise the Global datastore.
    var showMemberInfo: Swift.Bool?

    public init (
        globalReplicationGroupId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        showMemberInfo: Swift.Bool? = nil
    )
    {
        self.globalReplicationGroupId = globalReplicationGroupId
        self.marker = marker
        self.maxRecords = maxRecords
        self.showMemberInfo = showMemberInfo
    }
}

extension DescribeGlobalReplicationGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeGlobalReplicationGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeGlobalReplicationGroupsOutputError: Swift.Error, Swift.Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGlobalReplicationGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeGlobalReplicationGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalReplicationGroups = output.globalReplicationGroups
            self.marker = output.marker
        } else {
            self.globalReplicationGroups = nil
            self.marker = nil
        }
    }
}

public struct DescribeGlobalReplicationGroupsOutputResponse: Swift.Equatable {
    /// Indicates the slot configuration and global identifier for each slice group.
    var globalReplicationGroups: [ElastiCacheClientTypes.GlobalReplicationGroup]?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. >
    var marker: Swift.String?

    public init (
        globalReplicationGroups: [ElastiCacheClientTypes.GlobalReplicationGroup]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.globalReplicationGroups = globalReplicationGroups
        self.marker = marker
    }
}

struct DescribeGlobalReplicationGroupsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let globalReplicationGroups: [ElastiCacheClientTypes.GlobalReplicationGroup]?
}

extension DescribeGlobalReplicationGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalReplicationGroups = "GlobalReplicationGroups"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeGlobalReplicationGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.globalReplicationGroups) {
            struct KeyVal0{struct GlobalReplicationGroup{}}
            let globalReplicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GlobalReplicationGroup>.CodingKeys.self, forKey: .globalReplicationGroups)
            if let globalReplicationGroupsWrappedContainer = globalReplicationGroupsWrappedContainer {
                let globalReplicationGroupsContainer = try globalReplicationGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.GlobalReplicationGroup].self, forKey: .member)
                var globalReplicationGroupsBuffer:[ElastiCacheClientTypes.GlobalReplicationGroup]? = nil
                if let globalReplicationGroupsContainer = globalReplicationGroupsContainer {
                    globalReplicationGroupsBuffer = [ElastiCacheClientTypes.GlobalReplicationGroup]()
                    for structureContainer0 in globalReplicationGroupsContainer {
                        globalReplicationGroupsBuffer?.append(structureContainer0)
                    }
                }
                globalReplicationGroups = globalReplicationGroupsBuffer
            } else {
                globalReplicationGroups = []
            }
        } else {
            globalReplicationGroups = nil
        }
    }
}

extension DescribeReplicationGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        try container.encode("DescribeReplicationGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReplicationGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DescribeReplicationGroups operation.
public struct DescribeReplicationGroupsInput: Swift.Equatable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    var maxRecords: Swift.Int?
    /// The identifier for the replication group to be described. This parameter is not case sensitive. If you do not specify this parameter, information about all replication groups is returned.
    var replicationGroupId: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.replicationGroupId = replicationGroupId
    }
}

extension DescribeReplicationGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeReplicationGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeReplicationGroupsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReplicationGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeReplicationGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.replicationGroups = output.replicationGroups
        } else {
            self.marker = nil
            self.replicationGroups = nil
        }
    }
}

/// Represents the output of a DescribeReplicationGroups operation.
public struct DescribeReplicationGroupsOutputResponse: Swift.Equatable {
    /// Provides an identifier to allow retrieval of paginated results.
    var marker: Swift.String?
    /// A list of replication groups. Each item in the list contains detailed information about one replication group.
    var replicationGroups: [ElastiCacheClientTypes.ReplicationGroup]?

    public init (
        marker: Swift.String? = nil,
        replicationGroups: [ElastiCacheClientTypes.ReplicationGroup]? = nil
    )
    {
        self.marker = marker
        self.replicationGroups = replicationGroups
    }
}

struct DescribeReplicationGroupsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let replicationGroups: [ElastiCacheClientTypes.ReplicationGroup]?
}

extension DescribeReplicationGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case replicationGroups = "ReplicationGroups"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReplicationGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.replicationGroups) {
            struct KeyVal0{struct ReplicationGroup{}}
            let replicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReplicationGroup>.CodingKeys.self, forKey: .replicationGroups)
            if let replicationGroupsWrappedContainer = replicationGroupsWrappedContainer {
                let replicationGroupsContainer = try replicationGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.ReplicationGroup].self, forKey: .member)
                var replicationGroupsBuffer:[ElastiCacheClientTypes.ReplicationGroup]? = nil
                if let replicationGroupsContainer = replicationGroupsContainer {
                    replicationGroupsBuffer = [ElastiCacheClientTypes.ReplicationGroup]()
                    for structureContainer0 in replicationGroupsContainer {
                        replicationGroupsBuffer?.append(structureContainer0)
                    }
                }
                replicationGroups = replicationGroupsBuffer
            } else {
                replicationGroups = []
            }
        } else {
            replicationGroups = nil
        }
    }
}

extension DescribeReservedCacheNodesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: ClientRuntime.Key("OfferingType"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: ClientRuntime.Key("ProductDescription"))
        }
        if let reservedCacheNodeId = reservedCacheNodeId {
            try container.encode(reservedCacheNodeId, forKey: ClientRuntime.Key("ReservedCacheNodeId"))
        }
        if let reservedCacheNodesOfferingId = reservedCacheNodesOfferingId {
            try container.encode(reservedCacheNodesOfferingId, forKey: ClientRuntime.Key("ReservedCacheNodesOfferingId"))
        }
        try container.encode("DescribeReservedCacheNodes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReservedCacheNodesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DescribeReservedCacheNodes operation.
public struct DescribeReservedCacheNodesInput: Swift.Equatable {
    /// The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
    ///
    /// * General purpose:
    ///
    /// * Current generation: M6g node types: (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
    ///
    /// * Previous generation: (not recommended) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
    ///
    ///
    ///
    ///
    /// * Compute optimized:
    ///
    /// * Previous generation: (not recommended) C1 node types: cache.c1.xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized with data tiering:
    ///
    /// * Current generation: R6gd node types (available only for Redis engine version 6.2 onward). cache.r6gd.xlarge, cache.r6gd.2xlarge, cache.r6gd.4xlarge, cache.r6gd.8xlarge, cache.r6gd.12xlarge, cache.r6gd.16xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized:
    ///
    /// * Current generation: R6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
    ///
    /// * Previous generation: (not recommended) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
    ///
    ///
    /// cache.r3.4xlarge, cache.r3.8xlarge
    ///
    ///
    ///
    ///
    ///
    /// Additional node type info
    ///
    /// * All current generation instance types are created in Amazon VPC by default.
    ///
    /// * Redis append-only files (AOF) are not supported for T1 or T2 instances.
    ///
    /// * Redis Multi-AZ with automatic failover is not supported on T1 instances.
    ///
    /// * Redis configuration variables appendonly and appendfsync are not supported on Redis version 2.8.22 and later.
    var cacheNodeType: Swift.String?
    /// The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 | 94608000
    var duration: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    var maxRecords: Swift.Int?
    /// The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid values: "Light Utilization"|"Medium Utilization"|"Heavy Utilization"|"All Upfront"|"Partial Upfront"| "No Upfront"
    var offeringType: Swift.String?
    /// The product description filter value. Use this parameter to show only those reservations matching the specified product description.
    var productDescription: Swift.String?
    /// The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
    var reservedCacheNodeId: Swift.String?
    /// The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
    var reservedCacheNodesOfferingId: Swift.String?

    public init (
        cacheNodeType: Swift.String? = nil,
        duration: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        offeringType: Swift.String? = nil,
        productDescription: Swift.String? = nil,
        reservedCacheNodeId: Swift.String? = nil,
        reservedCacheNodesOfferingId: Swift.String? = nil
    )
    {
        self.cacheNodeType = cacheNodeType
        self.duration = duration
        self.marker = marker
        self.maxRecords = maxRecords
        self.offeringType = offeringType
        self.productDescription = productDescription
        self.reservedCacheNodeId = reservedCacheNodeId
        self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
    }
}

extension DescribeReservedCacheNodesOfferingsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let duration = duration {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: ClientRuntime.Key("OfferingType"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: ClientRuntime.Key("ProductDescription"))
        }
        if let reservedCacheNodesOfferingId = reservedCacheNodesOfferingId {
            try container.encode(reservedCacheNodesOfferingId, forKey: ClientRuntime.Key("ReservedCacheNodesOfferingId"))
        }
        try container.encode("DescribeReservedCacheNodesOfferings", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeReservedCacheNodesOfferingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DescribeReservedCacheNodesOfferings operation.
public struct DescribeReservedCacheNodesOfferingsInput: Swift.Equatable {
    /// The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
    ///
    /// * General purpose:
    ///
    /// * Current generation: M6g node types: (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward) cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
    ///
    /// * Previous generation: (not recommended) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
    ///
    ///
    ///
    ///
    /// * Compute optimized:
    ///
    /// * Previous generation: (not recommended) C1 node types: cache.c1.xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized with data tiering:
    ///
    /// * Current generation: R6gd node types (available only for Redis engine version 6.2 onward). cache.r6gd.xlarge, cache.r6gd.2xlarge, cache.r6gd.4xlarge, cache.r6gd.8xlarge, cache.r6gd.12xlarge, cache.r6gd.16xlarge
    ///
    ///
    ///
    ///
    /// * Memory optimized:
    ///
    /// * Current generation: R6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
    ///
    /// * Previous generation: (not recommended) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
    ///
    ///
    /// cache.r3.4xlarge, cache.r3.8xlarge
    ///
    ///
    ///
    ///
    ///
    /// Additional node type info
    ///
    /// * All current generation instance types are created in Amazon VPC by default.
    ///
    /// * Redis append-only files (AOF) are not supported for T1 or T2 instances.
    ///
    /// * Redis Multi-AZ with automatic failover is not supported on T1 instances.
    ///
    /// * Redis configuration variables appendonly and appendfsync are not supported on Redis version 2.8.22 and later.
    var cacheNodeType: Swift.String?
    /// Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration. Valid Values: 1 | 3 | 31536000 | 94608000
    var duration: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    var maxRecords: Swift.Int?
    /// The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid Values: "Light Utilization"|"Medium Utilization"|"Heavy Utilization" |"All Upfront"|"Partial Upfront"| "No Upfront"
    var offeringType: Swift.String?
    /// The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
    var productDescription: Swift.String?
    /// The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
    var reservedCacheNodesOfferingId: Swift.String?

    public init (
        cacheNodeType: Swift.String? = nil,
        duration: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        offeringType: Swift.String? = nil,
        productDescription: Swift.String? = nil,
        reservedCacheNodesOfferingId: Swift.String? = nil
    )
    {
        self.cacheNodeType = cacheNodeType
        self.duration = duration
        self.marker = marker
        self.maxRecords = maxRecords
        self.offeringType = offeringType
        self.productDescription = productDescription
        self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
    }
}

extension DescribeReservedCacheNodesOfferingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeReservedCacheNodesOfferingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodesOfferingNotFound" : self = .reservedCacheNodesOfferingNotFoundFault(try ReservedCacheNodesOfferingNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeReservedCacheNodesOfferingsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case reservedCacheNodesOfferingNotFoundFault(ReservedCacheNodesOfferingNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReservedCacheNodesOfferingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeReservedCacheNodesOfferingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.reservedCacheNodesOfferings = output.reservedCacheNodesOfferings
        } else {
            self.marker = nil
            self.reservedCacheNodesOfferings = nil
        }
    }
}

/// Represents the output of a DescribeReservedCacheNodesOfferings operation.
public struct DescribeReservedCacheNodesOfferingsOutputResponse: Swift.Equatable {
    /// Provides an identifier to allow retrieval of paginated results.
    var marker: Swift.String?
    /// A list of reserved cache node offerings. Each element in the list contains detailed information about one offering.
    var reservedCacheNodesOfferings: [ElastiCacheClientTypes.ReservedCacheNodesOffering]?

    public init (
        marker: Swift.String? = nil,
        reservedCacheNodesOfferings: [ElastiCacheClientTypes.ReservedCacheNodesOffering]? = nil
    )
    {
        self.marker = marker
        self.reservedCacheNodesOfferings = reservedCacheNodesOfferings
    }
}

struct DescribeReservedCacheNodesOfferingsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let reservedCacheNodesOfferings: [ElastiCacheClientTypes.ReservedCacheNodesOffering]?
}

extension DescribeReservedCacheNodesOfferingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case reservedCacheNodesOfferings = "ReservedCacheNodesOfferings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReservedCacheNodesOfferingsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedCacheNodesOfferings) {
            struct KeyVal0{struct ReservedCacheNodesOffering{}}
            let reservedCacheNodesOfferingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedCacheNodesOffering>.CodingKeys.self, forKey: .reservedCacheNodesOfferings)
            if let reservedCacheNodesOfferingsWrappedContainer = reservedCacheNodesOfferingsWrappedContainer {
                let reservedCacheNodesOfferingsContainer = try reservedCacheNodesOfferingsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.ReservedCacheNodesOffering].self, forKey: .member)
                var reservedCacheNodesOfferingsBuffer:[ElastiCacheClientTypes.ReservedCacheNodesOffering]? = nil
                if let reservedCacheNodesOfferingsContainer = reservedCacheNodesOfferingsContainer {
                    reservedCacheNodesOfferingsBuffer = [ElastiCacheClientTypes.ReservedCacheNodesOffering]()
                    for structureContainer0 in reservedCacheNodesOfferingsContainer {
                        reservedCacheNodesOfferingsBuffer?.append(structureContainer0)
                    }
                }
                reservedCacheNodesOfferings = reservedCacheNodesOfferingsBuffer
            } else {
                reservedCacheNodesOfferings = []
            }
        } else {
            reservedCacheNodesOfferings = nil
        }
    }
}

extension DescribeReservedCacheNodesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeReservedCacheNodesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodeNotFound" : self = .reservedCacheNodeNotFoundFault(try ReservedCacheNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeReservedCacheNodesOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case reservedCacheNodeNotFoundFault(ReservedCacheNodeNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReservedCacheNodesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeReservedCacheNodesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.reservedCacheNodes = output.reservedCacheNodes
        } else {
            self.marker = nil
            self.reservedCacheNodes = nil
        }
    }
}

/// Represents the output of a DescribeReservedCacheNodes operation.
public struct DescribeReservedCacheNodesOutputResponse: Swift.Equatable {
    /// Provides an identifier to allow retrieval of paginated results.
    var marker: Swift.String?
    /// A list of reserved cache nodes. Each element in the list contains detailed information about one node.
    var reservedCacheNodes: [ElastiCacheClientTypes.ReservedCacheNode]?

    public init (
        marker: Swift.String? = nil,
        reservedCacheNodes: [ElastiCacheClientTypes.ReservedCacheNode]? = nil
    )
    {
        self.marker = marker
        self.reservedCacheNodes = reservedCacheNodes
    }
}

struct DescribeReservedCacheNodesOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let reservedCacheNodes: [ElastiCacheClientTypes.ReservedCacheNode]?
}

extension DescribeReservedCacheNodesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case reservedCacheNodes = "ReservedCacheNodes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReservedCacheNodesResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedCacheNodes) {
            struct KeyVal0{struct ReservedCacheNode{}}
            let reservedCacheNodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedCacheNode>.CodingKeys.self, forKey: .reservedCacheNodes)
            if let reservedCacheNodesWrappedContainer = reservedCacheNodesWrappedContainer {
                let reservedCacheNodesContainer = try reservedCacheNodesWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.ReservedCacheNode].self, forKey: .member)
                var reservedCacheNodesBuffer:[ElastiCacheClientTypes.ReservedCacheNode]? = nil
                if let reservedCacheNodesContainer = reservedCacheNodesContainer {
                    reservedCacheNodesBuffer = [ElastiCacheClientTypes.ReservedCacheNode]()
                    for structureContainer0 in reservedCacheNodesContainer {
                        reservedCacheNodesBuffer?.append(structureContainer0)
                    }
                }
                reservedCacheNodes = reservedCacheNodesBuffer
            } else {
                reservedCacheNodes = []
            }
        } else {
            reservedCacheNodes = nil
        }
    }
}

extension DescribeServiceUpdatesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: ClientRuntime.Key("ServiceUpdateName"))
        }
        if let serviceUpdateStatus = serviceUpdateStatus {
            var serviceUpdateStatusContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceUpdateStatus"))
            for (index0, serviceupdatestatus0) in serviceUpdateStatus.enumerated() {
                try serviceUpdateStatusContainer.encode(serviceupdatestatus0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DescribeServiceUpdates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeServiceUpdatesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeServiceUpdatesInput: Swift.Equatable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response
    var maxRecords: Swift.Int?
    /// The unique ID of the service update
    var serviceUpdateName: Swift.String?
    /// The status of the service update
    var serviceUpdateStatus: [ElastiCacheClientTypes.ServiceUpdateStatus]?

    public init (
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        serviceUpdateName: Swift.String? = nil,
        serviceUpdateStatus: [ElastiCacheClientTypes.ServiceUpdateStatus]? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.serviceUpdateName = serviceUpdateName
        self.serviceUpdateStatus = serviceUpdateStatus
    }
}

extension DescribeServiceUpdatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeServiceUpdatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUpdateNotFoundFault" : self = .serviceUpdateNotFoundFault(try ServiceUpdateNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeServiceUpdatesOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case serviceUpdateNotFoundFault(ServiceUpdateNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeServiceUpdatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeServiceUpdatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.serviceUpdates = output.serviceUpdates
        } else {
            self.marker = nil
            self.serviceUpdates = nil
        }
    }
}

public struct DescribeServiceUpdatesOutputResponse: Swift.Equatable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// A list of service updates
    var serviceUpdates: [ElastiCacheClientTypes.ServiceUpdate]?

    public init (
        marker: Swift.String? = nil,
        serviceUpdates: [ElastiCacheClientTypes.ServiceUpdate]? = nil
    )
    {
        self.marker = marker
        self.serviceUpdates = serviceUpdates
    }
}

struct DescribeServiceUpdatesOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let serviceUpdates: [ElastiCacheClientTypes.ServiceUpdate]?
}

extension DescribeServiceUpdatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case serviceUpdates = "ServiceUpdates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeServiceUpdatesResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.serviceUpdates) {
            struct KeyVal0{struct ServiceUpdate{}}
            let serviceUpdatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ServiceUpdate>.CodingKeys.self, forKey: .serviceUpdates)
            if let serviceUpdatesWrappedContainer = serviceUpdatesWrappedContainer {
                let serviceUpdatesContainer = try serviceUpdatesWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.ServiceUpdate].self, forKey: .member)
                var serviceUpdatesBuffer:[ElastiCacheClientTypes.ServiceUpdate]? = nil
                if let serviceUpdatesContainer = serviceUpdatesContainer {
                    serviceUpdatesBuffer = [ElastiCacheClientTypes.ServiceUpdate]()
                    for structureContainer0 in serviceUpdatesContainer {
                        serviceUpdatesBuffer?.append(structureContainer0)
                    }
                }
                serviceUpdates = serviceUpdatesBuffer
            } else {
                serviceUpdates = []
            }
        } else {
            serviceUpdates = nil
        }
    }
}

extension DescribeSnapshotsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let showNodeGroupConfig = showNodeGroupConfig {
            try container.encode(showNodeGroupConfig, forKey: ClientRuntime.Key("ShowNodeGroupConfig"))
        }
        if let snapshotName = snapshotName {
            try container.encode(snapshotName, forKey: ClientRuntime.Key("SnapshotName"))
        }
        if let snapshotSource = snapshotSource {
            try container.encode(snapshotSource, forKey: ClientRuntime.Key("SnapshotSource"))
        }
        try container.encode("DescribeSnapshots", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeSnapshotsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DescribeSnapshotsMessage operation.
public struct DescribeSnapshotsInput: Swift.Equatable {
    /// A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
    var cacheClusterId: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 50 Constraints: minimum 20; maximum 50.
    var maxRecords: Swift.Int?
    /// A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
    var replicationGroupId: Swift.String?
    /// A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
    var showNodeGroupConfig: Swift.Bool?
    /// A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
    var snapshotName: Swift.String?
    /// If set to system, the output shows snapshots that were automatically created by ElastiCache. If set to user the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
    var snapshotSource: Swift.String?

    public init (
        cacheClusterId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        replicationGroupId: Swift.String? = nil,
        showNodeGroupConfig: Swift.Bool? = nil,
        snapshotName: Swift.String? = nil,
        snapshotSource: Swift.String? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.marker = marker
        self.maxRecords = maxRecords
        self.replicationGroupId = replicationGroupId
        self.showNodeGroupConfig = showNodeGroupConfig
        self.snapshotName = snapshotName
        self.snapshotSource = snapshotSource
    }
}

extension DescribeSnapshotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeSnapshotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFound" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFoundFault" : self = .snapshotNotFoundFault(try SnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeSnapshotsOutputError: Swift.Error, Swift.Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case snapshotNotFoundFault(SnapshotNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSnapshotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeSnapshotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.snapshots = output.snapshots
        } else {
            self.marker = nil
            self.snapshots = nil
        }
    }
}

/// Represents the output of a DescribeSnapshots operation.
public struct DescribeSnapshotsOutputResponse: Swift.Equatable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// A list of snapshots. Each item in the list contains detailed information about one snapshot.
    var snapshots: [ElastiCacheClientTypes.Snapshot]?

    public init (
        marker: Swift.String? = nil,
        snapshots: [ElastiCacheClientTypes.Snapshot]? = nil
    )
    {
        self.marker = marker
        self.snapshots = snapshots
    }
}

struct DescribeSnapshotsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let snapshots: [ElastiCacheClientTypes.Snapshot]?
}

extension DescribeSnapshotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case snapshots = "Snapshots"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeSnapshotsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.snapshots) {
            struct KeyVal0{struct Snapshot{}}
            let snapshotsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Snapshot>.CodingKeys.self, forKey: .snapshots)
            if let snapshotsWrappedContainer = snapshotsWrappedContainer {
                let snapshotsContainer = try snapshotsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.Snapshot].self, forKey: .member)
                var snapshotsBuffer:[ElastiCacheClientTypes.Snapshot]? = nil
                if let snapshotsContainer = snapshotsContainer {
                    snapshotsBuffer = [ElastiCacheClientTypes.Snapshot]()
                    for structureContainer0 in snapshotsContainer {
                        snapshotsBuffer?.append(structureContainer0)
                    }
                }
                snapshots = snapshotsBuffer
            } else {
                snapshots = []
            }
        } else {
            snapshots = nil
        }
    }
}

extension DescribeUpdateActionsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterIds = cacheClusterIds {
            var cacheClusterIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheClusterIds"))
            for (index0, string0) in cacheClusterIds.enumerated() {
                try cacheClusterIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let replicationGroupIds = replicationGroupIds {
            var replicationGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplicationGroupIds"))
            for (index0, string0) in replicationGroupIds.enumerated() {
                try replicationGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: ClientRuntime.Key("ServiceUpdateName"))
        }
        if let serviceUpdateStatus = serviceUpdateStatus {
            var serviceUpdateStatusContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ServiceUpdateStatus"))
            for (index0, serviceupdatestatus0) in serviceUpdateStatus.enumerated() {
                try serviceUpdateStatusContainer.encode(serviceupdatestatus0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let serviceUpdateTimeRange = serviceUpdateTimeRange {
            try container.encode(serviceUpdateTimeRange, forKey: ClientRuntime.Key("ServiceUpdateTimeRange"))
        }
        if let showNodeLevelUpdateStatus = showNodeLevelUpdateStatus {
            try container.encode(showNodeLevelUpdateStatus, forKey: ClientRuntime.Key("ShowNodeLevelUpdateStatus"))
        }
        if let updateActionStatus = updateActionStatus {
            var updateActionStatusContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UpdateActionStatus"))
            for (index0, updateactionstatus0) in updateActionStatus.enumerated() {
                try updateActionStatusContainer.encode(updateactionstatus0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DescribeUpdateActions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeUpdateActionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeUpdateActionsInput: Swift.Equatable {
    /// The cache cluster IDs
    var cacheClusterIds: [Swift.String]?
    /// The Elasticache engine to which the update applies. Either Redis or Memcached
    var engine: Swift.String?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// The maximum number of records to include in the response
    var maxRecords: Swift.Int?
    /// The replication group IDs
    var replicationGroupIds: [Swift.String]?
    /// The unique ID of the service update
    var serviceUpdateName: Swift.String?
    /// The status of the service update
    var serviceUpdateStatus: [ElastiCacheClientTypes.ServiceUpdateStatus]?
    /// The range of time specified to search for service updates that are in available status
    var serviceUpdateTimeRange: ElastiCacheClientTypes.TimeRangeFilter?
    /// Dictates whether to include node level update status in the response
    var showNodeLevelUpdateStatus: Swift.Bool?
    /// The status of the update action.
    var updateActionStatus: [ElastiCacheClientTypes.UpdateActionStatus]?

    public init (
        cacheClusterIds: [Swift.String]? = nil,
        engine: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        replicationGroupIds: [Swift.String]? = nil,
        serviceUpdateName: Swift.String? = nil,
        serviceUpdateStatus: [ElastiCacheClientTypes.ServiceUpdateStatus]? = nil,
        serviceUpdateTimeRange: ElastiCacheClientTypes.TimeRangeFilter? = nil,
        showNodeLevelUpdateStatus: Swift.Bool? = nil,
        updateActionStatus: [ElastiCacheClientTypes.UpdateActionStatus]? = nil
    )
    {
        self.cacheClusterIds = cacheClusterIds
        self.engine = engine
        self.marker = marker
        self.maxRecords = maxRecords
        self.replicationGroupIds = replicationGroupIds
        self.serviceUpdateName = serviceUpdateName
        self.serviceUpdateStatus = serviceUpdateStatus
        self.serviceUpdateTimeRange = serviceUpdateTimeRange
        self.showNodeLevelUpdateStatus = showNodeLevelUpdateStatus
        self.updateActionStatus = updateActionStatus
    }
}

extension DescribeUpdateActionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeUpdateActionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeUpdateActionsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUpdateActionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeUpdateActionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.updateActions = output.updateActions
        } else {
            self.marker = nil
            self.updateActions = nil
        }
    }
}

public struct DescribeUpdateActionsOutputResponse: Swift.Equatable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    var marker: Swift.String?
    /// Returns a list of update actions
    var updateActions: [ElastiCacheClientTypes.UpdateAction]?

    public init (
        marker: Swift.String? = nil,
        updateActions: [ElastiCacheClientTypes.UpdateAction]? = nil
    )
    {
        self.marker = marker
        self.updateActions = updateActions
    }
}

struct DescribeUpdateActionsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let updateActions: [ElastiCacheClientTypes.UpdateAction]?
}

extension DescribeUpdateActionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case updateActions = "UpdateActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeUpdateActionsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.updateActions) {
            struct KeyVal0{struct UpdateAction{}}
            let updateActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.UpdateAction>.CodingKeys.self, forKey: .updateActions)
            if let updateActionsWrappedContainer = updateActionsWrappedContainer {
                let updateActionsContainer = try updateActionsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.UpdateAction].self, forKey: .member)
                var updateActionsBuffer:[ElastiCacheClientTypes.UpdateAction]? = nil
                if let updateActionsContainer = updateActionsContainer {
                    updateActionsBuffer = [ElastiCacheClientTypes.UpdateAction]()
                    for structureContainer0 in updateActionsContainer {
                        updateActionsBuffer?.append(structureContainer0)
                    }
                }
                updateActions = updateActionsBuffer
            } else {
                updateActions = []
            }
        } else {
            updateActions = nil
        }
    }
}

extension DescribeUserGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let userGroupId = userGroupId {
            try container.encode(userGroupId, forKey: ClientRuntime.Key("UserGroupId"))
        }
        try container.encode("DescribeUserGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeUserGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeUserGroupsInput: Swift.Equatable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. >
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.
    var maxRecords: Swift.Int?
    /// The ID of the user group.
    var userGroupId: Swift.String?

    public init (
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        userGroupId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxRecords = maxRecords
        self.userGroupId = userGroupId
    }
}

extension DescribeUserGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeUserGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleNotFoundFault" : self = .serviceLinkedRoleNotFoundFault(try ServiceLinkedRoleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFound" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeUserGroupsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case serviceLinkedRoleNotFoundFault(ServiceLinkedRoleNotFoundFault)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUserGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeUserGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.userGroups = output.userGroups
        } else {
            self.marker = nil
            self.userGroups = nil
        }
    }
}

public struct DescribeUserGroupsOutputResponse: Swift.Equatable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. >
    var marker: Swift.String?
    /// Returns a list of user groups.
    var userGroups: [ElastiCacheClientTypes.UserGroup]?

    public init (
        marker: Swift.String? = nil,
        userGroups: [ElastiCacheClientTypes.UserGroup]? = nil
    )
    {
        self.marker = marker
        self.userGroups = userGroups
    }
}

struct DescribeUserGroupsOutputResponseBody: Swift.Equatable {
    let userGroups: [ElastiCacheClientTypes.UserGroup]?
    let marker: Swift.String?
}

extension DescribeUserGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case userGroups = "UserGroups"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeUserGroupsResult"))
        if containerValues.contains(.userGroups) {
            struct KeyVal0{struct member{}}
            let userGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroups)
            if let userGroupsWrappedContainer = userGroupsWrappedContainer {
                let userGroupsContainer = try userGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.UserGroup].self, forKey: .member)
                var userGroupsBuffer:[ElastiCacheClientTypes.UserGroup]? = nil
                if let userGroupsContainer = userGroupsContainer {
                    userGroupsBuffer = [ElastiCacheClientTypes.UserGroup]()
                    for structureContainer0 in userGroupsContainer {
                        userGroupsBuffer?.append(structureContainer0)
                    }
                }
                userGroups = userGroupsBuffer
            } else {
                userGroups = []
            }
        } else {
            userGroups = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeUsersInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let filters = filters {
            var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
            for (index0, filter0) in filters.enumerated() {
                try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let userId = userId {
            try container.encode(userId, forKey: ClientRuntime.Key("UserId"))
        }
        try container.encode("DescribeUsers", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeUsersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeUsersInput: Swift.Equatable {
    /// The Redis engine.
    var engine: Swift.String?
    /// Filter to determine the list of User IDs to return.
    var filters: [ElastiCacheClientTypes.Filter]?
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. >
    var marker: Swift.String?
    /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.
    var maxRecords: Swift.Int?
    /// The ID of the user.
    var userId: Swift.String?

    public init (
        engine: Swift.String? = nil,
        filters: [ElastiCacheClientTypes.Filter]? = nil,
        marker: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        userId: Swift.String? = nil
    )
    {
        self.engine = engine
        self.filters = filters
        self.marker = marker
        self.maxRecords = maxRecords
        self.userId = userId
    }
}

extension DescribeUsersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeUsersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleNotFoundFault" : self = .serviceLinkedRoleNotFoundFault(try ServiceLinkedRoleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFound" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeUsersOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case serviceLinkedRoleNotFoundFault(ServiceLinkedRoleNotFoundFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUsersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeUsersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.marker = output.marker
            self.users = output.users
        } else {
            self.marker = nil
            self.users = nil
        }
    }
}

public struct DescribeUsersOutputResponse: Swift.Equatable {
    /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. >
    var marker: Swift.String?
    /// A list of users.
    var users: [ElastiCacheClientTypes.User]?

    public init (
        marker: Swift.String? = nil,
        users: [ElastiCacheClientTypes.User]? = nil
    )
    {
        self.marker = marker
        self.users = users
    }
}

struct DescribeUsersOutputResponseBody: Swift.Equatable {
    let users: [ElastiCacheClientTypes.User]?
    let marker: Swift.String?
}

extension DescribeUsersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case users = "Users"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeUsersResult"))
        if containerValues.contains(.users) {
            struct KeyVal0{struct member{}}
            let usersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .users)
            if let usersWrappedContainer = usersWrappedContainer {
                let usersContainer = try usersWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.User].self, forKey: .member)
                var usersBuffer:[ElastiCacheClientTypes.User]? = nil
                if let usersContainer = usersContainer {
                    usersBuffer = [ElastiCacheClientTypes.User]()
                    for structureContainer0 in usersContainer {
                        usersBuffer?.append(structureContainer0)
                    }
                }
                users = usersBuffer
            } else {
                users = []
            }
        } else {
            users = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ElastiCacheClientTypes.DestinationDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogsDetails = "CloudWatchLogsDetails"
        case kinesisFirehoseDetails = "KinesisFirehoseDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cloudWatchLogsDetails = cloudWatchLogsDetails {
            try container.encode(cloudWatchLogsDetails, forKey: ClientRuntime.Key("CloudWatchLogsDetails"))
        }
        if let kinesisFirehoseDetails = kinesisFirehoseDetails {
            try container.encode(kinesisFirehoseDetails, forKey: ClientRuntime.Key("KinesisFirehoseDetails"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudWatchLogsDetailsDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.CloudWatchLogsDestinationDetails.self, forKey: .cloudWatchLogsDetails)
        cloudWatchLogsDetails = cloudWatchLogsDetailsDecoded
        let kinesisFirehoseDetailsDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.KinesisFirehoseDestinationDetails.self, forKey: .kinesisFirehoseDetails)
        kinesisFirehoseDetails = kinesisFirehoseDetailsDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
    public struct DestinationDetails: Swift.Equatable {
        /// The configuration details of the CloudWatch Logs destination.
        var cloudWatchLogsDetails: ElastiCacheClientTypes.CloudWatchLogsDestinationDetails?
        /// The configuration details of the Kinesis Data Firehose destination.
        var kinesisFirehoseDetails: ElastiCacheClientTypes.KinesisFirehoseDestinationDetails?

        public init (
            cloudWatchLogsDetails: ElastiCacheClientTypes.CloudWatchLogsDestinationDetails? = nil,
            kinesisFirehoseDetails: ElastiCacheClientTypes.KinesisFirehoseDestinationDetails? = nil
        )
        {
            self.cloudWatchLogsDetails = cloudWatchLogsDetails
            self.kinesisFirehoseDetails = kinesisFirehoseDetails
        }
    }

}

extension ElastiCacheClientTypes {
    public enum DestinationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cloudwatchlogs
        case kinesisfirehose
        case sdkUnknown(Swift.String)

        public static var allCases: [DestinationType] {
            return [
                .cloudwatchlogs,
                .kinesisfirehose,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cloudwatchlogs: return "cloudwatch-logs"
            case .kinesisfirehose: return "kinesis-firehose"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DestinationType(rawValue: rawValue) ?? DestinationType.sdkUnknown(rawValue)
        }
    }
}

extension DisassociateGlobalReplicationGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: ClientRuntime.Key("GlobalReplicationGroupId"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let replicationGroupRegion = replicationGroupRegion {
            try container.encode(replicationGroupRegion, forKey: ClientRuntime.Key("ReplicationGroupRegion"))
        }
        try container.encode("DisassociateGlobalReplicationGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension DisassociateGlobalReplicationGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisassociateGlobalReplicationGroupInput: Swift.Equatable {
    /// The name of the Global datastore
    /// This member is required.
    var globalReplicationGroupId: Swift.String?
    /// The name of the secondary cluster you wish to remove from the Global datastore
    /// This member is required.
    var replicationGroupId: Swift.String?
    /// The Amazon region of secondary cluster you wish to remove from the Global datastore
    /// This member is required.
    var replicationGroupRegion: Swift.String?

    public init (
        globalReplicationGroupId: Swift.String? = nil,
        replicationGroupId: Swift.String? = nil,
        replicationGroupRegion: Swift.String? = nil
    )
    {
        self.globalReplicationGroupId = globalReplicationGroupId
        self.replicationGroupId = replicationGroupId
        self.replicationGroupRegion = replicationGroupRegion
    }
}

extension DisassociateGlobalReplicationGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DisassociateGlobalReplicationGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupState" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateGlobalReplicationGroupOutputError: Swift.Error, Swift.Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateGlobalReplicationGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DisassociateGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct DisassociateGlobalReplicationGroupOutputResponse: Swift.Equatable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init (
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct DisassociateGlobalReplicationGroupOutputResponseBody: Swift.Equatable {
    let globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?
}

extension DisassociateGlobalReplicationGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DisassociateGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

extension DuplicateUserNameFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<DuplicateUserNameFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A user with this username already exists.
public struct DuplicateUserNameFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateUserNameFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension DuplicateUserNameFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.EC2SecurityGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eC2SecurityGroupName = "EC2SecurityGroupName"
        case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let eC2SecurityGroupName = eC2SecurityGroupName {
            try container.encode(eC2SecurityGroupName, forKey: ClientRuntime.Key("EC2SecurityGroupName"))
        }
        if let eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId {
            try container.encode(eC2SecurityGroupOwnerId, forKey: ClientRuntime.Key("EC2SecurityGroupOwnerId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let eC2SecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eC2SecurityGroupName)
        eC2SecurityGroupName = eC2SecurityGroupNameDecoded
        let eC2SecurityGroupOwnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eC2SecurityGroupOwnerId)
        eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerIdDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Provides ownership and status information for an Amazon EC2 security group.
    public struct EC2SecurityGroup: Swift.Equatable {
        /// The name of the Amazon EC2 security group.
        var eC2SecurityGroupName: Swift.String?
        /// The Amazon account ID of the Amazon EC2 security group owner.
        var eC2SecurityGroupOwnerId: Swift.String?
        /// The status of the Amazon EC2 security group.
        var status: Swift.String?

        public init (
            eC2SecurityGroupName: Swift.String? = nil,
            eC2SecurityGroupOwnerId: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.eC2SecurityGroupName = eC2SecurityGroupName
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.status = status
        }
    }

}

extension ElastiCacheClientTypes.Endpoint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case port = "Port"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let address = address {
            try container.encode(address, forKey: ClientRuntime.Key("Address"))
        }
        if port != 0 {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        let portDecoded = try containerValues.decode(Swift.Int.self, forKey: .port)
        port = portDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Represents the information required for client programs to connect to a cache node.
    public struct Endpoint: Swift.Equatable {
        /// The DNS hostname of the cache node.
        var address: Swift.String?
        /// The port number that the cache engine is listening on.
        var port: Swift.Int

        public init (
            address: Swift.String? = nil,
            port: Swift.Int = 0
        )
        {
            self.address = address
            self.port = port
        }
    }

}

extension ElastiCacheClientTypes.EngineDefaults: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheNodeTypeSpecificParameters = "CacheNodeTypeSpecificParameters"
        case cacheParameterGroupFamily = "CacheParameterGroupFamily"
        case marker = "Marker"
        case parameters = "Parameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParameters {
            var cacheNodeTypeSpecificParametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheNodeTypeSpecificParameters"))
            for (index0, cachenodetypespecificparameter0) in cacheNodeTypeSpecificParameters.enumerated() {
                try cacheNodeTypeSpecificParametersContainer.encode(cachenodetypespecificparameter0, forKey: ClientRuntime.Key("CacheNodeTypeSpecificParameter.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheParameterGroupFamily = cacheParameterGroupFamily {
            try container.encode(cacheParameterGroupFamily, forKey: ClientRuntime.Key("CacheParameterGroupFamily"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: ClientRuntime.Key("Marker"))
        }
        if let parameters = parameters {
            var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
            for (index0, parameter0) in parameters.enumerated() {
                try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("Parameter.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheParameterGroupFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheParameterGroupFamily)
        cacheParameterGroupFamily = cacheParameterGroupFamilyDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct Parameter{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Parameter>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[ElastiCacheClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [ElastiCacheClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        if containerValues.contains(.cacheNodeTypeSpecificParameters) {
            struct KeyVal0{struct CacheNodeTypeSpecificParameter{}}
            let cacheNodeTypeSpecificParametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeTypeSpecificParameter>.CodingKeys.self, forKey: .cacheNodeTypeSpecificParameters)
            if let cacheNodeTypeSpecificParametersWrappedContainer = cacheNodeTypeSpecificParametersWrappedContainer {
                let cacheNodeTypeSpecificParametersContainer = try cacheNodeTypeSpecificParametersWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheNodeTypeSpecificParameter].self, forKey: .member)
                var cacheNodeTypeSpecificParametersBuffer:[ElastiCacheClientTypes.CacheNodeTypeSpecificParameter]? = nil
                if let cacheNodeTypeSpecificParametersContainer = cacheNodeTypeSpecificParametersContainer {
                    cacheNodeTypeSpecificParametersBuffer = [ElastiCacheClientTypes.CacheNodeTypeSpecificParameter]()
                    for structureContainer0 in cacheNodeTypeSpecificParametersContainer {
                        cacheNodeTypeSpecificParametersBuffer?.append(structureContainer0)
                    }
                }
                cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParametersBuffer
            } else {
                cacheNodeTypeSpecificParameters = []
            }
        } else {
            cacheNodeTypeSpecificParameters = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// Represents the output of a DescribeEngineDefaultParameters operation.
    public struct EngineDefaults: Swift.Equatable {
        /// A list of parameters specific to a particular cache node type. Each element in the list contains detailed information about one parameter.
        var cacheNodeTypeSpecificParameters: [ElastiCacheClientTypes.CacheNodeTypeSpecificParameter]?
        /// Specifies the name of the cache parameter group family to which the engine default parameters apply. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.0 | redis6.2
        var cacheParameterGroupFamily: Swift.String?
        /// Provides an identifier to allow retrieval of paginated results.
        var marker: Swift.String?
        /// Contains a list of engine default parameters.
        var parameters: [ElastiCacheClientTypes.Parameter]?

        public init (
            cacheNodeTypeSpecificParameters: [ElastiCacheClientTypes.CacheNodeTypeSpecificParameter]? = nil,
            cacheParameterGroupFamily: Swift.String? = nil,
            marker: Swift.String? = nil,
            parameters: [ElastiCacheClientTypes.Parameter]? = nil
        )
        {
            self.cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParameters
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.marker = marker
            self.parameters = parameters
        }
    }

}

extension ElastiCacheClientTypes.Event: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case date = "Date"
        case message = "Message"
        case sourceIdentifier = "SourceIdentifier"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let date = date {
            try container.encode(ClientRuntime.TimestampWrapper(date, format: .dateTime), forKey: ClientRuntime.Key("date"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let sourceIdentifier = sourceIdentifier {
            try container.encode(sourceIdentifier, forKey: ClientRuntime.Key("SourceIdentifier"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceIdentifier)
        sourceIdentifier = sourceIdentifierDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let dateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .date)
        var dateBuffer:ClientRuntime.Date? = nil
        if let dateDecoded = dateDecoded {
            dateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(dateDecoded, format: .dateTime)
        }
        date = dateBuffer
    }
}

extension ElastiCacheClientTypes {
    /// Represents a single occurrence of something interesting within the system. Some examples of events are creating a cluster, adding or removing a cache node, or rebooting a node.
    public struct Event: Swift.Equatable {
        /// The date and time when the event occurred.
        var date: ClientRuntime.Date?
        /// The text of the event.
        var message: Swift.String?
        /// The identifier for the source of the event. For example, if the event occurred at the cluster level, the identifier would be the name of the cluster.
        var sourceIdentifier: Swift.String?
        /// Specifies the origin of this event - a cluster, a parameter group, a security group, etc.
        var sourceType: ElastiCacheClientTypes.SourceType?

        public init (
            date: ClientRuntime.Date? = nil,
            message: Swift.String? = nil,
            sourceIdentifier: Swift.String? = nil,
            sourceType: ElastiCacheClientTypes.SourceType? = nil
        )
        {
            self.date = date
            self.message = message
            self.sourceIdentifier = sourceIdentifier
            self.sourceType = sourceType
        }
    }

}

extension FailoverGlobalReplicationGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: ClientRuntime.Key("GlobalReplicationGroupId"))
        }
        if let primaryRegion = primaryRegion {
            try container.encode(primaryRegion, forKey: ClientRuntime.Key("PrimaryRegion"))
        }
        if let primaryReplicationGroupId = primaryReplicationGroupId {
            try container.encode(primaryReplicationGroupId, forKey: ClientRuntime.Key("PrimaryReplicationGroupId"))
        }
        try container.encode("FailoverGlobalReplicationGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension FailoverGlobalReplicationGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct FailoverGlobalReplicationGroupInput: Swift.Equatable {
    /// The name of the Global datastore
    /// This member is required.
    var globalReplicationGroupId: Swift.String?
    /// The Amazon region of the primary cluster of the Global datastore
    /// This member is required.
    var primaryRegion: Swift.String?
    /// The name of the primary replication group
    /// This member is required.
    var primaryReplicationGroupId: Swift.String?

    public init (
        globalReplicationGroupId: Swift.String? = nil,
        primaryRegion: Swift.String? = nil,
        primaryReplicationGroupId: Swift.String? = nil
    )
    {
        self.globalReplicationGroupId = globalReplicationGroupId
        self.primaryRegion = primaryRegion
        self.primaryReplicationGroupId = primaryReplicationGroupId
    }
}

extension FailoverGlobalReplicationGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension FailoverGlobalReplicationGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupState" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum FailoverGlobalReplicationGroupOutputError: Swift.Error, Swift.Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension FailoverGlobalReplicationGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: FailoverGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct FailoverGlobalReplicationGroupOutputResponse: Swift.Equatable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init (
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct FailoverGlobalReplicationGroupOutputResponseBody: Swift.Equatable {
    let globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?
}

extension FailoverGlobalReplicationGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("FailoverGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

extension ElastiCacheClientTypes.Filter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let values = values {
            var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
            for (index0, filtervalue0) in values.enumerated() {
                try valuesContainer.encode(filtervalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var valuesBuffer:[Swift.String]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.String]()
                    for stringContainer0 in valuesContainer {
                        valuesBuffer?.append(stringContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// Used to streamline results of a search based on the property being filtered.
    public struct Filter: Swift.Equatable {
        /// The property being filtered. For example, UserId.
        /// This member is required.
        var name: Swift.String?
        /// The property values to filter on. For example, "user-123".
        /// This member is required.
        var values: [Swift.String]?

        public init (
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ElastiCacheClientTypes.GlobalNodeGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalNodeGroupId = "GlobalNodeGroupId"
        case slots = "Slots"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let globalNodeGroupId = globalNodeGroupId {
            try container.encode(globalNodeGroupId, forKey: ClientRuntime.Key("GlobalNodeGroupId"))
        }
        if let slots = slots {
            try container.encode(slots, forKey: ClientRuntime.Key("Slots"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalNodeGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalNodeGroupId)
        globalNodeGroupId = globalNodeGroupIdDecoded
        let slotsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slots)
        slots = slotsDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Indicates the slot configuration and global identifier for a slice group.
    public struct GlobalNodeGroup: Swift.Equatable {
        /// The name of the global node group
        var globalNodeGroupId: Swift.String?
        /// The keyspace for this node group
        var slots: Swift.String?

        public init (
            globalNodeGroupId: Swift.String? = nil,
            slots: Swift.String? = nil
        )
        {
            self.globalNodeGroupId = globalNodeGroupId
            self.slots = slots
        }
    }

}

extension ElastiCacheClientTypes.GlobalReplicationGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case atRestEncryptionEnabled = "AtRestEncryptionEnabled"
        case authTokenEnabled = "AuthTokenEnabled"
        case cacheNodeType = "CacheNodeType"
        case clusterEnabled = "ClusterEnabled"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case globalNodeGroups = "GlobalNodeGroups"
        case globalReplicationGroupDescription = "GlobalReplicationGroupDescription"
        case globalReplicationGroupId = "GlobalReplicationGroupId"
        case members = "Members"
        case status = "Status"
        case transitEncryptionEnabled = "TransitEncryptionEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: ClientRuntime.Key("ARN"))
        }
        if let atRestEncryptionEnabled = atRestEncryptionEnabled {
            try container.encode(atRestEncryptionEnabled, forKey: ClientRuntime.Key("AtRestEncryptionEnabled"))
        }
        if let authTokenEnabled = authTokenEnabled {
            try container.encode(authTokenEnabled, forKey: ClientRuntime.Key("AuthTokenEnabled"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let clusterEnabled = clusterEnabled {
            try container.encode(clusterEnabled, forKey: ClientRuntime.Key("ClusterEnabled"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let globalNodeGroups = globalNodeGroups {
            var globalNodeGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("GlobalNodeGroups"))
            for (index0, globalnodegroup0) in globalNodeGroups.enumerated() {
                try globalNodeGroupsContainer.encode(globalnodegroup0, forKey: ClientRuntime.Key("GlobalNodeGroup.\(index0.advanced(by: 1))"))
            }
        }
        if let globalReplicationGroupDescription = globalReplicationGroupDescription {
            try container.encode(globalReplicationGroupDescription, forKey: ClientRuntime.Key("GlobalReplicationGroupDescription"))
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: ClientRuntime.Key("GlobalReplicationGroupId"))
        }
        if let members = members {
            var membersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Members"))
            for (index0, globalreplicationgroupmember0) in members.enumerated() {
                try membersContainer.encode(globalreplicationgroupmember0, forKey: ClientRuntime.Key("GlobalReplicationGroupMember.\(index0.advanced(by: 1))"))
            }
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let transitEncryptionEnabled = transitEncryptionEnabled {
            try container.encode(transitEncryptionEnabled, forKey: ClientRuntime.Key("TransitEncryptionEnabled"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalReplicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalReplicationGroupId)
        globalReplicationGroupId = globalReplicationGroupIdDecoded
        let globalReplicationGroupDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalReplicationGroupDescription)
        globalReplicationGroupDescription = globalReplicationGroupDescriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        if containerValues.contains(.members) {
            struct KeyVal0{struct GlobalReplicationGroupMember{}}
            let membersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GlobalReplicationGroupMember>.CodingKeys.self, forKey: .members)
            if let membersWrappedContainer = membersWrappedContainer {
                let membersContainer = try membersWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.GlobalReplicationGroupMember].self, forKey: .member)
                var membersBuffer:[ElastiCacheClientTypes.GlobalReplicationGroupMember]? = nil
                if let membersContainer = membersContainer {
                    membersBuffer = [ElastiCacheClientTypes.GlobalReplicationGroupMember]()
                    for structureContainer0 in membersContainer {
                        membersBuffer?.append(structureContainer0)
                    }
                }
                members = membersBuffer
            } else {
                members = []
            }
        } else {
            members = nil
        }
        let clusterEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .clusterEnabled)
        clusterEnabled = clusterEnabledDecoded
        if containerValues.contains(.globalNodeGroups) {
            struct KeyVal0{struct GlobalNodeGroup{}}
            let globalNodeGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GlobalNodeGroup>.CodingKeys.self, forKey: .globalNodeGroups)
            if let globalNodeGroupsWrappedContainer = globalNodeGroupsWrappedContainer {
                let globalNodeGroupsContainer = try globalNodeGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.GlobalNodeGroup].self, forKey: .member)
                var globalNodeGroupsBuffer:[ElastiCacheClientTypes.GlobalNodeGroup]? = nil
                if let globalNodeGroupsContainer = globalNodeGroupsContainer {
                    globalNodeGroupsBuffer = [ElastiCacheClientTypes.GlobalNodeGroup]()
                    for structureContainer0 in globalNodeGroupsContainer {
                        globalNodeGroupsBuffer?.append(structureContainer0)
                    }
                }
                globalNodeGroups = globalNodeGroupsBuffer
            } else {
                globalNodeGroups = []
            }
        } else {
            globalNodeGroups = nil
        }
        let authTokenEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .authTokenEnabled)
        authTokenEnabled = authTokenEnabledDecoded
        let transitEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .transitEncryptionEnabled)
        transitEncryptionEnabled = transitEncryptionEnabledDecoded
        let atRestEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .atRestEncryptionEnabled)
        atRestEncryptionEnabled = atRestEncryptionEnabledDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    public struct GlobalReplicationGroup: Swift.Equatable {
        /// The ARN (Amazon Resource Name) of the global replication group.
        var aRN: Swift.String?
        /// A flag that enables encryption at rest when set to true. You cannot modify the value of AtRestEncryptionEnabled after the replication group is created. To enable encryption at rest on a replication group you must set AtRestEncryptionEnabled to true when you create the replication group. Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6, 4.x or later.
        var atRestEncryptionEnabled: Swift.Bool?
        /// A flag that enables using an AuthToken (password) when issuing Redis commands. Default: false
        var authTokenEnabled: Swift.Bool?
        /// The cache node type of the Global datastore
        var cacheNodeType: Swift.String?
        /// A flag that indicates whether the Global datastore is cluster enabled.
        var clusterEnabled: Swift.Bool?
        /// The Elasticache engine. For Redis only.
        var engine: Swift.String?
        /// The Elasticache Redis engine version.
        var engineVersion: Swift.String?
        /// Indicates the slot configuration and global identifier for each slice group.
        var globalNodeGroups: [ElastiCacheClientTypes.GlobalNodeGroup]?
        /// The optional description of the Global datastore
        var globalReplicationGroupDescription: Swift.String?
        /// The name of the Global datastore
        var globalReplicationGroupId: Swift.String?
        /// The replication groups that comprise the Global datastore.
        var members: [ElastiCacheClientTypes.GlobalReplicationGroupMember]?
        /// The status of the Global datastore
        var status: Swift.String?
        /// A flag that enables in-transit encryption when set to true. You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster. Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6, 4.x or later.
        var transitEncryptionEnabled: Swift.Bool?

        public init (
            aRN: Swift.String? = nil,
            atRestEncryptionEnabled: Swift.Bool? = nil,
            authTokenEnabled: Swift.Bool? = nil,
            cacheNodeType: Swift.String? = nil,
            clusterEnabled: Swift.Bool? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            globalNodeGroups: [ElastiCacheClientTypes.GlobalNodeGroup]? = nil,
            globalReplicationGroupDescription: Swift.String? = nil,
            globalReplicationGroupId: Swift.String? = nil,
            members: [ElastiCacheClientTypes.GlobalReplicationGroupMember]? = nil,
            status: Swift.String? = nil,
            transitEncryptionEnabled: Swift.Bool? = nil
        )
        {
            self.aRN = aRN
            self.atRestEncryptionEnabled = atRestEncryptionEnabled
            self.authTokenEnabled = authTokenEnabled
            self.cacheNodeType = cacheNodeType
            self.clusterEnabled = clusterEnabled
            self.engine = engine
            self.engineVersion = engineVersion
            self.globalNodeGroups = globalNodeGroups
            self.globalReplicationGroupDescription = globalReplicationGroupDescription
            self.globalReplicationGroupId = globalReplicationGroupId
            self.members = members
            self.status = status
            self.transitEncryptionEnabled = transitEncryptionEnabled
        }
    }

}

extension GlobalReplicationGroupAlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<GlobalReplicationGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The Global datastore name already exists.
public struct GlobalReplicationGroupAlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct GlobalReplicationGroupAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension GlobalReplicationGroupAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.GlobalReplicationGroupInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalReplicationGroupId = "GlobalReplicationGroupId"
        case globalReplicationGroupMemberRole = "GlobalReplicationGroupMemberRole"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: ClientRuntime.Key("GlobalReplicationGroupId"))
        }
        if let globalReplicationGroupMemberRole = globalReplicationGroupMemberRole {
            try container.encode(globalReplicationGroupMemberRole, forKey: ClientRuntime.Key("GlobalReplicationGroupMemberRole"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalReplicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalReplicationGroupId)
        globalReplicationGroupId = globalReplicationGroupIdDecoded
        let globalReplicationGroupMemberRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalReplicationGroupMemberRole)
        globalReplicationGroupMemberRole = globalReplicationGroupMemberRoleDecoded
    }
}

extension ElastiCacheClientTypes {
    /// The name of the Global datastore and role of this replication group in the Global datastore.
    public struct GlobalReplicationGroupInfo: Swift.Equatable {
        /// The name of the Global datastore
        var globalReplicationGroupId: Swift.String?
        /// The role of the replication group in a Global datastore. Can be primary or secondary.
        var globalReplicationGroupMemberRole: Swift.String?

        public init (
            globalReplicationGroupId: Swift.String? = nil,
            globalReplicationGroupMemberRole: Swift.String? = nil
        )
        {
            self.globalReplicationGroupId = globalReplicationGroupId
            self.globalReplicationGroupMemberRole = globalReplicationGroupMemberRole
        }
    }

}

extension ElastiCacheClientTypes.GlobalReplicationGroupMember: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automaticFailover = "AutomaticFailover"
        case replicationGroupId = "ReplicationGroupId"
        case replicationGroupRegion = "ReplicationGroupRegion"
        case role = "Role"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let automaticFailover = automaticFailover {
            try container.encode(automaticFailover, forKey: ClientRuntime.Key("AutomaticFailover"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let replicationGroupRegion = replicationGroupRegion {
            try container.encode(replicationGroupRegion, forKey: ClientRuntime.Key("ReplicationGroupRegion"))
        }
        if let role = role {
            try container.encode(role, forKey: ClientRuntime.Key("Role"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let replicationGroupRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupRegion)
        replicationGroupRegion = replicationGroupRegionDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let automaticFailoverDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.AutomaticFailoverStatus.self, forKey: .automaticFailover)
        automaticFailover = automaticFailoverDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElastiCacheClientTypes {
    /// A member of a Global datastore. It contains the Replication Group Id, the Amazon region and the role of the replication group.
    public struct GlobalReplicationGroupMember: Swift.Equatable {
        /// Indicates whether automatic failover is enabled for the replication group.
        var automaticFailover: ElastiCacheClientTypes.AutomaticFailoverStatus?
        /// The replication group id of the Global datastore member.
        var replicationGroupId: Swift.String?
        /// The Amazon region of the Global datastore member.
        var replicationGroupRegion: Swift.String?
        /// Indicates the role of the replication group, primary or secondary.
        var role: Swift.String?
        /// The status of the membership of the replication group.
        var status: Swift.String?

        public init (
            automaticFailover: ElastiCacheClientTypes.AutomaticFailoverStatus? = nil,
            replicationGroupId: Swift.String? = nil,
            replicationGroupRegion: Swift.String? = nil,
            role: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.automaticFailover = automaticFailover
            self.replicationGroupId = replicationGroupId
            self.replicationGroupRegion = replicationGroupRegion
            self.role = role
            self.status = status
        }
    }

}

extension GlobalReplicationGroupNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<GlobalReplicationGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The Global datastore does not exist
public struct GlobalReplicationGroupNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct GlobalReplicationGroupNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension GlobalReplicationGroupNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IncreaseNodeGroupsInGlobalReplicationGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: ClientRuntime.Key("ApplyImmediately"))
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: ClientRuntime.Key("GlobalReplicationGroupId"))
        }
        if nodeGroupCount != 0 {
            try container.encode(nodeGroupCount, forKey: ClientRuntime.Key("NodeGroupCount"))
        }
        if let regionalConfigurations = regionalConfigurations {
            var regionalConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RegionalConfigurations"))
            for (index0, regionalconfiguration0) in regionalConfigurations.enumerated() {
                try regionalConfigurationsContainer.encode(regionalconfiguration0, forKey: ClientRuntime.Key("RegionalConfiguration.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("IncreaseNodeGroupsInGlobalReplicationGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension IncreaseNodeGroupsInGlobalReplicationGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct IncreaseNodeGroupsInGlobalReplicationGroupInput: Swift.Equatable {
    /// Indicates that the process begins immediately. At present, the only permitted value for this parameter is true.
    /// This member is required.
    var applyImmediately: Swift.Bool
    /// The name of the Global datastore
    /// This member is required.
    var globalReplicationGroupId: Swift.String?
    /// The number of node groups you wish to add
    /// This member is required.
    var nodeGroupCount: Swift.Int
    /// Describes the replication group IDs, the Amazon regions where they are stored and the shard configuration for each that comprise the Global datastore
    var regionalConfigurations: [ElastiCacheClientTypes.RegionalConfiguration]?

    public init (
        applyImmediately: Swift.Bool = false,
        globalReplicationGroupId: Swift.String? = nil,
        nodeGroupCount: Swift.Int = 0,
        regionalConfigurations: [ElastiCacheClientTypes.RegionalConfiguration]? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.globalReplicationGroupId = globalReplicationGroupId
        self.nodeGroupCount = nodeGroupCount
        self.regionalConfigurations = regionalConfigurations
    }
}

extension IncreaseNodeGroupsInGlobalReplicationGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension IncreaseNodeGroupsInGlobalReplicationGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupState" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum IncreaseNodeGroupsInGlobalReplicationGroupOutputError: Swift.Error, Swift.Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: IncreaseNodeGroupsInGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse: Swift.Equatable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init (
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct IncreaseNodeGroupsInGlobalReplicationGroupOutputResponseBody: Swift.Equatable {
    let globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?
}

extension IncreaseNodeGroupsInGlobalReplicationGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("IncreaseNodeGroupsInGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

extension IncreaseReplicaCountInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: ClientRuntime.Key("ApplyImmediately"))
        }
        if let newReplicaCount = newReplicaCount {
            try container.encode(newReplicaCount, forKey: ClientRuntime.Key("NewReplicaCount"))
        }
        if let replicaConfiguration = replicaConfiguration {
            var replicaConfigurationContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplicaConfiguration"))
            for (index0, configureshard0) in replicaConfiguration.enumerated() {
                try replicaConfigurationContainer.encode(configureshard0, forKey: ClientRuntime.Key("ConfigureShard.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        try container.encode("IncreaseReplicaCount", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension IncreaseReplicaCountInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct IncreaseReplicaCountInput: Swift.Equatable {
    /// If True, the number of replica nodes is increased immediately. ApplyImmediately=False is not currently supported.
    /// This member is required.
    var applyImmediately: Swift.Bool
    /// The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
    var newReplicaCount: Swift.Int?
    /// A list of ConfigureShard objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The ConfigureShard has three members: NewReplicaCount, NodeGroupId, and PreferredAvailabilityZones.
    var replicaConfiguration: [ElastiCacheClientTypes.ConfigureShard]?
    /// The id of the replication group to which you want to add replica nodes.
    /// This member is required.
    var replicationGroupId: Swift.String?

    public init (
        applyImmediately: Swift.Bool = false,
        newReplicaCount: Swift.Int? = nil,
        replicaConfiguration: [ElastiCacheClientTypes.ConfigureShard]? = nil,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.newReplicaCount = newReplicaCount
        self.replicaConfiguration = replicaConfiguration
        self.replicationGroupId = replicationGroupId
    }
}

extension IncreaseReplicaCountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension IncreaseReplicaCountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClusterQuotaForCustomerExceeded" : self = .clusterQuotaForCustomerExceededFault(try ClusterQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCacheClusterCapacity" : self = .insufficientCacheClusterCapacityFault(try InsufficientCacheClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterState" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyFault" : self = .invalidKMSKeyFault(try InvalidKMSKeyFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupState" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCNetworkStateFault" : self = .invalidVPCNetworkStateFault(try InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeGroupsPerReplicationGroupQuotaExceeded" : self = .nodeGroupsPerReplicationGroupQuotaExceededFault(try NodeGroupsPerReplicationGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForCustomerExceeded" : self = .nodeQuotaForCustomerExceededFault(try NodeQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoOperationFault" : self = .noOperationFault(try NoOperationFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum IncreaseReplicaCountOutputError: Swift.Error, Swift.Equatable {
    case clusterQuotaForCustomerExceededFault(ClusterQuotaForCustomerExceededFault)
    case insufficientCacheClusterCapacityFault(InsufficientCacheClusterCapacityFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidKMSKeyFault(InvalidKMSKeyFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case invalidVPCNetworkStateFault(InvalidVPCNetworkStateFault)
    case nodeGroupsPerReplicationGroupQuotaExceededFault(NodeGroupsPerReplicationGroupQuotaExceededFault)
    case nodeQuotaForCustomerExceededFault(NodeQuotaForCustomerExceededFault)
    case noOperationFault(NoOperationFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension IncreaseReplicaCountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: IncreaseReplicaCountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct IncreaseReplicaCountOutputResponse: Swift.Equatable {
    /// Contains all of the attributes of a specific Redis replication group.
    var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init (
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct IncreaseReplicaCountOutputResponseBody: Swift.Equatable {
    let replicationGroup: ElastiCacheClientTypes.ReplicationGroup?
}

extension IncreaseReplicaCountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("IncreaseReplicaCountResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

extension InsufficientCacheClusterCapacityFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InsufficientCacheClusterCapacityFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested cache node type is not available in the specified Availability Zone. For more information, see [InsufficientCacheClusterCapacity](http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ErrorMessages.html#ErrorMessages.INSUFFICIENT_CACHE_CLUSTER_CAPACITY) in the ElastiCache User Guide.
public struct InsufficientCacheClusterCapacityFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InsufficientCacheClusterCapacityFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InsufficientCacheClusterCapacityFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidARNFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidARNFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested Amazon Resource Name (ARN) does not refer to an existing resource.
public struct InvalidARNFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidARNFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidARNFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidCacheClusterStateFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidCacheClusterStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested cluster is not in the available state.
public struct InvalidCacheClusterStateFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidCacheClusterStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidCacheClusterStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidCacheParameterGroupStateFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidCacheParameterGroupStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The current state of the cache parameter group does not allow the requested operation to occur.
public struct InvalidCacheParameterGroupStateFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidCacheParameterGroupStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidCacheParameterGroupStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidCacheSecurityGroupStateFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidCacheSecurityGroupStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The current state of the cache security group does not allow deletion.
public struct InvalidCacheSecurityGroupStateFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidCacheSecurityGroupStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidCacheSecurityGroupStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidGlobalReplicationGroupStateFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidGlobalReplicationGroupStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The Global datastore is not available or in primary-only state.
public struct InvalidGlobalReplicationGroupStateFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidGlobalReplicationGroupStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidGlobalReplicationGroupStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidKMSKeyFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidKMSKeyFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The KMS key supplied is not valid.
public struct InvalidKMSKeyFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidKMSKeyFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidKMSKeyFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterCombinationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidParameterCombinationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Two or more incompatible parameters were specified.
public struct InvalidParameterCombinationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Two or more parameters that must not be used together were used together.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterCombinationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidParameterCombinationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterValueException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidParameterValueExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The value for a parameter is invalid.
public struct InvalidParameterValueException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A parameter value is invalid.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterValueExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidParameterValueExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidReplicationGroupStateFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidReplicationGroupStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested replication group is not in the available state.
public struct InvalidReplicationGroupStateFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidReplicationGroupStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidReplicationGroupStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSnapshotStateFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidSnapshotStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The current state of the snapshot does not allow the requested operation to occur.
public struct InvalidSnapshotStateFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSnapshotStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidSnapshotStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSubnet {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidSubnetBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An invalid subnet identifier was specified.
public struct InvalidSubnet: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSubnetBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidSubnetBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidUserGroupStateFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidUserGroupStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The user group is not in an active state.
public struct InvalidUserGroupStateFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidUserGroupStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidUserGroupStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidUserStateFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidUserStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The user is not in active state.
public struct InvalidUserStateFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidUserStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidUserStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidVPCNetworkStateFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidVPCNetworkStateFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The VPC network is in an invalid state.
public struct InvalidVPCNetworkStateFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidVPCNetworkStateFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidVPCNetworkStateFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.KinesisFirehoseDestinationDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryStream = "DeliveryStream"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deliveryStream = deliveryStream {
            try container.encode(deliveryStream, forKey: ClientRuntime.Key("DeliveryStream"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStream)
        deliveryStream = deliveryStreamDecoded
    }
}

extension ElastiCacheClientTypes {
    /// The configuration details of the Kinesis Data Firehose destination.
    public struct KinesisFirehoseDestinationDetails: Swift.Equatable {
        /// The name of the Kinesis Data Firehose delivery stream.
        var deliveryStream: Swift.String?

        public init (
            deliveryStream: Swift.String? = nil
        )
        {
            self.deliveryStream = deliveryStream
        }
    }

}

extension ListAllowedNodeTypeModificationsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        try container.encode("ListAllowedNodeTypeModifications", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListAllowedNodeTypeModificationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input parameters for the ListAllowedNodeTypeModifications operation.
public struct ListAllowedNodeTypeModificationsInput: Swift.Equatable {
    /// The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to. You must provide a value for either the CacheClusterId or the ReplicationGroupId.
    var cacheClusterId: Swift.String?
    /// The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to. You must provide a value for either the CacheClusterId or the ReplicationGroupId.
    var replicationGroupId: Swift.String?

    public init (
        cacheClusterId: Swift.String? = nil,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.replicationGroupId = replicationGroupId
    }
}

extension ListAllowedNodeTypeModificationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListAllowedNodeTypeModificationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFound" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAllowedNodeTypeModificationsOutputError: Swift.Error, Swift.Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAllowedNodeTypeModificationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAllowedNodeTypeModificationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.scaleDownModifications = output.scaleDownModifications
            self.scaleUpModifications = output.scaleUpModifications
        } else {
            self.scaleDownModifications = nil
            self.scaleUpModifications = nil
        }
    }
}

/// Represents the allowed node types you can use to modify your cluster or replication group.
public struct ListAllowedNodeTypeModificationsOutputResponse: Swift.Equatable {
    /// A string list, each element of which specifies a cache node type which you can use to scale your cluster or replication group. When scaling down a Redis cluster or replication group using ModifyCacheCluster or ModifyReplicationGroup, use a value from this list for the CacheNodeType parameter.
    var scaleDownModifications: [Swift.String]?
    /// A string list, each element of which specifies a cache node type which you can use to scale your cluster or replication group. When scaling up a Redis cluster or replication group using ModifyCacheCluster or ModifyReplicationGroup, use a value from this list for the CacheNodeType parameter.
    var scaleUpModifications: [Swift.String]?

    public init (
        scaleDownModifications: [Swift.String]? = nil,
        scaleUpModifications: [Swift.String]? = nil
    )
    {
        self.scaleDownModifications = scaleDownModifications
        self.scaleUpModifications = scaleUpModifications
    }
}

struct ListAllowedNodeTypeModificationsOutputResponseBody: Swift.Equatable {
    let scaleUpModifications: [Swift.String]?
    let scaleDownModifications: [Swift.String]?
}

extension ListAllowedNodeTypeModificationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scaleDownModifications = "ScaleDownModifications"
        case scaleUpModifications = "ScaleUpModifications"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListAllowedNodeTypeModificationsResult"))
        if containerValues.contains(.scaleUpModifications) {
            struct KeyVal0{struct member{}}
            let scaleUpModificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scaleUpModifications)
            if let scaleUpModificationsWrappedContainer = scaleUpModificationsWrappedContainer {
                let scaleUpModificationsContainer = try scaleUpModificationsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var scaleUpModificationsBuffer:[Swift.String]? = nil
                if let scaleUpModificationsContainer = scaleUpModificationsContainer {
                    scaleUpModificationsBuffer = [Swift.String]()
                    for stringContainer0 in scaleUpModificationsContainer {
                        scaleUpModificationsBuffer?.append(stringContainer0)
                    }
                }
                scaleUpModifications = scaleUpModificationsBuffer
            } else {
                scaleUpModifications = []
            }
        } else {
            scaleUpModifications = nil
        }
        if containerValues.contains(.scaleDownModifications) {
            struct KeyVal0{struct member{}}
            let scaleDownModificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scaleDownModifications)
            if let scaleDownModificationsWrappedContainer = scaleDownModificationsWrappedContainer {
                let scaleDownModificationsContainer = try scaleDownModificationsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var scaleDownModificationsBuffer:[Swift.String]? = nil
                if let scaleDownModificationsContainer = scaleDownModificationsContainer {
                    scaleDownModificationsBuffer = [Swift.String]()
                    for stringContainer0 in scaleDownModificationsContainer {
                        scaleDownModificationsBuffer?.append(stringContainer0)
                    }
                }
                scaleDownModifications = scaleDownModificationsBuffer
            } else {
                scaleDownModifications = []
            }
        } else {
            scaleDownModifications = nil
        }
    }
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        try container.encode("ListTagsForResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// The input parameters for the ListTagsForResource operation.
public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. For more information about ARNs, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    /// This member is required.
    var resourceName: Swift.String?

    public init (
        resourceName: Swift.String? = nil
    )
    {
        self.resourceName = resourceName
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFound" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupNotFound" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFound" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidARN" : self = .invalidARNFault(try InvalidARNFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupState" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodeNotFound" : self = .reservedCacheNodeNotFoundFault(try ReservedCacheNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFoundFault" : self = .snapshotNotFoundFault(try SnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFound" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFound" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case invalidARNFault(InvalidARNFault)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case reservedCacheNodeNotFoundFault(ReservedCacheNodeNotFoundFault)
    case snapshotNotFoundFault(SnapshotNotFoundFault)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tagList = output.tagList
        } else {
            self.tagList = nil
        }
    }
}

/// Represents the output from the AddTagsToResource, ListTagsForResource, and RemoveTagsFromResource operations.
public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// A list of tags as key-value pairs.
    var tagList: [ElastiCacheClientTypes.Tag]?

    public init (
        tagList: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tagList: [ElastiCacheClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagList = "TagList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTagsForResourceResult"))
        if containerValues.contains(.tagList) {
            struct KeyVal0{struct Tag{}}
            let tagListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tagList)
            if let tagListWrappedContainer = tagListWrappedContainer {
                let tagListContainer = try tagListWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.Tag].self, forKey: .member)
                var tagListBuffer:[ElastiCacheClientTypes.Tag]? = nil
                if let tagListContainer = tagListContainer {
                    tagListBuffer = [ElastiCacheClientTypes.Tag]()
                    for structureContainer0 in tagListContainer {
                        tagListBuffer?.append(structureContainer0)
                    }
                }
                tagList = tagListBuffer
            } else {
                tagList = []
            }
        } else {
            tagList = nil
        }
    }
}

extension ElastiCacheClientTypes.LogDeliveryConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationDetails = "DestinationDetails"
        case destinationType = "DestinationType"
        case logFormat = "LogFormat"
        case logType = "LogType"
        case message = "Message"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destinationDetails = destinationDetails {
            try container.encode(destinationDetails, forKey: ClientRuntime.Key("DestinationDetails"))
        }
        if let destinationType = destinationType {
            try container.encode(destinationType, forKey: ClientRuntime.Key("DestinationType"))
        }
        if let logFormat = logFormat {
            try container.encode(logFormat, forKey: ClientRuntime.Key("LogFormat"))
        }
        if let logType = logType {
            try container.encode(logType, forKey: ClientRuntime.Key("LogType"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logTypeDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.LogType.self, forKey: .logType)
        logType = logTypeDecoded
        let destinationTypeDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.DestinationType.self, forKey: .destinationType)
        destinationType = destinationTypeDecoded
        let destinationDetailsDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.DestinationDetails.self, forKey: .destinationDetails)
        destinationDetails = destinationDetailsDecoded
        let logFormatDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.LogFormat.self, forKey: .logFormat)
        logFormat = logFormatDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.LogDeliveryConfigurationStatus.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Returns the destination, format and type of the logs.
    public struct LogDeliveryConfiguration: Swift.Equatable {
        /// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
        var destinationDetails: ElastiCacheClientTypes.DestinationDetails?
        /// Returns the destination type, either cloudwatch-logs or kinesis-firehose.
        var destinationType: ElastiCacheClientTypes.DestinationType?
        /// Returns the log format, either JSON or TEXT.
        var logFormat: ElastiCacheClientTypes.LogFormat?
        /// Refers to [slow-log](https://redis.io/commands/slowlog).
        var logType: ElastiCacheClientTypes.LogType?
        /// Returns an error message for the log delivery configuration.
        var message: Swift.String?
        /// Returns the log delivery configuration status. Values are one of enabling | disabling | modifying | active | error
        var status: ElastiCacheClientTypes.LogDeliveryConfigurationStatus?

        public init (
            destinationDetails: ElastiCacheClientTypes.DestinationDetails? = nil,
            destinationType: ElastiCacheClientTypes.DestinationType? = nil,
            logFormat: ElastiCacheClientTypes.LogFormat? = nil,
            logType: ElastiCacheClientTypes.LogType? = nil,
            message: Swift.String? = nil,
            status: ElastiCacheClientTypes.LogDeliveryConfigurationStatus? = nil
        )
        {
            self.destinationDetails = destinationDetails
            self.destinationType = destinationType
            self.logFormat = logFormat
            self.logType = logType
            self.message = message
            self.status = status
        }
    }

}

extension ElastiCacheClientTypes.LogDeliveryConfigurationRequest: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationDetails = "DestinationDetails"
        case destinationType = "DestinationType"
        case enabled = "Enabled"
        case logFormat = "LogFormat"
        case logType = "LogType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destinationDetails = destinationDetails {
            try container.encode(destinationDetails, forKey: ClientRuntime.Key("DestinationDetails"))
        }
        if let destinationType = destinationType {
            try container.encode(destinationType, forKey: ClientRuntime.Key("DestinationType"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let logFormat = logFormat {
            try container.encode(logFormat, forKey: ClientRuntime.Key("LogFormat"))
        }
        if let logType = logType {
            try container.encode(logType, forKey: ClientRuntime.Key("LogType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logTypeDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.LogType.self, forKey: .logType)
        logType = logTypeDecoded
        let destinationTypeDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.DestinationType.self, forKey: .destinationType)
        destinationType = destinationTypeDecoded
        let destinationDetailsDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.DestinationDetails.self, forKey: .destinationDetails)
        destinationDetails = destinationDetailsDecoded
        let logFormatDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.LogFormat.self, forKey: .logFormat)
        logFormat = logFormatDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Specifies the destination, format and type of the logs.
    public struct LogDeliveryConfigurationRequest: Swift.Equatable {
        /// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
        var destinationDetails: ElastiCacheClientTypes.DestinationDetails?
        /// Specify either cloudwatch-logs or kinesis-firehose as the destination type.
        var destinationType: ElastiCacheClientTypes.DestinationType?
        /// Specify if log delivery is enabled. Default true.
        var enabled: Swift.Bool?
        /// Specifies either JSON or TEXT
        var logFormat: ElastiCacheClientTypes.LogFormat?
        /// Refers to [slow-log](https://redis.io/commands/slowlog).
        var logType: ElastiCacheClientTypes.LogType?

        public init (
            destinationDetails: ElastiCacheClientTypes.DestinationDetails? = nil,
            destinationType: ElastiCacheClientTypes.DestinationType? = nil,
            enabled: Swift.Bool? = nil,
            logFormat: ElastiCacheClientTypes.LogFormat? = nil,
            logType: ElastiCacheClientTypes.LogType? = nil
        )
        {
            self.destinationDetails = destinationDetails
            self.destinationType = destinationType
            self.enabled = enabled
            self.logFormat = logFormat
            self.logType = logType
        }
    }

}

extension ElastiCacheClientTypes {
    public enum LogDeliveryConfigurationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case disabling
        case enabling
        case error
        case modifying
        case sdkUnknown(Swift.String)

        public static var allCases: [LogDeliveryConfigurationStatus] {
            return [
                .active,
                .disabling,
                .enabling,
                .error,
                .modifying,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "active"
            case .disabling: return "disabling"
            case .enabling: return "enabling"
            case .error: return "error"
            case .modifying: return "modifying"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogDeliveryConfigurationStatus(rawValue: rawValue) ?? LogDeliveryConfigurationStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes {
    public enum LogFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case json
        case text
        case sdkUnknown(Swift.String)

        public static var allCases: [LogFormat] {
            return [
                .json,
                .text,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .json: return "json"
            case .text: return "text"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogFormat(rawValue: rawValue) ?? LogFormat.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes {
    public enum LogType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case slowLog
        case sdkUnknown(Swift.String)

        public static var allCases: [LogType] {
            return [
                .slowLog,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .slowLog: return "slow-log"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogType(rawValue: rawValue) ?? LogType.sdkUnknown(rawValue)
        }
    }
}

extension ModifyCacheClusterInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aZMode = aZMode {
            try container.encode(aZMode, forKey: ClientRuntime.Key("AZMode"))
        }
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: ClientRuntime.Key("ApplyImmediately"))
        }
        if let authToken = authToken {
            try container.encode(authToken, forKey: ClientRuntime.Key("AuthToken"))
        }
        if let authTokenUpdateStrategy = authTokenUpdateStrategy {
            try container.encode(authTokenUpdateStrategy, forKey: ClientRuntime.Key("AuthTokenUpdateStrategy"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let cacheNodeIdsToRemove = cacheNodeIdsToRemove {
            var cacheNodeIdsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheNodeIdsToRemove"))
            for (index0, string0) in cacheNodeIdsToRemove.enumerated() {
                try cacheNodeIdsToRemoveContainer.encode(string0, forKey: ClientRuntime.Key("CacheNodeId.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let cacheSecurityGroupNames = cacheSecurityGroupNames {
            var cacheSecurityGroupNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheSecurityGroupNames"))
            for (index0, string0) in cacheSecurityGroupNames.enumerated() {
                try cacheSecurityGroupNamesContainer.encode(string0, forKey: ClientRuntime.Key("CacheSecurityGroupName.\(index0.advanced(by: 1))"))
            }
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogDeliveryConfigurations"))
            for (index0, logdeliveryconfigurationrequest0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(logdeliveryconfigurationrequest0, forKey: ClientRuntime.Key("LogDeliveryConfigurationRequest.\(index0.advanced(by: 1))"))
            }
        }
        if let newAvailabilityZones = newAvailabilityZones {
            var newAvailabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NewAvailabilityZones"))
            for (index0, string0) in newAvailabilityZones.enumerated() {
                try newAvailabilityZonesContainer.encode(string0, forKey: ClientRuntime.Key("PreferredAvailabilityZone.\(index0.advanced(by: 1))"))
            }
        }
        if let notificationTopicArn = notificationTopicArn {
            try container.encode(notificationTopicArn, forKey: ClientRuntime.Key("NotificationTopicArn"))
        }
        if let notificationTopicStatus = notificationTopicStatus {
            try container.encode(notificationTopicStatus, forKey: ClientRuntime.Key("NotificationTopicStatus"))
        }
        if let numCacheNodes = numCacheNodes {
            try container.encode(numCacheNodes, forKey: ClientRuntime.Key("NumCacheNodes"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroupIds"))
            for (index0, string0) in securityGroupIds.enumerated() {
                try securityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("SecurityGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: ClientRuntime.Key("SnapshotRetentionLimit"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: ClientRuntime.Key("SnapshotWindow"))
        }
        try container.encode("ModifyCacheCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyCacheClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ModifyCacheCluster operation.
public struct ModifyCacheClusterInput: Swift.Equatable {
    /// Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones. Valid values: single-az | cross-az. This option is only supported for Memcached clusters. You cannot specify single-az if the Memcached cluster already has cache nodes in different Availability Zones. If cross-az is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes are located in different Availability Zones.
    var aZMode: ElastiCacheClientTypes.AZMode?
    /// If true, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the PreferredMaintenanceWindow setting for the cluster. If false, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first. If you perform a ModifyCacheCluster before a pending modification is applied, the pending modification is replaced by the newer modification. Valid values: true | false Default: false
    var applyImmediately: Swift.Bool
    /// Reserved parameter. The password used to access a password protected server. This parameter must be specified with the auth-token-update parameter. Password constraints:
    ///
    /// * Must be only printable ASCII characters
    ///
    /// * Must be at least 16 characters and no more than 128 characters in length
    ///
    /// * Cannot contain any of the following characters: '/', '"', or '@', '%'
    ///
    ///
    /// For more information, see AUTH password at [AUTH](http://redis.io/commands/AUTH).
    var authToken: Swift.String?
    /// Specifies the strategy to use to update the AUTH token. This parameter must be specified with the auth-token parameter. Possible values:
    ///
    /// * Rotate
    ///
    /// * Set
    ///
    ///
    /// For more information, see [Authenticating Users with Redis AUTH](http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html)
    var authTokenUpdateStrategy: ElastiCacheClientTypes.AuthTokenUpdateStrategyType?
    ///  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
    var autoMinorVersionUpgrade: Swift.Bool?
    /// The cluster identifier. This value is stored as a lowercase string.
    /// This member is required.
    var cacheClusterId: Swift.String?
    /// A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when NumCacheNodes is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of NumCacheNodes in the request. For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this ModifyCacheCluster call is 5, you must list 2 (7 - 5) cache node IDs to remove.
    var cacheNodeIdsToRemove: [Swift.String]?
    /// A valid cache node type that you want to scale this cluster up to.
    var cacheNodeType: Swift.String?
    /// The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the ApplyImmediately parameter is specified as true for this request.
    var cacheParameterGroupName: Swift.String?
    /// A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible. You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC). Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".
    var cacheSecurityGroupNames: [Swift.String]?
    /// The upgraded version of the cache engine to be run on the cache nodes. Important: You can upgrade to a newer engine version (see [Selecting a Cache Engine and Version](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement)), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version.
    var engineVersion: Swift.String?
    /// Specifies the destination, format and type of the logs.
    var logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]?
    /// This option is only supported on Memcached clusters. The list of Availability Zones where the new Memcached cache nodes are created. This parameter is only valid when NumCacheNodes in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request. Scenarios:
    ///
    /// * Scenario 1: You have 3 active nodes and wish to add 2 nodes. Specify NumCacheNodes=5 (3 + 2) and optionally specify two Availability Zones for the two new nodes.
    ///
    /// * Scenario 2: You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify NumCacheNodes=6 ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.
    ///
    /// * Scenario 3: You want to cancel all pending operations. Specify NumCacheNodes=3 to cancel all pending operations.
    ///
    ///
    /// The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting NumCacheNodes to the number of current nodes. If cross-az is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the Availability Zone Considerations section of [Cache Node Considerations for Memcached](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html). Impact of new add/remove requests upon pending requests
    ///
    /// * Scenario-1
    ///
    /// * Pending Action: Delete
    ///
    /// * New Request: Delete
    ///
    /// * Result: The new delete, pending or immediate, replaces the pending delete.
    ///
    ///
    ///
    ///
    /// * Scenario-2
    ///
    /// * Pending Action: Delete
    ///
    /// * New Request: Create
    ///
    /// * Result: The new create, pending or immediate, replaces the pending delete.
    ///
    ///
    ///
    ///
    /// * Scenario-3
    ///
    /// * Pending Action: Create
    ///
    /// * New Request: Delete
    ///
    /// * Result: The new delete, pending or immediate, replaces the pending create.
    ///
    ///
    ///
    ///
    /// * Scenario-4
    ///
    /// * Pending Action: Create
    ///
    /// * New Request: Create
    ///
    /// * Result: The new create is added to the pending create. Important: If the new create request is Apply Immediately - Yes, all creates are performed immediately. If the new create request is Apply Immediately - No, all creates are pending.
    var newAvailabilityZones: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent. The Amazon SNS topic owner must be same as the cluster owner.
    var notificationTopicArn: Swift.String?
    /// The status of the Amazon SNS notification topic. Notifications are sent only if the status is active. Valid values: active | inactive
    var notificationTopicStatus: Swift.String?
    /// The number of cache nodes that the cluster should have. If the value for NumCacheNodes is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled. If you are removing cache nodes, you must use the CacheNodeIdsToRemove parameter to provide the IDs of the specific cache nodes to remove. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40. Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see ApplyImmediately). A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the ModifyCacheCluster request and set NumCacheNodes equal to the number of cache nodes currently in the cluster.
    var numCacheNodes: Swift.Int?
    /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:
    ///
    /// * sun
    ///
    /// * mon
    ///
    /// * tue
    ///
    /// * wed
    ///
    /// * thu
    ///
    /// * fri
    ///
    /// * sat
    ///
    ///
    /// Example: sun:23:00-mon:01:30
    var preferredMaintenanceWindow: Swift.String?
    /// Specifies the VPC Security Groups associated with the cluster. This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).
    var securityGroupIds: [Swift.String]?
    /// The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
    var snapshotRetentionLimit: Swift.Int?
    /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster.
    var snapshotWindow: Swift.String?

    public init (
        aZMode: ElastiCacheClientTypes.AZMode? = nil,
        applyImmediately: Swift.Bool = false,
        authToken: Swift.String? = nil,
        authTokenUpdateStrategy: ElastiCacheClientTypes.AuthTokenUpdateStrategyType? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        cacheClusterId: Swift.String? = nil,
        cacheNodeIdsToRemove: [Swift.String]? = nil,
        cacheNodeType: Swift.String? = nil,
        cacheParameterGroupName: Swift.String? = nil,
        cacheSecurityGroupNames: [Swift.String]? = nil,
        engineVersion: Swift.String? = nil,
        logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]? = nil,
        newAvailabilityZones: [Swift.String]? = nil,
        notificationTopicArn: Swift.String? = nil,
        notificationTopicStatus: Swift.String? = nil,
        numCacheNodes: Swift.Int? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        securityGroupIds: [Swift.String]? = nil,
        snapshotRetentionLimit: Swift.Int? = nil,
        snapshotWindow: Swift.String? = nil
    )
    {
        self.aZMode = aZMode
        self.applyImmediately = applyImmediately
        self.authToken = authToken
        self.authTokenUpdateStrategy = authTokenUpdateStrategy
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.cacheClusterId = cacheClusterId
        self.cacheNodeIdsToRemove = cacheNodeIdsToRemove
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSecurityGroupNames = cacheSecurityGroupNames
        self.engineVersion = engineVersion
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.newAvailabilityZones = newAvailabilityZones
        self.notificationTopicArn = notificationTopicArn
        self.notificationTopicStatus = notificationTopicStatus
        self.numCacheNodes = numCacheNodes
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.securityGroupIds = securityGroupIds
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
    }
}

extension ModifyCacheClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyCacheClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFound" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupNotFound" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFound" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCacheClusterCapacity" : self = .insufficientCacheClusterCapacityFault(try InsufficientCacheClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterState" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheSecurityGroupState" : self = .invalidCacheSecurityGroupStateFault(try InvalidCacheSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCNetworkStateFault" : self = .invalidVPCNetworkStateFault(try InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForClusterExceeded" : self = .nodeQuotaForClusterExceededFault(try NodeQuotaForClusterExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForCustomerExceeded" : self = .nodeQuotaForCustomerExceededFault(try NodeQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyCacheClusterOutputError: Swift.Error, Swift.Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case insufficientCacheClusterCapacityFault(InsufficientCacheClusterCapacityFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidCacheSecurityGroupStateFault(InvalidCacheSecurityGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidVPCNetworkStateFault(InvalidVPCNetworkStateFault)
    case nodeQuotaForClusterExceededFault(NodeQuotaForClusterExceededFault)
    case nodeQuotaForCustomerExceededFault(NodeQuotaForCustomerExceededFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyCacheClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ModifyCacheClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheCluster = output.cacheCluster
        } else {
            self.cacheCluster = nil
        }
    }
}

public struct ModifyCacheClusterOutputResponse: Swift.Equatable {
    /// Contains all of the attributes of a specific cluster.
    var cacheCluster: ElastiCacheClientTypes.CacheCluster?

    public init (
        cacheCluster: ElastiCacheClientTypes.CacheCluster? = nil
    )
    {
        self.cacheCluster = cacheCluster
    }
}

struct ModifyCacheClusterOutputResponseBody: Swift.Equatable {
    let cacheCluster: ElastiCacheClientTypes.CacheCluster?
}

extension ModifyCacheClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheCluster = "CacheCluster"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyCacheClusterResult"))
        let cacheClusterDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.CacheCluster.self, forKey: .cacheCluster)
        cacheCluster = cacheClusterDecoded
    }
}

extension ModifyCacheParameterGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let parameterNameValues = parameterNameValues {
            var parameterNameValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterNameValues"))
            for (index0, parameternamevalue0) in parameterNameValues.enumerated() {
                try parameterNameValuesContainer.encode(parameternamevalue0, forKey: ClientRuntime.Key("ParameterNameValue.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ModifyCacheParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyCacheParameterGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ModifyCacheParameterGroup operation.
public struct ModifyCacheParameterGroupInput: Swift.Equatable {
    /// The name of the cache parameter group to modify.
    /// This member is required.
    var cacheParameterGroupName: Swift.String?
    /// An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
    /// This member is required.
    var parameterNameValues: [ElastiCacheClientTypes.ParameterNameValue]?

    public init (
        cacheParameterGroupName: Swift.String? = nil,
        parameterNameValues: [ElastiCacheClientTypes.ParameterNameValue]? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
        self.parameterNameValues = parameterNameValues
    }
}

extension ModifyCacheParameterGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyCacheParameterGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheParameterGroupNotFound" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheParameterGroupState" : self = .invalidCacheParameterGroupStateFault(try InvalidCacheParameterGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupState" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyCacheParameterGroupOutputError: Swift.Error, Swift.Equatable {
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case invalidCacheParameterGroupStateFault(InvalidCacheParameterGroupStateFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyCacheParameterGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ModifyCacheParameterGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheParameterGroupName = output.cacheParameterGroupName
        } else {
            self.cacheParameterGroupName = nil
        }
    }
}

/// Represents the output of one of the following operations:
///
/// * ModifyCacheParameterGroup
///
/// * ResetCacheParameterGroup
public struct ModifyCacheParameterGroupOutputResponse: Swift.Equatable {
    /// The name of the cache parameter group.
    var cacheParameterGroupName: Swift.String?

    public init (
        cacheParameterGroupName: Swift.String? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
    }
}

struct ModifyCacheParameterGroupOutputResponseBody: Swift.Equatable {
    let cacheParameterGroupName: Swift.String?
}

extension ModifyCacheParameterGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheParameterGroupName = "CacheParameterGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyCacheParameterGroupResult"))
        let cacheParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheParameterGroupName)
        cacheParameterGroupName = cacheParameterGroupNameDecoded
    }
}

extension ModifyCacheSubnetGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheSubnetGroupDescription = cacheSubnetGroupDescription {
            try container.encode(cacheSubnetGroupDescription, forKey: ClientRuntime.Key("CacheSubnetGroupDescription"))
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: ClientRuntime.Key("CacheSubnetGroupName"))
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SubnetIds"))
            for (index0, string0) in subnetIds.enumerated() {
                try subnetIdsContainer.encode(string0, forKey: ClientRuntime.Key("SubnetIdentifier.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ModifyCacheSubnetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyCacheSubnetGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ModifyCacheSubnetGroup operation.
public struct ModifyCacheSubnetGroupInput: Swift.Equatable {
    /// A description of the cache subnet group.
    var cacheSubnetGroupDescription: Swift.String?
    /// The name for the cache subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters or hyphens. Example: mysubnetgroup
    /// This member is required.
    var cacheSubnetGroupName: Swift.String?
    /// The EC2 subnet IDs for the cache subnet group.
    var subnetIds: [Swift.String]?

    public init (
        cacheSubnetGroupDescription: Swift.String? = nil,
        cacheSubnetGroupName: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil
    )
    {
        self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
        self.cacheSubnetGroupName = cacheSubnetGroupName
        self.subnetIds = subnetIds
    }
}

extension ModifyCacheSubnetGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyCacheSubnetGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetQuotaExceededFault" : self = .cacheSubnetQuotaExceededFault(try CacheSubnetQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSubnet" : self = .invalidSubnet(try InvalidSubnet(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SubnetInUse" : self = .subnetInUse(try SubnetInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SubnetNotAllowedFault" : self = .subnetNotAllowedFault(try SubnetNotAllowedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyCacheSubnetGroupOutputError: Swift.Error, Swift.Equatable {
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case cacheSubnetQuotaExceededFault(CacheSubnetQuotaExceededFault)
    case invalidSubnet(InvalidSubnet)
    case subnetInUse(SubnetInUse)
    case subnetNotAllowedFault(SubnetNotAllowedFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyCacheSubnetGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ModifyCacheSubnetGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheSubnetGroup = output.cacheSubnetGroup
        } else {
            self.cacheSubnetGroup = nil
        }
    }
}

public struct ModifyCacheSubnetGroupOutputResponse: Swift.Equatable {
    /// Represents the output of one of the following operations:
    ///
    /// * CreateCacheSubnetGroup
    ///
    /// * ModifyCacheSubnetGroup
    var cacheSubnetGroup: ElastiCacheClientTypes.CacheSubnetGroup?

    public init (
        cacheSubnetGroup: ElastiCacheClientTypes.CacheSubnetGroup? = nil
    )
    {
        self.cacheSubnetGroup = cacheSubnetGroup
    }
}

struct ModifyCacheSubnetGroupOutputResponseBody: Swift.Equatable {
    let cacheSubnetGroup: ElastiCacheClientTypes.CacheSubnetGroup?
}

extension ModifyCacheSubnetGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheSubnetGroup = "CacheSubnetGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyCacheSubnetGroupResult"))
        let cacheSubnetGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.CacheSubnetGroup.self, forKey: .cacheSubnetGroup)
        cacheSubnetGroup = cacheSubnetGroupDecoded
    }
}

extension ModifyGlobalReplicationGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: ClientRuntime.Key("ApplyImmediately"))
        }
        if let automaticFailoverEnabled = automaticFailoverEnabled {
            try container.encode(automaticFailoverEnabled, forKey: ClientRuntime.Key("AutomaticFailoverEnabled"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let globalReplicationGroupDescription = globalReplicationGroupDescription {
            try container.encode(globalReplicationGroupDescription, forKey: ClientRuntime.Key("GlobalReplicationGroupDescription"))
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: ClientRuntime.Key("GlobalReplicationGroupId"))
        }
        try container.encode("ModifyGlobalReplicationGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyGlobalReplicationGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyGlobalReplicationGroupInput: Swift.Equatable {
    /// This parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible. Modifications to Global Replication Groups cannot be requested to be applied in PreferredMaintenceWindow.
    /// This member is required.
    var applyImmediately: Swift.Bool
    /// Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.
    var automaticFailoverEnabled: Swift.Bool?
    /// A valid cache node type that you want to scale this Global datastore to.
    var cacheNodeType: Swift.String?
    /// The name of the cache parameter group to use with the Global datastore. It must be compatible with the major engine version used by the Global datastore.
    var cacheParameterGroupName: Swift.String?
    /// The upgraded version of the cache engine to be run on the clusters in the Global datastore.
    var engineVersion: Swift.String?
    /// A description of the Global datastore
    var globalReplicationGroupDescription: Swift.String?
    /// The name of the Global datastore
    /// This member is required.
    var globalReplicationGroupId: Swift.String?

    public init (
        applyImmediately: Swift.Bool = false,
        automaticFailoverEnabled: Swift.Bool? = nil,
        cacheNodeType: Swift.String? = nil,
        cacheParameterGroupName: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        globalReplicationGroupDescription: Swift.String? = nil,
        globalReplicationGroupId: Swift.String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.automaticFailoverEnabled = automaticFailoverEnabled
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.engineVersion = engineVersion
        self.globalReplicationGroupDescription = globalReplicationGroupDescription
        self.globalReplicationGroupId = globalReplicationGroupId
    }
}

extension ModifyGlobalReplicationGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyGlobalReplicationGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupState" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyGlobalReplicationGroupOutputError: Swift.Error, Swift.Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyGlobalReplicationGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ModifyGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct ModifyGlobalReplicationGroupOutputResponse: Swift.Equatable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init (
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct ModifyGlobalReplicationGroupOutputResponseBody: Swift.Equatable {
    let globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?
}

extension ModifyGlobalReplicationGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

extension ModifyReplicationGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: ClientRuntime.Key("ApplyImmediately"))
        }
        if let authToken = authToken {
            try container.encode(authToken, forKey: ClientRuntime.Key("AuthToken"))
        }
        if let authTokenUpdateStrategy = authTokenUpdateStrategy {
            try container.encode(authTokenUpdateStrategy, forKey: ClientRuntime.Key("AuthTokenUpdateStrategy"))
        }
        if let autoMinorVersionUpgrade = autoMinorVersionUpgrade {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let automaticFailoverEnabled = automaticFailoverEnabled {
            try container.encode(automaticFailoverEnabled, forKey: ClientRuntime.Key("AutomaticFailoverEnabled"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let cacheSecurityGroupNames = cacheSecurityGroupNames {
            var cacheSecurityGroupNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheSecurityGroupNames"))
            for (index0, string0) in cacheSecurityGroupNames.enumerated() {
                try cacheSecurityGroupNamesContainer.encode(string0, forKey: ClientRuntime.Key("CacheSecurityGroupName.\(index0.advanced(by: 1))"))
            }
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogDeliveryConfigurations"))
            for (index0, logdeliveryconfigurationrequest0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(logdeliveryconfigurationrequest0, forKey: ClientRuntime.Key("LogDeliveryConfigurationRequest.\(index0.advanced(by: 1))"))
            }
        }
        if let multiAZEnabled = multiAZEnabled {
            try container.encode(multiAZEnabled, forKey: ClientRuntime.Key("MultiAZEnabled"))
        }
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: ClientRuntime.Key("NodeGroupId"))
        }
        if let notificationTopicArn = notificationTopicArn {
            try container.encode(notificationTopicArn, forKey: ClientRuntime.Key("NotificationTopicArn"))
        }
        if let notificationTopicStatus = notificationTopicStatus {
            try container.encode(notificationTopicStatus, forKey: ClientRuntime.Key("NotificationTopicStatus"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let primaryClusterId = primaryClusterId {
            try container.encode(primaryClusterId, forKey: ClientRuntime.Key("PrimaryClusterId"))
        }
        if let removeUserGroups = removeUserGroups {
            try container.encode(removeUserGroups, forKey: ClientRuntime.Key("RemoveUserGroups"))
        }
        if let replicationGroupDescription = replicationGroupDescription {
            try container.encode(replicationGroupDescription, forKey: ClientRuntime.Key("ReplicationGroupDescription"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroupIds"))
            for (index0, string0) in securityGroupIds.enumerated() {
                try securityGroupIdsContainer.encode(string0, forKey: ClientRuntime.Key("SecurityGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: ClientRuntime.Key("SnapshotRetentionLimit"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: ClientRuntime.Key("SnapshotWindow"))
        }
        if let snapshottingClusterId = snapshottingClusterId {
            try container.encode(snapshottingClusterId, forKey: ClientRuntime.Key("SnapshottingClusterId"))
        }
        if let userGroupIdsToAdd = userGroupIdsToAdd {
            var userGroupIdsToAddContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserGroupIdsToAdd"))
            for (index0, usergroupid0) in userGroupIdsToAdd.enumerated() {
                try userGroupIdsToAddContainer.encode(usergroupid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userGroupIdsToRemove = userGroupIdsToRemove {
            var userGroupIdsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserGroupIdsToRemove"))
            for (index0, usergroupid0) in userGroupIdsToRemove.enumerated() {
                try userGroupIdsToRemoveContainer.encode(usergroupid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ModifyReplicationGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyReplicationGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ModifyReplicationGroups operation.
public struct ModifyReplicationGroupInput: Swift.Equatable {
    /// If true, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the PreferredMaintenanceWindow setting for the replication group. If false, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first. Valid values: true | false Default: false
    var applyImmediately: Swift.Bool
    /// Reserved parameter. The password used to access a password protected server. This parameter must be specified with the auth-token-update-strategy  parameter. Password constraints:
    ///
    /// * Must be only printable ASCII characters
    ///
    /// * Must be at least 16 characters and no more than 128 characters in length
    ///
    /// * Cannot contain any of the following characters: '/', '"', or '@', '%'
    ///
    ///
    /// For more information, see AUTH password at [AUTH](http://redis.io/commands/AUTH).
    var authToken: Swift.String?
    /// Specifies the strategy to use to update the AUTH token. This parameter must be specified with the auth-token parameter. Possible values:
    ///
    /// * Rotate
    ///
    /// * Set
    ///
    ///
    /// For more information, see [Authenticating Users with Redis AUTH](http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html)
    var authTokenUpdateStrategy: ElastiCacheClientTypes.AuthTokenUpdateStrategyType?
    ///  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
    var autoMinorVersionUpgrade: Swift.Bool?
    /// Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure. Valid values: true | false
    var automaticFailoverEnabled: Swift.Bool?
    /// A valid cache node type that you want to scale this replication group to.
    var cacheNodeType: Swift.String?
    /// The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the ApplyImmediately parameter is specified as true for this request.
    var cacheParameterGroupName: Swift.String?
    /// A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible. This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC). Constraints: Must contain no more than 255 alphanumeric characters. Must not be Default.
    var cacheSecurityGroupNames: [Swift.String]?
    /// The upgraded version of the cache engine to be run on the clusters in the replication group. Important: You can upgrade to a newer engine version (see [Selecting a Cache Engine and Version](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement)), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version.
    var engineVersion: Swift.String?
    /// Specifies the destination, format and type of the logs.
    var logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]?
    /// A flag to indicate MultiAZ is enabled.
    var multiAZEnabled: Swift.Bool?
    /// Deprecated. This parameter is not used.
    @available(*, deprecated)
    var nodeGroupId: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent. The Amazon SNS topic owner must be same as the replication group owner.
    var notificationTopicArn: Swift.String?
    /// The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is active. Valid values: active | inactive
    var notificationTopicStatus: Swift.String?
    /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:
    ///
    /// * sun
    ///
    /// * mon
    ///
    /// * tue
    ///
    /// * wed
    ///
    /// * thu
    ///
    /// * fri
    ///
    /// * sat
    ///
    ///
    /// Example: sun:23:00-mon:01:30
    var preferredMaintenanceWindow: Swift.String?
    /// For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
    var primaryClusterId: Swift.String?
    /// Removes the user group associated with this replication group.
    var removeUserGroups: Swift.Bool?
    /// A description for the replication group. Maximum length is 255 characters.
    var replicationGroupDescription: Swift.String?
    /// The identifier of the replication group to modify.
    /// This member is required.
    var replicationGroupId: Swift.String?
    /// Specifies the VPC Security Groups associated with the clusters in the replication group. This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).
    var securityGroupIds: [Swift.String]?
    /// The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted. Important If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
    var snapshotRetentionLimit: Swift.Int?
    /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by SnapshottingClusterId. Example: 05:00-09:00 If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.
    var snapshotWindow: Swift.String?
    /// The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
    var snapshottingClusterId: Swift.String?
    /// The ID of the user group you are associating with the replication group.
    var userGroupIdsToAdd: [Swift.String]?
    /// The ID of the user group to disassociate from the replication group, meaning the users in the group no longer can access the replication group.
    var userGroupIdsToRemove: [Swift.String]?

    public init (
        applyImmediately: Swift.Bool = false,
        authToken: Swift.String? = nil,
        authTokenUpdateStrategy: ElastiCacheClientTypes.AuthTokenUpdateStrategyType? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        automaticFailoverEnabled: Swift.Bool? = nil,
        cacheNodeType: Swift.String? = nil,
        cacheParameterGroupName: Swift.String? = nil,
        cacheSecurityGroupNames: [Swift.String]? = nil,
        engineVersion: Swift.String? = nil,
        logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfigurationRequest]? = nil,
        multiAZEnabled: Swift.Bool? = nil,
        nodeGroupId: Swift.String? = nil,
        notificationTopicArn: Swift.String? = nil,
        notificationTopicStatus: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        primaryClusterId: Swift.String? = nil,
        removeUserGroups: Swift.Bool? = nil,
        replicationGroupDescription: Swift.String? = nil,
        replicationGroupId: Swift.String? = nil,
        securityGroupIds: [Swift.String]? = nil,
        snapshotRetentionLimit: Swift.Int? = nil,
        snapshotWindow: Swift.String? = nil,
        snapshottingClusterId: Swift.String? = nil,
        userGroupIdsToAdd: [Swift.String]? = nil,
        userGroupIdsToRemove: [Swift.String]? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.authToken = authToken
        self.authTokenUpdateStrategy = authTokenUpdateStrategy
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.automaticFailoverEnabled = automaticFailoverEnabled
        self.cacheNodeType = cacheNodeType
        self.cacheParameterGroupName = cacheParameterGroupName
        self.cacheSecurityGroupNames = cacheSecurityGroupNames
        self.engineVersion = engineVersion
        self.logDeliveryConfigurations = logDeliveryConfigurations
        self.multiAZEnabled = multiAZEnabled
        self.nodeGroupId = nodeGroupId
        self.notificationTopicArn = notificationTopicArn
        self.notificationTopicStatus = notificationTopicStatus
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.primaryClusterId = primaryClusterId
        self.removeUserGroups = removeUserGroups
        self.replicationGroupDescription = replicationGroupDescription
        self.replicationGroupId = replicationGroupId
        self.securityGroupIds = securityGroupIds
        self.snapshotRetentionLimit = snapshotRetentionLimit
        self.snapshotWindow = snapshotWindow
        self.snapshottingClusterId = snapshottingClusterId
        self.userGroupIdsToAdd = userGroupIdsToAdd
        self.userGroupIdsToRemove = userGroupIdsToRemove
    }
}

extension ModifyReplicationGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyReplicationGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFound" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupNotFound" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFound" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCacheClusterCapacity" : self = .insufficientCacheClusterCapacityFault(try InsufficientCacheClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterState" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheSecurityGroupState" : self = .invalidCacheSecurityGroupStateFault(try InvalidCacheSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyFault" : self = .invalidKMSKeyFault(try InvalidKMSKeyFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupState" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserGroupState" : self = .invalidUserGroupStateFault(try InvalidUserGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCNetworkStateFault" : self = .invalidVPCNetworkStateFault(try InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForClusterExceeded" : self = .nodeQuotaForClusterExceededFault(try NodeQuotaForClusterExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForCustomerExceeded" : self = .nodeQuotaForCustomerExceededFault(try NodeQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFound" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyReplicationGroupOutputError: Swift.Error, Swift.Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case insufficientCacheClusterCapacityFault(InsufficientCacheClusterCapacityFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidCacheSecurityGroupStateFault(InvalidCacheSecurityGroupStateFault)
    case invalidKMSKeyFault(InvalidKMSKeyFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case invalidUserGroupStateFault(InvalidUserGroupStateFault)
    case invalidVPCNetworkStateFault(InvalidVPCNetworkStateFault)
    case nodeQuotaForClusterExceededFault(NodeQuotaForClusterExceededFault)
    case nodeQuotaForCustomerExceededFault(NodeQuotaForCustomerExceededFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyReplicationGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ModifyReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct ModifyReplicationGroupOutputResponse: Swift.Equatable {
    /// Contains all of the attributes of a specific Redis replication group.
    var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init (
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct ModifyReplicationGroupOutputResponseBody: Swift.Equatable {
    let replicationGroup: ElastiCacheClientTypes.ReplicationGroup?
}

extension ModifyReplicationGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyReplicationGroupResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

extension ModifyReplicationGroupShardConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: ClientRuntime.Key("ApplyImmediately"))
        }
        if nodeGroupCount != 0 {
            try container.encode(nodeGroupCount, forKey: ClientRuntime.Key("NodeGroupCount"))
        }
        if let nodeGroupsToRemove = nodeGroupsToRemove {
            var nodeGroupsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NodeGroupsToRemove"))
            for (index0, allowednodegroupid0) in nodeGroupsToRemove.enumerated() {
                try nodeGroupsToRemoveContainer.encode(allowednodegroupid0, forKey: ClientRuntime.Key("NodeGroupToRemove.\(index0.advanced(by: 1))"))
            }
        }
        if let nodeGroupsToRetain = nodeGroupsToRetain {
            var nodeGroupsToRetainContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NodeGroupsToRetain"))
            for (index0, allowednodegroupid0) in nodeGroupsToRetain.enumerated() {
                try nodeGroupsToRetainContainer.encode(allowednodegroupid0, forKey: ClientRuntime.Key("NodeGroupToRetain.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let reshardingConfiguration = reshardingConfiguration {
            var reshardingConfigurationContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReshardingConfiguration"))
            for (index0, reshardingconfiguration0) in reshardingConfiguration.enumerated() {
                try reshardingConfigurationContainer.encode(reshardingconfiguration0, forKey: ClientRuntime.Key("ReshardingConfiguration.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ModifyReplicationGroupShardConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyReplicationGroupShardConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input for a ModifyReplicationGroupShardConfiguration operation.
public struct ModifyReplicationGroupShardConfigurationInput: Swift.Equatable {
    /// Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is true. Value: true
    /// This member is required.
    var applyImmediately: Swift.Bool
    /// The number of node groups (shards) that results from the modification of the shard configuration.
    /// This member is required.
    var nodeGroupCount: Swift.Int
    /// If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. NodeGroupsToRemove is a list of NodeGroupIds to remove from the cluster. ElastiCache for Redis will attempt to remove all node groups listed by NodeGroupsToRemove from the cluster.
    var nodeGroupsToRemove: [Swift.String]?
    /// If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. NodeGroupsToRetain is a list of NodeGroupIds to retain in the cluster. ElastiCache for Redis will attempt to remove all node groups except those listed by NodeGroupsToRetain from the cluster.
    var nodeGroupsToRetain: [Swift.String]?
    /// The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
    /// This member is required.
    var replicationGroupId: Swift.String?
    /// Specifies the preferred availability zones for each node group in the cluster. If the value of NodeGroupCount is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you. You can specify this parameter only if the value of NodeGroupCount is greater than the current number of node groups (shards).
    var reshardingConfiguration: [ElastiCacheClientTypes.ReshardingConfiguration]?

    public init (
        applyImmediately: Swift.Bool = false,
        nodeGroupCount: Swift.Int = 0,
        nodeGroupsToRemove: [Swift.String]? = nil,
        nodeGroupsToRetain: [Swift.String]? = nil,
        replicationGroupId: Swift.String? = nil,
        reshardingConfiguration: [ElastiCacheClientTypes.ReshardingConfiguration]? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.nodeGroupCount = nodeGroupCount
        self.nodeGroupsToRemove = nodeGroupsToRemove
        self.nodeGroupsToRetain = nodeGroupsToRetain
        self.replicationGroupId = replicationGroupId
        self.reshardingConfiguration = reshardingConfiguration
    }
}

extension ModifyReplicationGroupShardConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyReplicationGroupShardConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientCacheClusterCapacity" : self = .insufficientCacheClusterCapacityFault(try InsufficientCacheClusterCapacityFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterState" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyFault" : self = .invalidKMSKeyFault(try InvalidKMSKeyFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupState" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCNetworkStateFault" : self = .invalidVPCNetworkStateFault(try InvalidVPCNetworkStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeGroupsPerReplicationGroupQuotaExceeded" : self = .nodeGroupsPerReplicationGroupQuotaExceededFault(try NodeGroupsPerReplicationGroupQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeQuotaForCustomerExceeded" : self = .nodeQuotaForCustomerExceededFault(try NodeQuotaForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyReplicationGroupShardConfigurationOutputError: Swift.Error, Swift.Equatable {
    case insufficientCacheClusterCapacityFault(InsufficientCacheClusterCapacityFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidKMSKeyFault(InvalidKMSKeyFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case invalidVPCNetworkStateFault(InvalidVPCNetworkStateFault)
    case nodeGroupsPerReplicationGroupQuotaExceededFault(NodeGroupsPerReplicationGroupQuotaExceededFault)
    case nodeQuotaForCustomerExceededFault(NodeQuotaForCustomerExceededFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyReplicationGroupShardConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ModifyReplicationGroupShardConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct ModifyReplicationGroupShardConfigurationOutputResponse: Swift.Equatable {
    /// Contains all of the attributes of a specific Redis replication group.
    var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init (
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct ModifyReplicationGroupShardConfigurationOutputResponseBody: Swift.Equatable {
    let replicationGroup: ElastiCacheClientTypes.ReplicationGroup?
}

extension ModifyReplicationGroupShardConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyReplicationGroupShardConfigurationResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

extension ModifyUserGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let userGroupId = userGroupId {
            try container.encode(userGroupId, forKey: ClientRuntime.Key("UserGroupId"))
        }
        if let userIdsToAdd = userIdsToAdd {
            var userIdsToAddContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserIdsToAdd"))
            for (index0, userid0) in userIdsToAdd.enumerated() {
                try userIdsToAddContainer.encode(userid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userIdsToRemove = userIdsToRemove {
            var userIdsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserIdsToRemove"))
            for (index0, userid0) in userIdsToRemove.enumerated() {
                try userIdsToRemoveContainer.encode(userid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ModifyUserGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyUserGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyUserGroupInput: Swift.Equatable {
    /// The ID of the user group.
    /// This member is required.
    var userGroupId: Swift.String?
    /// The list of user IDs to add to the user group.
    var userIdsToAdd: [Swift.String]?
    /// The list of user IDs to remove from the user group.
    var userIdsToRemove: [Swift.String]?

    public init (
        userGroupId: Swift.String? = nil,
        userIdsToAdd: [Swift.String]? = nil,
        userIdsToRemove: [Swift.String]? = nil
    )
    {
        self.userGroupId = userGroupId
        self.userIdsToAdd = userIdsToAdd
        self.userIdsToRemove = userIdsToRemove
    }
}

extension ModifyUserGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyUserGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DefaultUserRequired" : self = .defaultUserRequired(try DefaultUserRequired(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateUserName" : self = .duplicateUserNameFault(try DuplicateUserNameFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserGroupState" : self = .invalidUserGroupStateFault(try InvalidUserGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleNotFoundFault" : self = .serviceLinkedRoleNotFoundFault(try ServiceLinkedRoleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFound" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFound" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyUserGroupOutputError: Swift.Error, Swift.Equatable {
    case defaultUserRequired(DefaultUserRequired)
    case duplicateUserNameFault(DuplicateUserNameFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidUserGroupStateFault(InvalidUserGroupStateFault)
    case serviceLinkedRoleNotFoundFault(ServiceLinkedRoleNotFoundFault)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyUserGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ModifyUserGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aRN = output.aRN
            self.engine = output.engine
            self.minimumEngineVersion = output.minimumEngineVersion
            self.pendingChanges = output.pendingChanges
            self.replicationGroups = output.replicationGroups
            self.status = output.status
            self.userGroupId = output.userGroupId
            self.userIds = output.userIds
        } else {
            self.aRN = nil
            self.engine = nil
            self.minimumEngineVersion = nil
            self.pendingChanges = nil
            self.replicationGroups = nil
            self.status = nil
            self.userGroupId = nil
            self.userIds = nil
        }
    }
}

public struct ModifyUserGroupOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the user group.
    var aRN: Swift.String?
    /// The current supported value is Redis.
    var engine: Swift.String?
    /// The minimum engine version required, which is Redis 6.0
    var minimumEngineVersion: Swift.String?
    /// A list of updates being applied to the user group.
    var pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges?
    /// A list of replication groups that the user group can access.
    var replicationGroups: [Swift.String]?
    /// Indicates user group status. Can be "creating", "active", "modifying", "deleting".
    var status: Swift.String?
    /// The ID of the user group.
    var userGroupId: Swift.String?
    /// The list of user IDs that belong to the user group.
    var userIds: [Swift.String]?

    public init (
        aRN: Swift.String? = nil,
        engine: Swift.String? = nil,
        minimumEngineVersion: Swift.String? = nil,
        pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges? = nil,
        replicationGroups: [Swift.String]? = nil,
        status: Swift.String? = nil,
        userGroupId: Swift.String? = nil,
        userIds: [Swift.String]? = nil
    )
    {
        self.aRN = aRN
        self.engine = engine
        self.minimumEngineVersion = minimumEngineVersion
        self.pendingChanges = pendingChanges
        self.replicationGroups = replicationGroups
        self.status = status
        self.userGroupId = userGroupId
        self.userIds = userIds
    }
}

struct ModifyUserGroupOutputResponseBody: Swift.Equatable {
    let userGroupId: Swift.String?
    let status: Swift.String?
    let engine: Swift.String?
    let userIds: [Swift.String]?
    let minimumEngineVersion: Swift.String?
    let pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges?
    let replicationGroups: [Swift.String]?
    let aRN: Swift.String?
}

extension ModifyUserGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case engine = "Engine"
        case minimumEngineVersion = "MinimumEngineVersion"
        case pendingChanges = "PendingChanges"
        case replicationGroups = "ReplicationGroups"
        case status = "Status"
        case userGroupId = "UserGroupId"
        case userIds = "UserIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyUserGroupResult"))
        let userGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userGroupId)
        userGroupId = userGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        if containerValues.contains(.userIds) {
            struct KeyVal0{struct member{}}
            let userIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIds)
            if let userIdsWrappedContainer = userIdsWrappedContainer {
                let userIdsContainer = try userIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userIdsBuffer:[Swift.String]? = nil
                if let userIdsContainer = userIdsContainer {
                    userIdsBuffer = [Swift.String]()
                    for stringContainer0 in userIdsContainer {
                        userIdsBuffer?.append(stringContainer0)
                    }
                }
                userIds = userIdsBuffer
            } else {
                userIds = []
            }
        } else {
            userIds = nil
        }
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        let pendingChangesDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.UserGroupPendingChanges.self, forKey: .pendingChanges)
        pendingChanges = pendingChangesDecoded
        if containerValues.contains(.replicationGroups) {
            struct KeyVal0{struct member{}}
            let replicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replicationGroups)
            if let replicationGroupsWrappedContainer = replicationGroupsWrappedContainer {
                let replicationGroupsContainer = try replicationGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var replicationGroupsBuffer:[Swift.String]? = nil
                if let replicationGroupsContainer = replicationGroupsContainer {
                    replicationGroupsBuffer = [Swift.String]()
                    for stringContainer0 in replicationGroupsContainer {
                        replicationGroupsBuffer?.append(stringContainer0)
                    }
                }
                replicationGroups = replicationGroupsBuffer
            } else {
                replicationGroups = []
            }
        } else {
            replicationGroups = nil
        }
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension ModifyUserInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accessString = accessString {
            try container.encode(accessString, forKey: ClientRuntime.Key("AccessString"))
        }
        if let appendAccessString = appendAccessString {
            try container.encode(appendAccessString, forKey: ClientRuntime.Key("AppendAccessString"))
        }
        if let noPasswordRequired = noPasswordRequired {
            try container.encode(noPasswordRequired, forKey: ClientRuntime.Key("NoPasswordRequired"))
        }
        if let passwords = passwords {
            var passwordsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Passwords"))
            for (index0, string0) in passwords.enumerated() {
                try passwordsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userId = userId {
            try container.encode(userId, forKey: ClientRuntime.Key("UserId"))
        }
        try container.encode("ModifyUser", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension ModifyUserInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ModifyUserInput: Swift.Equatable {
    /// Access permissions string used for this user.
    var accessString: Swift.String?
    /// Adds additional user permissions to the access string.
    var appendAccessString: Swift.String?
    /// Indicates no password is required for the user.
    var noPasswordRequired: Swift.Bool?
    /// The passwords belonging to the user. You are allowed up to two.
    var passwords: [Swift.String]?
    /// The ID of the user.
    /// This member is required.
    var userId: Swift.String?

    public init (
        accessString: Swift.String? = nil,
        appendAccessString: Swift.String? = nil,
        noPasswordRequired: Swift.Bool? = nil,
        passwords: [Swift.String]? = nil,
        userId: Swift.String? = nil
    )
    {
        self.accessString = accessString
        self.appendAccessString = appendAccessString
        self.noPasswordRequired = noPasswordRequired
        self.passwords = passwords
        self.userId = userId
    }
}

extension ModifyUserOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ModifyUserOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUserState" : self = .invalidUserStateFault(try InvalidUserStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleNotFoundFault" : self = .serviceLinkedRoleNotFoundFault(try ServiceLinkedRoleNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFound" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyUserOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidUserStateFault(InvalidUserStateFault)
    case serviceLinkedRoleNotFoundFault(ServiceLinkedRoleNotFoundFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyUserOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ModifyUserOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aRN = output.aRN
            self.accessString = output.accessString
            self.authentication = output.authentication
            self.engine = output.engine
            self.minimumEngineVersion = output.minimumEngineVersion
            self.status = output.status
            self.userGroupIds = output.userGroupIds
            self.userId = output.userId
            self.userName = output.userName
        } else {
            self.aRN = nil
            self.accessString = nil
            self.authentication = nil
            self.engine = nil
            self.minimumEngineVersion = nil
            self.status = nil
            self.userGroupIds = nil
            self.userId = nil
            self.userName = nil
        }
    }
}

public struct ModifyUserOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the user.
    var aRN: Swift.String?
    /// Access permissions string used for this user.
    var accessString: Swift.String?
    /// Denotes whether the user requires a password to authenticate.
    var authentication: ElastiCacheClientTypes.Authentication?
    /// The current supported value is Redis.
    var engine: Swift.String?
    /// The minimum engine version required, which is Redis 6.0
    var minimumEngineVersion: Swift.String?
    /// Indicates the user status. Can be "active", "modifying" or "deleting".
    var status: Swift.String?
    /// Returns a list of the user group IDs the user belongs to.
    var userGroupIds: [Swift.String]?
    /// The ID of the user.
    var userId: Swift.String?
    /// The username of the user.
    var userName: Swift.String?

    public init (
        aRN: Swift.String? = nil,
        accessString: Swift.String? = nil,
        authentication: ElastiCacheClientTypes.Authentication? = nil,
        engine: Swift.String? = nil,
        minimumEngineVersion: Swift.String? = nil,
        status: Swift.String? = nil,
        userGroupIds: [Swift.String]? = nil,
        userId: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.aRN = aRN
        self.accessString = accessString
        self.authentication = authentication
        self.engine = engine
        self.minimumEngineVersion = minimumEngineVersion
        self.status = status
        self.userGroupIds = userGroupIds
        self.userId = userId
        self.userName = userName
    }
}

struct ModifyUserOutputResponseBody: Swift.Equatable {
    let userId: Swift.String?
    let userName: Swift.String?
    let status: Swift.String?
    let engine: Swift.String?
    let minimumEngineVersion: Swift.String?
    let accessString: Swift.String?
    let userGroupIds: [Swift.String]?
    let authentication: ElastiCacheClientTypes.Authentication?
    let aRN: Swift.String?
}

extension ModifyUserOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case accessString = "AccessString"
        case authentication = "Authentication"
        case engine = "Engine"
        case minimumEngineVersion = "MinimumEngineVersion"
        case status = "Status"
        case userGroupIds = "UserGroupIds"
        case userId = "UserId"
        case userName = "UserName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyUserResult"))
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        let accessStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessString)
        accessString = accessStringDecoded
        if containerValues.contains(.userGroupIds) {
            struct KeyVal0{struct member{}}
            let userGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIds)
            if let userGroupIdsWrappedContainer = userGroupIdsWrappedContainer {
                let userGroupIdsContainer = try userGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userGroupIdsBuffer:[Swift.String]? = nil
                if let userGroupIdsContainer = userGroupIdsContainer {
                    userGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in userGroupIdsContainer {
                        userGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                userGroupIds = userGroupIdsBuffer
            } else {
                userGroupIds = []
            }
        } else {
            userGroupIds = nil
        }
        let authenticationDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Authentication.self, forKey: .authentication)
        authentication = authenticationDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension ElastiCacheClientTypes {
    public enum MultiAZStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MultiAZStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MultiAZStatus(rawValue: rawValue) ?? MultiAZStatus.sdkUnknown(rawValue)
        }
    }
}

extension NoOperationFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<NoOperationFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation was not performed because no changes were required.
public struct NoOperationFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoOperationFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension NoOperationFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.NodeGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodeGroupId = "NodeGroupId"
        case nodeGroupMembers = "NodeGroupMembers"
        case primaryEndpoint = "PrimaryEndpoint"
        case readerEndpoint = "ReaderEndpoint"
        case slots = "Slots"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: ClientRuntime.Key("NodeGroupId"))
        }
        if let nodeGroupMembers = nodeGroupMembers {
            var nodeGroupMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NodeGroupMembers"))
            for (index0, nodegroupmember0) in nodeGroupMembers.enumerated() {
                try nodeGroupMembersContainer.encode(nodegroupmember0, forKey: ClientRuntime.Key("NodeGroupMember.\(index0.advanced(by: 1))"))
            }
        }
        if let primaryEndpoint = primaryEndpoint {
            try container.encode(primaryEndpoint, forKey: ClientRuntime.Key("PrimaryEndpoint"))
        }
        if let readerEndpoint = readerEndpoint {
            try container.encode(readerEndpoint, forKey: ClientRuntime.Key("ReaderEndpoint"))
        }
        if let slots = slots {
            try container.encode(slots, forKey: ClientRuntime.Key("Slots"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let primaryEndpointDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Endpoint.self, forKey: .primaryEndpoint)
        primaryEndpoint = primaryEndpointDecoded
        let readerEndpointDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Endpoint.self, forKey: .readerEndpoint)
        readerEndpoint = readerEndpointDecoded
        let slotsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slots)
        slots = slotsDecoded
        if containerValues.contains(.nodeGroupMembers) {
            struct KeyVal0{struct NodeGroupMember{}}
            let nodeGroupMembersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeGroupMember>.CodingKeys.self, forKey: .nodeGroupMembers)
            if let nodeGroupMembersWrappedContainer = nodeGroupMembersWrappedContainer {
                let nodeGroupMembersContainer = try nodeGroupMembersWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.NodeGroupMember].self, forKey: .member)
                var nodeGroupMembersBuffer:[ElastiCacheClientTypes.NodeGroupMember]? = nil
                if let nodeGroupMembersContainer = nodeGroupMembersContainer {
                    nodeGroupMembersBuffer = [ElastiCacheClientTypes.NodeGroupMember]()
                    for structureContainer0 in nodeGroupMembersContainer {
                        nodeGroupMembersBuffer?.append(structureContainer0)
                    }
                }
                nodeGroupMembers = nodeGroupMembersBuffer
            } else {
                nodeGroupMembers = []
            }
        } else {
            nodeGroupMembers = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// Represents a collection of cache nodes in a replication group. One node in the node group is the read/write primary node. All the other nodes are read-only Replica nodes.
    public struct NodeGroup: Swift.Equatable {
        /// The identifier for the node group (shard). A Redis (cluster mode disabled) replication group contains only 1 node group; therefore, the node group ID is 0001. A Redis (cluster mode enabled) replication group contains 1 to 90 node groups numbered 0001 to 0090. Optionally, the user can provide the id for a node group.
        var nodeGroupId: Swift.String?
        /// A list containing information about individual nodes within the node group (shard).
        var nodeGroupMembers: [ElastiCacheClientTypes.NodeGroupMember]?
        /// The endpoint of the primary node in this node group (shard).
        var primaryEndpoint: ElastiCacheClientTypes.Endpoint?
        /// The endpoint of the replica nodes in this node group (shard).
        var readerEndpoint: ElastiCacheClientTypes.Endpoint?
        /// The keyspace for this node group (shard).
        var slots: Swift.String?
        /// The current state of this replication group - creating, available, modifying, deleting.
        var status: Swift.String?

        public init (
            nodeGroupId: Swift.String? = nil,
            nodeGroupMembers: [ElastiCacheClientTypes.NodeGroupMember]? = nil,
            primaryEndpoint: ElastiCacheClientTypes.Endpoint? = nil,
            readerEndpoint: ElastiCacheClientTypes.Endpoint? = nil,
            slots: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.nodeGroupId = nodeGroupId
            self.nodeGroupMembers = nodeGroupMembers
            self.primaryEndpoint = primaryEndpoint
            self.readerEndpoint = readerEndpoint
            self.slots = slots
            self.status = status
        }
    }

}

extension ElastiCacheClientTypes.NodeGroupConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodeGroupId = "NodeGroupId"
        case primaryAvailabilityZone = "PrimaryAvailabilityZone"
        case primaryOutpostArn = "PrimaryOutpostArn"
        case replicaAvailabilityZones = "ReplicaAvailabilityZones"
        case replicaCount = "ReplicaCount"
        case replicaOutpostArns = "ReplicaOutpostArns"
        case slots = "Slots"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: ClientRuntime.Key("NodeGroupId"))
        }
        if let primaryAvailabilityZone = primaryAvailabilityZone {
            try container.encode(primaryAvailabilityZone, forKey: ClientRuntime.Key("PrimaryAvailabilityZone"))
        }
        if let primaryOutpostArn = primaryOutpostArn {
            try container.encode(primaryOutpostArn, forKey: ClientRuntime.Key("PrimaryOutpostArn"))
        }
        if let replicaAvailabilityZones = replicaAvailabilityZones {
            var replicaAvailabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplicaAvailabilityZones"))
            for (index0, string0) in replicaAvailabilityZones.enumerated() {
                try replicaAvailabilityZonesContainer.encode(string0, forKey: ClientRuntime.Key("AvailabilityZone.\(index0.advanced(by: 1))"))
            }
        }
        if let replicaCount = replicaCount {
            try container.encode(replicaCount, forKey: ClientRuntime.Key("ReplicaCount"))
        }
        if let replicaOutpostArns = replicaOutpostArns {
            var replicaOutpostArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplicaOutpostArns"))
            for (index0, string0) in replicaOutpostArns.enumerated() {
                try replicaOutpostArnsContainer.encode(string0, forKey: ClientRuntime.Key("OutpostArn.\(index0.advanced(by: 1))"))
            }
        }
        if let slots = slots {
            try container.encode(slots, forKey: ClientRuntime.Key("Slots"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        let slotsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slots)
        slots = slotsDecoded
        let replicaCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .replicaCount)
        replicaCount = replicaCountDecoded
        let primaryAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .primaryAvailabilityZone)
        primaryAvailabilityZone = primaryAvailabilityZoneDecoded
        if containerValues.contains(.replicaAvailabilityZones) {
            struct KeyVal0{struct AvailabilityZone{}}
            let replicaAvailabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AvailabilityZone>.CodingKeys.self, forKey: .replicaAvailabilityZones)
            if let replicaAvailabilityZonesWrappedContainer = replicaAvailabilityZonesWrappedContainer {
                let replicaAvailabilityZonesContainer = try replicaAvailabilityZonesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var replicaAvailabilityZonesBuffer:[Swift.String]? = nil
                if let replicaAvailabilityZonesContainer = replicaAvailabilityZonesContainer {
                    replicaAvailabilityZonesBuffer = [Swift.String]()
                    for stringContainer0 in replicaAvailabilityZonesContainer {
                        replicaAvailabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                replicaAvailabilityZones = replicaAvailabilityZonesBuffer
            } else {
                replicaAvailabilityZones = []
            }
        } else {
            replicaAvailabilityZones = nil
        }
        let primaryOutpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .primaryOutpostArn)
        primaryOutpostArn = primaryOutpostArnDecoded
        if containerValues.contains(.replicaOutpostArns) {
            struct KeyVal0{struct OutpostArn{}}
            let replicaOutpostArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.OutpostArn>.CodingKeys.self, forKey: .replicaOutpostArns)
            if let replicaOutpostArnsWrappedContainer = replicaOutpostArnsWrappedContainer {
                let replicaOutpostArnsContainer = try replicaOutpostArnsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var replicaOutpostArnsBuffer:[Swift.String]? = nil
                if let replicaOutpostArnsContainer = replicaOutpostArnsContainer {
                    replicaOutpostArnsBuffer = [Swift.String]()
                    for stringContainer0 in replicaOutpostArnsContainer {
                        replicaOutpostArnsBuffer?.append(stringContainer0)
                    }
                }
                replicaOutpostArns = replicaOutpostArnsBuffer
            } else {
                replicaOutpostArns = []
            }
        } else {
            replicaOutpostArns = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// Node group (shard) configuration options. Each node group (shard) configuration has the following: Slots, PrimaryAvailabilityZone, ReplicaAvailabilityZones, ReplicaCount.
    public struct NodeGroupConfiguration: Swift.Equatable {
        /// Either the ElastiCache for Redis supplied 4-digit id or a user supplied id for the node group these configuration values apply to.
        var nodeGroupId: Swift.String?
        /// The Availability Zone where the primary node of this node group (shard) is launched.
        var primaryAvailabilityZone: Swift.String?
        /// The outpost ARN of the primary node.
        var primaryOutpostArn: Swift.String?
        /// A list of Availability Zones to be used for the read replicas. The number of Availability Zones in this list must match the value of ReplicaCount or ReplicasPerNodeGroup if not specified.
        var replicaAvailabilityZones: [Swift.String]?
        /// The number of read replica nodes in this node group (shard).
        var replicaCount: Swift.Int?
        /// The outpost ARN of the node replicas.
        var replicaOutpostArns: [Swift.String]?
        /// A string that specifies the keyspace for a particular node group. Keyspaces range from 0 to 16,383. The string is in the format startkey-endkey. Example: "0-3999"
        var slots: Swift.String?

        public init (
            nodeGroupId: Swift.String? = nil,
            primaryAvailabilityZone: Swift.String? = nil,
            primaryOutpostArn: Swift.String? = nil,
            replicaAvailabilityZones: [Swift.String]? = nil,
            replicaCount: Swift.Int? = nil,
            replicaOutpostArns: [Swift.String]? = nil,
            slots: Swift.String? = nil
        )
        {
            self.nodeGroupId = nodeGroupId
            self.primaryAvailabilityZone = primaryAvailabilityZone
            self.primaryOutpostArn = primaryOutpostArn
            self.replicaAvailabilityZones = replicaAvailabilityZones
            self.replicaCount = replicaCount
            self.replicaOutpostArns = replicaOutpostArns
            self.slots = slots
        }
    }

}

extension ElastiCacheClientTypes.NodeGroupMember: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheClusterId = "CacheClusterId"
        case cacheNodeId = "CacheNodeId"
        case currentRole = "CurrentRole"
        case preferredAvailabilityZone = "PreferredAvailabilityZone"
        case preferredOutpostArn = "PreferredOutpostArn"
        case readEndpoint = "ReadEndpoint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let cacheNodeId = cacheNodeId {
            try container.encode(cacheNodeId, forKey: ClientRuntime.Key("CacheNodeId"))
        }
        if let currentRole = currentRole {
            try container.encode(currentRole, forKey: ClientRuntime.Key("CurrentRole"))
        }
        if let preferredAvailabilityZone = preferredAvailabilityZone {
            try container.encode(preferredAvailabilityZone, forKey: ClientRuntime.Key("PreferredAvailabilityZone"))
        }
        if let preferredOutpostArn = preferredOutpostArn {
            try container.encode(preferredOutpostArn, forKey: ClientRuntime.Key("PreferredOutpostArn"))
        }
        if let readEndpoint = readEndpoint {
            try container.encode(readEndpoint, forKey: ClientRuntime.Key("ReadEndpoint"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let cacheNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeId)
        cacheNodeId = cacheNodeIdDecoded
        let readEndpointDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Endpoint.self, forKey: .readEndpoint)
        readEndpoint = readEndpointDecoded
        let preferredAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredAvailabilityZone)
        preferredAvailabilityZone = preferredAvailabilityZoneDecoded
        let preferredOutpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredOutpostArn)
        preferredOutpostArn = preferredOutpostArnDecoded
        let currentRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentRole)
        currentRole = currentRoleDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Represents a single node within a node group (shard).
    public struct NodeGroupMember: Swift.Equatable {
        /// The ID of the cluster to which the node belongs.
        var cacheClusterId: Swift.String?
        /// The ID of the node within its cluster. A node ID is a numeric identifier (0001, 0002, etc.).
        var cacheNodeId: Swift.String?
        /// The role that is currently assigned to the node - primary or replica. This member is only applicable for Redis (cluster mode disabled) replication groups.
        var currentRole: Swift.String?
        /// The name of the Availability Zone in which the node is located.
        var preferredAvailabilityZone: Swift.String?
        /// The outpost ARN of the node group member.
        var preferredOutpostArn: Swift.String?
        /// The information required for client programs to connect to a node for read operations. The read endpoint is only applicable on Redis (cluster mode disabled) clusters.
        var readEndpoint: ElastiCacheClientTypes.Endpoint?

        public init (
            cacheClusterId: Swift.String? = nil,
            cacheNodeId: Swift.String? = nil,
            currentRole: Swift.String? = nil,
            preferredAvailabilityZone: Swift.String? = nil,
            preferredOutpostArn: Swift.String? = nil,
            readEndpoint: ElastiCacheClientTypes.Endpoint? = nil
        )
        {
            self.cacheClusterId = cacheClusterId
            self.cacheNodeId = cacheNodeId
            self.currentRole = currentRole
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.preferredOutpostArn = preferredOutpostArn
            self.readEndpoint = readEndpoint
        }
    }

}

extension ElastiCacheClientTypes.NodeGroupMemberUpdateStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheClusterId = "CacheClusterId"
        case cacheNodeId = "CacheNodeId"
        case nodeDeletionDate = "NodeDeletionDate"
        case nodeUpdateEndDate = "NodeUpdateEndDate"
        case nodeUpdateInitiatedBy = "NodeUpdateInitiatedBy"
        case nodeUpdateInitiatedDate = "NodeUpdateInitiatedDate"
        case nodeUpdateStartDate = "NodeUpdateStartDate"
        case nodeUpdateStatus = "NodeUpdateStatus"
        case nodeUpdateStatusModifiedDate = "NodeUpdateStatusModifiedDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let cacheNodeId = cacheNodeId {
            try container.encode(cacheNodeId, forKey: ClientRuntime.Key("CacheNodeId"))
        }
        if let nodeDeletionDate = nodeDeletionDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeDeletionDate, format: .dateTime), forKey: ClientRuntime.Key("nodeDeletionDate"))
        }
        if let nodeUpdateEndDate = nodeUpdateEndDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeUpdateEndDate, format: .dateTime), forKey: ClientRuntime.Key("nodeUpdateEndDate"))
        }
        if let nodeUpdateInitiatedBy = nodeUpdateInitiatedBy {
            try container.encode(nodeUpdateInitiatedBy, forKey: ClientRuntime.Key("NodeUpdateInitiatedBy"))
        }
        if let nodeUpdateInitiatedDate = nodeUpdateInitiatedDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeUpdateInitiatedDate, format: .dateTime), forKey: ClientRuntime.Key("nodeUpdateInitiatedDate"))
        }
        if let nodeUpdateStartDate = nodeUpdateStartDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeUpdateStartDate, format: .dateTime), forKey: ClientRuntime.Key("nodeUpdateStartDate"))
        }
        if let nodeUpdateStatus = nodeUpdateStatus {
            try container.encode(nodeUpdateStatus, forKey: ClientRuntime.Key("NodeUpdateStatus"))
        }
        if let nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeUpdateStatusModifiedDate, format: .dateTime), forKey: ClientRuntime.Key("nodeUpdateStatusModifiedDate"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let cacheNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeId)
        cacheNodeId = cacheNodeIdDecoded
        let nodeUpdateStatusDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.NodeUpdateStatus.self, forKey: .nodeUpdateStatus)
        nodeUpdateStatus = nodeUpdateStatusDecoded
        let nodeDeletionDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeDeletionDate)
        var nodeDeletionDateBuffer:ClientRuntime.Date? = nil
        if let nodeDeletionDateDecoded = nodeDeletionDateDecoded {
            nodeDeletionDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeDeletionDateDecoded, format: .dateTime)
        }
        nodeDeletionDate = nodeDeletionDateBuffer
        let nodeUpdateStartDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeUpdateStartDate)
        var nodeUpdateStartDateBuffer:ClientRuntime.Date? = nil
        if let nodeUpdateStartDateDecoded = nodeUpdateStartDateDecoded {
            nodeUpdateStartDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeUpdateStartDateDecoded, format: .dateTime)
        }
        nodeUpdateStartDate = nodeUpdateStartDateBuffer
        let nodeUpdateEndDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeUpdateEndDate)
        var nodeUpdateEndDateBuffer:ClientRuntime.Date? = nil
        if let nodeUpdateEndDateDecoded = nodeUpdateEndDateDecoded {
            nodeUpdateEndDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeUpdateEndDateDecoded, format: .dateTime)
        }
        nodeUpdateEndDate = nodeUpdateEndDateBuffer
        let nodeUpdateInitiatedByDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.NodeUpdateInitiatedBy.self, forKey: .nodeUpdateInitiatedBy)
        nodeUpdateInitiatedBy = nodeUpdateInitiatedByDecoded
        let nodeUpdateInitiatedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeUpdateInitiatedDate)
        var nodeUpdateInitiatedDateBuffer:ClientRuntime.Date? = nil
        if let nodeUpdateInitiatedDateDecoded = nodeUpdateInitiatedDateDecoded {
            nodeUpdateInitiatedDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeUpdateInitiatedDateDecoded, format: .dateTime)
        }
        nodeUpdateInitiatedDate = nodeUpdateInitiatedDateBuffer
        let nodeUpdateStatusModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeUpdateStatusModifiedDate)
        var nodeUpdateStatusModifiedDateBuffer:ClientRuntime.Date? = nil
        if let nodeUpdateStatusModifiedDateDecoded = nodeUpdateStatusModifiedDateDecoded {
            nodeUpdateStatusModifiedDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeUpdateStatusModifiedDateDecoded, format: .dateTime)
        }
        nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDateBuffer
    }
}

extension ElastiCacheClientTypes {
    /// The status of the service update on the node group member
    public struct NodeGroupMemberUpdateStatus: Swift.Equatable {
        /// The cache cluster ID
        var cacheClusterId: Swift.String?
        /// The node ID of the cache cluster
        var cacheNodeId: Swift.String?
        /// The deletion date of the node
        var nodeDeletionDate: ClientRuntime.Date?
        /// The end date of the update for a node
        var nodeUpdateEndDate: ClientRuntime.Date?
        /// Reflects whether the update was initiated by the customer or automatically applied
        var nodeUpdateInitiatedBy: ElastiCacheClientTypes.NodeUpdateInitiatedBy?
        /// The date when the update is triggered
        var nodeUpdateInitiatedDate: ClientRuntime.Date?
        /// The start date of the update for a node
        var nodeUpdateStartDate: ClientRuntime.Date?
        /// The update status of the node
        var nodeUpdateStatus: ElastiCacheClientTypes.NodeUpdateStatus?
        /// The date when the NodeUpdateStatus was last modified
        var nodeUpdateStatusModifiedDate: ClientRuntime.Date?

        public init (
            cacheClusterId: Swift.String? = nil,
            cacheNodeId: Swift.String? = nil,
            nodeDeletionDate: ClientRuntime.Date? = nil,
            nodeUpdateEndDate: ClientRuntime.Date? = nil,
            nodeUpdateInitiatedBy: ElastiCacheClientTypes.NodeUpdateInitiatedBy? = nil,
            nodeUpdateInitiatedDate: ClientRuntime.Date? = nil,
            nodeUpdateStartDate: ClientRuntime.Date? = nil,
            nodeUpdateStatus: ElastiCacheClientTypes.NodeUpdateStatus? = nil,
            nodeUpdateStatusModifiedDate: ClientRuntime.Date? = nil
        )
        {
            self.cacheClusterId = cacheClusterId
            self.cacheNodeId = cacheNodeId
            self.nodeDeletionDate = nodeDeletionDate
            self.nodeUpdateEndDate = nodeUpdateEndDate
            self.nodeUpdateInitiatedBy = nodeUpdateInitiatedBy
            self.nodeUpdateInitiatedDate = nodeUpdateInitiatedDate
            self.nodeUpdateStartDate = nodeUpdateStartDate
            self.nodeUpdateStatus = nodeUpdateStatus
            self.nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDate
        }
    }

}

extension NodeGroupNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<NodeGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The node group specified by the NodeGroupId parameter could not be found. Please verify that the node group exists and that you spelled the NodeGroupId value correctly.
public struct NodeGroupNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NodeGroupNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension NodeGroupNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.NodeGroupUpdateStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodeGroupId = "NodeGroupId"
        case nodeGroupMemberUpdateStatus = "NodeGroupMemberUpdateStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: ClientRuntime.Key("NodeGroupId"))
        }
        if let nodeGroupMemberUpdateStatus = nodeGroupMemberUpdateStatus {
            var nodeGroupMemberUpdateStatusContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NodeGroupMemberUpdateStatus"))
            for (index0, nodegroupmemberupdatestatus0) in nodeGroupMemberUpdateStatus.enumerated() {
                try nodeGroupMemberUpdateStatusContainer.encode(nodegroupmemberupdatestatus0, forKey: ClientRuntime.Key("NodeGroupMemberUpdateStatus.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        if containerValues.contains(.nodeGroupMemberUpdateStatus) {
            struct KeyVal0{struct NodeGroupMemberUpdateStatus{}}
            let nodeGroupMemberUpdateStatusWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeGroupMemberUpdateStatus>.CodingKeys.self, forKey: .nodeGroupMemberUpdateStatus)
            if let nodeGroupMemberUpdateStatusWrappedContainer = nodeGroupMemberUpdateStatusWrappedContainer {
                let nodeGroupMemberUpdateStatusContainer = try nodeGroupMemberUpdateStatusWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.NodeGroupMemberUpdateStatus].self, forKey: .member)
                var nodeGroupMemberUpdateStatusBuffer:[ElastiCacheClientTypes.NodeGroupMemberUpdateStatus]? = nil
                if let nodeGroupMemberUpdateStatusContainer = nodeGroupMemberUpdateStatusContainer {
                    nodeGroupMemberUpdateStatusBuffer = [ElastiCacheClientTypes.NodeGroupMemberUpdateStatus]()
                    for structureContainer0 in nodeGroupMemberUpdateStatusContainer {
                        nodeGroupMemberUpdateStatusBuffer?.append(structureContainer0)
                    }
                }
                nodeGroupMemberUpdateStatus = nodeGroupMemberUpdateStatusBuffer
            } else {
                nodeGroupMemberUpdateStatus = []
            }
        } else {
            nodeGroupMemberUpdateStatus = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// The status of the service update on the node group
    public struct NodeGroupUpdateStatus: Swift.Equatable {
        /// The ID of the node group
        var nodeGroupId: Swift.String?
        /// The status of the service update on the node group member
        var nodeGroupMemberUpdateStatus: [ElastiCacheClientTypes.NodeGroupMemberUpdateStatus]?

        public init (
            nodeGroupId: Swift.String? = nil,
            nodeGroupMemberUpdateStatus: [ElastiCacheClientTypes.NodeGroupMemberUpdateStatus]? = nil
        )
        {
            self.nodeGroupId = nodeGroupId
            self.nodeGroupMemberUpdateStatus = nodeGroupMemberUpdateStatus
        }
    }

}

extension NodeGroupsPerReplicationGroupQuotaExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<NodeGroupsPerReplicationGroupQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request cannot be processed because it would exceed the maximum allowed number of node groups (shards) in a single replication group. The default maximum is 90
public struct NodeGroupsPerReplicationGroupQuotaExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NodeGroupsPerReplicationGroupQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension NodeGroupsPerReplicationGroupQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NodeQuotaForClusterExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<NodeQuotaForClusterExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request cannot be processed because it would exceed the allowed number of cache nodes in a single cluster.
public struct NodeQuotaForClusterExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NodeQuotaForClusterExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension NodeQuotaForClusterExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NodeQuotaForCustomerExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<NodeQuotaForCustomerExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request cannot be processed because it would exceed the allowed number of cache nodes per customer.
public struct NodeQuotaForCustomerExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NodeQuotaForCustomerExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension NodeQuotaForCustomerExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.NodeSnapshot: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheClusterId = "CacheClusterId"
        case cacheNodeCreateTime = "CacheNodeCreateTime"
        case cacheNodeId = "CacheNodeId"
        case cacheSize = "CacheSize"
        case nodeGroupConfiguration = "NodeGroupConfiguration"
        case nodeGroupId = "NodeGroupId"
        case snapshotCreateTime = "SnapshotCreateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let cacheNodeCreateTime = cacheNodeCreateTime {
            try container.encode(ClientRuntime.TimestampWrapper(cacheNodeCreateTime, format: .dateTime), forKey: ClientRuntime.Key("cacheNodeCreateTime"))
        }
        if let cacheNodeId = cacheNodeId {
            try container.encode(cacheNodeId, forKey: ClientRuntime.Key("CacheNodeId"))
        }
        if let cacheSize = cacheSize {
            try container.encode(cacheSize, forKey: ClientRuntime.Key("CacheSize"))
        }
        if let nodeGroupConfiguration = nodeGroupConfiguration {
            try container.encode(nodeGroupConfiguration, forKey: ClientRuntime.Key("NodeGroupConfiguration"))
        }
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: ClientRuntime.Key("NodeGroupId"))
        }
        if let snapshotCreateTime = snapshotCreateTime {
            try container.encode(ClientRuntime.TimestampWrapper(snapshotCreateTime, format: .dateTime), forKey: ClientRuntime.Key("snapshotCreateTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        let cacheNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeId)
        cacheNodeId = cacheNodeIdDecoded
        let nodeGroupConfigurationDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.NodeGroupConfiguration.self, forKey: .nodeGroupConfiguration)
        nodeGroupConfiguration = nodeGroupConfigurationDecoded
        let cacheSizeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheSize)
        cacheSize = cacheSizeDecoded
        let cacheNodeCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeCreateTime)
        var cacheNodeCreateTimeBuffer:ClientRuntime.Date? = nil
        if let cacheNodeCreateTimeDecoded = cacheNodeCreateTimeDecoded {
            cacheNodeCreateTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(cacheNodeCreateTimeDecoded, format: .dateTime)
        }
        cacheNodeCreateTime = cacheNodeCreateTimeBuffer
        let snapshotCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotCreateTime)
        var snapshotCreateTimeBuffer:ClientRuntime.Date? = nil
        if let snapshotCreateTimeDecoded = snapshotCreateTimeDecoded {
            snapshotCreateTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(snapshotCreateTimeDecoded, format: .dateTime)
        }
        snapshotCreateTime = snapshotCreateTimeBuffer
    }
}

extension ElastiCacheClientTypes {
    /// Represents an individual cache node in a snapshot of a cluster.
    public struct NodeSnapshot: Swift.Equatable {
        /// A unique identifier for the source cluster.
        var cacheClusterId: Swift.String?
        /// The date and time when the cache node was created in the source cluster.
        var cacheNodeCreateTime: ClientRuntime.Date?
        /// The cache node identifier for the node in the source cluster.
        var cacheNodeId: Swift.String?
        /// The size of the cache on the source cache node.
        var cacheSize: Swift.String?
        /// The configuration for the source node group (shard).
        var nodeGroupConfiguration: ElastiCacheClientTypes.NodeGroupConfiguration?
        /// A unique identifier for the source node group (shard).
        var nodeGroupId: Swift.String?
        /// The date and time when the source node's metadata and cache data set was obtained for the snapshot.
        var snapshotCreateTime: ClientRuntime.Date?

        public init (
            cacheClusterId: Swift.String? = nil,
            cacheNodeCreateTime: ClientRuntime.Date? = nil,
            cacheNodeId: Swift.String? = nil,
            cacheSize: Swift.String? = nil,
            nodeGroupConfiguration: ElastiCacheClientTypes.NodeGroupConfiguration? = nil,
            nodeGroupId: Swift.String? = nil,
            snapshotCreateTime: ClientRuntime.Date? = nil
        )
        {
            self.cacheClusterId = cacheClusterId
            self.cacheNodeCreateTime = cacheNodeCreateTime
            self.cacheNodeId = cacheNodeId
            self.cacheSize = cacheSize
            self.nodeGroupConfiguration = nodeGroupConfiguration
            self.nodeGroupId = nodeGroupId
            self.snapshotCreateTime = snapshotCreateTime
        }
    }

}

extension ElastiCacheClientTypes {
    public enum NodeUpdateInitiatedBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case customer
        case system
        case sdkUnknown(Swift.String)

        public static var allCases: [NodeUpdateInitiatedBy] {
            return [
                .customer,
                .system,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .customer: return "customer"
            case .system: return "system"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NodeUpdateInitiatedBy(rawValue: rawValue) ?? NodeUpdateInitiatedBy.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes {
    public enum NodeUpdateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case inProgress
        case notApplied
        case stopped
        case stopping
        case waitingToStart
        case sdkUnknown(Swift.String)

        public static var allCases: [NodeUpdateStatus] {
            return [
                .complete,
                .inProgress,
                .notApplied,
                .stopped,
                .stopping,
                .waitingToStart,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "complete"
            case .inProgress: return "in-progress"
            case .notApplied: return "not-applied"
            case .stopped: return "stopped"
            case .stopping: return "stopping"
            case .waitingToStart: return "waiting-to-start"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NodeUpdateStatus(rawValue: rawValue) ?? NodeUpdateStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes.NotificationConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicArn = "TopicArn"
        case topicStatus = "TopicStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
        if let topicStatus = topicStatus {
            try container.encode(topicStatus, forKey: ClientRuntime.Key("TopicStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let topicStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicStatus)
        topicStatus = topicStatusDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Describes a notification topic and its status. Notification topics are used for publishing ElastiCache events to subscribers using Amazon Simple Notification Service (SNS).
    public struct NotificationConfiguration: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that identifies the topic.
        var topicArn: Swift.String?
        /// The current state of the topic.
        var topicStatus: Swift.String?

        public init (
            topicArn: Swift.String? = nil,
            topicStatus: Swift.String? = nil
        )
        {
            self.topicArn = topicArn
            self.topicStatus = topicStatus
        }
    }

}

extension ElastiCacheClientTypes {
    public enum OutpostMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case crossOutpost
        case singleOutpost
        case sdkUnknown(Swift.String)

        public static var allCases: [OutpostMode] {
            return [
                .crossOutpost,
                .singleOutpost,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .crossOutpost: return "cross-outpost"
            case .singleOutpost: return "single-outpost"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OutpostMode(rawValue: rawValue) ?? OutpostMode.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes.Parameter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValues = "AllowedValues"
        case changeType = "ChangeType"
        case dataType = "DataType"
        case description = "Description"
        case isModifiable = "IsModifiable"
        case minimumEngineVersion = "MinimumEngineVersion"
        case parameterName = "ParameterName"
        case parameterValue = "ParameterValue"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowedValues = allowedValues {
            try container.encode(allowedValues, forKey: ClientRuntime.Key("AllowedValues"))
        }
        if let changeType = changeType {
            try container.encode(changeType, forKey: ClientRuntime.Key("ChangeType"))
        }
        if let dataType = dataType {
            try container.encode(dataType, forKey: ClientRuntime.Key("DataType"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if isModifiable != false {
            try container.encode(isModifiable, forKey: ClientRuntime.Key("IsModifiable"))
        }
        if let minimumEngineVersion = minimumEngineVersion {
            try container.encode(minimumEngineVersion, forKey: ClientRuntime.Key("MinimumEngineVersion"))
        }
        if let parameterName = parameterName {
            try container.encode(parameterName, forKey: ClientRuntime.Key("ParameterName"))
        }
        if let parameterValue = parameterValue {
            try container.encode(parameterValue, forKey: ClientRuntime.Key("ParameterValue"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let parameterValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterValue)
        parameterValue = parameterValueDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataType)
        dataType = dataTypeDecoded
        let allowedValuesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allowedValues)
        allowedValues = allowedValuesDecoded
        let isModifiableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isModifiable)
        isModifiable = isModifiableDecoded
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        let changeTypeDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ChangeType.self, forKey: .changeType)
        changeType = changeTypeDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Describes an individual setting that controls some aspect of ElastiCache behavior.
    public struct Parameter: Swift.Equatable {
        /// The valid range of values for the parameter.
        var allowedValues: Swift.String?
        /// Indicates whether a change to the parameter is applied immediately or requires a reboot for the change to be applied. You can force a reboot or wait until the next maintenance window's reboot. For more information, see [Rebooting a Cluster](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html).
        var changeType: ElastiCacheClientTypes.ChangeType?
        /// The valid data type for the parameter.
        var dataType: Swift.String?
        /// A description of the parameter.
        var description: Swift.String?
        /// Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        var isModifiable: Swift.Bool
        /// The earliest cache engine version to which the parameter can apply.
        var minimumEngineVersion: Swift.String?
        /// The name of the parameter.
        var parameterName: Swift.String?
        /// The value of the parameter.
        var parameterValue: Swift.String?
        /// The source of the parameter.
        var source: Swift.String?

        public init (
            allowedValues: Swift.String? = nil,
            changeType: ElastiCacheClientTypes.ChangeType? = nil,
            dataType: Swift.String? = nil,
            description: Swift.String? = nil,
            isModifiable: Swift.Bool = false,
            minimumEngineVersion: Swift.String? = nil,
            parameterName: Swift.String? = nil,
            parameterValue: Swift.String? = nil,
            source: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.changeType = changeType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.parameterName = parameterName
            self.parameterValue = parameterValue
            self.source = source
        }
    }

}

extension ElastiCacheClientTypes.ParameterNameValue: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterName = "ParameterName"
        case parameterValue = "ParameterValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameterName = parameterName {
            try container.encode(parameterName, forKey: ClientRuntime.Key("ParameterName"))
        }
        if let parameterValue = parameterValue {
            try container.encode(parameterValue, forKey: ClientRuntime.Key("ParameterValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let parameterValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterValue)
        parameterValue = parameterValueDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Describes a name-value pair that is used to update the value of a parameter.
    public struct ParameterNameValue: Swift.Equatable {
        /// The name of the parameter.
        var parameterName: Swift.String?
        /// The value of the parameter.
        var parameterValue: Swift.String?

        public init (
            parameterName: Swift.String? = nil,
            parameterValue: Swift.String? = nil
        )
        {
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }
    }

}

extension ElastiCacheClientTypes {
    public enum PendingAutomaticFailoverStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [PendingAutomaticFailoverStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PendingAutomaticFailoverStatus(rawValue: rawValue) ?? PendingAutomaticFailoverStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes.PendingLogDeliveryConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationDetails = "DestinationDetails"
        case destinationType = "DestinationType"
        case logFormat = "LogFormat"
        case logType = "LogType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let destinationDetails = destinationDetails {
            try container.encode(destinationDetails, forKey: ClientRuntime.Key("DestinationDetails"))
        }
        if let destinationType = destinationType {
            try container.encode(destinationType, forKey: ClientRuntime.Key("DestinationType"))
        }
        if let logFormat = logFormat {
            try container.encode(logFormat, forKey: ClientRuntime.Key("LogFormat"))
        }
        if let logType = logType {
            try container.encode(logType, forKey: ClientRuntime.Key("LogType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logTypeDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.LogType.self, forKey: .logType)
        logType = logTypeDecoded
        let destinationTypeDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.DestinationType.self, forKey: .destinationType)
        destinationType = destinationTypeDecoded
        let destinationDetailsDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.DestinationDetails.self, forKey: .destinationDetails)
        destinationDetails = destinationDetailsDecoded
        let logFormatDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.LogFormat.self, forKey: .logFormat)
        logFormat = logFormatDecoded
    }
}

extension ElastiCacheClientTypes {
    /// The log delivery configurations being modified
    public struct PendingLogDeliveryConfiguration: Swift.Equatable {
        /// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
        var destinationDetails: ElastiCacheClientTypes.DestinationDetails?
        /// Returns the destination type, either CloudWatch Logs or Kinesis Data Firehose.
        var destinationType: ElastiCacheClientTypes.DestinationType?
        /// Returns the log format, either JSON or TEXT
        var logFormat: ElastiCacheClientTypes.LogFormat?
        /// Refers to [slow-log](https://redis.io/commands/slowlog).
        var logType: ElastiCacheClientTypes.LogType?

        public init (
            destinationDetails: ElastiCacheClientTypes.DestinationDetails? = nil,
            destinationType: ElastiCacheClientTypes.DestinationType? = nil,
            logFormat: ElastiCacheClientTypes.LogFormat? = nil,
            logType: ElastiCacheClientTypes.LogType? = nil
        )
        {
            self.destinationDetails = destinationDetails
            self.destinationType = destinationType
            self.logFormat = logFormat
            self.logType = logType
        }
    }

}

extension ElastiCacheClientTypes.PendingModifiedValues: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authTokenStatus = "AuthTokenStatus"
        case cacheNodeIdsToRemove = "CacheNodeIdsToRemove"
        case cacheNodeType = "CacheNodeType"
        case engineVersion = "EngineVersion"
        case logDeliveryConfigurations = "LogDeliveryConfigurations"
        case numCacheNodes = "NumCacheNodes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authTokenStatus = authTokenStatus {
            try container.encode(authTokenStatus, forKey: ClientRuntime.Key("AuthTokenStatus"))
        }
        if let cacheNodeIdsToRemove = cacheNodeIdsToRemove {
            var cacheNodeIdsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheNodeIdsToRemove"))
            for (index0, string0) in cacheNodeIdsToRemove.enumerated() {
                try cacheNodeIdsToRemoveContainer.encode(string0, forKey: ClientRuntime.Key("CacheNodeId.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogDeliveryConfigurations"))
            for (index0, pendinglogdeliveryconfiguration0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(pendinglogdeliveryconfiguration0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let numCacheNodes = numCacheNodes {
            try container.encode(numCacheNodes, forKey: ClientRuntime.Key("NumCacheNodes"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numCacheNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numCacheNodes)
        numCacheNodes = numCacheNodesDecoded
        if containerValues.contains(.cacheNodeIdsToRemove) {
            struct KeyVal0{struct CacheNodeId{}}
            let cacheNodeIdsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeId>.CodingKeys.self, forKey: .cacheNodeIdsToRemove)
            if let cacheNodeIdsToRemoveWrappedContainer = cacheNodeIdsToRemoveWrappedContainer {
                let cacheNodeIdsToRemoveContainer = try cacheNodeIdsToRemoveWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var cacheNodeIdsToRemoveBuffer:[Swift.String]? = nil
                if let cacheNodeIdsToRemoveContainer = cacheNodeIdsToRemoveContainer {
                    cacheNodeIdsToRemoveBuffer = [Swift.String]()
                    for stringContainer0 in cacheNodeIdsToRemoveContainer {
                        cacheNodeIdsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                cacheNodeIdsToRemove = cacheNodeIdsToRemoveBuffer
            } else {
                cacheNodeIdsToRemove = []
            }
        } else {
            cacheNodeIdsToRemove = nil
        }
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let authTokenStatusDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.AuthTokenUpdateStatus.self, forKey: .authTokenStatus)
        authTokenStatus = authTokenStatusDecoded
        if containerValues.contains(.logDeliveryConfigurations) {
            struct KeyVal0{struct member{}}
            let logDeliveryConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logDeliveryConfigurations)
            if let logDeliveryConfigurationsWrappedContainer = logDeliveryConfigurationsWrappedContainer {
                let logDeliveryConfigurationsContainer = try logDeliveryConfigurationsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.PendingLogDeliveryConfiguration].self, forKey: .member)
                var logDeliveryConfigurationsBuffer:[ElastiCacheClientTypes.PendingLogDeliveryConfiguration]? = nil
                if let logDeliveryConfigurationsContainer = logDeliveryConfigurationsContainer {
                    logDeliveryConfigurationsBuffer = [ElastiCacheClientTypes.PendingLogDeliveryConfiguration]()
                    for structureContainer0 in logDeliveryConfigurationsContainer {
                        logDeliveryConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                logDeliveryConfigurations = logDeliveryConfigurationsBuffer
            } else {
                logDeliveryConfigurations = []
            }
        } else {
            logDeliveryConfigurations = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// A group of settings that are applied to the cluster in the future, or that are currently being applied.
    public struct PendingModifiedValues: Swift.Equatable {
        /// The auth token status
        var authTokenStatus: ElastiCacheClientTypes.AuthTokenUpdateStatus?
        /// A list of cache node IDs that are being removed (or will be removed) from the cluster. A node ID is a 4-digit numeric identifier (0001, 0002, etc.).
        var cacheNodeIdsToRemove: [Swift.String]?
        /// The cache node type that this cluster or replication group is scaled to.
        var cacheNodeType: Swift.String?
        /// The new cache engine version that the cluster runs.
        var engineVersion: Swift.String?
        /// The log delivery configurations being modified
        var logDeliveryConfigurations: [ElastiCacheClientTypes.PendingLogDeliveryConfiguration]?
        /// The new number of cache nodes for the cluster. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.
        var numCacheNodes: Swift.Int?

        public init (
            authTokenStatus: ElastiCacheClientTypes.AuthTokenUpdateStatus? = nil,
            cacheNodeIdsToRemove: [Swift.String]? = nil,
            cacheNodeType: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            logDeliveryConfigurations: [ElastiCacheClientTypes.PendingLogDeliveryConfiguration]? = nil,
            numCacheNodes: Swift.Int? = nil
        )
        {
            self.authTokenStatus = authTokenStatus
            self.cacheNodeIdsToRemove = cacheNodeIdsToRemove
            self.cacheNodeType = cacheNodeType
            self.engineVersion = engineVersion
            self.logDeliveryConfigurations = logDeliveryConfigurations
            self.numCacheNodes = numCacheNodes
        }
    }

}

extension ElastiCacheClientTypes.ProcessedUpdateAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheClusterId = "CacheClusterId"
        case replicationGroupId = "ReplicationGroupId"
        case serviceUpdateName = "ServiceUpdateName"
        case updateActionStatus = "UpdateActionStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: ClientRuntime.Key("ServiceUpdateName"))
        }
        if let updateActionStatus = updateActionStatus {
            try container.encode(updateActionStatus, forKey: ClientRuntime.Key("UpdateActionStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let serviceUpdateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUpdateName)
        serviceUpdateName = serviceUpdateNameDecoded
        let updateActionStatusDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.UpdateActionStatus.self, forKey: .updateActionStatus)
        updateActionStatus = updateActionStatusDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Update action that has been processed for the corresponding apply/stop request
    public struct ProcessedUpdateAction: Swift.Equatable {
        /// The ID of the cache cluster
        var cacheClusterId: Swift.String?
        /// The ID of the replication group
        var replicationGroupId: Swift.String?
        /// The unique ID of the service update
        var serviceUpdateName: Swift.String?
        /// The status of the update action on the Redis cluster
        var updateActionStatus: ElastiCacheClientTypes.UpdateActionStatus?

        public init (
            cacheClusterId: Swift.String? = nil,
            replicationGroupId: Swift.String? = nil,
            serviceUpdateName: Swift.String? = nil,
            updateActionStatus: ElastiCacheClientTypes.UpdateActionStatus? = nil
        )
        {
            self.cacheClusterId = cacheClusterId
            self.replicationGroupId = replicationGroupId
            self.serviceUpdateName = serviceUpdateName
            self.updateActionStatus = updateActionStatus
        }
    }

}

extension PurchaseReservedCacheNodesOfferingInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheNodeCount = cacheNodeCount {
            try container.encode(cacheNodeCount, forKey: ClientRuntime.Key("CacheNodeCount"))
        }
        if let reservedCacheNodeId = reservedCacheNodeId {
            try container.encode(reservedCacheNodeId, forKey: ClientRuntime.Key("ReservedCacheNodeId"))
        }
        if let reservedCacheNodesOfferingId = reservedCacheNodesOfferingId {
            try container.encode(reservedCacheNodesOfferingId, forKey: ClientRuntime.Key("ReservedCacheNodesOfferingId"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("PurchaseReservedCacheNodesOffering", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension PurchaseReservedCacheNodesOfferingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a PurchaseReservedCacheNodesOffering operation.
public struct PurchaseReservedCacheNodesOfferingInput: Swift.Equatable {
    /// The number of cache node instances to reserve. Default: 1
    var cacheNodeCount: Swift.Int?
    /// A customer-specified identifier to track this reservation. The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation. Example: myreservationID
    var reservedCacheNodeId: Swift.String?
    /// The ID of the reserved cache node offering to purchase. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
    /// This member is required.
    var reservedCacheNodesOfferingId: Swift.String?
    /// A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    var tags: [ElastiCacheClientTypes.Tag]?

    public init (
        cacheNodeCount: Swift.Int? = nil,
        reservedCacheNodeId: Swift.String? = nil,
        reservedCacheNodesOfferingId: Swift.String? = nil,
        tags: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.cacheNodeCount = cacheNodeCount
        self.reservedCacheNodeId = reservedCacheNodeId
        self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
        self.tags = tags
    }
}

extension PurchaseReservedCacheNodesOfferingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PurchaseReservedCacheNodesOfferingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodeAlreadyExists" : self = .reservedCacheNodeAlreadyExistsFault(try ReservedCacheNodeAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodeQuotaExceeded" : self = .reservedCacheNodeQuotaExceededFault(try ReservedCacheNodeQuotaExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodesOfferingNotFound" : self = .reservedCacheNodesOfferingNotFoundFault(try ReservedCacheNodesOfferingNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagQuotaPerResourceExceeded" : self = .tagQuotaPerResourceExceeded(try TagQuotaPerResourceExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PurchaseReservedCacheNodesOfferingOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case reservedCacheNodeAlreadyExistsFault(ReservedCacheNodeAlreadyExistsFault)
    case reservedCacheNodeQuotaExceededFault(ReservedCacheNodeQuotaExceededFault)
    case reservedCacheNodesOfferingNotFoundFault(ReservedCacheNodesOfferingNotFoundFault)
    case tagQuotaPerResourceExceeded(TagQuotaPerResourceExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension PurchaseReservedCacheNodesOfferingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PurchaseReservedCacheNodesOfferingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.reservedCacheNode = output.reservedCacheNode
        } else {
            self.reservedCacheNode = nil
        }
    }
}

public struct PurchaseReservedCacheNodesOfferingOutputResponse: Swift.Equatable {
    /// Represents the output of a PurchaseReservedCacheNodesOffering operation.
    var reservedCacheNode: ElastiCacheClientTypes.ReservedCacheNode?

    public init (
        reservedCacheNode: ElastiCacheClientTypes.ReservedCacheNode? = nil
    )
    {
        self.reservedCacheNode = reservedCacheNode
    }
}

struct PurchaseReservedCacheNodesOfferingOutputResponseBody: Swift.Equatable {
    let reservedCacheNode: ElastiCacheClientTypes.ReservedCacheNode?
}

extension PurchaseReservedCacheNodesOfferingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reservedCacheNode = "ReservedCacheNode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("PurchaseReservedCacheNodesOfferingResult"))
        let reservedCacheNodeDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ReservedCacheNode.self, forKey: .reservedCacheNode)
        reservedCacheNode = reservedCacheNodeDecoded
    }
}

extension RebalanceSlotsInGlobalReplicationGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: ClientRuntime.Key("ApplyImmediately"))
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: ClientRuntime.Key("GlobalReplicationGroupId"))
        }
        try container.encode("RebalanceSlotsInGlobalReplicationGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension RebalanceSlotsInGlobalReplicationGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RebalanceSlotsInGlobalReplicationGroupInput: Swift.Equatable {
    /// If True, redistribution is applied immediately.
    /// This member is required.
    var applyImmediately: Swift.Bool
    /// The name of the Global datastore
    /// This member is required.
    var globalReplicationGroupId: Swift.String?

    public init (
        applyImmediately: Swift.Bool = false,
        globalReplicationGroupId: Swift.String? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.globalReplicationGroupId = globalReplicationGroupId
    }
}

extension RebalanceSlotsInGlobalReplicationGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RebalanceSlotsInGlobalReplicationGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GlobalReplicationGroupNotFoundFault" : self = .globalReplicationGroupNotFoundFault(try GlobalReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupState" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RebalanceSlotsInGlobalReplicationGroupOutputError: Swift.Error, Swift.Equatable {
    case globalReplicationGroupNotFoundFault(GlobalReplicationGroupNotFoundFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RebalanceSlotsInGlobalReplicationGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RebalanceSlotsInGlobalReplicationGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.globalReplicationGroup = output.globalReplicationGroup
        } else {
            self.globalReplicationGroup = nil
        }
    }
}

public struct RebalanceSlotsInGlobalReplicationGroupOutputResponse: Swift.Equatable {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    var globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?

    public init (
        globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup? = nil
    )
    {
        self.globalReplicationGroup = globalReplicationGroup
    }
}

struct RebalanceSlotsInGlobalReplicationGroupOutputResponseBody: Swift.Equatable {
    let globalReplicationGroup: ElastiCacheClientTypes.GlobalReplicationGroup?
}

extension RebalanceSlotsInGlobalReplicationGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalReplicationGroup = "GlobalReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RebalanceSlotsInGlobalReplicationGroupResult"))
        let globalReplicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.GlobalReplicationGroup.self, forKey: .globalReplicationGroup)
        globalReplicationGroup = globalReplicationGroupDecoded
    }
}

extension RebootCacheClusterInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let cacheNodeIdsToReboot = cacheNodeIdsToReboot {
            var cacheNodeIdsToRebootContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheNodeIdsToReboot"))
            for (index0, string0) in cacheNodeIdsToReboot.enumerated() {
                try cacheNodeIdsToRebootContainer.encode(string0, forKey: ClientRuntime.Key("CacheNodeId.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("RebootCacheCluster", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension RebootCacheClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a RebootCacheCluster operation.
public struct RebootCacheClusterInput: Swift.Equatable {
    /// The cluster identifier. This parameter is stored as a lowercase string.
    /// This member is required.
    var cacheClusterId: Swift.String?
    /// A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
    /// This member is required.
    var cacheNodeIdsToReboot: [Swift.String]?

    public init (
        cacheClusterId: Swift.String? = nil,
        cacheNodeIdsToReboot: [Swift.String]? = nil
    )
    {
        self.cacheClusterId = cacheClusterId
        self.cacheNodeIdsToReboot = cacheNodeIdsToReboot
    }
}

extension RebootCacheClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RebootCacheClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFound" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterState" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RebootCacheClusterOutputError: Swift.Error, Swift.Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RebootCacheClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RebootCacheClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheCluster = output.cacheCluster
        } else {
            self.cacheCluster = nil
        }
    }
}

public struct RebootCacheClusterOutputResponse: Swift.Equatable {
    /// Contains all of the attributes of a specific cluster.
    var cacheCluster: ElastiCacheClientTypes.CacheCluster?

    public init (
        cacheCluster: ElastiCacheClientTypes.CacheCluster? = nil
    )
    {
        self.cacheCluster = cacheCluster
    }
}

struct RebootCacheClusterOutputResponseBody: Swift.Equatable {
    let cacheCluster: ElastiCacheClientTypes.CacheCluster?
}

extension RebootCacheClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheCluster = "CacheCluster"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RebootCacheClusterResult"))
        let cacheClusterDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.CacheCluster.self, forKey: .cacheCluster)
        cacheCluster = cacheClusterDecoded
    }
}

extension ElastiCacheClientTypes.RecurringCharge: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recurringChargeAmount = "RecurringChargeAmount"
        case recurringChargeFrequency = "RecurringChargeFrequency"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if recurringChargeAmount != 0.0 {
            try container.encode(Swift.String(recurringChargeAmount), forKey: ClientRuntime.Key("RecurringChargeAmount"))
        }
        if let recurringChargeFrequency = recurringChargeFrequency {
            try container.encode(recurringChargeFrequency, forKey: ClientRuntime.Key("RecurringChargeFrequency"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recurringChargeAmountDecoded = try containerValues.decode(Swift.Double.self, forKey: .recurringChargeAmount)
        recurringChargeAmount = recurringChargeAmountDecoded
        let recurringChargeFrequencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recurringChargeFrequency)
        recurringChargeFrequency = recurringChargeFrequencyDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Contains the specific price and frequency of a recurring charges for a reserved cache node, or for a reserved cache node offering.
    public struct RecurringCharge: Swift.Equatable {
        /// The monetary amount of the recurring charge.
        var recurringChargeAmount: Swift.Double
        /// The frequency of the recurring charge.
        var recurringChargeFrequency: Swift.String?

        public init (
            recurringChargeAmount: Swift.Double = 0.0,
            recurringChargeFrequency: Swift.String? = nil
        )
        {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }
    }

}

extension ElastiCacheClientTypes.RegionalConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationGroupId = "ReplicationGroupId"
        case replicationGroupRegion = "ReplicationGroupRegion"
        case reshardingConfiguration = "ReshardingConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let replicationGroupRegion = replicationGroupRegion {
            try container.encode(replicationGroupRegion, forKey: ClientRuntime.Key("ReplicationGroupRegion"))
        }
        if let reshardingConfiguration = reshardingConfiguration {
            var reshardingConfigurationContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReshardingConfiguration"))
            for (index0, reshardingconfiguration0) in reshardingConfiguration.enumerated() {
                try reshardingConfigurationContainer.encode(reshardingconfiguration0, forKey: ClientRuntime.Key("ReshardingConfiguration.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let replicationGroupRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupRegion)
        replicationGroupRegion = replicationGroupRegionDecoded
        if containerValues.contains(.reshardingConfiguration) {
            struct KeyVal0{struct ReshardingConfiguration{}}
            let reshardingConfigurationWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReshardingConfiguration>.CodingKeys.self, forKey: .reshardingConfiguration)
            if let reshardingConfigurationWrappedContainer = reshardingConfigurationWrappedContainer {
                let reshardingConfigurationContainer = try reshardingConfigurationWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.ReshardingConfiguration].self, forKey: .member)
                var reshardingConfigurationBuffer:[ElastiCacheClientTypes.ReshardingConfiguration]? = nil
                if let reshardingConfigurationContainer = reshardingConfigurationContainer {
                    reshardingConfigurationBuffer = [ElastiCacheClientTypes.ReshardingConfiguration]()
                    for structureContainer0 in reshardingConfigurationContainer {
                        reshardingConfigurationBuffer?.append(structureContainer0)
                    }
                }
                reshardingConfiguration = reshardingConfigurationBuffer
            } else {
                reshardingConfiguration = []
            }
        } else {
            reshardingConfiguration = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// A list of the replication groups
    public struct RegionalConfiguration: Swift.Equatable {
        /// The name of the secondary cluster
        /// This member is required.
        var replicationGroupId: Swift.String?
        /// The Amazon region where the cluster is stored
        /// This member is required.
        var replicationGroupRegion: Swift.String?
        /// A list of PreferredAvailabilityZones objects that specifies the configuration of a node group in the resharded cluster.
        /// This member is required.
        var reshardingConfiguration: [ElastiCacheClientTypes.ReshardingConfiguration]?

        public init (
            replicationGroupId: Swift.String? = nil,
            replicationGroupRegion: Swift.String? = nil,
            reshardingConfiguration: [ElastiCacheClientTypes.ReshardingConfiguration]? = nil
        )
        {
            self.replicationGroupId = replicationGroupId
            self.replicationGroupRegion = replicationGroupRegion
            self.reshardingConfiguration = reshardingConfiguration
        }
    }

}

extension RemoveTagsFromResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceName = resourceName {
            try container.encode(resourceName, forKey: ClientRuntime.Key("ResourceName"))
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
            for (index0, string0) in tagKeys.enumerated() {
                try tagKeysContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("RemoveTagsFromResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension RemoveTagsFromResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a RemoveTagsFromResource operation.
public struct RemoveTagsFromResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. For more information about ARNs, see [Amazon Resource Names (ARNs) and Amazon Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    /// This member is required.
    var resourceName: Swift.String?
    /// A list of TagKeys identifying the tags you want removed from the named resource.
    /// This member is required.
    var tagKeys: [Swift.String]?

    public init (
        resourceName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceName = resourceName
        self.tagKeys = tagKeys
    }
}

extension RemoveTagsFromResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RemoveTagsFromResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheClusterNotFound" : self = .cacheClusterNotFoundFault(try CacheClusterNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheParameterGroupNotFound" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFound" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSubnetGroupNotFoundFault" : self = .cacheSubnetGroupNotFoundFault(try CacheSubnetGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidARN" : self = .invalidARNFault(try InvalidARNFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupState" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReservedCacheNodeNotFound" : self = .reservedCacheNodeNotFoundFault(try ReservedCacheNodeNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotNotFoundFault" : self = .snapshotNotFoundFault(try SnapshotNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagNotFound" : self = .tagNotFoundFault(try TagNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserGroupNotFound" : self = .userGroupNotFoundFault(try UserGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserNotFound" : self = .userNotFoundFault(try UserNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveTagsFromResourceOutputError: Swift.Error, Swift.Equatable {
    case cacheClusterNotFoundFault(CacheClusterNotFoundFault)
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case cacheSubnetGroupNotFoundFault(CacheSubnetGroupNotFoundFault)
    case invalidARNFault(InvalidARNFault)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case reservedCacheNodeNotFoundFault(ReservedCacheNodeNotFoundFault)
    case snapshotNotFoundFault(SnapshotNotFoundFault)
    case tagNotFoundFault(TagNotFoundFault)
    case userGroupNotFoundFault(UserGroupNotFoundFault)
    case userNotFoundFault(UserNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveTagsFromResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RemoveTagsFromResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tagList = output.tagList
        } else {
            self.tagList = nil
        }
    }
}

/// Represents the output from the AddTagsToResource, ListTagsForResource, and RemoveTagsFromResource operations.
public struct RemoveTagsFromResourceOutputResponse: Swift.Equatable {
    /// A list of tags as key-value pairs.
    var tagList: [ElastiCacheClientTypes.Tag]?

    public init (
        tagList: [ElastiCacheClientTypes.Tag]? = nil
    )
    {
        self.tagList = tagList
    }
}

struct RemoveTagsFromResourceOutputResponseBody: Swift.Equatable {
    let tagList: [ElastiCacheClientTypes.Tag]?
}

extension RemoveTagsFromResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagList = "TagList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RemoveTagsFromResourceResult"))
        if containerValues.contains(.tagList) {
            struct KeyVal0{struct Tag{}}
            let tagListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tagList)
            if let tagListWrappedContainer = tagListWrappedContainer {
                let tagListContainer = try tagListWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.Tag].self, forKey: .member)
                var tagListBuffer:[ElastiCacheClientTypes.Tag]? = nil
                if let tagListContainer = tagListContainer {
                    tagListBuffer = [ElastiCacheClientTypes.Tag]()
                    for structureContainer0 in tagListContainer {
                        tagListBuffer?.append(structureContainer0)
                    }
                }
                tagList = tagListBuffer
            } else {
                tagList = []
            }
        } else {
            tagList = nil
        }
    }
}

extension ElastiCacheClientTypes.ReplicationGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case atRestEncryptionEnabled = "AtRestEncryptionEnabled"
        case authTokenEnabled = "AuthTokenEnabled"
        case authTokenLastModifiedDate = "AuthTokenLastModifiedDate"
        case automaticFailover = "AutomaticFailover"
        case cacheNodeType = "CacheNodeType"
        case clusterEnabled = "ClusterEnabled"
        case configurationEndpoint = "ConfigurationEndpoint"
        case dataTiering = "DataTiering"
        case description = "Description"
        case globalReplicationGroupInfo = "GlobalReplicationGroupInfo"
        case kmsKeyId = "KmsKeyId"
        case logDeliveryConfigurations = "LogDeliveryConfigurations"
        case memberClusters = "MemberClusters"
        case memberClustersOutpostArns = "MemberClustersOutpostArns"
        case multiAZ = "MultiAZ"
        case nodeGroups = "NodeGroups"
        case pendingModifiedValues = "PendingModifiedValues"
        case replicationGroupCreateTime = "ReplicationGroupCreateTime"
        case replicationGroupId = "ReplicationGroupId"
        case snapshotRetentionLimit = "SnapshotRetentionLimit"
        case snapshotWindow = "SnapshotWindow"
        case snapshottingClusterId = "SnapshottingClusterId"
        case status = "Status"
        case transitEncryptionEnabled = "TransitEncryptionEnabled"
        case userGroupIds = "UserGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: ClientRuntime.Key("ARN"))
        }
        if let atRestEncryptionEnabled = atRestEncryptionEnabled {
            try container.encode(atRestEncryptionEnabled, forKey: ClientRuntime.Key("AtRestEncryptionEnabled"))
        }
        if let authTokenEnabled = authTokenEnabled {
            try container.encode(authTokenEnabled, forKey: ClientRuntime.Key("AuthTokenEnabled"))
        }
        if let authTokenLastModifiedDate = authTokenLastModifiedDate {
            try container.encode(ClientRuntime.TimestampWrapper(authTokenLastModifiedDate, format: .dateTime), forKey: ClientRuntime.Key("authTokenLastModifiedDate"))
        }
        if let automaticFailover = automaticFailover {
            try container.encode(automaticFailover, forKey: ClientRuntime.Key("AutomaticFailover"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let clusterEnabled = clusterEnabled {
            try container.encode(clusterEnabled, forKey: ClientRuntime.Key("ClusterEnabled"))
        }
        if let configurationEndpoint = configurationEndpoint {
            try container.encode(configurationEndpoint, forKey: ClientRuntime.Key("ConfigurationEndpoint"))
        }
        if let dataTiering = dataTiering {
            try container.encode(dataTiering, forKey: ClientRuntime.Key("DataTiering"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let globalReplicationGroupInfo = globalReplicationGroupInfo {
            try container.encode(globalReplicationGroupInfo, forKey: ClientRuntime.Key("GlobalReplicationGroupInfo"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogDeliveryConfigurations"))
            for (index0, logdeliveryconfiguration0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(logdeliveryconfiguration0, forKey: ClientRuntime.Key("LogDeliveryConfiguration.\(index0.advanced(by: 1))"))
            }
        }
        if let memberClusters = memberClusters {
            var memberClustersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MemberClusters"))
            for (index0, string0) in memberClusters.enumerated() {
                try memberClustersContainer.encode(string0, forKey: ClientRuntime.Key("ClusterId.\(index0.advanced(by: 1))"))
            }
        }
        if let memberClustersOutpostArns = memberClustersOutpostArns {
            var memberClustersOutpostArnsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MemberClustersOutpostArns"))
            for (index0, string0) in memberClustersOutpostArns.enumerated() {
                try memberClustersOutpostArnsContainer.encode(string0, forKey: ClientRuntime.Key("ReplicationGroupOutpostArn.\(index0.advanced(by: 1))"))
            }
        }
        if let multiAZ = multiAZ {
            try container.encode(multiAZ, forKey: ClientRuntime.Key("MultiAZ"))
        }
        if let nodeGroups = nodeGroups {
            var nodeGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NodeGroups"))
            for (index0, nodegroup0) in nodeGroups.enumerated() {
                try nodeGroupsContainer.encode(nodegroup0, forKey: ClientRuntime.Key("NodeGroup.\(index0.advanced(by: 1))"))
            }
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try container.encode(pendingModifiedValues, forKey: ClientRuntime.Key("PendingModifiedValues"))
        }
        if let replicationGroupCreateTime = replicationGroupCreateTime {
            try container.encode(ClientRuntime.TimestampWrapper(replicationGroupCreateTime, format: .dateTime), forKey: ClientRuntime.Key("replicationGroupCreateTime"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: ClientRuntime.Key("SnapshotRetentionLimit"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: ClientRuntime.Key("SnapshotWindow"))
        }
        if let snapshottingClusterId = snapshottingClusterId {
            try container.encode(snapshottingClusterId, forKey: ClientRuntime.Key("SnapshottingClusterId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let transitEncryptionEnabled = transitEncryptionEnabled {
            try container.encode(transitEncryptionEnabled, forKey: ClientRuntime.Key("TransitEncryptionEnabled"))
        }
        if let userGroupIds = userGroupIds {
            var userGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserGroupIds"))
            for (index0, usergroupid0) in userGroupIds.enumerated() {
                try userGroupIdsContainer.encode(usergroupid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let globalReplicationGroupInfoDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.GlobalReplicationGroupInfo.self, forKey: .globalReplicationGroupInfo)
        globalReplicationGroupInfo = globalReplicationGroupInfoDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ReplicationGroupPendingModifiedValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        if containerValues.contains(.memberClusters) {
            struct KeyVal0{struct ClusterId{}}
            let memberClustersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterId>.CodingKeys.self, forKey: .memberClusters)
            if let memberClustersWrappedContainer = memberClustersWrappedContainer {
                let memberClustersContainer = try memberClustersWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var memberClustersBuffer:[Swift.String]? = nil
                if let memberClustersContainer = memberClustersContainer {
                    memberClustersBuffer = [Swift.String]()
                    for stringContainer0 in memberClustersContainer {
                        memberClustersBuffer?.append(stringContainer0)
                    }
                }
                memberClusters = memberClustersBuffer
            } else {
                memberClusters = []
            }
        } else {
            memberClusters = nil
        }
        if containerValues.contains(.nodeGroups) {
            struct KeyVal0{struct NodeGroup{}}
            let nodeGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeGroup>.CodingKeys.self, forKey: .nodeGroups)
            if let nodeGroupsWrappedContainer = nodeGroupsWrappedContainer {
                let nodeGroupsContainer = try nodeGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.NodeGroup].self, forKey: .member)
                var nodeGroupsBuffer:[ElastiCacheClientTypes.NodeGroup]? = nil
                if let nodeGroupsContainer = nodeGroupsContainer {
                    nodeGroupsBuffer = [ElastiCacheClientTypes.NodeGroup]()
                    for structureContainer0 in nodeGroupsContainer {
                        nodeGroupsBuffer?.append(structureContainer0)
                    }
                }
                nodeGroups = nodeGroupsBuffer
            } else {
                nodeGroups = []
            }
        } else {
            nodeGroups = nil
        }
        let snapshottingClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshottingClusterId)
        snapshottingClusterId = snapshottingClusterIdDecoded
        let automaticFailoverDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.AutomaticFailoverStatus.self, forKey: .automaticFailover)
        automaticFailover = automaticFailoverDecoded
        let multiAZDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.MultiAZStatus.self, forKey: .multiAZ)
        multiAZ = multiAZDecoded
        let configurationEndpointDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Endpoint.self, forKey: .configurationEndpoint)
        configurationEndpoint = configurationEndpointDecoded
        let snapshotRetentionLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snapshotRetentionLimit)
        snapshotRetentionLimit = snapshotRetentionLimitDecoded
        let snapshotWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotWindow)
        snapshotWindow = snapshotWindowDecoded
        let clusterEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .clusterEnabled)
        clusterEnabled = clusterEnabledDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let authTokenEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .authTokenEnabled)
        authTokenEnabled = authTokenEnabledDecoded
        let authTokenLastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authTokenLastModifiedDate)
        var authTokenLastModifiedDateBuffer:ClientRuntime.Date? = nil
        if let authTokenLastModifiedDateDecoded = authTokenLastModifiedDateDecoded {
            authTokenLastModifiedDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(authTokenLastModifiedDateDecoded, format: .dateTime)
        }
        authTokenLastModifiedDate = authTokenLastModifiedDateBuffer
        let transitEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .transitEncryptionEnabled)
        transitEncryptionEnabled = transitEncryptionEnabledDecoded
        let atRestEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .atRestEncryptionEnabled)
        atRestEncryptionEnabled = atRestEncryptionEnabledDecoded
        if containerValues.contains(.memberClustersOutpostArns) {
            struct KeyVal0{struct ReplicationGroupOutpostArn{}}
            let memberClustersOutpostArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReplicationGroupOutpostArn>.CodingKeys.self, forKey: .memberClustersOutpostArns)
            if let memberClustersOutpostArnsWrappedContainer = memberClustersOutpostArnsWrappedContainer {
                let memberClustersOutpostArnsContainer = try memberClustersOutpostArnsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var memberClustersOutpostArnsBuffer:[Swift.String]? = nil
                if let memberClustersOutpostArnsContainer = memberClustersOutpostArnsContainer {
                    memberClustersOutpostArnsBuffer = [Swift.String]()
                    for stringContainer0 in memberClustersOutpostArnsContainer {
                        memberClustersOutpostArnsBuffer?.append(stringContainer0)
                    }
                }
                memberClustersOutpostArns = memberClustersOutpostArnsBuffer
            } else {
                memberClustersOutpostArns = []
            }
        } else {
            memberClustersOutpostArns = nil
        }
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        if containerValues.contains(.userGroupIds) {
            struct KeyVal0{struct member{}}
            let userGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIds)
            if let userGroupIdsWrappedContainer = userGroupIdsWrappedContainer {
                let userGroupIdsContainer = try userGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userGroupIdsBuffer:[Swift.String]? = nil
                if let userGroupIdsContainer = userGroupIdsContainer {
                    userGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in userGroupIdsContainer {
                        userGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                userGroupIds = userGroupIdsBuffer
            } else {
                userGroupIds = []
            }
        } else {
            userGroupIds = nil
        }
        if containerValues.contains(.logDeliveryConfigurations) {
            struct KeyVal0{struct LogDeliveryConfiguration{}}
            let logDeliveryConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.LogDeliveryConfiguration>.CodingKeys.self, forKey: .logDeliveryConfigurations)
            if let logDeliveryConfigurationsWrappedContainer = logDeliveryConfigurationsWrappedContainer {
                let logDeliveryConfigurationsContainer = try logDeliveryConfigurationsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.LogDeliveryConfiguration].self, forKey: .member)
                var logDeliveryConfigurationsBuffer:[ElastiCacheClientTypes.LogDeliveryConfiguration]? = nil
                if let logDeliveryConfigurationsContainer = logDeliveryConfigurationsContainer {
                    logDeliveryConfigurationsBuffer = [ElastiCacheClientTypes.LogDeliveryConfiguration]()
                    for structureContainer0 in logDeliveryConfigurationsContainer {
                        logDeliveryConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                logDeliveryConfigurations = logDeliveryConfigurationsBuffer
            } else {
                logDeliveryConfigurations = []
            }
        } else {
            logDeliveryConfigurations = nil
        }
        let replicationGroupCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupCreateTime)
        var replicationGroupCreateTimeBuffer:ClientRuntime.Date? = nil
        if let replicationGroupCreateTimeDecoded = replicationGroupCreateTimeDecoded {
            replicationGroupCreateTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(replicationGroupCreateTimeDecoded, format: .dateTime)
        }
        replicationGroupCreateTime = replicationGroupCreateTimeBuffer
        let dataTieringDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.DataTieringStatus.self, forKey: .dataTiering)
        dataTiering = dataTieringDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Contains all of the attributes of a specific Redis replication group.
    public struct ReplicationGroup: Swift.Equatable {
        /// The ARN (Amazon Resource Name) of the replication group.
        var aRN: Swift.String?
        /// A flag that enables encryption at-rest when set to true. You cannot modify the value of AtRestEncryptionEnabled after the cluster is created. To enable encryption at-rest on a cluster you must set AtRestEncryptionEnabled to true when you create a cluster. Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6, 4.x or later. Default: false
        var atRestEncryptionEnabled: Swift.Bool?
        /// A flag that enables using an AuthToken (password) when issuing Redis commands. Default: false
        var authTokenEnabled: Swift.Bool?
        /// The date the auth token was last modified
        var authTokenLastModifiedDate: ClientRuntime.Date?
        /// Indicates the status of automatic failover for this Redis replication group.
        var automaticFailover: ElastiCacheClientTypes.AutomaticFailoverStatus?
        /// The name of the compute and memory capacity node type for each node in the replication group.
        var cacheNodeType: Swift.String?
        /// A flag indicating whether or not this replication group is cluster enabled; i.e., whether its data can be partitioned across multiple shards (API/CLI: node groups). Valid values: true | false
        var clusterEnabled: Swift.Bool?
        /// The configuration endpoint for this replication group. Use the configuration endpoint to connect to this replication group.
        var configurationEndpoint: ElastiCacheClientTypes.Endpoint?
        /// Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see [Data tiering](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html).
        var dataTiering: ElastiCacheClientTypes.DataTieringStatus?
        /// The user supplied description of the replication group.
        var description: Swift.String?
        /// The name of the Global datastore and role of this replication group in the Global datastore.
        var globalReplicationGroupInfo: ElastiCacheClientTypes.GlobalReplicationGroupInfo?
        /// The ID of the KMS key used to encrypt the disk in the cluster.
        var kmsKeyId: Swift.String?
        /// Returns the destination, format and type of the logs.
        var logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfiguration]?
        /// The names of all the cache clusters that are part of this replication group.
        var memberClusters: [Swift.String]?
        /// The outpost ARNs of the replication group's member clusters.
        var memberClustersOutpostArns: [Swift.String]?
        /// A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see [Minimizing Downtime: Multi-AZ](http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html)
        var multiAZ: ElastiCacheClientTypes.MultiAZStatus?
        /// A list of node groups in this replication group. For Redis (cluster mode disabled) replication groups, this is a single-element list. For Redis (cluster mode enabled) replication groups, the list contains an entry for each node group (shard).
        var nodeGroups: [ElastiCacheClientTypes.NodeGroup]?
        /// A group of settings to be applied to the replication group, either immediately or during the next maintenance window.
        var pendingModifiedValues: ElastiCacheClientTypes.ReplicationGroupPendingModifiedValues?
        /// The date and time when the cluster was created.
        var replicationGroupCreateTime: ClientRuntime.Date?
        /// The identifier for the replication group.
        var replicationGroupId: Swift.String?
        /// The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
        var snapshotRetentionLimit: Swift.Int?
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). Example: 05:00-09:00 If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range. This parameter is only valid if the Engine parameter is redis.
        var snapshotWindow: Swift.String?
        /// The cluster ID that is used as the daily snapshot source for the replication group.
        var snapshottingClusterId: Swift.String?
        /// The current state of this replication group - creating, available, modifying, deleting, create-failed, snapshotting.
        var status: Swift.String?
        /// A flag that enables in-transit encryption when set to true. You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster. Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6, 4.x or later. Default: false
        var transitEncryptionEnabled: Swift.Bool?
        /// The ID of the user group associated to the replication group.
        var userGroupIds: [Swift.String]?

        public init (
            aRN: Swift.String? = nil,
            atRestEncryptionEnabled: Swift.Bool? = nil,
            authTokenEnabled: Swift.Bool? = nil,
            authTokenLastModifiedDate: ClientRuntime.Date? = nil,
            automaticFailover: ElastiCacheClientTypes.AutomaticFailoverStatus? = nil,
            cacheNodeType: Swift.String? = nil,
            clusterEnabled: Swift.Bool? = nil,
            configurationEndpoint: ElastiCacheClientTypes.Endpoint? = nil,
            dataTiering: ElastiCacheClientTypes.DataTieringStatus? = nil,
            description: Swift.String? = nil,
            globalReplicationGroupInfo: ElastiCacheClientTypes.GlobalReplicationGroupInfo? = nil,
            kmsKeyId: Swift.String? = nil,
            logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfiguration]? = nil,
            memberClusters: [Swift.String]? = nil,
            memberClustersOutpostArns: [Swift.String]? = nil,
            multiAZ: ElastiCacheClientTypes.MultiAZStatus? = nil,
            nodeGroups: [ElastiCacheClientTypes.NodeGroup]? = nil,
            pendingModifiedValues: ElastiCacheClientTypes.ReplicationGroupPendingModifiedValues? = nil,
            replicationGroupCreateTime: ClientRuntime.Date? = nil,
            replicationGroupId: Swift.String? = nil,
            snapshotRetentionLimit: Swift.Int? = nil,
            snapshotWindow: Swift.String? = nil,
            snapshottingClusterId: Swift.String? = nil,
            status: Swift.String? = nil,
            transitEncryptionEnabled: Swift.Bool? = nil,
            userGroupIds: [Swift.String]? = nil
        )
        {
            self.aRN = aRN
            self.atRestEncryptionEnabled = atRestEncryptionEnabled
            self.authTokenEnabled = authTokenEnabled
            self.authTokenLastModifiedDate = authTokenLastModifiedDate
            self.automaticFailover = automaticFailover
            self.cacheNodeType = cacheNodeType
            self.clusterEnabled = clusterEnabled
            self.configurationEndpoint = configurationEndpoint
            self.dataTiering = dataTiering
            self.description = description
            self.globalReplicationGroupInfo = globalReplicationGroupInfo
            self.kmsKeyId = kmsKeyId
            self.logDeliveryConfigurations = logDeliveryConfigurations
            self.memberClusters = memberClusters
            self.memberClustersOutpostArns = memberClustersOutpostArns
            self.multiAZ = multiAZ
            self.nodeGroups = nodeGroups
            self.pendingModifiedValues = pendingModifiedValues
            self.replicationGroupCreateTime = replicationGroupCreateTime
            self.replicationGroupId = replicationGroupId
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.snapshotWindow = snapshotWindow
            self.snapshottingClusterId = snapshottingClusterId
            self.status = status
            self.transitEncryptionEnabled = transitEncryptionEnabled
            self.userGroupIds = userGroupIds
        }
    }

}

extension ReplicationGroupAlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ReplicationGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified replication group already exists.
public struct ReplicationGroupAlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ReplicationGroupAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReplicationGroupAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReplicationGroupAlreadyUnderMigrationFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ReplicationGroupAlreadyUnderMigrationFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The targeted replication group is not available.
public struct ReplicationGroupAlreadyUnderMigrationFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ReplicationGroupAlreadyUnderMigrationFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReplicationGroupAlreadyUnderMigrationFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReplicationGroupNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ReplicationGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified replication group does not exist.
public struct ReplicationGroupNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ReplicationGroupNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReplicationGroupNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReplicationGroupNotUnderMigrationFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ReplicationGroupNotUnderMigrationFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The designated replication group is not available for data migration.
public struct ReplicationGroupNotUnderMigrationFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ReplicationGroupNotUnderMigrationFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReplicationGroupNotUnderMigrationFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.ReplicationGroupPendingModifiedValues: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authTokenStatus = "AuthTokenStatus"
        case automaticFailoverStatus = "AutomaticFailoverStatus"
        case logDeliveryConfigurations = "LogDeliveryConfigurations"
        case primaryClusterId = "PrimaryClusterId"
        case resharding = "Resharding"
        case userGroups = "UserGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authTokenStatus = authTokenStatus {
            try container.encode(authTokenStatus, forKey: ClientRuntime.Key("AuthTokenStatus"))
        }
        if let automaticFailoverStatus = automaticFailoverStatus {
            try container.encode(automaticFailoverStatus, forKey: ClientRuntime.Key("AutomaticFailoverStatus"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogDeliveryConfigurations"))
            for (index0, pendinglogdeliveryconfiguration0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(pendinglogdeliveryconfiguration0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let primaryClusterId = primaryClusterId {
            try container.encode(primaryClusterId, forKey: ClientRuntime.Key("PrimaryClusterId"))
        }
        if let resharding = resharding {
            try container.encode(resharding, forKey: ClientRuntime.Key("Resharding"))
        }
        if let userGroups = userGroups {
            try container.encode(userGroups, forKey: ClientRuntime.Key("UserGroups"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let primaryClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .primaryClusterId)
        primaryClusterId = primaryClusterIdDecoded
        let automaticFailoverStatusDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.PendingAutomaticFailoverStatus.self, forKey: .automaticFailoverStatus)
        automaticFailoverStatus = automaticFailoverStatusDecoded
        let reshardingDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ReshardingStatus.self, forKey: .resharding)
        resharding = reshardingDecoded
        let authTokenStatusDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.AuthTokenUpdateStatus.self, forKey: .authTokenStatus)
        authTokenStatus = authTokenStatusDecoded
        let userGroupsDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.UserGroupsUpdateStatus.self, forKey: .userGroups)
        userGroups = userGroupsDecoded
        if containerValues.contains(.logDeliveryConfigurations) {
            struct KeyVal0{struct member{}}
            let logDeliveryConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logDeliveryConfigurations)
            if let logDeliveryConfigurationsWrappedContainer = logDeliveryConfigurationsWrappedContainer {
                let logDeliveryConfigurationsContainer = try logDeliveryConfigurationsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.PendingLogDeliveryConfiguration].self, forKey: .member)
                var logDeliveryConfigurationsBuffer:[ElastiCacheClientTypes.PendingLogDeliveryConfiguration]? = nil
                if let logDeliveryConfigurationsContainer = logDeliveryConfigurationsContainer {
                    logDeliveryConfigurationsBuffer = [ElastiCacheClientTypes.PendingLogDeliveryConfiguration]()
                    for structureContainer0 in logDeliveryConfigurationsContainer {
                        logDeliveryConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                logDeliveryConfigurations = logDeliveryConfigurationsBuffer
            } else {
                logDeliveryConfigurations = []
            }
        } else {
            logDeliveryConfigurations = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// The settings to be applied to the Redis replication group, either immediately or during the next maintenance window.
    public struct ReplicationGroupPendingModifiedValues: Swift.Equatable {
        /// The auth token status
        var authTokenStatus: ElastiCacheClientTypes.AuthTokenUpdateStatus?
        /// Indicates the status of automatic failover for this Redis replication group.
        var automaticFailoverStatus: ElastiCacheClientTypes.PendingAutomaticFailoverStatus?
        /// The log delivery configurations being modified
        var logDeliveryConfigurations: [ElastiCacheClientTypes.PendingLogDeliveryConfiguration]?
        /// The primary cluster ID that is applied immediately (if --apply-immediately was specified), or during the next maintenance window.
        var primaryClusterId: Swift.String?
        /// The status of an online resharding operation.
        var resharding: ElastiCacheClientTypes.ReshardingStatus?
        /// The user group being modified.
        var userGroups: ElastiCacheClientTypes.UserGroupsUpdateStatus?

        public init (
            authTokenStatus: ElastiCacheClientTypes.AuthTokenUpdateStatus? = nil,
            automaticFailoverStatus: ElastiCacheClientTypes.PendingAutomaticFailoverStatus? = nil,
            logDeliveryConfigurations: [ElastiCacheClientTypes.PendingLogDeliveryConfiguration]? = nil,
            primaryClusterId: Swift.String? = nil,
            resharding: ElastiCacheClientTypes.ReshardingStatus? = nil,
            userGroups: ElastiCacheClientTypes.UserGroupsUpdateStatus? = nil
        )
        {
            self.authTokenStatus = authTokenStatus
            self.automaticFailoverStatus = automaticFailoverStatus
            self.logDeliveryConfigurations = logDeliveryConfigurations
            self.primaryClusterId = primaryClusterId
            self.resharding = resharding
            self.userGroups = userGroups
        }
    }

}

extension ElastiCacheClientTypes.ReservedCacheNode: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheNodeCount = "CacheNodeCount"
        case cacheNodeType = "CacheNodeType"
        case duration = "Duration"
        case fixedPrice = "FixedPrice"
        case offeringType = "OfferingType"
        case productDescription = "ProductDescription"
        case recurringCharges = "RecurringCharges"
        case reservationARN = "ReservationARN"
        case reservedCacheNodeId = "ReservedCacheNodeId"
        case reservedCacheNodesOfferingId = "ReservedCacheNodesOfferingId"
        case startTime = "StartTime"
        case state = "State"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if cacheNodeCount != 0 {
            try container.encode(cacheNodeCount, forKey: ClientRuntime.Key("CacheNodeCount"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if duration != 0 {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if fixedPrice != 0.0 {
            try container.encode(Swift.String(fixedPrice), forKey: ClientRuntime.Key("FixedPrice"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: ClientRuntime.Key("OfferingType"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: ClientRuntime.Key("ProductDescription"))
        }
        if let recurringCharges = recurringCharges {
            var recurringChargesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges"))
            for (index0, recurringcharge0) in recurringCharges.enumerated() {
                try recurringChargesContainer.encode(recurringcharge0, forKey: ClientRuntime.Key("RecurringCharge.\(index0.advanced(by: 1))"))
            }
        }
        if let reservationARN = reservationARN {
            try container.encode(reservationARN, forKey: ClientRuntime.Key("ReservationARN"))
        }
        if let reservedCacheNodeId = reservedCacheNodeId {
            try container.encode(reservedCacheNodeId, forKey: ClientRuntime.Key("ReservedCacheNodeId"))
        }
        if let reservedCacheNodesOfferingId = reservedCacheNodesOfferingId {
            try container.encode(reservedCacheNodesOfferingId, forKey: ClientRuntime.Key("ReservedCacheNodesOfferingId"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if usagePrice != 0.0 {
            try container.encode(Swift.String(usagePrice), forKey: ClientRuntime.Key("UsagePrice"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedCacheNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedCacheNodeId)
        reservedCacheNodeId = reservedCacheNodeIdDecoded
        let reservedCacheNodesOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedCacheNodesOfferingId)
        reservedCacheNodesOfferingId = reservedCacheNodesOfferingIdDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let durationDecoded = try containerValues.decode(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let fixedPriceDecoded = try containerValues.decode(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let usagePriceDecoded = try containerValues.decode(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let cacheNodeCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .cacheNodeCount)
        cacheNodeCount = cacheNodeCountDecoded
        let productDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productDescription)
        productDescription = productDescriptionDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        if containerValues.contains(.recurringCharges) {
            struct KeyVal0{struct RecurringCharge{}}
            let recurringChargesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RecurringCharge>.CodingKeys.self, forKey: .recurringCharges)
            if let recurringChargesWrappedContainer = recurringChargesWrappedContainer {
                let recurringChargesContainer = try recurringChargesWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.RecurringCharge].self, forKey: .member)
                var recurringChargesBuffer:[ElastiCacheClientTypes.RecurringCharge]? = nil
                if let recurringChargesContainer = recurringChargesContainer {
                    recurringChargesBuffer = [ElastiCacheClientTypes.RecurringCharge]()
                    for structureContainer0 in recurringChargesContainer {
                        recurringChargesBuffer?.append(structureContainer0)
                    }
                }
                recurringCharges = recurringChargesBuffer
            } else {
                recurringCharges = []
            }
        } else {
            recurringCharges = nil
        }
        let reservationARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservationARN)
        reservationARN = reservationARNDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Represents the output of a PurchaseReservedCacheNodesOffering operation.
    public struct ReservedCacheNode: Swift.Equatable {
        /// The number of cache nodes that have been reserved.
        var cacheNodeCount: Swift.Int
        /// The cache node type for the reserved cache nodes. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
        ///
        /// * General purpose:
        ///
        /// * Current generation: M6g node types: (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium
        ///
        ///
        /// T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
        ///
        /// * Previous generation: (not recommended) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
        ///
        ///
        ///
        ///
        /// * Compute optimized:
        ///
        /// * Previous generation: (not recommended) C1 node types: cache.c1.xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized with data tiering:
        ///
        /// * Current generation: R6gd node types (available only for Redis engine version 6.2 onward). cache.r6gd.xlarge, cache.r6gd.2xlarge, cache.r6gd.4xlarge, cache.r6gd.8xlarge, cache.r6gd.12xlarge, cache.r6gd.16xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized:
        ///
        /// * Current generation: R6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
        ///
        /// * Previous generation: (not recommended) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
        ///
        ///
        /// cache.r3.4xlarge, cache.r3.8xlarge
        ///
        ///
        ///
        ///
        ///
        /// Additional node type info
        ///
        /// * All current generation instance types are created in Amazon VPC by default.
        ///
        /// * Redis append-only files (AOF) are not supported for T1 or T2 instances.
        ///
        /// * Redis Multi-AZ with automatic failover is not supported on T1 instances.
        ///
        /// * Redis configuration variables appendonly and appendfsync are not supported on Redis version 2.8.22 and later.
        var cacheNodeType: Swift.String?
        /// The duration of the reservation in seconds.
        var duration: Swift.Int
        /// The fixed price charged for this reserved cache node.
        var fixedPrice: Swift.Double
        /// The offering type of this reserved cache node.
        var offeringType: Swift.String?
        /// The description of the reserved cache node.
        var productDescription: Swift.String?
        /// The recurring price charged to run this reserved cache node.
        var recurringCharges: [ElastiCacheClientTypes.RecurringCharge]?
        /// The Amazon Resource Name (ARN) of the reserved cache node. Example: arn:aws:elasticache:us-east-1:123456789012:reserved-instance:ri-2017-03-27-08-33-25-582
        var reservationARN: Swift.String?
        /// The unique identifier for the reservation.
        var reservedCacheNodeId: Swift.String?
        /// The offering identifier.
        var reservedCacheNodesOfferingId: Swift.String?
        /// The time the reservation started.
        var startTime: ClientRuntime.Date?
        /// The state of the reserved cache node.
        var state: Swift.String?
        /// The hourly price charged for this reserved cache node.
        var usagePrice: Swift.Double

        public init (
            cacheNodeCount: Swift.Int = 0,
            cacheNodeType: Swift.String? = nil,
            duration: Swift.Int = 0,
            fixedPrice: Swift.Double = 0.0,
            offeringType: Swift.String? = nil,
            productDescription: Swift.String? = nil,
            recurringCharges: [ElastiCacheClientTypes.RecurringCharge]? = nil,
            reservationARN: Swift.String? = nil,
            reservedCacheNodeId: Swift.String? = nil,
            reservedCacheNodesOfferingId: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            state: Swift.String? = nil,
            usagePrice: Swift.Double = 0.0
        )
        {
            self.cacheNodeCount = cacheNodeCount
            self.cacheNodeType = cacheNodeType
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservationARN = reservationARN
            self.reservedCacheNodeId = reservedCacheNodeId
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
            self.startTime = startTime
            self.state = state
            self.usagePrice = usagePrice
        }
    }

}

extension ReservedCacheNodeAlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ReservedCacheNodeAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You already have a reservation with the given identifier.
public struct ReservedCacheNodeAlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ReservedCacheNodeAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReservedCacheNodeAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReservedCacheNodeNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ReservedCacheNodeNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested reserved cache node was not found.
public struct ReservedCacheNodeNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ReservedCacheNodeNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReservedCacheNodeNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReservedCacheNodeQuotaExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ReservedCacheNodeQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request cannot be processed because it would exceed the user's cache node quota.
public struct ReservedCacheNodeQuotaExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ReservedCacheNodeQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReservedCacheNodeQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.ReservedCacheNodesOffering: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheNodeType = "CacheNodeType"
        case duration = "Duration"
        case fixedPrice = "FixedPrice"
        case offeringType = "OfferingType"
        case productDescription = "ProductDescription"
        case recurringCharges = "RecurringCharges"
        case reservedCacheNodesOfferingId = "ReservedCacheNodesOfferingId"
        case usagePrice = "UsagePrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if duration != 0 {
            try container.encode(duration, forKey: ClientRuntime.Key("Duration"))
        }
        if fixedPrice != 0.0 {
            try container.encode(Swift.String(fixedPrice), forKey: ClientRuntime.Key("FixedPrice"))
        }
        if let offeringType = offeringType {
            try container.encode(offeringType, forKey: ClientRuntime.Key("OfferingType"))
        }
        if let productDescription = productDescription {
            try container.encode(productDescription, forKey: ClientRuntime.Key("ProductDescription"))
        }
        if let recurringCharges = recurringCharges {
            var recurringChargesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RecurringCharges"))
            for (index0, recurringcharge0) in recurringCharges.enumerated() {
                try recurringChargesContainer.encode(recurringcharge0, forKey: ClientRuntime.Key("RecurringCharge.\(index0.advanced(by: 1))"))
            }
        }
        if let reservedCacheNodesOfferingId = reservedCacheNodesOfferingId {
            try container.encode(reservedCacheNodesOfferingId, forKey: ClientRuntime.Key("ReservedCacheNodesOfferingId"))
        }
        if usagePrice != 0.0 {
            try container.encode(Swift.String(usagePrice), forKey: ClientRuntime.Key("UsagePrice"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedCacheNodesOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedCacheNodesOfferingId)
        reservedCacheNodesOfferingId = reservedCacheNodesOfferingIdDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let durationDecoded = try containerValues.decode(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let fixedPriceDecoded = try containerValues.decode(Swift.Double.self, forKey: .fixedPrice)
        fixedPrice = fixedPriceDecoded
        let usagePriceDecoded = try containerValues.decode(Swift.Double.self, forKey: .usagePrice)
        usagePrice = usagePriceDecoded
        let productDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productDescription)
        productDescription = productDescriptionDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        if containerValues.contains(.recurringCharges) {
            struct KeyVal0{struct RecurringCharge{}}
            let recurringChargesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RecurringCharge>.CodingKeys.self, forKey: .recurringCharges)
            if let recurringChargesWrappedContainer = recurringChargesWrappedContainer {
                let recurringChargesContainer = try recurringChargesWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.RecurringCharge].self, forKey: .member)
                var recurringChargesBuffer:[ElastiCacheClientTypes.RecurringCharge]? = nil
                if let recurringChargesContainer = recurringChargesContainer {
                    recurringChargesBuffer = [ElastiCacheClientTypes.RecurringCharge]()
                    for structureContainer0 in recurringChargesContainer {
                        recurringChargesBuffer?.append(structureContainer0)
                    }
                }
                recurringCharges = recurringChargesBuffer
            } else {
                recurringCharges = []
            }
        } else {
            recurringCharges = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// Describes all of the attributes of a reserved cache node offering.
    public struct ReservedCacheNodesOffering: Swift.Equatable {
        /// The cache node type for the reserved cache node. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
        ///
        /// * General purpose:
        ///
        /// * Current generation: M6g node types: (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
        ///
        /// * Previous generation: (not recommended) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
        ///
        ///
        ///
        ///
        /// * Compute optimized:
        ///
        /// * Previous generation: (not recommended) C1 node types: cache.c1.xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized with data tiering:
        ///
        /// * Current generation: R6gd node types (available only for Redis engine version 6.2 onward). cache.r6gd.xlarge, cache.r6gd.2xlarge, cache.r6gd.4xlarge, cache.r6gd.8xlarge, cache.r6gd.12xlarge, cache.r6gd.16xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized:
        ///
        /// * Current generation: R6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
        ///
        /// * Previous generation: (not recommended) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
        ///
        ///
        /// cache.r3.4xlarge, cache.r3.8xlarge
        ///
        ///
        ///
        ///
        ///
        /// Additional node type info
        ///
        /// * All current generation instance types are created in Amazon VPC by default.
        ///
        /// * Redis append-only files (AOF) are not supported for T1 or T2 instances.
        ///
        /// * Redis Multi-AZ with automatic failover is not supported on T1 instances.
        ///
        /// * Redis configuration variables appendonly and appendfsync are not supported on Redis version 2.8.22 and later.
        var cacheNodeType: Swift.String?
        /// The duration of the offering. in seconds.
        var duration: Swift.Int
        /// The fixed price charged for this offering.
        var fixedPrice: Swift.Double
        /// The offering type.
        var offeringType: Swift.String?
        /// The cache engine used by the offering.
        var productDescription: Swift.String?
        /// The recurring price charged to run this reserved cache node.
        var recurringCharges: [ElastiCacheClientTypes.RecurringCharge]?
        /// A unique identifier for the reserved cache node offering.
        var reservedCacheNodesOfferingId: Swift.String?
        /// The hourly price charged for this offering.
        var usagePrice: Swift.Double

        public init (
            cacheNodeType: Swift.String? = nil,
            duration: Swift.Int = 0,
            fixedPrice: Swift.Double = 0.0,
            offeringType: Swift.String? = nil,
            productDescription: Swift.String? = nil,
            recurringCharges: [ElastiCacheClientTypes.RecurringCharge]? = nil,
            reservedCacheNodesOfferingId: Swift.String? = nil,
            usagePrice: Swift.Double = 0.0
        )
        {
            self.cacheNodeType = cacheNodeType
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
            self.usagePrice = usagePrice
        }
    }

}

extension ReservedCacheNodesOfferingNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ReservedCacheNodesOfferingNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested cache node offering does not exist.
public struct ReservedCacheNodesOfferingNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ReservedCacheNodesOfferingNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ReservedCacheNodesOfferingNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResetCacheParameterGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let parameterNameValues = parameterNameValues {
            var parameterNameValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterNameValues"))
            for (index0, parameternamevalue0) in parameterNameValues.enumerated() {
                try parameterNameValuesContainer.encode(parameternamevalue0, forKey: ClientRuntime.Key("ParameterNameValue.\(index0.advanced(by: 1))"))
            }
        }
        if resetAllParameters != false {
            try container.encode(resetAllParameters, forKey: ClientRuntime.Key("ResetAllParameters"))
        }
        try container.encode("ResetCacheParameterGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension ResetCacheParameterGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ResetCacheParameterGroup operation.
public struct ResetCacheParameterGroupInput: Swift.Equatable {
    /// The name of the cache parameter group to reset.
    /// This member is required.
    var cacheParameterGroupName: Swift.String?
    /// An array of parameter names to reset to their default values. If ResetAllParameters is true, do not use ParameterNameValues. If ResetAllParameters is false, you must specify the name of at least one parameter to reset.
    var parameterNameValues: [ElastiCacheClientTypes.ParameterNameValue]?
    /// If true, all parameters in the cache parameter group are reset to their default values. If false, only the parameters listed by ParameterNameValues are reset to their default values. Valid values: true | false
    var resetAllParameters: Swift.Bool

    public init (
        cacheParameterGroupName: Swift.String? = nil,
        parameterNameValues: [ElastiCacheClientTypes.ParameterNameValue]? = nil,
        resetAllParameters: Swift.Bool = false
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
        self.parameterNameValues = parameterNameValues
        self.resetAllParameters = resetAllParameters
    }
}

extension ResetCacheParameterGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ResetCacheParameterGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CacheParameterGroupNotFound" : self = .cacheParameterGroupNotFoundFault(try CacheParameterGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheParameterGroupState" : self = .invalidCacheParameterGroupStateFault(try InvalidCacheParameterGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGlobalReplicationGroupState" : self = .invalidGlobalReplicationGroupStateFault(try InvalidGlobalReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ResetCacheParameterGroupOutputError: Swift.Error, Swift.Equatable {
    case cacheParameterGroupNotFoundFault(CacheParameterGroupNotFoundFault)
    case invalidCacheParameterGroupStateFault(InvalidCacheParameterGroupStateFault)
    case invalidGlobalReplicationGroupStateFault(InvalidGlobalReplicationGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResetCacheParameterGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResetCacheParameterGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheParameterGroupName = output.cacheParameterGroupName
        } else {
            self.cacheParameterGroupName = nil
        }
    }
}

/// Represents the output of one of the following operations:
///
/// * ModifyCacheParameterGroup
///
/// * ResetCacheParameterGroup
public struct ResetCacheParameterGroupOutputResponse: Swift.Equatable {
    /// The name of the cache parameter group.
    var cacheParameterGroupName: Swift.String?

    public init (
        cacheParameterGroupName: Swift.String? = nil
    )
    {
        self.cacheParameterGroupName = cacheParameterGroupName
    }
}

struct ResetCacheParameterGroupOutputResponseBody: Swift.Equatable {
    let cacheParameterGroupName: Swift.String?
}

extension ResetCacheParameterGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheParameterGroupName = "CacheParameterGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ResetCacheParameterGroupResult"))
        let cacheParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheParameterGroupName)
        cacheParameterGroupName = cacheParameterGroupNameDecoded
    }
}

extension ElastiCacheClientTypes.ReshardingConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodeGroupId = "NodeGroupId"
        case preferredAvailabilityZones = "PreferredAvailabilityZones"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: ClientRuntime.Key("NodeGroupId"))
        }
        if let preferredAvailabilityZones = preferredAvailabilityZones {
            var preferredAvailabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PreferredAvailabilityZones"))
            for (index0, string0) in preferredAvailabilityZones.enumerated() {
                try preferredAvailabilityZonesContainer.encode(string0, forKey: ClientRuntime.Key("AvailabilityZone.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        if containerValues.contains(.preferredAvailabilityZones) {
            struct KeyVal0{struct AvailabilityZone{}}
            let preferredAvailabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AvailabilityZone>.CodingKeys.self, forKey: .preferredAvailabilityZones)
            if let preferredAvailabilityZonesWrappedContainer = preferredAvailabilityZonesWrappedContainer {
                let preferredAvailabilityZonesContainer = try preferredAvailabilityZonesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var preferredAvailabilityZonesBuffer:[Swift.String]? = nil
                if let preferredAvailabilityZonesContainer = preferredAvailabilityZonesContainer {
                    preferredAvailabilityZonesBuffer = [Swift.String]()
                    for stringContainer0 in preferredAvailabilityZonesContainer {
                        preferredAvailabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                preferredAvailabilityZones = preferredAvailabilityZonesBuffer
            } else {
                preferredAvailabilityZones = []
            }
        } else {
            preferredAvailabilityZones = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// A list of PreferredAvailabilityZones objects that specifies the configuration of a node group in the resharded cluster.
    public struct ReshardingConfiguration: Swift.Equatable {
        /// Either the ElastiCache for Redis supplied 4-digit id or a user supplied id for the node group these configuration values apply to.
        var nodeGroupId: Swift.String?
        /// A list of preferred availability zones for the nodes in this cluster.
        var preferredAvailabilityZones: [Swift.String]?

        public init (
            nodeGroupId: Swift.String? = nil,
            preferredAvailabilityZones: [Swift.String]? = nil
        )
        {
            self.nodeGroupId = nodeGroupId
            self.preferredAvailabilityZones = preferredAvailabilityZones
        }
    }

}

extension ElastiCacheClientTypes.ReshardingStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case slotMigration = "SlotMigration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let slotMigration = slotMigration {
            try container.encode(slotMigration, forKey: ClientRuntime.Key("SlotMigration"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let slotMigrationDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.SlotMigration.self, forKey: .slotMigration)
        slotMigration = slotMigrationDecoded
    }
}

extension ElastiCacheClientTypes {
    /// The status of an online resharding operation.
    public struct ReshardingStatus: Swift.Equatable {
        /// Represents the progress of an online resharding operation.
        var slotMigration: ElastiCacheClientTypes.SlotMigration?

        public init (
            slotMigration: ElastiCacheClientTypes.SlotMigration? = nil
        )
        {
            self.slotMigration = slotMigration
        }
    }

}

extension RevokeCacheSecurityGroupIngressInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheSecurityGroupName = cacheSecurityGroupName {
            try container.encode(cacheSecurityGroupName, forKey: ClientRuntime.Key("CacheSecurityGroupName"))
        }
        if let eC2SecurityGroupName = eC2SecurityGroupName {
            try container.encode(eC2SecurityGroupName, forKey: ClientRuntime.Key("EC2SecurityGroupName"))
        }
        if let eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId {
            try container.encode(eC2SecurityGroupOwnerId, forKey: ClientRuntime.Key("EC2SecurityGroupOwnerId"))
        }
        try container.encode("RevokeCacheSecurityGroupIngress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension RevokeCacheSecurityGroupIngressInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a RevokeCacheSecurityGroupIngress operation.
public struct RevokeCacheSecurityGroupIngressInput: Swift.Equatable {
    /// The name of the cache security group to revoke ingress from.
    /// This member is required.
    var cacheSecurityGroupName: Swift.String?
    /// The name of the Amazon EC2 security group to revoke access from.
    /// This member is required.
    var eC2SecurityGroupName: Swift.String?
    /// The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter.
    /// This member is required.
    var eC2SecurityGroupOwnerId: Swift.String?

    public init (
        cacheSecurityGroupName: Swift.String? = nil,
        eC2SecurityGroupName: Swift.String? = nil,
        eC2SecurityGroupOwnerId: Swift.String? = nil
    )
    {
        self.cacheSecurityGroupName = cacheSecurityGroupName
        self.eC2SecurityGroupName = eC2SecurityGroupName
        self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
    }
}

extension RevokeCacheSecurityGroupIngressOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RevokeCacheSecurityGroupIngressOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AuthorizationNotFound" : self = .authorizationNotFoundFault(try AuthorizationNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CacheSecurityGroupNotFound" : self = .cacheSecurityGroupNotFoundFault(try CacheSecurityGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheSecurityGroupState" : self = .invalidCacheSecurityGroupStateFault(try InvalidCacheSecurityGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RevokeCacheSecurityGroupIngressOutputError: Swift.Error, Swift.Equatable {
    case authorizationNotFoundFault(AuthorizationNotFoundFault)
    case cacheSecurityGroupNotFoundFault(CacheSecurityGroupNotFoundFault)
    case invalidCacheSecurityGroupStateFault(InvalidCacheSecurityGroupStateFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RevokeCacheSecurityGroupIngressOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RevokeCacheSecurityGroupIngressOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cacheSecurityGroup = output.cacheSecurityGroup
        } else {
            self.cacheSecurityGroup = nil
        }
    }
}

public struct RevokeCacheSecurityGroupIngressOutputResponse: Swift.Equatable {
    /// Represents the output of one of the following operations:
    ///
    /// * AuthorizeCacheSecurityGroupIngress
    ///
    /// * CreateCacheSecurityGroup
    ///
    /// * RevokeCacheSecurityGroupIngress
    var cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup?

    public init (
        cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup? = nil
    )
    {
        self.cacheSecurityGroup = cacheSecurityGroup
    }
}

struct RevokeCacheSecurityGroupIngressOutputResponseBody: Swift.Equatable {
    let cacheSecurityGroup: ElastiCacheClientTypes.CacheSecurityGroup?
}

extension RevokeCacheSecurityGroupIngressOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheSecurityGroup = "CacheSecurityGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RevokeCacheSecurityGroupIngressResult"))
        let cacheSecurityGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.CacheSecurityGroup.self, forKey: .cacheSecurityGroup)
        cacheSecurityGroup = cacheSecurityGroupDecoded
    }
}

extension ElastiCacheClientTypes.SecurityGroupMembership: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupId = "SecurityGroupId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let securityGroupId = securityGroupId {
            try container.encode(securityGroupId, forKey: ClientRuntime.Key("SecurityGroupId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityGroupId)
        securityGroupId = securityGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Represents a single cache security group and its status.
    public struct SecurityGroupMembership: Swift.Equatable {
        /// The identifier of the cache security group.
        var securityGroupId: Swift.String?
        /// The status of the cache security group membership. The status changes whenever a cache security group is modified, or when the cache security groups assigned to a cluster are modified.
        var status: Swift.String?

        public init (
            securityGroupId: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.securityGroupId = securityGroupId
            self.status = status
        }
    }

}

extension ServiceLinkedRoleNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ServiceLinkedRoleNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified service linked role (SLR) was not found.
public struct ServiceLinkedRoleNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceLinkedRoleNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceLinkedRoleNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.ServiceUpdate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoUpdateAfterRecommendedApplyByDate = "AutoUpdateAfterRecommendedApplyByDate"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case estimatedUpdateTime = "EstimatedUpdateTime"
        case serviceUpdateDescription = "ServiceUpdateDescription"
        case serviceUpdateEndDate = "ServiceUpdateEndDate"
        case serviceUpdateName = "ServiceUpdateName"
        case serviceUpdateRecommendedApplyByDate = "ServiceUpdateRecommendedApplyByDate"
        case serviceUpdateReleaseDate = "ServiceUpdateReleaseDate"
        case serviceUpdateSeverity = "ServiceUpdateSeverity"
        case serviceUpdateStatus = "ServiceUpdateStatus"
        case serviceUpdateType = "ServiceUpdateType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoUpdateAfterRecommendedApplyByDate = autoUpdateAfterRecommendedApplyByDate {
            try container.encode(autoUpdateAfterRecommendedApplyByDate, forKey: ClientRuntime.Key("AutoUpdateAfterRecommendedApplyByDate"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let estimatedUpdateTime = estimatedUpdateTime {
            try container.encode(estimatedUpdateTime, forKey: ClientRuntime.Key("EstimatedUpdateTime"))
        }
        if let serviceUpdateDescription = serviceUpdateDescription {
            try container.encode(serviceUpdateDescription, forKey: ClientRuntime.Key("ServiceUpdateDescription"))
        }
        if let serviceUpdateEndDate = serviceUpdateEndDate {
            try container.encode(ClientRuntime.TimestampWrapper(serviceUpdateEndDate, format: .dateTime), forKey: ClientRuntime.Key("serviceUpdateEndDate"))
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: ClientRuntime.Key("ServiceUpdateName"))
        }
        if let serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDate {
            try container.encode(ClientRuntime.TimestampWrapper(serviceUpdateRecommendedApplyByDate, format: .dateTime), forKey: ClientRuntime.Key("serviceUpdateRecommendedApplyByDate"))
        }
        if let serviceUpdateReleaseDate = serviceUpdateReleaseDate {
            try container.encode(ClientRuntime.TimestampWrapper(serviceUpdateReleaseDate, format: .dateTime), forKey: ClientRuntime.Key("serviceUpdateReleaseDate"))
        }
        if let serviceUpdateSeverity = serviceUpdateSeverity {
            try container.encode(serviceUpdateSeverity, forKey: ClientRuntime.Key("ServiceUpdateSeverity"))
        }
        if let serviceUpdateStatus = serviceUpdateStatus {
            try container.encode(serviceUpdateStatus, forKey: ClientRuntime.Key("ServiceUpdateStatus"))
        }
        if let serviceUpdateType = serviceUpdateType {
            try container.encode(serviceUpdateType, forKey: ClientRuntime.Key("ServiceUpdateType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceUpdateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUpdateName)
        serviceUpdateName = serviceUpdateNameDecoded
        let serviceUpdateReleaseDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUpdateReleaseDate)
        var serviceUpdateReleaseDateBuffer:ClientRuntime.Date? = nil
        if let serviceUpdateReleaseDateDecoded = serviceUpdateReleaseDateDecoded {
            serviceUpdateReleaseDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(serviceUpdateReleaseDateDecoded, format: .dateTime)
        }
        serviceUpdateReleaseDate = serviceUpdateReleaseDateBuffer
        let serviceUpdateEndDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUpdateEndDate)
        var serviceUpdateEndDateBuffer:ClientRuntime.Date? = nil
        if let serviceUpdateEndDateDecoded = serviceUpdateEndDateDecoded {
            serviceUpdateEndDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(serviceUpdateEndDateDecoded, format: .dateTime)
        }
        serviceUpdateEndDate = serviceUpdateEndDateBuffer
        let serviceUpdateSeverityDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ServiceUpdateSeverity.self, forKey: .serviceUpdateSeverity)
        serviceUpdateSeverity = serviceUpdateSeverityDecoded
        let serviceUpdateRecommendedApplyByDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUpdateRecommendedApplyByDate)
        var serviceUpdateRecommendedApplyByDateBuffer:ClientRuntime.Date? = nil
        if let serviceUpdateRecommendedApplyByDateDecoded = serviceUpdateRecommendedApplyByDateDecoded {
            serviceUpdateRecommendedApplyByDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(serviceUpdateRecommendedApplyByDateDecoded, format: .dateTime)
        }
        serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDateBuffer
        let serviceUpdateStatusDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ServiceUpdateStatus.self, forKey: .serviceUpdateStatus)
        serviceUpdateStatus = serviceUpdateStatusDecoded
        let serviceUpdateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUpdateDescription)
        serviceUpdateDescription = serviceUpdateDescriptionDecoded
        let serviceUpdateTypeDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ServiceUpdateType.self, forKey: .serviceUpdateType)
        serviceUpdateType = serviceUpdateTypeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let autoUpdateAfterRecommendedApplyByDateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoUpdateAfterRecommendedApplyByDate)
        autoUpdateAfterRecommendedApplyByDate = autoUpdateAfterRecommendedApplyByDateDecoded
        let estimatedUpdateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedUpdateTime)
        estimatedUpdateTime = estimatedUpdateTimeDecoded
    }
}

extension ElastiCacheClientTypes {
    /// An update that you can apply to your Redis clusters.
    public struct ServiceUpdate: Swift.Equatable {
        /// Indicates whether the service update will be automatically applied once the recommended apply-by date has expired.
        var autoUpdateAfterRecommendedApplyByDate: Swift.Bool?
        /// The Elasticache engine to which the update applies. Either Redis or Memcached
        var engine: Swift.String?
        /// The Elasticache engine version to which the update applies. Either Redis or Memcached engine version
        var engineVersion: Swift.String?
        /// The estimated length of time the service update will take
        var estimatedUpdateTime: Swift.String?
        /// Provides details of the service update
        var serviceUpdateDescription: Swift.String?
        /// The date after which the service update is no longer available
        var serviceUpdateEndDate: ClientRuntime.Date?
        /// The unique ID of the service update
        var serviceUpdateName: Swift.String?
        /// The recommendend date to apply the service update in order to ensure compliance. For information on compliance, see [Self-Service Security Updates for Compliance](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/elasticache-compliance.html#elasticache-compliance-self-service).
        var serviceUpdateRecommendedApplyByDate: ClientRuntime.Date?
        /// The date when the service update is initially available
        var serviceUpdateReleaseDate: ClientRuntime.Date?
        /// The severity of the service update
        var serviceUpdateSeverity: ElastiCacheClientTypes.ServiceUpdateSeverity?
        /// The status of the service update
        var serviceUpdateStatus: ElastiCacheClientTypes.ServiceUpdateStatus?
        /// Reflects the nature of the service update
        var serviceUpdateType: ElastiCacheClientTypes.ServiceUpdateType?

        public init (
            autoUpdateAfterRecommendedApplyByDate: Swift.Bool? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            estimatedUpdateTime: Swift.String? = nil,
            serviceUpdateDescription: Swift.String? = nil,
            serviceUpdateEndDate: ClientRuntime.Date? = nil,
            serviceUpdateName: Swift.String? = nil,
            serviceUpdateRecommendedApplyByDate: ClientRuntime.Date? = nil,
            serviceUpdateReleaseDate: ClientRuntime.Date? = nil,
            serviceUpdateSeverity: ElastiCacheClientTypes.ServiceUpdateSeverity? = nil,
            serviceUpdateStatus: ElastiCacheClientTypes.ServiceUpdateStatus? = nil,
            serviceUpdateType: ElastiCacheClientTypes.ServiceUpdateType? = nil
        )
        {
            self.autoUpdateAfterRecommendedApplyByDate = autoUpdateAfterRecommendedApplyByDate
            self.engine = engine
            self.engineVersion = engineVersion
            self.estimatedUpdateTime = estimatedUpdateTime
            self.serviceUpdateDescription = serviceUpdateDescription
            self.serviceUpdateEndDate = serviceUpdateEndDate
            self.serviceUpdateName = serviceUpdateName
            self.serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDate
            self.serviceUpdateReleaseDate = serviceUpdateReleaseDate
            self.serviceUpdateSeverity = serviceUpdateSeverity
            self.serviceUpdateStatus = serviceUpdateStatus
            self.serviceUpdateType = serviceUpdateType
        }
    }

}

extension ServiceUpdateNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ServiceUpdateNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service update doesn't exist
public struct ServiceUpdateNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceUpdateNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceUpdateNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes {
    public enum ServiceUpdateSeverity: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case critical
        case important
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceUpdateSeverity] {
            return [
                .critical,
                .important,
                .low,
                .medium,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .critical: return "critical"
            case .important: return "important"
            case .low: return "low"
            case .medium: return "medium"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServiceUpdateSeverity(rawValue: rawValue) ?? ServiceUpdateSeverity.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes {
    public enum ServiceUpdateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case cancelled
        case expired
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceUpdateStatus] {
            return [
                .available,
                .cancelled,
                .expired,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .cancelled: return "cancelled"
            case .expired: return "expired"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServiceUpdateStatus(rawValue: rawValue) ?? ServiceUpdateStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes {
    public enum ServiceUpdateType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case securityUpdate
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceUpdateType] {
            return [
                .securityUpdate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .securityUpdate: return "security-update"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServiceUpdateType(rawValue: rawValue) ?? ServiceUpdateType.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes {
    public enum SlaMet: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case na
        case no
        case yes
        case sdkUnknown(Swift.String)

        public static var allCases: [SlaMet] {
            return [
                .na,
                .no,
                .yes,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .na: return "n/a"
            case .no: return "no"
            case .yes: return "yes"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SlaMet(rawValue: rawValue) ?? SlaMet.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes.SlotMigration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case progressPercentage = "ProgressPercentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if progressPercentage != 0.0 {
            try container.encode(Swift.String(progressPercentage), forKey: ClientRuntime.Key("ProgressPercentage"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let progressPercentageDecoded = try containerValues.decode(Swift.Double.self, forKey: .progressPercentage)
        progressPercentage = progressPercentageDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Represents the progress of an online resharding operation.
    public struct SlotMigration: Swift.Equatable {
        /// The percentage of the slot migration that is complete.
        var progressPercentage: Swift.Double

        public init (
            progressPercentage: Swift.Double = 0.0
        )
        {
            self.progressPercentage = progressPercentage
        }
    }

}

extension ElastiCacheClientTypes.Snapshot: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case automaticFailover = "AutomaticFailover"
        case cacheClusterCreateTime = "CacheClusterCreateTime"
        case cacheClusterId = "CacheClusterId"
        case cacheNodeType = "CacheNodeType"
        case cacheParameterGroupName = "CacheParameterGroupName"
        case cacheSubnetGroupName = "CacheSubnetGroupName"
        case dataTiering = "DataTiering"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case kmsKeyId = "KmsKeyId"
        case nodeSnapshots = "NodeSnapshots"
        case numCacheNodes = "NumCacheNodes"
        case numNodeGroups = "NumNodeGroups"
        case port = "Port"
        case preferredAvailabilityZone = "PreferredAvailabilityZone"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case preferredOutpostArn = "PreferredOutpostArn"
        case replicationGroupDescription = "ReplicationGroupDescription"
        case replicationGroupId = "ReplicationGroupId"
        case snapshotName = "SnapshotName"
        case snapshotRetentionLimit = "SnapshotRetentionLimit"
        case snapshotSource = "SnapshotSource"
        case snapshotStatus = "SnapshotStatus"
        case snapshotWindow = "SnapshotWindow"
        case topicArn = "TopicArn"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: ClientRuntime.Key("ARN"))
        }
        if autoMinorVersionUpgrade != false {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let automaticFailover = automaticFailover {
            try container.encode(automaticFailover, forKey: ClientRuntime.Key("AutomaticFailover"))
        }
        if let cacheClusterCreateTime = cacheClusterCreateTime {
            try container.encode(ClientRuntime.TimestampWrapper(cacheClusterCreateTime, format: .dateTime), forKey: ClientRuntime.Key("cacheClusterCreateTime"))
        }
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: ClientRuntime.Key("CacheSubnetGroupName"))
        }
        if let dataTiering = dataTiering {
            try container.encode(dataTiering, forKey: ClientRuntime.Key("DataTiering"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let nodeSnapshots = nodeSnapshots {
            var nodeSnapshotsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NodeSnapshots"))
            for (index0, nodesnapshot0) in nodeSnapshots.enumerated() {
                try nodeSnapshotsContainer.encode(nodesnapshot0, forKey: ClientRuntime.Key("NodeSnapshot.\(index0.advanced(by: 1))"))
            }
        }
        if let numCacheNodes = numCacheNodes {
            try container.encode(numCacheNodes, forKey: ClientRuntime.Key("NumCacheNodes"))
        }
        if let numNodeGroups = numNodeGroups {
            try container.encode(numNodeGroups, forKey: ClientRuntime.Key("NumNodeGroups"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredAvailabilityZone = preferredAvailabilityZone {
            try container.encode(preferredAvailabilityZone, forKey: ClientRuntime.Key("PreferredAvailabilityZone"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let preferredOutpostArn = preferredOutpostArn {
            try container.encode(preferredOutpostArn, forKey: ClientRuntime.Key("PreferredOutpostArn"))
        }
        if let replicationGroupDescription = replicationGroupDescription {
            try container.encode(replicationGroupDescription, forKey: ClientRuntime.Key("ReplicationGroupDescription"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let snapshotName = snapshotName {
            try container.encode(snapshotName, forKey: ClientRuntime.Key("SnapshotName"))
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: ClientRuntime.Key("SnapshotRetentionLimit"))
        }
        if let snapshotSource = snapshotSource {
            try container.encode(snapshotSource, forKey: ClientRuntime.Key("SnapshotSource"))
        }
        if let snapshotStatus = snapshotStatus {
            try container.encode(snapshotStatus, forKey: ClientRuntime.Key("SnapshotStatus"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: ClientRuntime.Key("SnapshotWindow"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotName)
        snapshotName = snapshotNameDecoded
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let replicationGroupDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupDescription)
        replicationGroupDescription = replicationGroupDescriptionDecoded
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let snapshotStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotStatus)
        snapshotStatus = snapshotStatusDecoded
        let snapshotSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotSource)
        snapshotSource = snapshotSourceDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let numCacheNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numCacheNodes)
        numCacheNodes = numCacheNodesDecoded
        let preferredAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredAvailabilityZone)
        preferredAvailabilityZone = preferredAvailabilityZoneDecoded
        let preferredOutpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredOutpostArn)
        preferredOutpostArn = preferredOutpostArnDecoded
        let cacheClusterCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterCreateTime)
        var cacheClusterCreateTimeBuffer:ClientRuntime.Date? = nil
        if let cacheClusterCreateTimeDecoded = cacheClusterCreateTimeDecoded {
            cacheClusterCreateTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(cacheClusterCreateTimeDecoded, format: .dateTime)
        }
        cacheClusterCreateTime = cacheClusterCreateTimeBuffer
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let cacheParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheParameterGroupName)
        cacheParameterGroupName = cacheParameterGroupNameDecoded
        let cacheSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheSubnetGroupName)
        cacheSubnetGroupName = cacheSubnetGroupNameDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let autoMinorVersionUpgradeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoMinorVersionUpgrade)
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
        let snapshotRetentionLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snapshotRetentionLimit)
        snapshotRetentionLimit = snapshotRetentionLimitDecoded
        let snapshotWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotWindow)
        snapshotWindow = snapshotWindowDecoded
        let numNodeGroupsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numNodeGroups)
        numNodeGroups = numNodeGroupsDecoded
        let automaticFailoverDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.AutomaticFailoverStatus.self, forKey: .automaticFailover)
        automaticFailover = automaticFailoverDecoded
        if containerValues.contains(.nodeSnapshots) {
            struct KeyVal0{struct NodeSnapshot{}}
            let nodeSnapshotsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeSnapshot>.CodingKeys.self, forKey: .nodeSnapshots)
            if let nodeSnapshotsWrappedContainer = nodeSnapshotsWrappedContainer {
                let nodeSnapshotsContainer = try nodeSnapshotsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.NodeSnapshot].self, forKey: .member)
                var nodeSnapshotsBuffer:[ElastiCacheClientTypes.NodeSnapshot]? = nil
                if let nodeSnapshotsContainer = nodeSnapshotsContainer {
                    nodeSnapshotsBuffer = [ElastiCacheClientTypes.NodeSnapshot]()
                    for structureContainer0 in nodeSnapshotsContainer {
                        nodeSnapshotsBuffer?.append(structureContainer0)
                    }
                }
                nodeSnapshots = nodeSnapshotsBuffer
            } else {
                nodeSnapshots = []
            }
        } else {
            nodeSnapshots = nil
        }
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let dataTieringDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.DataTieringStatus.self, forKey: .dataTiering)
        dataTiering = dataTieringDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Represents a copy of an entire Redis cluster as of the time when the snapshot was taken.
    public struct Snapshot: Swift.Equatable {
        /// The ARN (Amazon Resource Name) of the snapshot.
        var aRN: Swift.String?
        ///  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
        var autoMinorVersionUpgrade: Swift.Bool
        /// Indicates the status of automatic failover for the source Redis replication group.
        var automaticFailover: ElastiCacheClientTypes.AutomaticFailoverStatus?
        /// The date and time when the source cluster was created.
        var cacheClusterCreateTime: ClientRuntime.Date?
        /// The user-supplied identifier of the source cluster.
        var cacheClusterId: Swift.String?
        /// The name of the compute and memory capacity node type for the source cluster. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
        ///
        /// * General purpose:
        ///
        /// * Current generation: M6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
        ///
        /// * Previous generation: (not recommended) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
        ///
        ///
        ///
        ///
        /// * Compute optimized:
        ///
        /// * Previous generation: (not recommended) C1 node types: cache.c1.xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized with data tiering:
        ///
        /// * Current generation: R6gd node types (available only for Redis engine version 6.2 onward). cache.r6gd.xlarge, cache.r6gd.2xlarge, cache.r6gd.4xlarge, cache.r6gd.8xlarge, cache.r6gd.12xlarge, cache.r6gd.16xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized:
        ///
        /// * Current generation: R6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
        ///
        /// * Previous generation: (not recommended) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
        ///
        ///
        /// cache.r3.4xlarge, cache.r3.8xlarge
        ///
        ///
        ///
        ///
        ///
        /// Additional node type info
        ///
        /// * All current generation instance types are created in Amazon VPC by default.
        ///
        /// * Redis append-only files (AOF) are not supported for T1 or T2 instances.
        ///
        /// * Redis Multi-AZ with automatic failover is not supported on T1 instances.
        ///
        /// * Redis configuration variables appendonly and appendfsync are not supported on Redis version 2.8.22 and later.
        var cacheNodeType: Swift.String?
        /// The cache parameter group that is associated with the source cluster.
        var cacheParameterGroupName: Swift.String?
        /// The name of the cache subnet group associated with the source cluster.
        var cacheSubnetGroupName: Swift.String?
        /// Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see [Data tiering](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html).
        var dataTiering: ElastiCacheClientTypes.DataTieringStatus?
        /// The name of the cache engine (memcached or redis) used by the source cluster.
        var engine: Swift.String?
        /// The version of the cache engine version that is used by the source cluster.
        var engineVersion: Swift.String?
        /// The ID of the KMS key used to encrypt the snapshot.
        var kmsKeyId: Swift.String?
        /// A list of the cache nodes in the source cluster.
        var nodeSnapshots: [ElastiCacheClientTypes.NodeSnapshot]?
        /// The number of cache nodes in the source cluster. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.
        var numCacheNodes: Swift.Int?
        /// The number of node groups (shards) in this snapshot. When restoring from a snapshot, the number of node groups (shards) in the snapshot and in the restored replication group must be the same.
        var numNodeGroups: Swift.Int?
        /// The port number used by each cache nodes in the source cluster.
        var port: Swift.Int?
        /// The name of the Availability Zone in which the source cluster is located.
        var preferredAvailabilityZone: Swift.String?
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:
        ///
        /// * sun
        ///
        /// * mon
        ///
        /// * tue
        ///
        /// * wed
        ///
        /// * thu
        ///
        /// * fri
        ///
        /// * sat
        ///
        ///
        /// Example: sun:23:00-mon:01:30
        var preferredMaintenanceWindow: Swift.String?
        /// The ARN (Amazon Resource Name) of the preferred outpost.
        var preferredOutpostArn: Swift.String?
        /// A description of the source replication group.
        var replicationGroupDescription: Swift.String?
        /// The unique identifier of the source replication group.
        var replicationGroupId: Swift.String?
        /// The name of a snapshot. For an automatic snapshot, the name is system-generated. For a manual snapshot, this is the user-provided name.
        var snapshotName: Swift.String?
        /// For an automatic snapshot, the number of days for which ElastiCache retains the snapshot before deleting it. For manual snapshots, this field reflects the SnapshotRetentionLimit for the source cluster when the snapshot was created. This field is otherwise ignored: Manual snapshots do not expire, and can only be deleted using the DeleteSnapshot operation. Important If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
        var snapshotRetentionLimit: Swift.Int?
        /// Indicates whether the snapshot is from an automatic backup (automated) or was created manually (manual).
        var snapshotSource: Swift.String?
        /// The status of the snapshot. Valid values: creating | available | restoring | copying | deleting.
        var snapshotStatus: Swift.String?
        /// The daily time range during which ElastiCache takes daily snapshots of the source cluster.
        var snapshotWindow: Swift.String?
        /// The Amazon Resource Name (ARN) for the topic used by the source cluster for publishing notifications.
        var topicArn: Swift.String?
        /// The Amazon Virtual Private Cloud identifier (VPC ID) of the cache subnet group for the source cluster.
        var vpcId: Swift.String?

        public init (
            aRN: Swift.String? = nil,
            autoMinorVersionUpgrade: Swift.Bool = false,
            automaticFailover: ElastiCacheClientTypes.AutomaticFailoverStatus? = nil,
            cacheClusterCreateTime: ClientRuntime.Date? = nil,
            cacheClusterId: Swift.String? = nil,
            cacheNodeType: Swift.String? = nil,
            cacheParameterGroupName: Swift.String? = nil,
            cacheSubnetGroupName: Swift.String? = nil,
            dataTiering: ElastiCacheClientTypes.DataTieringStatus? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            nodeSnapshots: [ElastiCacheClientTypes.NodeSnapshot]? = nil,
            numCacheNodes: Swift.Int? = nil,
            numNodeGroups: Swift.Int? = nil,
            port: Swift.Int? = nil,
            preferredAvailabilityZone: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            preferredOutpostArn: Swift.String? = nil,
            replicationGroupDescription: Swift.String? = nil,
            replicationGroupId: Swift.String? = nil,
            snapshotName: Swift.String? = nil,
            snapshotRetentionLimit: Swift.Int? = nil,
            snapshotSource: Swift.String? = nil,
            snapshotStatus: Swift.String? = nil,
            snapshotWindow: Swift.String? = nil,
            topicArn: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.aRN = aRN
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.automaticFailover = automaticFailover
            self.cacheClusterCreateTime = cacheClusterCreateTime
            self.cacheClusterId = cacheClusterId
            self.cacheNodeType = cacheNodeType
            self.cacheParameterGroupName = cacheParameterGroupName
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.dataTiering = dataTiering
            self.engine = engine
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.nodeSnapshots = nodeSnapshots
            self.numCacheNodes = numCacheNodes
            self.numNodeGroups = numNodeGroups
            self.port = port
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.preferredOutpostArn = preferredOutpostArn
            self.replicationGroupDescription = replicationGroupDescription
            self.replicationGroupId = replicationGroupId
            self.snapshotName = snapshotName
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.snapshotSource = snapshotSource
            self.snapshotStatus = snapshotStatus
            self.snapshotWindow = snapshotWindow
            self.topicArn = topicArn
            self.vpcId = vpcId
        }
    }

}

extension SnapshotAlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<SnapshotAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You already have a snapshot with the given name.
public struct SnapshotAlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SnapshotAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SnapshotFeatureNotSupportedFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<SnapshotFeatureNotSupportedFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You attempted one of the following operations:
///
/// * Creating a snapshot of a Redis cluster running on a cache.t1.micro cache node.
///
/// * Creating a snapshot of a cluster that is running Memcached rather than Redis.
///
///
/// Neither of these are supported by ElastiCache.
public struct SnapshotFeatureNotSupportedFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SnapshotFeatureNotSupportedFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotFeatureNotSupportedFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SnapshotNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<SnapshotNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested snapshot name does not refer to an existing snapshot.
public struct SnapshotNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SnapshotNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SnapshotQuotaExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<SnapshotQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request cannot be processed because it would exceed the maximum number of snapshots.
public struct SnapshotQuotaExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SnapshotQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SnapshotQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes {
    public enum SourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cacheCluster
        case cacheParameterGroup
        case cacheSecurityGroup
        case cacheSubnetGroup
        case replicationGroup
        case user
        case userGroup
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceType] {
            return [
                .cacheCluster,
                .cacheParameterGroup,
                .cacheSecurityGroup,
                .cacheSubnetGroup,
                .replicationGroup,
                .user,
                .userGroup,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cacheCluster: return "cache-cluster"
            case .cacheParameterGroup: return "cache-parameter-group"
            case .cacheSecurityGroup: return "cache-security-group"
            case .cacheSubnetGroup: return "cache-subnet-group"
            case .replicationGroup: return "replication-group"
            case .user: return "user"
            case .userGroup: return "user-group"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SourceType(rawValue: rawValue) ?? SourceType.sdkUnknown(rawValue)
        }
    }
}

extension StartMigrationInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let customerNodeEndpointList = customerNodeEndpointList {
            var customerNodeEndpointListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CustomerNodeEndpointList"))
            for (index0, customernodeendpoint0) in customerNodeEndpointList.enumerated() {
                try customerNodeEndpointListContainer.encode(customernodeendpoint0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        try container.encode("StartMigration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension StartMigrationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartMigrationInput: Swift.Equatable {
    /// List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
    /// This member is required.
    var customerNodeEndpointList: [ElastiCacheClientTypes.CustomerNodeEndpoint]?
    /// The ID of the replication group to which data should be migrated.
    /// This member is required.
    var replicationGroupId: Swift.String?

    public init (
        customerNodeEndpointList: [ElastiCacheClientTypes.CustomerNodeEndpoint]? = nil,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.customerNodeEndpointList = customerNodeEndpointList
        self.replicationGroupId = replicationGroupId
    }
}

extension StartMigrationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension StartMigrationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupState" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupAlreadyUnderMigrationFault" : self = .replicationGroupAlreadyUnderMigrationFault(try ReplicationGroupAlreadyUnderMigrationFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartMigrationOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case replicationGroupAlreadyUnderMigrationFault(ReplicationGroupAlreadyUnderMigrationFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMigrationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartMigrationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct StartMigrationOutputResponse: Swift.Equatable {
    /// Contains all of the attributes of a specific Redis replication group.
    var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init (
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct StartMigrationOutputResponseBody: Swift.Equatable {
    let replicationGroup: ElastiCacheClientTypes.ReplicationGroup?
}

extension StartMigrationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("StartMigrationResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

extension ElastiCacheClientTypes.Subnet: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subnetAvailabilityZone = "SubnetAvailabilityZone"
        case subnetIdentifier = "SubnetIdentifier"
        case subnetOutpost = "SubnetOutpost"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let subnetAvailabilityZone = subnetAvailabilityZone {
            try container.encode(subnetAvailabilityZone, forKey: ClientRuntime.Key("SubnetAvailabilityZone"))
        }
        if let subnetIdentifier = subnetIdentifier {
            try container.encode(subnetIdentifier, forKey: ClientRuntime.Key("SubnetIdentifier"))
        }
        if let subnetOutpost = subnetOutpost {
            try container.encode(subnetOutpost, forKey: ClientRuntime.Key("SubnetOutpost"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetIdentifier)
        subnetIdentifier = subnetIdentifierDecoded
        let subnetAvailabilityZoneDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.AvailabilityZone.self, forKey: .subnetAvailabilityZone)
        subnetAvailabilityZone = subnetAvailabilityZoneDecoded
        let subnetOutpostDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.SubnetOutpost.self, forKey: .subnetOutpost)
        subnetOutpost = subnetOutpostDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Represents the subnet associated with a cluster. This parameter refers to subnets defined in Amazon Virtual Private Cloud (Amazon VPC) and used with ElastiCache.
    public struct Subnet: Swift.Equatable {
        /// The Availability Zone associated with the subnet.
        var subnetAvailabilityZone: ElastiCacheClientTypes.AvailabilityZone?
        /// The unique identifier for the subnet.
        var subnetIdentifier: Swift.String?
        /// The outpost ARN of the subnet.
        var subnetOutpost: ElastiCacheClientTypes.SubnetOutpost?

        public init (
            subnetAvailabilityZone: ElastiCacheClientTypes.AvailabilityZone? = nil,
            subnetIdentifier: Swift.String? = nil,
            subnetOutpost: ElastiCacheClientTypes.SubnetOutpost? = nil
        )
        {
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetIdentifier = subnetIdentifier
            self.subnetOutpost = subnetOutpost
        }
    }

}

extension SubnetInUse {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<SubnetInUseBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested subnet is being used by another cache subnet group.
public struct SubnetInUse: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SubnetInUseBody: Swift.Equatable {
    let message: Swift.String?
}

extension SubnetInUseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SubnetNotAllowedFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<SubnetNotAllowedFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// At least one subnet ID does not match the other subnet IDs. This mismatch typically occurs when a user sets one subnet ID to a regional Availability Zone and a different one to an outpost. Or when a user sets the subnet ID to an Outpost when not subscribed on this service.
public struct SubnetNotAllowedFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SubnetNotAllowedFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension SubnetNotAllowedFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.SubnetOutpost: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subnetOutpostArn = "SubnetOutpostArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let subnetOutpostArn = subnetOutpostArn {
            try container.encode(subnetOutpostArn, forKey: ClientRuntime.Key("SubnetOutpostArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetOutpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetOutpostArn)
        subnetOutpostArn = subnetOutpostArnDecoded
    }
}

extension ElastiCacheClientTypes {
    /// The ID of the outpost subnet.
    public struct SubnetOutpost: Swift.Equatable {
        /// The outpost ARN of the subnet.
        var subnetOutpostArn: Swift.String?

        public init (
            subnetOutpostArn: Swift.String? = nil
        )
        {
            self.subnetOutpostArn = subnetOutpostArn
        }
    }

}

extension ElastiCacheClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension ElastiCacheClientTypes {
    /// A tag that can be added to an ElastiCache cluster or replication group. Tags are composed of a Key/Value pair. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. A tag with a null Value is permitted.
    public struct Tag: Swift.Equatable {
        /// The key for the tag. May not be null.
        var key: Swift.String?
        /// The tag's value. May be null.
        var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<TagNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested tag was not found on this resource.
public struct TagNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TagNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension TagNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TagQuotaPerResourceExceeded {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<TagQuotaPerResourceExceededBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request cannot be processed because it would cause the resource to have more than the allowed number of tags. The maximum number of tags permitted on a resource is 50.
public struct TagQuotaPerResourceExceeded: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TagQuotaPerResourceExceededBody: Swift.Equatable {
    let message: Swift.String?
}

extension TagQuotaPerResourceExceededBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TestFailoverInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: ClientRuntime.Key("NodeGroupId"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        try container.encode("TestFailover", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-02-02", forKey:ClientRuntime.Key("Version"))
    }
}

extension TestFailoverInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TestFailoverInput: Swift.Equatable {
    /// The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
    /// This member is required.
    var nodeGroupId: Swift.String?
    /// The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
    /// This member is required.
    var replicationGroupId: Swift.String?

    public init (
        nodeGroupId: Swift.String? = nil,
        replicationGroupId: Swift.String? = nil
    )
    {
        self.nodeGroupId = nodeGroupId
        self.replicationGroupId = replicationGroupId
    }
}

extension TestFailoverNotAvailableFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<TestFailoverNotAvailableFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The TestFailover action is not available.
public struct TestFailoverNotAvailableFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TestFailoverNotAvailableFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension TestFailoverNotAvailableFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TestFailoverOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TestFailoverOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "APICallRateForCustomerExceeded" : self = .aPICallRateForCustomerExceededFault(try APICallRateForCustomerExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCacheClusterState" : self = .invalidCacheClusterStateFault(try InvalidCacheClusterStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSKeyFault" : self = .invalidKMSKeyFault(try InvalidKMSKeyFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReplicationGroupState" : self = .invalidReplicationGroupStateFault(try InvalidReplicationGroupStateFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NodeGroupNotFoundFault" : self = .nodeGroupNotFoundFault(try NodeGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicationGroupNotFoundFault" : self = .replicationGroupNotFoundFault(try ReplicationGroupNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TestFailoverNotAvailableFault" : self = .testFailoverNotAvailableFault(try TestFailoverNotAvailableFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TestFailoverOutputError: Swift.Error, Swift.Equatable {
    case aPICallRateForCustomerExceededFault(APICallRateForCustomerExceededFault)
    case invalidCacheClusterStateFault(InvalidCacheClusterStateFault)
    case invalidKMSKeyFault(InvalidKMSKeyFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidReplicationGroupStateFault(InvalidReplicationGroupStateFault)
    case nodeGroupNotFoundFault(NodeGroupNotFoundFault)
    case replicationGroupNotFoundFault(ReplicationGroupNotFoundFault)
    case testFailoverNotAvailableFault(TestFailoverNotAvailableFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension TestFailoverOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TestFailoverOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.replicationGroup = output.replicationGroup
        } else {
            self.replicationGroup = nil
        }
    }
}

public struct TestFailoverOutputResponse: Swift.Equatable {
    /// Contains all of the attributes of a specific Redis replication group.
    var replicationGroup: ElastiCacheClientTypes.ReplicationGroup?

    public init (
        replicationGroup: ElastiCacheClientTypes.ReplicationGroup? = nil
    )
    {
        self.replicationGroup = replicationGroup
    }
}

struct TestFailoverOutputResponseBody: Swift.Equatable {
    let replicationGroup: ElastiCacheClientTypes.ReplicationGroup?
}

extension TestFailoverOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("TestFailoverResult"))
        let replicationGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ReplicationGroup.self, forKey: .replicationGroup)
        replicationGroup = replicationGroupDecoded
    }
}

extension ElastiCacheClientTypes.TimeRangeFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
    }
}

extension ElastiCacheClientTypes {
    /// Filters update actions from the service updates that are in available status during the time range.
    public struct TimeRangeFilter: Swift.Equatable {
        /// The end time of the time range filter
        var endTime: ClientRuntime.Date?
        /// The start time of the time range filter
        var startTime: ClientRuntime.Date?

        public init (
            endTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension ElastiCacheClientTypes.UnprocessedUpdateAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheClusterId = "CacheClusterId"
        case errorMessage = "ErrorMessage"
        case errorType = "ErrorType"
        case replicationGroupId = "ReplicationGroupId"
        case serviceUpdateName = "ServiceUpdateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let errorMessage = errorMessage {
            try container.encode(errorMessage, forKey: ClientRuntime.Key("ErrorMessage"))
        }
        if let errorType = errorType {
            try container.encode(errorType, forKey: ClientRuntime.Key("ErrorType"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: ClientRuntime.Key("ServiceUpdateName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let serviceUpdateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUpdateName)
        serviceUpdateName = serviceUpdateNameDecoded
        let errorTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorType)
        errorType = errorTypeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension ElastiCacheClientTypes {
    /// Update action that has failed to be processed for the corresponding apply/stop request
    public struct UnprocessedUpdateAction: Swift.Equatable {
        /// The ID of the cache cluster
        var cacheClusterId: Swift.String?
        /// The error message that describes the reason the request was not processed
        var errorMessage: Swift.String?
        /// The error type for requests that are not processed
        var errorType: Swift.String?
        /// The replication group ID
        var replicationGroupId: Swift.String?
        /// The unique ID of the service update
        var serviceUpdateName: Swift.String?

        public init (
            cacheClusterId: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            errorType: Swift.String? = nil,
            replicationGroupId: Swift.String? = nil,
            serviceUpdateName: Swift.String? = nil
        )
        {
            self.cacheClusterId = cacheClusterId
            self.errorMessage = errorMessage
            self.errorType = errorType
            self.replicationGroupId = replicationGroupId
            self.serviceUpdateName = serviceUpdateName
        }
    }

}

extension ElastiCacheClientTypes.UpdateAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheClusterId = "CacheClusterId"
        case cacheNodeUpdateStatus = "CacheNodeUpdateStatus"
        case engine = "Engine"
        case estimatedUpdateTime = "EstimatedUpdateTime"
        case nodeGroupUpdateStatus = "NodeGroupUpdateStatus"
        case nodesUpdated = "NodesUpdated"
        case replicationGroupId = "ReplicationGroupId"
        case serviceUpdateName = "ServiceUpdateName"
        case serviceUpdateRecommendedApplyByDate = "ServiceUpdateRecommendedApplyByDate"
        case serviceUpdateReleaseDate = "ServiceUpdateReleaseDate"
        case serviceUpdateSeverity = "ServiceUpdateSeverity"
        case serviceUpdateStatus = "ServiceUpdateStatus"
        case serviceUpdateType = "ServiceUpdateType"
        case slaMet = "SlaMet"
        case updateActionAvailableDate = "UpdateActionAvailableDate"
        case updateActionStatus = "UpdateActionStatus"
        case updateActionStatusModifiedDate = "UpdateActionStatusModifiedDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let cacheNodeUpdateStatus = cacheNodeUpdateStatus {
            var cacheNodeUpdateStatusContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheNodeUpdateStatus"))
            for (index0, cachenodeupdatestatus0) in cacheNodeUpdateStatus.enumerated() {
                try cacheNodeUpdateStatusContainer.encode(cachenodeupdatestatus0, forKey: ClientRuntime.Key("CacheNodeUpdateStatus.\(index0.advanced(by: 1))"))
            }
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let estimatedUpdateTime = estimatedUpdateTime {
            try container.encode(estimatedUpdateTime, forKey: ClientRuntime.Key("EstimatedUpdateTime"))
        }
        if let nodeGroupUpdateStatus = nodeGroupUpdateStatus {
            var nodeGroupUpdateStatusContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NodeGroupUpdateStatus"))
            for (index0, nodegroupupdatestatus0) in nodeGroupUpdateStatus.enumerated() {
                try nodeGroupUpdateStatusContainer.encode(nodegroupupdatestatus0, forKey: ClientRuntime.Key("NodeGroupUpdateStatus.\(index0.advanced(by: 1))"))
            }
        }
        if let nodesUpdated = nodesUpdated {
            try container.encode(nodesUpdated, forKey: ClientRuntime.Key("NodesUpdated"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let serviceUpdateName = serviceUpdateName {
            try container.encode(serviceUpdateName, forKey: ClientRuntime.Key("ServiceUpdateName"))
        }
        if let serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDate {
            try container.encode(ClientRuntime.TimestampWrapper(serviceUpdateRecommendedApplyByDate, format: .dateTime), forKey: ClientRuntime.Key("serviceUpdateRecommendedApplyByDate"))
        }
        if let serviceUpdateReleaseDate = serviceUpdateReleaseDate {
            try container.encode(ClientRuntime.TimestampWrapper(serviceUpdateReleaseDate, format: .dateTime), forKey: ClientRuntime.Key("serviceUpdateReleaseDate"))
        }
        if let serviceUpdateSeverity = serviceUpdateSeverity {
            try container.encode(serviceUpdateSeverity, forKey: ClientRuntime.Key("ServiceUpdateSeverity"))
        }
        if let serviceUpdateStatus = serviceUpdateStatus {
            try container.encode(serviceUpdateStatus, forKey: ClientRuntime.Key("ServiceUpdateStatus"))
        }
        if let serviceUpdateType = serviceUpdateType {
            try container.encode(serviceUpdateType, forKey: ClientRuntime.Key("ServiceUpdateType"))
        }
        if let slaMet = slaMet {
            try container.encode(slaMet, forKey: ClientRuntime.Key("SlaMet"))
        }
        if let updateActionAvailableDate = updateActionAvailableDate {
            try container.encode(ClientRuntime.TimestampWrapper(updateActionAvailableDate, format: .dateTime), forKey: ClientRuntime.Key("updateActionAvailableDate"))
        }
        if let updateActionStatus = updateActionStatus {
            try container.encode(updateActionStatus, forKey: ClientRuntime.Key("UpdateActionStatus"))
        }
        if let updateActionStatusModifiedDate = updateActionStatusModifiedDate {
            try container.encode(ClientRuntime.TimestampWrapper(updateActionStatusModifiedDate, format: .dateTime), forKey: ClientRuntime.Key("updateActionStatusModifiedDate"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let serviceUpdateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUpdateName)
        serviceUpdateName = serviceUpdateNameDecoded
        let serviceUpdateReleaseDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUpdateReleaseDate)
        var serviceUpdateReleaseDateBuffer:ClientRuntime.Date? = nil
        if let serviceUpdateReleaseDateDecoded = serviceUpdateReleaseDateDecoded {
            serviceUpdateReleaseDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(serviceUpdateReleaseDateDecoded, format: .dateTime)
        }
        serviceUpdateReleaseDate = serviceUpdateReleaseDateBuffer
        let serviceUpdateSeverityDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ServiceUpdateSeverity.self, forKey: .serviceUpdateSeverity)
        serviceUpdateSeverity = serviceUpdateSeverityDecoded
        let serviceUpdateStatusDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ServiceUpdateStatus.self, forKey: .serviceUpdateStatus)
        serviceUpdateStatus = serviceUpdateStatusDecoded
        let serviceUpdateRecommendedApplyByDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUpdateRecommendedApplyByDate)
        var serviceUpdateRecommendedApplyByDateBuffer:ClientRuntime.Date? = nil
        if let serviceUpdateRecommendedApplyByDateDecoded = serviceUpdateRecommendedApplyByDateDecoded {
            serviceUpdateRecommendedApplyByDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(serviceUpdateRecommendedApplyByDateDecoded, format: .dateTime)
        }
        serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDateBuffer
        let serviceUpdateTypeDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.ServiceUpdateType.self, forKey: .serviceUpdateType)
        serviceUpdateType = serviceUpdateTypeDecoded
        let updateActionAvailableDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateActionAvailableDate)
        var updateActionAvailableDateBuffer:ClientRuntime.Date? = nil
        if let updateActionAvailableDateDecoded = updateActionAvailableDateDecoded {
            updateActionAvailableDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(updateActionAvailableDateDecoded, format: .dateTime)
        }
        updateActionAvailableDate = updateActionAvailableDateBuffer
        let updateActionStatusDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.UpdateActionStatus.self, forKey: .updateActionStatus)
        updateActionStatus = updateActionStatusDecoded
        let nodesUpdatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodesUpdated)
        nodesUpdated = nodesUpdatedDecoded
        let updateActionStatusModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateActionStatusModifiedDate)
        var updateActionStatusModifiedDateBuffer:ClientRuntime.Date? = nil
        if let updateActionStatusModifiedDateDecoded = updateActionStatusModifiedDateDecoded {
            updateActionStatusModifiedDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(updateActionStatusModifiedDateDecoded, format: .dateTime)
        }
        updateActionStatusModifiedDate = updateActionStatusModifiedDateBuffer
        let slaMetDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.SlaMet.self, forKey: .slaMet)
        slaMet = slaMetDecoded
        if containerValues.contains(.nodeGroupUpdateStatus) {
            struct KeyVal0{struct NodeGroupUpdateStatus{}}
            let nodeGroupUpdateStatusWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeGroupUpdateStatus>.CodingKeys.self, forKey: .nodeGroupUpdateStatus)
            if let nodeGroupUpdateStatusWrappedContainer = nodeGroupUpdateStatusWrappedContainer {
                let nodeGroupUpdateStatusContainer = try nodeGroupUpdateStatusWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.NodeGroupUpdateStatus].self, forKey: .member)
                var nodeGroupUpdateStatusBuffer:[ElastiCacheClientTypes.NodeGroupUpdateStatus]? = nil
                if let nodeGroupUpdateStatusContainer = nodeGroupUpdateStatusContainer {
                    nodeGroupUpdateStatusBuffer = [ElastiCacheClientTypes.NodeGroupUpdateStatus]()
                    for structureContainer0 in nodeGroupUpdateStatusContainer {
                        nodeGroupUpdateStatusBuffer?.append(structureContainer0)
                    }
                }
                nodeGroupUpdateStatus = nodeGroupUpdateStatusBuffer
            } else {
                nodeGroupUpdateStatus = []
            }
        } else {
            nodeGroupUpdateStatus = nil
        }
        if containerValues.contains(.cacheNodeUpdateStatus) {
            struct KeyVal0{struct CacheNodeUpdateStatus{}}
            let cacheNodeUpdateStatusWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeUpdateStatus>.CodingKeys.self, forKey: .cacheNodeUpdateStatus)
            if let cacheNodeUpdateStatusWrappedContainer = cacheNodeUpdateStatusWrappedContainer {
                let cacheNodeUpdateStatusContainer = try cacheNodeUpdateStatusWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheNodeUpdateStatus].self, forKey: .member)
                var cacheNodeUpdateStatusBuffer:[ElastiCacheClientTypes.CacheNodeUpdateStatus]? = nil
                if let cacheNodeUpdateStatusContainer = cacheNodeUpdateStatusContainer {
                    cacheNodeUpdateStatusBuffer = [ElastiCacheClientTypes.CacheNodeUpdateStatus]()
                    for structureContainer0 in cacheNodeUpdateStatusContainer {
                        cacheNodeUpdateStatusBuffer?.append(structureContainer0)
                    }
                }
                cacheNodeUpdateStatus = cacheNodeUpdateStatusBuffer
            } else {
                cacheNodeUpdateStatus = []
            }
        } else {
            cacheNodeUpdateStatus = nil
        }
        let estimatedUpdateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedUpdateTime)
        estimatedUpdateTime = estimatedUpdateTimeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
    }
}

extension ElastiCacheClientTypes {
    /// The status of the service update for a specific replication group
    public struct UpdateAction: Swift.Equatable {
        /// The ID of the cache cluster
        var cacheClusterId: Swift.String?
        /// The status of the service update on the cache node
        var cacheNodeUpdateStatus: [ElastiCacheClientTypes.CacheNodeUpdateStatus]?
        /// The Elasticache engine to which the update applies. Either Redis or Memcached
        var engine: Swift.String?
        /// The estimated length of time for the update to complete
        var estimatedUpdateTime: Swift.String?
        /// The status of the service update on the node group
        var nodeGroupUpdateStatus: [ElastiCacheClientTypes.NodeGroupUpdateStatus]?
        /// The progress of the service update on the replication group
        var nodesUpdated: Swift.String?
        /// The ID of the replication group
        var replicationGroupId: Swift.String?
        /// The unique ID of the service update
        var serviceUpdateName: Swift.String?
        /// The recommended date to apply the service update to ensure compliance. For information on compliance, see [Self-Service Security Updates for Compliance](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/elasticache-compliance.html#elasticache-compliance-self-service).
        var serviceUpdateRecommendedApplyByDate: ClientRuntime.Date?
        /// The date the update is first available
        var serviceUpdateReleaseDate: ClientRuntime.Date?
        /// The severity of the service update
        var serviceUpdateSeverity: ElastiCacheClientTypes.ServiceUpdateSeverity?
        /// The status of the service update
        var serviceUpdateStatus: ElastiCacheClientTypes.ServiceUpdateStatus?
        /// Reflects the nature of the service update
        var serviceUpdateType: ElastiCacheClientTypes.ServiceUpdateType?
        /// If yes, all nodes in the replication group have been updated by the recommended apply-by date. If no, at least one node in the replication group have not been updated by the recommended apply-by date. If N/A, the replication group was created after the recommended apply-by date.
        var slaMet: ElastiCacheClientTypes.SlaMet?
        /// The date that the service update is available to a replication group
        var updateActionAvailableDate: ClientRuntime.Date?
        /// The status of the update action
        var updateActionStatus: ElastiCacheClientTypes.UpdateActionStatus?
        /// The date when the UpdateActionStatus was last modified
        var updateActionStatusModifiedDate: ClientRuntime.Date?

        public init (
            cacheClusterId: Swift.String? = nil,
            cacheNodeUpdateStatus: [ElastiCacheClientTypes.CacheNodeUpdateStatus]? = nil,
            engine: Swift.String? = nil,
            estimatedUpdateTime: Swift.String? = nil,
            nodeGroupUpdateStatus: [ElastiCacheClientTypes.NodeGroupUpdateStatus]? = nil,
            nodesUpdated: Swift.String? = nil,
            replicationGroupId: Swift.String? = nil,
            serviceUpdateName: Swift.String? = nil,
            serviceUpdateRecommendedApplyByDate: ClientRuntime.Date? = nil,
            serviceUpdateReleaseDate: ClientRuntime.Date? = nil,
            serviceUpdateSeverity: ElastiCacheClientTypes.ServiceUpdateSeverity? = nil,
            serviceUpdateStatus: ElastiCacheClientTypes.ServiceUpdateStatus? = nil,
            serviceUpdateType: ElastiCacheClientTypes.ServiceUpdateType? = nil,
            slaMet: ElastiCacheClientTypes.SlaMet? = nil,
            updateActionAvailableDate: ClientRuntime.Date? = nil,
            updateActionStatus: ElastiCacheClientTypes.UpdateActionStatus? = nil,
            updateActionStatusModifiedDate: ClientRuntime.Date? = nil
        )
        {
            self.cacheClusterId = cacheClusterId
            self.cacheNodeUpdateStatus = cacheNodeUpdateStatus
            self.engine = engine
            self.estimatedUpdateTime = estimatedUpdateTime
            self.nodeGroupUpdateStatus = nodeGroupUpdateStatus
            self.nodesUpdated = nodesUpdated
            self.replicationGroupId = replicationGroupId
            self.serviceUpdateName = serviceUpdateName
            self.serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDate
            self.serviceUpdateReleaseDate = serviceUpdateReleaseDate
            self.serviceUpdateSeverity = serviceUpdateSeverity
            self.serviceUpdateStatus = serviceUpdateStatus
            self.serviceUpdateType = serviceUpdateType
            self.slaMet = slaMet
            self.updateActionAvailableDate = updateActionAvailableDate
            self.updateActionStatus = updateActionStatus
            self.updateActionStatusModifiedDate = updateActionStatusModifiedDate
        }
    }

}

extension ElastiCacheClientTypes {
    public enum UpdateActionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case inProgress
        case notApplicable
        case notApplied
        case scheduled
        case scheduling
        case stopped
        case stopping
        case waitingToStart
        case sdkUnknown(Swift.String)

        public static var allCases: [UpdateActionStatus] {
            return [
                .complete,
                .inProgress,
                .notApplicable,
                .notApplied,
                .scheduled,
                .scheduling,
                .stopped,
                .stopping,
                .waitingToStart,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "complete"
            case .inProgress: return "in-progress"
            case .notApplicable: return "not-applicable"
            case .notApplied: return "not-applied"
            case .scheduled: return "scheduled"
            case .scheduling: return "scheduling"
            case .stopped: return "stopped"
            case .stopping: return "stopping"
            case .waitingToStart: return "waiting-to-start"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UpdateActionStatus(rawValue: rawValue) ?? UpdateActionStatus.sdkUnknown(rawValue)
        }
    }
}

extension ElastiCacheClientTypes.User: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case accessString = "AccessString"
        case authentication = "Authentication"
        case engine = "Engine"
        case minimumEngineVersion = "MinimumEngineVersion"
        case status = "Status"
        case userGroupIds = "UserGroupIds"
        case userId = "UserId"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: ClientRuntime.Key("ARN"))
        }
        if let accessString = accessString {
            try container.encode(accessString, forKey: ClientRuntime.Key("AccessString"))
        }
        if let authentication = authentication {
            try container.encode(authentication, forKey: ClientRuntime.Key("Authentication"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let minimumEngineVersion = minimumEngineVersion {
            try container.encode(minimumEngineVersion, forKey: ClientRuntime.Key("MinimumEngineVersion"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let userGroupIds = userGroupIds {
            var userGroupIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserGroupIds"))
            for (index0, usergroupid0) in userGroupIds.enumerated() {
                try userGroupIdsContainer.encode(usergroupid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userId = userId {
            try container.encode(userId, forKey: ClientRuntime.Key("UserId"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: ClientRuntime.Key("UserName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        let accessStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessString)
        accessString = accessStringDecoded
        if containerValues.contains(.userGroupIds) {
            struct KeyVal0{struct member{}}
            let userGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIds)
            if let userGroupIdsWrappedContainer = userGroupIdsWrappedContainer {
                let userGroupIdsContainer = try userGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userGroupIdsBuffer:[Swift.String]? = nil
                if let userGroupIdsContainer = userGroupIdsContainer {
                    userGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in userGroupIdsContainer {
                        userGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                userGroupIds = userGroupIdsBuffer
            } else {
                userGroupIds = []
            }
        } else {
            userGroupIds = nil
        }
        let authenticationDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Authentication.self, forKey: .authentication)
        authentication = authenticationDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension ElastiCacheClientTypes {
    public struct User: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the user.
        var aRN: Swift.String?
        /// Access permissions string used for this user.
        var accessString: Swift.String?
        /// Denotes whether the user requires a password to authenticate.
        var authentication: ElastiCacheClientTypes.Authentication?
        /// The current supported value is Redis.
        var engine: Swift.String?
        /// The minimum engine version required, which is Redis 6.0
        var minimumEngineVersion: Swift.String?
        /// Indicates the user status. Can be "active", "modifying" or "deleting".
        var status: Swift.String?
        /// Returns a list of the user group IDs the user belongs to.
        var userGroupIds: [Swift.String]?
        /// The ID of the user.
        var userId: Swift.String?
        /// The username of the user.
        var userName: Swift.String?

        public init (
            aRN: Swift.String? = nil,
            accessString: Swift.String? = nil,
            authentication: ElastiCacheClientTypes.Authentication? = nil,
            engine: Swift.String? = nil,
            minimumEngineVersion: Swift.String? = nil,
            status: Swift.String? = nil,
            userGroupIds: [Swift.String]? = nil,
            userId: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.aRN = aRN
            self.accessString = accessString
            self.authentication = authentication
            self.engine = engine
            self.minimumEngineVersion = minimumEngineVersion
            self.status = status
            self.userGroupIds = userGroupIds
            self.userId = userId
            self.userName = userName
        }
    }

}

extension UserAlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<UserAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A user with this ID already exists.
public struct UserAlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UserAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension UserAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.UserGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case engine = "Engine"
        case minimumEngineVersion = "MinimumEngineVersion"
        case pendingChanges = "PendingChanges"
        case replicationGroups = "ReplicationGroups"
        case status = "Status"
        case userGroupId = "UserGroupId"
        case userIds = "UserIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: ClientRuntime.Key("ARN"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let minimumEngineVersion = minimumEngineVersion {
            try container.encode(minimumEngineVersion, forKey: ClientRuntime.Key("MinimumEngineVersion"))
        }
        if let pendingChanges = pendingChanges {
            try container.encode(pendingChanges, forKey: ClientRuntime.Key("PendingChanges"))
        }
        if let replicationGroups = replicationGroups {
            var replicationGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplicationGroups"))
            for (index0, string0) in replicationGroups.enumerated() {
                try replicationGroupsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let userGroupId = userGroupId {
            try container.encode(userGroupId, forKey: ClientRuntime.Key("UserGroupId"))
        }
        if let userIds = userIds {
            var userIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserIds"))
            for (index0, userid0) in userIds.enumerated() {
                try userIdsContainer.encode(userid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userGroupId)
        userGroupId = userGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        if containerValues.contains(.userIds) {
            struct KeyVal0{struct member{}}
            let userIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIds)
            if let userIdsWrappedContainer = userIdsWrappedContainer {
                let userIdsContainer = try userIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userIdsBuffer:[Swift.String]? = nil
                if let userIdsContainer = userIdsContainer {
                    userIdsBuffer = [Swift.String]()
                    for stringContainer0 in userIdsContainer {
                        userIdsBuffer?.append(stringContainer0)
                    }
                }
                userIds = userIdsBuffer
            } else {
                userIds = []
            }
        } else {
            userIds = nil
        }
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        let pendingChangesDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.UserGroupPendingChanges.self, forKey: .pendingChanges)
        pendingChanges = pendingChangesDecoded
        if containerValues.contains(.replicationGroups) {
            struct KeyVal0{struct member{}}
            let replicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replicationGroups)
            if let replicationGroupsWrappedContainer = replicationGroupsWrappedContainer {
                let replicationGroupsContainer = try replicationGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var replicationGroupsBuffer:[Swift.String]? = nil
                if let replicationGroupsContainer = replicationGroupsContainer {
                    replicationGroupsBuffer = [Swift.String]()
                    for stringContainer0 in replicationGroupsContainer {
                        replicationGroupsBuffer?.append(stringContainer0)
                    }
                }
                replicationGroups = replicationGroupsBuffer
            } else {
                replicationGroups = []
            }
        } else {
            replicationGroups = nil
        }
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}

extension ElastiCacheClientTypes {
    public struct UserGroup: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the user group.
        var aRN: Swift.String?
        /// The current supported value is Redis.
        var engine: Swift.String?
        /// The minimum engine version required, which is Redis 6.0
        var minimumEngineVersion: Swift.String?
        /// A list of updates being applied to the user group.
        var pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges?
        /// A list of replication groups that the user group can access.
        var replicationGroups: [Swift.String]?
        /// Indicates user group status. Can be "creating", "active", "modifying", "deleting".
        var status: Swift.String?
        /// The ID of the user group.
        var userGroupId: Swift.String?
        /// The list of user IDs that belong to the user group.
        var userIds: [Swift.String]?

        public init (
            aRN: Swift.String? = nil,
            engine: Swift.String? = nil,
            minimumEngineVersion: Swift.String? = nil,
            pendingChanges: ElastiCacheClientTypes.UserGroupPendingChanges? = nil,
            replicationGroups: [Swift.String]? = nil,
            status: Swift.String? = nil,
            userGroupId: Swift.String? = nil,
            userIds: [Swift.String]? = nil
        )
        {
            self.aRN = aRN
            self.engine = engine
            self.minimumEngineVersion = minimumEngineVersion
            self.pendingChanges = pendingChanges
            self.replicationGroups = replicationGroups
            self.status = status
            self.userGroupId = userGroupId
            self.userIds = userIds
        }
    }

}

extension UserGroupAlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<UserGroupAlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The user group with this ID already exists.
public struct UserGroupAlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UserGroupAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension UserGroupAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UserGroupNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<UserGroupNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The user group was not found or does not exist
public struct UserGroupNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UserGroupNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension UserGroupNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.UserGroupPendingChanges: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userIdsToAdd = "UserIdsToAdd"
        case userIdsToRemove = "UserIdsToRemove"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let userIdsToAdd = userIdsToAdd {
            var userIdsToAddContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserIdsToAdd"))
            for (index0, userid0) in userIdsToAdd.enumerated() {
                try userIdsToAddContainer.encode(userid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userIdsToRemove = userIdsToRemove {
            var userIdsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserIdsToRemove"))
            for (index0, userid0) in userIdsToRemove.enumerated() {
                try userIdsToRemoveContainer.encode(userid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.userIdsToRemove) {
            struct KeyVal0{struct member{}}
            let userIdsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIdsToRemove)
            if let userIdsToRemoveWrappedContainer = userIdsToRemoveWrappedContainer {
                let userIdsToRemoveContainer = try userIdsToRemoveWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userIdsToRemoveBuffer:[Swift.String]? = nil
                if let userIdsToRemoveContainer = userIdsToRemoveContainer {
                    userIdsToRemoveBuffer = [Swift.String]()
                    for stringContainer0 in userIdsToRemoveContainer {
                        userIdsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                userIdsToRemove = userIdsToRemoveBuffer
            } else {
                userIdsToRemove = []
            }
        } else {
            userIdsToRemove = nil
        }
        if containerValues.contains(.userIdsToAdd) {
            struct KeyVal0{struct member{}}
            let userIdsToAddWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIdsToAdd)
            if let userIdsToAddWrappedContainer = userIdsToAddWrappedContainer {
                let userIdsToAddContainer = try userIdsToAddWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userIdsToAddBuffer:[Swift.String]? = nil
                if let userIdsToAddContainer = userIdsToAddContainer {
                    userIdsToAddBuffer = [Swift.String]()
                    for stringContainer0 in userIdsToAddContainer {
                        userIdsToAddBuffer?.append(stringContainer0)
                    }
                }
                userIdsToAdd = userIdsToAddBuffer
            } else {
                userIdsToAdd = []
            }
        } else {
            userIdsToAdd = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// Returns the updates being applied to the user group.
    public struct UserGroupPendingChanges: Swift.Equatable {
        /// The list of user IDs to add.
        var userIdsToAdd: [Swift.String]?
        /// The list of user IDs to remove.
        var userIdsToRemove: [Swift.String]?

        public init (
            userIdsToAdd: [Swift.String]? = nil,
            userIdsToRemove: [Swift.String]? = nil
        )
        {
            self.userIdsToAdd = userIdsToAdd
            self.userIdsToRemove = userIdsToRemove
        }
    }

}

extension UserGroupQuotaExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<UserGroupQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The number of users exceeds the user group limit.
public struct UserGroupQuotaExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UserGroupQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension UserGroupQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ElastiCacheClientTypes.UserGroupsUpdateStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userGroupIdsToAdd = "UserGroupIdsToAdd"
        case userGroupIdsToRemove = "UserGroupIdsToRemove"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let userGroupIdsToAdd = userGroupIdsToAdd {
            var userGroupIdsToAddContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserGroupIdsToAdd"))
            for (index0, usergroupid0) in userGroupIdsToAdd.enumerated() {
                try userGroupIdsToAddContainer.encode(usergroupid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let userGroupIdsToRemove = userGroupIdsToRemove {
            var userGroupIdsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserGroupIdsToRemove"))
            for (index0, usergroupid0) in userGroupIdsToRemove.enumerated() {
                try userGroupIdsToRemoveContainer.encode(usergroupid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.userGroupIdsToAdd) {
            struct KeyVal0{struct member{}}
            let userGroupIdsToAddWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIdsToAdd)
            if let userGroupIdsToAddWrappedContainer = userGroupIdsToAddWrappedContainer {
                let userGroupIdsToAddContainer = try userGroupIdsToAddWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userGroupIdsToAddBuffer:[Swift.String]? = nil
                if let userGroupIdsToAddContainer = userGroupIdsToAddContainer {
                    userGroupIdsToAddBuffer = [Swift.String]()
                    for stringContainer0 in userGroupIdsToAddContainer {
                        userGroupIdsToAddBuffer?.append(stringContainer0)
                    }
                }
                userGroupIdsToAdd = userGroupIdsToAddBuffer
            } else {
                userGroupIdsToAdd = []
            }
        } else {
            userGroupIdsToAdd = nil
        }
        if containerValues.contains(.userGroupIdsToRemove) {
            struct KeyVal0{struct member{}}
            let userGroupIdsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroupIdsToRemove)
            if let userGroupIdsToRemoveWrappedContainer = userGroupIdsToRemoveWrappedContainer {
                let userGroupIdsToRemoveContainer = try userGroupIdsToRemoveWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userGroupIdsToRemoveBuffer:[Swift.String]? = nil
                if let userGroupIdsToRemoveContainer = userGroupIdsToRemoveContainer {
                    userGroupIdsToRemoveBuffer = [Swift.String]()
                    for stringContainer0 in userGroupIdsToRemoveContainer {
                        userGroupIdsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                userGroupIdsToRemove = userGroupIdsToRemoveBuffer
            } else {
                userGroupIdsToRemove = []
            }
        } else {
            userGroupIdsToRemove = nil
        }
    }
}

extension ElastiCacheClientTypes {
    /// The status of the user group update.
    public struct UserGroupsUpdateStatus: Swift.Equatable {
        /// The ID of the user group to add.
        var userGroupIdsToAdd: [Swift.String]?
        /// The ID of the user group to remove.
        var userGroupIdsToRemove: [Swift.String]?

        public init (
            userGroupIdsToAdd: [Swift.String]? = nil,
            userGroupIdsToRemove: [Swift.String]? = nil
        )
        {
            self.userGroupIdsToAdd = userGroupIdsToAdd
            self.userGroupIdsToRemove = userGroupIdsToRemove
        }
    }

}

extension UserNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<UserNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The user does not exist or could not be found.
public struct UserNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UserNotFoundFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension UserNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UserQuotaExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<UserQuotaExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The quota of users has been exceeded.
public struct UserQuotaExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UserQuotaExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension UserQuotaExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
