// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartDocumentTextDetectionInputHeadersMiddleware: Middleware {
    public let id: String = "StartDocumentTextDetectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartDocumentTextDetectionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartDocumentTextDetectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartDocumentTextDetectionInput>
    public typealias MOutput = OperationOutput<StartDocumentTextDetectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartDocumentTextDetectionOutputError>
}

public struct StartDocumentTextDetectionInputQueryItemMiddleware: Middleware {
    public let id: String = "StartDocumentTextDetectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartDocumentTextDetectionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartDocumentTextDetectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartDocumentTextDetectionInput>
    public typealias MOutput = OperationOutput<StartDocumentTextDetectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartDocumentTextDetectionOutputError>
}

public struct StartDocumentTextDetectionInputBodyMiddleware: Middleware {
    public let id: String = "StartDocumentTextDetectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartDocumentTextDetectionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartDocumentTextDetectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartDocumentTextDetectionInput>
    public typealias MOutput = OperationOutput<StartDocumentTextDetectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartDocumentTextDetectionOutputError>
}

extension StartDocumentTextDetectionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case documentLocation = "DocumentLocation"
        case jobTag = "JobTag"
        case kMSKeyId = "KMSKeyId"
        case notificationChannel = "NotificationChannel"
        case outputConfig = "OutputConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let documentLocation = documentLocation {
            try encodeContainer.encode(documentLocation, forKey: .documentLocation)
        }
        if let jobTag = jobTag {
            try encodeContainer.encode(jobTag, forKey: .jobTag)
        }
        if let kMSKeyId = kMSKeyId {
            try encodeContainer.encode(kMSKeyId, forKey: .kMSKeyId)
        }
        if let notificationChannel = notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let outputConfig = outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
    }
}
