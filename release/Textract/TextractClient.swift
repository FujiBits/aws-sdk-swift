// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation
import Logging

public class TextractClient {
    let client: ClientRuntime.SdkHttpClient
    let config: AWSClientRuntime.AWSClientConfiguration
    let serviceName = "Textract"
    let encoder: ClientRuntime.RequestEncoder
    let decoder: ClientRuntime.ResponseDecoder

    public init(config: AWSClientRuntime.AWSClientConfiguration) {
        client = ClientRuntime.SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public convenience init(region: Swift.String? = nil) throws {
        let unwrappedRegion = region ?? "us-east-1"
        let config = try TextractClientConfiguration(region: unwrappedRegion)
        self.init(config: config)
    }

    deinit {
        client.close()
    }

    public class TextractClientConfiguration: AWSClientRuntime.AWSClientConfiguration {

        public var clientLogMode: ClientRuntime.ClientLogMode
        public var decoder: ClientRuntime.ResponseDecoder?
        public var encoder: ClientRuntime.RequestEncoder?
        public var httpClientConfiguration: ClientRuntime.HttpClientConfiguration
        public var httpClientEngine: ClientRuntime.HttpClientEngine
        public var idempotencyTokenGenerator: ClientRuntime.IdempotencyTokenGenerator
        public var logger: ClientRuntime.LogAgent
        public var retrier: ClientRuntime.Retrier

        public var credentialsProvider: AWSClientRuntime.AWSCredentialsProvider
        public var endpointResolver: AWSClientRuntime.EndpointResolver
        public var region: Swift.String
        public var signingRegion: Swift.String

        public init(
            credentialsProvider: AWSClientRuntime.AWSCredentialsProvider? = nil,
            endpointResolver: AWSClientRuntime.EndpointResolver? = nil,
            region: Swift.String,
            signingRegion: Swift.String? = nil,
            runtimeConfig: ClientRuntime.SDKRuntimeConfiguration
        ) throws {
            self.region = region
            self.signingRegion = signingRegion ?? region
            self.endpointResolver = endpointResolver ?? DefaultEndpointResolver()
            if let credProvider = credentialsProvider {
                self.credentialsProvider = credProvider
            } else {
                self.credentialsProvider = try AWSClientRuntime.AWSCredentialsProvider.fromChain()
            }
            self.clientLogMode = runtimeConfig.clientLogMode
            self.decoder = runtimeConfig.decoder
            self.encoder = runtimeConfig.encoder
            self.httpClientConfiguration = runtimeConfig.httpClientConfiguration
            self.httpClientEngine = runtimeConfig.httpClientEngine
            self.idempotencyTokenGenerator = runtimeConfig.idempotencyTokenGenerator
            self.logger = runtimeConfig.logger
            self.retrier = runtimeConfig.retrier
        }

        public convenience init(
            credentialsProvider: AWSClientRuntime.AWSCredentialsProvider? = nil,
            endpointResolver: AWSClientRuntime.EndpointResolver? = nil,
            region: Swift.String,
            signingRegion: Swift.String? = nil
        ) throws {
            let defaultRuntimeConfig = try ClientRuntime.DefaultSDKRuntimeConfiguration("TextractClient")
            try self.init(credentialsProvider: credentialsProvider, endpointResolver: endpointResolver, region: region, signingRegion: signingRegion, runtimeConfig: defaultRuntimeConfig)
        }
    }
}

public struct TextractClientLogHandlerFactory: ClientRuntime.SDKLogHandlerFactory {
    public var label = "TextractClient"
    let logLevel: ClientRuntime.SDKLogLevel
    public func construct(label: String) -> LogHandler {
        var handler = StreamLogHandler.standardOutput(label: label)
        handler.logLevel = logLevel.toLoggerType()
        return handler
    }
    public init(logLevel: ClientRuntime.SDKLogLevel) {
        self.logLevel = logLevel
    }
}

extension TextractClient: TextractClientProtocol {
    /// <p>Analyzes an input document for relationships between detected items.  </p>
    ///          <p>The types of information returned are as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>Form data (key-value pairs). The related information is returned in two <a>Block</a> objects, each of type <code>KEY_VALUE_SET</code>: a KEY
    ///                   <code>Block</code> object and a VALUE <code>Block</code> object. For example,
    ///                   <i>Name: Ana Silva Carolina</i> contains a key and value.
    ///                   <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is
    ///                the value.</p>
    ///             </li>
    ///             <li>
    ///                <p>Table and table cell data. A TABLE <code>Block</code> object contains information about a detected table. A CELL
    ///                <code>Block</code> object is returned for each cell in a table.</p>
    ///             </li>
    ///             <li>
    ///                <p>Lines and words of text. A LINE <code>Block</code> object contains one or more WORD <code>Block</code> objects.
    ///         All lines and words that are detected in the document are returned (including text that doesn't have a
    ///                relationship with the value of <code>FeatureTypes</code>). </p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.
    ///          A SELECTION_ELEMENT <code>Block</code> object contains information about a selection element,
    ///          including the selection status.</p>
    ///          <p>You can choose which type of analysis to perform by specifying the <code>FeatureTypes</code> list.
    ///       </p>
    ///          <p>The output is returned in a list of <code>Block</code> objects.</p>
    ///          <p>
    ///             <code>AnalyzeDocument</code> is a synchronous operation. To analyze documents
    ///       asynchronously, use <a>StartDocumentAnalysis</a>.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document Text Analysis</a>.</p>
    public func analyzeDocument(input: AnalyzeDocumentInput, completion: @escaping (ClientRuntime.SdkResult<AnalyzeDocumentOutputResponse, AnalyzeDocumentOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "analyzeDocument")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "textract.\(config.region).amazonaws.com")
                      .withSigningName(value: "textract")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AnalyzeDocumentInput, AnalyzeDocumentOutputResponse, AnalyzeDocumentOutputError>(id: "analyzeDocument")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AnalyzeDocumentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AnalyzeDocumentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AnalyzeDocumentInput, AnalyzeDocumentOutputResponse, AnalyzeDocumentOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: AnalyzeDocumentInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<AnalyzeDocumentInput, AnalyzeDocumentOutputResponse, AnalyzeDocumentOutputError>(xAmzTarget: "Textract.AnalyzeDocument"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Detects text in the input document. Amazon Textract can detect lines of text and the
    ///          words that make up a line of text. The input document must be an image in JPEG or PNG
    ///          format. <code>DetectDocumentText</code> returns the detected text in an array of <a>Block</a> objects. </p>
    ///          <p>Each document page has as an associated <code>Block</code> of type PAGE. Each PAGE <code>Block</code> object
    ///          is the parent of LINE <code>Block</code> objects that represent the lines of detected text on a page. A LINE <code>Block</code> object is
    ///          a parent for each word that makes up the line. Words are represented by <code>Block</code> objects of type WORD.</p>
    ///
    ///          <p>
    ///             <code>DetectDocumentText</code> is a synchronous operation. To analyze documents
    ///          asynchronously, use <a>StartDocumentTextDetection</a>.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document Text Detection</a>.</p>
    public func detectDocumentText(input: DetectDocumentTextInput, completion: @escaping (ClientRuntime.SdkResult<DetectDocumentTextOutputResponse, DetectDocumentTextOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "detectDocumentText")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "textract.\(config.region).amazonaws.com")
                      .withSigningName(value: "textract")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DetectDocumentTextInput, DetectDocumentTextOutputResponse, DetectDocumentTextOutputError>(id: "detectDocumentText")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DetectDocumentTextInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DetectDocumentTextInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DetectDocumentTextInput, DetectDocumentTextOutputResponse, DetectDocumentTextOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DetectDocumentTextInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<DetectDocumentTextInput, DetectDocumentTextOutputResponse, DetectDocumentTextOutputError>(xAmzTarget: "Textract.DetectDocumentText"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document.</p>
    ///          <p>You start asynchronous text analysis by calling <a>StartDocumentAnalysis</a>, which returns a job identifier
    ///             (<code>JobId</code>). When the text analysis operation finishes, Amazon Textract publishes a
    ///          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to
    ///             <code>StartDocumentAnalysis</code>. To get the results of the text-detection operation,
    ///          first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.
    ///          If so, call <code>GetDocumentAnalysis</code>, and pass the job identifier
    ///             (<code>JobId</code>) from the initial call to <code>StartDocumentAnalysis</code>.</p>
    ///          <p>
    ///             <code>GetDocumentAnalysis</code> returns an array of <a>Block</a> objects. The following
    ///          types of information are returned: </p>
    ///          <ul>
    ///             <li>
    ///                <p>Form data (key-value pairs). The related information is returned in two <a>Block</a> objects, each of type <code>KEY_VALUE_SET</code>: a KEY
    ///             <code>Block</code> object and a VALUE <code>Block</code> object. For example,
    ///             <i>Name: Ana Silva Carolina</i> contains a key and value.
    ///             <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is
    ///             the value.</p>
    ///             </li>
    ///             <li>
    ///                <p>Table and table cell data. A TABLE <code>Block</code> object contains information about a detected table. A CELL
    ///             <code>Block</code> object is returned for each cell in a table.</p>
    ///             </li>
    ///             <li>
    ///                <p>Lines and words of text. A LINE <code>Block</code> object contains one or more WORD <code>Block</code> objects.
    ///             All lines and words that are detected in the document are returned (including text that doesn't have a
    ///             relationship with the value of the <code>StartDocumentAnalysis</code>
    ///                   <code>FeatureTypes</code> input parameter). </p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.
    ///          A SELECTION_ELEMENT <code>Block</code> object contains information about a selection element,
    ///          including the selection status.</p>
    ///
    ///
    ///
    ///          <p>Use the <code>MaxResults</code> parameter to limit the number of blocks that are
    ///          returned. If there are more results than specified in <code>MaxResults</code>, the value of
    ///             <code>NextToken</code> in the operation response contains a pagination token for getting
    ///          the next set of results. To get the next page of results, call
    ///             <code>GetDocumentAnalysis</code>, and populate the <code>NextToken</code> request
    ///          parameter with the token value that's returned from the previous call to
    ///             <code>GetDocumentAnalysis</code>.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document Text Analysis</a>.</p>
    public func getDocumentAnalysis(input: GetDocumentAnalysisInput, completion: @escaping (ClientRuntime.SdkResult<GetDocumentAnalysisOutputResponse, GetDocumentAnalysisOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getDocumentAnalysis")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "textract.\(config.region).amazonaws.com")
                      .withSigningName(value: "textract")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetDocumentAnalysisInput, GetDocumentAnalysisOutputResponse, GetDocumentAnalysisOutputError>(id: "getDocumentAnalysis")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetDocumentAnalysisInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetDocumentAnalysisInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetDocumentAnalysisInput, GetDocumentAnalysisOutputResponse, GetDocumentAnalysisOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: GetDocumentAnalysisInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<GetDocumentAnalysisInput, GetDocumentAnalysisOutputResponse, GetDocumentAnalysisOutputError>(xAmzTarget: "Textract.GetDocumentAnalysis"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets the results for an Amazon Textract asynchronous operation that detects text in a document.
    ///      Amazon Textract can detect lines of text and the words that make up a line of text.</p>
    ///          <p>You start asynchronous text detection by calling <a>StartDocumentTextDetection</a>, which returns a job identifier
    ///             (<code>JobId</code>). When the text detection operation finishes, Amazon Textract publishes a
    ///          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to
    ///             <code>StartDocumentTextDetection</code>. To get the results of the text-detection
    ///          operation, first check that the status value published to the Amazon SNS topic is
    ///             <code>SUCCEEDED</code>. If so, call <code>GetDocumentTextDetection</code>, and pass the
    ///          job identifier (<code>JobId</code>) from the initial call to
    ///             <code>StartDocumentTextDetection</code>.</p>
    ///          <p>
    ///             <code>GetDocumentTextDetection</code> returns an array of <a>Block</a>
    ///          objects. </p>
    ///          <p>Each document page has as an associated <code>Block</code> of type PAGE. Each PAGE <code>Block</code> object
    ///         is the parent of LINE <code>Block</code> objects that represent the lines of detected text on a page. A LINE <code>Block</code> object is
    ///         a parent for each word that makes up the line. Words are represented by <code>Block</code> objects of type WORD.</p>
    ///
    ///          <p>Use the MaxResults parameter to limit the number of blocks that are returned. If there
    ///          are more results than specified in <code>MaxResults</code>, the value of
    ///             <code>NextToken</code> in the operation response contains a pagination token for getting
    ///          the next set of results. To get the next page of results, call
    ///             <code>GetDocumentTextDetection</code>, and populate the <code>NextToken</code> request
    ///          parameter with the token value that's returned from the previous call to
    ///             <code>GetDocumentTextDetection</code>.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document Text Detection</a>.</p>
    public func getDocumentTextDetection(input: GetDocumentTextDetectionInput, completion: @escaping (ClientRuntime.SdkResult<GetDocumentTextDetectionOutputResponse, GetDocumentTextDetectionOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getDocumentTextDetection")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "textract.\(config.region).amazonaws.com")
                      .withSigningName(value: "textract")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetDocumentTextDetectionInput, GetDocumentTextDetectionOutputResponse, GetDocumentTextDetectionOutputError>(id: "getDocumentTextDetection")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetDocumentTextDetectionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetDocumentTextDetectionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetDocumentTextDetectionInput, GetDocumentTextDetectionOutputResponse, GetDocumentTextDetectionOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: GetDocumentTextDetectionInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<GetDocumentTextDetectionInput, GetDocumentTextDetectionOutputResponse, GetDocumentTextDetectionOutputError>(xAmzTarget: "Textract.GetDocumentTextDetection"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Starts the asynchronous analysis of an input document for relationships between detected
    ///          items such as key-value pairs, tables, and selection elements.</p>
    ///
    ///          <p>
    ///             <code>StartDocumentAnalysis</code> can analyze text in documents that are in JPEG, PNG, and PDF format. The
    ///          documents are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a> to specify the bucket name and file name
    ///          of the document.
    ///          </p>
    ///          <p>
    ///             <code>StartDocumentAnalysis</code> returns a job identifier
    ///             (<code>JobId</code>) that you use to get the results of the operation. When text
    ///          analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS)
    ///          topic that you specify in <code>NotificationChannel</code>. To get the results of the text
    ///          analysis operation, first check that the status value published to the Amazon SNS topic is
    ///             <code>SUCCEEDED</code>. If so, call <a>GetDocumentAnalysis</a>, and pass
    ///          the job identifier (<code>JobId</code>) from the initial call to
    ///             <code>StartDocumentAnalysis</code>.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document Text Analysis</a>.</p>
    public func startDocumentAnalysis(input: StartDocumentAnalysisInput, completion: @escaping (ClientRuntime.SdkResult<StartDocumentAnalysisOutputResponse, StartDocumentAnalysisOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "startDocumentAnalysis")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "textract.\(config.region).amazonaws.com")
                      .withSigningName(value: "textract")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<StartDocumentAnalysisInput, StartDocumentAnalysisOutputResponse, StartDocumentAnalysisOutputError>(id: "startDocumentAnalysis")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: StartDocumentAnalysisInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: StartDocumentAnalysisInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<StartDocumentAnalysisInput, StartDocumentAnalysisOutputResponse, StartDocumentAnalysisOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: StartDocumentAnalysisInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<StartDocumentAnalysisInput, StartDocumentAnalysisOutputResponse, StartDocumentAnalysisOutputError>(xAmzTarget: "Textract.StartDocumentAnalysis"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of
    ///          text and the words that make up a line of text.</p>
    ///          <p>
    ///             <code>StartDocumentTextDetection</code> can analyze text in documents that are in JPEG, PNG, and PDF format. The
    ///         documents are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a> to specify the bucket name and file name
    ///         of the document.
    ///      </p>
    ///          <p>
    ///             <code>StartTextDetection</code> returns a job identifier
    ///             (<code>JobId</code>) that you use to get the results of the operation. When text
    ///          detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS)
    ///          topic that you specify in <code>NotificationChannel</code>. To get the results of the text
    ///          detection operation, first check that the status value published to the Amazon SNS topic is
    ///             <code>SUCCEEDED</code>. If so, call <a>GetDocumentTextDetection</a>, and
    ///          pass the job identifier (<code>JobId</code>) from the initial call to
    ///             <code>StartDocumentTextDetection</code>.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document Text Detection</a>.</p>
    public func startDocumentTextDetection(input: StartDocumentTextDetectionInput, completion: @escaping (ClientRuntime.SdkResult<StartDocumentTextDetectionOutputResponse, StartDocumentTextDetectionOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "startDocumentTextDetection")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "textract.\(config.region).amazonaws.com")
                      .withSigningName(value: "textract")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<StartDocumentTextDetectionInput, StartDocumentTextDetectionOutputResponse, StartDocumentTextDetectionOutputError>(id: "startDocumentTextDetection")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: StartDocumentTextDetectionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: StartDocumentTextDetectionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<StartDocumentTextDetectionInput, StartDocumentTextDetectionOutputResponse, StartDocumentTextDetectionOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: StartDocumentTextDetectionInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<StartDocumentTextDetectionInput, StartDocumentTextDetectionOutputResponse, StartDocumentTextDetectionOutputError>(xAmzTarget: "Textract.StartDocumentTextDetection"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
