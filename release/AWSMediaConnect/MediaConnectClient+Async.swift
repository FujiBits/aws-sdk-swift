// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension MediaConnectClient {
    /// Adds media streams to an existing flow. After you add a media stream to a flow, you can associate it with a source and/or an output that uses the ST 2110 JPEG XS or CDI protocol.
    func addFlowMediaStreams(input: AddFlowMediaStreamsInput) async throws -> AddFlowMediaStreamsOutputResponse
    {
        typealias addFlowMediaStreamsContinuation = CheckedContinuation<AddFlowMediaStreamsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addFlowMediaStreamsContinuation) in
            addFlowMediaStreams(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds outputs to an existing flow. You can create up to 50 outputs per flow.
    func addFlowOutputs(input: AddFlowOutputsInput) async throws -> AddFlowOutputsOutputResponse
    {
        typealias addFlowOutputsContinuation = CheckedContinuation<AddFlowOutputsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addFlowOutputsContinuation) in
            addFlowOutputs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds Sources to flow
    func addFlowSources(input: AddFlowSourcesInput) async throws -> AddFlowSourcesOutputResponse
    {
        typealias addFlowSourcesContinuation = CheckedContinuation<AddFlowSourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addFlowSourcesContinuation) in
            addFlowSources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds VPC interfaces to flow
    func addFlowVpcInterfaces(input: AddFlowVpcInterfacesInput) async throws -> AddFlowVpcInterfacesOutputResponse
    {
        typealias addFlowVpcInterfacesContinuation = CheckedContinuation<AddFlowVpcInterfacesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addFlowVpcInterfacesContinuation) in
            addFlowVpcInterfaces(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new flow. The request must include one source. The request optionally can include outputs (up to 50) and entitlements (up to 50).
    func createFlow(input: CreateFlowInput) async throws -> CreateFlowOutputResponse
    {
        typealias createFlowContinuation = CheckedContinuation<CreateFlowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFlowContinuation) in
            createFlow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a flow. Before you can delete a flow, you must stop the flow.
    func deleteFlow(input: DeleteFlowInput) async throws -> DeleteFlowOutputResponse
    {
        typealias deleteFlowContinuation = CheckedContinuation<DeleteFlowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFlowContinuation) in
            deleteFlow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Displays the details of a flow. The response includes the flow ARN, name, and Availability Zone, as well as details about the source, outputs, and entitlements.
    func describeFlow(input: DescribeFlowInput) async throws -> DescribeFlowOutputResponse
    {
        typealias describeFlowContinuation = CheckedContinuation<DescribeFlowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeFlowContinuation) in
            describeFlow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Displays the details of an offering. The response includes the offering description, duration, outbound bandwidth, price, and Amazon Resource Name (ARN).
    func describeOffering(input: DescribeOfferingInput) async throws -> DescribeOfferingOutputResponse
    {
        typealias describeOfferingContinuation = CheckedContinuation<DescribeOfferingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeOfferingContinuation) in
            describeOffering(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Displays the details of a reservation. The response includes the reservation name, state, start date and time, and the details of the offering that make up the rest of the reservation (such as price, duration, and outbound bandwidth).
    func describeReservation(input: DescribeReservationInput) async throws -> DescribeReservationOutputResponse
    {
        typealias describeReservationContinuation = CheckedContinuation<DescribeReservationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeReservationContinuation) in
            describeReservation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Grants entitlements to an existing flow.
    func grantFlowEntitlements(input: GrantFlowEntitlementsInput) async throws -> GrantFlowEntitlementsOutputResponse
    {
        typealias grantFlowEntitlementsContinuation = CheckedContinuation<GrantFlowEntitlementsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: grantFlowEntitlementsContinuation) in
            grantFlowEntitlements(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Displays a list of all entitlements that have been granted to this account. This request returns 20 results per page.
    func listEntitlements(input: ListEntitlementsInput) async throws -> ListEntitlementsOutputResponse
    {
        typealias listEntitlementsContinuation = CheckedContinuation<ListEntitlementsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEntitlementsContinuation) in
            listEntitlements(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Displays a list of flows that are associated with this account. This request returns a paginated result.
    func listFlows(input: ListFlowsInput) async throws -> ListFlowsOutputResponse
    {
        typealias listFlowsContinuation = CheckedContinuation<ListFlowsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFlowsContinuation) in
            listFlows(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Displays a list of all offerings that are available to this account in the current AWS Region. If you have an active reservation (which means you've purchased an offering that has already started and hasn't expired yet), your account isn't eligible for other offerings.
    func listOfferings(input: ListOfferingsInput) async throws -> ListOfferingsOutputResponse
    {
        typealias listOfferingsContinuation = CheckedContinuation<ListOfferingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOfferingsContinuation) in
            listOfferings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Displays a list of all reservations that have been purchased by this account in the current AWS Region. This list includes all reservations in all states (such as active and expired).
    func listReservations(input: ListReservationsInput) async throws -> ListReservationsOutputResponse
    {
        typealias listReservationsContinuation = CheckedContinuation<ListReservationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listReservationsContinuation) in
            listReservations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List all tags on an AWS Elemental MediaConnect resource
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Submits a request to purchase an offering. If you already have an active reservation, you can't purchase another offering.
    func purchaseOffering(input: PurchaseOfferingInput) async throws -> PurchaseOfferingOutputResponse
    {
        typealias purchaseOfferingContinuation = CheckedContinuation<PurchaseOfferingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: purchaseOfferingContinuation) in
            purchaseOffering(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a media stream from a flow. This action is only available if the media stream is not associated with a source or output.
    func removeFlowMediaStream(input: RemoveFlowMediaStreamInput) async throws -> RemoveFlowMediaStreamOutputResponse
    {
        typealias removeFlowMediaStreamContinuation = CheckedContinuation<RemoveFlowMediaStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeFlowMediaStreamContinuation) in
            removeFlowMediaStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes an output from an existing flow. This request can be made only on an output that does not have an entitlement associated with it. If the output has an entitlement, you must revoke the entitlement instead. When an entitlement is revoked from a flow, the service automatically removes the associated output.
    func removeFlowOutput(input: RemoveFlowOutputInput) async throws -> RemoveFlowOutputOutputResponse
    {
        typealias removeFlowOutputContinuation = CheckedContinuation<RemoveFlowOutputOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeFlowOutputContinuation) in
            removeFlowOutput(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a source from an existing flow. This request can be made only if there is more than one source on the flow.
    func removeFlowSource(input: RemoveFlowSourceInput) async throws -> RemoveFlowSourceOutputResponse
    {
        typealias removeFlowSourceContinuation = CheckedContinuation<RemoveFlowSourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeFlowSourceContinuation) in
            removeFlowSource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a VPC Interface from an existing flow. This request can be made only on a VPC interface that does not have a Source or Output associated with it. If the VPC interface is referenced by a Source or Output, you must first delete or update the Source or Output to no longer reference the VPC interface.
    func removeFlowVpcInterface(input: RemoveFlowVpcInterfaceInput) async throws -> RemoveFlowVpcInterfaceOutputResponse
    {
        typealias removeFlowVpcInterfaceContinuation = CheckedContinuation<RemoveFlowVpcInterfaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeFlowVpcInterfaceContinuation) in
            removeFlowVpcInterface(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Revokes an entitlement from a flow. Once an entitlement is revoked, the content becomes unavailable to the subscriber and the associated output is removed.
    func revokeFlowEntitlement(input: RevokeFlowEntitlementInput) async throws -> RevokeFlowEntitlementOutputResponse
    {
        typealias revokeFlowEntitlementContinuation = CheckedContinuation<RevokeFlowEntitlementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: revokeFlowEntitlementContinuation) in
            revokeFlowEntitlement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts a flow.
    func startFlow(input: StartFlowInput) async throws -> StartFlowOutputResponse
    {
        typealias startFlowContinuation = CheckedContinuation<StartFlowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startFlowContinuation) in
            startFlow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops a flow.
    func stopFlow(input: StopFlowInput) async throws -> StopFlowOutputResponse
    {
        typealias stopFlowContinuation = CheckedContinuation<StopFlowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopFlowContinuation) in
            stopFlow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates the specified tags to a resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are deleted as well.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes specified tags from a resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates flow
    func updateFlow(input: UpdateFlowInput) async throws -> UpdateFlowOutputResponse
    {
        typealias updateFlowContinuation = CheckedContinuation<UpdateFlowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFlowContinuation) in
            updateFlow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// You can change an entitlement's description, subscribers, and encryption. If you change the subscribers, the service will remove the outputs that are are used by the subscribers that are removed.
    func updateFlowEntitlement(input: UpdateFlowEntitlementInput) async throws -> UpdateFlowEntitlementOutputResponse
    {
        typealias updateFlowEntitlementContinuation = CheckedContinuation<UpdateFlowEntitlementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFlowEntitlementContinuation) in
            updateFlowEntitlement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing media stream.
    func updateFlowMediaStream(input: UpdateFlowMediaStreamInput) async throws -> UpdateFlowMediaStreamOutputResponse
    {
        typealias updateFlowMediaStreamContinuation = CheckedContinuation<UpdateFlowMediaStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFlowMediaStreamContinuation) in
            updateFlowMediaStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing flow output.
    func updateFlowOutput(input: UpdateFlowOutputInput) async throws -> UpdateFlowOutputOutputResponse
    {
        typealias updateFlowOutputContinuation = CheckedContinuation<UpdateFlowOutputOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFlowOutputContinuation) in
            updateFlowOutput(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the source of a flow.
    func updateFlowSource(input: UpdateFlowSourceInput) async throws -> UpdateFlowSourceOutputResponse
    {
        typealias updateFlowSourceContinuation = CheckedContinuation<UpdateFlowSourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFlowSourceContinuation) in
            updateFlowSource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
