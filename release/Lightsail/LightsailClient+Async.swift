// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension LightsailClient {
    /// <p>Allocates a static IP address.</p>
    func allocateStaticIp(input: AllocateStaticIpInput) async throws -> AllocateStaticIpOutputResponse
    {
        typealias allocateStaticIpContinuation = CheckedContinuation<AllocateStaticIpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: allocateStaticIpContinuation) in
            allocateStaticIp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attaches an SSL/TLS certificate to your Amazon Lightsail content delivery network (CDN)
    ///       distribution.</p>
    ///          <p>After the certificate is attached, your distribution accepts HTTPS traffic for all of the
    ///       domains that are associated with the certificate.</p>
    ///          <p>Use the <code>CreateCertificate</code> action to create a certificate that you can attach
    ///       to your distribution.</p>
    ///          <important>
    ///             <p>Only certificates created in the <code>us-east-1</code> AWS Region can be attached to
    ///         Lightsail distributions. Lightsail distributions are global resources that can reference
    ///         an origin in any AWS Region, and distribute its content globally. However, all
    ///         distributions are located in the <code>us-east-1</code> Region.</p>
    ///          </important>
    func attachCertificateToDistribution(input: AttachCertificateToDistributionInput) async throws -> AttachCertificateToDistributionOutputResponse
    {
        typealias attachCertificateToDistributionContinuation = CheckedContinuation<AttachCertificateToDistributionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachCertificateToDistributionContinuation) in
            attachCertificateToDistribution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attaches a block storage disk to a running or stopped Lightsail instance and exposes it
    ///       to the instance with the specified disk name.</p>
    ///          <p>The <code>attach disk</code> operation supports tag-based access control via resource tags
    ///       applied to the resource identified by <code>disk name</code>. For more information, see the
    ///         <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func attachDisk(input: AttachDiskInput) async throws -> AttachDiskOutputResponse
    {
        typealias attachDiskContinuation = CheckedContinuation<AttachDiskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachDiskContinuation) in
            attachDisk(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attaches one or more Lightsail instances to a load balancer.</p>
    ///          <p>After some time, the instances are attached to the load balancer and the health check
    ///       status is available.</p>
    ///          <p>The <code>attach instances to load balancer</code> operation supports tag-based access
    ///       control via resource tags applied to the resource identified by <code>load balancer
    ///         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func attachInstancesToLoadBalancer(input: AttachInstancesToLoadBalancerInput) async throws -> AttachInstancesToLoadBalancerOutputResponse
    {
        typealias attachInstancesToLoadBalancerContinuation = CheckedContinuation<AttachInstancesToLoadBalancerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachInstancesToLoadBalancerContinuation) in
            attachInstancesToLoadBalancer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attaches a Transport Layer Security (TLS) certificate to your load balancer. TLS is just
    ///       an updated, more secure version of Secure Socket Layer (SSL).</p>
    ///          <p>Once you create and validate your certificate, you can attach it to your load balancer.
    ///       You can also use this API to rotate the certificates on your account. Use the
    ///         <code>AttachLoadBalancerTlsCertificate</code> action with the non-attached certificate, and
    ///       it will replace the existing one and become the attached certificate.</p>
    ///          <p>The <code>AttachLoadBalancerTlsCertificate</code> operation supports tag-based access
    ///       control via resource tags applied to the resource identified by <code>load balancer
    ///         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func attachLoadBalancerTlsCertificate(input: AttachLoadBalancerTlsCertificateInput) async throws -> AttachLoadBalancerTlsCertificateOutputResponse
    {
        typealias attachLoadBalancerTlsCertificateContinuation = CheckedContinuation<AttachLoadBalancerTlsCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachLoadBalancerTlsCertificateContinuation) in
            attachLoadBalancerTlsCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attaches a static IP address to a specific Amazon Lightsail instance.</p>
    func attachStaticIp(input: AttachStaticIpInput) async throws -> AttachStaticIpOutputResponse
    {
        typealias attachStaticIpContinuation = CheckedContinuation<AttachStaticIpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachStaticIpContinuation) in
            attachStaticIp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Closes ports for a specific Amazon Lightsail instance.</p>
    ///          <p>The <code>CloseInstancePublicPorts</code> action supports tag-based access control via
    ///       resource tags applied to the resource identified by <code>instanceName</code>. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func closeInstancePublicPorts(input: CloseInstancePublicPortsInput) async throws -> CloseInstancePublicPortsOutputResponse
    {
        typealias closeInstancePublicPortsContinuation = CheckedContinuation<CloseInstancePublicPortsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: closeInstancePublicPortsContinuation) in
            closeInstancePublicPorts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Copies a manual snapshot of an instance or disk as another manual snapshot, or copies an
    ///       automatic snapshot of an instance or disk as a manual snapshot. This operation can also be
    ///       used to copy a manual or automatic snapshot of an instance or a disk from one AWS Region to
    ///       another in Amazon Lightsail.</p>
    ///          <p>When copying a <i>manual snapshot</i>, be sure to define the <code>source
    ///         region</code>, <code>source snapshot name</code>, and <code>target snapshot name</code>
    ///       parameters.</p>
    ///          <p>When copying an <i>automatic snapshot</i>, be sure to define the
    ///         <code>source region</code>, <code>source resource name</code>, <code>target snapshot
    ///         name</code>, and either the <code>restore date</code> or the <code>use latest restorable
    ///         auto snapshot</code> parameters.</p>
    func copySnapshot(input: CopySnapshotInput) async throws -> CopySnapshotOutputResponse
    {
        typealias copySnapshotContinuation = CheckedContinuation<CopySnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: copySnapshotContinuation) in
            copySnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an SSL/TLS certificate for an Amazon Lightsail content delivery network (CDN)
    ///       distribution and a container service.</p>
    ///          <p>After the certificate is valid, use the <code>AttachCertificateToDistribution</code>
    ///       action to use the certificate and its domains with your distribution. Or use the
    ///         <code>UpdateContainerService</code> action to use the certificate and its domains with your
    ///       container service.</p>
    ///          <important>
    ///             <p>Only certificates created in the <code>us-east-1</code> AWS Region can be attached to
    ///         Lightsail distributions. Lightsail distributions are global resources that can reference
    ///         an origin in any AWS Region, and distribute its content globally. However, all
    ///         distributions are located in the <code>us-east-1</code> Region.</p>
    ///          </important>
    func createCertificate(input: CreateCertificateInput) async throws -> CreateCertificateOutputResponse
    {
        typealias createCertificateContinuation = CheckedContinuation<CreateCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCertificateContinuation) in
            createCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an AWS CloudFormation stack, which creates a new Amazon EC2 instance from an exported
    ///       Amazon Lightsail snapshot. This operation results in a CloudFormation stack record that can be
    ///       used to track the AWS CloudFormation stack created. Use the <code>get cloud formation stack
    ///         records</code> operation to get a list of the CloudFormation stacks created.</p>
    ///          <important>
    ///             <p>Wait until after your new Amazon EC2 instance is created before running the <code>create
    ///           cloud formation stack</code> operation again with the same export snapshot record.</p>
    ///          </important>
    func createCloudFormationStack(input: CreateCloudFormationStackInput) async throws -> CreateCloudFormationStackOutputResponse
    {
        typealias createCloudFormationStackContinuation = CheckedContinuation<CreateCloudFormationStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCloudFormationStackContinuation) in
            createCloudFormationStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an email or SMS text message contact method.</p>
    ///          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
    ///       You can add one email address and one mobile phone number contact method in each AWS Region.
    ///       However, SMS text messaging is not supported in some AWS Regions, and SMS text messages
    ///       cannot be sent to some countries/regions. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    func createContactMethod(input: CreateContactMethodInput) async throws -> CreateContactMethodOutputResponse
    {
        typealias createContactMethodContinuation = CheckedContinuation<CreateContactMethodOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createContactMethodContinuation) in
            createContactMethod(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an Amazon Lightsail container service.</p>
    ///
    ///          <p>A Lightsail container service is a compute resource to which you can deploy containers.
    ///       For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-services">Container services in Amazon Lightsail</a> in the <i>Lightsail Dev
    ///         Guide</i>.</p>
    func createContainerService(input: CreateContainerServiceInput) async throws -> CreateContainerServiceOutputResponse
    {
        typealias createContainerServiceContinuation = CheckedContinuation<CreateContainerServiceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createContainerServiceContinuation) in
            createContainerService(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a deployment for your Amazon Lightsail container service.</p>
    ///
    ///          <p>A deployment specifies the containers that will be launched on the container service and
    ///       their settings, such as the ports to open, the environment variables to apply, and the launch
    ///       command to run. It also specifies the container that will serve as the public endpoint of the
    ///       deployment and its settings, such as the HTTP or HTTPS port to use, and the health check
    ///       configuration.</p>
    ///
    ///          <p>You can deploy containers to your container service using container images from a public
    ///       registry like Docker Hub, or from your local machine. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-container-images">Creating container images for your Amazon Lightsail container services</a> in the
    ///         <i>Lightsail Dev Guide</i>.</p>
    func createContainerServiceDeployment(input: CreateContainerServiceDeploymentInput) async throws -> CreateContainerServiceDeploymentOutputResponse
    {
        typealias createContainerServiceDeploymentContinuation = CheckedContinuation<CreateContainerServiceDeploymentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createContainerServiceDeploymentContinuation) in
            createContainerServiceDeployment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a temporary set of log in credentials that you can use to log in to the Docker
    ///       process on your local machine. After you're logged in, you can use the native Docker commands
    ///       to push your local container images to the container image registry of your Amazon Lightsail
    ///       account so that you can use them with your Lightsail container service. The log in
    ///       credentials expire 12 hours after they are created, at which point you will need to create a
    ///       new set of log in credentials.</p>
    ///
    ///          <note>
    ///             <p>You can only push container images to the container service registry of your Lightsail
    ///         account. You cannot pull container images or perform any other container image management
    ///         actions on the container service registry.</p>
    ///          </note>
    ///
    ///          <p>After you push your container images to the container image registry of your Lightsail
    ///       account, use the <code>RegisterContainerImage</code> action to register the pushed images to a
    ///       specific Lightsail container service.</p>
    ///
    ///          <note>
    ///             <p>This action is not required if you install and use the Lightsail Control
    ///         (lightsailctl) plugin to push container images to your Lightsail container service. For
    ///         more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-pushing-container-images">Pushing and managing container images on your Amazon Lightsail container services</a>
    ///         in the <i>Lightsail Dev Guide</i>.</p>
    ///          </note>
    func createContainerServiceRegistryLogin(input: CreateContainerServiceRegistryLoginInput) async throws -> CreateContainerServiceRegistryLoginOutputResponse
    {
        typealias createContainerServiceRegistryLoginContinuation = CheckedContinuation<CreateContainerServiceRegistryLoginOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createContainerServiceRegistryLoginContinuation) in
            createContainerServiceRegistryLogin(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a block storage disk that can be attached to an Amazon Lightsail instance in the
    ///       same Availability Zone (e.g., <code>us-east-2a</code>).</p>
    ///          <p>The <code>create disk</code> operation supports tag-based access control via request tags.
    ///       For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func createDisk(input: CreateDiskInput) async throws -> CreateDiskOutputResponse
    {
        typealias createDiskContinuation = CheckedContinuation<CreateDiskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDiskContinuation) in
            createDisk(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a block storage disk from a manual or automatic snapshot of a disk. The resulting
    ///       disk can be attached to an Amazon Lightsail instance in the same Availability Zone (e.g.,
    ///         <code>us-east-2a</code>).</p>
    ///          <p>The <code>create disk from snapshot</code> operation supports tag-based access control via
    ///       request tags and resource tags applied to the resource identified by <code>disk snapshot
    ///         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func createDiskFromSnapshot(input: CreateDiskFromSnapshotInput) async throws -> CreateDiskFromSnapshotOutputResponse
    {
        typealias createDiskFromSnapshotContinuation = CheckedContinuation<CreateDiskFromSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDiskFromSnapshotContinuation) in
            createDiskFromSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a snapshot of a block storage disk. You can use snapshots for backups, to make
    ///       copies of disks, and to save data before shutting down a Lightsail instance.</p>
    ///          <p>You can take a snapshot of an attached disk that is in use; however, snapshots only
    ///       capture data that has been written to your disk at the time the snapshot command is issued.
    ///       This may exclude any data that has been cached by any applications or the operating system. If
    ///       you can pause any file systems on the disk long enough to take a snapshot, your snapshot
    ///       should be complete. Nevertheless, if you cannot pause all file writes to the disk, you should
    ///       unmount the disk from within the Lightsail instance, issue the create disk snapshot command,
    ///       and then remount the disk to ensure a consistent and complete snapshot. You may remount and
    ///       use your disk while the snapshot status is pending.</p>
    ///          <p>You can also use this operation to create a snapshot of an instance's system volume. You
    ///       might want to do this, for example, to recover data from the system volume of a botched
    ///       instance or to create a backup of the system volume like you would for a block storage disk.
    ///       To create a snapshot of a system volume, just define the <code>instance name</code> parameter
    ///       when issuing the snapshot command, and a snapshot of the defined instance's system volume will
    ///       be created. After the snapshot is available, you can create a block storage disk from the
    ///       snapshot and attach it to a running instance to access the data on the disk.</p>
    ///
    ///          <p>The <code>create disk snapshot</code> operation supports tag-based access control via
    ///       request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func createDiskSnapshot(input: CreateDiskSnapshotInput) async throws -> CreateDiskSnapshotOutputResponse
    {
        typealias createDiskSnapshotContinuation = CheckedContinuation<CreateDiskSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDiskSnapshotContinuation) in
            createDiskSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an Amazon Lightsail content delivery network (CDN) distribution.</p>
    ///          <p>A distribution is a globally distributed network of caching servers that improve the
    ///       performance of your website or web application hosted on a Lightsail instance. For more
    ///       information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-content-delivery-network-distributions">Content delivery networks in Amazon Lightsail</a>.</p>
    func createDistribution(input: CreateDistributionInput) async throws -> CreateDistributionOutputResponse
    {
        typealias createDistributionContinuation = CheckedContinuation<CreateDistributionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDistributionContinuation) in
            createDistribution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a domain resource for the specified domain (e.g., example.com).</p>
    ///          <p>The <code>create domain</code> operation supports tag-based access control via request
    ///       tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func createDomain(input: CreateDomainInput) async throws -> CreateDomainOutputResponse
    {
        typealias createDomainContinuation = CheckedContinuation<CreateDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDomainContinuation) in
            createDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates one of the following domain name system (DNS) records in a domain DNS zone:
    ///       Address (A), canonical name (CNAME), mail exchanger (MX), name server (NS), start of authority
    ///       (SOA), service locator (SRV), or text (TXT).</p>
    ///
    ///
    ///
    ///          <p>The <code>create domain entry</code> operation supports tag-based access control via
    ///       resource tags applied to the resource identified by <code>domain name</code>. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func createDomainEntry(input: CreateDomainEntryInput) async throws -> CreateDomainEntryOutputResponse
    {
        typealias createDomainEntryContinuation = CheckedContinuation<CreateDomainEntryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDomainEntryContinuation) in
            createDomainEntry(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a snapshot of a specific virtual private server, or <i>instance</i>.
    ///       You can use a snapshot to create a new instance that is based on that snapshot.</p>
    ///          <p>The <code>create instance snapshot</code> operation supports tag-based access control via
    ///       request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func createInstanceSnapshot(input: CreateInstanceSnapshotInput) async throws -> CreateInstanceSnapshotOutputResponse
    {
        typealias createInstanceSnapshotContinuation = CheckedContinuation<CreateInstanceSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createInstanceSnapshotContinuation) in
            createInstanceSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates one or more Amazon Lightsail instances.</p>
    ///          <p>The <code>create instances</code> operation supports tag-based access control via request
    ///       tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func createInstances(input: CreateInstancesInput) async throws -> CreateInstancesOutputResponse
    {
        typealias createInstancesContinuation = CheckedContinuation<CreateInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createInstancesContinuation) in
            createInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates one or more new instances from a manual or automatic snapshot of an
    ///       instance.</p>
    ///          <p>The <code>create instances from snapshot</code> operation supports tag-based access
    ///       control via request tags and resource tags applied to the resource identified by
    ///         <code>instance snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func createInstancesFromSnapshot(input: CreateInstancesFromSnapshotInput) async throws -> CreateInstancesFromSnapshotOutputResponse
    {
        typealias createInstancesFromSnapshotContinuation = CheckedContinuation<CreateInstancesFromSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createInstancesFromSnapshotContinuation) in
            createInstancesFromSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an SSH key pair.</p>
    ///          <p>The <code>create key pair</code> operation supports tag-based access control via request
    ///       tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func createKeyPair(input: CreateKeyPairInput) async throws -> CreateKeyPairOutputResponse
    {
        typealias createKeyPairContinuation = CheckedContinuation<CreateKeyPairOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createKeyPairContinuation) in
            createKeyPair(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a Lightsail load balancer. To learn more about deciding whether to load balance
    ///       your application, see <a href="https://lightsail.aws.amazon.com/ls/docs/how-to/article/configure-lightsail-instances-for-load-balancing">Configure your Lightsail instances for load balancing</a>. You can create up to 5
    ///       load balancers per AWS Region in your account.</p>
    ///          <p>When you create a load balancer, you can specify a unique name and port settings. To
    ///       change additional load balancer settings, use the <code>UpdateLoadBalancerAttribute</code>
    ///       operation.</p>
    ///          <p>The <code>create load balancer</code> operation supports tag-based access control via
    ///       request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func createLoadBalancer(input: CreateLoadBalancerInput) async throws -> CreateLoadBalancerOutputResponse
    {
        typealias createLoadBalancerContinuation = CheckedContinuation<CreateLoadBalancerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createLoadBalancerContinuation) in
            createLoadBalancer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an SSL/TLS certificate for an Amazon Lightsail load balancer.</p>
    ///          <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p>
    ///          <p>The <code>CreateLoadBalancerTlsCertificate</code> operation supports tag-based access
    ///       control via resource tags applied to the resource identified by <code>load balancer
    ///         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func createLoadBalancerTlsCertificate(input: CreateLoadBalancerTlsCertificateInput) async throws -> CreateLoadBalancerTlsCertificateOutputResponse
    {
        typealias createLoadBalancerTlsCertificateContinuation = CheckedContinuation<CreateLoadBalancerTlsCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createLoadBalancerTlsCertificateContinuation) in
            createLoadBalancerTlsCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new database in Amazon Lightsail.</p>
    ///          <p>The <code>create relational database</code> operation supports tag-based access control
    ///       via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func createRelationalDatabase(input: CreateRelationalDatabaseInput) async throws -> CreateRelationalDatabaseOutputResponse
    {
        typealias createRelationalDatabaseContinuation = CheckedContinuation<CreateRelationalDatabaseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRelationalDatabaseContinuation) in
            createRelationalDatabase(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new database from an existing database snapshot in Amazon Lightsail.</p>
    ///          <p>You can create a new database from a snapshot in if something goes wrong with your
    ///       original database, or to change it to a different plan, such as a high availability or
    ///       standard plan.</p>
    ///          <p>The <code>create relational database from snapshot</code> operation supports tag-based
    ///       access control via request tags and resource tags applied to the resource identified by
    ///       relationalDatabaseSnapshotName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func createRelationalDatabaseFromSnapshot(input: CreateRelationalDatabaseFromSnapshotInput) async throws -> CreateRelationalDatabaseFromSnapshotOutputResponse
    {
        typealias createRelationalDatabaseFromSnapshotContinuation = CheckedContinuation<CreateRelationalDatabaseFromSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRelationalDatabaseFromSnapshotContinuation) in
            createRelationalDatabaseFromSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a snapshot of your database in Amazon Lightsail. You can use snapshots for backups,
    ///       to make copies of a database, and to save data before deleting a database.</p>
    ///          <p>The <code>create relational database snapshot</code> operation supports tag-based access
    ///       control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func createRelationalDatabaseSnapshot(input: CreateRelationalDatabaseSnapshotInput) async throws -> CreateRelationalDatabaseSnapshotOutputResponse
    {
        typealias createRelationalDatabaseSnapshotContinuation = CheckedContinuation<CreateRelationalDatabaseSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRelationalDatabaseSnapshotContinuation) in
            createRelationalDatabaseSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an alarm.</p>
    ///          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
    ///       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
    ///       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
    ///         in Amazon Lightsail</a>.</p>
    func deleteAlarm(input: DeleteAlarmInput) async throws -> DeleteAlarmOutputResponse
    {
        typealias deleteAlarmContinuation = CheckedContinuation<DeleteAlarmOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAlarmContinuation) in
            deleteAlarm(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an automatic snapshot of an instance or disk. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Lightsail Dev Guide</a>.</p>
    func deleteAutoSnapshot(input: DeleteAutoSnapshotInput) async throws -> DeleteAutoSnapshotOutputResponse
    {
        typealias deleteAutoSnapshotContinuation = CheckedContinuation<DeleteAutoSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAutoSnapshotContinuation) in
            deleteAutoSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an SSL/TLS certificate for your Amazon Lightsail content delivery network (CDN)
    ///       distribution.</p>
    ///          <p>Certificates that are currently attached to a distribution cannot be deleted. Use the
    ///         <code>DetachCertificateFromDistribution</code> action to detach a certificate from a
    ///       distribution.</p>
    func deleteCertificate(input: DeleteCertificateInput) async throws -> DeleteCertificateOutputResponse
    {
        typealias deleteCertificateContinuation = CheckedContinuation<DeleteCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCertificateContinuation) in
            deleteCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a contact method.</p>
    ///          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
    ///       You can add one email address and one mobile phone number contact method in each AWS Region.
    ///       However, SMS text messaging is not supported in some AWS Regions, and SMS text messages
    ///       cannot be sent to some countries/regions. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    func deleteContactMethod(input: DeleteContactMethodInput) async throws -> DeleteContactMethodOutputResponse
    {
        typealias deleteContactMethodContinuation = CheckedContinuation<DeleteContactMethodOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteContactMethodContinuation) in
            deleteContactMethod(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a container image that is registered to your Amazon Lightsail container
    ///       service.</p>
    func deleteContainerImage(input: DeleteContainerImageInput) async throws -> DeleteContainerImageOutputResponse
    {
        typealias deleteContainerImageContinuation = CheckedContinuation<DeleteContainerImageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteContainerImageContinuation) in
            deleteContainerImage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes your Amazon Lightsail container service.</p>
    func deleteContainerService(input: DeleteContainerServiceInput) async throws -> DeleteContainerServiceOutputResponse
    {
        typealias deleteContainerServiceContinuation = CheckedContinuation<DeleteContainerServiceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteContainerServiceContinuation) in
            deleteContainerService(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified block storage disk. The disk must be in the <code>available</code>
    ///       state (not attached to a Lightsail instance).</p>
    ///          <note>
    ///             <p>The disk may remain in the <code>deleting</code> state for several minutes.</p>
    ///          </note>
    ///          <p>The <code>delete disk</code> operation supports tag-based access control via resource tags
    ///       applied to the resource identified by <code>disk name</code>. For more information, see the
    ///         <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func deleteDisk(input: DeleteDiskInput) async throws -> DeleteDiskOutputResponse
    {
        typealias deleteDiskContinuation = CheckedContinuation<DeleteDiskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDiskContinuation) in
            deleteDisk(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified disk snapshot.</p>
    ///          <p>When you make periodic snapshots of a disk, the snapshots are incremental, and only the
    ///       blocks on the device that have changed since your last snapshot are saved in the new snapshot.
    ///       When you delete a snapshot, only the data not needed for any other snapshot is removed. So
    ///       regardless of which prior snapshots have been deleted, all active snapshots will have access
    ///       to all the information needed to restore the disk.</p>
    ///          <p>The <code>delete disk snapshot</code> operation supports tag-based access control via
    ///       resource tags applied to the resource identified by <code>disk snapshot name</code>. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func deleteDiskSnapshot(input: DeleteDiskSnapshotInput) async throws -> DeleteDiskSnapshotOutputResponse
    {
        typealias deleteDiskSnapshotContinuation = CheckedContinuation<DeleteDiskSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDiskSnapshotContinuation) in
            deleteDiskSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes your Amazon Lightsail content delivery network (CDN) distribution.</p>
    func deleteDistribution(input: DeleteDistributionInput) async throws -> DeleteDistributionOutputResponse
    {
        typealias deleteDistributionContinuation = CheckedContinuation<DeleteDistributionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDistributionContinuation) in
            deleteDistribution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified domain recordset and all of its domain records.</p>
    ///          <p>The <code>delete domain</code> operation supports tag-based access control via resource
    ///       tags applied to the resource identified by <code>domain name</code>. For more information, see
    ///       the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func deleteDomain(input: DeleteDomainInput) async throws -> DeleteDomainOutputResponse
    {
        typealias deleteDomainContinuation = CheckedContinuation<DeleteDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDomainContinuation) in
            deleteDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a specific domain entry.</p>
    ///          <p>The <code>delete domain entry</code> operation supports tag-based access control via
    ///       resource tags applied to the resource identified by <code>domain name</code>. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func deleteDomainEntry(input: DeleteDomainEntryInput) async throws -> DeleteDomainEntryOutputResponse
    {
        typealias deleteDomainEntryContinuation = CheckedContinuation<DeleteDomainEntryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDomainEntryContinuation) in
            deleteDomainEntry(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an Amazon Lightsail instance.</p>
    ///          <p>The <code>delete instance</code> operation supports tag-based access control via resource
    ///       tags applied to the resource identified by <code>instance name</code>. For more information,
    ///       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func deleteInstance(input: DeleteInstanceInput) async throws -> DeleteInstanceOutputResponse
    {
        typealias deleteInstanceContinuation = CheckedContinuation<DeleteInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteInstanceContinuation) in
            deleteInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a specific snapshot of a virtual private server (or
    ///       <i>instance</i>).</p>
    ///          <p>The <code>delete instance snapshot</code> operation supports tag-based access control via
    ///       resource tags applied to the resource identified by <code>instance snapshot name</code>. For
    ///       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func deleteInstanceSnapshot(input: DeleteInstanceSnapshotInput) async throws -> DeleteInstanceSnapshotOutputResponse
    {
        typealias deleteInstanceSnapshotContinuation = CheckedContinuation<DeleteInstanceSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteInstanceSnapshotContinuation) in
            deleteInstanceSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a specific SSH key pair.</p>
    ///          <p>The <code>delete key pair</code> operation supports tag-based access control via resource
    ///       tags applied to the resource identified by <code>key pair name</code>. For more information,
    ///       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func deleteKeyPair(input: DeleteKeyPairInput) async throws -> DeleteKeyPairOutputResponse
    {
        typealias deleteKeyPairContinuation = CheckedContinuation<DeleteKeyPairOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteKeyPairContinuation) in
            deleteKeyPair(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the known host key or certificate used by the Amazon Lightsail browser-based SSH or
    ///       RDP clients to authenticate an instance. This operation enables the Lightsail browser-based
    ///       SSH or RDP clients to connect to the instance after a host key mismatch.</p>
    ///          <important>
    ///             <p>Perform this operation only if you were expecting the host key or certificate mismatch
    ///         or if you are familiar with the new host key or certificate on the instance. For more
    ///         information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-troubleshooting-browser-based-ssh-rdp-client-connection">Troubleshooting connection issues when using the Amazon Lightsail browser-based SSH or RDP
    ///           client</a>.</p>
    ///          </important>
    func deleteKnownHostKeys(input: DeleteKnownHostKeysInput) async throws -> DeleteKnownHostKeysOutputResponse
    {
        typealias deleteKnownHostKeysContinuation = CheckedContinuation<DeleteKnownHostKeysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteKnownHostKeysContinuation) in
            deleteKnownHostKeys(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a Lightsail load balancer and all its associated SSL/TLS certificates. Once the
    ///       load balancer is deleted, you will need to create a new load balancer, create a new
    ///       certificate, and verify domain ownership again.</p>
    ///          <p>The <code>delete load balancer</code> operation supports tag-based access control via
    ///       resource tags applied to the resource identified by <code>load balancer name</code>. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func deleteLoadBalancer(input: DeleteLoadBalancerInput) async throws -> DeleteLoadBalancerOutputResponse
    {
        typealias deleteLoadBalancerContinuation = CheckedContinuation<DeleteLoadBalancerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteLoadBalancerContinuation) in
            deleteLoadBalancer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an SSL/TLS certificate associated with a Lightsail load balancer.</p>
    ///          <p>The <code>DeleteLoadBalancerTlsCertificate</code> operation supports tag-based access
    ///       control via resource tags applied to the resource identified by <code>load balancer
    ///         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func deleteLoadBalancerTlsCertificate(input: DeleteLoadBalancerTlsCertificateInput) async throws -> DeleteLoadBalancerTlsCertificateOutputResponse
    {
        typealias deleteLoadBalancerTlsCertificateContinuation = CheckedContinuation<DeleteLoadBalancerTlsCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteLoadBalancerTlsCertificateContinuation) in
            deleteLoadBalancerTlsCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a database in Amazon Lightsail.</p>
    ///          <p>The <code>delete relational database</code> operation supports tag-based access control
    ///       via resource tags applied to the resource identified by relationalDatabaseName. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func deleteRelationalDatabase(input: DeleteRelationalDatabaseInput) async throws -> DeleteRelationalDatabaseOutputResponse
    {
        typealias deleteRelationalDatabaseContinuation = CheckedContinuation<DeleteRelationalDatabaseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRelationalDatabaseContinuation) in
            deleteRelationalDatabase(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a database snapshot in Amazon Lightsail.</p>
    ///          <p>The <code>delete relational database snapshot</code> operation supports tag-based access
    ///       control via resource tags applied to the resource identified by relationalDatabaseName. For
    ///       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func deleteRelationalDatabaseSnapshot(input: DeleteRelationalDatabaseSnapshotInput) async throws -> DeleteRelationalDatabaseSnapshotOutputResponse
    {
        typealias deleteRelationalDatabaseSnapshotContinuation = CheckedContinuation<DeleteRelationalDatabaseSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRelationalDatabaseSnapshotContinuation) in
            deleteRelationalDatabaseSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Detaches an SSL/TLS certificate from your Amazon Lightsail content delivery network (CDN)
    ///       distribution.</p>
    ///          <p>After the certificate is detached, your distribution stops accepting traffic for all of
    ///       the domains that are associated with the certificate.</p>
    func detachCertificateFromDistribution(input: DetachCertificateFromDistributionInput) async throws -> DetachCertificateFromDistributionOutputResponse
    {
        typealias detachCertificateFromDistributionContinuation = CheckedContinuation<DetachCertificateFromDistributionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachCertificateFromDistributionContinuation) in
            detachCertificateFromDistribution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Detaches a stopped block storage disk from a Lightsail instance. Make sure to unmount
    ///       any file systems on the device within your operating system before stopping the instance and
    ///       detaching the disk.</p>
    ///          <p>The <code>detach disk</code> operation supports tag-based access control via resource tags
    ///       applied to the resource identified by <code>disk name</code>. For more information, see the
    ///         <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func detachDisk(input: DetachDiskInput) async throws -> DetachDiskOutputResponse
    {
        typealias detachDiskContinuation = CheckedContinuation<DetachDiskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachDiskContinuation) in
            detachDisk(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Detaches the specified instances from a Lightsail load balancer.</p>
    ///          <p>This operation waits until the instances are no longer needed before they are detached
    ///       from the load balancer.</p>
    ///          <p>The <code>detach instances from load balancer</code> operation supports tag-based access
    ///       control via resource tags applied to the resource identified by <code>load balancer
    ///         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func detachInstancesFromLoadBalancer(input: DetachInstancesFromLoadBalancerInput) async throws -> DetachInstancesFromLoadBalancerOutputResponse
    {
        typealias detachInstancesFromLoadBalancerContinuation = CheckedContinuation<DetachInstancesFromLoadBalancerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachInstancesFromLoadBalancerContinuation) in
            detachInstancesFromLoadBalancer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Detaches a static IP from the Amazon Lightsail instance to which it is attached.</p>
    func detachStaticIp(input: DetachStaticIpInput) async throws -> DetachStaticIpOutputResponse
    {
        typealias detachStaticIpContinuation = CheckedContinuation<DetachStaticIpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachStaticIpContinuation) in
            detachStaticIp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables an add-on for an Amazon Lightsail resource. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Lightsail Dev Guide</a>.</p>
    func disableAddOn(input: DisableAddOnInput) async throws -> DisableAddOnOutputResponse
    {
        typealias disableAddOnContinuation = CheckedContinuation<DisableAddOnOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableAddOnContinuation) in
            disableAddOn(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Downloads the default SSH key pair from the user's account.</p>
    func downloadDefaultKeyPair(input: DownloadDefaultKeyPairInput) async throws -> DownloadDefaultKeyPairOutputResponse
    {
        typealias downloadDefaultKeyPairContinuation = CheckedContinuation<DownloadDefaultKeyPairOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: downloadDefaultKeyPairContinuation) in
            downloadDefaultKeyPair(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables or modifies an add-on for an Amazon Lightsail resource. For more information, see
    ///       the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Lightsail Dev Guide</a>.</p>
    func enableAddOn(input: EnableAddOnInput) async throws -> EnableAddOnOutputResponse
    {
        typealias enableAddOnContinuation = CheckedContinuation<EnableAddOnOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableAddOnContinuation) in
            enableAddOn(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Exports an Amazon Lightsail instance or block storage disk snapshot to Amazon Elastic Compute Cloud (Amazon EC2).
    ///       This operation results in an export snapshot record that can be used with the <code>create
    ///         cloud formation stack</code> operation to create new Amazon EC2 instances.</p>
    ///          <p>Exported instance snapshots appear in Amazon EC2 as Amazon Machine Images (AMIs), and the
    ///       instance system disk appears as an Amazon Elastic Block Store (Amazon EBS) volume. Exported disk snapshots appear in
    ///       Amazon EC2 as Amazon EBS volumes. Snapshots are exported to the same Amazon Web Services Region in Amazon EC2 as the
    ///       source Lightsail snapshot.</p>
    ///          <p></p>
    ///          <p>The <code>export snapshot</code> operation supports tag-based access control via resource
    ///       tags applied to the resource identified by <code>source snapshot name</code>. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    ///          <note>
    ///             <p>Use the <code>get instance snapshots</code> or <code>get disk snapshots</code>
    ///         operations to get a list of snapshots that you can export to Amazon EC2.</p>
    ///          </note>
    func exportSnapshot(input: ExportSnapshotInput) async throws -> ExportSnapshotOutputResponse
    {
        typealias exportSnapshotContinuation = CheckedContinuation<ExportSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportSnapshotContinuation) in
            exportSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the names of all active (not deleted) resources.</p>
    func getActiveNames(input: GetActiveNamesInput) async throws -> GetActiveNamesOutputResponse
    {
        typealias getActiveNamesContinuation = CheckedContinuation<GetActiveNamesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getActiveNamesContinuation) in
            getActiveNames(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the configured alarms. Specify an alarm name in your request to
    ///       return information about a specific alarm, or specify a monitored resource name to return
    ///       information about all alarms for a specific resource.</p>
    ///          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
    ///       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
    ///       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
    ///         in Amazon Lightsail</a>.</p>
    func getAlarms(input: GetAlarmsInput) async throws -> GetAlarmsOutputResponse
    {
        typealias getAlarmsContinuation = CheckedContinuation<GetAlarmsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAlarmsContinuation) in
            getAlarms(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the available automatic snapshots for an instance or disk. For more information,
    ///       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Lightsail Dev Guide</a>.</p>
    func getAutoSnapshots(input: GetAutoSnapshotsInput) async throws -> GetAutoSnapshotsOutputResponse
    {
        typealias getAutoSnapshotsContinuation = CheckedContinuation<GetAutoSnapshotsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAutoSnapshotsContinuation) in
            getAutoSnapshots(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the list of available instance images, or <i>blueprints</i>. You can
    ///       use a blueprint to create a new instance already running a specific operating system, as well
    ///       as a preinstalled app or development stack. The software each instance is running depends on
    ///       the blueprint image you choose.</p>
    ///          <note>
    ///             <p>Use active blueprints when creating new instances. Inactive blueprints are listed to
    ///         support customers with existing instances and are not necessarily available to create new
    ///         instances. Blueprints are marked inactive when they become outdated due to operating system
    ///         updates or new application releases.</p>
    ///          </note>
    func getBlueprints(input: GetBlueprintsInput) async throws -> GetBlueprintsOutputResponse
    {
        typealias getBlueprintsContinuation = CheckedContinuation<GetBlueprintsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBlueprintsContinuation) in
            getBlueprints(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the list of bundles that are available for purchase. A bundle describes the specs
    ///       for your virtual private server (or <i>instance</i>).</p>
    func getBundles(input: GetBundlesInput) async throws -> GetBundlesOutputResponse
    {
        typealias getBundlesContinuation = CheckedContinuation<GetBundlesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBundlesContinuation) in
            getBundles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about one or more Amazon Lightsail SSL/TLS certificates.</p>
    ///          <note>
    ///             <p>To get a summary of a certificate, ommit <code>includeCertificateDetails</code> from
    ///         your request. The response will include only the certificate Amazon Resource Name (ARN),
    ///         certificate name, domain name, and tags.</p>
    ///          </note>
    func getCertificates(input: GetCertificatesInput) async throws -> GetCertificatesOutputResponse
    {
        typealias getCertificatesContinuation = CheckedContinuation<GetCertificatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCertificatesContinuation) in
            getCertificates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the CloudFormation stack record created as a result of the <code>create cloud
    ///         formation stack</code> operation.</p>
    ///          <p>An AWS CloudFormation stack is used to create a new Amazon EC2 instance from an exported Lightsail
    ///       snapshot.</p>
    func getCloudFormationStackRecords(input: GetCloudFormationStackRecordsInput) async throws -> GetCloudFormationStackRecordsOutputResponse
    {
        typealias getCloudFormationStackRecordsContinuation = CheckedContinuation<GetCloudFormationStackRecordsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCloudFormationStackRecordsContinuation) in
            getCloudFormationStackRecords(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the configured contact methods. Specify a protocol in your
    ///       request to return information about a specific contact method.</p>
    ///          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
    ///       You can add one email address and one mobile phone number contact method in each AWS Region.
    ///       However, SMS text messaging is not supported in some AWS Regions, and SMS text messages
    ///       cannot be sent to some countries/regions. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    func getContactMethods(input: GetContactMethodsInput) async throws -> GetContactMethodsOutputResponse
    {
        typealias getContactMethodsContinuation = CheckedContinuation<GetContactMethodsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContactMethodsContinuation) in
            getContactMethods(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about Amazon Lightsail containers, such as the current version of the
    ///       Lightsail Control (lightsailctl) plugin.</p>
    func getContainerAPIMetadata(input: GetContainerAPIMetadataInput) async throws -> GetContainerAPIMetadataOutputResponse
    {
        typealias getContainerAPIMetadataContinuation = CheckedContinuation<GetContainerAPIMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContainerAPIMetadataContinuation) in
            getContainerAPIMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the container images that are registered to your Amazon Lightsail container
    ///       service.</p>
    ///
    ///          <note>
    ///             <p>If you created a deployment on your Lightsail container service that uses container
    ///         images from a public registry like Docker Hub, those images are not returned as part of this
    ///         action. Those images are not registered to your Lightsail container service.</p>
    ///          </note>
    func getContainerImages(input: GetContainerImagesInput) async throws -> GetContainerImagesOutputResponse
    {
        typealias getContainerImagesContinuation = CheckedContinuation<GetContainerImagesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContainerImagesContinuation) in
            getContainerImages(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the log events of a container of your Amazon Lightsail container service.</p>
    ///
    ///          <p>If your container service has more than one node (i.e., a scale greater than 1), then the
    ///       log events that are returned for the specified container are merged from all nodes on your
    ///       container service.</p>
    ///
    ///          <note>
    ///             <p>Container logs are retained for a certain amount of time. For more information, see
    ///           <a href="https://docs.aws.amazon.com/general/latest/gr/lightsail.html">Amazon Lightsail
    ///           endpoints and quotas</a> in the <i>AWS General Reference</i>.</p>
    ///          </note>
    func getContainerLog(input: GetContainerLogInput) async throws -> GetContainerLogOutputResponse
    {
        typealias getContainerLogContinuation = CheckedContinuation<GetContainerLogOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContainerLogContinuation) in
            getContainerLog(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the deployments for your Amazon Lightsail container service</p>
    ///
    ///          <p>A deployment specifies the settings, such as the ports and launch command, of containers
    ///       that are deployed to your container service.</p>
    ///
    ///          <p>The deployments are ordered by version in ascending order. The newest version is listed at
    ///       the top of the response.</p>
    ///
    ///          <note>
    ///             <p>A set number of deployments are kept before the oldest one is replaced with the newest
    ///         one. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/lightsail.html">Amazon Lightsail
    ///           endpoints and quotas</a> in the <i>AWS General Reference</i>.</p>
    ///          </note>
    func getContainerServiceDeployments(input: GetContainerServiceDeploymentsInput) async throws -> GetContainerServiceDeploymentsOutputResponse
    {
        typealias getContainerServiceDeploymentsContinuation = CheckedContinuation<GetContainerServiceDeploymentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContainerServiceDeploymentsContinuation) in
            getContainerServiceDeployments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the data points of a specific metric of your Amazon Lightsail container
    ///       service.</p>
    ///
    ///          <p>Metrics report the utilization of your resources. Monitor and collect metric data
    ///       regularly to maintain the reliability, availability, and performance of your resources.</p>
    func getContainerServiceMetricData(input: GetContainerServiceMetricDataInput) async throws -> GetContainerServiceMetricDataOutputResponse
    {
        typealias getContainerServiceMetricDataContinuation = CheckedContinuation<GetContainerServiceMetricDataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContainerServiceMetricDataContinuation) in
            getContainerServiceMetricData(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the list of powers that can be specified for your Amazon Lightsail container
    ///       services.</p>
    ///
    ///          <p>The power specifies the amount of memory, the number of vCPUs, and the base price of the
    ///       container service.</p>
    func getContainerServicePowers(input: GetContainerServicePowersInput) async throws -> GetContainerServicePowersOutputResponse
    {
        typealias getContainerServicePowersContinuation = CheckedContinuation<GetContainerServicePowersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContainerServicePowersContinuation) in
            getContainerServicePowers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about one or more of your Amazon Lightsail container services.</p>
    func getContainerServices(input: GetContainerServicesInput) async throws -> GetContainerServicesOutputResponse
    {
        typealias getContainerServicesContinuation = CheckedContinuation<GetContainerServicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContainerServicesContinuation) in
            getContainerServices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a specific block storage disk.</p>
    func getDisk(input: GetDiskInput) async throws -> GetDiskOutputResponse
    {
        typealias getDiskContinuation = CheckedContinuation<GetDiskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDiskContinuation) in
            getDisk(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a specific block storage disk snapshot.</p>
    func getDiskSnapshot(input: GetDiskSnapshotInput) async throws -> GetDiskSnapshotOutputResponse
    {
        typealias getDiskSnapshotContinuation = CheckedContinuation<GetDiskSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDiskSnapshotContinuation) in
            getDiskSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about all block storage disk snapshots in your AWS account and
    ///       region.</p>
    func getDiskSnapshots(input: GetDiskSnapshotsInput) async throws -> GetDiskSnapshotsOutputResponse
    {
        typealias getDiskSnapshotsContinuation = CheckedContinuation<GetDiskSnapshotsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDiskSnapshotsContinuation) in
            getDiskSnapshots(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about all block storage disks in your AWS account and region.</p>
    func getDisks(input: GetDisksInput) async throws -> GetDisksOutputResponse
    {
        typealias getDisksContinuation = CheckedContinuation<GetDisksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDisksContinuation) in
            getDisks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the list bundles that can be applied to you Amazon Lightsail content delivery
    ///       network (CDN) distributions.</p>
    ///          <p>A distribution bundle specifies the monthly network transfer quota and monthly cost of
    ///       your dsitribution.</p>
    func getDistributionBundles(input: GetDistributionBundlesInput) async throws -> GetDistributionBundlesOutputResponse
    {
        typealias getDistributionBundlesContinuation = CheckedContinuation<GetDistributionBundlesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDistributionBundlesContinuation) in
            getDistributionBundles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the timestamp and status of the last cache reset of a specific Amazon Lightsail
    ///       content delivery network (CDN) distribution.</p>
    func getDistributionLatestCacheReset(input: GetDistributionLatestCacheResetInput) async throws -> GetDistributionLatestCacheResetOutputResponse
    {
        typealias getDistributionLatestCacheResetContinuation = CheckedContinuation<GetDistributionLatestCacheResetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDistributionLatestCacheResetContinuation) in
            getDistributionLatestCacheReset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the data points of a specific metric for an Amazon Lightsail content delivery
    ///       network (CDN) distribution.</p>
    ///          <p>Metrics report the utilization of your resources, and the error counts generated by them.
    ///       Monitor and collect metric data regularly to maintain the reliability, availability, and
    ///       performance of your resources.</p>
    func getDistributionMetricData(input: GetDistributionMetricDataInput) async throws -> GetDistributionMetricDataOutputResponse
    {
        typealias getDistributionMetricDataContinuation = CheckedContinuation<GetDistributionMetricDataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDistributionMetricDataContinuation) in
            getDistributionMetricData(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about one or more of your Amazon Lightsail content delivery network
    ///       (CDN) distributions.</p>
    func getDistributions(input: GetDistributionsInput) async throws -> GetDistributionsOutputResponse
    {
        typealias getDistributionsContinuation = CheckedContinuation<GetDistributionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDistributionsContinuation) in
            getDistributions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a specific domain recordset.</p>
    func getDomain(input: GetDomainInput) async throws -> GetDomainOutputResponse
    {
        typealias getDomainContinuation = CheckedContinuation<GetDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDomainContinuation) in
            getDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of all domains in the user's account.</p>
    func getDomains(input: GetDomainsInput) async throws -> GetDomainsOutputResponse
    {
        typealias getDomainsContinuation = CheckedContinuation<GetDomainsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDomainsContinuation) in
            getDomains(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the export snapshot record created as a result of the <code>export snapshot</code>
    ///       operation.</p>
    ///          <p>An export snapshot record can be used to create a new Amazon EC2 instance and its related
    ///       resources with the <code>create cloud formation stack</code> operation.</p>
    func getExportSnapshotRecords(input: GetExportSnapshotRecordsInput) async throws -> GetExportSnapshotRecordsOutputResponse
    {
        typealias getExportSnapshotRecordsContinuation = CheckedContinuation<GetExportSnapshotRecordsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getExportSnapshotRecordsContinuation) in
            getExportSnapshotRecords(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a specific Amazon Lightsail instance, which is a virtual private
    ///       server.</p>
    func getInstance(input: GetInstanceInput) async throws -> GetInstanceOutputResponse
    {
        typealias getInstanceContinuation = CheckedContinuation<GetInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInstanceContinuation) in
            getInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns temporary SSH keys you can use to connect to a specific virtual private server, or
    ///         <i>instance</i>.</p>
    ///          <p>The <code>get instance access details</code> operation supports tag-based access control
    ///       via resource tags applied to the resource identified by <code>instance name</code>. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func getInstanceAccessDetails(input: GetInstanceAccessDetailsInput) async throws -> GetInstanceAccessDetailsOutputResponse
    {
        typealias getInstanceAccessDetailsContinuation = CheckedContinuation<GetInstanceAccessDetailsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInstanceAccessDetailsContinuation) in
            getInstanceAccessDetails(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the data points for the specified Amazon Lightsail instance metric, given an
    ///       instance name.</p>
    ///          <p>Metrics report the utilization of your resources, and the error counts generated by them.
    ///       Monitor and collect metric data regularly to maintain the reliability, availability, and
    ///       performance of your resources.</p>
    func getInstanceMetricData(input: GetInstanceMetricDataInput) async throws -> GetInstanceMetricDataOutputResponse
    {
        typealias getInstanceMetricDataContinuation = CheckedContinuation<GetInstanceMetricDataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInstanceMetricDataContinuation) in
            getInstanceMetricData(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the firewall port states for a specific Amazon Lightsail instance, the IP addresses
    ///       allowed to connect to the instance through the ports, and the protocol.</p>
    func getInstancePortStates(input: GetInstancePortStatesInput) async throws -> GetInstancePortStatesOutputResponse
    {
        typealias getInstancePortStatesContinuation = CheckedContinuation<GetInstancePortStatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInstancePortStatesContinuation) in
            getInstancePortStates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a specific instance snapshot.</p>
    func getInstanceSnapshot(input: GetInstanceSnapshotInput) async throws -> GetInstanceSnapshotOutputResponse
    {
        typealias getInstanceSnapshotContinuation = CheckedContinuation<GetInstanceSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInstanceSnapshotContinuation) in
            getInstanceSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns all instance snapshots for the user's account.</p>
    func getInstanceSnapshots(input: GetInstanceSnapshotsInput) async throws -> GetInstanceSnapshotsOutputResponse
    {
        typealias getInstanceSnapshotsContinuation = CheckedContinuation<GetInstanceSnapshotsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInstanceSnapshotsContinuation) in
            getInstanceSnapshots(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the state of a specific instance. Works on one instance at a time.</p>
    func getInstanceState(input: GetInstanceStateInput) async throws -> GetInstanceStateOutputResponse
    {
        typealias getInstanceStateContinuation = CheckedContinuation<GetInstanceStateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInstanceStateContinuation) in
            getInstanceState(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about all Amazon Lightsail virtual private servers, or
    ///         <i>instances</i>.</p>
    func getInstances(input: GetInstancesInput) async throws -> GetInstancesOutputResponse
    {
        typealias getInstancesContinuation = CheckedContinuation<GetInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInstancesContinuation) in
            getInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a specific key pair.</p>
    func getKeyPair(input: GetKeyPairInput) async throws -> GetKeyPairOutputResponse
    {
        typealias getKeyPairContinuation = CheckedContinuation<GetKeyPairOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getKeyPairContinuation) in
            getKeyPair(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about all key pairs in the user's account.</p>
    func getKeyPairs(input: GetKeyPairsInput) async throws -> GetKeyPairsOutputResponse
    {
        typealias getKeyPairsContinuation = CheckedContinuation<GetKeyPairsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getKeyPairsContinuation) in
            getKeyPairs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the specified Lightsail load balancer.</p>
    func getLoadBalancer(input: GetLoadBalancerInput) async throws -> GetLoadBalancerOutputResponse
    {
        typealias getLoadBalancerContinuation = CheckedContinuation<GetLoadBalancerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLoadBalancerContinuation) in
            getLoadBalancer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about health metrics for your Lightsail load balancer.</p>
    ///          <p>Metrics report the utilization of your resources, and the error counts generated by them.
    ///       Monitor and collect metric data regularly to maintain the reliability, availability, and
    ///       performance of your resources.</p>
    func getLoadBalancerMetricData(input: GetLoadBalancerMetricDataInput) async throws -> GetLoadBalancerMetricDataOutputResponse
    {
        typealias getLoadBalancerMetricDataContinuation = CheckedContinuation<GetLoadBalancerMetricDataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLoadBalancerMetricDataContinuation) in
            getLoadBalancerMetricData(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the TLS certificates that are associated with the specified
    ///       Lightsail load balancer.</p>
    ///          <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p>
    ///          <p>You can have a maximum of 2 certificates associated with a Lightsail load balancer. One
    ///       is active and the other is inactive.</p>
    func getLoadBalancerTlsCertificates(input: GetLoadBalancerTlsCertificatesInput) async throws -> GetLoadBalancerTlsCertificatesOutputResponse
    {
        typealias getLoadBalancerTlsCertificatesContinuation = CheckedContinuation<GetLoadBalancerTlsCertificatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLoadBalancerTlsCertificatesContinuation) in
            getLoadBalancerTlsCertificates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about all load balancers in an account.</p>
    func getLoadBalancers(input: GetLoadBalancersInput) async throws -> GetLoadBalancersOutputResponse
    {
        typealias getLoadBalancersContinuation = CheckedContinuation<GetLoadBalancersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLoadBalancersContinuation) in
            getLoadBalancers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a specific operation. Operations include events such as when you
    ///       create an instance, allocate a static IP, attach a static IP, and so on.</p>
    func getOperation(input: GetOperationInput) async throws -> GetOperationOutputResponse
    {
        typealias getOperationContinuation = CheckedContinuation<GetOperationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getOperationContinuation) in
            getOperation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about all operations.</p>
    ///          <p>Results are returned from oldest to newest, up to a maximum of 200. Results can be paged
    ///       by making each subsequent call to <code>GetOperations</code> use the maximum (last)
    ///         <code>statusChangedAt</code> value from the previous request.</p>
    func getOperations(input: GetOperationsInput) async throws -> GetOperationsOutputResponse
    {
        typealias getOperationsContinuation = CheckedContinuation<GetOperationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getOperationsContinuation) in
            getOperations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets operations for a specific resource (e.g., an instance or a static IP).</p>
    func getOperationsForResource(input: GetOperationsForResourceInput) async throws -> GetOperationsForResourceOutputResponse
    {
        typealias getOperationsForResourceContinuation = CheckedContinuation<GetOperationsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getOperationsForResourceContinuation) in
            getOperationsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of all valid regions for Amazon Lightsail. Use the <code>include
    ///         availability zones</code> parameter to also return the Availability Zones in a
    ///       region.</p>
    func getRegions(input: GetRegionsInput) async throws -> GetRegionsOutputResponse
    {
        typealias getRegionsContinuation = CheckedContinuation<GetRegionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRegionsContinuation) in
            getRegions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a specific database in Amazon Lightsail.</p>
    func getRelationalDatabase(input: GetRelationalDatabaseInput) async throws -> GetRelationalDatabaseOutputResponse
    {
        typealias getRelationalDatabaseContinuation = CheckedContinuation<GetRelationalDatabaseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRelationalDatabaseContinuation) in
            getRelationalDatabase(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of available database blueprints in Amazon Lightsail. A blueprint describes
    ///       the major engine version of a database.</p>
    ///          <p>You can use a blueprint ID to create a new database that runs a specific database
    ///       engine.</p>
    func getRelationalDatabaseBlueprints(input: GetRelationalDatabaseBlueprintsInput) async throws -> GetRelationalDatabaseBlueprintsOutputResponse
    {
        typealias getRelationalDatabaseBlueprintsContinuation = CheckedContinuation<GetRelationalDatabaseBlueprintsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRelationalDatabaseBlueprintsContinuation) in
            getRelationalDatabaseBlueprints(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the list of bundles that are available in Amazon Lightsail. A bundle describes the
    ///       performance specifications for a database.</p>
    ///          <p>You can use a bundle ID to create a new database with explicit performance
    ///       specifications.</p>
    func getRelationalDatabaseBundles(input: GetRelationalDatabaseBundlesInput) async throws -> GetRelationalDatabaseBundlesOutputResponse
    {
        typealias getRelationalDatabaseBundlesContinuation = CheckedContinuation<GetRelationalDatabaseBundlesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRelationalDatabaseBundlesContinuation) in
            getRelationalDatabaseBundles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of events for a specific database in Amazon Lightsail.</p>
    func getRelationalDatabaseEvents(input: GetRelationalDatabaseEventsInput) async throws -> GetRelationalDatabaseEventsOutputResponse
    {
        typealias getRelationalDatabaseEventsContinuation = CheckedContinuation<GetRelationalDatabaseEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRelationalDatabaseEventsContinuation) in
            getRelationalDatabaseEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of log events for a database in Amazon Lightsail.</p>
    func getRelationalDatabaseLogEvents(input: GetRelationalDatabaseLogEventsInput) async throws -> GetRelationalDatabaseLogEventsOutputResponse
    {
        typealias getRelationalDatabaseLogEventsContinuation = CheckedContinuation<GetRelationalDatabaseLogEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRelationalDatabaseLogEventsContinuation) in
            getRelationalDatabaseLogEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of available log streams for a specific database in Amazon Lightsail.</p>
    func getRelationalDatabaseLogStreams(input: GetRelationalDatabaseLogStreamsInput) async throws -> GetRelationalDatabaseLogStreamsOutputResponse
    {
        typealias getRelationalDatabaseLogStreamsContinuation = CheckedContinuation<GetRelationalDatabaseLogStreamsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRelationalDatabaseLogStreamsContinuation) in
            getRelationalDatabaseLogStreams(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the current, previous, or pending versions of the master user password for a
    ///       Lightsail database.</p>
    ///          <p>The <code>GetRelationalDatabaseMasterUserPassword</code> operation supports tag-based
    ///       access control via resource tags applied to the resource identified by
    ///       relationalDatabaseName.</p>
    func getRelationalDatabaseMasterUserPassword(input: GetRelationalDatabaseMasterUserPasswordInput) async throws -> GetRelationalDatabaseMasterUserPasswordOutputResponse
    {
        typealias getRelationalDatabaseMasterUserPasswordContinuation = CheckedContinuation<GetRelationalDatabaseMasterUserPasswordOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRelationalDatabaseMasterUserPasswordContinuation) in
            getRelationalDatabaseMasterUserPassword(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the data points of the specified metric for a database in Amazon Lightsail.</p>
    ///          <p>Metrics report the utilization of your resources, and the error counts generated by them.
    ///       Monitor and collect metric data regularly to maintain the reliability, availability, and
    ///       performance of your resources.</p>
    func getRelationalDatabaseMetricData(input: GetRelationalDatabaseMetricDataInput) async throws -> GetRelationalDatabaseMetricDataOutputResponse
    {
        typealias getRelationalDatabaseMetricDataContinuation = CheckedContinuation<GetRelationalDatabaseMetricDataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRelationalDatabaseMetricDataContinuation) in
            getRelationalDatabaseMetricData(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns all of the runtime parameters offered by the underlying database software, or
    ///       engine, for a specific database in Amazon Lightsail.</p>
    ///          <p>In addition to the parameter names and values, this operation returns other information
    ///       about each parameter. This information includes whether changes require a reboot, whether the
    ///       parameter is modifiable, the allowed values, and the data types.</p>
    func getRelationalDatabaseParameters(input: GetRelationalDatabaseParametersInput) async throws -> GetRelationalDatabaseParametersOutputResponse
    {
        typealias getRelationalDatabaseParametersContinuation = CheckedContinuation<GetRelationalDatabaseParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRelationalDatabaseParametersContinuation) in
            getRelationalDatabaseParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a specific database snapshot in Amazon Lightsail.</p>
    func getRelationalDatabaseSnapshot(input: GetRelationalDatabaseSnapshotInput) async throws -> GetRelationalDatabaseSnapshotOutputResponse
    {
        typealias getRelationalDatabaseSnapshotContinuation = CheckedContinuation<GetRelationalDatabaseSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRelationalDatabaseSnapshotContinuation) in
            getRelationalDatabaseSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about all of your database snapshots in Amazon Lightsail.</p>
    func getRelationalDatabaseSnapshots(input: GetRelationalDatabaseSnapshotsInput) async throws -> GetRelationalDatabaseSnapshotsOutputResponse
    {
        typealias getRelationalDatabaseSnapshotsContinuation = CheckedContinuation<GetRelationalDatabaseSnapshotsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRelationalDatabaseSnapshotsContinuation) in
            getRelationalDatabaseSnapshots(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about all of your databases in Amazon Lightsail.</p>
    func getRelationalDatabases(input: GetRelationalDatabasesInput) async throws -> GetRelationalDatabasesOutputResponse
    {
        typealias getRelationalDatabasesContinuation = CheckedContinuation<GetRelationalDatabasesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRelationalDatabasesContinuation) in
            getRelationalDatabases(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about an Amazon Lightsail static IP.</p>
    func getStaticIp(input: GetStaticIpInput) async throws -> GetStaticIpOutputResponse
    {
        typealias getStaticIpContinuation = CheckedContinuation<GetStaticIpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getStaticIpContinuation) in
            getStaticIp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about all static IPs in the user's account.</p>
    func getStaticIps(input: GetStaticIpsInput) async throws -> GetStaticIpsOutputResponse
    {
        typealias getStaticIpsContinuation = CheckedContinuation<GetStaticIpsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getStaticIpsContinuation) in
            getStaticIps(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Imports a public SSH key from a specific key pair.</p>
    func importKeyPair(input: ImportKeyPairInput) async throws -> ImportKeyPairOutputResponse
    {
        typealias importKeyPairContinuation = CheckedContinuation<ImportKeyPairOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importKeyPairContinuation) in
            importKeyPair(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a Boolean value indicating whether your Lightsail VPC is peered.</p>
    func isVpcPeered(input: IsVpcPeeredInput) async throws -> IsVpcPeeredOutputResponse
    {
        typealias isVpcPeeredContinuation = CheckedContinuation<IsVpcPeeredOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: isVpcPeeredContinuation) in
            isVpcPeered(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses
    ///       allowed to connect to the instance through the ports, and the protocol.</p>
    ///          <p>The <code>OpenInstancePublicPorts</code> action supports tag-based access control via
    ///       resource tags applied to the resource identified by <code>instanceName</code>. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func openInstancePublicPorts(input: OpenInstancePublicPortsInput) async throws -> OpenInstancePublicPortsOutputResponse
    {
        typealias openInstancePublicPortsContinuation = CheckedContinuation<OpenInstancePublicPortsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: openInstancePublicPortsContinuation) in
            openInstancePublicPorts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Tries to peer the Lightsail VPC with the user's default VPC.</p>
    func peerVpc(input: PeerVpcInput) async throws -> PeerVpcOutputResponse
    {
        typealias peerVpcContinuation = CheckedContinuation<PeerVpcOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: peerVpcContinuation) in
            peerVpc(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates or updates an alarm, and associates it with the specified metric.</p>
    ///          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
    ///       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
    ///       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
    ///         in Amazon Lightsail</a>.</p>
    ///          <p>When this action creates an alarm, the alarm state is immediately set to
    ///         <code>INSUFFICIENT_DATA</code>. The alarm is then evaluated and its state is set
    ///       appropriately. Any actions associated with the new state are then executed.</p>
    ///          <p>When you update an existing alarm, its state is left unchanged, but the update completely
    ///       overwrites the previous configuration of the alarm. The alarm is then evaluated with the
    ///       updated configuration.</p>
    func putAlarm(input: PutAlarmInput) async throws -> PutAlarmOutputResponse
    {
        typealias putAlarmContinuation = CheckedContinuation<PutAlarmOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putAlarmContinuation) in
            putAlarm(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses
    ///       allowed to connect to the instance through the ports, and the protocol. This action also
    ///       closes all currently open ports that are not included in the request. Include all of the ports
    ///       and the protocols you want to open in your <code>PutInstancePublicPorts</code>request. Or use
    ///       the <code>OpenInstancePublicPorts</code> action to open ports without closing currently open
    ///       ports.</p>
    ///          <p>The <code>PutInstancePublicPorts</code> action supports tag-based access control via
    ///       resource tags applied to the resource identified by <code>instanceName</code>. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func putInstancePublicPorts(input: PutInstancePublicPortsInput) async throws -> PutInstancePublicPortsOutputResponse
    {
        typealias putInstancePublicPortsContinuation = CheckedContinuation<PutInstancePublicPortsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putInstancePublicPortsContinuation) in
            putInstancePublicPorts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Restarts a specific instance.</p>
    ///          <p>The <code>reboot instance</code> operation supports tag-based access control via resource
    ///       tags applied to the resource identified by <code>instance name</code>. For more information,
    ///       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func rebootInstance(input: RebootInstanceInput) async throws -> RebootInstanceOutputResponse
    {
        typealias rebootInstanceContinuation = CheckedContinuation<RebootInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rebootInstanceContinuation) in
            rebootInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Restarts a specific database in Amazon Lightsail.</p>
    ///          <p>The <code>reboot relational database</code> operation supports tag-based access control
    ///       via resource tags applied to the resource identified by relationalDatabaseName. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func rebootRelationalDatabase(input: RebootRelationalDatabaseInput) async throws -> RebootRelationalDatabaseOutputResponse
    {
        typealias rebootRelationalDatabaseContinuation = CheckedContinuation<RebootRelationalDatabaseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rebootRelationalDatabaseContinuation) in
            rebootRelationalDatabase(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Registers a container image to your Amazon Lightsail container service.</p>
    ///
    ///          <note>
    ///             <p>This action is not required if you install and use the Lightsail Control
    ///         (lightsailctl) plugin to push container images to your Lightsail container service. For
    ///         more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-pushing-container-images">Pushing and managing container images on your Amazon Lightsail container services</a>
    ///         in the <i>Lightsail Dev Guide</i>.</p>
    ///          </note>
    func registerContainerImage(input: RegisterContainerImageInput) async throws -> RegisterContainerImageOutputResponse
    {
        typealias registerContainerImageContinuation = CheckedContinuation<RegisterContainerImageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerContainerImageContinuation) in
            registerContainerImage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a specific static IP from your account.</p>
    func releaseStaticIp(input: ReleaseStaticIpInput) async throws -> ReleaseStaticIpOutputResponse
    {
        typealias releaseStaticIpContinuation = CheckedContinuation<ReleaseStaticIpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: releaseStaticIpContinuation) in
            releaseStaticIp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes currently cached content from your Amazon Lightsail content delivery network (CDN)
    ///       distribution.</p>
    ///          <p>After resetting the cache, the next time a content request is made, your distribution
    ///       pulls, serves, and caches it from the origin.</p>
    func resetDistributionCache(input: ResetDistributionCacheInput) async throws -> ResetDistributionCacheOutputResponse
    {
        typealias resetDistributionCacheContinuation = CheckedContinuation<ResetDistributionCacheOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resetDistributionCacheContinuation) in
            resetDistributionCache(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sends a verification request to an email contact method to ensure it's owned by the
    ///       requester. SMS contact methods don't need to be verified.</p>
    ///          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
    ///       You can add one email address and one mobile phone number contact method in each AWS Region.
    ///       However, SMS text messaging is not supported in some AWS Regions, and SMS text messages
    ///       cannot be sent to some countries/regions. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    ///          <p>A verification request is sent to the contact method when you initially create it. Use
    ///       this action to send another verification request if a previous verification request was
    ///       deleted, or has expired.</p>
    ///          <important>
    ///             <p>Notifications are not sent to an email contact method until after it is verified, and
    ///         confirmed as valid.</p>
    ///          </important>
    func sendContactMethodVerification(input: SendContactMethodVerificationInput) async throws -> SendContactMethodVerificationOutputResponse
    {
        typealias sendContactMethodVerificationContinuation = CheckedContinuation<SendContactMethodVerificationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendContactMethodVerificationContinuation) in
            sendContactMethodVerification(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sets the IP address type for an Amazon Lightsail resource.</p>
    ///
    ///          <p>Use this action to enable dual-stack for a resource, which enables IPv4 and IPv6 for the
    ///       specified resource. Alternately, you can use this action to disable dual-stack, and enable
    ///       IPv4 only.</p>
    func setIpAddressType(input: SetIpAddressTypeInput) async throws -> SetIpAddressTypeOutputResponse
    {
        typealias setIpAddressTypeContinuation = CheckedContinuation<SetIpAddressTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setIpAddressTypeContinuation) in
            setIpAddressType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts a specific Amazon Lightsail instance from a stopped state. To restart an instance,
    ///       use the <code>reboot instance</code> operation.</p>
    ///          <note>
    ///             <p>When you start a stopped instance, Lightsail assigns a new public IP address to the
    ///         instance. To use the same IP address after stopping and starting an instance, create a
    ///         static IP address and attach it to the instance. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/lightsail-create-static-ip">Lightsail Dev Guide</a>.</p>
    ///          </note>
    ///          <p>The <code>start instance</code> operation supports tag-based access control via resource
    ///       tags applied to the resource identified by <code>instance name</code>. For more information,
    ///       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func startInstance(input: StartInstanceInput) async throws -> StartInstanceOutputResponse
    {
        typealias startInstanceContinuation = CheckedContinuation<StartInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startInstanceContinuation) in
            startInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts a specific database from a stopped state in Amazon Lightsail. To restart a database,
    ///       use the <code>reboot relational database</code> operation.</p>
    ///          <p>The <code>start relational database</code> operation supports tag-based access control via
    ///       resource tags applied to the resource identified by relationalDatabaseName. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func startRelationalDatabase(input: StartRelationalDatabaseInput) async throws -> StartRelationalDatabaseOutputResponse
    {
        typealias startRelationalDatabaseContinuation = CheckedContinuation<StartRelationalDatabaseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startRelationalDatabaseContinuation) in
            startRelationalDatabase(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Stops a specific Amazon Lightsail instance that is currently running.</p>
    ///          <note>
    ///             <p>When you start a stopped instance, Lightsail assigns a new public IP address to the
    ///         instance. To use the same IP address after stopping and starting an instance, create a
    ///         static IP address and attach it to the instance. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/lightsail-create-static-ip">Lightsail Dev Guide</a>.</p>
    ///          </note>
    ///          <p>The <code>stop instance</code> operation supports tag-based access control via resource
    ///       tags applied to the resource identified by <code>instance name</code>. For more information,
    ///       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func stopInstance(input: StopInstanceInput) async throws -> StopInstanceOutputResponse
    {
        typealias stopInstanceContinuation = CheckedContinuation<StopInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopInstanceContinuation) in
            stopInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Stops a specific database that is currently running in Amazon Lightsail.</p>
    ///          <p>The <code>stop relational database</code> operation supports tag-based access control via
    ///       resource tags applied to the resource identified by relationalDatabaseName. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func stopRelationalDatabase(input: StopRelationalDatabaseInput) async throws -> StopRelationalDatabaseOutputResponse
    {
        typealias stopRelationalDatabaseContinuation = CheckedContinuation<StopRelationalDatabaseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopRelationalDatabaseContinuation) in
            stopRelationalDatabase(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds one or more tags to the specified Amazon Lightsail resource. Each resource can have a
    ///       maximum of 50 tags. Each tag consists of a key and an optional value. Tag keys must be unique
    ///       per resource. For more information about tags, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
    ///         Dev Guide</a>.</p>
    ///          <p>The <code>tag resource</code> operation supports tag-based access control via request tags
    ///       and resource tags applied to the resource identified by <code>resource name</code>. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Tests an alarm by displaying a banner on the Amazon Lightsail console. If a notification
    ///       trigger is configured for the specified alarm, the test also sends a notification to the
    ///       notification protocol (<code>Email</code> and/or <code>SMS</code>) configured for the
    ///       alarm.</p>
    ///          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
    ///       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
    ///       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
    ///         in Amazon Lightsail</a>.</p>
    func testAlarm(input: TestAlarmInput) async throws -> TestAlarmOutputResponse
    {
        typealias testAlarmContinuation = CheckedContinuation<TestAlarmOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testAlarmContinuation) in
            testAlarm(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attempts to unpeer the Lightsail VPC from the user's default VPC.</p>
    func unpeerVpc(input: UnpeerVpcInput) async throws -> UnpeerVpcOutputResponse
    {
        typealias unpeerVpcContinuation = CheckedContinuation<UnpeerVpcOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: unpeerVpcContinuation) in
            unpeerVpc(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified set of tag keys and their values from the specified Amazon Lightsail
    ///       resource.</p>
    ///          <p>The <code>untag resource</code> operation supports tag-based access control via request
    ///       tags and resource tags applied to the resource identified by <code>resource name</code>. For
    ///       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the configuration of your Amazon Lightsail container service, such as its power,
    ///       scale, and public domain names.</p>
    func updateContainerService(input: UpdateContainerServiceInput) async throws -> UpdateContainerServiceOutputResponse
    {
        typealias updateContainerServiceContinuation = CheckedContinuation<UpdateContainerServiceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateContainerServiceContinuation) in
            updateContainerService(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an existing Amazon Lightsail content delivery network (CDN) distribution.</p>
    ///          <p>Use this action to update the configuration of your existing distribution</p>
    func updateDistribution(input: UpdateDistributionInput) async throws -> UpdateDistributionOutputResponse
    {
        typealias updateDistributionContinuation = CheckedContinuation<UpdateDistributionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDistributionContinuation) in
            updateDistribution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the bundle of your Amazon Lightsail content delivery network (CDN)
    ///       distribution.</p>
    ///          <p>A distribution bundle specifies the monthly network transfer quota and monthly cost of
    ///       your dsitribution.</p>
    ///          <p>Update your distribution's bundle if your distribution is going over its monthly network
    ///       transfer quota and is incurring an overage fee.</p>
    ///          <p>You can update your distribution's bundle only one time within your monthly AWS billing
    ///       cycle. To determine if you can update your distribution's bundle, use the
    ///         <code>GetDistributions</code> action. The <code>ableToUpdateBundle</code> parameter in the
    ///       result will indicate whether you can currently update your distribution's bundle.</p>
    func updateDistributionBundle(input: UpdateDistributionBundleInput) async throws -> UpdateDistributionBundleOutputResponse
    {
        typealias updateDistributionBundleContinuation = CheckedContinuation<UpdateDistributionBundleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDistributionBundleContinuation) in
            updateDistributionBundle(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a domain recordset after it is created.</p>
    ///          <p>The <code>update domain entry</code> operation supports tag-based access control via
    ///       resource tags applied to the resource identified by <code>domain name</code>. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func updateDomainEntry(input: UpdateDomainEntryInput) async throws -> UpdateDomainEntryOutputResponse
    {
        typealias updateDomainEntryContinuation = CheckedContinuation<UpdateDomainEntryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDomainEntryContinuation) in
            updateDomainEntry(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the specified attribute for a load balancer. You can only update one attribute at
    ///       a time.</p>
    ///          <p>The <code>update load balancer attribute</code> operation supports tag-based access
    ///       control via resource tags applied to the resource identified by <code>load balancer
    ///         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func updateLoadBalancerAttribute(input: UpdateLoadBalancerAttributeInput) async throws -> UpdateLoadBalancerAttributeOutputResponse
    {
        typealias updateLoadBalancerAttributeContinuation = CheckedContinuation<UpdateLoadBalancerAttributeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateLoadBalancerAttributeContinuation) in
            updateLoadBalancerAttribute(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Allows the update of one or more attributes of a database in Amazon Lightsail.</p>
    ///          <p>Updates are applied immediately, or in cases where the updates could result in an outage,
    ///       are applied during the database's predefined maintenance window.</p>
    ///          <p>The <code>update relational database</code> operation supports tag-based access control
    ///       via resource tags applied to the resource identified by relationalDatabaseName. For more
    ///       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func updateRelationalDatabase(input: UpdateRelationalDatabaseInput) async throws -> UpdateRelationalDatabaseOutputResponse
    {
        typealias updateRelationalDatabaseContinuation = CheckedContinuation<UpdateRelationalDatabaseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRelationalDatabaseContinuation) in
            updateRelationalDatabase(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Allows the update of one or more parameters of a database in Amazon Lightsail.</p>
    ///          <p>Parameter updates don't cause outages; therefore, their application is not subject to the
    ///       preferred maintenance window. However, there are two ways in which parameter updates are
    ///       applied: <code>dynamic</code> or <code>pending-reboot</code>. Parameters marked with a
    ///         <code>dynamic</code> apply type are applied immediately. Parameters marked with a
    ///         <code>pending-reboot</code> apply type are applied only after the database is rebooted using
    ///       the <code>reboot relational database</code> operation.</p>
    ///          <p>The <code>update relational database parameters</code> operation supports tag-based access
    ///       control via resource tags applied to the resource identified by relationalDatabaseName. For
    ///       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
    func updateRelationalDatabaseParameters(input: UpdateRelationalDatabaseParametersInput) async throws -> UpdateRelationalDatabaseParametersOutputResponse
    {
        typealias updateRelationalDatabaseParametersContinuation = CheckedContinuation<UpdateRelationalDatabaseParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRelationalDatabaseParametersContinuation) in
            updateRelationalDatabaseParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
