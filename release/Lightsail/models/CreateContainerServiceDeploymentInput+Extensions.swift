// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateContainerServiceDeploymentInputHeadersMiddleware: Middleware {
    public let id: String = "CreateContainerServiceDeploymentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateContainerServiceDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateContainerServiceDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateContainerServiceDeploymentInput>
    public typealias MOutput = OperationOutput<CreateContainerServiceDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateContainerServiceDeploymentOutputError>
}

public struct CreateContainerServiceDeploymentInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateContainerServiceDeploymentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateContainerServiceDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateContainerServiceDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateContainerServiceDeploymentInput>
    public typealias MOutput = OperationOutput<CreateContainerServiceDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateContainerServiceDeploymentOutputError>
}

public struct CreateContainerServiceDeploymentInputBodyMiddleware: Middleware {
    public let id: String = "CreateContainerServiceDeploymentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateContainerServiceDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateContainerServiceDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateContainerServiceDeploymentInput>
    public typealias MOutput = OperationOutput<CreateContainerServiceDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateContainerServiceDeploymentOutputError>
}

extension CreateContainerServiceDeploymentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containers
        case publicEndpoint
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .containers)
            for (dictKey0, containermap0) in containers {
                try containersContainer.encode(containermap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let publicEndpoint = publicEndpoint {
            try encodeContainer.encode(publicEndpoint, forKey: .publicEndpoint)
        }
    }
}
