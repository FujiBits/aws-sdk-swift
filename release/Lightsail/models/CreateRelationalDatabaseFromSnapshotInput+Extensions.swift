// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateRelationalDatabaseFromSnapshotInputHeadersMiddleware: Middleware {
    public let id: String = "CreateRelationalDatabaseFromSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRelationalDatabaseFromSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRelationalDatabaseFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRelationalDatabaseFromSnapshotInput>
    public typealias MOutput = OperationOutput<CreateRelationalDatabaseFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRelationalDatabaseFromSnapshotOutputError>
}

public struct CreateRelationalDatabaseFromSnapshotInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateRelationalDatabaseFromSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRelationalDatabaseFromSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRelationalDatabaseFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRelationalDatabaseFromSnapshotInput>
    public typealias MOutput = OperationOutput<CreateRelationalDatabaseFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRelationalDatabaseFromSnapshotOutputError>
}

public struct CreateRelationalDatabaseFromSnapshotInputBodyMiddleware: Middleware {
    public let id: String = "CreateRelationalDatabaseFromSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRelationalDatabaseFromSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRelationalDatabaseFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRelationalDatabaseFromSnapshotInput>
    public typealias MOutput = OperationOutput<CreateRelationalDatabaseFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRelationalDatabaseFromSnapshotOutputError>
}

extension CreateRelationalDatabaseFromSnapshotInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone
        case publiclyAccessible
        case relationalDatabaseBundleId
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
        case restoreTime
        case sourceRelationalDatabaseName
        case tags
        case useLatestRestorableTime
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let publiclyAccessible = publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let relationalDatabaseBundleId = relationalDatabaseBundleId {
            try encodeContainer.encode(relationalDatabaseBundleId, forKey: .relationalDatabaseBundleId)
        }
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let relationalDatabaseSnapshotName = relationalDatabaseSnapshotName {
            try encodeContainer.encode(relationalDatabaseSnapshotName, forKey: .relationalDatabaseSnapshotName)
        }
        if let restoreTime = restoreTime {
            try encodeContainer.encode(restoreTime.timeIntervalSince1970, forKey: .restoreTime)
        }
        if let sourceRelationalDatabaseName = sourceRelationalDatabaseName {
            try encodeContainer.encode(sourceRelationalDatabaseName, forKey: .sourceRelationalDatabaseName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let useLatestRestorableTime = useLatestRestorableTime {
            try encodeContainer.encode(useLatestRestorableTime, forKey: .useLatestRestorableTime)
        }
    }
}
