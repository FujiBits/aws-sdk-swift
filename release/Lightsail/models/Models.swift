// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessDeniedException(code: \(Swift.String(describing: code)), docs: \(Swift.String(describing: docs)), message: \(Swift.String(describing: message)), tip: \(Swift.String(describing: tip)))"}
}

extension AccessDeniedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.docs = output.docs
            self.message = output.message
            self.tip = output.tip
        } else {
            self.code = nil
            self.docs = nil
            self.message = nil
            self.tip = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Lightsail throws this exception when the user cannot be authenticated or uses invalid
///       credentials to access a resource.</p>
public struct AccessDeniedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var docs: Swift.String?
    public var message: Swift.String?
    public var tip: Swift.String?

    public init (
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.code = code
        self.docs = docs
        self.message = message
        self.tip = tip
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    public let code: Swift.String?
    public let docs: Swift.String?
    public let message: Swift.String?
    public let tip: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case docs
        case message
        case tip
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let docsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .docs)
        docs = docsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tip)
        tip = tipDecoded
    }
}

extension LightsailClientTypes {
    public enum AccessDirection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case inbound
        case outbound
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessDirection] {
            return [
                .inbound,
                .outbound,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .inbound: return "inbound"
            case .outbound: return "outbound"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccessDirection(rawValue: rawValue) ?? AccessDirection.sdkUnknown(rawValue)
        }
    }
}

extension AccountSetupInProgressException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccountSetupInProgressException(code: \(Swift.String(describing: code)), docs: \(Swift.String(describing: docs)), message: \(Swift.String(describing: message)), tip: \(Swift.String(describing: tip)))"}
}

extension AccountSetupInProgressException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccountSetupInProgressExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.docs = output.docs
            self.message = output.message
            self.tip = output.tip
        } else {
            self.code = nil
            self.docs = nil
            self.message = nil
            self.tip = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Lightsail throws this exception when an account is still in the setup in progress
///       state.</p>
public struct AccountSetupInProgressException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var docs: Swift.String?
    public var message: Swift.String?
    public var tip: Swift.String?

    public init (
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.code = code
        self.docs = docs
        self.message = message
        self.tip = tip
    }
}

struct AccountSetupInProgressExceptionBody: Swift.Equatable {
    public let code: Swift.String?
    public let docs: Swift.String?
    public let message: Swift.String?
    public let tip: Swift.String?
}

extension AccountSetupInProgressExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case docs
        case message
        case tip
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let docsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .docs)
        docs = docsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tip)
        tip = tipDecoded
    }
}

extension LightsailClientTypes.AddOn: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case nextSnapshotTimeOfDay
        case snapshotTimeOfDay
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nextSnapshotTimeOfDay = nextSnapshotTimeOfDay {
            try encodeContainer.encode(nextSnapshotTimeOfDay, forKey: .nextSnapshotTimeOfDay)
        }
        if let snapshotTimeOfDay = snapshotTimeOfDay {
            try encodeContainer.encode(snapshotTimeOfDay, forKey: .snapshotTimeOfDay)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let snapshotTimeOfDayDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotTimeOfDay)
        snapshotTimeOfDay = snapshotTimeOfDayDecoded
        let nextSnapshotTimeOfDayDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextSnapshotTimeOfDay)
        nextSnapshotTimeOfDay = nextSnapshotTimeOfDayDecoded
    }
}

extension LightsailClientTypes.AddOn: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddOn(name: \(Swift.String(describing: name)), nextSnapshotTimeOfDay: \(Swift.String(describing: nextSnapshotTimeOfDay)), snapshotTimeOfDay: \(Swift.String(describing: snapshotTimeOfDay)), status: \(Swift.String(describing: status)))"}
}

extension LightsailClientTypes {
    /// <p>Describes an add-on that is enabled for an Amazon Lightsail resource.</p>
    public struct AddOn: Swift.Equatable {
        /// <p>The name of the add-on.</p>
        public let name: Swift.String?
        /// <p>The next daily time an automatic snapshot will be created.</p>
        ///          <p>The time shown is in <code>HH:00</code> format, and in Coordinated Universal Time
        ///       (UTC).</p>
        ///          <p>The snapshot is automatically created between the time shown and up to 45 minutes
        ///       after.</p>
        public let nextSnapshotTimeOfDay: Swift.String?
        /// <p>The daily time when an automatic snapshot is created.</p>
        ///          <p>The time shown is in <code>HH:00</code> format, and in Coordinated Universal Time
        ///       (UTC).</p>
        ///          <p>The snapshot is automatically created between the time shown and up to 45 minutes
        ///       after.</p>
        public let snapshotTimeOfDay: Swift.String?
        /// <p>The status of the add-on.</p>
        public let status: Swift.String?

        public init (
            name: Swift.String? = nil,
            nextSnapshotTimeOfDay: Swift.String? = nil,
            snapshotTimeOfDay: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.name = name
            self.nextSnapshotTimeOfDay = nextSnapshotTimeOfDay
            self.snapshotTimeOfDay = snapshotTimeOfDay
            self.status = status
        }
    }

}

extension LightsailClientTypes.AddOnRequest: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOnType
        case autoSnapshotAddOnRequest
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOnType = addOnType {
            try encodeContainer.encode(addOnType.rawValue, forKey: .addOnType)
        }
        if let autoSnapshotAddOnRequest = autoSnapshotAddOnRequest {
            try encodeContainer.encode(autoSnapshotAddOnRequest, forKey: .autoSnapshotAddOnRequest)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addOnTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AddOnType.self, forKey: .addOnType)
        addOnType = addOnTypeDecoded
        let autoSnapshotAddOnRequestDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AutoSnapshotAddOnRequest.self, forKey: .autoSnapshotAddOnRequest)
        autoSnapshotAddOnRequest = autoSnapshotAddOnRequestDecoded
    }
}

extension LightsailClientTypes.AddOnRequest: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddOnRequest(addOnType: \(Swift.String(describing: addOnType)), autoSnapshotAddOnRequest: \(Swift.String(describing: autoSnapshotAddOnRequest)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a request to enable, modify, or disable an add-on for an Amazon Lightsail
    ///       resource.</p>
    ///          <note>
    ///             <p>An additional cost may be associated with enabling add-ons. For more information, see
    ///         the <a href="https://aws.amazon.com/lightsail/pricing/">Lightsail pricing
    ///         page</a>.</p>
    ///          </note>
    public struct AddOnRequest: Swift.Equatable {
        /// <p>The add-on type.</p>
        public let addOnType: LightsailClientTypes.AddOnType?
        /// <p>An object that represents additional parameters when enabling or modifying the automatic
        ///       snapshot add-on.</p>
        public let autoSnapshotAddOnRequest: LightsailClientTypes.AutoSnapshotAddOnRequest?

        public init (
            addOnType: LightsailClientTypes.AddOnType? = nil,
            autoSnapshotAddOnRequest: LightsailClientTypes.AutoSnapshotAddOnRequest? = nil
        )
        {
            self.addOnType = addOnType
            self.autoSnapshotAddOnRequest = autoSnapshotAddOnRequest
        }
    }

}

extension LightsailClientTypes {
    public enum AddOnType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case autosnapshot
        case sdkUnknown(Swift.String)

        public static var allCases: [AddOnType] {
            return [
                .autosnapshot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .autosnapshot: return "AutoSnapshot"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AddOnType(rawValue: rawValue) ?? AddOnType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.Alarm: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case comparisonOperator
        case contactProtocols
        case createdAt
        case datapointsToAlarm
        case evaluationPeriods
        case location
        case metricName
        case monitoredResourceInfo
        case name
        case notificationEnabled
        case notificationTriggers
        case period
        case resourceType
        case state
        case statistic
        case supportCode
        case threshold
        case treatMissingData
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let contactProtocols = contactProtocols {
            var contactProtocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contactProtocols)
            for contactprotocolslist0 in contactProtocols {
                try contactProtocolsContainer.encode(contactprotocolslist0.rawValue)
            }
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let datapointsToAlarm = datapointsToAlarm {
            try encodeContainer.encode(datapointsToAlarm, forKey: .datapointsToAlarm)
        }
        if let evaluationPeriods = evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let monitoredResourceInfo = monitoredResourceInfo {
            try encodeContainer.encode(monitoredResourceInfo, forKey: .monitoredResourceInfo)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationEnabled = notificationEnabled {
            try encodeContainer.encode(notificationEnabled, forKey: .notificationEnabled)
        }
        if let notificationTriggers = notificationTriggers {
            var notificationTriggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notificationTriggers)
            for notificationtriggerlist0 in notificationTriggers {
                try notificationTriggersContainer.encode(notificationtriggerlist0.rawValue)
            }
        }
        if period != 0 {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let statistic = statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let threshold = threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let treatMissingData = treatMissingData {
            try encodeContainer.encode(treatMissingData.rawValue, forKey: .treatMissingData)
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let monitoredResourceInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MonitoredResourceInfo.self, forKey: .monitoredResourceInfo)
        monitoredResourceInfo = monitoredResourceInfoDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let periodDecoded = try containerValues.decode(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let datapointsToAlarmDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .datapointsToAlarm)
        datapointsToAlarm = datapointsToAlarmDecoded
        let treatMissingDataDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.TreatMissingData.self, forKey: .treatMissingData)
        treatMissingData = treatMissingDataDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AlarmState.self, forKey: .state)
        state = stateDecoded
        let unitDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricUnit.self, forKey: .unit)
        unit = unitDecoded
        let contactProtocolsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContactProtocol?].self, forKey: .contactProtocols)
        var contactProtocolsDecoded0:[LightsailClientTypes.ContactProtocol]? = nil
        if let contactProtocolsContainer = contactProtocolsContainer {
            contactProtocolsDecoded0 = [LightsailClientTypes.ContactProtocol]()
            for string0 in contactProtocolsContainer {
                if let string0 = string0 {
                    contactProtocolsDecoded0?.append(string0)
                }
            }
        }
        contactProtocols = contactProtocolsDecoded0
        let notificationTriggersContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AlarmState?].self, forKey: .notificationTriggers)
        var notificationTriggersDecoded0:[LightsailClientTypes.AlarmState]? = nil
        if let notificationTriggersContainer = notificationTriggersContainer {
            notificationTriggersDecoded0 = [LightsailClientTypes.AlarmState]()
            for string0 in notificationTriggersContainer {
                if let string0 = string0 {
                    notificationTriggersDecoded0?.append(string0)
                }
            }
        }
        notificationTriggers = notificationTriggersDecoded0
        let notificationEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .notificationEnabled)
        notificationEnabled = notificationEnabledDecoded
    }
}

extension LightsailClientTypes.Alarm: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Alarm(arn: \(Swift.String(describing: arn)), comparisonOperator: \(Swift.String(describing: comparisonOperator)), contactProtocols: \(Swift.String(describing: contactProtocols)), createdAt: \(Swift.String(describing: createdAt)), datapointsToAlarm: \(Swift.String(describing: datapointsToAlarm)), evaluationPeriods: \(Swift.String(describing: evaluationPeriods)), location: \(Swift.String(describing: location)), metricName: \(Swift.String(describing: metricName)), monitoredResourceInfo: \(Swift.String(describing: monitoredResourceInfo)), name: \(Swift.String(describing: name)), notificationEnabled: \(Swift.String(describing: notificationEnabled)), notificationTriggers: \(Swift.String(describing: notificationTriggers)), period: \(Swift.String(describing: period)), resourceType: \(Swift.String(describing: resourceType)), state: \(Swift.String(describing: state)), statistic: \(Swift.String(describing: statistic)), supportCode: \(Swift.String(describing: supportCode)), threshold: \(Swift.String(describing: threshold)), treatMissingData: \(Swift.String(describing: treatMissingData)), unit: \(Swift.String(describing: unit)))"}
}

extension LightsailClientTypes {
    /// <p>Describes an alarm.</p>
    ///          <p>An alarm is a way to monitor your Amazon Lightsail resource metrics. For more information,
    ///       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
    ///         in Amazon Lightsail</a>.</p>
    public struct Alarm: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the alarm.</p>
        public let arn: Swift.String?
        /// <p>The arithmetic operation used when comparing the specified statistic and threshold.</p>
        public let comparisonOperator: LightsailClientTypes.ComparisonOperator?
        /// <p>The contact protocols for the alarm, such as <code>Email</code>, <code>SMS</code> (text
        ///       messaging), or both.</p>
        public let contactProtocols: [LightsailClientTypes.ContactProtocol]?
        /// <p>The timestamp when the alarm was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The number of data points that must not within the specified threshold to trigger the
        ///       alarm.</p>
        public let datapointsToAlarm: Swift.Int?
        /// <p>The number of periods over which data is compared to the specified threshold.</p>
        public let evaluationPeriods: Swift.Int?
        /// <p>An object that lists information about the location of the alarm.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The name of the metric associated with the alarm.</p>
        public let metricName: LightsailClientTypes.MetricName?
        /// <p>An object that lists information about the resource monitored by the alarm.</p>
        public let monitoredResourceInfo: LightsailClientTypes.MonitoredResourceInfo?
        /// <p>The name of the alarm.</p>
        public let name: Swift.String?
        /// <p>Indicates whether the alarm is enabled.</p>
        public let notificationEnabled: Swift.Bool?
        /// <p>The alarm states that trigger a notification.</p>
        public let notificationTriggers: [LightsailClientTypes.AlarmState]?
        /// <p>The period, in seconds, over which the statistic is applied.</p>
        public let period: Swift.Int
        /// <p>The Lightsail resource type (e.g., <code>Alarm</code>).</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The current state of the alarm.</p>
        ///          <p>An alarm has the following possible states:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>ALARM</code> - The metric is outside of the defined threshold.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>INSUFFICIENT_DATA</code> - The alarm has just started, the metric is not
        ///           available, or not enough data is available for the metric to determine the alarm
        ///           state.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>OK</code> - The metric is within the defined threshold.</p>
        ///             </li>
        ///          </ul>
        public let state: LightsailClientTypes.AlarmState?
        /// <p>The statistic for the metric associated with the alarm.</p>
        ///          <p>The following statistics are available:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>Minimum</code> - The lowest value observed during the specified period. Use this
        ///           value to determine low volumes of activity for your application.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Maximum</code> - The highest value observed during the specified period. Use
        ///           this value to determine high volumes of activity for your application.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Sum</code> - All values submitted for the matching metric added together. You
        ///           can use this statistic to determine the total volume of a metric.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Average</code> - The value of Sum / SampleCount during the specified period. By
        ///           comparing this statistic with the Minimum and Maximum values, you can determine the full
        ///           scope of a metric and how close the average use is to the Minimum and Maximum values. This
        ///           comparison helps you to know when to increase or decrease your resources.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SampleCount</code> - The count, or number, of data points used for the
        ///           statistical calculation.</p>
        ///             </li>
        ///          </ul>
        public let statistic: LightsailClientTypes.MetricStatistic?
        /// <p>The support code. Include this code in your email to support when you have questions about
        ///       your Lightsail alarm. This code enables our support team to look up your Lightsail
        ///       information more easily.</p>
        public let supportCode: Swift.String?
        /// <p>The value against which the specified statistic is compared.</p>
        public let threshold: Swift.Double?
        /// <p>Specifies how the alarm handles missing data points.</p>
        ///          <p>An alarm can treat missing data in the following ways:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>breaching</code> - Assume the missing data is not within the threshold. Missing
        ///           data counts towards the number of times the metric is not within the threshold.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>notBreaching</code> - Assume the missing data is within the threshold. Missing
        ///           data does not count towards the number of times the metric is not within the
        ///           threshold.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>ignore</code> - Ignore the missing data. Maintains the current alarm
        ///           state.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>missing</code> - Missing data is treated as missing.</p>
        ///             </li>
        ///          </ul>
        public let treatMissingData: LightsailClientTypes.TreatMissingData?
        /// <p>The unit of the metric associated with the alarm.</p>
        public let unit: LightsailClientTypes.MetricUnit?

        public init (
            arn: Swift.String? = nil,
            comparisonOperator: LightsailClientTypes.ComparisonOperator? = nil,
            contactProtocols: [LightsailClientTypes.ContactProtocol]? = nil,
            createdAt: ClientRuntime.Date? = nil,
            datapointsToAlarm: Swift.Int? = nil,
            evaluationPeriods: Swift.Int? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            metricName: LightsailClientTypes.MetricName? = nil,
            monitoredResourceInfo: LightsailClientTypes.MonitoredResourceInfo? = nil,
            name: Swift.String? = nil,
            notificationEnabled: Swift.Bool? = nil,
            notificationTriggers: [LightsailClientTypes.AlarmState]? = nil,
            period: Swift.Int = 0,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            state: LightsailClientTypes.AlarmState? = nil,
            statistic: LightsailClientTypes.MetricStatistic? = nil,
            supportCode: Swift.String? = nil,
            threshold: Swift.Double? = nil,
            treatMissingData: LightsailClientTypes.TreatMissingData? = nil,
            unit: LightsailClientTypes.MetricUnit? = nil
        )
        {
            self.arn = arn
            self.comparisonOperator = comparisonOperator
            self.contactProtocols = contactProtocols
            self.createdAt = createdAt
            self.datapointsToAlarm = datapointsToAlarm
            self.evaluationPeriods = evaluationPeriods
            self.location = location
            self.metricName = metricName
            self.monitoredResourceInfo = monitoredResourceInfo
            self.name = name
            self.notificationEnabled = notificationEnabled
            self.notificationTriggers = notificationTriggers
            self.period = period
            self.resourceType = resourceType
            self.state = state
            self.statistic = statistic
            self.supportCode = supportCode
            self.threshold = threshold
            self.treatMissingData = treatMissingData
            self.unit = unit
        }
    }

}

extension LightsailClientTypes {
    public enum AlarmState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alarm
        case insufficientData
        case ok
        case sdkUnknown(Swift.String)

        public static var allCases: [AlarmState] {
            return [
                .alarm,
                .insufficientData,
                .ok,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alarm: return "ALARM"
            case .insufficientData: return "INSUFFICIENT_DATA"
            case .ok: return "OK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AlarmState(rawValue: rawValue) ?? AlarmState.sdkUnknown(rawValue)
        }
    }
}

public struct AllocateStaticIpInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocateStaticIpInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocateStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocateStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocateStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocateStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocateStaticIpOutputError>
}

extension AllocateStaticIpInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AllocateStaticIpInput(staticIpName: \(Swift.String(describing: staticIpName)))"}
}

extension AllocateStaticIpInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let staticIpName = staticIpName {
            try encodeContainer.encode(staticIpName, forKey: .staticIpName)
        }
    }
}

public struct AllocateStaticIpInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocateStaticIpInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocateStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocateStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocateStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocateStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocateStaticIpOutputError>
}

public struct AllocateStaticIpInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AllocateStaticIpInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AllocateStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AllocateStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AllocateStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AllocateStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AllocateStaticIpOutputError>
}

public struct AllocateStaticIpInput: Swift.Equatable {
    /// <p>The name of the static IP address.</p>
    public let staticIpName: Swift.String?

    public init (
        staticIpName: Swift.String? = nil
    )
    {
        self.staticIpName = staticIpName
    }
}

struct AllocateStaticIpInputBody: Swift.Equatable {
    public let staticIpName: Swift.String?
}

extension AllocateStaticIpInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticIpNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .staticIpName)
        staticIpName = staticIpNameDecoded
    }
}

extension AllocateStaticIpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AllocateStaticIpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AllocateStaticIpOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AllocateStaticIpOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AllocateStaticIpOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension AllocateStaticIpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AllocateStaticIpOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct AllocateStaticIpOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct AllocateStaticIpOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension AllocateStaticIpOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct AttachCertificateToDistributionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachCertificateToDistributionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachCertificateToDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachCertificateToDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachCertificateToDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachCertificateToDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachCertificateToDistributionOutputError>
}

extension AttachCertificateToDistributionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachCertificateToDistributionInput(certificateName: \(Swift.String(describing: certificateName)), distributionName: \(Swift.String(describing: distributionName)))"}
}

extension AttachCertificateToDistributionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case distributionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateName = certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let distributionName = distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
    }
}

public struct AttachCertificateToDistributionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachCertificateToDistributionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachCertificateToDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachCertificateToDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachCertificateToDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachCertificateToDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachCertificateToDistributionOutputError>
}

public struct AttachCertificateToDistributionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachCertificateToDistributionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachCertificateToDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachCertificateToDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachCertificateToDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachCertificateToDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachCertificateToDistributionOutputError>
}

public struct AttachCertificateToDistributionInput: Swift.Equatable {
    /// <p>The name of the certificate to attach to a distribution.</p>
    ///          <p>Only certificates with a status of <code>ISSUED</code> can be attached to a
    ///       distribution.</p>
    ///          <p>Use the <code>GetCertificates</code> action to get a list of certificate names that you
    ///       can specify.</p>
    ///          <note>
    ///             <p>This is the name of the certificate resource type and is used only to reference the
    ///         certificate in other API actions. It can be different than the domain name of the
    ///         certificate. For example, your certificate name might be
    ///           <code>WordPress-Blog-Certificate</code> and the domain name of the certificate might be
    ///           <code>example.com</code>.</p>
    ///          </note>
    public let certificateName: Swift.String?
    /// <p>The name of the distribution that the certificate will be attached to.</p>
    ///          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    ///       can specify.</p>
    public let distributionName: Swift.String?

    public init (
        certificateName: Swift.String? = nil,
        distributionName: Swift.String? = nil
    )
    {
        self.certificateName = certificateName
        self.distributionName = distributionName
    }
}

struct AttachCertificateToDistributionInputBody: Swift.Equatable {
    public let distributionName: Swift.String?
    public let certificateName: Swift.String?
}

extension AttachCertificateToDistributionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case distributionName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
    }
}

extension AttachCertificateToDistributionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachCertificateToDistributionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachCertificateToDistributionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachCertificateToDistributionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachCertificateToDistributionOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension AttachCertificateToDistributionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AttachCertificateToDistributionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct AttachCertificateToDistributionOutputResponse: Swift.Equatable {
    /// <p>An object that describes the result of the action, such as the status of the request, the
    ///       timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct AttachCertificateToDistributionOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension AttachCertificateToDistributionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

public struct AttachDiskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachDiskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachDiskOutputError>
}

extension AttachDiskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachDiskInput(diskName: \(Swift.String(describing: diskName)), diskPath: \(Swift.String(describing: diskPath)), instanceName: \(Swift.String(describing: instanceName)))"}
}

extension AttachDiskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
        case diskPath
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskName = diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
        if let diskPath = diskPath {
            try encodeContainer.encode(diskPath, forKey: .diskPath)
        }
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

public struct AttachDiskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachDiskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachDiskOutputError>
}

public struct AttachDiskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachDiskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachDiskOutputError>
}

public struct AttachDiskInput: Swift.Equatable {
    /// <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    public let diskName: Swift.String?
    /// <p>The disk path to expose to the instance (e.g., <code>/dev/xvdf</code>).</p>
    public let diskPath: Swift.String?
    /// <p>The name of the Lightsail instance where you want to utilize the storage disk.</p>
    public let instanceName: Swift.String?

    public init (
        diskName: Swift.String? = nil,
        diskPath: Swift.String? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.diskName = diskName
        self.diskPath = diskPath
        self.instanceName = instanceName
    }
}

struct AttachDiskInputBody: Swift.Equatable {
    public let diskName: Swift.String?
    public let instanceName: Swift.String?
    public let diskPath: Swift.String?
}

extension AttachDiskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
        case diskPath
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let diskPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskPath)
        diskPath = diskPathDecoded
    }
}

extension AttachDiskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachDiskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachDiskOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachDiskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachDiskOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension AttachDiskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AttachDiskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct AttachDiskOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct AttachDiskOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension AttachDiskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct AttachInstancesToLoadBalancerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachInstancesToLoadBalancerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachInstancesToLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachInstancesToLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachInstancesToLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachInstancesToLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachInstancesToLoadBalancerOutputError>
}

extension AttachInstancesToLoadBalancerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachInstancesToLoadBalancerInput(instanceNames: \(Swift.String(describing: instanceNames)), loadBalancerName: \(Swift.String(describing: loadBalancerName)))"}
}

extension AttachInstancesToLoadBalancerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for resourcenamelist0 in instanceNames {
                try instanceNamesContainer.encode(resourcenamelist0)
            }
        }
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

public struct AttachInstancesToLoadBalancerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachInstancesToLoadBalancerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachInstancesToLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachInstancesToLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachInstancesToLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachInstancesToLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachInstancesToLoadBalancerOutputError>
}

public struct AttachInstancesToLoadBalancerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachInstancesToLoadBalancerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachInstancesToLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachInstancesToLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachInstancesToLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachInstancesToLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachInstancesToLoadBalancerOutputError>
}

public struct AttachInstancesToLoadBalancerInput: Swift.Equatable {
    /// <p>An array of strings representing the instance name(s) you want to attach to your load
    ///       balancer.</p>
    ///          <p>An instance must be <code>running</code> before you can attach it to your load
    ///       balancer.</p>
    ///          <p>There are no additional limits on the number of instances you can attach to your load
    ///       balancer, aside from the limit of Lightsail instances you can create in your account
    ///       (20).</p>
    public let instanceNames: [Swift.String]?
    /// <p>The name of the load balancer.</p>
    public let loadBalancerName: Swift.String?

    public init (
        instanceNames: [Swift.String]? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.instanceNames = instanceNames
        self.loadBalancerName = loadBalancerName
    }
}

struct AttachInstancesToLoadBalancerInputBody: Swift.Equatable {
    public let loadBalancerName: Swift.String?
    public let instanceNames: [Swift.String]?
}

extension AttachInstancesToLoadBalancerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let instanceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[Swift.String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [Swift.String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
    }
}

extension AttachInstancesToLoadBalancerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachInstancesToLoadBalancerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachInstancesToLoadBalancerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachInstancesToLoadBalancerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachInstancesToLoadBalancerOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension AttachInstancesToLoadBalancerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AttachInstancesToLoadBalancerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct AttachInstancesToLoadBalancerOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct AttachInstancesToLoadBalancerOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension AttachInstancesToLoadBalancerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct AttachLoadBalancerTlsCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachLoadBalancerTlsCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachLoadBalancerTlsCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachLoadBalancerTlsCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachLoadBalancerTlsCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachLoadBalancerTlsCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachLoadBalancerTlsCertificateOutputError>
}

extension AttachLoadBalancerTlsCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachLoadBalancerTlsCertificateInput(certificateName: \(Swift.String(describing: certificateName)), loadBalancerName: \(Swift.String(describing: loadBalancerName)))"}
}

extension AttachLoadBalancerTlsCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateName = certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

public struct AttachLoadBalancerTlsCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachLoadBalancerTlsCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachLoadBalancerTlsCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachLoadBalancerTlsCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachLoadBalancerTlsCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachLoadBalancerTlsCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachLoadBalancerTlsCertificateOutputError>
}

public struct AttachLoadBalancerTlsCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachLoadBalancerTlsCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachLoadBalancerTlsCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachLoadBalancerTlsCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachLoadBalancerTlsCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachLoadBalancerTlsCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachLoadBalancerTlsCertificateOutputError>
}

public struct AttachLoadBalancerTlsCertificateInput: Swift.Equatable {
    /// <p>The name of your SSL/TLS certificate.</p>
    public let certificateName: Swift.String?
    /// <p>The name of the load balancer to which you want to associate the SSL/TLS
    ///       certificate.</p>
    public let loadBalancerName: Swift.String?

    public init (
        certificateName: Swift.String? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.certificateName = certificateName
        self.loadBalancerName = loadBalancerName
    }
}

struct AttachLoadBalancerTlsCertificateInputBody: Swift.Equatable {
    public let loadBalancerName: Swift.String?
    public let certificateName: Swift.String?
}

extension AttachLoadBalancerTlsCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
    }
}

extension AttachLoadBalancerTlsCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachLoadBalancerTlsCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachLoadBalancerTlsCertificateOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachLoadBalancerTlsCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachLoadBalancerTlsCertificateOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension AttachLoadBalancerTlsCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AttachLoadBalancerTlsCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct AttachLoadBalancerTlsCertificateOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    ///          <p>These SSL/TLS certificates are only usable by Lightsail load balancers. You can't get
    ///       the certificate and use it for another purpose.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct AttachLoadBalancerTlsCertificateOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension AttachLoadBalancerTlsCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct AttachStaticIpInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachStaticIpInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachStaticIpOutputError>
}

extension AttachStaticIpInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachStaticIpInput(instanceName: \(Swift.String(describing: instanceName)), staticIpName: \(Swift.String(describing: staticIpName)))"}
}

extension AttachStaticIpInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case staticIpName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let staticIpName = staticIpName {
            try encodeContainer.encode(staticIpName, forKey: .staticIpName)
        }
    }
}

public struct AttachStaticIpInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachStaticIpInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachStaticIpOutputError>
}

public struct AttachStaticIpInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachStaticIpInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachStaticIpOutputError>
}

public struct AttachStaticIpInput: Swift.Equatable {
    /// <p>The instance name to which you want to attach the static IP address.</p>
    public let instanceName: Swift.String?
    /// <p>The name of the static IP.</p>
    public let staticIpName: Swift.String?

    public init (
        instanceName: Swift.String? = nil,
        staticIpName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
        self.staticIpName = staticIpName
    }
}

struct AttachStaticIpInputBody: Swift.Equatable {
    public let staticIpName: Swift.String?
    public let instanceName: Swift.String?
}

extension AttachStaticIpInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case staticIpName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticIpNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .staticIpName)
        staticIpName = staticIpNameDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension AttachStaticIpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AttachStaticIpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachStaticIpOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachStaticIpOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachStaticIpOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension AttachStaticIpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AttachStaticIpOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct AttachStaticIpOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct AttachStaticIpOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension AttachStaticIpOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes.AttachedDisk: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case path
        case sizeInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let sizeInGb = sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
    }
}

extension LightsailClientTypes.AttachedDisk: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachedDisk(path: \(Swift.String(describing: path)), sizeInGb: \(Swift.String(describing: sizeInGb)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a block storage disk that is attached to an instance, and is included in an
    ///       automatic snapshot.</p>
    public struct AttachedDisk: Swift.Equatable {
        /// <p>The path of the disk (e.g., <code>/dev/xvdf</code>).</p>
        public let path: Swift.String?
        /// <p>The size of the disk in GB.</p>
        public let sizeInGb: Swift.Int?

        public init (
            path: Swift.String? = nil,
            sizeInGb: Swift.Int? = nil
        )
        {
            self.path = path
            self.sizeInGb = sizeInGb
        }
    }

}

extension LightsailClientTypes.AutoSnapshotAddOnRequest: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotTimeOfDay
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let snapshotTimeOfDay = snapshotTimeOfDay {
            try encodeContainer.encode(snapshotTimeOfDay, forKey: .snapshotTimeOfDay)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotTimeOfDayDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotTimeOfDay)
        snapshotTimeOfDay = snapshotTimeOfDayDecoded
    }
}

extension LightsailClientTypes.AutoSnapshotAddOnRequest: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoSnapshotAddOnRequest(snapshotTimeOfDay: \(Swift.String(describing: snapshotTimeOfDay)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a request to enable or modify the automatic snapshot add-on for an
    ///       Amazon Lightsail instance or disk.</p>
    ///          <p>When you modify the automatic snapshot time for a resource, it is typically effective
    ///       immediately except under the following conditions:</p>
    ///          <ul>
    ///             <li>
    ///                <p>If an automatic snapshot has been created for the current day, and you change the
    ///           snapshot time to a later time of day, then the new snapshot time will be effective the
    ///           following day. This ensures that two snapshots are not created for the current day.</p>
    ///             </li>
    ///             <li>
    ///                <p>If an automatic snapshot has not yet been created for the current day, and you change
    ///           the snapshot time to an earlier time of day, then the new snapshot time will be effective
    ///           the following day and a snapshot is automatically created at the previously set time for
    ///           the current day. This ensures that a snapshot is created for the current day.</p>
    ///             </li>
    ///             <li>
    ///                <p>If an automatic snapshot has not yet been created for the current day, and you change
    ///           the snapshot time to a time that is within 30 minutes from your current time, then the new
    ///           snapshot time will be effective the following day and a snapshot is automatically created
    ///           at the previously set time for the current day. This ensures that a snapshot is created
    ///           for the current day, because 30 minutes is required between your current time and the new
    ///           snapshot time that you specify.</p>
    ///             </li>
    ///             <li>
    ///                <p>If an automatic snapshot is scheduled to be created within 30 minutes from your
    ///           current time and you change the snapshot time, then the new snapshot time will be
    ///           effective the following day and a snapshot is automatically created at the previously set
    ///           time for the current day. This ensures that a snapshot is created for the current day,
    ///           because 30 minutes is required between your current time and the new snapshot time that
    ///           you specify.</p>
    ///             </li>
    ///          </ul>
    public struct AutoSnapshotAddOnRequest: Swift.Equatable {
        /// <p>The daily time when an automatic snapshot will be created.</p>
        ///          <p>Constraints:</p>
        ///          <ul>
        ///             <li>
        ///                <p>Must be in <code>HH:00</code> format, and in an hourly increment.</p>
        ///             </li>
        ///             <li>
        ///                <p>Specified in Coordinated Universal Time (UTC).</p>
        ///             </li>
        ///             <li>
        ///                <p>The snapshot will be automatically created between the time specified and up to 45
        ///           minutes after.</p>
        ///             </li>
        ///          </ul>
        public let snapshotTimeOfDay: Swift.String?

        public init (
            snapshotTimeOfDay: Swift.String? = nil
        )
        {
            self.snapshotTimeOfDay = snapshotTimeOfDay
        }
    }

}

extension LightsailClientTypes.AutoSnapshotDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case date
        case fromAttachedDisks
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let date = date {
            try encodeContainer.encode(date, forKey: .date)
        }
        if let fromAttachedDisks = fromAttachedDisks {
            var fromAttachedDisksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fromAttachedDisks)
            for attacheddisklist0 in fromAttachedDisks {
                try fromAttachedDisksContainer.encode(attacheddisklist0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .date)
        date = dateDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AutoSnapshotStatus.self, forKey: .status)
        status = statusDecoded
        let fromAttachedDisksContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AttachedDisk?].self, forKey: .fromAttachedDisks)
        var fromAttachedDisksDecoded0:[LightsailClientTypes.AttachedDisk]? = nil
        if let fromAttachedDisksContainer = fromAttachedDisksContainer {
            fromAttachedDisksDecoded0 = [LightsailClientTypes.AttachedDisk]()
            for structure0 in fromAttachedDisksContainer {
                if let structure0 = structure0 {
                    fromAttachedDisksDecoded0?.append(structure0)
                }
            }
        }
        fromAttachedDisks = fromAttachedDisksDecoded0
    }
}

extension LightsailClientTypes.AutoSnapshotDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoSnapshotDetails(createdAt: \(Swift.String(describing: createdAt)), date: \(Swift.String(describing: date)), fromAttachedDisks: \(Swift.String(describing: fromAttachedDisks)), status: \(Swift.String(describing: status)))"}
}

extension LightsailClientTypes {
    /// <p>Describes an automatic snapshot.</p>
    public struct AutoSnapshotDetails: Swift.Equatable {
        /// <p>The timestamp when the automatic snapshot was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The date of the automatic snapshot in <code>YYYY-MM-DD</code> format.</p>
        public let date: Swift.String?
        /// <p>An array of objects that describe the block storage disks attached to the instance when
        ///       the automatic snapshot was created.</p>
        public let fromAttachedDisks: [LightsailClientTypes.AttachedDisk]?
        /// <p>The status of the automatic snapshot.</p>
        public let status: LightsailClientTypes.AutoSnapshotStatus?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            date: Swift.String? = nil,
            fromAttachedDisks: [LightsailClientTypes.AttachedDisk]? = nil,
            status: LightsailClientTypes.AutoSnapshotStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.date = date
            self.fromAttachedDisks = fromAttachedDisks
            self.status = status
        }
    }

}

extension LightsailClientTypes {
    public enum AutoSnapshotStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case notFound
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoSnapshotStatus] {
            return [
                .failed,
                .inProgress,
                .notFound,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .notFound: return "NotFound"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoSnapshotStatus(rawValue: rawValue) ?? AutoSnapshotStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.AvailabilityZone: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case state
        case zoneName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let zoneName = zoneName {
            try encodeContainer.encode(zoneName, forKey: .zoneName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let zoneNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .zoneName)
        zoneName = zoneNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
    }
}

extension LightsailClientTypes.AvailabilityZone: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AvailabilityZone(state: \(Swift.String(describing: state)), zoneName: \(Swift.String(describing: zoneName)))"}
}

extension LightsailClientTypes {
    /// <p>Describes an Availability Zone.</p>
    public struct AvailabilityZone: Swift.Equatable {
        /// <p>The state of the Availability Zone.</p>
        public let state: Swift.String?
        /// <p>The name of the Availability Zone. The format is <code>us-east-2a</code>
        ///       (case-sensitive).</p>
        public let zoneName: Swift.String?

        public init (
            state: Swift.String? = nil,
            zoneName: Swift.String? = nil
        )
        {
            self.state = state
            self.zoneName = zoneName
        }
    }

}

extension LightsailClientTypes {
    public enum BehaviorEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cachesetting
        case dontcachesetting
        case sdkUnknown(Swift.String)

        public static var allCases: [BehaviorEnum] {
            return [
                .cachesetting,
                .dontcachesetting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cachesetting: return "cache"
            case .dontcachesetting: return "dont-cache"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BehaviorEnum(rawValue: rawValue) ?? BehaviorEnum.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.Blueprint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintId
        case description
        case group
        case isActive
        case licenseUrl
        case minPower
        case name
        case platform
        case productUrl
        case type
        case version
        case versionCode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintId = blueprintId {
            try encodeContainer.encode(blueprintId, forKey: .blueprintId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let group = group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let isActive = isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let licenseUrl = licenseUrl {
            try encodeContainer.encode(licenseUrl, forKey: .licenseUrl)
        }
        if let minPower = minPower {
            try encodeContainer.encode(minPower, forKey: .minPower)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let platform = platform {
            try encodeContainer.encode(platform.rawValue, forKey: .platform)
        }
        if let productUrl = productUrl {
            try encodeContainer.encode(productUrl, forKey: .productUrl)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let versionCode = versionCode {
            try encodeContainer.encode(versionCode, forKey: .versionCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintId)
        blueprintId = blueprintIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
        let typeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BlueprintType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
        let minPowerDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minPower)
        minPower = minPowerDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let versionCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionCode)
        versionCode = versionCodeDecoded
        let productUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productUrl)
        productUrl = productUrlDecoded
        let licenseUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseUrl)
        licenseUrl = licenseUrlDecoded
        let platformDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstancePlatform.self, forKey: .platform)
        platform = platformDecoded
    }
}

extension LightsailClientTypes.Blueprint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Blueprint(blueprintId: \(Swift.String(describing: blueprintId)), description: \(Swift.String(describing: description)), group: \(Swift.String(describing: group)), isActive: \(Swift.String(describing: isActive)), licenseUrl: \(Swift.String(describing: licenseUrl)), minPower: \(Swift.String(describing: minPower)), name: \(Swift.String(describing: name)), platform: \(Swift.String(describing: platform)), productUrl: \(Swift.String(describing: productUrl)), type: \(Swift.String(describing: type)), version: \(Swift.String(describing: version)), versionCode: \(Swift.String(describing: versionCode)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a blueprint (a virtual private server image).</p>
    public struct Blueprint: Swift.Equatable {
        /// <p>The ID for the virtual private server image (e.g., <code>app_wordpress_4_4</code> or
        ///         <code>app_lamp_7_0</code>).</p>
        public let blueprintId: Swift.String?
        /// <p>The description of the blueprint.</p>
        public let description: Swift.String?
        /// <p>The group name of the blueprint (e.g., <code>amazon-linux</code>).</p>
        public let group: Swift.String?
        /// <p>A Boolean value indicating whether the blueprint is active. Inactive blueprints are listed
        ///       to support customers with existing instances but are not necessarily available for launch of
        ///       new instances. Blueprints are marked inactive when they become outdated due to operating
        ///       system updates or new application releases.</p>
        public let isActive: Swift.Bool?
        /// <p>The end-user license agreement URL for the image or blueprint.</p>
        public let licenseUrl: Swift.String?
        /// <p>The minimum bundle power required to run this blueprint. For example, you need a bundle
        ///       with a power value of 500 or more to create an instance that uses a blueprint with a minimum
        ///       power value of 500. <code>0</code> indicates that the blueprint runs on all instance sizes.
        ///     </p>
        public let minPower: Swift.Int?
        /// <p>The friendly name of the blueprint (e.g., <code>Amazon Linux</code>).</p>
        public let name: Swift.String?
        /// <p>The operating system platform (either Linux/Unix-based or Windows Server-based) of the
        ///       blueprint.</p>
        public let platform: LightsailClientTypes.InstancePlatform?
        /// <p>The product URL to learn more about the image or blueprint.</p>
        public let productUrl: Swift.String?
        /// <p>The type of the blueprint (e.g., <code>os</code> or <code>app</code>).</p>
        public let type: LightsailClientTypes.BlueprintType?
        /// <p>The version number of the operating system, application, or stack (e.g.,
        ///         <code>2016.03.0</code>).</p>
        public let version: Swift.String?
        /// <p>The version code.</p>
        public let versionCode: Swift.String?

        public init (
            blueprintId: Swift.String? = nil,
            description: Swift.String? = nil,
            group: Swift.String? = nil,
            isActive: Swift.Bool? = nil,
            licenseUrl: Swift.String? = nil,
            minPower: Swift.Int? = nil,
            name: Swift.String? = nil,
            platform: LightsailClientTypes.InstancePlatform? = nil,
            productUrl: Swift.String? = nil,
            type: LightsailClientTypes.BlueprintType? = nil,
            version: Swift.String? = nil,
            versionCode: Swift.String? = nil
        )
        {
            self.blueprintId = blueprintId
            self.description = description
            self.group = group
            self.isActive = isActive
            self.licenseUrl = licenseUrl
            self.minPower = minPower
            self.name = name
            self.platform = platform
            self.productUrl = productUrl
            self.type = type
            self.version = version
            self.versionCode = versionCode
        }
    }

}

extension LightsailClientTypes {
    public enum BlueprintType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case app
        case os
        case sdkUnknown(Swift.String)

        public static var allCases: [BlueprintType] {
            return [
                .app,
                .os,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .app: return "app"
            case .os: return "os"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BlueprintType(rawValue: rawValue) ?? BlueprintType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.Bundle: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case cpuCount
        case diskSizeInGb
        case instanceType
        case isActive
        case name
        case power
        case price
        case ramSizeInGb
        case supportedPlatforms
        case transferPerMonthInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let cpuCount = cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let diskSizeInGb = diskSizeInGb {
            try encodeContainer.encode(diskSizeInGb, forKey: .diskSizeInGb)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let isActive = isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let power = power {
            try encodeContainer.encode(power, forKey: .power)
        }
        if let price = price {
            try encodeContainer.encode(price, forKey: .price)
        }
        if let ramSizeInGb = ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
        if let supportedPlatforms = supportedPlatforms {
            var supportedPlatformsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedPlatforms)
            for instanceplatformlist0 in supportedPlatforms {
                try supportedPlatformsContainer.encode(instanceplatformlist0.rawValue)
            }
        }
        if let transferPerMonthInGb = transferPerMonthInGb {
            try encodeContainer.encode(transferPerMonthInGb, forKey: .transferPerMonthInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let priceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .price)
        price = priceDecoded
        let cpuCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let diskSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .diskSizeInGb)
        diskSizeInGb = diskSizeInGbDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let powerDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .power)
        power = powerDecoded
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
        let transferPerMonthInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transferPerMonthInGb)
        transferPerMonthInGb = transferPerMonthInGbDecoded
        let supportedPlatformsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.InstancePlatform?].self, forKey: .supportedPlatforms)
        var supportedPlatformsDecoded0:[LightsailClientTypes.InstancePlatform]? = nil
        if let supportedPlatformsContainer = supportedPlatformsContainer {
            supportedPlatformsDecoded0 = [LightsailClientTypes.InstancePlatform]()
            for string0 in supportedPlatformsContainer {
                if let string0 = string0 {
                    supportedPlatformsDecoded0?.append(string0)
                }
            }
        }
        supportedPlatforms = supportedPlatformsDecoded0
    }
}

extension LightsailClientTypes.Bundle: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Bundle(bundleId: \(Swift.String(describing: bundleId)), cpuCount: \(Swift.String(describing: cpuCount)), diskSizeInGb: \(Swift.String(describing: diskSizeInGb)), instanceType: \(Swift.String(describing: instanceType)), isActive: \(Swift.String(describing: isActive)), name: \(Swift.String(describing: name)), power: \(Swift.String(describing: power)), price: \(Swift.String(describing: price)), ramSizeInGb: \(Swift.String(describing: ramSizeInGb)), supportedPlatforms: \(Swift.String(describing: supportedPlatforms)), transferPerMonthInGb: \(Swift.String(describing: transferPerMonthInGb)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a bundle, which is a set of specs describing your virtual private server (or
    ///         <i>instance</i>).</p>
    public struct Bundle: Swift.Equatable {
        /// <p>The bundle ID (e.g., <code>micro_1_0</code>).</p>
        public let bundleId: Swift.String?
        /// <p>The number of vCPUs included in the bundle (e.g., <code>2</code>).</p>
        public let cpuCount: Swift.Int?
        /// <p>The size of the SSD (e.g., <code>30</code>).</p>
        public let diskSizeInGb: Swift.Int?
        /// <p>The Amazon EC2 instance type (e.g., <code>t2.micro</code>).</p>
        public let instanceType: Swift.String?
        /// <p>A Boolean value indicating whether the bundle is active.</p>
        public let isActive: Swift.Bool?
        /// <p>A friendly name for the bundle (e.g., <code>Micro</code>).</p>
        public let name: Swift.String?
        /// <p>A numeric value that represents the power of the bundle (e.g., <code>500</code>). You can
        ///       use the bundle's power value in conjunction with a blueprint's minimum power value to
        ///       determine whether the blueprint will run on the bundle. For example, you need a bundle with a
        ///       power value of 500 or more to create an instance that uses a blueprint with a minimum power
        ///       value of 500.</p>
        public let power: Swift.Int?
        /// <p>The price in US dollars (e.g., <code>5.0</code>) of the bundle.</p>
        public let price: Swift.Float?
        /// <p>The amount of RAM in GB (e.g., <code>2.0</code>).</p>
        public let ramSizeInGb: Swift.Float?
        /// <p>The operating system platform (Linux/Unix-based or Windows Server-based) that the bundle
        ///       supports. You can only launch a <code>WINDOWS</code> bundle on a blueprint that supports the
        ///         <code>WINDOWS</code> platform. <code>LINUX_UNIX</code> blueprints require a
        ///         <code>LINUX_UNIX</code> bundle.</p>
        public let supportedPlatforms: [LightsailClientTypes.InstancePlatform]?
        /// <p>The data transfer rate per month in GB (e.g., <code>2000</code>).</p>
        public let transferPerMonthInGb: Swift.Int?

        public init (
            bundleId: Swift.String? = nil,
            cpuCount: Swift.Int? = nil,
            diskSizeInGb: Swift.Int? = nil,
            instanceType: Swift.String? = nil,
            isActive: Swift.Bool? = nil,
            name: Swift.String? = nil,
            power: Swift.Int? = nil,
            price: Swift.Float? = nil,
            ramSizeInGb: Swift.Float? = nil,
            supportedPlatforms: [LightsailClientTypes.InstancePlatform]? = nil,
            transferPerMonthInGb: Swift.Int? = nil
        )
        {
            self.bundleId = bundleId
            self.cpuCount = cpuCount
            self.diskSizeInGb = diskSizeInGb
            self.instanceType = instanceType
            self.isActive = isActive
            self.name = name
            self.power = power
            self.price = price
            self.ramSizeInGb = ramSizeInGb
            self.supportedPlatforms = supportedPlatforms
            self.transferPerMonthInGb = transferPerMonthInGb
        }
    }

}

extension LightsailClientTypes.CacheBehavior: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behavior
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behavior = behavior {
            try encodeContainer.encode(behavior.rawValue, forKey: .behavior)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let behaviorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BehaviorEnum.self, forKey: .behavior)
        behavior = behaviorDecoded
    }
}

extension LightsailClientTypes.CacheBehavior: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CacheBehavior(behavior: \(Swift.String(describing: behavior)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the default cache behavior of an Amazon Lightsail content delivery network (CDN)
    ///       distribution.</p>
    public struct CacheBehavior: Swift.Equatable {
        /// <p>The cache behavior of the distribution.</p>
        ///          <p>The following cache behaviors can be specified:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>cache</code>
        ///                   </b> - This option is best for static
        ///           sites. When specified, your distribution caches and serves your entire website as static
        ///           content. This behavior is ideal for websites with static content that doesn't change
        ///           depending on who views it, or for websites that don't use cookies, headers, or query
        ///           strings to personalize content.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>dont-cache</code>
        ///                   </b> - This option is best for
        ///           sites that serve a mix of static and dynamic content. When specified, your distribution
        ///           caches and serve only the content that is specified in the distribution's
        ///             <code>CacheBehaviorPerPath</code> parameter. This behavior is ideal for websites or web
        ///           applications that use cookies, headers, and query strings to personalize content for
        ///           individual users.</p>
        ///             </li>
        ///          </ul>
        public let behavior: LightsailClientTypes.BehaviorEnum?

        public init (
            behavior: LightsailClientTypes.BehaviorEnum? = nil
        )
        {
            self.behavior = behavior
        }
    }

}

extension LightsailClientTypes.CacheBehaviorPerPath: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behavior
        case path
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behavior = behavior {
            try encodeContainer.encode(behavior.rawValue, forKey: .behavior)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let behaviorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BehaviorEnum.self, forKey: .behavior)
        behavior = behaviorDecoded
    }
}

extension LightsailClientTypes.CacheBehaviorPerPath: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CacheBehaviorPerPath(behavior: \(Swift.String(describing: behavior)), path: \(Swift.String(describing: path)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the per-path cache behavior of an Amazon Lightsail content delivery network (CDN)
    ///       distribution.</p>
    ///          <p>A per-path cache behavior is used to override, or add an exception to, the default cache
    ///       behavior of a distribution. For example, if the <code>cacheBehavior</code> is set to
    ///         <code>cache</code>, then a per-path cache behavior can be used to specify a directory, file,
    ///       or file type that your distribution will cache. Alternately, if the distribution's
    ///         <code>cacheBehavior</code> is <code>dont-cache</code>, then a per-path cache behavior can be
    ///       used to specify a directory, file, or file type that your distribution will not cache.</p>
    ///          <p>if the cacheBehavior's behavior is set to 'cache', then</p>
    public struct CacheBehaviorPerPath: Swift.Equatable {
        /// <p>The cache behavior for the specified path.</p>
        ///          <p>You can specify one of the following per-path cache behaviors:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>cache</code>
        ///                   </b> - This behavior caches the
        ///           specified path. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>dont-cache</code>
        ///                   </b> - This behavior doesn't cache
        ///           the specified path. </p>
        ///             </li>
        ///          </ul>
        public let behavior: LightsailClientTypes.BehaviorEnum?
        /// <p>The path to a directory or file to cached, or not cache. Use an asterisk symbol to specify
        ///       wildcard directories (<code>path/to/assets/*</code>), and file types (<code>*.html, *jpg,
        ///         *js</code>). Directories and file paths are case-sensitive.</p>
        ///          <p>Examples:</p>
        ///          <ul>
        ///             <li>
        ///                <p>Specify the following to cache all files in the document root of an Apache web server
        ///           running on a Lightsail instance.</p>
        ///                <p>
        ///                   <code>var/www/html/</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>Specify the following file to cache only the index page in the document root of an
        ///           Apache web server.</p>
        ///                <p>
        ///                   <code>var/www/html/index.html</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>Specify the following to cache only the .html files in the document root of an Apache
        ///           web server.</p>
        ///                <p>
        ///                   <code>var/www/html/*.html</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>Specify the following to cache only the .jpg, .png, and .gif files in the images
        ///           sub-directory of the document root of an Apache web server.</p>
        ///                <p>
        ///                   <code>var/www/html/images/*.jpg</code>
        ///                </p>
        ///                <p>
        ///                   <code>var/www/html/images/*.png</code>
        ///                </p>
        ///                <p>
        ///                   <code>var/www/html/images/*.gif</code>
        ///                </p>
        ///                <p>Specify the following to cache all files in the images sub-directory of the document
        ///           root of an Apache web server.</p>
        ///                <p>
        ///                   <code>var/www/html/images/</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let path: Swift.String?

        public init (
            behavior: LightsailClientTypes.BehaviorEnum? = nil,
            path: Swift.String? = nil
        )
        {
            self.behavior = behavior
            self.path = path
        }
    }

}

extension LightsailClientTypes.CacheSettings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedHTTPMethods
        case cachedHTTPMethods
        case defaultTTL
        case forwardedCookies
        case forwardedHeaders
        case forwardedQueryStrings
        case maximumTTL
        case minimumTTL
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedHTTPMethods = allowedHTTPMethods {
            try encodeContainer.encode(allowedHTTPMethods, forKey: .allowedHTTPMethods)
        }
        if let cachedHTTPMethods = cachedHTTPMethods {
            try encodeContainer.encode(cachedHTTPMethods, forKey: .cachedHTTPMethods)
        }
        if let defaultTTL = defaultTTL {
            try encodeContainer.encode(defaultTTL, forKey: .defaultTTL)
        }
        if let forwardedCookies = forwardedCookies {
            try encodeContainer.encode(forwardedCookies, forKey: .forwardedCookies)
        }
        if let forwardedHeaders = forwardedHeaders {
            try encodeContainer.encode(forwardedHeaders, forKey: .forwardedHeaders)
        }
        if let forwardedQueryStrings = forwardedQueryStrings {
            try encodeContainer.encode(forwardedQueryStrings, forKey: .forwardedQueryStrings)
        }
        if let maximumTTL = maximumTTL {
            try encodeContainer.encode(maximumTTL, forKey: .maximumTTL)
        }
        if let minimumTTL = minimumTTL {
            try encodeContainer.encode(minimumTTL, forKey: .minimumTTL)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultTTLDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultTTL)
        defaultTTL = defaultTTLDecoded
        let minimumTTLDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumTTL)
        minimumTTL = minimumTTLDecoded
        let maximumTTLDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumTTL)
        maximumTTL = maximumTTLDecoded
        let allowedHTTPMethodsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allowedHTTPMethods)
        allowedHTTPMethods = allowedHTTPMethodsDecoded
        let cachedHTTPMethodsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cachedHTTPMethods)
        cachedHTTPMethods = cachedHTTPMethodsDecoded
        let forwardedCookiesDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CookieObject.self, forKey: .forwardedCookies)
        forwardedCookies = forwardedCookiesDecoded
        let forwardedHeadersDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.HeaderObject.self, forKey: .forwardedHeaders)
        forwardedHeaders = forwardedHeadersDecoded
        let forwardedQueryStringsDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.QueryStringObject.self, forKey: .forwardedQueryStrings)
        forwardedQueryStrings = forwardedQueryStringsDecoded
    }
}

extension LightsailClientTypes.CacheSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CacheSettings(allowedHTTPMethods: \(Swift.String(describing: allowedHTTPMethods)), cachedHTTPMethods: \(Swift.String(describing: cachedHTTPMethods)), defaultTTL: \(Swift.String(describing: defaultTTL)), forwardedCookies: \(Swift.String(describing: forwardedCookies)), forwardedHeaders: \(Swift.String(describing: forwardedHeaders)), forwardedQueryStrings: \(Swift.String(describing: forwardedQueryStrings)), maximumTTL: \(Swift.String(describing: maximumTTL)), minimumTTL: \(Swift.String(describing: minimumTTL)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the cache settings of an Amazon Lightsail content delivery network (CDN)
    ///       distribution.</p>
    ///          <p>These settings apply only to your distribution's <code>cacheBehaviors</code> (including
    ///       the <code>defaultCacheBehavior</code>) that have a <code>behavior</code> of
    ///       <code>cache</code>.</p>
    public struct CacheSettings: Swift.Equatable {
        /// <p>The HTTP methods that are processed and forwarded to the distribution's origin.</p>
        ///          <p>You can specify the following options:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>GET,HEAD</code> - The distribution forwards the <code>GET</code> and
        ///             <code>HEAD</code> methods.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>GET,HEAD,OPTIONS</code> - The distribution forwards the <code>GET</code>,
        ///             <code>HEAD</code>, and <code>OPTIONS</code> methods.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>GET,HEAD,OPTIONS,PUT,PATCH,POST,DELETE</code> - The distribution forwards the
        ///             <code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>PUT</code>,
        ///             <code>PATCH</code>, <code>POST</code>, and <code>DELETE</code> methods.</p>
        ///             </li>
        ///          </ul>
        ///          <p>If you specify the third option, you might need to restrict access to your distribution's
        ///       origin so users can't perform operations that you don't want them to. For example, you might
        ///       not want users to have permission to delete objects from your origin.</p>
        public let allowedHTTPMethods: Swift.String?
        /// <p>The HTTP method responses that are cached by your distribution.</p>
        ///          <p>You can specify the following options:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>GET,HEAD</code> - The distribution caches responses to the <code>GET</code> and
        ///             <code>HEAD</code> methods.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>GET,HEAD,OPTIONS</code> - The distribution caches responses to the
        ///             <code>GET</code>, <code>HEAD</code>, and <code>OPTIONS</code> methods.</p>
        ///             </li>
        ///          </ul>
        public let cachedHTTPMethods: Swift.String?
        /// <p>The default amount of time that objects stay in the distribution's cache before the
        ///       distribution forwards another request to the origin to determine whether the content has been
        ///       updated.</p>
        ///          <note>
        ///             <p>The value specified applies only when the origin does not add HTTP headers such as
        ///           <code>Cache-Control max-age</code>, <code>Cache-Control s-maxage</code>, and
        ///           <code>Expires</code> to objects.</p>
        ///          </note>
        public let defaultTTL: Swift.Int?
        /// <p>An object that describes the cookies that are forwarded to the origin. Your content is
        ///       cached based on the cookies that are forwarded.</p>
        public let forwardedCookies: LightsailClientTypes.CookieObject?
        /// <p>An object that describes the headers that are forwarded to the origin. Your content is
        ///       cached based on the headers that are forwarded.</p>
        public let forwardedHeaders: LightsailClientTypes.HeaderObject?
        /// <p>An object that describes the query strings that are forwarded to the origin. Your content
        ///       is cached based on the query strings that are forwarded.</p>
        public let forwardedQueryStrings: LightsailClientTypes.QueryStringObject?
        /// <p>The maximum amount of time that objects stay in the distribution's cache before the
        ///       distribution forwards another request to the origin to determine whether the object has been
        ///       updated.</p>
        ///          <p>The value specified applies only when the origin adds HTTP headers such as
        ///         <code>Cache-Control max-age</code>, <code>Cache-Control s-maxage</code>, and
        ///         <code>Expires</code> to objects.</p>
        public let maximumTTL: Swift.Int?
        /// <p>The minimum amount of time that objects stay in the distribution's cache before the
        ///       distribution forwards another request to the origin to determine whether the object has been
        ///       updated.</p>
        ///          <p>A value of <code>0</code> must be specified for <code>minimumTTL</code> if the
        ///       distribution is configured to forward all headers to the origin.</p>
        public let minimumTTL: Swift.Int?

        public init (
            allowedHTTPMethods: Swift.String? = nil,
            cachedHTTPMethods: Swift.String? = nil,
            defaultTTL: Swift.Int? = nil,
            forwardedCookies: LightsailClientTypes.CookieObject? = nil,
            forwardedHeaders: LightsailClientTypes.HeaderObject? = nil,
            forwardedQueryStrings: LightsailClientTypes.QueryStringObject? = nil,
            maximumTTL: Swift.Int? = nil,
            minimumTTL: Swift.Int? = nil
        )
        {
            self.allowedHTTPMethods = allowedHTTPMethods
            self.cachedHTTPMethods = cachedHTTPMethods
            self.defaultTTL = defaultTTL
            self.forwardedCookies = forwardedCookies
            self.forwardedHeaders = forwardedHeaders
            self.forwardedQueryStrings = forwardedQueryStrings
            self.maximumTTL = maximumTTL
            self.minimumTTL = minimumTTL
        }
    }

}

extension LightsailClientTypes.Certificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case domainName
        case domainValidationRecords
        case eligibleToRenew
        case inUseResourceCount
        case issuedAt
        case issuerCA
        case keyAlgorithm
        case name
        case notAfter
        case notBefore
        case renewalSummary
        case requestFailureReason
        case revocationReason
        case revokedAt
        case serialNumber
        case status
        case subjectAlternativeNames
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainValidationRecords = domainValidationRecords {
            var domainValidationRecordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationRecords)
            for domainvalidationrecordlist0 in domainValidationRecords {
                try domainValidationRecordsContainer.encode(domainvalidationrecordlist0)
            }
        }
        if let eligibleToRenew = eligibleToRenew {
            try encodeContainer.encode(eligibleToRenew, forKey: .eligibleToRenew)
        }
        if inUseResourceCount != 0 {
            try encodeContainer.encode(inUseResourceCount, forKey: .inUseResourceCount)
        }
        if let issuedAt = issuedAt {
            try encodeContainer.encode(issuedAt.timeIntervalSince1970, forKey: .issuedAt)
        }
        if let issuerCA = issuerCA {
            try encodeContainer.encode(issuerCA, forKey: .issuerCA)
        }
        if let keyAlgorithm = keyAlgorithm {
            try encodeContainer.encode(keyAlgorithm, forKey: .keyAlgorithm)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notAfter = notAfter {
            try encodeContainer.encode(notAfter.timeIntervalSince1970, forKey: .notAfter)
        }
        if let notBefore = notBefore {
            try encodeContainer.encode(notBefore.timeIntervalSince1970, forKey: .notBefore)
        }
        if let renewalSummary = renewalSummary {
            try encodeContainer.encode(renewalSummary, forKey: .renewalSummary)
        }
        if let requestFailureReason = requestFailureReason {
            try encodeContainer.encode(requestFailureReason, forKey: .requestFailureReason)
        }
        if let revocationReason = revocationReason {
            try encodeContainer.encode(revocationReason, forKey: .revocationReason)
        }
        if let revokedAt = revokedAt {
            try encodeContainer.encode(revokedAt.timeIntervalSince1970, forKey: .revokedAt)
        }
        if let serialNumber = serialNumber {
            try encodeContainer.encode(serialNumber, forKey: .serialNumber)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let subjectAlternativeNames = subjectAlternativeNames {
            var subjectAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subjectAlternativeNames)
            for subjectalternativenamelist0 in subjectAlternativeNames {
                try subjectAlternativeNamesContainer.encode(subjectalternativenamelist0)
            }
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CertificateStatus.self, forKey: .status)
        status = statusDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let subjectAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subjectAlternativeNames)
        var subjectAlternativeNamesDecoded0:[Swift.String]? = nil
        if let subjectAlternativeNamesContainer = subjectAlternativeNamesContainer {
            subjectAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in subjectAlternativeNamesContainer {
                if let string0 = string0 {
                    subjectAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        subjectAlternativeNames = subjectAlternativeNamesDecoded0
        let domainValidationRecordsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.DomainValidationRecord?].self, forKey: .domainValidationRecords)
        var domainValidationRecordsDecoded0:[LightsailClientTypes.DomainValidationRecord]? = nil
        if let domainValidationRecordsContainer = domainValidationRecordsContainer {
            domainValidationRecordsDecoded0 = [LightsailClientTypes.DomainValidationRecord]()
            for structure0 in domainValidationRecordsContainer {
                if let structure0 = structure0 {
                    domainValidationRecordsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationRecords = domainValidationRecordsDecoded0
        let requestFailureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestFailureReason)
        requestFailureReason = requestFailureReasonDecoded
        let inUseResourceCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .inUseResourceCount)
        inUseResourceCount = inUseResourceCountDecoded
        let keyAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyAlgorithm)
        keyAlgorithm = keyAlgorithmDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let issuedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .issuedAt)
        issuedAt = issuedAtDecoded
        let issuerCADecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuerCA)
        issuerCA = issuerCADecoded
        let notBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .notBefore)
        notBefore = notBeforeDecoded
        let notAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .notAfter)
        notAfter = notAfterDecoded
        let eligibleToRenewDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eligibleToRenew)
        eligibleToRenew = eligibleToRenewDecoded
        let renewalSummaryDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RenewalSummary.self, forKey: .renewalSummary)
        renewalSummary = renewalSummaryDecoded
        let revokedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .revokedAt)
        revokedAt = revokedAtDecoded
        let revocationReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revocationReason)
        revocationReason = revocationReasonDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
    }
}

extension LightsailClientTypes.Certificate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Certificate(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), domainName: \(Swift.String(describing: domainName)), domainValidationRecords: \(Swift.String(describing: domainValidationRecords)), eligibleToRenew: \(Swift.String(describing: eligibleToRenew)), inUseResourceCount: \(Swift.String(describing: inUseResourceCount)), issuedAt: \(Swift.String(describing: issuedAt)), issuerCA: \(Swift.String(describing: issuerCA)), keyAlgorithm: \(Swift.String(describing: keyAlgorithm)), name: \(Swift.String(describing: name)), notAfter: \(Swift.String(describing: notAfter)), notBefore: \(Swift.String(describing: notBefore)), renewalSummary: \(Swift.String(describing: renewalSummary)), requestFailureReason: \(Swift.String(describing: requestFailureReason)), revocationReason: \(Swift.String(describing: revocationReason)), revokedAt: \(Swift.String(describing: revokedAt)), serialNumber: \(Swift.String(describing: serialNumber)), status: \(Swift.String(describing: status)), subjectAlternativeNames: \(Swift.String(describing: subjectAlternativeNames)), supportCode: \(Swift.String(describing: supportCode)), tags: \(Swift.String(describing: tags)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the full details of an Amazon Lightsail SSL/TLS certificate.</p>
    ///          <note>
    ///             <p>To get a summary of a certificate, use the <code>GetCertificates</code> action and ommit
    ///           <code>includeCertificateDetails</code> from your request. The response will include only
    ///         the certificate Amazon Resource Name (ARN), certificate name, domain name, and tags.</p>
    ///          </note>
    public struct Certificate: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the certificate.</p>
        public let arn: Swift.String?
        /// <p>The timestamp when the certificate was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The domain name of the certificate.</p>
        public let domainName: Swift.String?
        /// <p>An array of objects that describe the domain validation records of the certificate.</p>
        public let domainValidationRecords: [LightsailClientTypes.DomainValidationRecord]?
        /// <p>The renewal eligibility of the certificate.</p>
        public let eligibleToRenew: Swift.String?
        /// <p>The number of Lightsail resources that the certificate is attached to.</p>
        public let inUseResourceCount: Swift.Int
        /// <p>The timestamp when the certificate was issued.</p>
        public let issuedAt: ClientRuntime.Date?
        /// <p>The certificate authority that issued the certificate.</p>
        public let issuerCA: Swift.String?
        /// <p>The algorithm used to generate the key pair (the public and private key) of the
        ///       certificate.</p>
        public let keyAlgorithm: Swift.String?
        /// <p>The name of the certificate (e.g., <code>my-certificate</code>).</p>
        public let name: Swift.String?
        /// <p>The timestamp when the certificate expires.</p>
        public let notAfter: ClientRuntime.Date?
        /// <p>The timestamp when the certificate is first valid.</p>
        public let notBefore: ClientRuntime.Date?
        /// <p>An object that describes the status of the certificate renewal managed by
        ///       Lightsail.</p>
        public let renewalSummary: LightsailClientTypes.RenewalSummary?
        /// <p>The validation failure reason, if any, of the certificate.</p>
        ///          <p>The following failure reasons are possible:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>NO_AVAILABLE_CONTACTS</code>
        ///                   </b> - This failure
        ///           applies to email validation, which is not available for Lightsail certificates.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>ADDITIONAL_VERIFICATION_REQUIRED</code>
        ///                   </b> -
        ///           Lightsail requires additional information to process this certificate request. This can
        ///           happen as a fraud-protection measure, such as when the domain ranks within the Alexa top
        ///           1000 websites. To provide the required information, use the <a href="https://console.aws.amazon.com/support/home">AWS Support Center</a> to contact
        ///           AWS Support.</p>
        ///                <note>
        ///                   <p>You cannot request a certificate for Amazon-owned domain names such as those ending
        ///             in amazonaws.com, cloudfront.net, or elasticbeanstalk.com.</p>
        ///                </note>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>DOMAIN_NOT_ALLOWED</code>
        ///                   </b> - One or more of the
        ///           domain names in the certificate request was reported as an unsafe domain by <a href="https://www.virustotal.com/gui/home/url">VirusTotal</a>. To correct the
        ///           problem, search for your domain name on the <a href="https://www.virustotal.com/gui/home/url">VirusTotal</a> website. If your domain
        ///           is reported as suspicious, see <a href="https://developers.google.com/web/fundamentals/security/hacked">Google Help for
        ///             Hacked Websites</a> to learn what you can do.</p>
        ///                <p>If you believe that the result is a false positive, notify the organization that is
        ///           reporting the domain. VirusTotal is an aggregate of several antivirus and URL scanners and
        ///           cannot remove your domain from a block list itself. After you correct the problem and the
        ///           VirusTotal registry has been updated, request a new certificate.</p>
        ///                <p>If you see this error and your domain is not included in the VirusTotal list, visit
        ///           the <a href="https://console.aws.amazon.com/support/home">AWS Support Center</a>
        ///           and create a case.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>INVALID_PUBLIC_DOMAIN</code>
        ///                   </b> - One or more of
        ///           the domain names in the certificate request is not valid. Typically, this is because a
        ///           domain name in the request is not a valid top-level domain. Try to request a certificate
        ///           again, correcting any spelling errors or typos that were in the failed request, and ensure
        ///           that all domain names in the request are for valid top-level domains. For example, you
        ///           cannot request a certificate for <code>example.invalidpublicdomain</code> because
        ///             <code>invalidpublicdomain</code> is not a valid top-level domain.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>OTHER</code>
        ///                   </b> - Typically, this failure occurs
        ///           when there is a typographical error in one or more of the domain names in the certificate
        ///           request. Try to request a certificate again, correcting any spelling errors or typos that
        ///           were in the failed request. </p>
        ///             </li>
        ///          </ul>
        public let requestFailureReason: Swift.String?
        /// <p>The reason the certificate was revoked. This value is present only when the certificate
        ///       status is <code>REVOKED</code>.</p>
        public let revocationReason: Swift.String?
        /// <p>The timestamp when the certificate was revoked. This value is present only when the
        ///       certificate status is <code>REVOKED</code>.</p>
        public let revokedAt: ClientRuntime.Date?
        /// <p>The serial number of the certificate.</p>
        public let serialNumber: Swift.String?
        /// <p>The validation status of the certificate.</p>
        public let status: LightsailClientTypes.CertificateStatus?
        /// <p>An array of strings that specify the alternate domains (e.g., <code>example2.com</code>)
        ///       and subdomains (e.g., <code>blog.example.com</code>) of the certificate.</p>
        public let subjectAlternativeNames: [Swift.String]?
        /// <p>The support code. Include this code in your email to support when you have questions about
        ///       your Lightsail certificate. This code enables our support team to look up your Lightsail
        ///       information more easily.</p>
        public let supportCode: Swift.String?
        /// <p>The tag keys and optional values for the resource. For more information about tags in
        ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
        ///         Dev Guide</a>.</p>
        public let tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            domainName: Swift.String? = nil,
            domainValidationRecords: [LightsailClientTypes.DomainValidationRecord]? = nil,
            eligibleToRenew: Swift.String? = nil,
            inUseResourceCount: Swift.Int = 0,
            issuedAt: ClientRuntime.Date? = nil,
            issuerCA: Swift.String? = nil,
            keyAlgorithm: Swift.String? = nil,
            name: Swift.String? = nil,
            notAfter: ClientRuntime.Date? = nil,
            notBefore: ClientRuntime.Date? = nil,
            renewalSummary: LightsailClientTypes.RenewalSummary? = nil,
            requestFailureReason: Swift.String? = nil,
            revocationReason: Swift.String? = nil,
            revokedAt: ClientRuntime.Date? = nil,
            serialNumber: Swift.String? = nil,
            status: LightsailClientTypes.CertificateStatus? = nil,
            subjectAlternativeNames: [Swift.String]? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.domainName = domainName
            self.domainValidationRecords = domainValidationRecords
            self.eligibleToRenew = eligibleToRenew
            self.inUseResourceCount = inUseResourceCount
            self.issuedAt = issuedAt
            self.issuerCA = issuerCA
            self.keyAlgorithm = keyAlgorithm
            self.name = name
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.renewalSummary = renewalSummary
            self.requestFailureReason = requestFailureReason
            self.revocationReason = revocationReason
            self.revokedAt = revokedAt
            self.serialNumber = serialNumber
            self.status = status
            self.subjectAlternativeNames = subjectAlternativeNames
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes {
    public enum CertificateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case expired
        case failed
        case inactive
        case issued
        case pendingvalidation
        case revoked
        case validationtimedout
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateStatus] {
            return [
                .expired,
                .failed,
                .inactive,
                .issued,
                .pendingvalidation,
                .revoked,
                .validationtimedout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .expired: return "EXPIRED"
            case .failed: return "FAILED"
            case .inactive: return "INACTIVE"
            case .issued: return "ISSUED"
            case .pendingvalidation: return "PENDING_VALIDATION"
            case .revoked: return "REVOKED"
            case .validationtimedout: return "VALIDATION_TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CertificateStatus(rawValue: rawValue) ?? CertificateStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.CertificateSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn
        case certificateDetail
        case certificateName
        case domainName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let certificateDetail = certificateDetail {
            try encodeContainer.encode(certificateDetail, forKey: .certificateDetail)
        }
        if let certificateName = certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let certificateDetailDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Certificate.self, forKey: .certificateDetail)
        certificateDetail = certificateDetailDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension LightsailClientTypes.CertificateSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CertificateSummary(certificateArn: \(Swift.String(describing: certificateArn)), certificateDetail: \(Swift.String(describing: certificateDetail)), certificateName: \(Swift.String(describing: certificateName)), domainName: \(Swift.String(describing: domainName)), tags: \(Swift.String(describing: tags)))"}
}

extension LightsailClientTypes {
    /// <p>Describes an Amazon Lightsail SSL/TLS certificate.</p>
    public struct CertificateSummary: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the certificate.</p>
        public let certificateArn: Swift.String?
        /// <p>An object that describes a certificate in detail.</p>
        public let certificateDetail: LightsailClientTypes.Certificate?
        /// <p>The name of the certificate.</p>
        public let certificateName: Swift.String?
        /// <p>The domain name of the certificate.</p>
        public let domainName: Swift.String?
        /// <p>The tag keys and optional values for the resource. For more information about tags in
        ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
        ///         Dev Guide</a>.</p>
        public let tags: [LightsailClientTypes.Tag]?

        public init (
            certificateArn: Swift.String? = nil,
            certificateDetail: LightsailClientTypes.Certificate? = nil,
            certificateName: Swift.String? = nil,
            domainName: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.certificateArn = certificateArn
            self.certificateDetail = certificateDetail
            self.certificateName = certificateName
            self.domainName = domainName
            self.tags = tags
        }
    }

}

public struct CloseInstancePublicPortsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CloseInstancePublicPortsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CloseInstancePublicPortsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CloseInstancePublicPortsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CloseInstancePublicPortsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CloseInstancePublicPortsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CloseInstancePublicPortsOutputError>
}

extension CloseInstancePublicPortsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloseInstancePublicPortsInput(instanceName: \(Swift.String(describing: instanceName)), portInfo: \(Swift.String(describing: portInfo)))"}
}

extension CloseInstancePublicPortsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case portInfo
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let portInfo = portInfo {
            try encodeContainer.encode(portInfo, forKey: .portInfo)
        }
    }
}

public struct CloseInstancePublicPortsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CloseInstancePublicPortsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CloseInstancePublicPortsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CloseInstancePublicPortsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CloseInstancePublicPortsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CloseInstancePublicPortsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CloseInstancePublicPortsOutputError>
}

public struct CloseInstancePublicPortsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CloseInstancePublicPortsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CloseInstancePublicPortsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CloseInstancePublicPortsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CloseInstancePublicPortsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CloseInstancePublicPortsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CloseInstancePublicPortsOutputError>
}

public struct CloseInstancePublicPortsInput: Swift.Equatable {
    /// <p>The name of the instance for which to close ports.</p>
    public let instanceName: Swift.String?
    /// <p>An object to describe the ports to close for the specified instance.</p>
    public let portInfo: LightsailClientTypes.PortInfo?

    public init (
        instanceName: Swift.String? = nil,
        portInfo: LightsailClientTypes.PortInfo? = nil
    )
    {
        self.instanceName = instanceName
        self.portInfo = portInfo
    }
}

struct CloseInstancePublicPortsInputBody: Swift.Equatable {
    public let portInfo: LightsailClientTypes.PortInfo?
    public let instanceName: Swift.String?
}

extension CloseInstancePublicPortsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case portInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PortInfo.self, forKey: .portInfo)
        portInfo = portInfoDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension CloseInstancePublicPortsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CloseInstancePublicPortsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CloseInstancePublicPortsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CloseInstancePublicPortsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloseInstancePublicPortsOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension CloseInstancePublicPortsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CloseInstancePublicPortsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct CloseInstancePublicPortsOutputResponse: Swift.Equatable {
    /// <p>An object that describes the result of the action, such as the status of the request, the
    ///       timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct CloseInstancePublicPortsOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension CloseInstancePublicPortsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension LightsailClientTypes.CloudFormationStackRecord: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case destinationInfo
        case location
        case name
        case resourceType
        case sourceInfo
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let destinationInfo = destinationInfo {
            try encodeContainer.encode(destinationInfo, forKey: .destinationInfo)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sourceInfo = sourceInfo {
            var sourceInfoContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceInfo)
            for cloudformationstackrecordsourceinfolist0 in sourceInfo {
                try sourceInfoContainer.encode(cloudformationstackrecordsourceinfolist0)
            }
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RecordState.self, forKey: .state)
        state = stateDecoded
        let sourceInfoContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CloudFormationStackRecordSourceInfo?].self, forKey: .sourceInfo)
        var sourceInfoDecoded0:[LightsailClientTypes.CloudFormationStackRecordSourceInfo]? = nil
        if let sourceInfoContainer = sourceInfoContainer {
            sourceInfoDecoded0 = [LightsailClientTypes.CloudFormationStackRecordSourceInfo]()
            for structure0 in sourceInfoContainer {
                if let structure0 = structure0 {
                    sourceInfoDecoded0?.append(structure0)
                }
            }
        }
        sourceInfo = sourceInfoDecoded0
        let destinationInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DestinationInfo.self, forKey: .destinationInfo)
        destinationInfo = destinationInfoDecoded
    }
}

extension LightsailClientTypes.CloudFormationStackRecord: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudFormationStackRecord(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), destinationInfo: \(Swift.String(describing: destinationInfo)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), resourceType: \(Swift.String(describing: resourceType)), sourceInfo: \(Swift.String(describing: sourceInfo)), state: \(Swift.String(describing: state)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a CloudFormation stack record created as a result of the <code>create cloud
    ///         formation stack</code> operation.</p>
    ///          <p>A CloudFormation stack record provides information about the AWS CloudFormation stack used to
    ///       create a new Amazon Elastic Compute Cloud instance from an exported Lightsail instance snapshot.</p>
    public struct CloudFormationStackRecord: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the CloudFormation stack record.</p>
        public let arn: Swift.String?
        /// <p>The date when the CloudFormation stack record was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>A list of objects describing the destination service, which is AWS CloudFormation, and the Amazon
        ///       Resource Name (ARN) of the AWS CloudFormation stack.</p>
        public let destinationInfo: LightsailClientTypes.DestinationInfo?
        /// <p>A list of objects describing the Availability Zone and AWS Region of the CloudFormation
        ///       stack record.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The name of the CloudFormation stack record. It starts with
        ///         <code>CloudFormationStackRecord</code> followed by a GUID.</p>
        public let name: Swift.String?
        /// <p>The Lightsail resource type (e.g., <code>CloudFormationStackRecord</code>).</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>A list of objects describing the source of the CloudFormation stack record.</p>
        public let sourceInfo: [LightsailClientTypes.CloudFormationStackRecordSourceInfo]?
        /// <p>The current state of the CloudFormation stack record.</p>
        public let state: LightsailClientTypes.RecordState?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            destinationInfo: LightsailClientTypes.DestinationInfo? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sourceInfo: [LightsailClientTypes.CloudFormationStackRecordSourceInfo]? = nil,
            state: LightsailClientTypes.RecordState? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.destinationInfo = destinationInfo
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.sourceInfo = sourceInfo
            self.state = state
        }
    }

}

extension LightsailClientTypes.CloudFormationStackRecordSourceInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case name
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CloudFormationStackRecordSourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension LightsailClientTypes.CloudFormationStackRecordSourceInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudFormationStackRecordSourceInfo(arn: \(Swift.String(describing: arn)), name: \(Swift.String(describing: name)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the source of a CloudFormation stack record (i.e., the export snapshot
    ///       record).</p>
    public struct CloudFormationStackRecordSourceInfo: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the export snapshot record.</p>
        public let arn: Swift.String?
        /// <p>The name of the record.</p>
        public let name: Swift.String?
        /// <p>The Lightsail resource type (e.g., <code>ExportSnapshotRecord</code>).</p>
        public let resourceType: LightsailClientTypes.CloudFormationStackRecordSourceType?

        public init (
            arn: Swift.String? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.CloudFormationStackRecordSourceType? = nil
        )
        {
            self.arn = arn
            self.name = name
            self.resourceType = resourceType
        }
    }

}

extension LightsailClientTypes {
    public enum CloudFormationStackRecordSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exportsnapshotrecord
        case sdkUnknown(Swift.String)

        public static var allCases: [CloudFormationStackRecordSourceType] {
            return [
                .exportsnapshotrecord,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exportsnapshotrecord: return "ExportSnapshotRecord"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CloudFormationStackRecordSourceType(rawValue: rawValue) ?? CloudFormationStackRecordSourceType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case greaterthanorequaltothreshold
        case greaterthanthreshold
        case lessthanorequaltothreshold
        case lessthanthreshold
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .greaterthanorequaltothreshold,
                .greaterthanthreshold,
                .lessthanorequaltothreshold,
                .lessthanthreshold,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .greaterthanorequaltothreshold: return "GreaterThanOrEqualToThreshold"
            case .greaterthanthreshold: return "GreaterThanThreshold"
            case .lessthanorequaltothreshold: return "LessThanOrEqualToThreshold"
            case .lessthanthreshold: return "LessThanThreshold"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComparisonOperator(rawValue: rawValue) ?? ComparisonOperator.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.ContactMethod: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case contactEndpoint
        case createdAt
        case location
        case name
        case `protocol` = "protocol"
        case resourceType
        case status
        case supportCode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let contactEndpoint = contactEndpoint {
            try encodeContainer.encode(contactEndpoint, forKey: .contactEndpoint)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactEndpoint)
        contactEndpoint = contactEndpointDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContactMethodStatus.self, forKey: .status)
        status = statusDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContactProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
    }
}

extension LightsailClientTypes.ContactMethod: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContactMethod(arn: \(Swift.String(describing: arn)), contactEndpoint: \(Swift.String(describing: contactEndpoint)), createdAt: \(Swift.String(describing: createdAt)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), protocol: \(Swift.String(describing: `protocol`)), resourceType: \(Swift.String(describing: resourceType)), status: \(Swift.String(describing: status)), supportCode: \(Swift.String(describing: supportCode)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a contact method.</p>
    ///          <p>A contact method is a way to send you notifications. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    public struct ContactMethod: Swift.Equatable {
        /// <p>The protocol of the contact method, such as email or SMS (text messaging).</p>
        public let `protocol`: LightsailClientTypes.ContactProtocol?
        /// <p>The Amazon Resource Name (ARN) of the contact method.</p>
        public let arn: Swift.String?
        /// <p>The destination of the contact method, such as an email address or a mobile phone
        ///       number.</p>
        public let contactEndpoint: Swift.String?
        /// <p>The timestamp when the contact method was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>Describes the resource location.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The name of the contact method.</p>
        public let name: Swift.String?
        /// <p>The Lightsail resource type (e.g., <code>ContactMethod</code>).</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The current status of the contact method.</p>
        ///          <p>A contact method has the following possible status:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>PendingVerification</code> - The contact method has not yet been verified, and
        ///           the verification has not yet expired.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Valid</code> - The contact method has been verified.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>InValid</code> - An attempt was made to verify the contact method, but the
        ///           verification has expired.</p>
        ///             </li>
        ///          </ul>
        public let status: LightsailClientTypes.ContactMethodStatus?
        /// <p>The support code. Include this code in your email to support when you have questions about
        ///       your Lightsail contact method. This code enables our support team to look up your
        ///       Lightsail information more easily.</p>
        public let supportCode: Swift.String?

        public init (
            `protocol`: LightsailClientTypes.ContactProtocol? = nil,
            arn: Swift.String? = nil,
            contactEndpoint: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            status: LightsailClientTypes.ContactMethodStatus? = nil,
            supportCode: Swift.String? = nil
        )
        {
            self.`protocol` = `protocol`
            self.arn = arn
            self.contactEndpoint = contactEndpoint
            self.createdAt = createdAt
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.status = status
            self.supportCode = supportCode
        }
    }

}

extension LightsailClientTypes {
    public enum ContactMethodStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case invalid
        case pendingverification
        case valid
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactMethodStatus] {
            return [
                .invalid,
                .pendingverification,
                .valid,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .invalid: return "Invalid"
            case .pendingverification: return "PendingVerification"
            case .valid: return "Valid"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContactMethodStatus(rawValue: rawValue) ?? ContactMethodStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum ContactMethodVerificationProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case email
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactMethodVerificationProtocol] {
            return [
                .email,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .email: return "Email"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContactMethodVerificationProtocol(rawValue: rawValue) ?? ContactMethodVerificationProtocol.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum ContactProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case email
        case sms
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactProtocol] {
            return [
                .email,
                .sms,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .email: return "Email"
            case .sms: return "SMS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContactProtocol(rawValue: rawValue) ?? ContactProtocol.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.Container: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command
        case environment
        case image
        case ports
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for stringlist0 in command {
                try commandContainer.encode(stringlist0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, environment0) in environment {
                try environmentContainer.encode(environment0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let ports = ports {
            var portsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .ports)
            for (dictKey0, portmap0) in ports {
                try portsContainer.encode(portmap0.rawValue, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in environmentContainer {
                if let string0 = string0 {
                    environmentDecoded0?[key0] = string0
                }
            }
        }
        environment = environmentDecoded0
        let portsContainer = try containerValues.decodeIfPresent([Swift.String: LightsailClientTypes.ContainerServiceProtocol?].self, forKey: .ports)
        var portsDecoded0: [Swift.String:LightsailClientTypes.ContainerServiceProtocol]? = nil
        if let portsContainer = portsContainer {
            portsDecoded0 = [Swift.String:LightsailClientTypes.ContainerServiceProtocol]()
            for (key0, containerserviceprotocol0) in portsContainer {
                if let containerserviceprotocol0 = containerserviceprotocol0 {
                    portsDecoded0?[key0] = containerserviceprotocol0
                }
            }
        }
        ports = portsDecoded0
    }
}

extension LightsailClientTypes.Container: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Container(command: \(Swift.String(describing: command)), environment: \(Swift.String(describing: environment)), image: \(Swift.String(describing: image)), ports: \(Swift.String(describing: ports)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the settings of a container that will be launched, or that is launched, to an
    ///       Amazon Lightsail container service.</p>
    public struct Container: Swift.Equatable {
        /// <p>The launch command for the container.</p>
        public let command: [Swift.String]?
        /// <p>The environment variables of the container.</p>
        public let environment: [Swift.String:Swift.String]?
        /// <p>The name of the image used for the container.</p>
        ///
        ///          <p>Container images sourced from your Lightsail container service, that are registered and
        ///       stored on your service, start with a colon (<code>:</code>). For example,
        ///         <code>:container-service-1.mystaticwebsite.1</code>. Container images sourced from a public
        ///       registry like Docker Hub don't start with a colon. For example, <code>nginx:latest</code> or
        ///         <code>nginx</code>.</p>
        public let image: Swift.String?
        /// <p>The open firewall ports of the container.</p>
        public let ports: [Swift.String:LightsailClientTypes.ContainerServiceProtocol]?

        public init (
            command: [Swift.String]? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            image: Swift.String? = nil,
            ports: [Swift.String:LightsailClientTypes.ContainerServiceProtocol]? = nil
        )
        {
            self.command = command
            self.environment = environment
            self.image = image
            self.ports = ports
        }
    }

}

extension LightsailClientTypes.ContainerImage: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case digest
        case image
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let digest = digest {
            try encodeContainer.encode(digest, forKey: .digest)
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let digestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .digest)
        digest = digestDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension LightsailClientTypes.ContainerImage: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerImage(createdAt: \(Swift.String(describing: createdAt)), digest: \(Swift.String(describing: digest)), image: \(Swift.String(describing: image)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a container image that is registered to an Amazon Lightsail container
    ///       service.</p>
    public struct ContainerImage: Swift.Equatable {
        /// <p>The timestamp when the container image was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The digest of the container image.</p>
        public let digest: Swift.String?
        /// <p>The name of the container image.</p>
        public let image: Swift.String?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            digest: Swift.String? = nil,
            image: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.digest = digest
            self.image = image
        }
    }

}

extension LightsailClientTypes.ContainerService: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case containerServiceName
        case createdAt
        case currentDeployment
        case isDisabled
        case location
        case nextDeployment
        case power
        case powerId
        case principalArn
        case privateDomainName
        case publicDomainNames
        case resourceType
        case scale
        case state
        case stateDetail
        case tags
        case url
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let containerServiceName = containerServiceName {
            try encodeContainer.encode(containerServiceName, forKey: .containerServiceName)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let currentDeployment = currentDeployment {
            try encodeContainer.encode(currentDeployment, forKey: .currentDeployment)
        }
        if let isDisabled = isDisabled {
            try encodeContainer.encode(isDisabled, forKey: .isDisabled)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let nextDeployment = nextDeployment {
            try encodeContainer.encode(nextDeployment, forKey: .nextDeployment)
        }
        if let power = power {
            try encodeContainer.encode(power.rawValue, forKey: .power)
        }
        if let powerId = powerId {
            try encodeContainer.encode(powerId, forKey: .powerId)
        }
        if let principalArn = principalArn {
            try encodeContainer.encode(principalArn, forKey: .principalArn)
        }
        if let privateDomainName = privateDomainName {
            try encodeContainer.encode(privateDomainName, forKey: .privateDomainName)
        }
        if let publicDomainNames = publicDomainNames {
            var publicDomainNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .publicDomainNames)
            for (dictKey0, containerservicepublicdomains0) in publicDomainNames {
                try publicDomainNamesContainer.encode(containerservicepublicdomains0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let scale = scale {
            try encodeContainer.encode(scale, forKey: .scale)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateDetail = stateDetail {
            try encodeContainer.encode(stateDetail, forKey: .stateDetail)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerServiceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerServiceName)
        containerServiceName = containerServiceNameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let powerDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServicePowerName.self, forKey: .power)
        power = powerDecoded
        let powerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .powerId)
        powerId = powerIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceState.self, forKey: .state)
        state = stateDecoded
        let stateDetailDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceStateDetail.self, forKey: .stateDetail)
        stateDetail = stateDetailDecoded
        let scaleDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scale)
        scale = scaleDecoded
        let currentDeploymentDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceDeployment.self, forKey: .currentDeployment)
        currentDeployment = currentDeploymentDecoded
        let nextDeploymentDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceDeployment.self, forKey: .nextDeployment)
        nextDeployment = nextDeploymentDecoded
        let isDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDisabled)
        isDisabled = isDisabledDecoded
        let principalArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principalArn)
        principalArn = principalArnDecoded
        let privateDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateDomainName)
        privateDomainName = privateDomainNameDecoded
        let publicDomainNamesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .publicDomainNames)
        var publicDomainNamesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let publicDomainNamesContainer = publicDomainNamesContainer {
            publicDomainNamesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, containerservicepublicdomainslist0) in publicDomainNamesContainer {
                var containerservicepublicdomainslist0Decoded0: [Swift.String]? = nil
                if let containerservicepublicdomainslist0 = containerservicepublicdomainslist0 {
                    containerservicepublicdomainslist0Decoded0 = [Swift.String]()
                    for string1 in containerservicepublicdomainslist0 {
                        if let string1 = string1 {
                            containerservicepublicdomainslist0Decoded0?.append(string1)
                        }
                    }
                }
                publicDomainNamesDecoded0?[key0] = containerservicepublicdomainslist0Decoded0
            }
        }
        publicDomainNames = publicDomainNamesDecoded0
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension LightsailClientTypes.ContainerService: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerService(arn: \(Swift.String(describing: arn)), containerServiceName: \(Swift.String(describing: containerServiceName)), createdAt: \(Swift.String(describing: createdAt)), currentDeployment: \(Swift.String(describing: currentDeployment)), isDisabled: \(Swift.String(describing: isDisabled)), location: \(Swift.String(describing: location)), nextDeployment: \(Swift.String(describing: nextDeployment)), power: \(Swift.String(describing: power)), powerId: \(Swift.String(describing: powerId)), principalArn: \(Swift.String(describing: principalArn)), privateDomainName: \(Swift.String(describing: privateDomainName)), publicDomainNames: \(Swift.String(describing: publicDomainNames)), resourceType: \(Swift.String(describing: resourceType)), scale: \(Swift.String(describing: scale)), state: \(Swift.String(describing: state)), stateDetail: \(Swift.String(describing: stateDetail)), tags: \(Swift.String(describing: tags)), url: \(Swift.String(describing: url)))"}
}

extension LightsailClientTypes {
    /// <p>Describes an Amazon Lightsail container service.</p>
    public struct ContainerService: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the container service.</p>
        public let arn: Swift.String?
        /// <p>The name of the container service.</p>
        public let containerServiceName: Swift.String?
        /// <p>The timestamp when the container service was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>An object that describes the current container deployment of the container service.</p>
        public let currentDeployment: LightsailClientTypes.ContainerServiceDeployment?
        /// <p>A Boolean value indicating whether the container service is disabled.</p>
        public let isDisabled: Swift.Bool?
        /// <p>An object that describes the location of the container service, such as the AWS Region
        ///       and Availability Zone.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>An object that describes the next deployment of the container service.</p>
        ///
        ///          <p>This value is <code>null</code> when there is no deployment in a <code>pending</code>
        ///       state.</p>
        public let nextDeployment: LightsailClientTypes.ContainerServiceDeployment?
        /// <p>The power specification of the container service.</p>
        ///
        ///          <p>The power specifies the amount of RAM, the number of vCPUs, and the base price of the
        ///       container service.</p>
        public let power: LightsailClientTypes.ContainerServicePowerName?
        /// <p>The ID of the power of the container service.</p>
        public let powerId: Swift.String?
        /// <p>The principal ARN of the container service.</p>
        ///
        ///          <p>The principal ARN can be used to create a trust relationship between your standard AWS
        ///       account and your Lightsail container service. This allows you to give your service
        ///       permission to access resources in your standard AWS account.</p>
        public let principalArn: Swift.String?
        /// <p>The private domain name of the container service.</p>
        ///
        ///          <p>The private domain name is accessible only by other resources within the default virtual
        ///       private cloud (VPC) of your Lightsail account.</p>
        public let privateDomainName: Swift.String?
        /// <p>The public domain name of the container service, such as <code>example.com</code> and
        ///         <code>www.example.com</code>.</p>
        ///
        ///          <p>You can specify up to four public domain names for a container service. The domain names
        ///       that you specify are used when you create a deployment with a container configured as the
        ///       public endpoint of your container service.</p>
        ///
        ///          <p>If you don't specify public domain names, then you can use the default domain of the
        ///       container service.</p>
        ///
        ///          <important>
        ///             <p>You must create and validate an SSL/TLS certificate before you can use public domain
        ///         names with your container service. Use the <code>CreateCertificate</code> action to create a
        ///         certificate for the public domain names you want to use with your container service.</p>
        ///          </important>
        ///
        ///          <p>See <code>CreateContainerService</code> or <code>UpdateContainerService</code> for
        ///       information about how to specify public domain names for your Lightsail container
        ///       service.</p>
        public let publicDomainNames: [Swift.String:[Swift.String]]?
        /// <p>The Lightsail resource type of the container service (i.e.,
        ///         <code>ContainerService</code>).</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The scale specification of the container service.</p>
        ///
        ///          <p>The scale specifies the allocated compute nodes of the container service.</p>
        public let scale: Swift.Int?
        /// <p>The current state of the container service.</p>
        ///          <p>The following container service states are possible:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>PENDING</code> - The container service is being created.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>READY</code> - The container service is running but it does not have an active
        ///           container deployment.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>DEPLOYING</code> - The container service is launching a container
        ///           deployment.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>RUNNING</code> - The container service is running and it has an active container
        ///           deployment.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>UPDATING</code> - The container service capacity or its custom domains are being
        ///           updated.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>DELETING</code> - The container service is being deleted.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>DISABLED</code> - The container service is disabled, and its active deployment
        ///           and containers, if any, are shut down.</p>
        ///             </li>
        ///          </ul>
        public let state: LightsailClientTypes.ContainerServiceState?
        /// <p>An object that describes the current state of the container service.</p>
        ///          <note>
        ///             <p>The state detail is populated only when a container service is in a
        ///         <code>PENDING</code>, <code>DEPLOYING</code>, or <code>UPDATING</code> state.</p>
        ///          </note>
        public let stateDetail: LightsailClientTypes.ContainerServiceStateDetail?
        /// <p>The tag keys and optional values for the resource. For more information about tags in
        ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
        ///         Dev Guide</a>.</p>
        public let tags: [LightsailClientTypes.Tag]?
        /// <p>The publicly accessible URL of the container service.</p>
        ///
        ///          <p>If no public endpoint is specified in the <code>currentDeployment</code>, this URL returns
        ///       a 404 response.</p>
        public let url: Swift.String?

        public init (
            arn: Swift.String? = nil,
            containerServiceName: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            currentDeployment: LightsailClientTypes.ContainerServiceDeployment? = nil,
            isDisabled: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            nextDeployment: LightsailClientTypes.ContainerServiceDeployment? = nil,
            power: LightsailClientTypes.ContainerServicePowerName? = nil,
            powerId: Swift.String? = nil,
            principalArn: Swift.String? = nil,
            privateDomainName: Swift.String? = nil,
            publicDomainNames: [Swift.String:[Swift.String]]? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            scale: Swift.Int? = nil,
            state: LightsailClientTypes.ContainerServiceState? = nil,
            stateDetail: LightsailClientTypes.ContainerServiceStateDetail? = nil,
            tags: [LightsailClientTypes.Tag]? = nil,
            url: Swift.String? = nil
        )
        {
            self.arn = arn
            self.containerServiceName = containerServiceName
            self.createdAt = createdAt
            self.currentDeployment = currentDeployment
            self.isDisabled = isDisabled
            self.location = location
            self.nextDeployment = nextDeployment
            self.power = power
            self.powerId = powerId
            self.principalArn = principalArn
            self.privateDomainName = privateDomainName
            self.publicDomainNames = publicDomainNames
            self.resourceType = resourceType
            self.scale = scale
            self.state = state
            self.stateDetail = stateDetail
            self.tags = tags
            self.url = url
        }
    }

}

extension LightsailClientTypes.ContainerServiceDeployment: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers
        case createdAt
        case publicEndpoint
        case state
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .containers)
            for (dictKey0, containermap0) in containers {
                try containersContainer.encode(containermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let publicEndpoint = publicEndpoint {
            try encodeContainer.encode(publicEndpoint, forKey: .publicEndpoint)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceDeploymentState.self, forKey: .state)
        state = stateDecoded
        let containersContainer = try containerValues.decodeIfPresent([Swift.String: LightsailClientTypes.Container?].self, forKey: .containers)
        var containersDecoded0: [Swift.String:LightsailClientTypes.Container]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [Swift.String:LightsailClientTypes.Container]()
            for (key0, container0) in containersContainer {
                if let container0 = container0 {
                    containersDecoded0?[key0] = container0
                }
            }
        }
        containers = containersDecoded0
        let publicEndpointDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceEndpoint.self, forKey: .publicEndpoint)
        publicEndpoint = publicEndpointDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension LightsailClientTypes.ContainerServiceDeployment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerServiceDeployment(containers: \(Swift.String(describing: containers)), createdAt: \(Swift.String(describing: createdAt)), publicEndpoint: \(Swift.String(describing: publicEndpoint)), state: \(Swift.String(describing: state)), version: \(Swift.String(describing: version)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a container deployment configuration of an Amazon Lightsail container
    ///       service.</p>
    ///
    ///          <p>A deployment specifies the settings, such as the ports and launch command, of containers
    ///       that are deployed to your container service.</p>
    public struct ContainerServiceDeployment: Swift.Equatable {
        /// <p>An object that describes the configuration for the containers of the deployment.</p>
        public let containers: [Swift.String:LightsailClientTypes.Container]?
        /// <p>The timestamp when the deployment was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>An object that describes the endpoint of the deployment.</p>
        public let publicEndpoint: LightsailClientTypes.ContainerServiceEndpoint?
        /// <p>The state of the deployment.</p>
        ///
        ///          <p>A deployment can be in one of the following states:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>Activating</code> - The deployment is being created.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Active</code> - The deployment was successfully created, and it's currently
        ///           running on the container service. The container service can have only one deployment in an
        ///           active state at a time.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Inactive</code> - The deployment was previously successfully created, but it is
        ///           not currently running on the container service.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Failed</code> - The deployment failed. Use the <code>GetContainerLog</code>
        ///           action to view the log events for the containers in the deployment to try to determine the
        ///           reason for the failure.</p>
        ///             </li>
        ///          </ul>
        public let state: LightsailClientTypes.ContainerServiceDeploymentState?
        /// <p>The version number of the deployment.</p>
        public let version: Swift.Int?

        public init (
            containers: [Swift.String:LightsailClientTypes.Container]? = nil,
            createdAt: ClientRuntime.Date? = nil,
            publicEndpoint: LightsailClientTypes.ContainerServiceEndpoint? = nil,
            state: LightsailClientTypes.ContainerServiceDeploymentState? = nil,
            version: Swift.Int? = nil
        )
        {
            self.containers = containers
            self.createdAt = createdAt
            self.publicEndpoint = publicEndpoint
            self.state = state
            self.version = version
        }
    }

}

extension LightsailClientTypes.ContainerServiceDeploymentRequest: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers
        case publicEndpoint
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .containers)
            for (dictKey0, containermap0) in containers {
                try containersContainer.encode(containermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let publicEndpoint = publicEndpoint {
            try encodeContainer.encode(publicEndpoint, forKey: .publicEndpoint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containersContainer = try containerValues.decodeIfPresent([Swift.String: LightsailClientTypes.Container?].self, forKey: .containers)
        var containersDecoded0: [Swift.String:LightsailClientTypes.Container]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [Swift.String:LightsailClientTypes.Container]()
            for (key0, container0) in containersContainer {
                if let container0 = container0 {
                    containersDecoded0?[key0] = container0
                }
            }
        }
        containers = containersDecoded0
        let publicEndpointDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.EndpointRequest.self, forKey: .publicEndpoint)
        publicEndpoint = publicEndpointDecoded
    }
}

extension LightsailClientTypes.ContainerServiceDeploymentRequest: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerServiceDeploymentRequest(containers: \(Swift.String(describing: containers)), publicEndpoint: \(Swift.String(describing: publicEndpoint)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a container deployment configuration of an Amazon Lightsail container
    ///       service.</p>
    ///
    ///          <p>A deployment specifies the settings, such as the ports and launch command, of containers
    ///       that are deployed to your container service.</p>
    public struct ContainerServiceDeploymentRequest: Swift.Equatable {
        /// <p>An object that describes the configuration for the containers of the deployment.</p>
        public let containers: [Swift.String:LightsailClientTypes.Container]?
        /// <p>An object that describes the endpoint of the deployment.</p>
        public let publicEndpoint: LightsailClientTypes.EndpointRequest?

        public init (
            containers: [Swift.String:LightsailClientTypes.Container]? = nil,
            publicEndpoint: LightsailClientTypes.EndpointRequest? = nil
        )
        {
            self.containers = containers
            self.publicEndpoint = publicEndpoint
        }
    }

}

extension LightsailClientTypes {
    public enum ContainerServiceDeploymentState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activating
        case active
        case failed
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceDeploymentState] {
            return [
                .activating,
                .active,
                .failed,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activating: return "ACTIVATING"
            case .active: return "ACTIVE"
            case .failed: return "FAILED"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerServiceDeploymentState(rawValue: rawValue) ?? ContainerServiceDeploymentState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.ContainerServiceEndpoint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName
        case containerPort
        case healthCheck
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let containerPort = containerPort {
            try encodeContainer.encode(containerPort, forKey: .containerPort)
        }
        if let healthCheck = healthCheck {
            try encodeContainer.encode(healthCheck, forKey: .healthCheck)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let containerPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .containerPort)
        containerPort = containerPortDecoded
        let healthCheckDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceHealthCheckConfig.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
    }
}

extension LightsailClientTypes.ContainerServiceEndpoint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerServiceEndpoint(containerName: \(Swift.String(describing: containerName)), containerPort: \(Swift.String(describing: containerPort)), healthCheck: \(Swift.String(describing: healthCheck)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the public endpoint configuration of a deployment of an Amazon Lightsail
    ///       container service.</p>
    public struct ContainerServiceEndpoint: Swift.Equatable {
        /// <p>The name of the container entry of the deployment that the endpoint configuration applies
        ///       to.</p>
        public let containerName: Swift.String?
        /// <p>The port of the specified container to which traffic is forwarded to.</p>
        public let containerPort: Swift.Int?
        /// <p>An object that describes the health check configuration of the container.</p>
        public let healthCheck: LightsailClientTypes.ContainerServiceHealthCheckConfig?

        public init (
            containerName: Swift.String? = nil,
            containerPort: Swift.Int? = nil,
            healthCheck: LightsailClientTypes.ContainerServiceHealthCheckConfig? = nil
        )
        {
            self.containerName = containerName
            self.containerPort = containerPort
            self.healthCheck = healthCheck
        }
    }

}

extension LightsailClientTypes.ContainerServiceHealthCheckConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthyThreshold
        case intervalSeconds
        case path
        case successCodes
        case timeoutSeconds
        case unhealthyThreshold
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let healthyThreshold = healthyThreshold {
            try encodeContainer.encode(healthyThreshold, forKey: .healthyThreshold)
        }
        if let intervalSeconds = intervalSeconds {
            try encodeContainer.encode(intervalSeconds, forKey: .intervalSeconds)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let successCodes = successCodes {
            try encodeContainer.encode(successCodes, forKey: .successCodes)
        }
        if let timeoutSeconds = timeoutSeconds {
            try encodeContainer.encode(timeoutSeconds, forKey: .timeoutSeconds)
        }
        if let unhealthyThreshold = unhealthyThreshold {
            try encodeContainer.encode(unhealthyThreshold, forKey: .unhealthyThreshold)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let healthyThresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthyThreshold)
        healthyThreshold = healthyThresholdDecoded
        let unhealthyThresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unhealthyThreshold)
        unhealthyThreshold = unhealthyThresholdDecoded
        let timeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutSeconds)
        timeoutSeconds = timeoutSecondsDecoded
        let intervalSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .intervalSeconds)
        intervalSeconds = intervalSecondsDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let successCodesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .successCodes)
        successCodes = successCodesDecoded
    }
}

extension LightsailClientTypes.ContainerServiceHealthCheckConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerServiceHealthCheckConfig(healthyThreshold: \(Swift.String(describing: healthyThreshold)), intervalSeconds: \(Swift.String(describing: intervalSeconds)), path: \(Swift.String(describing: path)), successCodes: \(Swift.String(describing: successCodes)), timeoutSeconds: \(Swift.String(describing: timeoutSeconds)), unhealthyThreshold: \(Swift.String(describing: unhealthyThreshold)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the health check configuration of an Amazon Lightsail container service.</p>
    public struct ContainerServiceHealthCheckConfig: Swift.Equatable {
        /// <p>The number of consecutive health checks successes required before moving the container to
        ///       the <code>Healthy</code> state. The default value is <code>2</code>.</p>
        public let healthyThreshold: Swift.Int?
        /// <p>The approximate interval, in seconds, between health checks of an individual container.
        ///       You can specify between 5 and 300 seconds. The default value is <code>5</code>.</p>
        public let intervalSeconds: Swift.Int?
        /// <p>The path on the container on which to perform the health check. The default value is
        ///         <code>/</code>.</p>
        public let path: Swift.String?
        /// <p>The HTTP codes to use when checking for a successful response from a container. You can
        ///       specify values between 200 and 499.</p>
        public let successCodes: Swift.String?
        /// <p>The amount of time, in seconds, during which no response means a failed health check. You
        ///       can specify between 2 and 60 seconds. The default value is <code>2</code>.</p>
        public let timeoutSeconds: Swift.Int?
        /// <p>The number of consecutive health check failures required before moving the container to
        ///       the <code>Unhealthy</code> state. The default value is <code>2</code>.</p>
        public let unhealthyThreshold: Swift.Int?

        public init (
            healthyThreshold: Swift.Int? = nil,
            intervalSeconds: Swift.Int? = nil,
            path: Swift.String? = nil,
            successCodes: Swift.String? = nil,
            timeoutSeconds: Swift.Int? = nil,
            unhealthyThreshold: Swift.Int? = nil
        )
        {
            self.healthyThreshold = healthyThreshold
            self.intervalSeconds = intervalSeconds
            self.path = path
            self.successCodes = successCodes
            self.timeoutSeconds = timeoutSeconds
            self.unhealthyThreshold = unhealthyThreshold
        }
    }

}

extension LightsailClientTypes.ContainerServiceLogEvent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LightsailClientTypes.ContainerServiceLogEvent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerServiceLogEvent(createdAt: \(Swift.String(describing: createdAt)), message: \(Swift.String(describing: message)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the log events of a container of an Amazon Lightsail container service.</p>
    public struct ContainerServiceLogEvent: Swift.Equatable {
        /// <p>The timestamp when the container service log event was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The message of the container service log event.</p>
        public let message: Swift.String?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            message: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.message = message
        }
    }

}

extension LightsailClientTypes {
    public enum ContainerServiceMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cpuutilization
        case memoryutilization
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceMetricName] {
            return [
                .cpuutilization,
                .memoryutilization,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cpuutilization: return "CPUUtilization"
            case .memoryutilization: return "MemoryUtilization"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerServiceMetricName(rawValue: rawValue) ?? ContainerServiceMetricName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.ContainerServicePower: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cpuCount
        case isActive
        case name
        case powerId
        case price
        case ramSizeInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cpuCount = cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let isActive = isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let powerId = powerId {
            try encodeContainer.encode(powerId, forKey: .powerId)
        }
        if let price = price {
            try encodeContainer.encode(price, forKey: .price)
        }
        if let ramSizeInGb = ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let powerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .powerId)
        powerId = powerIdDecoded
        let priceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .price)
        price = priceDecoded
        let cpuCountDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
    }
}

extension LightsailClientTypes.ContainerServicePower: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerServicePower(cpuCount: \(Swift.String(describing: cpuCount)), isActive: \(Swift.String(describing: isActive)), name: \(Swift.String(describing: name)), powerId: \(Swift.String(describing: powerId)), price: \(Swift.String(describing: price)), ramSizeInGb: \(Swift.String(describing: ramSizeInGb)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the powers that can be specified for an Amazon Lightsail container
    ///       service.</p>
    ///
    ///          <p>The power specifies the amount of RAM, the number of vCPUs, and the base price of the
    ///       container service.</p>
    public struct ContainerServicePower: Swift.Equatable {
        /// <p>The number of vCPUs included in the power.</p>
        public let cpuCount: Swift.Float?
        /// <p>A Boolean value indicating whether the power is active and can be specified for container
        ///       services.</p>
        public let isActive: Swift.Bool?
        /// <p>The friendly name of the power (e.g., <code>nano</code>).</p>
        public let name: Swift.String?
        /// <p>The ID of the power (e.g., <code>nano-1</code>).</p>
        public let powerId: Swift.String?
        /// <p>The monthly price of the power in USD.</p>
        public let price: Swift.Float?
        /// <p>The amount of RAM (in GB) of the power.</p>
        public let ramSizeInGb: Swift.Float?

        public init (
            cpuCount: Swift.Float? = nil,
            isActive: Swift.Bool? = nil,
            name: Swift.String? = nil,
            powerId: Swift.String? = nil,
            price: Swift.Float? = nil,
            ramSizeInGb: Swift.Float? = nil
        )
        {
            self.cpuCount = cpuCount
            self.isActive = isActive
            self.name = name
            self.powerId = powerId
            self.price = price
            self.ramSizeInGb = ramSizeInGb
        }
    }

}

extension LightsailClientTypes {
    public enum ContainerServicePowerName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case large
        case medium
        case micro
        case nano
        case small
        case xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServicePowerName] {
            return [
                .large,
                .medium,
                .micro,
                .nano,
                .small,
                .xlarge,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .large: return "large"
            case .medium: return "medium"
            case .micro: return "micro"
            case .nano: return "nano"
            case .small: return "small"
            case .xlarge: return "xlarge"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerServicePowerName(rawValue: rawValue) ?? ContainerServicePowerName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum ContainerServiceProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case http
        case https
        case tcp
        case udp
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceProtocol] {
            return [
                .http,
                .https,
                .tcp,
                .udp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .http: return "HTTP"
            case .https: return "HTTPS"
            case .tcp: return "TCP"
            case .udp: return "UDP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerServiceProtocol(rawValue: rawValue) ?? ContainerServiceProtocol.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.ContainerServiceRegistryLogin: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expiresAt
        case password
        case registry
        case username
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expiresAt = expiresAt {
            try encodeContainer.encode(expiresAt.timeIntervalSince1970, forKey: .expiresAt)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let registry = registry {
            try encodeContainer.encode(registry, forKey: .registry)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let expiresAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expiresAt)
        expiresAt = expiresAtDecoded
        let registryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registry)
        registry = registryDecoded
    }
}

extension LightsailClientTypes.ContainerServiceRegistryLogin: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerServiceRegistryLogin(expiresAt: \(Swift.String(describing: expiresAt)), password: \(Swift.String(describing: password)), registry: \(Swift.String(describing: registry)), username: \(Swift.String(describing: username)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the login information for the container image registry of an Amazon Lightsail
    ///       account.</p>
    public struct ContainerServiceRegistryLogin: Swift.Equatable {
        /// <p>The timestamp of when the container image registry username and password expire.</p>
        ///
        ///          <p>The log in credentials expire 12 hours after they are created, at which point you will
        ///       need to create a new set of log in credentials using the
        ///         <code>CreateContainerServiceRegistryLogin</code> action.</p>
        public let expiresAt: ClientRuntime.Date?
        /// <p>The container service registry password to use to push container images to the container
        ///       image registry of a Lightsail account</p>
        public let password: Swift.String?
        /// <p>The address to use to push container images to the container image registry of a
        ///       Lightsail account.</p>
        public let registry: Swift.String?
        /// <p>The container service registry username to use to push container images to the container
        ///       image registry of a Lightsail account.</p>
        public let username: Swift.String?

        public init (
            expiresAt: ClientRuntime.Date? = nil,
            password: Swift.String? = nil,
            registry: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.expiresAt = expiresAt
            self.password = password
            self.registry = registry
            self.username = username
        }
    }

}

extension LightsailClientTypes {
    public enum ContainerServiceState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleting
        case deploying
        case disabled
        case pending
        case ready
        case running
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceState] {
            return [
                .deleting,
                .deploying,
                .disabled,
                .pending,
                .ready,
                .running,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "DELETING"
            case .deploying: return "DEPLOYING"
            case .disabled: return "DISABLED"
            case .pending: return "PENDING"
            case .ready: return "READY"
            case .running: return "RUNNING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerServiceState(rawValue: rawValue) ?? ContainerServiceState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.ContainerServiceStateDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceStateDetailCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LightsailClientTypes.ContainerServiceStateDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerServiceStateDetail(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the current state of a container service.</p>
    public struct ContainerServiceStateDetail: Swift.Equatable {
        /// <p>The state code of the container service.</p>
        ///          <p>The following state codes are possible:</p>
        ///          <ul>
        ///             <li>
        ///                <p>The following state codes are possible if your container service is in a
        ///             <code>DEPLOYING</code> or <code>UPDATING</code> state:</p>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <code>CREATING_SYSTEM_RESOURCES</code> - The system resources for your container
        ///               service are being created.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <code>CREATING_NETWORK_INFRASTRUCTURE</code> - The network infrastructure for your
        ///               container service are being created.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <code>PROVISIONING_CERTIFICATE</code> - The SSL/TLS certificate for your container
        ///               service is being created.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <code>PROVISIONING_SERVICE</code> - Your container service is being
        ///               provisioned.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <code>CREATING_DEPLOYMENT</code> - Your deployment is being created on your
        ///               container service.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <code>EVALUATING_HEALTH_CHECK</code> - The health of your deployment is being
        ///               evaluated.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <code>ACTIVATING_DEPLOYMENT</code> - Your deployment is being activated.</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <p>The following state codes are possible if your container service is in a
        ///             <code>PENDING</code> state:</p>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <code>CERTIFICATE_LIMIT_EXCEEDED</code> - The SSL/TLS certificate required for
        ///               your container service exceeds the maximum number of certificates allowed for your
        ///               account.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <code>UNKNOWN_ERROR</code> - An error was experienced when your container service
        ///               was being created.</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///          </ul>
        public let code: LightsailClientTypes.ContainerServiceStateDetailCode?
        /// <p>A message that provides more information for the state code.</p>
        ///          <note>
        ///             <p>The state detail is populated only when a container service is in a
        ///         <code>PENDING</code>, <code>DEPLOYING</code>, or <code>UPDATING</code> state.</p>
        ///          </note>
        public let message: Swift.String?

        public init (
            code: LightsailClientTypes.ContainerServiceStateDetailCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension LightsailClientTypes {
    public enum ContainerServiceStateDetailCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activatingDeployment
        case certificateLimitExceeded
        case creatingDeployment
        case creatingNetworkInfrastructure
        case creatingSystemResources
        case evaluatingHealthCheck
        case provisioningCertificate
        case provisioningService
        case unknownError
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerServiceStateDetailCode] {
            return [
                .activatingDeployment,
                .certificateLimitExceeded,
                .creatingDeployment,
                .creatingNetworkInfrastructure,
                .creatingSystemResources,
                .evaluatingHealthCheck,
                .provisioningCertificate,
                .provisioningService,
                .unknownError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activatingDeployment: return "ACTIVATING_DEPLOYMENT"
            case .certificateLimitExceeded: return "CERTIFICATE_LIMIT_EXCEEDED"
            case .creatingDeployment: return "CREATING_DEPLOYMENT"
            case .creatingNetworkInfrastructure: return "CREATING_NETWORK_INFRASTRUCTURE"
            case .creatingSystemResources: return "CREATING_SYSTEM_RESOURCES"
            case .evaluatingHealthCheck: return "EVALUATING_HEALTH_CHECK"
            case .provisioningCertificate: return "PROVISIONING_CERTIFICATE"
            case .provisioningService: return "PROVISIONING_SERVICE"
            case .unknownError: return "UNKNOWN_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContainerServiceStateDetailCode(rawValue: rawValue) ?? ContainerServiceStateDetailCode.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.CookieObject: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cookiesAllowList
        case option
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cookiesAllowList = cookiesAllowList {
            var cookiesAllowListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cookiesAllowList)
            for stringlist0 in cookiesAllowList {
                try cookiesAllowListContainer.encode(stringlist0)
            }
        }
        if let option = option {
            try encodeContainer.encode(option.rawValue, forKey: .option)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ForwardValues.self, forKey: .option)
        option = optionDecoded
        let cookiesAllowListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cookiesAllowList)
        var cookiesAllowListDecoded0:[Swift.String]? = nil
        if let cookiesAllowListContainer = cookiesAllowListContainer {
            cookiesAllowListDecoded0 = [Swift.String]()
            for string0 in cookiesAllowListContainer {
                if let string0 = string0 {
                    cookiesAllowListDecoded0?.append(string0)
                }
            }
        }
        cookiesAllowList = cookiesAllowListDecoded0
    }
}

extension LightsailClientTypes.CookieObject: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CookieObject(cookiesAllowList: \(Swift.String(describing: cookiesAllowList)), option: \(Swift.String(describing: option)))"}
}

extension LightsailClientTypes {
    /// <p>Describes whether an Amazon Lightsail content delivery network (CDN) distribution forwards
    ///       cookies to the origin and, if so, which ones.</p>
    ///          <p>For the cookies that you specify, your distribution caches separate versions of the
    ///       specified content based on the cookie values in viewer
    ///       requests.</p>
    public struct CookieObject: Swift.Equatable {
        /// <p>The specific cookies to forward to your distribution's origin.</p>
        public let cookiesAllowList: [Swift.String]?
        /// <p>Specifies which cookies to forward to the distribution's origin for a cache behavior:
        ///         <code>all</code>, <code>none</code>, or <code>allow-list</code> to forward only the cookies
        ///       specified in the <code>cookiesAllowList</code> parameter.</p>
        public let option: LightsailClientTypes.ForwardValues?

        public init (
            cookiesAllowList: [Swift.String]? = nil,
            option: LightsailClientTypes.ForwardValues? = nil
        )
        {
            self.cookiesAllowList = cookiesAllowList
            self.option = option
        }
    }

}

public struct CopySnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CopySnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CopySnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CopySnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CopySnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CopySnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CopySnapshotOutputError>
}

extension CopySnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CopySnapshotInput(restoreDate: \(Swift.String(describing: restoreDate)), sourceRegion: \(Swift.String(describing: sourceRegion)), sourceResourceName: \(Swift.String(describing: sourceResourceName)), sourceSnapshotName: \(Swift.String(describing: sourceSnapshotName)), targetSnapshotName: \(Swift.String(describing: targetSnapshotName)), useLatestRestorableAutoSnapshot: \(Swift.String(describing: useLatestRestorableAutoSnapshot)))"}
}

extension CopySnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case restoreDate
        case sourceRegion
        case sourceResourceName
        case sourceSnapshotName
        case targetSnapshotName
        case useLatestRestorableAutoSnapshot
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let restoreDate = restoreDate {
            try encodeContainer.encode(restoreDate, forKey: .restoreDate)
        }
        if let sourceRegion = sourceRegion {
            try encodeContainer.encode(sourceRegion.rawValue, forKey: .sourceRegion)
        }
        if let sourceResourceName = sourceResourceName {
            try encodeContainer.encode(sourceResourceName, forKey: .sourceResourceName)
        }
        if let sourceSnapshotName = sourceSnapshotName {
            try encodeContainer.encode(sourceSnapshotName, forKey: .sourceSnapshotName)
        }
        if let targetSnapshotName = targetSnapshotName {
            try encodeContainer.encode(targetSnapshotName, forKey: .targetSnapshotName)
        }
        if let useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot {
            try encodeContainer.encode(useLatestRestorableAutoSnapshot, forKey: .useLatestRestorableAutoSnapshot)
        }
    }
}

public struct CopySnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CopySnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CopySnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CopySnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CopySnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CopySnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CopySnapshotOutputError>
}

public struct CopySnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CopySnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CopySnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CopySnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CopySnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CopySnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CopySnapshotOutputError>
}

public struct CopySnapshotInput: Swift.Equatable {
    /// <p>The date of the source automatic snapshot to copy. Use the <code>get auto snapshots</code>
    ///       operation to identify the dates of the available automatic snapshots.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must be specified in <code>YYYY-MM-DD</code> format.</p>
    ///             </li>
    ///             <li>
    ///                <p>This parameter cannot be defined together with the <code>use latest restorable auto
    ///             snapshot</code> parameter. The <code>restore date</code> and <code>use latest restorable
    ///             auto snapshot</code> parameters are mutually exclusive.</p>
    ///             </li>
    ///             <li>
    ///                <p>Define this parameter only when copying an automatic snapshot as a manual snapshot.
    ///           For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots">Lightsail Dev Guide</a>.</p>
    ///             </li>
    ///          </ul>
    public let restoreDate: Swift.String?
    /// <p>The AWS Region where the source manual or automatic snapshot is located.</p>
    public let sourceRegion: LightsailClientTypes.RegionName?
    /// <p>The name of the source instance or disk from which the source automatic snapshot was
    ///       created.</p>
    ///          <p>Constraint:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Define this parameter only when copying an automatic snapshot as a manual snapshot.
    ///           For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots">Lightsail Dev Guide</a>.</p>
    ///             </li>
    ///          </ul>
    public let sourceResourceName: Swift.String?
    /// <p>The name of the source manual snapshot to copy.</p>
    ///          <p>Constraint:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Define this parameter only when copying a manual snapshot as another manual
    ///           snapshot.</p>
    ///             </li>
    ///          </ul>
    public let sourceSnapshotName: Swift.String?
    /// <p>The name of the new manual snapshot to be created as a copy.</p>
    public let targetSnapshotName: Swift.String?
    /// <p>A Boolean value to indicate whether to use the latest available automatic snapshot of the
    ///       specified source instance or disk.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>This parameter cannot be defined together with the <code>restore date</code>
    ///           parameter. The <code>use latest restorable auto snapshot</code> and <code>restore
    ///             date</code> parameters are mutually exclusive.</p>
    ///             </li>
    ///             <li>
    ///                <p>Define this parameter only when copying an automatic snapshot as a manual snapshot.
    ///           For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots">Lightsail Dev Guide</a>.</p>
    ///             </li>
    ///          </ul>
    public let useLatestRestorableAutoSnapshot: Swift.Bool?

    public init (
        restoreDate: Swift.String? = nil,
        sourceRegion: LightsailClientTypes.RegionName? = nil,
        sourceResourceName: Swift.String? = nil,
        sourceSnapshotName: Swift.String? = nil,
        targetSnapshotName: Swift.String? = nil,
        useLatestRestorableAutoSnapshot: Swift.Bool? = nil
    )
    {
        self.restoreDate = restoreDate
        self.sourceRegion = sourceRegion
        self.sourceResourceName = sourceResourceName
        self.sourceSnapshotName = sourceSnapshotName
        self.targetSnapshotName = targetSnapshotName
        self.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot
    }
}

struct CopySnapshotInputBody: Swift.Equatable {
    public let sourceSnapshotName: Swift.String?
    public let sourceResourceName: Swift.String?
    public let restoreDate: Swift.String?
    public let useLatestRestorableAutoSnapshot: Swift.Bool?
    public let targetSnapshotName: Swift.String?
    public let sourceRegion: LightsailClientTypes.RegionName?
}

extension CopySnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case restoreDate
        case sourceRegion
        case sourceResourceName
        case sourceSnapshotName
        case targetSnapshotName
        case useLatestRestorableAutoSnapshot
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceSnapshotName)
        sourceSnapshotName = sourceSnapshotNameDecoded
        let sourceResourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceResourceName)
        sourceResourceName = sourceResourceNameDecoded
        let restoreDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .restoreDate)
        restoreDate = restoreDateDecoded
        let useLatestRestorableAutoSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useLatestRestorableAutoSnapshot)
        useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshotDecoded
        let targetSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetSnapshotName)
        targetSnapshotName = targetSnapshotNameDecoded
        let sourceRegionDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RegionName.self, forKey: .sourceRegion)
        sourceRegion = sourceRegionDecoded
    }
}

extension CopySnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CopySnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CopySnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CopySnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CopySnapshotOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension CopySnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CopySnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CopySnapshotOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CopySnapshotOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension CopySnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct CreateCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCertificateOutputError>
}

extension CreateCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCertificateInput(certificateName: \(Swift.String(describing: certificateName)), domainName: \(Swift.String(describing: domainName)), subjectAlternativeNames: \(Swift.String(describing: subjectAlternativeNames)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case domainName
        case subjectAlternativeNames
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateName = certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let subjectAlternativeNames = subjectAlternativeNames {
            var subjectAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subjectAlternativeNames)
            for subjectalternativenamelist0 in subjectAlternativeNames {
                try subjectAlternativeNamesContainer.encode(subjectalternativenamelist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCertificateOutputError>
}

public struct CreateCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCertificateOutputError>
}

public struct CreateCertificateInput: Swift.Equatable {
    /// <p>The name for the certificate.</p>
    public let certificateName: Swift.String?
    /// <p>The domain name (e.g., <code>example.com</code>) for the certificate.</p>
    public let domainName: Swift.String?
    /// <p>An array of strings that specify the alternate domains (e.g., <code>example2.com</code>)
    ///       and subdomains (e.g., <code>blog.example.com</code>) for the certificate.</p>
    ///          <p>You can specify a maximum of nine alternate domains (in addition to the primary domain
    ///       name).</p>
    ///          <p>Wildcard domain entries (e.g., <code>*.example.com</code>) are not supported.</p>
    public let subjectAlternativeNames: [Swift.String]?
    /// <p>The tag keys and optional values to add to the certificate during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?

    public init (
        certificateName: Swift.String? = nil,
        domainName: Swift.String? = nil,
        subjectAlternativeNames: [Swift.String]? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.certificateName = certificateName
        self.domainName = domainName
        self.subjectAlternativeNames = subjectAlternativeNames
        self.tags = tags
    }
}

struct CreateCertificateInputBody: Swift.Equatable {
    public let certificateName: Swift.String?
    public let domainName: Swift.String?
    public let subjectAlternativeNames: [Swift.String]?
    public let tags: [LightsailClientTypes.Tag]?
}

extension CreateCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case domainName
        case subjectAlternativeNames
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let subjectAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subjectAlternativeNames)
        var subjectAlternativeNamesDecoded0:[Swift.String]? = nil
        if let subjectAlternativeNamesContainer = subjectAlternativeNamesContainer {
            subjectAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in subjectAlternativeNamesContainer {
                if let string0 = string0 {
                    subjectAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        subjectAlternativeNames = subjectAlternativeNamesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCertificateOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCertificateOutputResponse(certificate: \(Swift.String(describing: certificate)), operations: \(Swift.String(describing: operations)))"}
}

extension CreateCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificate = output.certificate
            self.operations = output.operations
        } else {
            self.certificate = nil
            self.operations = nil
        }
    }
}

public struct CreateCertificateOutputResponse: Swift.Equatable {
    /// <p>An object that describes the certificate created.</p>
    public let certificate: LightsailClientTypes.CertificateSummary?
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        certificate: LightsailClientTypes.CertificateSummary? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.certificate = certificate
        self.operations = operations
    }
}

struct CreateCertificateOutputResponseBody: Swift.Equatable {
    public let certificate: LightsailClientTypes.CertificateSummary?
    public let operations: [LightsailClientTypes.Operation]?
}

extension CreateCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CertificateSummary.self, forKey: .certificate)
        certificate = certificateDecoded
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct CreateCloudFormationStackInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCloudFormationStackInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCloudFormationStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCloudFormationStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCloudFormationStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCloudFormationStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCloudFormationStackOutputError>
}

extension CreateCloudFormationStackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCloudFormationStackInput(instances: \(Swift.String(describing: instances)))"}
}

extension CreateCloudFormationStackInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instances
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instances = instances {
            var instancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instances)
            for instanceentrylist0 in instances {
                try instancesContainer.encode(instanceentrylist0)
            }
        }
    }
}

public struct CreateCloudFormationStackInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCloudFormationStackInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCloudFormationStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCloudFormationStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCloudFormationStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCloudFormationStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCloudFormationStackOutputError>
}

public struct CreateCloudFormationStackInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCloudFormationStackInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCloudFormationStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCloudFormationStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCloudFormationStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCloudFormationStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCloudFormationStackOutputError>
}

public struct CreateCloudFormationStackInput: Swift.Equatable {
    /// <p>An array of parameters that will be used to create the new Amazon EC2 instance. You can only
    ///       pass one instance entry at a time in this array. You will get an invalid parameter error if
    ///       you pass more than one instance entry in this array.</p>
    public let instances: [LightsailClientTypes.InstanceEntry]?

    public init (
        instances: [LightsailClientTypes.InstanceEntry]? = nil
    )
    {
        self.instances = instances
    }
}

struct CreateCloudFormationStackInputBody: Swift.Equatable {
    public let instances: [LightsailClientTypes.InstanceEntry]?
}

extension CreateCloudFormationStackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instances
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.InstanceEntry?].self, forKey: .instances)
        var instancesDecoded0:[LightsailClientTypes.InstanceEntry]? = nil
        if let instancesContainer = instancesContainer {
            instancesDecoded0 = [LightsailClientTypes.InstanceEntry]()
            for structure0 in instancesContainer {
                if let structure0 = structure0 {
                    instancesDecoded0?.append(structure0)
                }
            }
        }
        instances = instancesDecoded0
    }
}

extension CreateCloudFormationStackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCloudFormationStackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCloudFormationStackOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCloudFormationStackOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCloudFormationStackOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension CreateCloudFormationStackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateCloudFormationStackOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateCloudFormationStackOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateCloudFormationStackOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension CreateCloudFormationStackOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct CreateContactMethodInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContactMethodInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContactMethodInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContactMethodOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContactMethodInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContactMethodOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContactMethodOutputError>
}

extension CreateContactMethodInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContactMethodInput(contactEndpoint: \(Swift.String(describing: contactEndpoint)), protocol: \(Swift.String(describing: `protocol`)))"}
}

extension CreateContactMethodInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactEndpoint
        case `protocol` = "protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contactEndpoint = contactEndpoint {
            try encodeContainer.encode(contactEndpoint, forKey: .contactEndpoint)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
    }
}

public struct CreateContactMethodInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContactMethodInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContactMethodInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContactMethodOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContactMethodInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContactMethodOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContactMethodOutputError>
}

public struct CreateContactMethodInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContactMethodInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContactMethodInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContactMethodOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContactMethodInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContactMethodOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContactMethodOutputError>
}

public struct CreateContactMethodInput: Swift.Equatable {
    /// <p>The protocol of the contact method, such as <code>Email</code> or <code>SMS</code> (text
    ///       messaging).</p>
    ///          <p>The <code>SMS</code> protocol is supported only in the following AWS Regions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>US East (N. Virginia) (<code>us-east-1</code>)</p>
    ///             </li>
    ///             <li>
    ///                <p>US West (Oregon) (<code>us-west-2</code>)</p>
    ///             </li>
    ///             <li>
    ///                <p>Europe (Ireland) (<code>eu-west-1</code>)</p>
    ///             </li>
    ///             <li>
    ///                <p>Asia Pacific (Tokyo) (<code>ap-northeast-1</code>)</p>
    ///             </li>
    ///             <li>
    ///                <p>Asia Pacific (Singapore) (<code>ap-southeast-1</code>)</p>
    ///             </li>
    ///             <li>
    ///                <p>Asia Pacific (Sydney) (<code>ap-southeast-2</code>)</p>
    ///             </li>
    ///          </ul>
    ///          <p>For a list of countries/regions where SMS text messages can be sent, and the latest AWS
    ///       Regions where SMS text messaging is supported, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-supported-regions-countries.html">Supported Regions and Countries</a> in the <i>Amazon SNS Developer
    ///         Guide</i>.</p>
    ///          <p>For more information about notifications in Amazon Lightsail, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    public let `protocol`: LightsailClientTypes.ContactProtocol?
    /// <p>The destination of the contact method, such as an email address or a mobile phone
    ///       number.</p>
    ///          <p>Use the E.164 format when specifying a mobile phone number. E.164 is a standard for the
    ///       phone number structure used for international telecommunication. Phone numbers that follow
    ///       this format can have a maximum of 15 digits, and they are prefixed with the plus character (+)
    ///       and the country code. For example, a U.S. phone number in E.164 format would be specified as
    ///       +1XXX5550100. For more information, see <a href="https://en.wikipedia.org/wiki/E.164">E.164</a> on <i>Wikipedia</i>.</p>
    public let contactEndpoint: Swift.String?

    public init (
        `protocol`: LightsailClientTypes.ContactProtocol? = nil,
        contactEndpoint: Swift.String? = nil
    )
    {
        self.`protocol` = `protocol`
        self.contactEndpoint = contactEndpoint
    }
}

struct CreateContactMethodInputBody: Swift.Equatable {
    public let `protocol`: LightsailClientTypes.ContactProtocol?
    public let contactEndpoint: Swift.String?
}

extension CreateContactMethodInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactEndpoint
        case `protocol` = "protocol"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContactProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let contactEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactEndpoint)
        contactEndpoint = contactEndpointDecoded
    }
}

extension CreateContactMethodOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContactMethodOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateContactMethodOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContactMethodOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContactMethodOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension CreateContactMethodOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateContactMethodOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateContactMethodOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateContactMethodOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension CreateContactMethodOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct CreateContainerServiceDeploymentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContainerServiceDeploymentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContainerServiceDeploymentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContainerServiceDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContainerServiceDeploymentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContainerServiceDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContainerServiceDeploymentOutputError>
}

extension CreateContainerServiceDeploymentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContainerServiceDeploymentInput(containers: \(Swift.String(describing: containers)), publicEndpoint: \(Swift.String(describing: publicEndpoint)), serviceName: \(Swift.String(describing: serviceName)))"}
}

extension CreateContainerServiceDeploymentInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers
        case publicEndpoint
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .containers)
            for (dictKey0, containermap0) in containers {
                try containersContainer.encode(containermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let publicEndpoint = publicEndpoint {
            try encodeContainer.encode(publicEndpoint, forKey: .publicEndpoint)
        }
    }
}

public struct CreateContainerServiceDeploymentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContainerServiceDeploymentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContainerServiceDeploymentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContainerServiceDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContainerServiceDeploymentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContainerServiceDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContainerServiceDeploymentOutputError>
}

public struct CreateContainerServiceDeploymentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContainerServiceDeploymentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContainerServiceDeploymentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContainerServiceDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContainerServiceDeploymentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContainerServiceDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContainerServiceDeploymentOutputError>
}

public struct CreateContainerServiceDeploymentInput: Swift.Equatable {
    /// <p>An object that describes the settings of the containers that will be launched on the
    ///       container service.</p>
    public let containers: [Swift.String:LightsailClientTypes.Container]?
    /// <p>An object that describes the settings of the public endpoint for the container
    ///       service.</p>
    public let publicEndpoint: LightsailClientTypes.EndpointRequest?
    /// <p>The name of the container service for which to create the deployment.</p>
    public let serviceName: Swift.String?

    public init (
        containers: [Swift.String:LightsailClientTypes.Container]? = nil,
        publicEndpoint: LightsailClientTypes.EndpointRequest? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.containers = containers
        self.publicEndpoint = publicEndpoint
        self.serviceName = serviceName
    }
}

struct CreateContainerServiceDeploymentInputBody: Swift.Equatable {
    public let containers: [Swift.String:LightsailClientTypes.Container]?
    public let publicEndpoint: LightsailClientTypes.EndpointRequest?
}

extension CreateContainerServiceDeploymentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers
        case publicEndpoint
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containersContainer = try containerValues.decodeIfPresent([Swift.String: LightsailClientTypes.Container?].self, forKey: .containers)
        var containersDecoded0: [Swift.String:LightsailClientTypes.Container]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [Swift.String:LightsailClientTypes.Container]()
            for (key0, container0) in containersContainer {
                if let container0 = container0 {
                    containersDecoded0?[key0] = container0
                }
            }
        }
        containers = containersDecoded0
        let publicEndpointDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.EndpointRequest.self, forKey: .publicEndpoint)
        publicEndpoint = publicEndpointDecoded
    }
}

extension CreateContainerServiceDeploymentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContainerServiceDeploymentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateContainerServiceDeploymentOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContainerServiceDeploymentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContainerServiceDeploymentOutputResponse(containerService: \(Swift.String(describing: containerService)))"}
}

extension CreateContainerServiceDeploymentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateContainerServiceDeploymentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.containerService = output.containerService
        } else {
            self.containerService = nil
        }
    }
}

public struct CreateContainerServiceDeploymentOutputResponse: Swift.Equatable {
    /// <p>An object that describes a container service.</p>
    public let containerService: LightsailClientTypes.ContainerService?

    public init (
        containerService: LightsailClientTypes.ContainerService? = nil
    )
    {
        self.containerService = containerService
    }
}

struct CreateContainerServiceDeploymentOutputResponseBody: Swift.Equatable {
    public let containerService: LightsailClientTypes.ContainerService?
}

extension CreateContainerServiceDeploymentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerService
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerServiceDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerService.self, forKey: .containerService)
        containerService = containerServiceDecoded
    }
}

public struct CreateContainerServiceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContainerServiceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContainerServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContainerServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContainerServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContainerServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContainerServiceOutputError>
}

extension CreateContainerServiceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContainerServiceInput(deployment: \(Swift.String(describing: deployment)), power: \(Swift.String(describing: power)), publicDomainNames: \(Swift.String(describing: publicDomainNames)), scale: \(Swift.String(describing: scale)), serviceName: \(Swift.String(describing: serviceName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateContainerServiceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deployment
        case power
        case publicDomainNames
        case scale
        case serviceName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deployment = deployment {
            try encodeContainer.encode(deployment, forKey: .deployment)
        }
        if let power = power {
            try encodeContainer.encode(power.rawValue, forKey: .power)
        }
        if let publicDomainNames = publicDomainNames {
            var publicDomainNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .publicDomainNames)
            for (dictKey0, containerservicepublicdomains0) in publicDomainNames {
                try publicDomainNamesContainer.encode(containerservicepublicdomains0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let scale = scale {
            try encodeContainer.encode(scale, forKey: .scale)
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateContainerServiceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContainerServiceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContainerServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContainerServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContainerServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContainerServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContainerServiceOutputError>
}

public struct CreateContainerServiceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContainerServiceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContainerServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContainerServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContainerServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContainerServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContainerServiceOutputError>
}

public struct CreateContainerServiceInput: Swift.Equatable {
    /// <p>An object that describes a deployment for the container service.</p>
    ///
    ///          <p>A deployment specifies the containers that will be launched on the container service and
    ///       their settings, such as the ports to open, the environment variables to apply, and the launch
    ///       command to run. It also specifies the container that will serve as the public endpoint of the
    ///       deployment and its settings, such as the HTTP or HTTPS port to use, and the health check
    ///       configuration.</p>
    public let deployment: LightsailClientTypes.ContainerServiceDeploymentRequest?
    /// <p>The power specification for the container service.</p>
    ///
    ///          <p>The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the
    ///       container service. The <code>power</code> and <code>scale</code> of a container service makes
    ///       up its configured capacity. To determine the monthly price of your container service, multiply
    ///       the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of
    ///       the service.</p>
    ///
    ///          <p>Use the <code>GetContainerServicePowers</code> action to get a list of power options that
    ///       you can specify using this parameter, and their base monthly cost.</p>
    public let power: LightsailClientTypes.ContainerServicePowerName?
    /// <p>The public domain names to use with the container service, such as
    ///         <code>example.com</code> and <code>www.example.com</code>.</p>
    ///
    ///          <p>You can specify up to four public domain names for a container service. The domain names
    ///       that you specify are used when you create a deployment with a container configured as the
    ///       public endpoint of your container service.</p>
    ///
    ///          <p>If you don't specify public domain names, then you can use the default domain of the
    ///       container service.</p>
    ///
    ///          <important>
    ///             <p>You must create and validate an SSL/TLS certificate before you can use public domain
    ///         names with your container service. Use the <code>CreateCertificate</code> action to create a
    ///         certificate for the public domain names you want to use with your container service.</p>
    ///          </important>
    ///
    ///          <p>You can specify public domain names using a string to array map as shown in the example
    ///       later on this page.</p>
    public let publicDomainNames: [Swift.String:[Swift.String]]?
    /// <p>The scale specification for the container service.</p>
    ///
    ///          <p>The scale specifies the allocated compute nodes of the container service. The
    ///         <code>power</code> and <code>scale</code> of a container service makes up its configured
    ///       capacity. To determine the monthly price of your container service, multiply the base price of
    ///       the <code>power</code> with the <code>scale</code> (the number of nodes) of the
    ///       service.</p>
    public let scale: Swift.Int?
    /// <p>The name for the container service.</p>
    ///
    ///          <p>The name that you specify for your container service will make up part of its default
    ///       domain. The default domain of a container service is typically
    ///         <code>https://<ServiceName>.<RandomGUID>.<AWSRegion>.cs.amazonlightsail.com</code>.
    ///       If the name of your container service is <code>container-service-1</code>, and it's located in
    ///       the US East (Ohio) AWS region (<code>us-east-2</code>), then the domain for your container
    ///       service will be like the following example:
    ///         <code>https://container-service-1.ur4EXAMPLE2uq.us-east-2.cs.amazonlightsail.com</code>
    ///          </p>
    ///
    ///          <p>The following are the requirements for container service names:</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>Must be unique within each AWS Region in your Lightsail account.</p>
    ///             </li>
    ///             <li>
    ///                <p>Must contain 1 to 63 characters.</p>
    ///             </li>
    ///             <li>
    ///                <p>Must contain only alphanumeric characters and hyphens.</p>
    ///             </li>
    ///             <li>
    ///                <p>A hyphen (-) can separate words but cannot be at the start or end of the name.</p>
    ///             </li>
    ///          </ul>
    public let serviceName: Swift.String?
    /// <p>The tag keys and optional values for the container service.</p>
    ///
    ///          <p>For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
    ///         Dev Guide</a>.</p>
    public let tags: [LightsailClientTypes.Tag]?

    public init (
        deployment: LightsailClientTypes.ContainerServiceDeploymentRequest? = nil,
        power: LightsailClientTypes.ContainerServicePowerName? = nil,
        publicDomainNames: [Swift.String:[Swift.String]]? = nil,
        scale: Swift.Int? = nil,
        serviceName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.deployment = deployment
        self.power = power
        self.publicDomainNames = publicDomainNames
        self.scale = scale
        self.serviceName = serviceName
        self.tags = tags
    }
}

struct CreateContainerServiceInputBody: Swift.Equatable {
    public let serviceName: Swift.String?
    public let power: LightsailClientTypes.ContainerServicePowerName?
    public let scale: Swift.Int?
    public let tags: [LightsailClientTypes.Tag]?
    public let publicDomainNames: [Swift.String:[Swift.String]]?
    public let deployment: LightsailClientTypes.ContainerServiceDeploymentRequest?
}

extension CreateContainerServiceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deployment
        case power
        case publicDomainNames
        case scale
        case serviceName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let powerDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServicePowerName.self, forKey: .power)
        power = powerDecoded
        let scaleDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scale)
        scale = scaleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let publicDomainNamesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .publicDomainNames)
        var publicDomainNamesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let publicDomainNamesContainer = publicDomainNamesContainer {
            publicDomainNamesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, containerservicepublicdomainslist0) in publicDomainNamesContainer {
                var containerservicepublicdomainslist0Decoded0: [Swift.String]? = nil
                if let containerservicepublicdomainslist0 = containerservicepublicdomainslist0 {
                    containerservicepublicdomainslist0Decoded0 = [Swift.String]()
                    for string1 in containerservicepublicdomainslist0 {
                        if let string1 = string1 {
                            containerservicepublicdomainslist0Decoded0?.append(string1)
                        }
                    }
                }
                publicDomainNamesDecoded0?[key0] = containerservicepublicdomainslist0Decoded0
            }
        }
        publicDomainNames = publicDomainNamesDecoded0
        let deploymentDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceDeploymentRequest.self, forKey: .deployment)
        deployment = deploymentDecoded
    }
}

extension CreateContainerServiceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContainerServiceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateContainerServiceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContainerServiceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContainerServiceOutputResponse(containerService: \(Swift.String(describing: containerService)))"}
}

extension CreateContainerServiceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateContainerServiceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.containerService = output.containerService
        } else {
            self.containerService = nil
        }
    }
}

public struct CreateContainerServiceOutputResponse: Swift.Equatable {
    /// <p>An object that describes a container service.</p>
    public let containerService: LightsailClientTypes.ContainerService?

    public init (
        containerService: LightsailClientTypes.ContainerService? = nil
    )
    {
        self.containerService = containerService
    }
}

struct CreateContainerServiceOutputResponseBody: Swift.Equatable {
    public let containerService: LightsailClientTypes.ContainerService?
}

extension CreateContainerServiceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerService
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerServiceDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerService.self, forKey: .containerService)
        containerService = containerServiceDecoded
    }
}

extension CreateContainerServiceRegistryLoginInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContainerServiceRegistryLoginInput()"}
}

extension CreateContainerServiceRegistryLoginInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct CreateContainerServiceRegistryLoginInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContainerServiceRegistryLoginInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContainerServiceRegistryLoginInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContainerServiceRegistryLoginOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContainerServiceRegistryLoginInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContainerServiceRegistryLoginOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContainerServiceRegistryLoginOutputError>
}

public struct CreateContainerServiceRegistryLoginInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateContainerServiceRegistryLoginInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateContainerServiceRegistryLoginInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateContainerServiceRegistryLoginOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateContainerServiceRegistryLoginInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateContainerServiceRegistryLoginOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateContainerServiceRegistryLoginOutputError>
}

public struct CreateContainerServiceRegistryLoginInput: Swift.Equatable {

    public init() {}
}

struct CreateContainerServiceRegistryLoginInputBody: Swift.Equatable {
}

extension CreateContainerServiceRegistryLoginInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CreateContainerServiceRegistryLoginOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateContainerServiceRegistryLoginOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateContainerServiceRegistryLoginOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateContainerServiceRegistryLoginOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateContainerServiceRegistryLoginOutputResponse(registryLogin: \(Swift.String(describing: registryLogin)))"}
}

extension CreateContainerServiceRegistryLoginOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateContainerServiceRegistryLoginOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.registryLogin = output.registryLogin
        } else {
            self.registryLogin = nil
        }
    }
}

public struct CreateContainerServiceRegistryLoginOutputResponse: Swift.Equatable {
    /// <p>An object that describes the log in information for the container service registry of your
    ///       Lightsail account.</p>
    public let registryLogin: LightsailClientTypes.ContainerServiceRegistryLogin?

    public init (
        registryLogin: LightsailClientTypes.ContainerServiceRegistryLogin? = nil
    )
    {
        self.registryLogin = registryLogin
    }
}

struct CreateContainerServiceRegistryLoginOutputResponseBody: Swift.Equatable {
    public let registryLogin: LightsailClientTypes.ContainerServiceRegistryLogin?
}

extension CreateContainerServiceRegistryLoginOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registryLogin
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryLoginDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceRegistryLogin.self, forKey: .registryLogin)
        registryLogin = registryLoginDecoded
    }
}

public struct CreateDiskFromSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDiskFromSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDiskFromSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDiskFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDiskFromSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDiskFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDiskFromSnapshotOutputError>
}

extension CreateDiskFromSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDiskFromSnapshotInput(addOns: \(Swift.String(describing: addOns)), availabilityZone: \(Swift.String(describing: availabilityZone)), diskName: \(Swift.String(describing: diskName)), diskSnapshotName: \(Swift.String(describing: diskSnapshotName)), restoreDate: \(Swift.String(describing: restoreDate)), sizeInGb: \(Swift.String(describing: sizeInGb)), sourceDiskName: \(Swift.String(describing: sourceDiskName)), tags: \(Swift.String(describing: tags)), useLatestRestorableAutoSnapshot: \(Swift.String(describing: useLatestRestorableAutoSnapshot)))"}
}

extension CreateDiskFromSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case availabilityZone
        case diskName
        case diskSnapshotName
        case restoreDate
        case sizeInGb
        case sourceDiskName
        case tags
        case useLatestRestorableAutoSnapshot
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addonrequestlist0 in addOns {
                try addOnsContainer.encode(addonrequestlist0)
            }
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let diskName = diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
        if let diskSnapshotName = diskSnapshotName {
            try encodeContainer.encode(diskSnapshotName, forKey: .diskSnapshotName)
        }
        if let restoreDate = restoreDate {
            try encodeContainer.encode(restoreDate, forKey: .restoreDate)
        }
        if let sizeInGb = sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
        if let sourceDiskName = sourceDiskName {
            try encodeContainer.encode(sourceDiskName, forKey: .sourceDiskName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot {
            try encodeContainer.encode(useLatestRestorableAutoSnapshot, forKey: .useLatestRestorableAutoSnapshot)
        }
    }
}

public struct CreateDiskFromSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDiskFromSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDiskFromSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDiskFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDiskFromSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDiskFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDiskFromSnapshotOutputError>
}

public struct CreateDiskFromSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDiskFromSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDiskFromSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDiskFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDiskFromSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDiskFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDiskFromSnapshotOutputError>
}

public struct CreateDiskFromSnapshotInput: Swift.Equatable {
    /// <p>An array of objects that represent the add-ons to enable for the new disk.</p>
    public let addOns: [LightsailClientTypes.AddOnRequest]?
    /// <p>The Availability Zone where you want to create the disk (e.g., <code>us-east-2a</code>).
    ///       Choose the same Availability Zone as the Lightsail instance where you want to create the
    ///       disk.</p>
    ///          <p>Use the GetRegions operation to list the Availability Zones where Lightsail is currently
    ///       available.</p>
    public let availabilityZone: Swift.String?
    /// <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    public let diskName: Swift.String?
    /// <p>The name of the disk snapshot (e.g., <code>my-snapshot</code>) from which to create the
    ///       new storage disk.</p>
    ///          <p>Constraint:</p>
    ///          <ul>
    ///             <li>
    ///                <p>This parameter cannot be defined together with the <code>source disk name</code>
    ///           parameter. The <code>disk snapshot name</code> and <code>source disk name</code>
    ///           parameters are mutually exclusive.</p>
    ///             </li>
    ///          </ul>
    public let diskSnapshotName: Swift.String?
    /// <p>The date of the automatic snapshot to use for the new disk. Use the <code>get auto
    ///         snapshots</code> operation to identify the dates of the available automatic
    ///       snapshots.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must be specified in <code>YYYY-MM-DD</code> format.</p>
    ///             </li>
    ///             <li>
    ///                <p>This parameter cannot be defined together with the <code>use latest restorable auto
    ///             snapshot</code> parameter. The <code>restore date</code> and <code>use latest restorable
    ///             auto snapshot</code> parameters are mutually exclusive.</p>
    ///             </li>
    ///             <li>
    ///                <p>Define this parameter only when creating a new disk from an automatic snapshot. For
    ///           more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Lightsail Dev Guide</a>.</p>
    ///             </li>
    ///          </ul>
    public let restoreDate: Swift.String?
    /// <p>The size of the disk in GB (e.g., <code>32</code>).</p>
    public let sizeInGb: Swift.Int?
    /// <p>The name of the source disk from which the source automatic snapshot was created.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>This parameter cannot be defined together with the <code>disk snapshot name</code>
    ///           parameter. The <code>source disk name</code> and <code>disk snapshot name</code>
    ///           parameters are mutually exclusive.</p>
    ///             </li>
    ///             <li>
    ///                <p>Define this parameter only when creating a new disk from an automatic snapshot. For
    ///           more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Lightsail Dev Guide</a>.</p>
    ///             </li>
    ///          </ul>
    public let sourceDiskName: Swift.String?
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?
    /// <p>A Boolean value to indicate whether to use the latest available automatic snapshot.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>This parameter cannot be defined together with the <code>restore date</code>
    ///           parameter. The <code>use latest restorable auto snapshot</code> and <code>restore
    ///             date</code> parameters are mutually exclusive.</p>
    ///             </li>
    ///             <li>
    ///                <p>Define this parameter only when creating a new disk from an automatic snapshot. For
    ///           more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Lightsail Dev Guide</a>.</p>
    ///             </li>
    ///          </ul>
    public let useLatestRestorableAutoSnapshot: Swift.Bool?

    public init (
        addOns: [LightsailClientTypes.AddOnRequest]? = nil,
        availabilityZone: Swift.String? = nil,
        diskName: Swift.String? = nil,
        diskSnapshotName: Swift.String? = nil,
        restoreDate: Swift.String? = nil,
        sizeInGb: Swift.Int? = nil,
        sourceDiskName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        useLatestRestorableAutoSnapshot: Swift.Bool? = nil
    )
    {
        self.addOns = addOns
        self.availabilityZone = availabilityZone
        self.diskName = diskName
        self.diskSnapshotName = diskSnapshotName
        self.restoreDate = restoreDate
        self.sizeInGb = sizeInGb
        self.sourceDiskName = sourceDiskName
        self.tags = tags
        self.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot
    }
}

struct CreateDiskFromSnapshotInputBody: Swift.Equatable {
    public let diskName: Swift.String?
    public let diskSnapshotName: Swift.String?
    public let availabilityZone: Swift.String?
    public let sizeInGb: Swift.Int?
    public let tags: [LightsailClientTypes.Tag]?
    public let addOns: [LightsailClientTypes.AddOnRequest]?
    public let sourceDiskName: Swift.String?
    public let restoreDate: Swift.String?
    public let useLatestRestorableAutoSnapshot: Swift.Bool?
}

extension CreateDiskFromSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case availabilityZone
        case diskName
        case diskSnapshotName
        case restoreDate
        case sizeInGb
        case sourceDiskName
        case tags
        case useLatestRestorableAutoSnapshot
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
        let diskSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskSnapshotName)
        diskSnapshotName = diskSnapshotNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOnRequest?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOnRequest]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOnRequest]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
        let sourceDiskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceDiskName)
        sourceDiskName = sourceDiskNameDecoded
        let restoreDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .restoreDate)
        restoreDate = restoreDateDecoded
        let useLatestRestorableAutoSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useLatestRestorableAutoSnapshot)
        useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshotDecoded
    }
}

extension CreateDiskFromSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDiskFromSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDiskFromSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDiskFromSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDiskFromSnapshotOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension CreateDiskFromSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDiskFromSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateDiskFromSnapshotOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateDiskFromSnapshotOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension CreateDiskFromSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct CreateDiskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDiskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDiskOutputError>
}

extension CreateDiskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDiskInput(addOns: \(Swift.String(describing: addOns)), availabilityZone: \(Swift.String(describing: availabilityZone)), diskName: \(Swift.String(describing: diskName)), sizeInGb: \(Swift.String(describing: sizeInGb)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateDiskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case availabilityZone
        case diskName
        case sizeInGb
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addonrequestlist0 in addOns {
                try addOnsContainer.encode(addonrequestlist0)
            }
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let diskName = diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
        if let sizeInGb = sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateDiskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDiskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDiskOutputError>
}

public struct CreateDiskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDiskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDiskOutputError>
}

public struct CreateDiskInput: Swift.Equatable {
    /// <p>An array of objects that represent the add-ons to enable for the new disk.</p>
    public let addOns: [LightsailClientTypes.AddOnRequest]?
    /// <p>The Availability Zone where you want to create the disk (e.g., <code>us-east-2a</code>).
    ///       Use the same Availability Zone as the Lightsail instance to which you want to attach the
    ///       disk.</p>
    ///          <p>Use the <code>get regions</code> operation to list the Availability Zones where
    ///       Lightsail is currently available.</p>
    public let availabilityZone: Swift.String?
    /// <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    public let diskName: Swift.String?
    /// <p>The size of the disk in GB (e.g., <code>32</code>).</p>
    public let sizeInGb: Swift.Int?
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?

    public init (
        addOns: [LightsailClientTypes.AddOnRequest]? = nil,
        availabilityZone: Swift.String? = nil,
        diskName: Swift.String? = nil,
        sizeInGb: Swift.Int? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.addOns = addOns
        self.availabilityZone = availabilityZone
        self.diskName = diskName
        self.sizeInGb = sizeInGb
        self.tags = tags
    }
}

struct CreateDiskInputBody: Swift.Equatable {
    public let diskName: Swift.String?
    public let availabilityZone: Swift.String?
    public let sizeInGb: Swift.Int?
    public let tags: [LightsailClientTypes.Tag]?
    public let addOns: [LightsailClientTypes.AddOnRequest]?
}

extension CreateDiskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case availabilityZone
        case diskName
        case sizeInGb
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOnRequest?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOnRequest]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOnRequest]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
    }
}

extension CreateDiskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDiskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDiskOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDiskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDiskOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension CreateDiskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDiskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateDiskOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateDiskOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension CreateDiskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct CreateDiskSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDiskSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDiskSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDiskSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDiskSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDiskSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDiskSnapshotOutputError>
}

extension CreateDiskSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDiskSnapshotInput(diskName: \(Swift.String(describing: diskName)), diskSnapshotName: \(Swift.String(describing: diskSnapshotName)), instanceName: \(Swift.String(describing: instanceName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateDiskSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
        case diskSnapshotName
        case instanceName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskName = diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
        if let diskSnapshotName = diskSnapshotName {
            try encodeContainer.encode(diskSnapshotName, forKey: .diskSnapshotName)
        }
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateDiskSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDiskSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDiskSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDiskSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDiskSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDiskSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDiskSnapshotOutputError>
}

public struct CreateDiskSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDiskSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDiskSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDiskSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDiskSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDiskSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDiskSnapshotOutputError>
}

public struct CreateDiskSnapshotInput: Swift.Equatable {
    /// <p>The unique name of the source disk (e.g., <code>Disk-Virginia-1</code>).</p>
    ///          <note>
    ///             <p>This parameter cannot be defined together with the <code>instance name</code> parameter.
    ///         The <code>disk name</code> and <code>instance name</code> parameters are mutually
    ///         exclusive.</p>
    ///          </note>
    public let diskName: Swift.String?
    /// <p>The name of the destination disk snapshot (e.g., <code>my-disk-snapshot</code>) based on
    ///       the source disk.</p>
    public let diskSnapshotName: Swift.String?
    /// <p>The unique name of the source instance (e.g., <code>Amazon_Linux-512MB-Virginia-1</code>).
    ///       When this is defined, a snapshot of the instance's system volume is created.</p>
    ///          <note>
    ///             <p>This parameter cannot be defined together with the <code>disk name</code> parameter. The
    ///           <code>instance name</code> and <code>disk name</code> parameters are mutually
    ///         exclusive.</p>
    ///          </note>
    public let instanceName: Swift.String?
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?

    public init (
        diskName: Swift.String? = nil,
        diskSnapshotName: Swift.String? = nil,
        instanceName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.diskName = diskName
        self.diskSnapshotName = diskSnapshotName
        self.instanceName = instanceName
        self.tags = tags
    }
}

struct CreateDiskSnapshotInputBody: Swift.Equatable {
    public let diskName: Swift.String?
    public let diskSnapshotName: Swift.String?
    public let instanceName: Swift.String?
    public let tags: [LightsailClientTypes.Tag]?
}

extension CreateDiskSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
        case diskSnapshotName
        case instanceName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
        let diskSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskSnapshotName)
        diskSnapshotName = diskSnapshotNameDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDiskSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDiskSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDiskSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDiskSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDiskSnapshotOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension CreateDiskSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDiskSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateDiskSnapshotOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateDiskSnapshotOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension CreateDiskSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct CreateDistributionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDistributionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDistributionOutputError>
}

extension CreateDistributionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDistributionInput(bundleId: \(Swift.String(describing: bundleId)), cacheBehaviorSettings: \(Swift.String(describing: cacheBehaviorSettings)), cacheBehaviors: \(Swift.String(describing: cacheBehaviors)), defaultCacheBehavior: \(Swift.String(describing: defaultCacheBehavior)), distributionName: \(Swift.String(describing: distributionName)), ipAddressType: \(Swift.String(describing: ipAddressType)), origin: \(Swift.String(describing: origin)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateDistributionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case cacheBehaviorSettings
        case cacheBehaviors
        case defaultCacheBehavior
        case distributionName
        case ipAddressType
        case origin
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let cacheBehaviorSettings = cacheBehaviorSettings {
            try encodeContainer.encode(cacheBehaviorSettings, forKey: .cacheBehaviorSettings)
        }
        if let cacheBehaviors = cacheBehaviors {
            var cacheBehaviorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cacheBehaviors)
            for cachebehaviorlist0 in cacheBehaviors {
                try cacheBehaviorsContainer.encode(cachebehaviorlist0)
            }
        }
        if let defaultCacheBehavior = defaultCacheBehavior {
            try encodeContainer.encode(defaultCacheBehavior, forKey: .defaultCacheBehavior)
        }
        if let distributionName = distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
        if let ipAddressType = ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let origin = origin {
            try encodeContainer.encode(origin, forKey: .origin)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateDistributionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDistributionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDistributionOutputError>
}

public struct CreateDistributionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDistributionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDistributionOutputError>
}

public struct CreateDistributionInput: Swift.Equatable {
    /// <p>The bundle ID to use for the distribution.</p>
    ///          <p>A distribution bundle describes the specifications of your distribution, such as the
    ///       monthly cost and monthly network transfer quota.</p>
    ///          <p>Use the <code>GetDistributionBundles</code> action to get a list of distribution bundle
    ///       IDs that you can specify.</p>
    public let bundleId: Swift.String?
    /// <p>An object that describes the cache behavior settings for the distribution.</p>
    public let cacheBehaviorSettings: LightsailClientTypes.CacheSettings?
    /// <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    public let cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]?
    /// <p>An object that describes the default cache behavior for the distribution.</p>
    public let defaultCacheBehavior: LightsailClientTypes.CacheBehavior?
    /// <p>The name for the distribution.</p>
    public let distributionName: Swift.String?
    /// <p>The IP address type for the distribution.</p>
    ///
    ///          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
    ///       IPv4 and IPv6.</p>
    ///
    ///          <p>The default value is <code>dualstack</code>.</p>
    public let ipAddressType: LightsailClientTypes.IpAddressType?
    /// <p>An object that describes the origin resource for the distribution, such as a Lightsail
    ///       instance or load balancer.</p>
    ///          <p>The distribution pulls, caches, and serves content from the origin.</p>
    public let origin: LightsailClientTypes.InputOrigin?
    /// <p>The tag keys and optional values to add to the distribution during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?

    public init (
        bundleId: Swift.String? = nil,
        cacheBehaviorSettings: LightsailClientTypes.CacheSettings? = nil,
        cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]? = nil,
        defaultCacheBehavior: LightsailClientTypes.CacheBehavior? = nil,
        distributionName: Swift.String? = nil,
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        origin: LightsailClientTypes.InputOrigin? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.bundleId = bundleId
        self.cacheBehaviorSettings = cacheBehaviorSettings
        self.cacheBehaviors = cacheBehaviors
        self.defaultCacheBehavior = defaultCacheBehavior
        self.distributionName = distributionName
        self.ipAddressType = ipAddressType
        self.origin = origin
        self.tags = tags
    }
}

struct CreateDistributionInputBody: Swift.Equatable {
    public let distributionName: Swift.String?
    public let origin: LightsailClientTypes.InputOrigin?
    public let defaultCacheBehavior: LightsailClientTypes.CacheBehavior?
    public let cacheBehaviorSettings: LightsailClientTypes.CacheSettings?
    public let cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]?
    public let bundleId: Swift.String?
    public let ipAddressType: LightsailClientTypes.IpAddressType?
    public let tags: [LightsailClientTypes.Tag]?
}

extension CreateDistributionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case cacheBehaviorSettings
        case cacheBehaviors
        case defaultCacheBehavior
        case distributionName
        case ipAddressType
        case origin
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
        let originDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InputOrigin.self, forKey: .origin)
        origin = originDecoded
        let defaultCacheBehaviorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CacheBehavior.self, forKey: .defaultCacheBehavior)
        defaultCacheBehavior = defaultCacheBehaviorDecoded
        let cacheBehaviorSettingsDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CacheSettings.self, forKey: .cacheBehaviorSettings)
        cacheBehaviorSettings = cacheBehaviorSettingsDecoded
        let cacheBehaviorsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CacheBehaviorPerPath?].self, forKey: .cacheBehaviors)
        var cacheBehaviorsDecoded0:[LightsailClientTypes.CacheBehaviorPerPath]? = nil
        if let cacheBehaviorsContainer = cacheBehaviorsContainer {
            cacheBehaviorsDecoded0 = [LightsailClientTypes.CacheBehaviorPerPath]()
            for structure0 in cacheBehaviorsContainer {
                if let structure0 = structure0 {
                    cacheBehaviorsDecoded0?.append(structure0)
                }
            }
        }
        cacheBehaviors = cacheBehaviorsDecoded0
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDistributionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDistributionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDistributionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDistributionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDistributionOutputResponse(distribution: \(Swift.String(describing: distribution)), operation: \(Swift.String(describing: operation)))"}
}

extension CreateDistributionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDistributionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.distribution = output.distribution
            self.operation = output.operation
        } else {
            self.distribution = nil
            self.operation = nil
        }
    }
}

public struct CreateDistributionOutputResponse: Swift.Equatable {
    /// <p>An object that describes the distribution created.</p>
    public let distribution: LightsailClientTypes.LightsailDistribution?
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        distribution: LightsailClientTypes.LightsailDistribution? = nil,
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.distribution = distribution
        self.operation = operation
    }
}

struct CreateDistributionOutputResponseBody: Swift.Equatable {
    public let distribution: LightsailClientTypes.LightsailDistribution?
    public let operation: LightsailClientTypes.Operation?
}

extension CreateDistributionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distribution
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LightsailDistribution.self, forKey: .distribution)
        distribution = distributionDecoded
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

public struct CreateDomainEntryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDomainEntryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDomainEntryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDomainEntryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDomainEntryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDomainEntryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDomainEntryOutputError>
}

extension CreateDomainEntryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDomainEntryInput(domainEntry: \(Swift.String(describing: domainEntry)), domainName: \(Swift.String(describing: domainName)))"}
}

extension CreateDomainEntryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainEntry
        case domainName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainEntry = domainEntry {
            try encodeContainer.encode(domainEntry, forKey: .domainEntry)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

public struct CreateDomainEntryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDomainEntryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDomainEntryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDomainEntryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDomainEntryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDomainEntryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDomainEntryOutputError>
}

public struct CreateDomainEntryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDomainEntryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDomainEntryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDomainEntryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDomainEntryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDomainEntryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDomainEntryOutputError>
}

public struct CreateDomainEntryInput: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about the domain entry request.</p>
    public let domainEntry: LightsailClientTypes.DomainEntry?
    /// <p>The domain name (e.g., <code>example.com</code>) for which you want to create the domain
    ///       entry.</p>
    public let domainName: Swift.String?

    public init (
        domainEntry: LightsailClientTypes.DomainEntry? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.domainEntry = domainEntry
        self.domainName = domainName
    }
}

struct CreateDomainEntryInputBody: Swift.Equatable {
    public let domainName: Swift.String?
    public let domainEntry: LightsailClientTypes.DomainEntry?
}

extension CreateDomainEntryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainEntry
        case domainName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let domainEntryDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DomainEntry.self, forKey: .domainEntry)
        domainEntry = domainEntryDecoded
    }
}

extension CreateDomainEntryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDomainEntryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDomainEntryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDomainEntryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDomainEntryOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension CreateDomainEntryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDomainEntryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct CreateDomainEntryOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct CreateDomainEntryOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension CreateDomainEntryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

public struct CreateDomainInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDomainInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDomainOutputError>
}

extension CreateDomainInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDomainInput(domainName: \(Swift.String(describing: domainName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateDomainInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateDomainInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDomainInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDomainOutputError>
}

public struct CreateDomainInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDomainInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDomainOutputError>
}

public struct CreateDomainInput: Swift.Equatable {
    /// <p>The domain name to manage (e.g., <code>example.com</code>).</p>
    ///          <note>
    ///             <p>You cannot register a new domain name using Lightsail. You must register a domain name
    ///         using Amazon Route 53 or another domain name registrar. If you have already registered your
    ///         domain, you can enter its name in this parameter to manage the DNS records for that domain
    ///         using Lightsail.</p>
    ///          </note>
    public let domainName: Swift.String?
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?

    public init (
        domainName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.domainName = domainName
        self.tags = tags
    }
}

struct CreateDomainInputBody: Swift.Equatable {
    public let domainName: Swift.String?
    public let tags: [LightsailClientTypes.Tag]?
}

extension CreateDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDomainOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDomainOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDomainOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension CreateDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct CreateDomainOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct CreateDomainOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension CreateDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

public struct CreateInstanceSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInstanceSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInstanceSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInstanceSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInstanceSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInstanceSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInstanceSnapshotOutputError>
}

extension CreateInstanceSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInstanceSnapshotInput(instanceName: \(Swift.String(describing: instanceName)), instanceSnapshotName: \(Swift.String(describing: instanceSnapshotName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateInstanceSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case instanceSnapshotName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let instanceSnapshotName = instanceSnapshotName {
            try encodeContainer.encode(instanceSnapshotName, forKey: .instanceSnapshotName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateInstanceSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInstanceSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInstanceSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInstanceSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInstanceSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInstanceSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInstanceSnapshotOutputError>
}

public struct CreateInstanceSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInstanceSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInstanceSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInstanceSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInstanceSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInstanceSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInstanceSnapshotOutputError>
}

public struct CreateInstanceSnapshotInput: Swift.Equatable {
    /// <p>The Lightsail instance on which to base your snapshot.</p>
    public let instanceName: Swift.String?
    /// <p>The name for your new snapshot.</p>
    public let instanceSnapshotName: Swift.String?
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?

    public init (
        instanceName: Swift.String? = nil,
        instanceSnapshotName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.instanceName = instanceName
        self.instanceSnapshotName = instanceSnapshotName
        self.tags = tags
    }
}

struct CreateInstanceSnapshotInputBody: Swift.Equatable {
    public let instanceSnapshotName: Swift.String?
    public let instanceName: Swift.String?
    public let tags: [LightsailClientTypes.Tag]?
}

extension CreateInstanceSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case instanceSnapshotName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceSnapshotName)
        instanceSnapshotName = instanceSnapshotNameDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateInstanceSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInstanceSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateInstanceSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInstanceSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInstanceSnapshotOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension CreateInstanceSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateInstanceSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateInstanceSnapshotOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateInstanceSnapshotOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension CreateInstanceSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct CreateInstancesFromSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInstancesFromSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInstancesFromSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInstancesFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInstancesFromSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInstancesFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInstancesFromSnapshotOutputError>
}

extension CreateInstancesFromSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInstancesFromSnapshotInput(addOns: \(Swift.String(describing: addOns)), attachedDiskMapping: \(Swift.String(describing: attachedDiskMapping)), availabilityZone: \(Swift.String(describing: availabilityZone)), bundleId: \(Swift.String(describing: bundleId)), instanceNames: \(Swift.String(describing: instanceNames)), instanceSnapshotName: \(Swift.String(describing: instanceSnapshotName)), ipAddressType: \(Swift.String(describing: ipAddressType)), keyPairName: \(Swift.String(describing: keyPairName)), restoreDate: \(Swift.String(describing: restoreDate)), sourceInstanceName: \(Swift.String(describing: sourceInstanceName)), tags: \(Swift.String(describing: tags)), useLatestRestorableAutoSnapshot: \(Swift.String(describing: useLatestRestorableAutoSnapshot)), userData: \(Swift.String(describing: userData)))"}
}

extension CreateInstancesFromSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case attachedDiskMapping
        case availabilityZone
        case bundleId
        case instanceNames
        case instanceSnapshotName
        case ipAddressType
        case keyPairName
        case restoreDate
        case sourceInstanceName
        case tags
        case useLatestRestorableAutoSnapshot
        case userData
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addonrequestlist0 in addOns {
                try addOnsContainer.encode(addonrequestlist0)
            }
        }
        if let attachedDiskMapping = attachedDiskMapping {
            var attachedDiskMappingContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attachedDiskMapping)
            for (dictKey0, attacheddiskmap0) in attachedDiskMapping {
                try attachedDiskMappingContainer.encode(attacheddiskmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let bundleId = bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for stringlist0 in instanceNames {
                try instanceNamesContainer.encode(stringlist0)
            }
        }
        if let instanceSnapshotName = instanceSnapshotName {
            try encodeContainer.encode(instanceSnapshotName, forKey: .instanceSnapshotName)
        }
        if let ipAddressType = ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let keyPairName = keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
        if let restoreDate = restoreDate {
            try encodeContainer.encode(restoreDate, forKey: .restoreDate)
        }
        if let sourceInstanceName = sourceInstanceName {
            try encodeContainer.encode(sourceInstanceName, forKey: .sourceInstanceName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot {
            try encodeContainer.encode(useLatestRestorableAutoSnapshot, forKey: .useLatestRestorableAutoSnapshot)
        }
        if let userData = userData {
            try encodeContainer.encode(userData, forKey: .userData)
        }
    }
}

public struct CreateInstancesFromSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInstancesFromSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInstancesFromSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInstancesFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInstancesFromSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInstancesFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInstancesFromSnapshotOutputError>
}

public struct CreateInstancesFromSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInstancesFromSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInstancesFromSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInstancesFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInstancesFromSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInstancesFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInstancesFromSnapshotOutputError>
}

public struct CreateInstancesFromSnapshotInput: Swift.Equatable {
    /// <p>An array of objects representing the add-ons to enable for the new instance.</p>
    public let addOns: [LightsailClientTypes.AddOnRequest]?
    /// <p>An object containing information about one or more disk mappings.</p>
    public let attachedDiskMapping: [Swift.String:[LightsailClientTypes.DiskMap]]?
    /// <p>The Availability Zone where you want to create your instances. Use the following
    ///       formatting: <code>us-east-2a</code> (case sensitive). You can get a list of Availability Zones
    ///       by using the <a href="http://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRegions.html">get
    ///         regions</a> operation. Be sure to add the <code>include Availability Zones</code>
    ///       parameter to your request.</p>
    public let availabilityZone: Swift.String?
    /// <p>The bundle of specification information for your virtual private server (or
    ///         <i>instance</i>), including the pricing plan (e.g.,
    ///       <code>micro_1_0</code>).</p>
    public let bundleId: Swift.String?
    /// <p>The names for your new instances.</p>
    public let instanceNames: [Swift.String]?
    /// <p>The name of the instance snapshot on which you are basing your new instances. Use the get
    ///       instance snapshots operation to return information about your existing snapshots.</p>
    ///          <p>Constraint:</p>
    ///          <ul>
    ///             <li>
    ///                <p>This parameter cannot be defined together with the <code>source instance name</code>
    ///           parameter. The <code>instance snapshot name</code> and <code>source instance name</code>
    ///           parameters are mutually exclusive.</p>
    ///             </li>
    ///          </ul>
    public let instanceSnapshotName: Swift.String?
    /// <p>The IP address type for the instance.</p>
    ///
    ///          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
    ///       IPv4 and IPv6.</p>
    ///
    ///          <p>The default value is <code>dualstack</code>.</p>
    public let ipAddressType: LightsailClientTypes.IpAddressType?
    /// <p>The name for your key pair.</p>
    public let keyPairName: Swift.String?
    /// <p>The date of the automatic snapshot to use for the new instance. Use the <code>get auto
    ///         snapshots</code> operation to identify the dates of the available automatic
    ///       snapshots.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must be specified in <code>YYYY-MM-DD</code> format.</p>
    ///             </li>
    ///             <li>
    ///                <p>This parameter cannot be defined together with the <code>use latest restorable auto
    ///             snapshot</code> parameter. The <code>restore date</code> and <code>use latest restorable
    ///             auto snapshot</code> parameters are mutually exclusive.</p>
    ///             </li>
    ///             <li>
    ///                <p>Define this parameter only when creating a new instance from an automatic snapshot.
    ///           For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Lightsail Dev Guide</a>.</p>
    ///             </li>
    ///          </ul>
    public let restoreDate: Swift.String?
    /// <p>The name of the source instance from which the source automatic snapshot was
    ///       created.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>This parameter cannot be defined together with the <code>instance snapshot name</code>
    ///           parameter. The <code>source instance name</code> and <code>instance snapshot name</code>
    ///           parameters are mutually exclusive.</p>
    ///             </li>
    ///             <li>
    ///                <p>Define this parameter only when creating a new instance from an automatic snapshot.
    ///           For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Lightsail Dev Guide</a>.</p>
    ///             </li>
    ///          </ul>
    public let sourceInstanceName: Swift.String?
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?
    /// <p>A Boolean value to indicate whether to use the latest available automatic snapshot.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>This parameter cannot be defined together with the <code>restore date</code>
    ///           parameter. The <code>use latest restorable auto snapshot</code> and <code>restore
    ///             date</code> parameters are mutually exclusive.</p>
    ///             </li>
    ///             <li>
    ///                <p>Define this parameter only when creating a new instance from an automatic snapshot.
    ///           For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Lightsail Dev Guide</a>.</p>
    ///             </li>
    ///          </ul>
    public let useLatestRestorableAutoSnapshot: Swift.Bool?
    /// <p>You can create a launch script that configures a server with additional user data. For
    ///       example, <code>apt-get -y update</code>.</p>
    ///          <note>
    ///             <p>Depending on the machine image you choose, the command to get software on your instance
    ///         varies. Amazon Linux and CentOS use <code>yum</code>, Debian and Ubuntu use
    ///           <code>apt-get</code>, and FreeBSD uses <code>pkg</code>. For a complete list, see the
    ///           <a href="https://lightsail.aws.amazon.com/ls/docs/getting-started/article/compare-options-choose-lightsail-instance-image">Dev Guide</a>.</p>
    ///          </note>
    public let userData: Swift.String?

    public init (
        addOns: [LightsailClientTypes.AddOnRequest]? = nil,
        attachedDiskMapping: [Swift.String:[LightsailClientTypes.DiskMap]]? = nil,
        availabilityZone: Swift.String? = nil,
        bundleId: Swift.String? = nil,
        instanceNames: [Swift.String]? = nil,
        instanceSnapshotName: Swift.String? = nil,
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        keyPairName: Swift.String? = nil,
        restoreDate: Swift.String? = nil,
        sourceInstanceName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        useLatestRestorableAutoSnapshot: Swift.Bool? = nil,
        userData: Swift.String? = nil
    )
    {
        self.addOns = addOns
        self.attachedDiskMapping = attachedDiskMapping
        self.availabilityZone = availabilityZone
        self.bundleId = bundleId
        self.instanceNames = instanceNames
        self.instanceSnapshotName = instanceSnapshotName
        self.ipAddressType = ipAddressType
        self.keyPairName = keyPairName
        self.restoreDate = restoreDate
        self.sourceInstanceName = sourceInstanceName
        self.tags = tags
        self.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot
        self.userData = userData
    }
}

struct CreateInstancesFromSnapshotInputBody: Swift.Equatable {
    public let instanceNames: [Swift.String]?
    public let attachedDiskMapping: [Swift.String:[LightsailClientTypes.DiskMap]]?
    public let availabilityZone: Swift.String?
    public let instanceSnapshotName: Swift.String?
    public let bundleId: Swift.String?
    public let userData: Swift.String?
    public let keyPairName: Swift.String?
    public let tags: [LightsailClientTypes.Tag]?
    public let addOns: [LightsailClientTypes.AddOnRequest]?
    public let ipAddressType: LightsailClientTypes.IpAddressType?
    public let sourceInstanceName: Swift.String?
    public let restoreDate: Swift.String?
    public let useLatestRestorableAutoSnapshot: Swift.Bool?
}

extension CreateInstancesFromSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case attachedDiskMapping
        case availabilityZone
        case bundleId
        case instanceNames
        case instanceSnapshotName
        case ipAddressType
        case keyPairName
        case restoreDate
        case sourceInstanceName
        case tags
        case useLatestRestorableAutoSnapshot
        case userData
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[Swift.String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [Swift.String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
        let attachedDiskMappingContainer = try containerValues.decodeIfPresent([Swift.String: [LightsailClientTypes.DiskMap?]?].self, forKey: .attachedDiskMapping)
        var attachedDiskMappingDecoded0: [Swift.String:[LightsailClientTypes.DiskMap]]? = nil
        if let attachedDiskMappingContainer = attachedDiskMappingContainer {
            attachedDiskMappingDecoded0 = [Swift.String:[LightsailClientTypes.DiskMap]]()
            for (key0, diskmaplist0) in attachedDiskMappingContainer {
                var diskmaplist0Decoded0: [LightsailClientTypes.DiskMap]? = nil
                if let diskmaplist0 = diskmaplist0 {
                    diskmaplist0Decoded0 = [LightsailClientTypes.DiskMap]()
                    for structure1 in diskmaplist0 {
                        if let structure1 = structure1 {
                            diskmaplist0Decoded0?.append(structure1)
                        }
                    }
                }
                attachedDiskMappingDecoded0?[key0] = diskmaplist0Decoded0
            }
        }
        attachedDiskMapping = attachedDiskMappingDecoded0
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let instanceSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceSnapshotName)
        instanceSnapshotName = instanceSnapshotNameDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let userDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userData)
        userData = userDataDecoded
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOnRequest?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOnRequest]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOnRequest]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let sourceInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceInstanceName)
        sourceInstanceName = sourceInstanceNameDecoded
        let restoreDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .restoreDate)
        restoreDate = restoreDateDecoded
        let useLatestRestorableAutoSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useLatestRestorableAutoSnapshot)
        useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshotDecoded
    }
}

extension CreateInstancesFromSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInstancesFromSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateInstancesFromSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInstancesFromSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInstancesFromSnapshotOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension CreateInstancesFromSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateInstancesFromSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateInstancesFromSnapshotOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateInstancesFromSnapshotOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension CreateInstancesFromSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct CreateInstancesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInstancesOutputError>
}

extension CreateInstancesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInstancesInput(addOns: \(Swift.String(describing: addOns)), availabilityZone: \(Swift.String(describing: availabilityZone)), blueprintId: \(Swift.String(describing: blueprintId)), bundleId: \(Swift.String(describing: bundleId)), customImageName: \(Swift.String(describing: customImageName)), instanceNames: \(Swift.String(describing: instanceNames)), ipAddressType: \(Swift.String(describing: ipAddressType)), keyPairName: \(Swift.String(describing: keyPairName)), tags: \(Swift.String(describing: tags)), userData: \(Swift.String(describing: userData)))"}
}

extension CreateInstancesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case availabilityZone
        case blueprintId
        case bundleId
        case customImageName
        case instanceNames
        case ipAddressType
        case keyPairName
        case tags
        case userData
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addonrequestlist0 in addOns {
                try addOnsContainer.encode(addonrequestlist0)
            }
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let blueprintId = blueprintId {
            try encodeContainer.encode(blueprintId, forKey: .blueprintId)
        }
        if let bundleId = bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let customImageName = customImageName {
            try encodeContainer.encode(customImageName, forKey: .customImageName)
        }
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for stringlist0 in instanceNames {
                try instanceNamesContainer.encode(stringlist0)
            }
        }
        if let ipAddressType = ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let keyPairName = keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let userData = userData {
            try encodeContainer.encode(userData, forKey: .userData)
        }
    }
}

public struct CreateInstancesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInstancesOutputError>
}

public struct CreateInstancesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInstancesOutputError>
}

public struct CreateInstancesInput: Swift.Equatable {
    /// <p>An array of objects representing the add-ons to enable for the new instance.</p>
    public let addOns: [LightsailClientTypes.AddOnRequest]?
    /// <p>The Availability Zone in which to create your instance. Use the following format:
    ///         <code>us-east-2a</code> (case sensitive). You can get a list of Availability Zones by using
    ///       the <a href="http://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRegions.html">get
    ///         regions</a> operation. Be sure to add the <code>include Availability Zones</code>
    ///       parameter to your request.</p>
    public let availabilityZone: Swift.String?
    /// <p>The ID for a virtual private server image (e.g., <code>app_wordpress_4_4</code> or
    ///         <code>app_lamp_7_0</code>). Use the <code>get blueprints</code> operation to return a list
    ///       of available images (or <i>blueprints</i>).</p>
    ///          <note>
    ///             <p>Use active blueprints when creating new instances. Inactive blueprints are listed to
    ///         support customers with existing instances and are not necessarily available to create new
    ///         instances. Blueprints are marked inactive when they become outdated due to operating system
    ///         updates or new application releases.</p>
    ///          </note>
    public let blueprintId: Swift.String?
    /// <p>The bundle of specification information for your virtual private server (or
    ///         <i>instance</i>), including the pricing plan (e.g.,
    ///       <code>micro_1_0</code>).</p>
    public let bundleId: Swift.String?
    /// <p>(Deprecated) The name for your custom image.</p>
    ///          <note>
    ///             <p>In releases prior to June 12, 2017, this parameter was ignored by the API. It is now
    ///         deprecated.</p>
    ///          </note>
    @available(*, deprecated)
    public let customImageName: Swift.String?
    /// <p>The names to use for your new Lightsail instances. Separate multiple values using
    ///       quotation marks and commas, for example:
    ///       <code>["MyFirstInstance","MySecondInstance"]</code>
    ///          </p>
    public let instanceNames: [Swift.String]?
    /// <p>The IP address type for the instance.</p>
    ///
    ///          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
    ///       IPv4 and IPv6.</p>
    ///
    ///          <p>The default value is <code>dualstack</code>.</p>
    public let ipAddressType: LightsailClientTypes.IpAddressType?
    /// <p>The name of your key pair.</p>
    public let keyPairName: Swift.String?
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?
    /// <p>A launch script you can create that configures a server with additional user data. For
    ///       example, you might want to run <code>apt-get -y update</code>.</p>
    ///          <note>
    ///             <p>Depending on the machine image you choose, the command to get software on your instance
    ///         varies. Amazon Linux and CentOS use <code>yum</code>, Debian and Ubuntu use
    ///           <code>apt-get</code>, and FreeBSD uses <code>pkg</code>. For a complete list, see the
    ///           <a href="https://lightsail.aws.amazon.com/ls/docs/getting-started/article/compare-options-choose-lightsail-instance-image">Dev Guide</a>.</p>
    ///          </note>
    public let userData: Swift.String?

    public init (
        addOns: [LightsailClientTypes.AddOnRequest]? = nil,
        availabilityZone: Swift.String? = nil,
        blueprintId: Swift.String? = nil,
        bundleId: Swift.String? = nil,
        customImageName: Swift.String? = nil,
        instanceNames: [Swift.String]? = nil,
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        keyPairName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        userData: Swift.String? = nil
    )
    {
        self.addOns = addOns
        self.availabilityZone = availabilityZone
        self.blueprintId = blueprintId
        self.bundleId = bundleId
        self.customImageName = customImageName
        self.instanceNames = instanceNames
        self.ipAddressType = ipAddressType
        self.keyPairName = keyPairName
        self.tags = tags
        self.userData = userData
    }
}

struct CreateInstancesInputBody: Swift.Equatable {
    public let instanceNames: [Swift.String]?
    public let availabilityZone: Swift.String?
    public let customImageName: Swift.String?
    public let blueprintId: Swift.String?
    public let bundleId: Swift.String?
    public let userData: Swift.String?
    public let keyPairName: Swift.String?
    public let tags: [LightsailClientTypes.Tag]?
    public let addOns: [LightsailClientTypes.AddOnRequest]?
    public let ipAddressType: LightsailClientTypes.IpAddressType?
}

extension CreateInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case availabilityZone
        case blueprintId
        case bundleId
        case customImageName
        case instanceNames
        case ipAddressType
        case keyPairName
        case tags
        case userData
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[Swift.String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [Swift.String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let customImageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customImageName)
        customImageName = customImageNameDecoded
        let blueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintId)
        blueprintId = blueprintIdDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let userDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userData)
        userData = userDataDecoded
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOnRequest?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOnRequest]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOnRequest]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
    }
}

extension CreateInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateInstancesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInstancesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInstancesOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension CreateInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateInstancesOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateInstancesOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension CreateInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct CreateKeyPairInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateKeyPairInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateKeyPairInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateKeyPairInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateKeyPairOutputError>
}

extension CreateKeyPairInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateKeyPairInput(keyPairName: \(Swift.String(describing: keyPairName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateKeyPairInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyPairName = keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateKeyPairInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateKeyPairInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateKeyPairInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateKeyPairInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateKeyPairOutputError>
}

public struct CreateKeyPairInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateKeyPairInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateKeyPairInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateKeyPairInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateKeyPairOutputError>
}

public struct CreateKeyPairInput: Swift.Equatable {
    /// <p>The name for your new key pair.</p>
    public let keyPairName: Swift.String?
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?

    public init (
        keyPairName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.keyPairName = keyPairName
        self.tags = tags
    }
}

struct CreateKeyPairInputBody: Swift.Equatable {
    public let keyPairName: Swift.String?
    public let tags: [LightsailClientTypes.Tag]?
}

extension CreateKeyPairInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateKeyPairOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateKeyPairOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateKeyPairOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateKeyPairOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateKeyPairOutputResponse(keyPair: \(Swift.String(describing: keyPair)), operation: \(Swift.String(describing: operation)), privateKeyBase64: \(Swift.String(describing: privateKeyBase64)), publicKeyBase64: \(Swift.String(describing: publicKeyBase64)))"}
}

extension CreateKeyPairOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateKeyPairOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyPair = output.keyPair
            self.operation = output.operation
            self.privateKeyBase64 = output.privateKeyBase64
            self.publicKeyBase64 = output.publicKeyBase64
        } else {
            self.keyPair = nil
            self.operation = nil
            self.privateKeyBase64 = nil
            self.publicKeyBase64 = nil
        }
    }
}

public struct CreateKeyPairOutputResponse: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about the new key pair you just
    ///       created.</p>
    public let keyPair: LightsailClientTypes.KeyPair?
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?
    /// <p>A base64-encoded RSA private key.</p>
    public let privateKeyBase64: Swift.String?
    /// <p>A base64-encoded public key of the <code>ssh-rsa</code> type.</p>
    public let publicKeyBase64: Swift.String?

    public init (
        keyPair: LightsailClientTypes.KeyPair? = nil,
        operation: LightsailClientTypes.Operation? = nil,
        privateKeyBase64: Swift.String? = nil,
        publicKeyBase64: Swift.String? = nil
    )
    {
        self.keyPair = keyPair
        self.operation = operation
        self.privateKeyBase64 = privateKeyBase64
        self.publicKeyBase64 = publicKeyBase64
    }
}

struct CreateKeyPairOutputResponseBody: Swift.Equatable {
    public let keyPair: LightsailClientTypes.KeyPair?
    public let publicKeyBase64: Swift.String?
    public let privateKeyBase64: Swift.String?
    public let operation: LightsailClientTypes.Operation?
}

extension CreateKeyPairOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPair
        case operation
        case privateKeyBase64
        case publicKeyBase64
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.KeyPair.self, forKey: .keyPair)
        keyPair = keyPairDecoded
        let publicKeyBase64Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKeyBase64)
        publicKeyBase64 = publicKeyBase64Decoded
        let privateKeyBase64Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKeyBase64)
        privateKeyBase64 = privateKeyBase64Decoded
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

public struct CreateLoadBalancerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLoadBalancerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLoadBalancerOutputError>
}

extension CreateLoadBalancerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLoadBalancerInput(certificateAlternativeNames: \(Swift.String(describing: certificateAlternativeNames)), certificateDomainName: \(Swift.String(describing: certificateDomainName)), certificateName: \(Swift.String(describing: certificateName)), healthCheckPath: \(Swift.String(describing: healthCheckPath)), instancePort: \(Swift.String(describing: instancePort)), ipAddressType: \(Swift.String(describing: ipAddressType)), loadBalancerName: \(Swift.String(describing: loadBalancerName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateLoadBalancerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAlternativeNames
        case certificateDomainName
        case certificateName
        case healthCheckPath
        case instancePort
        case ipAddressType
        case loadBalancerName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAlternativeNames = certificateAlternativeNames {
            var certificateAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificateAlternativeNames)
            for domainnamelist0 in certificateAlternativeNames {
                try certificateAlternativeNamesContainer.encode(domainnamelist0)
            }
        }
        if let certificateDomainName = certificateDomainName {
            try encodeContainer.encode(certificateDomainName, forKey: .certificateDomainName)
        }
        if let certificateName = certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let healthCheckPath = healthCheckPath {
            try encodeContainer.encode(healthCheckPath, forKey: .healthCheckPath)
        }
        if instancePort != 0 {
            try encodeContainer.encode(instancePort, forKey: .instancePort)
        }
        if let ipAddressType = ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateLoadBalancerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLoadBalancerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLoadBalancerOutputError>
}

public struct CreateLoadBalancerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLoadBalancerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLoadBalancerOutputError>
}

public struct CreateLoadBalancerInput: Swift.Equatable {
    /// <p>The optional alternative domains and subdomains to use with your SSL/TLS certificate
    ///       (e.g., <code>www.example.com</code>, <code>example.com</code>, <code>m.example.com</code>,
    ///         <code>blog.example.com</code>).</p>
    public let certificateAlternativeNames: [Swift.String]?
    /// <p>The domain name with which your certificate is associated (e.g.,
    ///       <code>example.com</code>).</p>
    ///          <p>If you specify <code>certificateDomainName</code>, then <code>certificateName</code> is
    ///       required (and vice-versa).</p>
    public let certificateDomainName: Swift.String?
    /// <p>The name of the SSL/TLS certificate.</p>
    ///          <p>If you specify <code>certificateName</code>, then <code>certificateDomainName</code> is
    ///       required (and vice-versa).</p>
    public let certificateName: Swift.String?
    /// <p>The path you provided to perform the load balancer health check. If you didn't specify a
    ///       health check path, Lightsail uses the root path of your website (e.g.,
    ///       <code>"/"</code>).</p>
    ///          <p>You may want to specify a custom health check path other than the root of your application
    ///       if your home page loads slowly or has a lot of media or scripting on it.</p>
    public let healthCheckPath: Swift.String?
    /// <p>The instance port where you're creating your load balancer.</p>
    public let instancePort: Swift.Int
    /// <p>The IP address type for the load balancer.</p>
    ///
    ///          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
    ///       IPv4 and IPv6.</p>
    ///
    ///          <p>The default value is <code>dualstack</code>.</p>
    public let ipAddressType: LightsailClientTypes.IpAddressType?
    /// <p>The name of your load balancer.</p>
    public let loadBalancerName: Swift.String?
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?

    public init (
        certificateAlternativeNames: [Swift.String]? = nil,
        certificateDomainName: Swift.String? = nil,
        certificateName: Swift.String? = nil,
        healthCheckPath: Swift.String? = nil,
        instancePort: Swift.Int = 0,
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        loadBalancerName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.certificateAlternativeNames = certificateAlternativeNames
        self.certificateDomainName = certificateDomainName
        self.certificateName = certificateName
        self.healthCheckPath = healthCheckPath
        self.instancePort = instancePort
        self.ipAddressType = ipAddressType
        self.loadBalancerName = loadBalancerName
        self.tags = tags
    }
}

struct CreateLoadBalancerInputBody: Swift.Equatable {
    public let loadBalancerName: Swift.String?
    public let instancePort: Swift.Int
    public let healthCheckPath: Swift.String?
    public let certificateName: Swift.String?
    public let certificateDomainName: Swift.String?
    public let certificateAlternativeNames: [Swift.String]?
    public let tags: [LightsailClientTypes.Tag]?
    public let ipAddressType: LightsailClientTypes.IpAddressType?
}

extension CreateLoadBalancerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAlternativeNames
        case certificateDomainName
        case certificateName
        case healthCheckPath
        case instancePort
        case ipAddressType
        case loadBalancerName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let instancePortDecoded = try containerValues.decode(Swift.Int.self, forKey: .instancePort)
        instancePort = instancePortDecoded
        let healthCheckPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckPath)
        healthCheckPath = healthCheckPathDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let certificateDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateDomainName)
        certificateDomainName = certificateDomainNameDecoded
        let certificateAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .certificateAlternativeNames)
        var certificateAlternativeNamesDecoded0:[Swift.String]? = nil
        if let certificateAlternativeNamesContainer = certificateAlternativeNamesContainer {
            certificateAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in certificateAlternativeNamesContainer {
                if let string0 = string0 {
                    certificateAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        certificateAlternativeNames = certificateAlternativeNamesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
    }
}

extension CreateLoadBalancerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLoadBalancerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLoadBalancerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLoadBalancerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLoadBalancerOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension CreateLoadBalancerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateLoadBalancerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateLoadBalancerOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateLoadBalancerOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension CreateLoadBalancerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct CreateLoadBalancerTlsCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLoadBalancerTlsCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLoadBalancerTlsCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLoadBalancerTlsCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLoadBalancerTlsCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLoadBalancerTlsCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLoadBalancerTlsCertificateOutputError>
}

extension CreateLoadBalancerTlsCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLoadBalancerTlsCertificateInput(certificateAlternativeNames: \(Swift.String(describing: certificateAlternativeNames)), certificateDomainName: \(Swift.String(describing: certificateDomainName)), certificateName: \(Swift.String(describing: certificateName)), loadBalancerName: \(Swift.String(describing: loadBalancerName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateLoadBalancerTlsCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAlternativeNames
        case certificateDomainName
        case certificateName
        case loadBalancerName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAlternativeNames = certificateAlternativeNames {
            var certificateAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificateAlternativeNames)
            for domainnamelist0 in certificateAlternativeNames {
                try certificateAlternativeNamesContainer.encode(domainnamelist0)
            }
        }
        if let certificateDomainName = certificateDomainName {
            try encodeContainer.encode(certificateDomainName, forKey: .certificateDomainName)
        }
        if let certificateName = certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateLoadBalancerTlsCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLoadBalancerTlsCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLoadBalancerTlsCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLoadBalancerTlsCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLoadBalancerTlsCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLoadBalancerTlsCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLoadBalancerTlsCertificateOutputError>
}

public struct CreateLoadBalancerTlsCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLoadBalancerTlsCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLoadBalancerTlsCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLoadBalancerTlsCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLoadBalancerTlsCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLoadBalancerTlsCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLoadBalancerTlsCertificateOutputError>
}

public struct CreateLoadBalancerTlsCertificateInput: Swift.Equatable {
    /// <p>An array of strings listing alternative domains and subdomains for your SSL/TLS
    ///       certificate. Lightsail will de-dupe the names for you. You can have a maximum of 9
    ///       alternative names (in addition to the 1 primary domain). We do not support wildcards (e.g.,
    ///         <code>*.example.com</code>).</p>
    public let certificateAlternativeNames: [Swift.String]?
    /// <p>The domain name (e.g., <code>example.com</code>) for your SSL/TLS certificate.</p>
    public let certificateDomainName: Swift.String?
    /// <p>The SSL/TLS certificate name.</p>
    ///          <p>You can have up to 10 certificates in your account at one time. Each Lightsail load
    ///       balancer can have up to 2 certificates associated with it at one time. There is also an
    ///       overall limit to the number of certificates that can be issue in a 365-day period. For more
    ///       information, see <a href="http://docs.aws.amazon.com/acm/latest/userguide/acm-limits.html">Limits</a>.</p>
    public let certificateName: Swift.String?
    /// <p>The load balancer name where you want to create the SSL/TLS certificate.</p>
    public let loadBalancerName: Swift.String?
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?

    public init (
        certificateAlternativeNames: [Swift.String]? = nil,
        certificateDomainName: Swift.String? = nil,
        certificateName: Swift.String? = nil,
        loadBalancerName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.certificateAlternativeNames = certificateAlternativeNames
        self.certificateDomainName = certificateDomainName
        self.certificateName = certificateName
        self.loadBalancerName = loadBalancerName
        self.tags = tags
    }
}

struct CreateLoadBalancerTlsCertificateInputBody: Swift.Equatable {
    public let loadBalancerName: Swift.String?
    public let certificateName: Swift.String?
    public let certificateDomainName: Swift.String?
    public let certificateAlternativeNames: [Swift.String]?
    public let tags: [LightsailClientTypes.Tag]?
}

extension CreateLoadBalancerTlsCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAlternativeNames
        case certificateDomainName
        case certificateName
        case loadBalancerName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let certificateDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateDomainName)
        certificateDomainName = certificateDomainNameDecoded
        let certificateAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .certificateAlternativeNames)
        var certificateAlternativeNamesDecoded0:[Swift.String]? = nil
        if let certificateAlternativeNamesContainer = certificateAlternativeNamesContainer {
            certificateAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in certificateAlternativeNamesContainer {
                if let string0 = string0 {
                    certificateAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        certificateAlternativeNames = certificateAlternativeNamesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLoadBalancerTlsCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLoadBalancerTlsCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLoadBalancerTlsCertificateOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLoadBalancerTlsCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLoadBalancerTlsCertificateOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension CreateLoadBalancerTlsCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateLoadBalancerTlsCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateLoadBalancerTlsCertificateOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateLoadBalancerTlsCertificateOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension CreateLoadBalancerTlsCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct CreateRelationalDatabaseFromSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRelationalDatabaseFromSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRelationalDatabaseFromSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRelationalDatabaseFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRelationalDatabaseFromSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRelationalDatabaseFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRelationalDatabaseFromSnapshotOutputError>
}

extension CreateRelationalDatabaseFromSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRelationalDatabaseFromSnapshotInput(availabilityZone: \(Swift.String(describing: availabilityZone)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), relationalDatabaseBundleId: \(Swift.String(describing: relationalDatabaseBundleId)), relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)), relationalDatabaseSnapshotName: \(Swift.String(describing: relationalDatabaseSnapshotName)), restoreTime: \(Swift.String(describing: restoreTime)), sourceRelationalDatabaseName: \(Swift.String(describing: sourceRelationalDatabaseName)), tags: \(Swift.String(describing: tags)), useLatestRestorableTime: \(Swift.String(describing: useLatestRestorableTime)))"}
}

extension CreateRelationalDatabaseFromSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case publiclyAccessible
        case relationalDatabaseBundleId
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
        case restoreTime
        case sourceRelationalDatabaseName
        case tags
        case useLatestRestorableTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let publiclyAccessible = publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let relationalDatabaseBundleId = relationalDatabaseBundleId {
            try encodeContainer.encode(relationalDatabaseBundleId, forKey: .relationalDatabaseBundleId)
        }
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let relationalDatabaseSnapshotName = relationalDatabaseSnapshotName {
            try encodeContainer.encode(relationalDatabaseSnapshotName, forKey: .relationalDatabaseSnapshotName)
        }
        if let restoreTime = restoreTime {
            try encodeContainer.encode(restoreTime.timeIntervalSince1970, forKey: .restoreTime)
        }
        if let sourceRelationalDatabaseName = sourceRelationalDatabaseName {
            try encodeContainer.encode(sourceRelationalDatabaseName, forKey: .sourceRelationalDatabaseName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let useLatestRestorableTime = useLatestRestorableTime {
            try encodeContainer.encode(useLatestRestorableTime, forKey: .useLatestRestorableTime)
        }
    }
}

public struct CreateRelationalDatabaseFromSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRelationalDatabaseFromSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRelationalDatabaseFromSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRelationalDatabaseFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRelationalDatabaseFromSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRelationalDatabaseFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRelationalDatabaseFromSnapshotOutputError>
}

public struct CreateRelationalDatabaseFromSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRelationalDatabaseFromSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRelationalDatabaseFromSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRelationalDatabaseFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRelationalDatabaseFromSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRelationalDatabaseFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRelationalDatabaseFromSnapshotOutputError>
}

public struct CreateRelationalDatabaseFromSnapshotInput: Swift.Equatable {
    /// <p>The Availability Zone in which to create your new database. Use the
    ///         <code>us-east-2a</code> case-sensitive format.</p>
    ///          <p>You can get a list of Availability Zones by using the <code>get regions</code> operation.
    ///       Be sure to add the <code>include relational database Availability Zones</code> parameter to
    ///       your request.</p>
    public let availabilityZone: Swift.String?
    /// <p>Specifies the accessibility options for your new database. A value of <code>true</code>
    ///       specifies a database that is available to resources outside of your Lightsail account. A
    ///       value of <code>false</code> specifies a database that is available only to your Lightsail
    ///       resources in the same region as your database.</p>
    public let publiclyAccessible: Swift.Bool?
    /// <p>The bundle ID for your new database. A bundle describes the performance specifications for
    ///       your database.</p>
    ///          <p>You can get a list of database bundle IDs by using the <code>get relational database
    ///         bundles</code> operation.</p>
    ///          <p>When creating a new database from a snapshot, you cannot choose a bundle that is smaller
    ///       than the bundle of the source database.</p>
    public let relationalDatabaseBundleId: Swift.String?
    /// <p>The name to use for your new Lightsail database resource.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p>
    ///             </li>
    ///             <li>
    ///                <p>The first and last character must be a letter or number.</p>
    ///             </li>
    ///          </ul>
    public let relationalDatabaseName: Swift.String?
    /// <p>The name of the database snapshot from which to create your new database.</p>
    public let relationalDatabaseSnapshotName: Swift.String?
    /// <p>The date and time to restore your database from.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must be before the latest restorable time for the database.</p>
    ///             </li>
    ///             <li>
    ///                <p>Cannot be specified if the <code>use latest restorable time</code> parameter is
    ///             <code>true</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in the Unix time format.</p>
    ///                <p>For example, if you wish to use a restore time of October 1, 2018, at 8 PM UTC, then
    ///           you input <code>1538424000</code> as the restore time.</p>
    ///             </li>
    ///          </ul>
    public let restoreTime: ClientRuntime.Date?
    /// <p>The name of the source database.</p>
    public let sourceRelationalDatabaseName: Swift.String?
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?
    /// <p>Specifies whether your database is restored from the latest backup time. A value of
    ///         <code>true</code> restores from the latest backup time. </p>
    ///          <p>Default: <code>false</code>
    ///          </p>
    ///          <p>Constraints: Cannot be specified if the <code>restore time</code> parameter is
    ///       provided.</p>
    public let useLatestRestorableTime: Swift.Bool?

    public init (
        availabilityZone: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        relationalDatabaseBundleId: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil,
        relationalDatabaseSnapshotName: Swift.String? = nil,
        restoreTime: ClientRuntime.Date? = nil,
        sourceRelationalDatabaseName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        useLatestRestorableTime: Swift.Bool? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.publiclyAccessible = publiclyAccessible
        self.relationalDatabaseBundleId = relationalDatabaseBundleId
        self.relationalDatabaseName = relationalDatabaseName
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
        self.restoreTime = restoreTime
        self.sourceRelationalDatabaseName = sourceRelationalDatabaseName
        self.tags = tags
        self.useLatestRestorableTime = useLatestRestorableTime
    }
}

struct CreateRelationalDatabaseFromSnapshotInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
    public let availabilityZone: Swift.String?
    public let publiclyAccessible: Swift.Bool?
    public let relationalDatabaseSnapshotName: Swift.String?
    public let relationalDatabaseBundleId: Swift.String?
    public let sourceRelationalDatabaseName: Swift.String?
    public let restoreTime: ClientRuntime.Date?
    public let useLatestRestorableTime: Swift.Bool?
    public let tags: [LightsailClientTypes.Tag]?
}

extension CreateRelationalDatabaseFromSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case publiclyAccessible
        case relationalDatabaseBundleId
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
        case restoreTime
        case sourceRelationalDatabaseName
        case tags
        case useLatestRestorableTime
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let relationalDatabaseSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseSnapshotName)
        relationalDatabaseSnapshotName = relationalDatabaseSnapshotNameDecoded
        let relationalDatabaseBundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseBundleId)
        relationalDatabaseBundleId = relationalDatabaseBundleIdDecoded
        let sourceRelationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceRelationalDatabaseName)
        sourceRelationalDatabaseName = sourceRelationalDatabaseNameDecoded
        let restoreTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .restoreTime)
        restoreTime = restoreTimeDecoded
        let useLatestRestorableTimeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useLatestRestorableTime)
        useLatestRestorableTime = useLatestRestorableTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateRelationalDatabaseFromSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRelationalDatabaseFromSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateRelationalDatabaseFromSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRelationalDatabaseFromSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRelationalDatabaseFromSnapshotOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension CreateRelationalDatabaseFromSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateRelationalDatabaseFromSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateRelationalDatabaseFromSnapshotOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateRelationalDatabaseFromSnapshotOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension CreateRelationalDatabaseFromSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct CreateRelationalDatabaseInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRelationalDatabaseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRelationalDatabaseOutputError>
}

extension CreateRelationalDatabaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRelationalDatabaseInput(availabilityZone: \(Swift.String(describing: availabilityZone)), masterDatabaseName: \(Swift.String(describing: masterDatabaseName)), masterUserPassword: \(Swift.String(describing: masterUserPassword)), masterUsername: \(Swift.String(describing: masterUsername)), preferredBackupWindow: \(Swift.String(describing: preferredBackupWindow)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), relationalDatabaseBlueprintId: \(Swift.String(describing: relationalDatabaseBlueprintId)), relationalDatabaseBundleId: \(Swift.String(describing: relationalDatabaseBundleId)), relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateRelationalDatabaseInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case masterDatabaseName
        case masterUserPassword
        case masterUsername
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseBlueprintId
        case relationalDatabaseBundleId
        case relationalDatabaseName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let masterDatabaseName = masterDatabaseName {
            try encodeContainer.encode(masterDatabaseName, forKey: .masterDatabaseName)
        }
        if let masterUserPassword = masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
        if let masterUsername = masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try encodeContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let publiclyAccessible = publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let relationalDatabaseBlueprintId = relationalDatabaseBlueprintId {
            try encodeContainer.encode(relationalDatabaseBlueprintId, forKey: .relationalDatabaseBlueprintId)
        }
        if let relationalDatabaseBundleId = relationalDatabaseBundleId {
            try encodeContainer.encode(relationalDatabaseBundleId, forKey: .relationalDatabaseBundleId)
        }
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateRelationalDatabaseInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRelationalDatabaseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRelationalDatabaseOutputError>
}

public struct CreateRelationalDatabaseInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRelationalDatabaseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRelationalDatabaseOutputError>
}

public struct CreateRelationalDatabaseInput: Swift.Equatable {
    /// <p>The Availability Zone in which to create your new database. Use the
    ///         <code>us-east-2a</code> case-sensitive format.</p>
    ///          <p>You can get a list of Availability Zones by using the <code>get regions</code> operation.
    ///       Be sure to add the <code>include relational database Availability Zones</code> parameter to
    ///       your request.</p>
    public let availabilityZone: Swift.String?
    /// <p>The meaning of this parameter differs according to the database engine you use.</p>
    ///          <p>
    ///             <b>MySQL</b>
    ///          </p>
    ///          <p>The name of the database to create when the Lightsail database resource is created. If
    ///       this parameter isn't specified, no database is created in the database resource.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must contain 1 to 64 letters or numbers.</p>
    ///             </li>
    ///             <li>
    ///                <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits
    ///           (0- 9).</p>
    ///             </li>
    ///             <li>
    ///                <p>Can't be a word reserved by the specified database engine.</p>
    ///                <p>For more information about reserved words in MySQL, see the Keywords and Reserved
    ///           Words articles for <a href="https://dev.mysql.com/doc/refman/5.6/en/keywords.html">MySQL 5.6</a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/keywords.html">MySQL 5.7</a>, and <a href="https://dev.mysql.com/doc/refman/8.0/en/keywords.html">MySQL 8.0</a>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>
    ///             <b>PostgreSQL</b>
    ///          </p>
    ///          <p>The name of the database to create when the Lightsail database resource is created. If
    ///       this parameter isn't specified, a database named <code>postgres</code> is created in the
    ///       database resource.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must contain 1 to 63 letters or numbers.</p>
    ///             </li>
    ///             <li>
    ///                <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits
    ///           (0- 9).</p>
    ///             </li>
    ///             <li>
    ///                <p>Can't be a word reserved by the specified database engine.</p>
    ///                <p>For more information about reserved words in PostgreSQL, see the SQL Key Words
    ///           articles for <a href="https://www.postgresql.org/docs/9.6/sql-keywords-appendix.html">PostgreSQL 9.6</a>, <a href="https://www.postgresql.org/docs/10/sql-keywords-appendix.html">PostgreSQL
    ///             10</a>, <a href="https://www.postgresql.org/docs/11/sql-keywords-appendix.html">PostgreSQL 11</a>, and <a href="https://www.postgresql.org/docs/12/sql-keywords-appendix.html">PostgreSQL
    ///             12</a>.</p>
    ///             </li>
    ///          </ul>
    public let masterDatabaseName: Swift.String?
    /// <p>The password for the master user. The password can include any printable ASCII character
    ///       except "/", """, or "@". It cannot contain spaces.</p>
    ///          <p>
    ///             <b>MySQL</b>
    ///          </p>
    ///          <p>Constraints: Must contain from 8 to 41 characters.</p>
    ///          <p>
    ///             <b>PostgreSQL</b>
    ///          </p>
    ///          <p>Constraints: Must contain from 8 to 128 characters.</p>
    public let masterUserPassword: Swift.String?
    /// <p>The name for the master user.</p>
    ///          <p>
    ///             <b>MySQL</b>
    ///          </p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Required for MySQL.</p>
    ///             </li>
    ///             <li>
    ///                <p>Must be 1 to 16 letters or numbers. Can contain underscores.</p>
    ///             </li>
    ///             <li>
    ///                <p>First character must be a letter.</p>
    ///             </li>
    ///             <li>
    ///                <p>Can't be a reserved word for the chosen database engine.</p>
    ///                <p>For more information about reserved words in MySQL 5.6 or 5.7, see the Keywords and
    ///           Reserved Words articles for <a href="https://dev.mysql.com/doc/refman/5.6/en/keywords.html">MySQL 5.6</a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/keywords.html">MySQL 5.7</a>, or <a href="https://dev.mysql.com/doc/refman/8.0/en/keywords.html">MySQL 8.0</a>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>
    ///             <b>PostgreSQL</b>
    ///          </p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Required for PostgreSQL.</p>
    ///             </li>
    ///             <li>
    ///                <p>Must be 1 to 63 letters or numbers. Can contain underscores.</p>
    ///             </li>
    ///             <li>
    ///                <p>First character must be a letter.</p>
    ///             </li>
    ///             <li>
    ///                <p>Can't be a reserved word for the chosen database engine.</p>
    ///                <p>For more information about reserved words in MySQL 5.6 or 5.7, see the Keywords and
    ///           Reserved Words articles for <a href="https://www.postgresql.org/docs/9.6/sql-keywords-appendix.html">PostgreSQL
    ///             9.6</a>, <a href="https://www.postgresql.org/docs/10/sql-keywords-appendix.html">PostgreSQL 10</a>, <a href="https://www.postgresql.org/docs/11/sql-keywords-appendix.html">PostgreSQL
    ///             11</a>, and <a href="https://www.postgresql.org/docs/12/sql-keywords-appendix.html">PostgreSQL
    ///             12</a>.</p>
    ///             </li>
    ///          </ul>
    public let masterUsername: Swift.String?
    /// <p>The daily time range during which automated backups are created for your new database if
    ///       automated backups are enabled.</p>
    ///          <p>The default is a 30-minute window selected at random from an 8-hour block of time for each
    ///       AWS Region. For more information about the preferred backup window time blocks for each
    ///       region, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Working With Backups</a> guide in the Amazon Relational Database Service (Amazon RDS) documentation.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must be in the <code>hh24:mi-hh24:mi</code> format.</p>
    ///                <p>Example: <code>16:00-16:30</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Must not conflict with the preferred maintenance window.</p>
    ///             </li>
    ///             <li>
    ///                <p>Must be at least 30 minutes.</p>
    ///             </li>
    ///          </ul>
    public let preferredBackupWindow: Swift.String?
    /// <p>The weekly time range during which system maintenance can occur on your new
    ///       database.</p>
    ///          <p>The default is a 30-minute window selected at random from an 8-hour block of time for each
    ///       AWS Region, occurring on a random day of the week.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.</p>
    ///             </li>
    ///             <li>
    ///                <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    ///             </li>
    ///             <li>
    ///                <p>Must be at least 30 minutes.</p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Example: <code>Tue:17:00-Tue:17:30</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let preferredMaintenanceWindow: Swift.String?
    /// <p>Specifies the accessibility options for your new database. A value of <code>true</code>
    ///       specifies a database that is available to resources outside of your Lightsail account. A
    ///       value of <code>false</code> specifies a database that is available only to your Lightsail
    ///       resources in the same region as your database.</p>
    public let publiclyAccessible: Swift.Bool?
    /// <p>The blueprint ID for your new database. A blueprint describes the major engine version of
    ///       a database.</p>
    ///          <p>You can get a list of database blueprints IDs by using the <code>get relational database
    ///         blueprints</code> operation.</p>
    public let relationalDatabaseBlueprintId: Swift.String?
    /// <p>The bundle ID for your new database. A bundle describes the performance specifications for
    ///       your database.</p>
    ///          <p>You can get a list of database bundle IDs by using the <code>get relational database
    ///         bundles</code> operation.</p>
    public let relationalDatabaseBundleId: Swift.String?
    /// <p>The name to use for your new Lightsail database resource.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p>
    ///             </li>
    ///             <li>
    ///                <p>The first and last character must be a letter or number.</p>
    ///             </li>
    ///          </ul>
    public let relationalDatabaseName: Swift.String?
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?

    public init (
        availabilityZone: Swift.String? = nil,
        masterDatabaseName: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        relationalDatabaseBlueprintId: Swift.String? = nil,
        relationalDatabaseBundleId: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.masterDatabaseName = masterDatabaseName
        self.masterUserPassword = masterUserPassword
        self.masterUsername = masterUsername
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.relationalDatabaseBlueprintId = relationalDatabaseBlueprintId
        self.relationalDatabaseBundleId = relationalDatabaseBundleId
        self.relationalDatabaseName = relationalDatabaseName
        self.tags = tags
    }
}

struct CreateRelationalDatabaseInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
    public let availabilityZone: Swift.String?
    public let relationalDatabaseBlueprintId: Swift.String?
    public let relationalDatabaseBundleId: Swift.String?
    public let masterDatabaseName: Swift.String?
    public let masterUsername: Swift.String?
    public let masterUserPassword: Swift.String?
    public let preferredBackupWindow: Swift.String?
    public let preferredMaintenanceWindow: Swift.String?
    public let publiclyAccessible: Swift.Bool?
    public let tags: [LightsailClientTypes.Tag]?
}

extension CreateRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case masterDatabaseName
        case masterUserPassword
        case masterUsername
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseBlueprintId
        case relationalDatabaseBundleId
        case relationalDatabaseName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let relationalDatabaseBlueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseBlueprintId)
        relationalDatabaseBlueprintId = relationalDatabaseBlueprintIdDecoded
        let relationalDatabaseBundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseBundleId)
        relationalDatabaseBundleId = relationalDatabaseBundleIdDecoded
        let masterDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterDatabaseName)
        masterDatabaseName = masterDatabaseNameDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateRelationalDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRelationalDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateRelationalDatabaseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRelationalDatabaseOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRelationalDatabaseOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension CreateRelationalDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateRelationalDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateRelationalDatabaseOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateRelationalDatabaseOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension CreateRelationalDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct CreateRelationalDatabaseSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRelationalDatabaseSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRelationalDatabaseSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRelationalDatabaseSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRelationalDatabaseSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRelationalDatabaseSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRelationalDatabaseSnapshotOutputError>
}

extension CreateRelationalDatabaseSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRelationalDatabaseSnapshotInput(relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)), relationalDatabaseSnapshotName: \(Swift.String(describing: relationalDatabaseSnapshotName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateRelationalDatabaseSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let relationalDatabaseSnapshotName = relationalDatabaseSnapshotName {
            try encodeContainer.encode(relationalDatabaseSnapshotName, forKey: .relationalDatabaseSnapshotName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateRelationalDatabaseSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRelationalDatabaseSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRelationalDatabaseSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRelationalDatabaseSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRelationalDatabaseSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRelationalDatabaseSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRelationalDatabaseSnapshotOutputError>
}

public struct CreateRelationalDatabaseSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRelationalDatabaseSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRelationalDatabaseSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRelationalDatabaseSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRelationalDatabaseSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRelationalDatabaseSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRelationalDatabaseSnapshotOutputError>
}

public struct CreateRelationalDatabaseSnapshotInput: Swift.Equatable {
    /// <p>The name of the database on which to base your new snapshot.</p>
    public let relationalDatabaseName: Swift.String?
    /// <p>The name for your new database snapshot.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p>
    ///             </li>
    ///             <li>
    ///                <p>The first and last character must be a letter or number.</p>
    ///             </li>
    ///          </ul>
    public let relationalDatabaseSnapshotName: Swift.String?
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [LightsailClientTypes.Tag]?

    public init (
        relationalDatabaseName: Swift.String? = nil,
        relationalDatabaseSnapshotName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
        self.tags = tags
    }
}

struct CreateRelationalDatabaseSnapshotInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
    public let relationalDatabaseSnapshotName: Swift.String?
    public let tags: [LightsailClientTypes.Tag]?
}

extension CreateRelationalDatabaseSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let relationalDatabaseSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseSnapshotName)
        relationalDatabaseSnapshotName = relationalDatabaseSnapshotNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateRelationalDatabaseSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRelationalDatabaseSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateRelationalDatabaseSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRelationalDatabaseSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRelationalDatabaseSnapshotOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension CreateRelationalDatabaseSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateRelationalDatabaseSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct CreateRelationalDatabaseSnapshotOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct CreateRelationalDatabaseSnapshotOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension CreateRelationalDatabaseSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DeleteAlarmInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAlarmInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAlarmOutputError>
}

extension DeleteAlarmInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAlarmInput(alarmName: \(Swift.String(describing: alarmName)))"}
}

extension DeleteAlarmInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmName = alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
    }
}

public struct DeleteAlarmInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAlarmInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAlarmOutputError>
}

public struct DeleteAlarmInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAlarmInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAlarmOutputError>
}

public struct DeleteAlarmInput: Swift.Equatable {
    /// <p>The name of the alarm to delete.</p>
    public let alarmName: Swift.String?

    public init (
        alarmName: Swift.String? = nil
    )
    {
        self.alarmName = alarmName
    }
}

struct DeleteAlarmInputBody: Swift.Equatable {
    public let alarmName: Swift.String?
}

extension DeleteAlarmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
    }
}

extension DeleteAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAlarmOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAlarmOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAlarmOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DeleteAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteAlarmOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteAlarmOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteAlarmOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DeleteAlarmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DeleteAutoSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAutoSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAutoSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAutoSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAutoSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAutoSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAutoSnapshotOutputError>
}

extension DeleteAutoSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAutoSnapshotInput(date: \(Swift.String(describing: date)), resourceName: \(Swift.String(describing: resourceName)))"}
}

extension DeleteAutoSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case date
        case resourceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let date = date {
            try encodeContainer.encode(date, forKey: .date)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
    }
}

public struct DeleteAutoSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAutoSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAutoSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAutoSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAutoSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAutoSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAutoSnapshotOutputError>
}

public struct DeleteAutoSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAutoSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAutoSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAutoSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAutoSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAutoSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAutoSnapshotOutputError>
}

public struct DeleteAutoSnapshotInput: Swift.Equatable {
    /// <p>The date of the automatic snapshot to delete in <code>YYYY-MM-DD</code> format. Use the
    ///         <code>get auto snapshots</code> operation to get the available automatic snapshots for a
    ///       resource.</p>
    public let date: Swift.String?
    /// <p>The name of the source instance or disk from which to delete the automatic
    ///       snapshot.</p>
    public let resourceName: Swift.String?

    public init (
        date: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.date = date
        self.resourceName = resourceName
    }
}

struct DeleteAutoSnapshotInputBody: Swift.Equatable {
    public let resourceName: Swift.String?
    public let date: Swift.String?
}

extension DeleteAutoSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case date
        case resourceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let dateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .date)
        date = dateDecoded
    }
}

extension DeleteAutoSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAutoSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAutoSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAutoSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAutoSnapshotOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DeleteAutoSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteAutoSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteAutoSnapshotOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteAutoSnapshotOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DeleteAutoSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DeleteCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCertificateOutputError>
}

extension DeleteCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCertificateInput(certificateName: \(Swift.String(describing: certificateName)))"}
}

extension DeleteCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateName = certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
    }
}

public struct DeleteCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCertificateOutputError>
}

public struct DeleteCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCertificateOutputError>
}

public struct DeleteCertificateInput: Swift.Equatable {
    /// <p>The name of the certificate to delete.</p>
    ///          <p>Use the <code>GetCertificates</code> action to get a list of certificate names that you
    ///       can specify.</p>
    public let certificateName: Swift.String?

    public init (
        certificateName: Swift.String? = nil
    )
    {
        self.certificateName = certificateName
    }
}

struct DeleteCertificateInputBody: Swift.Equatable {
    public let certificateName: Swift.String?
}

extension DeleteCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
    }
}

extension DeleteCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCertificateOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCertificateOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DeleteCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteCertificateOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteCertificateOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DeleteCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DeleteContactMethodInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContactMethodInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContactMethodInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContactMethodOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContactMethodInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContactMethodOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContactMethodOutputError>
}

extension DeleteContactMethodInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteContactMethodInput(protocol: \(Swift.String(describing: `protocol`)))"}
}

extension DeleteContactMethodInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `protocol` = "protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
    }
}

public struct DeleteContactMethodInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContactMethodInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContactMethodInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContactMethodOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContactMethodInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContactMethodOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContactMethodOutputError>
}

public struct DeleteContactMethodInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContactMethodInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContactMethodInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContactMethodOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContactMethodInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContactMethodOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContactMethodOutputError>
}

public struct DeleteContactMethodInput: Swift.Equatable {
    /// <p>The protocol that will be deleted, such as <code>Email</code> or <code>SMS</code> (text
    ///       messaging).</p>
    ///          <note>
    ///             <p>To delete an <code>Email</code> and an <code>SMS</code> contact method if you added
    ///         both, you must run separate <code>DeleteContactMethod</code> actions to delete each
    ///         protocol.</p>
    ///          </note>
    public let `protocol`: LightsailClientTypes.ContactProtocol?

    public init (
        `protocol`: LightsailClientTypes.ContactProtocol? = nil
    )
    {
        self.`protocol` = `protocol`
    }
}

struct DeleteContactMethodInputBody: Swift.Equatable {
    public let `protocol`: LightsailClientTypes.ContactProtocol?
}

extension DeleteContactMethodInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `protocol` = "protocol"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContactProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}

extension DeleteContactMethodOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteContactMethodOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteContactMethodOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteContactMethodOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteContactMethodOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DeleteContactMethodOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteContactMethodOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteContactMethodOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteContactMethodOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DeleteContactMethodOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension DeleteContainerImageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteContainerImageInput(image: \(Swift.String(describing: image)), serviceName: \(Swift.String(describing: serviceName)))"}
}

extension DeleteContainerImageInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteContainerImageInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContainerImageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContainerImageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContainerImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContainerImageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContainerImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContainerImageOutputError>
}

public struct DeleteContainerImageInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContainerImageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContainerImageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContainerImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContainerImageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContainerImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContainerImageOutputError>
}

public struct DeleteContainerImageInput: Swift.Equatable {
    /// <p>The name of the container image to delete from the container service.</p>
    ///
    ///          <p>Use the <code>GetContainerImages</code> action to get the name of the container images
    ///       that are registered to a container service.</p>
    ///
    ///          <note>
    ///             <p>Container images sourced from your Lightsail container service, that are registered
    ///         and stored on your service, start with a colon (<code>:</code>). For example,
    ///           <code>:container-service-1.mystaticwebsite.1</code>. Container images sourced from a
    ///         public registry like Docker Hub don't start with a colon. For example,
    ///           <code>nginx:latest</code> or <code>nginx</code>.</p>
    ///          </note>
    public let image: Swift.String?
    /// <p>The name of the container service for which to delete a registered container image.</p>
    public let serviceName: Swift.String?

    public init (
        image: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.image = image
        self.serviceName = serviceName
    }
}

struct DeleteContainerImageInputBody: Swift.Equatable {
}

extension DeleteContainerImageInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteContainerImageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteContainerImageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteContainerImageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteContainerImageOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteContainerImageOutputResponse()"}
}

extension DeleteContainerImageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteContainerImageOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteContainerImageOutputResponseBody: Swift.Equatable {
}

extension DeleteContainerImageOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteContainerServiceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteContainerServiceInput(serviceName: \(Swift.String(describing: serviceName)))"}
}

extension DeleteContainerServiceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteContainerServiceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContainerServiceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContainerServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContainerServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContainerServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContainerServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContainerServiceOutputError>
}

public struct DeleteContainerServiceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteContainerServiceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteContainerServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteContainerServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteContainerServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteContainerServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteContainerServiceOutputError>
}

public struct DeleteContainerServiceInput: Swift.Equatable {
    /// <p>The name of the container service to delete.</p>
    public let serviceName: Swift.String?

    public init (
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

struct DeleteContainerServiceInputBody: Swift.Equatable {
}

extension DeleteContainerServiceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteContainerServiceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteContainerServiceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteContainerServiceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteContainerServiceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteContainerServiceOutputResponse()"}
}

extension DeleteContainerServiceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteContainerServiceOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteContainerServiceOutputResponseBody: Swift.Equatable {
}

extension DeleteContainerServiceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteDiskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDiskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDiskOutputError>
}

extension DeleteDiskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDiskInput(diskName: \(Swift.String(describing: diskName)), forceDeleteAddOns: \(Swift.String(describing: forceDeleteAddOns)))"}
}

extension DeleteDiskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
        case forceDeleteAddOns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskName = diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
        if let forceDeleteAddOns = forceDeleteAddOns {
            try encodeContainer.encode(forceDeleteAddOns, forKey: .forceDeleteAddOns)
        }
    }
}

public struct DeleteDiskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDiskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDiskOutputError>
}

public struct DeleteDiskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDiskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDiskOutputError>
}

public struct DeleteDiskInput: Swift.Equatable {
    /// <p>The unique name of the disk you want to delete (e.g., <code>my-disk</code>).</p>
    public let diskName: Swift.String?
    /// <p>A Boolean value to indicate whether to delete the enabled add-ons for the disk.</p>
    public let forceDeleteAddOns: Swift.Bool?

    public init (
        diskName: Swift.String? = nil,
        forceDeleteAddOns: Swift.Bool? = nil
    )
    {
        self.diskName = diskName
        self.forceDeleteAddOns = forceDeleteAddOns
    }
}

struct DeleteDiskInputBody: Swift.Equatable {
    public let diskName: Swift.String?
    public let forceDeleteAddOns: Swift.Bool?
}

extension DeleteDiskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
        case forceDeleteAddOns
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
        let forceDeleteAddOnsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceDeleteAddOns)
        forceDeleteAddOns = forceDeleteAddOnsDecoded
    }
}

extension DeleteDiskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDiskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDiskOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDiskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDiskOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DeleteDiskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteDiskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteDiskOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteDiskOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DeleteDiskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DeleteDiskSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDiskSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDiskSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDiskSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDiskSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDiskSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDiskSnapshotOutputError>
}

extension DeleteDiskSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDiskSnapshotInput(diskSnapshotName: \(Swift.String(describing: diskSnapshotName)))"}
}

extension DeleteDiskSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskSnapshotName = diskSnapshotName {
            try encodeContainer.encode(diskSnapshotName, forKey: .diskSnapshotName)
        }
    }
}

public struct DeleteDiskSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDiskSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDiskSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDiskSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDiskSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDiskSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDiskSnapshotOutputError>
}

public struct DeleteDiskSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDiskSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDiskSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDiskSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDiskSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDiskSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDiskSnapshotOutputError>
}

public struct DeleteDiskSnapshotInput: Swift.Equatable {
    /// <p>The name of the disk snapshot you want to delete (e.g.,
    ///       <code>my-disk-snapshot</code>).</p>
    public let diskSnapshotName: Swift.String?

    public init (
        diskSnapshotName: Swift.String? = nil
    )
    {
        self.diskSnapshotName = diskSnapshotName
    }
}

struct DeleteDiskSnapshotInputBody: Swift.Equatable {
    public let diskSnapshotName: Swift.String?
}

extension DeleteDiskSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskSnapshotName)
        diskSnapshotName = diskSnapshotNameDecoded
    }
}

extension DeleteDiskSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDiskSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDiskSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDiskSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDiskSnapshotOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DeleteDiskSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteDiskSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteDiskSnapshotOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteDiskSnapshotOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DeleteDiskSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DeleteDistributionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDistributionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDistributionOutputError>
}

extension DeleteDistributionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDistributionInput(distributionName: \(Swift.String(describing: distributionName)))"}
}

extension DeleteDistributionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributionName = distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
    }
}

public struct DeleteDistributionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDistributionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDistributionOutputError>
}

public struct DeleteDistributionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDistributionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDistributionOutputError>
}

public struct DeleteDistributionInput: Swift.Equatable {
    /// <p>The name of the distribution to delete.</p>
    ///          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    ///       can specify.</p>
    public let distributionName: Swift.String?

    public init (
        distributionName: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
    }
}

struct DeleteDistributionInputBody: Swift.Equatable {
    public let distributionName: Swift.String?
}

extension DeleteDistributionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
    }
}

extension DeleteDistributionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDistributionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDistributionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDistributionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDistributionOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension DeleteDistributionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteDistributionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct DeleteDistributionOutputResponse: Swift.Equatable {
    /// <p>An object that describes the result of the action, such as the status of the request, the
    ///       timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct DeleteDistributionOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension DeleteDistributionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

public struct DeleteDomainEntryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDomainEntryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDomainEntryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDomainEntryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDomainEntryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDomainEntryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDomainEntryOutputError>
}

extension DeleteDomainEntryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDomainEntryInput(domainEntry: \(Swift.String(describing: domainEntry)), domainName: \(Swift.String(describing: domainName)))"}
}

extension DeleteDomainEntryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainEntry
        case domainName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainEntry = domainEntry {
            try encodeContainer.encode(domainEntry, forKey: .domainEntry)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

public struct DeleteDomainEntryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDomainEntryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDomainEntryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDomainEntryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDomainEntryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDomainEntryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDomainEntryOutputError>
}

public struct DeleteDomainEntryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDomainEntryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDomainEntryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDomainEntryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDomainEntryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDomainEntryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDomainEntryOutputError>
}

public struct DeleteDomainEntryInput: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about your domain entries.</p>
    public let domainEntry: LightsailClientTypes.DomainEntry?
    /// <p>The name of the domain entry to delete.</p>
    public let domainName: Swift.String?

    public init (
        domainEntry: LightsailClientTypes.DomainEntry? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.domainEntry = domainEntry
        self.domainName = domainName
    }
}

struct DeleteDomainEntryInputBody: Swift.Equatable {
    public let domainName: Swift.String?
    public let domainEntry: LightsailClientTypes.DomainEntry?
}

extension DeleteDomainEntryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainEntry
        case domainName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let domainEntryDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DomainEntry.self, forKey: .domainEntry)
        domainEntry = domainEntryDecoded
    }
}

extension DeleteDomainEntryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDomainEntryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDomainEntryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDomainEntryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDomainEntryOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension DeleteDomainEntryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteDomainEntryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct DeleteDomainEntryOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct DeleteDomainEntryOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension DeleteDomainEntryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

public struct DeleteDomainInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDomainInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDomainOutputError>
}

extension DeleteDomainInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDomainInput(domainName: \(Swift.String(describing: domainName)))"}
}

extension DeleteDomainInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

public struct DeleteDomainInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDomainInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDomainOutputError>
}

public struct DeleteDomainInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDomainInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDomainOutputError>
}

public struct DeleteDomainInput: Swift.Equatable {
    /// <p>The specific domain name to delete.</p>
    public let domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct DeleteDomainInputBody: Swift.Equatable {
    public let domainName: Swift.String?
}

extension DeleteDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
    }
}

extension DeleteDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDomainOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDomainOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDomainOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension DeleteDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct DeleteDomainOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct DeleteDomainOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension DeleteDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

public struct DeleteInstanceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInstanceOutputError>
}

extension DeleteInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInstanceInput(forceDeleteAddOns: \(Swift.String(describing: forceDeleteAddOns)), instanceName: \(Swift.String(describing: instanceName)))"}
}

extension DeleteInstanceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case forceDeleteAddOns
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let forceDeleteAddOns = forceDeleteAddOns {
            try encodeContainer.encode(forceDeleteAddOns, forKey: .forceDeleteAddOns)
        }
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

public struct DeleteInstanceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInstanceOutputError>
}

public struct DeleteInstanceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInstanceOutputError>
}

public struct DeleteInstanceInput: Swift.Equatable {
    /// <p>A Boolean value to indicate whether to delete the enabled add-ons for the disk.</p>
    public let forceDeleteAddOns: Swift.Bool?
    /// <p>The name of the instance to delete.</p>
    public let instanceName: Swift.String?

    public init (
        forceDeleteAddOns: Swift.Bool? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.forceDeleteAddOns = forceDeleteAddOns
        self.instanceName = instanceName
    }
}

struct DeleteInstanceInputBody: Swift.Equatable {
    public let instanceName: Swift.String?
    public let forceDeleteAddOns: Swift.Bool?
}

extension DeleteInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case forceDeleteAddOns
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let forceDeleteAddOnsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceDeleteAddOns)
        forceDeleteAddOns = forceDeleteAddOnsDecoded
    }
}

extension DeleteInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteInstanceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInstanceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInstanceOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DeleteInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteInstanceOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteInstanceOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DeleteInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DeleteInstanceSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInstanceSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInstanceSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInstanceSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInstanceSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInstanceSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInstanceSnapshotOutputError>
}

extension DeleteInstanceSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInstanceSnapshotInput(instanceSnapshotName: \(Swift.String(describing: instanceSnapshotName)))"}
}

extension DeleteInstanceSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceSnapshotName = instanceSnapshotName {
            try encodeContainer.encode(instanceSnapshotName, forKey: .instanceSnapshotName)
        }
    }
}

public struct DeleteInstanceSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInstanceSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInstanceSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInstanceSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInstanceSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInstanceSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInstanceSnapshotOutputError>
}

public struct DeleteInstanceSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInstanceSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInstanceSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInstanceSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInstanceSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInstanceSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInstanceSnapshotOutputError>
}

public struct DeleteInstanceSnapshotInput: Swift.Equatable {
    /// <p>The name of the snapshot to delete.</p>
    public let instanceSnapshotName: Swift.String?

    public init (
        instanceSnapshotName: Swift.String? = nil
    )
    {
        self.instanceSnapshotName = instanceSnapshotName
    }
}

struct DeleteInstanceSnapshotInputBody: Swift.Equatable {
    public let instanceSnapshotName: Swift.String?
}

extension DeleteInstanceSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceSnapshotName)
        instanceSnapshotName = instanceSnapshotNameDecoded
    }
}

extension DeleteInstanceSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInstanceSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteInstanceSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInstanceSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInstanceSnapshotOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DeleteInstanceSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteInstanceSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteInstanceSnapshotOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteInstanceSnapshotOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DeleteInstanceSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DeleteKeyPairInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteKeyPairInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteKeyPairInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteKeyPairInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteKeyPairOutputError>
}

extension DeleteKeyPairInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteKeyPairInput(keyPairName: \(Swift.String(describing: keyPairName)))"}
}

extension DeleteKeyPairInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyPairName = keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
    }
}

public struct DeleteKeyPairInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteKeyPairInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteKeyPairInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteKeyPairInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteKeyPairOutputError>
}

public struct DeleteKeyPairInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteKeyPairInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteKeyPairInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteKeyPairInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteKeyPairOutputError>
}

public struct DeleteKeyPairInput: Swift.Equatable {
    /// <p>The name of the key pair to delete.</p>
    public let keyPairName: Swift.String?

    public init (
        keyPairName: Swift.String? = nil
    )
    {
        self.keyPairName = keyPairName
    }
}

struct DeleteKeyPairInputBody: Swift.Equatable {
    public let keyPairName: Swift.String?
}

extension DeleteKeyPairInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
    }
}

extension DeleteKeyPairOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteKeyPairOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteKeyPairOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteKeyPairOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteKeyPairOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension DeleteKeyPairOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteKeyPairOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct DeleteKeyPairOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct DeleteKeyPairOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension DeleteKeyPairOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

public struct DeleteKnownHostKeysInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteKnownHostKeysInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteKnownHostKeysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteKnownHostKeysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteKnownHostKeysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteKnownHostKeysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteKnownHostKeysOutputError>
}

extension DeleteKnownHostKeysInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteKnownHostKeysInput(instanceName: \(Swift.String(describing: instanceName)))"}
}

extension DeleteKnownHostKeysInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

public struct DeleteKnownHostKeysInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteKnownHostKeysInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteKnownHostKeysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteKnownHostKeysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteKnownHostKeysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteKnownHostKeysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteKnownHostKeysOutputError>
}

public struct DeleteKnownHostKeysInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteKnownHostKeysInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteKnownHostKeysInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteKnownHostKeysOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteKnownHostKeysInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteKnownHostKeysOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteKnownHostKeysOutputError>
}

public struct DeleteKnownHostKeysInput: Swift.Equatable {
    /// <p>The name of the instance for which you want to reset the host key or certificate.</p>
    public let instanceName: Swift.String?

    public init (
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct DeleteKnownHostKeysInputBody: Swift.Equatable {
    public let instanceName: Swift.String?
}

extension DeleteKnownHostKeysInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension DeleteKnownHostKeysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteKnownHostKeysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteKnownHostKeysOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteKnownHostKeysOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteKnownHostKeysOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DeleteKnownHostKeysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteKnownHostKeysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteKnownHostKeysOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteKnownHostKeysOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DeleteKnownHostKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DeleteLoadBalancerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLoadBalancerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLoadBalancerOutputError>
}

extension DeleteLoadBalancerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLoadBalancerInput(loadBalancerName: \(Swift.String(describing: loadBalancerName)))"}
}

extension DeleteLoadBalancerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

public struct DeleteLoadBalancerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLoadBalancerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLoadBalancerOutputError>
}

public struct DeleteLoadBalancerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLoadBalancerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLoadBalancerOutputError>
}

public struct DeleteLoadBalancerInput: Swift.Equatable {
    /// <p>The name of the load balancer you want to delete.</p>
    public let loadBalancerName: Swift.String?

    public init (
        loadBalancerName: Swift.String? = nil
    )
    {
        self.loadBalancerName = loadBalancerName
    }
}

struct DeleteLoadBalancerInputBody: Swift.Equatable {
    public let loadBalancerName: Swift.String?
}

extension DeleteLoadBalancerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
    }
}

extension DeleteLoadBalancerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLoadBalancerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLoadBalancerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLoadBalancerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLoadBalancerOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DeleteLoadBalancerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteLoadBalancerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteLoadBalancerOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteLoadBalancerOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DeleteLoadBalancerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DeleteLoadBalancerTlsCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLoadBalancerTlsCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLoadBalancerTlsCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLoadBalancerTlsCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLoadBalancerTlsCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLoadBalancerTlsCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLoadBalancerTlsCertificateOutputError>
}

extension DeleteLoadBalancerTlsCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLoadBalancerTlsCertificateInput(certificateName: \(Swift.String(describing: certificateName)), force: \(Swift.String(describing: force)), loadBalancerName: \(Swift.String(describing: loadBalancerName)))"}
}

extension DeleteLoadBalancerTlsCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case force
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateName = certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let force = force {
            try encodeContainer.encode(force, forKey: .force)
        }
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

public struct DeleteLoadBalancerTlsCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLoadBalancerTlsCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLoadBalancerTlsCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLoadBalancerTlsCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLoadBalancerTlsCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLoadBalancerTlsCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLoadBalancerTlsCertificateOutputError>
}

public struct DeleteLoadBalancerTlsCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLoadBalancerTlsCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLoadBalancerTlsCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLoadBalancerTlsCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLoadBalancerTlsCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLoadBalancerTlsCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLoadBalancerTlsCertificateOutputError>
}

public struct DeleteLoadBalancerTlsCertificateInput: Swift.Equatable {
    /// <p>The SSL/TLS certificate name.</p>
    public let certificateName: Swift.String?
    /// <p>When <code>true</code>, forces the deletion of an SSL/TLS certificate.</p>
    ///          <p>There can be two certificates associated with a Lightsail load balancer: the primary and
    ///       the backup. The <code>force</code> parameter is required when the primary SSL/TLS certificate
    ///       is in use by an instance attached to the load balancer.</p>
    public let force: Swift.Bool?
    /// <p>The load balancer name.</p>
    public let loadBalancerName: Swift.String?

    public init (
        certificateName: Swift.String? = nil,
        force: Swift.Bool? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.certificateName = certificateName
        self.force = force
        self.loadBalancerName = loadBalancerName
    }
}

struct DeleteLoadBalancerTlsCertificateInputBody: Swift.Equatable {
    public let loadBalancerName: Swift.String?
    public let certificateName: Swift.String?
    public let force: Swift.Bool?
}

extension DeleteLoadBalancerTlsCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case force
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let forceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .force)
        force = forceDecoded
    }
}

extension DeleteLoadBalancerTlsCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLoadBalancerTlsCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLoadBalancerTlsCertificateOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLoadBalancerTlsCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLoadBalancerTlsCertificateOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DeleteLoadBalancerTlsCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteLoadBalancerTlsCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteLoadBalancerTlsCertificateOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteLoadBalancerTlsCertificateOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DeleteLoadBalancerTlsCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DeleteRelationalDatabaseInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRelationalDatabaseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRelationalDatabaseOutputError>
}

extension DeleteRelationalDatabaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRelationalDatabaseInput(finalRelationalDatabaseSnapshotName: \(Swift.String(describing: finalRelationalDatabaseSnapshotName)), relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)), skipFinalSnapshot: \(Swift.String(describing: skipFinalSnapshot)))"}
}

extension DeleteRelationalDatabaseInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case finalRelationalDatabaseSnapshotName
        case relationalDatabaseName
        case skipFinalSnapshot
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let finalRelationalDatabaseSnapshotName = finalRelationalDatabaseSnapshotName {
            try encodeContainer.encode(finalRelationalDatabaseSnapshotName, forKey: .finalRelationalDatabaseSnapshotName)
        }
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let skipFinalSnapshot = skipFinalSnapshot {
            try encodeContainer.encode(skipFinalSnapshot, forKey: .skipFinalSnapshot)
        }
    }
}

public struct DeleteRelationalDatabaseInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRelationalDatabaseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRelationalDatabaseOutputError>
}

public struct DeleteRelationalDatabaseInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRelationalDatabaseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRelationalDatabaseOutputError>
}

public struct DeleteRelationalDatabaseInput: Swift.Equatable {
    /// <p>The name of the database snapshot created if <code>skip final snapshot</code> is
    ///         <code>false</code>, which is the default value for that parameter.</p>
    ///          <note>
    ///             <p>Specifying this parameter and also specifying the <code>skip final snapshot</code>
    ///         parameter to <code>true</code> results in an error.</p>
    ///          </note>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p>
    ///             </li>
    ///             <li>
    ///                <p>The first and last character must be a letter or number.</p>
    ///             </li>
    ///          </ul>
    public let finalRelationalDatabaseSnapshotName: Swift.String?
    /// <p>The name of the database that you are deleting.</p>
    public let relationalDatabaseName: Swift.String?
    /// <p>Determines whether a final database snapshot is created before your database is deleted.
    ///       If <code>true</code> is specified, no database snapshot is created. If <code>false</code> is
    ///       specified, a database snapshot is created before your database is deleted.</p>
    ///          <p>You must specify the <code>final relational database snapshot name</code> parameter if the
    ///         <code>skip final snapshot</code> parameter is <code>false</code>.</p>
    ///          <p>Default: <code>false</code>
    ///          </p>
    public let skipFinalSnapshot: Swift.Bool?

    public init (
        finalRelationalDatabaseSnapshotName: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil,
        skipFinalSnapshot: Swift.Bool? = nil
    )
    {
        self.finalRelationalDatabaseSnapshotName = finalRelationalDatabaseSnapshotName
        self.relationalDatabaseName = relationalDatabaseName
        self.skipFinalSnapshot = skipFinalSnapshot
    }
}

struct DeleteRelationalDatabaseInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
    public let skipFinalSnapshot: Swift.Bool?
    public let finalRelationalDatabaseSnapshotName: Swift.String?
}

extension DeleteRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case finalRelationalDatabaseSnapshotName
        case relationalDatabaseName
        case skipFinalSnapshot
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let skipFinalSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .skipFinalSnapshot)
        skipFinalSnapshot = skipFinalSnapshotDecoded
        let finalRelationalDatabaseSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .finalRelationalDatabaseSnapshotName)
        finalRelationalDatabaseSnapshotName = finalRelationalDatabaseSnapshotNameDecoded
    }
}

extension DeleteRelationalDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRelationalDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRelationalDatabaseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRelationalDatabaseOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRelationalDatabaseOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DeleteRelationalDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteRelationalDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteRelationalDatabaseOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteRelationalDatabaseOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DeleteRelationalDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DeleteRelationalDatabaseSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRelationalDatabaseSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRelationalDatabaseSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRelationalDatabaseSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRelationalDatabaseSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRelationalDatabaseSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRelationalDatabaseSnapshotOutputError>
}

extension DeleteRelationalDatabaseSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRelationalDatabaseSnapshotInput(relationalDatabaseSnapshotName: \(Swift.String(describing: relationalDatabaseSnapshotName)))"}
}

extension DeleteRelationalDatabaseSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseSnapshotName = relationalDatabaseSnapshotName {
            try encodeContainer.encode(relationalDatabaseSnapshotName, forKey: .relationalDatabaseSnapshotName)
        }
    }
}

public struct DeleteRelationalDatabaseSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRelationalDatabaseSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRelationalDatabaseSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRelationalDatabaseSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRelationalDatabaseSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRelationalDatabaseSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRelationalDatabaseSnapshotOutputError>
}

public struct DeleteRelationalDatabaseSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRelationalDatabaseSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRelationalDatabaseSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRelationalDatabaseSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRelationalDatabaseSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRelationalDatabaseSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRelationalDatabaseSnapshotOutputError>
}

public struct DeleteRelationalDatabaseSnapshotInput: Swift.Equatable {
    /// <p>The name of the database snapshot that you are deleting.</p>
    public let relationalDatabaseSnapshotName: Swift.String?

    public init (
        relationalDatabaseSnapshotName: Swift.String? = nil
    )
    {
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
    }
}

struct DeleteRelationalDatabaseSnapshotInputBody: Swift.Equatable {
    public let relationalDatabaseSnapshotName: Swift.String?
}

extension DeleteRelationalDatabaseSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseSnapshotName)
        relationalDatabaseSnapshotName = relationalDatabaseSnapshotNameDecoded
    }
}

extension DeleteRelationalDatabaseSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRelationalDatabaseSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRelationalDatabaseSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRelationalDatabaseSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRelationalDatabaseSnapshotOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DeleteRelationalDatabaseSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteRelationalDatabaseSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DeleteRelationalDatabaseSnapshotOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DeleteRelationalDatabaseSnapshotOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DeleteRelationalDatabaseSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes.DestinationInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case service
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let service = service {
            try encodeContainer.encode(service, forKey: .service)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let serviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .service)
        service = serviceDecoded
    }
}

extension LightsailClientTypes.DestinationInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DestinationInfo(id: \(Swift.String(describing: id)), service: \(Swift.String(describing: service)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the destination of a record.</p>
    public struct DestinationInfo: Swift.Equatable {
        /// <p>The ID of the resource created at the destination.</p>
        public let id: Swift.String?
        /// <p>The destination service of the record.</p>
        public let service: Swift.String?

        public init (
            id: Swift.String? = nil,
            service: Swift.String? = nil
        )
        {
            self.id = id
            self.service = service
        }
    }

}

public struct DetachCertificateFromDistributionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachCertificateFromDistributionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachCertificateFromDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachCertificateFromDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachCertificateFromDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachCertificateFromDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachCertificateFromDistributionOutputError>
}

extension DetachCertificateFromDistributionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachCertificateFromDistributionInput(distributionName: \(Swift.String(describing: distributionName)))"}
}

extension DetachCertificateFromDistributionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributionName = distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
    }
}

public struct DetachCertificateFromDistributionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachCertificateFromDistributionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachCertificateFromDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachCertificateFromDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachCertificateFromDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachCertificateFromDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachCertificateFromDistributionOutputError>
}

public struct DetachCertificateFromDistributionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachCertificateFromDistributionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachCertificateFromDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachCertificateFromDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachCertificateFromDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachCertificateFromDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachCertificateFromDistributionOutputError>
}

public struct DetachCertificateFromDistributionInput: Swift.Equatable {
    /// <p>The name of the distribution from which to detach the certificate.</p>
    ///          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    ///       can specify.</p>
    public let distributionName: Swift.String?

    public init (
        distributionName: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
    }
}

struct DetachCertificateFromDistributionInputBody: Swift.Equatable {
    public let distributionName: Swift.String?
}

extension DetachCertificateFromDistributionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
    }
}

extension DetachCertificateFromDistributionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetachCertificateFromDistributionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachCertificateFromDistributionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachCertificateFromDistributionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachCertificateFromDistributionOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension DetachCertificateFromDistributionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DetachCertificateFromDistributionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct DetachCertificateFromDistributionOutputResponse: Swift.Equatable {
    /// <p>An object that describes the result of the action, such as the status of the request, the
    ///       timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct DetachCertificateFromDistributionOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension DetachCertificateFromDistributionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

public struct DetachDiskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachDiskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachDiskOutputError>
}

extension DetachDiskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachDiskInput(diskName: \(Swift.String(describing: diskName)))"}
}

extension DetachDiskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskName = diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
    }
}

public struct DetachDiskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachDiskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachDiskOutputError>
}

public struct DetachDiskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachDiskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachDiskOutputError>
}

public struct DetachDiskInput: Swift.Equatable {
    /// <p>The unique name of the disk you want to detach from your instance (e.g.,
    ///         <code>my-disk</code>).</p>
    public let diskName: Swift.String?

    public init (
        diskName: Swift.String? = nil
    )
    {
        self.diskName = diskName
    }
}

struct DetachDiskInputBody: Swift.Equatable {
    public let diskName: Swift.String?
}

extension DetachDiskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
    }
}

extension DetachDiskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetachDiskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachDiskOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachDiskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachDiskOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DetachDiskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DetachDiskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DetachDiskOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DetachDiskOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DetachDiskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DetachInstancesFromLoadBalancerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachInstancesFromLoadBalancerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachInstancesFromLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachInstancesFromLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachInstancesFromLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachInstancesFromLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachInstancesFromLoadBalancerOutputError>
}

extension DetachInstancesFromLoadBalancerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachInstancesFromLoadBalancerInput(instanceNames: \(Swift.String(describing: instanceNames)), loadBalancerName: \(Swift.String(describing: loadBalancerName)))"}
}

extension DetachInstancesFromLoadBalancerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for resourcenamelist0 in instanceNames {
                try instanceNamesContainer.encode(resourcenamelist0)
            }
        }
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

public struct DetachInstancesFromLoadBalancerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachInstancesFromLoadBalancerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachInstancesFromLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachInstancesFromLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachInstancesFromLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachInstancesFromLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachInstancesFromLoadBalancerOutputError>
}

public struct DetachInstancesFromLoadBalancerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachInstancesFromLoadBalancerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachInstancesFromLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachInstancesFromLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachInstancesFromLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachInstancesFromLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachInstancesFromLoadBalancerOutputError>
}

public struct DetachInstancesFromLoadBalancerInput: Swift.Equatable {
    /// <p>An array of strings containing the names of the instances you want to detach from the load
    ///       balancer.</p>
    public let instanceNames: [Swift.String]?
    /// <p>The name of the Lightsail load balancer.</p>
    public let loadBalancerName: Swift.String?

    public init (
        instanceNames: [Swift.String]? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.instanceNames = instanceNames
        self.loadBalancerName = loadBalancerName
    }
}

struct DetachInstancesFromLoadBalancerInputBody: Swift.Equatable {
    public let loadBalancerName: Swift.String?
    public let instanceNames: [Swift.String]?
}

extension DetachInstancesFromLoadBalancerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let instanceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[Swift.String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [Swift.String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
    }
}

extension DetachInstancesFromLoadBalancerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetachInstancesFromLoadBalancerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachInstancesFromLoadBalancerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachInstancesFromLoadBalancerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachInstancesFromLoadBalancerOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DetachInstancesFromLoadBalancerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DetachInstancesFromLoadBalancerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DetachInstancesFromLoadBalancerOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DetachInstancesFromLoadBalancerOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DetachInstancesFromLoadBalancerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DetachStaticIpInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachStaticIpInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachStaticIpOutputError>
}

extension DetachStaticIpInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachStaticIpInput(staticIpName: \(Swift.String(describing: staticIpName)))"}
}

extension DetachStaticIpInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let staticIpName = staticIpName {
            try encodeContainer.encode(staticIpName, forKey: .staticIpName)
        }
    }
}

public struct DetachStaticIpInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachStaticIpInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachStaticIpOutputError>
}

public struct DetachStaticIpInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachStaticIpInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachStaticIpOutputError>
}

public struct DetachStaticIpInput: Swift.Equatable {
    /// <p>The name of the static IP to detach from the instance.</p>
    public let staticIpName: Swift.String?

    public init (
        staticIpName: Swift.String? = nil
    )
    {
        self.staticIpName = staticIpName
    }
}

struct DetachStaticIpInputBody: Swift.Equatable {
    public let staticIpName: Swift.String?
}

extension DetachStaticIpInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticIpNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .staticIpName)
        staticIpName = staticIpNameDecoded
    }
}

extension DetachStaticIpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetachStaticIpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachStaticIpOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachStaticIpOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachStaticIpOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DetachStaticIpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DetachStaticIpOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DetachStaticIpOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DetachStaticIpOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DetachStaticIpOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct DisableAddOnInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableAddOnInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableAddOnInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableAddOnOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableAddOnInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableAddOnOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableAddOnOutputError>
}

extension DisableAddOnInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableAddOnInput(addOnType: \(Swift.String(describing: addOnType)), resourceName: \(Swift.String(describing: resourceName)))"}
}

extension DisableAddOnInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOnType
        case resourceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOnType = addOnType {
            try encodeContainer.encode(addOnType.rawValue, forKey: .addOnType)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
    }
}

public struct DisableAddOnInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableAddOnInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableAddOnInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableAddOnOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableAddOnInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableAddOnOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableAddOnOutputError>
}

public struct DisableAddOnInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableAddOnInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableAddOnInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableAddOnOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableAddOnInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableAddOnOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableAddOnOutputError>
}

public struct DisableAddOnInput: Swift.Equatable {
    /// <p>The add-on type to disable.</p>
    public let addOnType: LightsailClientTypes.AddOnType?
    /// <p>The name of the source resource for which to disable the add-on.</p>
    public let resourceName: Swift.String?

    public init (
        addOnType: LightsailClientTypes.AddOnType? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.addOnType = addOnType
        self.resourceName = resourceName
    }
}

struct DisableAddOnInputBody: Swift.Equatable {
    public let addOnType: LightsailClientTypes.AddOnType?
    public let resourceName: Swift.String?
}

extension DisableAddOnInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOnType
        case resourceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addOnTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AddOnType.self, forKey: .addOnType)
        addOnType = addOnTypeDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
    }
}

extension DisableAddOnOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableAddOnOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableAddOnOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableAddOnOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableAddOnOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension DisableAddOnOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DisableAddOnOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct DisableAddOnOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct DisableAddOnOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension DisableAddOnOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes.Disk: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case arn
        case attachedTo
        case attachmentState
        case createdAt
        case gbInUse
        case iops
        case isAttached
        case isSystemDisk
        case location
        case name
        case path
        case resourceType
        case sizeInGb
        case state
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addonlist0 in addOns {
                try addOnsContainer.encode(addonlist0)
            }
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let attachedTo = attachedTo {
            try encodeContainer.encode(attachedTo, forKey: .attachedTo)
        }
        if let attachmentState = attachmentState {
            try encodeContainer.encode(attachmentState, forKey: .attachmentState)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let gbInUse = gbInUse {
            try encodeContainer.encode(gbInUse, forKey: .gbInUse)
        }
        if let iops = iops {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let isAttached = isAttached {
            try encodeContainer.encode(isAttached, forKey: .isAttached)
        }
        if let isSystemDisk = isSystemDisk {
            try encodeContainer.encode(isSystemDisk, forKey: .isSystemDisk)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sizeInGb = sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOn?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOn]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOn]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let isSystemDiskDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isSystemDisk)
        isSystemDisk = isSystemDiskDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DiskState.self, forKey: .state)
        state = stateDecoded
        let attachedToDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachedTo)
        attachedTo = attachedToDecoded
        let isAttachedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isAttached)
        isAttached = isAttachedDecoded
        let attachmentStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachmentState)
        attachmentState = attachmentStateDecoded
        let gbInUseDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gbInUse)
        gbInUse = gbInUseDecoded
    }
}

extension LightsailClientTypes.Disk: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Disk(addOns: \(Swift.String(describing: addOns)), arn: \(Swift.String(describing: arn)), attachedTo: \(Swift.String(describing: attachedTo)), attachmentState: \(Swift.String(describing: attachmentState)), createdAt: \(Swift.String(describing: createdAt)), gbInUse: \(Swift.String(describing: gbInUse)), iops: \(Swift.String(describing: iops)), isAttached: \(Swift.String(describing: isAttached)), isSystemDisk: \(Swift.String(describing: isSystemDisk)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), path: \(Swift.String(describing: path)), resourceType: \(Swift.String(describing: resourceType)), sizeInGb: \(Swift.String(describing: sizeInGb)), state: \(Swift.String(describing: state)), supportCode: \(Swift.String(describing: supportCode)), tags: \(Swift.String(describing: tags)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a system disk or a block storage disk.</p>
    public struct Disk: Swift.Equatable {
        /// <p>An array of objects representing the add-ons enabled on the disk.</p>
        public let addOns: [LightsailClientTypes.AddOn]?
        /// <p>The Amazon Resource Name (ARN) of the disk.</p>
        public let arn: Swift.String?
        /// <p>The resources to which the disk is attached.</p>
        public let attachedTo: Swift.String?
        /// <p>(Deprecated) The attachment state of the disk.</p>
        ///          <note>
        ///             <p>In releases prior to November 14, 2017, this parameter returned <code>attached</code>
        ///         for system disks in the API response. It is now deprecated, but still included in the
        ///         response. Use <code>isAttached</code> instead.</p>
        ///          </note>
        @available(*, deprecated)
        public let attachmentState: Swift.String?
        /// <p>The date when the disk was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>(Deprecated) The number of GB in use by the disk.</p>
        ///          <note>
        ///             <p>In releases prior to November 14, 2017, this parameter was not included in the API
        ///         response. It is now deprecated.</p>
        ///          </note>
        @available(*, deprecated)
        public let gbInUse: Swift.Int?
        /// <p>The input/output operations per second (IOPS) of the disk.</p>
        public let iops: Swift.Int?
        /// <p>A Boolean value indicating whether the disk is attached.</p>
        public let isAttached: Swift.Bool?
        /// <p>A Boolean value indicating whether this disk is a system disk (has an operating system
        ///       loaded on it).</p>
        public let isSystemDisk: Swift.Bool?
        /// <p>The AWS Region and Availability Zone where the disk is located.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The unique name of the disk.</p>
        public let name: Swift.String?
        /// <p>The disk path.</p>
        public let path: Swift.String?
        /// <p>The Lightsail resource type (e.g., <code>Disk</code>).</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The size of the disk in GB.</p>
        public let sizeInGb: Swift.Int?
        /// <p>Describes the status of the disk.</p>
        public let state: LightsailClientTypes.DiskState?
        /// <p>The support code. Include this code in your email to support when you have questions about
        ///       an instance or another resource in Lightsail. This code enables our support team to look up
        ///       your Lightsail information more easily.</p>
        public let supportCode: Swift.String?
        /// <p>The tag keys and optional values for the resource. For more information about tags in
        ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
        ///         Dev Guide</a>.</p>
        public let tags: [LightsailClientTypes.Tag]?

        public init (
            addOns: [LightsailClientTypes.AddOn]? = nil,
            arn: Swift.String? = nil,
            attachedTo: Swift.String? = nil,
            attachmentState: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            gbInUse: Swift.Int? = nil,
            iops: Swift.Int? = nil,
            isAttached: Swift.Bool? = nil,
            isSystemDisk: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            path: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sizeInGb: Swift.Int? = nil,
            state: LightsailClientTypes.DiskState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.addOns = addOns
            self.arn = arn
            self.attachedTo = attachedTo
            self.attachmentState = attachmentState
            self.createdAt = createdAt
            self.gbInUse = gbInUse
            self.iops = iops
            self.isAttached = isAttached
            self.isSystemDisk = isSystemDisk
            self.location = location
            self.name = name
            self.path = path
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.DiskInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isSystemDisk
        case name
        case path
        case sizeInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let isSystemDisk = isSystemDisk {
            try encodeContainer.encode(isSystemDisk, forKey: .isSystemDisk)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let sizeInGb = sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let isSystemDiskDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isSystemDisk)
        isSystemDisk = isSystemDiskDecoded
    }
}

extension LightsailClientTypes.DiskInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DiskInfo(isSystemDisk: \(Swift.String(describing: isSystemDisk)), name: \(Swift.String(describing: name)), path: \(Swift.String(describing: path)), sizeInGb: \(Swift.String(describing: sizeInGb)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a disk.</p>
    public struct DiskInfo: Swift.Equatable {
        /// <p>A Boolean value indicating whether this disk is a system disk (has an operating system
        ///       loaded on it).</p>
        public let isSystemDisk: Swift.Bool?
        /// <p>The disk name.</p>
        public let name: Swift.String?
        /// <p>The disk path.</p>
        public let path: Swift.String?
        /// <p>The size of the disk in GB (e.g., <code>32</code>).</p>
        public let sizeInGb: Swift.Int?

        public init (
            isSystemDisk: Swift.Bool? = nil,
            name: Swift.String? = nil,
            path: Swift.String? = nil,
            sizeInGb: Swift.Int? = nil
        )
        {
            self.isSystemDisk = isSystemDisk
            self.name = name
            self.path = path
            self.sizeInGb = sizeInGb
        }
    }

}

extension LightsailClientTypes.DiskMap: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case newDiskName
        case originalDiskPath
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let newDiskName = newDiskName {
            try encodeContainer.encode(newDiskName, forKey: .newDiskName)
        }
        if let originalDiskPath = originalDiskPath {
            try encodeContainer.encode(originalDiskPath, forKey: .originalDiskPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let originalDiskPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originalDiskPath)
        originalDiskPath = originalDiskPathDecoded
        let newDiskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newDiskName)
        newDiskName = newDiskNameDecoded
    }
}

extension LightsailClientTypes.DiskMap: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DiskMap(newDiskName: \(Swift.String(describing: newDiskName)), originalDiskPath: \(Swift.String(describing: originalDiskPath)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a block storage disk mapping.</p>
    public struct DiskMap: Swift.Equatable {
        /// <p>The new disk name (e.g., <code>my-new-disk</code>).</p>
        public let newDiskName: Swift.String?
        /// <p>The original disk path exposed to the instance (for example,
        ///       <code>/dev/sdh</code>).</p>
        public let originalDiskPath: Swift.String?

        public init (
            newDiskName: Swift.String? = nil,
            originalDiskPath: Swift.String? = nil
        )
        {
            self.newDiskName = newDiskName
            self.originalDiskPath = originalDiskPath
        }
    }

}

extension LightsailClientTypes.DiskSnapshot: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case fromDiskArn
        case fromDiskName
        case fromInstanceArn
        case fromInstanceName
        case isFromAutoSnapshot
        case location
        case name
        case progress
        case resourceType
        case sizeInGb
        case state
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let fromDiskArn = fromDiskArn {
            try encodeContainer.encode(fromDiskArn, forKey: .fromDiskArn)
        }
        if let fromDiskName = fromDiskName {
            try encodeContainer.encode(fromDiskName, forKey: .fromDiskName)
        }
        if let fromInstanceArn = fromInstanceArn {
            try encodeContainer.encode(fromInstanceArn, forKey: .fromInstanceArn)
        }
        if let fromInstanceName = fromInstanceName {
            try encodeContainer.encode(fromInstanceName, forKey: .fromInstanceName)
        }
        if let isFromAutoSnapshot = isFromAutoSnapshot {
            try encodeContainer.encode(isFromAutoSnapshot, forKey: .isFromAutoSnapshot)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let progress = progress {
            try encodeContainer.encode(progress, forKey: .progress)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sizeInGb = sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DiskSnapshotState.self, forKey: .state)
        state = stateDecoded
        let progressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .progress)
        progress = progressDecoded
        let fromDiskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromDiskName)
        fromDiskName = fromDiskNameDecoded
        let fromDiskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromDiskArn)
        fromDiskArn = fromDiskArnDecoded
        let fromInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromInstanceName)
        fromInstanceName = fromInstanceNameDecoded
        let fromInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromInstanceArn)
        fromInstanceArn = fromInstanceArnDecoded
        let isFromAutoSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isFromAutoSnapshot)
        isFromAutoSnapshot = isFromAutoSnapshotDecoded
    }
}

extension LightsailClientTypes.DiskSnapshot: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DiskSnapshot(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), fromDiskArn: \(Swift.String(describing: fromDiskArn)), fromDiskName: \(Swift.String(describing: fromDiskName)), fromInstanceArn: \(Swift.String(describing: fromInstanceArn)), fromInstanceName: \(Swift.String(describing: fromInstanceName)), isFromAutoSnapshot: \(Swift.String(describing: isFromAutoSnapshot)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), progress: \(Swift.String(describing: progress)), resourceType: \(Swift.String(describing: resourceType)), sizeInGb: \(Swift.String(describing: sizeInGb)), state: \(Swift.String(describing: state)), supportCode: \(Swift.String(describing: supportCode)), tags: \(Swift.String(describing: tags)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a block storage disk snapshot.</p>
    public struct DiskSnapshot: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the disk snapshot.</p>
        public let arn: Swift.String?
        /// <p>The date when the disk snapshot was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The Amazon Resource Name (ARN) of the source disk from which the disk snapshot was
        ///       created.</p>
        public let fromDiskArn: Swift.String?
        /// <p>The unique name of the source disk from which the disk snapshot was created.</p>
        public let fromDiskName: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the source instance from which the disk (system volume)
        ///       snapshot was created.</p>
        public let fromInstanceArn: Swift.String?
        /// <p>The unique name of the source instance from which the disk (system volume) snapshot was
        ///       created.</p>
        public let fromInstanceName: Swift.String?
        /// <p>A Boolean value indicating whether the snapshot was created from an automatic
        ///       snapshot.</p>
        public let isFromAutoSnapshot: Swift.Bool?
        /// <p>The AWS Region and Availability Zone where the disk snapshot was created.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The name of the disk snapshot (e.g., <code>my-disk-snapshot</code>).</p>
        public let name: Swift.String?
        /// <p>The progress of the snapshot.</p>
        public let progress: Swift.String?
        /// <p>The Lightsail resource type (e.g., <code>DiskSnapshot</code>).</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The size of the disk in GB.</p>
        public let sizeInGb: Swift.Int?
        /// <p>The status of the disk snapshot operation.</p>
        public let state: LightsailClientTypes.DiskSnapshotState?
        /// <p>The support code. Include this code in your email to support when you have questions about
        ///       an instance or another resource in Lightsail. This code enables our support team to look up
        ///       your Lightsail information more easily.</p>
        public let supportCode: Swift.String?
        /// <p>The tag keys and optional values for the resource. For more information about tags in
        ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
        ///         Dev Guide</a>.</p>
        public let tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            fromDiskArn: Swift.String? = nil,
            fromDiskName: Swift.String? = nil,
            fromInstanceArn: Swift.String? = nil,
            fromInstanceName: Swift.String? = nil,
            isFromAutoSnapshot: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            progress: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sizeInGb: Swift.Int? = nil,
            state: LightsailClientTypes.DiskSnapshotState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.fromDiskArn = fromDiskArn
            self.fromDiskName = fromDiskName
            self.fromInstanceArn = fromInstanceArn
            self.fromInstanceName = fromInstanceName
            self.isFromAutoSnapshot = isFromAutoSnapshot
            self.location = location
            self.name = name
            self.progress = progress
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.DiskSnapshotInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sizeInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sizeInGb = sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
    }
}

extension LightsailClientTypes.DiskSnapshotInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DiskSnapshotInfo(sizeInGb: \(Swift.String(describing: sizeInGb)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a disk snapshot.</p>
    public struct DiskSnapshotInfo: Swift.Equatable {
        /// <p>The size of the disk in GB (e.g., <code>32</code>).</p>
        public let sizeInGb: Swift.Int?

        public init (
            sizeInGb: Swift.Int? = nil
        )
        {
            self.sizeInGb = sizeInGb
        }
    }

}

extension LightsailClientTypes {
    public enum DiskSnapshotState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case error
        case pending
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [DiskSnapshotState] {
            return [
                .completed,
                .error,
                .pending,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "completed"
            case .error: return "error"
            case .pending: return "pending"
            case .unknown: return "unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DiskSnapshotState(rawValue: rawValue) ?? DiskSnapshotState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum DiskState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case error
        case inuse
        case pending
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [DiskState] {
            return [
                .available,
                .error,
                .inuse,
                .pending,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .error: return "error"
            case .inuse: return "in-use"
            case .pending: return "pending"
            case .unknown: return "unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DiskState(rawValue: rawValue) ?? DiskState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.DistributionBundle: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case isActive
        case name
        case price
        case transferPerMonthInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let isActive = isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let price = price {
            try encodeContainer.encode(price, forKey: .price)
        }
        if let transferPerMonthInGb = transferPerMonthInGb {
            try encodeContainer.encode(transferPerMonthInGb, forKey: .transferPerMonthInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let priceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .price)
        price = priceDecoded
        let transferPerMonthInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transferPerMonthInGb)
        transferPerMonthInGb = transferPerMonthInGbDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
    }
}

extension LightsailClientTypes.DistributionBundle: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DistributionBundle(bundleId: \(Swift.String(describing: bundleId)), isActive: \(Swift.String(describing: isActive)), name: \(Swift.String(describing: name)), price: \(Swift.String(describing: price)), transferPerMonthInGb: \(Swift.String(describing: transferPerMonthInGb)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the specifications of a distribution bundle.</p>
    public struct DistributionBundle: Swift.Equatable {
        /// <p>The ID of the bundle.</p>
        public let bundleId: Swift.String?
        /// <p>Indicates whether the bundle is active, and can be specified for a new
        ///       distribution.</p>
        public let isActive: Swift.Bool?
        /// <p>The name of the distribution bundle.</p>
        public let name: Swift.String?
        /// <p>The monthly price, in US dollars, of the bundle.</p>
        public let price: Swift.Float?
        /// <p>The monthly network transfer quota of the bundle.</p>
        public let transferPerMonthInGb: Swift.Int?

        public init (
            bundleId: Swift.String? = nil,
            isActive: Swift.Bool? = nil,
            name: Swift.String? = nil,
            price: Swift.Float? = nil,
            transferPerMonthInGb: Swift.Int? = nil
        )
        {
            self.bundleId = bundleId
            self.isActive = isActive
            self.name = name
            self.price = price
            self.transferPerMonthInGb = transferPerMonthInGb
        }
    }

}

extension LightsailClientTypes {
    public enum DistributionMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bytesdownloaded
        case bytesuploaded
        case http4xxerrorrate
        case http5xxerrorrate
        case requests
        case totalerrorrate
        case sdkUnknown(Swift.String)

        public static var allCases: [DistributionMetricName] {
            return [
                .bytesdownloaded,
                .bytesuploaded,
                .http4xxerrorrate,
                .http5xxerrorrate,
                .requests,
                .totalerrorrate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bytesdownloaded: return "BytesDownloaded"
            case .bytesuploaded: return "BytesUploaded"
            case .http4xxerrorrate: return "Http4xxErrorRate"
            case .http5xxerrorrate: return "Http5xxErrorRate"
            case .requests: return "Requests"
            case .totalerrorrate: return "TotalErrorRate"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DistributionMetricName(rawValue: rawValue) ?? DistributionMetricName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.Domain: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case domainEntries
        case location
        case name
        case resourceType
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let domainEntries = domainEntries {
            var domainEntriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainEntries)
            for domainentrylist0 in domainEntries {
                try domainEntriesContainer.encode(domainentrylist0)
            }
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let domainEntriesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.DomainEntry?].self, forKey: .domainEntries)
        var domainEntriesDecoded0:[LightsailClientTypes.DomainEntry]? = nil
        if let domainEntriesContainer = domainEntriesContainer {
            domainEntriesDecoded0 = [LightsailClientTypes.DomainEntry]()
            for structure0 in domainEntriesContainer {
                if let structure0 = structure0 {
                    domainEntriesDecoded0?.append(structure0)
                }
            }
        }
        domainEntries = domainEntriesDecoded0
    }
}

extension LightsailClientTypes.Domain: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Domain(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), domainEntries: \(Swift.String(describing: domainEntries)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), resourceType: \(Swift.String(describing: resourceType)), supportCode: \(Swift.String(describing: supportCode)), tags: \(Swift.String(describing: tags)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a domain where you are storing recordsets in Lightsail.</p>
    public struct Domain: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the domain recordset (e.g.,
        ///         <code>arn:aws:lightsail:global:123456789101:Domain/824cede0-abc7-4f84-8dbc-12345EXAMPLE</code>).</p>
        public let arn: Swift.String?
        /// <p>The date when the domain recordset was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>An array of key-value pairs containing information about the domain entries.</p>
        public let domainEntries: [LightsailClientTypes.DomainEntry]?
        /// <p>The AWS Region and Availability Zones where the domain recordset was created.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The name of the domain.</p>
        public let name: Swift.String?
        /// <p>The resource type. </p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The support code. Include this code in your email to support when you have questions about
        ///       an instance or another resource in Lightsail. This code enables our support team to look up
        ///       your Lightsail information more easily.</p>
        public let supportCode: Swift.String?
        /// <p>The tag keys and optional values for the resource. For more information about tags in
        ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
        ///         Dev Guide</a>.</p>
        public let tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            domainEntries: [LightsailClientTypes.DomainEntry]? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.domainEntries = domainEntries
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.DomainEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case isAlias
        case name
        case options
        case target
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isAlias = isAlias {
            try encodeContainer.encode(isAlias, forKey: .isAlias)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let options = options {
            var optionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .options)
            for (dictKey0, domainentryoptions0) in options {
                try optionsContainer.encode(domainentryoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let targetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .target)
        target = targetDecoded
        let isAliasDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isAlias)
        isAlias = isAliasDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let optionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .options)
        var optionsDecoded0: [Swift.String:Swift.String]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in optionsContainer {
                if let string0 = string0 {
                    optionsDecoded0?[key0] = string0
                }
            }
        }
        options = optionsDecoded0
    }
}

extension LightsailClientTypes.DomainEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainEntry(id: \(Swift.String(describing: id)), isAlias: \(Swift.String(describing: isAlias)), name: \(Swift.String(describing: name)), options: \(Swift.String(describing: options)), target: \(Swift.String(describing: target)), type: \(Swift.String(describing: type)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a domain recordset entry.</p>
    public struct DomainEntry: Swift.Equatable {
        /// <p>The ID of the domain recordset entry.</p>
        public let id: Swift.String?
        /// <p>When <code>true</code>, specifies whether the domain entry is an alias used by the
        ///       Lightsail load balancer. You can include an alias (A type) record in your request, which
        ///       points to a load balancer DNS name and routes traffic to your load balancer.</p>
        public let isAlias: Swift.Bool?
        /// <p>The name of the domain.</p>
        public let name: Swift.String?
        /// <p>(Deprecated) The options for the domain entry.</p>
        ///          <note>
        ///             <p>In releases prior to November 29, 2017, this parameter was not included in the API
        ///         response. It is now deprecated.</p>
        ///          </note>
        @available(*, deprecated)
        public let options: [Swift.String:Swift.String]?
        /// <p>The target IP address (e.g., <code>192.0.2.0</code>), or AWS name server (e.g.,
        ///         <code>ns-111.awsdns-22.com.</code>).</p>
        ///          <p>For Lightsail load balancers, the value looks like
        ///         <code>ab1234c56789c6b86aba6fb203d443bc-123456789.us-east-2.elb.amazonaws.com</code>. For
        ///       Lightsail distributions, the value looks like <code>exampled1182ne.cloudfront.net</code>.
        ///       For Lightsail container services, the value looks like
        ///         <code>container-service-1.example23scljs.us-west-2.cs.amazonlightsail.com</code>. Be sure to
        ///       also set <code>isAlias</code> to <code>true</code> when setting up an A record for a
        ///       Lightsail load balancer, distribution, or container service.</p>
        public let target: Swift.String?
        /// <p>The type of domain entry, such as address for IPv4 (A), address for IPv6 (AAAA), canonical
        ///       name (CNAME), mail exchanger (MX), name server (NS), start of authority (SOA), service locator
        ///       (SRV), or text (TXT).</p>
        ///          <p>The following domain entry types can be used:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>A</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>AAAA</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>CNAME</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>MX</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NS</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SOA</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SRV</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>TXT</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let type: Swift.String?

        public init (
            id: Swift.String? = nil,
            isAlias: Swift.Bool? = nil,
            name: Swift.String? = nil,
            options: [Swift.String:Swift.String]? = nil,
            target: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.id = id
            self.isAlias = isAlias
            self.name = name
            self.options = options
            self.target = target
            self.type = type
        }
    }

}

extension LightsailClientTypes.DomainValidationRecord: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
        case resourceRecord
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let resourceRecord = resourceRecord {
            try encodeContainer.encode(resourceRecord, forKey: .resourceRecord)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let resourceRecordDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceRecord.self, forKey: .resourceRecord)
        resourceRecord = resourceRecordDecoded
    }
}

extension LightsailClientTypes.DomainValidationRecord: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainValidationRecord(domainName: \(Swift.String(describing: domainName)), resourceRecord: \(Swift.String(describing: resourceRecord)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the domain validation records of an Amazon Lightsail SSL/TLS certificate.</p>
    public struct DomainValidationRecord: Swift.Equatable {
        /// <p>The domain name of the certificate validation record. For example,
        ///         <code>example.com</code> or <code>www.example.com</code>.</p>
        public let domainName: Swift.String?
        /// <p>An object that describes the DNS records to add to your domain's DNS to validate it for
        ///       the certificate.</p>
        public let resourceRecord: LightsailClientTypes.ResourceRecord?

        public init (
            domainName: Swift.String? = nil,
            resourceRecord: LightsailClientTypes.ResourceRecord? = nil
        )
        {
            self.domainName = domainName
            self.resourceRecord = resourceRecord
        }
    }

}

extension DownloadDefaultKeyPairInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DownloadDefaultKeyPairInput()"}
}

extension DownloadDefaultKeyPairInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DownloadDefaultKeyPairInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DownloadDefaultKeyPairInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DownloadDefaultKeyPairInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DownloadDefaultKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DownloadDefaultKeyPairInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DownloadDefaultKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DownloadDefaultKeyPairOutputError>
}

public struct DownloadDefaultKeyPairInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DownloadDefaultKeyPairInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DownloadDefaultKeyPairInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DownloadDefaultKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DownloadDefaultKeyPairInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DownloadDefaultKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DownloadDefaultKeyPairOutputError>
}

public struct DownloadDefaultKeyPairInput: Swift.Equatable {

    public init() {}
}

struct DownloadDefaultKeyPairInputBody: Swift.Equatable {
}

extension DownloadDefaultKeyPairInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DownloadDefaultKeyPairOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DownloadDefaultKeyPairOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DownloadDefaultKeyPairOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DownloadDefaultKeyPairOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DownloadDefaultKeyPairOutputResponse(privateKeyBase64: \(Swift.String(describing: privateKeyBase64)), publicKeyBase64: \(Swift.String(describing: publicKeyBase64)))"}
}

extension DownloadDefaultKeyPairOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DownloadDefaultKeyPairOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.privateKeyBase64 = output.privateKeyBase64
            self.publicKeyBase64 = output.publicKeyBase64
        } else {
            self.privateKeyBase64 = nil
            self.publicKeyBase64 = nil
        }
    }
}

public struct DownloadDefaultKeyPairOutputResponse: Swift.Equatable {
    /// <p>A base64-encoded RSA private key.</p>
    public let privateKeyBase64: Swift.String?
    /// <p>A base64-encoded public key of the <code>ssh-rsa</code> type.</p>
    public let publicKeyBase64: Swift.String?

    public init (
        privateKeyBase64: Swift.String? = nil,
        publicKeyBase64: Swift.String? = nil
    )
    {
        self.privateKeyBase64 = privateKeyBase64
        self.publicKeyBase64 = publicKeyBase64
    }
}

struct DownloadDefaultKeyPairOutputResponseBody: Swift.Equatable {
    public let publicKeyBase64: Swift.String?
    public let privateKeyBase64: Swift.String?
}

extension DownloadDefaultKeyPairOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case privateKeyBase64
        case publicKeyBase64
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publicKeyBase64Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKeyBase64)
        publicKeyBase64 = publicKeyBase64Decoded
        let privateKeyBase64Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKeyBase64)
        privateKeyBase64 = privateKeyBase64Decoded
    }
}

public struct EnableAddOnInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableAddOnInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableAddOnInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableAddOnOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableAddOnInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableAddOnOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableAddOnOutputError>
}

extension EnableAddOnInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableAddOnInput(addOnRequest: \(Swift.String(describing: addOnRequest)), resourceName: \(Swift.String(describing: resourceName)))"}
}

extension EnableAddOnInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOnRequest
        case resourceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOnRequest = addOnRequest {
            try encodeContainer.encode(addOnRequest, forKey: .addOnRequest)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
    }
}

public struct EnableAddOnInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableAddOnInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableAddOnInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableAddOnOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableAddOnInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableAddOnOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableAddOnOutputError>
}

public struct EnableAddOnInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableAddOnInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableAddOnInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableAddOnOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableAddOnInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableAddOnOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableAddOnOutputError>
}

public struct EnableAddOnInput: Swift.Equatable {
    /// <p>An array of strings representing the add-on to enable or modify.</p>
    public let addOnRequest: LightsailClientTypes.AddOnRequest?
    /// <p>The name of the source resource for which to enable or modify the add-on.</p>
    public let resourceName: Swift.String?

    public init (
        addOnRequest: LightsailClientTypes.AddOnRequest? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.addOnRequest = addOnRequest
        self.resourceName = resourceName
    }
}

struct EnableAddOnInputBody: Swift.Equatable {
    public let resourceName: Swift.String?
    public let addOnRequest: LightsailClientTypes.AddOnRequest?
}

extension EnableAddOnInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOnRequest
        case resourceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let addOnRequestDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AddOnRequest.self, forKey: .addOnRequest)
        addOnRequest = addOnRequestDecoded
    }
}

extension EnableAddOnOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableAddOnOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableAddOnOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableAddOnOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableAddOnOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension EnableAddOnOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: EnableAddOnOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct EnableAddOnOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct EnableAddOnOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension EnableAddOnOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes.EndpointRequest: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName
        case containerPort
        case healthCheck
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let containerPort = containerPort {
            try encodeContainer.encode(containerPort, forKey: .containerPort)
        }
        if let healthCheck = healthCheck {
            try encodeContainer.encode(healthCheck, forKey: .healthCheck)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let containerPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .containerPort)
        containerPort = containerPortDecoded
        let healthCheckDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceHealthCheckConfig.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
    }
}

extension LightsailClientTypes.EndpointRequest: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EndpointRequest(containerName: \(Swift.String(describing: containerName)), containerPort: \(Swift.String(describing: containerPort)), healthCheck: \(Swift.String(describing: healthCheck)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the settings of a public endpoint for an Amazon Lightsail container
    ///       service.</p>
    public struct EndpointRequest: Swift.Equatable {
        /// <p>The name of the container for the endpoint.</p>
        public let containerName: Swift.String?
        /// <p>The port of the container to which traffic is forwarded to.</p>
        public let containerPort: Swift.Int?
        /// <p>An object that describes the health check configuration of the container.</p>
        public let healthCheck: LightsailClientTypes.ContainerServiceHealthCheckConfig?

        public init (
            containerName: Swift.String? = nil,
            containerPort: Swift.Int? = nil,
            healthCheck: LightsailClientTypes.ContainerServiceHealthCheckConfig? = nil
        )
        {
            self.containerName = containerName
            self.containerPort = containerPort
            self.healthCheck = healthCheck
        }
    }

}

public struct ExportSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportSnapshotOutputError>
}

extension ExportSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportSnapshotInput(sourceSnapshotName: \(Swift.String(describing: sourceSnapshotName)))"}
}

extension ExportSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceSnapshotName = sourceSnapshotName {
            try encodeContainer.encode(sourceSnapshotName, forKey: .sourceSnapshotName)
        }
    }
}

public struct ExportSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportSnapshotOutputError>
}

public struct ExportSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportSnapshotOutputError>
}

public struct ExportSnapshotInput: Swift.Equatable {
    /// <p>The name of the instance or disk snapshot to be exported to Amazon EC2.</p>
    public let sourceSnapshotName: Swift.String?

    public init (
        sourceSnapshotName: Swift.String? = nil
    )
    {
        self.sourceSnapshotName = sourceSnapshotName
    }
}

struct ExportSnapshotInputBody: Swift.Equatable {
    public let sourceSnapshotName: Swift.String?
}

extension ExportSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceSnapshotName)
        sourceSnapshotName = sourceSnapshotNameDecoded
    }
}

extension ExportSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExportSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ExportSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExportSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportSnapshotOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension ExportSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ExportSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct ExportSnapshotOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct ExportSnapshotOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension ExportSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes.ExportSnapshotRecord: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case destinationInfo
        case location
        case name
        case resourceType
        case sourceInfo
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let destinationInfo = destinationInfo {
            try encodeContainer.encode(destinationInfo, forKey: .destinationInfo)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sourceInfo = sourceInfo {
            try encodeContainer.encode(sourceInfo, forKey: .sourceInfo)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RecordState.self, forKey: .state)
        state = stateDecoded
        let sourceInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ExportSnapshotRecordSourceInfo.self, forKey: .sourceInfo)
        sourceInfo = sourceInfoDecoded
        let destinationInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DestinationInfo.self, forKey: .destinationInfo)
        destinationInfo = destinationInfoDecoded
    }
}

extension LightsailClientTypes.ExportSnapshotRecord: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportSnapshotRecord(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), destinationInfo: \(Swift.String(describing: destinationInfo)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), resourceType: \(Swift.String(describing: resourceType)), sourceInfo: \(Swift.String(describing: sourceInfo)), state: \(Swift.String(describing: state)))"}
}

extension LightsailClientTypes {
    /// <p>Describes an export snapshot record.</p>
    public struct ExportSnapshotRecord: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the export snapshot record.</p>
        public let arn: Swift.String?
        /// <p>The date when the export snapshot record was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>A list of objects describing the destination of the export snapshot record.</p>
        public let destinationInfo: LightsailClientTypes.DestinationInfo?
        /// <p>The AWS Region and Availability Zone where the export snapshot record is located.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The export snapshot record name.</p>
        public let name: Swift.String?
        /// <p>The Lightsail resource type (e.g., <code>ExportSnapshotRecord</code>).</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>A list of objects describing the source of the export snapshot record.</p>
        public let sourceInfo: LightsailClientTypes.ExportSnapshotRecordSourceInfo?
        /// <p>The state of the export snapshot record.</p>
        public let state: LightsailClientTypes.RecordState?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            destinationInfo: LightsailClientTypes.DestinationInfo? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sourceInfo: LightsailClientTypes.ExportSnapshotRecordSourceInfo? = nil,
            state: LightsailClientTypes.RecordState? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.destinationInfo = destinationInfo
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.sourceInfo = sourceInfo
            self.state = state
        }
    }

}

extension LightsailClientTypes.ExportSnapshotRecordSourceInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case diskSnapshotInfo
        case fromResourceArn
        case fromResourceName
        case instanceSnapshotInfo
        case name
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let diskSnapshotInfo = diskSnapshotInfo {
            try encodeContainer.encode(diskSnapshotInfo, forKey: .diskSnapshotInfo)
        }
        if let fromResourceArn = fromResourceArn {
            try encodeContainer.encode(fromResourceArn, forKey: .fromResourceArn)
        }
        if let fromResourceName = fromResourceName {
            try encodeContainer.encode(fromResourceName, forKey: .fromResourceName)
        }
        if let instanceSnapshotInfo = instanceSnapshotInfo {
            try encodeContainer.encode(instanceSnapshotInfo, forKey: .instanceSnapshotInfo)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ExportSnapshotRecordSourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let fromResourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromResourceName)
        fromResourceName = fromResourceNameDecoded
        let fromResourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromResourceArn)
        fromResourceArn = fromResourceArnDecoded
        let instanceSnapshotInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceSnapshotInfo.self, forKey: .instanceSnapshotInfo)
        instanceSnapshotInfo = instanceSnapshotInfoDecoded
        let diskSnapshotInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DiskSnapshotInfo.self, forKey: .diskSnapshotInfo)
        diskSnapshotInfo = diskSnapshotInfoDecoded
    }
}

extension LightsailClientTypes.ExportSnapshotRecordSourceInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportSnapshotRecordSourceInfo(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), diskSnapshotInfo: \(Swift.String(describing: diskSnapshotInfo)), fromResourceArn: \(Swift.String(describing: fromResourceArn)), fromResourceName: \(Swift.String(describing: fromResourceName)), instanceSnapshotInfo: \(Swift.String(describing: instanceSnapshotInfo)), name: \(Swift.String(describing: name)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the source of an export snapshot record.</p>
    public struct ExportSnapshotRecordSourceInfo: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the source instance or disk snapshot.</p>
        public let arn: Swift.String?
        /// <p>The date when the source instance or disk snapshot was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>A list of objects describing a disk snapshot.</p>
        public let diskSnapshotInfo: LightsailClientTypes.DiskSnapshotInfo?
        /// <p>The Amazon Resource Name (ARN) of the snapshot's source instance or disk.</p>
        public let fromResourceArn: Swift.String?
        /// <p>The name of the snapshot's source instance or disk.</p>
        public let fromResourceName: Swift.String?
        /// <p>A list of objects describing an instance snapshot.</p>
        public let instanceSnapshotInfo: LightsailClientTypes.InstanceSnapshotInfo?
        /// <p>The name of the source instance or disk snapshot.</p>
        public let name: Swift.String?
        /// <p>The Lightsail resource type (e.g., <code>InstanceSnapshot</code> or
        ///         <code>DiskSnapshot</code>).</p>
        public let resourceType: LightsailClientTypes.ExportSnapshotRecordSourceType?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            diskSnapshotInfo: LightsailClientTypes.DiskSnapshotInfo? = nil,
            fromResourceArn: Swift.String? = nil,
            fromResourceName: Swift.String? = nil,
            instanceSnapshotInfo: LightsailClientTypes.InstanceSnapshotInfo? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ExportSnapshotRecordSourceType? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.diskSnapshotInfo = diskSnapshotInfo
            self.fromResourceArn = fromResourceArn
            self.fromResourceName = fromResourceName
            self.instanceSnapshotInfo = instanceSnapshotInfo
            self.name = name
            self.resourceType = resourceType
        }
    }

}

extension LightsailClientTypes {
    public enum ExportSnapshotRecordSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disksnapshot
        case instancesnapshot
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportSnapshotRecordSourceType] {
            return [
                .disksnapshot,
                .instancesnapshot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disksnapshot: return "DiskSnapshot"
            case .instancesnapshot: return "InstanceSnapshot"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportSnapshotRecordSourceType(rawValue: rawValue) ?? ExportSnapshotRecordSourceType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum ForwardValues: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case allowlist
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ForwardValues] {
            return [
                .all,
                .allowlist,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "all"
            case .allowlist: return "allow-list"
            case .none: return "none"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ForwardValues(rawValue: rawValue) ?? ForwardValues.sdkUnknown(rawValue)
        }
    }
}

public struct GetActiveNamesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetActiveNamesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetActiveNamesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetActiveNamesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetActiveNamesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetActiveNamesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetActiveNamesOutputError>
}

extension GetActiveNamesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetActiveNamesInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetActiveNamesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetActiveNamesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetActiveNamesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetActiveNamesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetActiveNamesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetActiveNamesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetActiveNamesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetActiveNamesOutputError>
}

public struct GetActiveNamesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetActiveNamesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetActiveNamesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetActiveNamesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetActiveNamesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetActiveNamesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetActiveNamesOutputError>
}

public struct GetActiveNamesInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetActiveNames</code> request. If your
    ///       results are paginated, the response will return a next page token that you can specify as the
    ///       page token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetActiveNamesInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetActiveNamesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetActiveNamesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetActiveNamesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetActiveNamesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetActiveNamesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetActiveNamesOutputResponse(activeNames: \(Swift.String(describing: activeNames)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetActiveNamesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetActiveNamesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activeNames = output.activeNames
            self.nextPageToken = output.nextPageToken
        } else {
            self.activeNames = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetActiveNamesOutputResponse: Swift.Equatable {
    /// <p>The list of active names returned by the get active names request.</p>
    public let activeNames: [Swift.String]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetActiveNames</code> request and
    ///       specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        activeNames: [Swift.String]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.activeNames = activeNames
        self.nextPageToken = nextPageToken
    }
}

struct GetActiveNamesOutputResponseBody: Swift.Equatable {
    public let activeNames: [Swift.String]?
    public let nextPageToken: Swift.String?
}

extension GetActiveNamesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeNames
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .activeNames)
        var activeNamesDecoded0:[Swift.String]? = nil
        if let activeNamesContainer = activeNamesContainer {
            activeNamesDecoded0 = [Swift.String]()
            for string0 in activeNamesContainer {
                if let string0 = string0 {
                    activeNamesDecoded0?.append(string0)
                }
            }
        }
        activeNames = activeNamesDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetAlarmsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAlarmsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAlarmsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAlarmsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAlarmsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAlarmsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAlarmsOutputError>
}

extension GetAlarmsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAlarmsInput(alarmName: \(Swift.String(describing: alarmName)), monitoredResourceName: \(Swift.String(describing: monitoredResourceName)), pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetAlarmsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
        case monitoredResourceName
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmName = alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
        if let monitoredResourceName = monitoredResourceName {
            try encodeContainer.encode(monitoredResourceName, forKey: .monitoredResourceName)
        }
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetAlarmsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAlarmsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAlarmsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAlarmsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAlarmsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAlarmsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAlarmsOutputError>
}

public struct GetAlarmsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAlarmsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAlarmsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAlarmsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAlarmsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAlarmsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAlarmsOutputError>
}

public struct GetAlarmsInput: Swift.Equatable {
    /// <p>The name of the alarm.</p>
    ///          <p>Specify an alarm name to return information about a specific alarm.</p>
    public let alarmName: Swift.String?
    /// <p>The name of the Lightsail resource being monitored by the alarm.</p>
    ///          <p>Specify a monitored resource name to return information about all alarms for a specific
    ///       resource.</p>
    public let monitoredResourceName: Swift.String?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetAlarms</code> request. If your results
    ///       are paginated, the response will return a next page token that you can specify as the page
    ///       token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        alarmName: Swift.String? = nil,
        monitoredResourceName: Swift.String? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.alarmName = alarmName
        self.monitoredResourceName = monitoredResourceName
        self.pageToken = pageToken
    }
}

struct GetAlarmsInputBody: Swift.Equatable {
    public let alarmName: Swift.String?
    public let pageToken: Swift.String?
    public let monitoredResourceName: Swift.String?
}

extension GetAlarmsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
        case monitoredResourceName
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
        let monitoredResourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoredResourceName)
        monitoredResourceName = monitoredResourceNameDecoded
    }
}

extension GetAlarmsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAlarmsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAlarmsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAlarmsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAlarmsOutputResponse(alarms: \(Swift.String(describing: alarms)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetAlarmsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAlarmsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alarms = output.alarms
            self.nextPageToken = output.nextPageToken
        } else {
            self.alarms = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetAlarmsOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the alarms.</p>
    public let alarms: [LightsailClientTypes.Alarm]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetAlarms</code> request and
    ///       specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        alarms: [LightsailClientTypes.Alarm]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.alarms = alarms
        self.nextPageToken = nextPageToken
    }
}

struct GetAlarmsOutputResponseBody: Swift.Equatable {
    public let alarms: [LightsailClientTypes.Alarm]?
    public let nextPageToken: Swift.String?
}

extension GetAlarmsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarms
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Alarm?].self, forKey: .alarms)
        var alarmsDecoded0:[LightsailClientTypes.Alarm]? = nil
        if let alarmsContainer = alarmsContainer {
            alarmsDecoded0 = [LightsailClientTypes.Alarm]()
            for structure0 in alarmsContainer {
                if let structure0 = structure0 {
                    alarmsDecoded0?.append(structure0)
                }
            }
        }
        alarms = alarmsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetAutoSnapshotsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAutoSnapshotsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAutoSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAutoSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAutoSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAutoSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAutoSnapshotsOutputError>
}

extension GetAutoSnapshotsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAutoSnapshotsInput(resourceName: \(Swift.String(describing: resourceName)))"}
}

extension GetAutoSnapshotsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
    }
}

public struct GetAutoSnapshotsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAutoSnapshotsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAutoSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAutoSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAutoSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAutoSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAutoSnapshotsOutputError>
}

public struct GetAutoSnapshotsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAutoSnapshotsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAutoSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAutoSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAutoSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAutoSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAutoSnapshotsOutputError>
}

public struct GetAutoSnapshotsInput: Swift.Equatable {
    /// <p>The name of the source instance or disk from which to get automatic snapshot
    ///       information.</p>
    public let resourceName: Swift.String?

    public init (
        resourceName: Swift.String? = nil
    )
    {
        self.resourceName = resourceName
    }
}

struct GetAutoSnapshotsInputBody: Swift.Equatable {
    public let resourceName: Swift.String?
}

extension GetAutoSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
    }
}

extension GetAutoSnapshotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAutoSnapshotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAutoSnapshotsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAutoSnapshotsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAutoSnapshotsOutputResponse(autoSnapshots: \(Swift.String(describing: autoSnapshots)), resourceName: \(Swift.String(describing: resourceName)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension GetAutoSnapshotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAutoSnapshotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoSnapshots = output.autoSnapshots
            self.resourceName = output.resourceName
            self.resourceType = output.resourceType
        } else {
            self.autoSnapshots = nil
            self.resourceName = nil
            self.resourceType = nil
        }
    }
}

public struct GetAutoSnapshotsOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the automatic snapshots that are available for the
    ///       specified source instance or disk.</p>
    public let autoSnapshots: [LightsailClientTypes.AutoSnapshotDetails]?
    /// <p>The name of the source instance or disk for the automatic snapshots.</p>
    public let resourceName: Swift.String?
    /// <p>The resource type (e.g., <code>Instance</code> or <code>Disk</code>).</p>
    public let resourceType: LightsailClientTypes.ResourceType?

    public init (
        autoSnapshots: [LightsailClientTypes.AutoSnapshotDetails]? = nil,
        resourceName: Swift.String? = nil,
        resourceType: LightsailClientTypes.ResourceType? = nil
    )
    {
        self.autoSnapshots = autoSnapshots
        self.resourceName = resourceName
        self.resourceType = resourceType
    }
}

struct GetAutoSnapshotsOutputResponseBody: Swift.Equatable {
    public let resourceName: Swift.String?
    public let resourceType: LightsailClientTypes.ResourceType?
    public let autoSnapshots: [LightsailClientTypes.AutoSnapshotDetails]?
}

extension GetAutoSnapshotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoSnapshots
        case resourceName
        case resourceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let autoSnapshotsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AutoSnapshotDetails?].self, forKey: .autoSnapshots)
        var autoSnapshotsDecoded0:[LightsailClientTypes.AutoSnapshotDetails]? = nil
        if let autoSnapshotsContainer = autoSnapshotsContainer {
            autoSnapshotsDecoded0 = [LightsailClientTypes.AutoSnapshotDetails]()
            for structure0 in autoSnapshotsContainer {
                if let structure0 = structure0 {
                    autoSnapshotsDecoded0?.append(structure0)
                }
            }
        }
        autoSnapshots = autoSnapshotsDecoded0
    }
}

public struct GetBlueprintsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBlueprintsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBlueprintsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBlueprintsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBlueprintsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBlueprintsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBlueprintsOutputError>
}

extension GetBlueprintsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBlueprintsInput(includeInactive: \(Swift.String(describing: includeInactive)), pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetBlueprintsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeInactive
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeInactive = includeInactive {
            try encodeContainer.encode(includeInactive, forKey: .includeInactive)
        }
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetBlueprintsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBlueprintsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBlueprintsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBlueprintsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBlueprintsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBlueprintsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBlueprintsOutputError>
}

public struct GetBlueprintsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBlueprintsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBlueprintsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBlueprintsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBlueprintsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBlueprintsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBlueprintsOutputError>
}

public struct GetBlueprintsInput: Swift.Equatable {
    /// <p>A Boolean value indicating whether to include inactive results in your request.</p>
    public let includeInactive: Swift.Bool?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetBlueprints</code> request. If your
    ///       results are paginated, the response will return a next page token that you can specify as the
    ///       page token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        includeInactive: Swift.Bool? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.includeInactive = includeInactive
        self.pageToken = pageToken
    }
}

struct GetBlueprintsInputBody: Swift.Equatable {
    public let includeInactive: Swift.Bool?
    public let pageToken: Swift.String?
}

extension GetBlueprintsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeInactive
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let includeInactiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeInactive)
        includeInactive = includeInactiveDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetBlueprintsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBlueprintsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBlueprintsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBlueprintsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBlueprintsOutputResponse(blueprints: \(Swift.String(describing: blueprints)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetBlueprintsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBlueprintsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blueprints = output.blueprints
            self.nextPageToken = output.nextPageToken
        } else {
            self.blueprints = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetBlueprintsOutputResponse: Swift.Equatable {
    /// <p>An array of key-value pairs that contains information about the available
    ///       blueprints.</p>
    public let blueprints: [LightsailClientTypes.Blueprint]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetBlueprints</code> request and
    ///       specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        blueprints: [LightsailClientTypes.Blueprint]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.blueprints = blueprints
        self.nextPageToken = nextPageToken
    }
}

struct GetBlueprintsOutputResponseBody: Swift.Equatable {
    public let blueprints: [LightsailClientTypes.Blueprint]?
    public let nextPageToken: Swift.String?
}

extension GetBlueprintsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprints
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Blueprint?].self, forKey: .blueprints)
        var blueprintsDecoded0:[LightsailClientTypes.Blueprint]? = nil
        if let blueprintsContainer = blueprintsContainer {
            blueprintsDecoded0 = [LightsailClientTypes.Blueprint]()
            for structure0 in blueprintsContainer {
                if let structure0 = structure0 {
                    blueprintsDecoded0?.append(structure0)
                }
            }
        }
        blueprints = blueprintsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetBundlesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBundlesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBundlesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBundlesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBundlesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBundlesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBundlesOutputError>
}

extension GetBundlesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBundlesInput(includeInactive: \(Swift.String(describing: includeInactive)), pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetBundlesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeInactive
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeInactive = includeInactive {
            try encodeContainer.encode(includeInactive, forKey: .includeInactive)
        }
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetBundlesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBundlesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBundlesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBundlesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBundlesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBundlesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBundlesOutputError>
}

public struct GetBundlesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetBundlesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetBundlesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetBundlesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetBundlesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetBundlesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetBundlesOutputError>
}

public struct GetBundlesInput: Swift.Equatable {
    /// <p>A Boolean value that indicates whether to include inactive bundle results in your
    ///       request.</p>
    public let includeInactive: Swift.Bool?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetBundles</code> request. If your results
    ///       are paginated, the response will return a next page token that you can specify as the page
    ///       token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        includeInactive: Swift.Bool? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.includeInactive = includeInactive
        self.pageToken = pageToken
    }
}

struct GetBundlesInputBody: Swift.Equatable {
    public let includeInactive: Swift.Bool?
    public let pageToken: Swift.String?
}

extension GetBundlesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeInactive
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let includeInactiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeInactive)
        includeInactive = includeInactiveDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetBundlesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBundlesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBundlesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBundlesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetBundlesOutputResponse(bundles: \(Swift.String(describing: bundles)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetBundlesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetBundlesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bundles = output.bundles
            self.nextPageToken = output.nextPageToken
        } else {
            self.bundles = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetBundlesOutputResponse: Swift.Equatable {
    /// <p>An array of key-value pairs that contains information about the available bundles.</p>
    public let bundles: [LightsailClientTypes.Bundle]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetBundles</code> request and
    ///       specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        bundles: [LightsailClientTypes.Bundle]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.bundles = bundles
        self.nextPageToken = nextPageToken
    }
}

struct GetBundlesOutputResponseBody: Swift.Equatable {
    public let bundles: [LightsailClientTypes.Bundle]?
    public let nextPageToken: Swift.String?
}

extension GetBundlesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundles
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundlesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Bundle?].self, forKey: .bundles)
        var bundlesDecoded0:[LightsailClientTypes.Bundle]? = nil
        if let bundlesContainer = bundlesContainer {
            bundlesDecoded0 = [LightsailClientTypes.Bundle]()
            for structure0 in bundlesContainer {
                if let structure0 = structure0 {
                    bundlesDecoded0?.append(structure0)
                }
            }
        }
        bundles = bundlesDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetCertificatesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCertificatesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCertificatesOutputError>
}

extension GetCertificatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCertificatesInput(certificateName: \(Swift.String(describing: certificateName)), certificateStatuses: \(Swift.String(describing: certificateStatuses)), includeCertificateDetails: \(Swift.String(describing: includeCertificateDetails)))"}
}

extension GetCertificatesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case certificateStatuses
        case includeCertificateDetails
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateName = certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let certificateStatuses = certificateStatuses {
            var certificateStatusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificateStatuses)
            for certificatestatuslist0 in certificateStatuses {
                try certificateStatusesContainer.encode(certificatestatuslist0.rawValue)
            }
        }
        if includeCertificateDetails != false {
            try encodeContainer.encode(includeCertificateDetails, forKey: .includeCertificateDetails)
        }
    }
}

public struct GetCertificatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCertificatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCertificatesOutputError>
}

public struct GetCertificatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCertificatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCertificatesOutputError>
}

public struct GetCertificatesInput: Swift.Equatable {
    /// <p>The name for the certificate for which to return information.</p>
    ///          <p>When omitted, the response includes all of your certificates in the AWS Region where the
    ///       request is made.</p>
    public let certificateName: Swift.String?
    /// <p>The status of the certificates for which to return information.</p>
    ///          <p>For example, specify <code>ISSUED</code> to return only certificates with an
    ///         <code>ISSUED</code> status.</p>
    ///          <p>When omitted, the response includes all of your certificates in the AWS Region where the
    ///       request is made, regardless of their current status.</p>
    public let certificateStatuses: [LightsailClientTypes.CertificateStatus]?
    /// <p>Indicates whether to include detailed information about the certificates in the
    ///       response.</p>
    ///          <p>When omitted, the response includes only the certificate names, Amazon Resource Names
    ///       (ARNs), domain names, and tags.</p>
    public let includeCertificateDetails: Swift.Bool

    public init (
        certificateName: Swift.String? = nil,
        certificateStatuses: [LightsailClientTypes.CertificateStatus]? = nil,
        includeCertificateDetails: Swift.Bool = false
    )
    {
        self.certificateName = certificateName
        self.certificateStatuses = certificateStatuses
        self.includeCertificateDetails = includeCertificateDetails
    }
}

struct GetCertificatesInputBody: Swift.Equatable {
    public let certificateStatuses: [LightsailClientTypes.CertificateStatus]?
    public let includeCertificateDetails: Swift.Bool
    public let certificateName: Swift.String?
}

extension GetCertificatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case certificateStatuses
        case includeCertificateDetails
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateStatusesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CertificateStatus?].self, forKey: .certificateStatuses)
        var certificateStatusesDecoded0:[LightsailClientTypes.CertificateStatus]? = nil
        if let certificateStatusesContainer = certificateStatusesContainer {
            certificateStatusesDecoded0 = [LightsailClientTypes.CertificateStatus]()
            for string0 in certificateStatusesContainer {
                if let string0 = string0 {
                    certificateStatusesDecoded0?.append(string0)
                }
            }
        }
        certificateStatuses = certificateStatusesDecoded0
        let includeCertificateDetailsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .includeCertificateDetails)
        includeCertificateDetails = includeCertificateDetailsDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
    }
}

extension GetCertificatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCertificatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCertificatesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCertificatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCertificatesOutputResponse(certificates: \(Swift.String(describing: certificates)))"}
}

extension GetCertificatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCertificatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificates = output.certificates
        } else {
            self.certificates = nil
        }
    }
}

public struct GetCertificatesOutputResponse: Swift.Equatable {
    /// <p>An object that describes certificates.</p>
    public let certificates: [LightsailClientTypes.CertificateSummary]?

    public init (
        certificates: [LightsailClientTypes.CertificateSummary]? = nil
    )
    {
        self.certificates = certificates
    }
}

struct GetCertificatesOutputResponseBody: Swift.Equatable {
    public let certificates: [LightsailClientTypes.CertificateSummary]?
}

extension GetCertificatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificates
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificatesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CertificateSummary?].self, forKey: .certificates)
        var certificatesDecoded0:[LightsailClientTypes.CertificateSummary]? = nil
        if let certificatesContainer = certificatesContainer {
            certificatesDecoded0 = [LightsailClientTypes.CertificateSummary]()
            for structure0 in certificatesContainer {
                if let structure0 = structure0 {
                    certificatesDecoded0?.append(structure0)
                }
            }
        }
        certificates = certificatesDecoded0
    }
}

public struct GetCloudFormationStackRecordsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCloudFormationStackRecordsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCloudFormationStackRecordsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCloudFormationStackRecordsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCloudFormationStackRecordsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCloudFormationStackRecordsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCloudFormationStackRecordsOutputError>
}

extension GetCloudFormationStackRecordsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCloudFormationStackRecordsInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetCloudFormationStackRecordsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetCloudFormationStackRecordsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCloudFormationStackRecordsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCloudFormationStackRecordsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCloudFormationStackRecordsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCloudFormationStackRecordsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCloudFormationStackRecordsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCloudFormationStackRecordsOutputError>
}

public struct GetCloudFormationStackRecordsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCloudFormationStackRecordsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCloudFormationStackRecordsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCloudFormationStackRecordsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCloudFormationStackRecordsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCloudFormationStackRecordsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCloudFormationStackRecordsOutputError>
}

public struct GetCloudFormationStackRecordsInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetClouFormationStackRecords</code> request.
    ///       If your results are paginated, the response will return a next page token that you can specify
    ///       as the page token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetCloudFormationStackRecordsInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetCloudFormationStackRecordsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetCloudFormationStackRecordsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCloudFormationStackRecordsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCloudFormationStackRecordsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCloudFormationStackRecordsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCloudFormationStackRecordsOutputResponse(cloudFormationStackRecords: \(Swift.String(describing: cloudFormationStackRecords)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetCloudFormationStackRecordsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCloudFormationStackRecordsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cloudFormationStackRecords = output.cloudFormationStackRecords
            self.nextPageToken = output.nextPageToken
        } else {
            self.cloudFormationStackRecords = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetCloudFormationStackRecordsOutputResponse: Swift.Equatable {
    /// <p>A list of objects describing the CloudFormation stack records.</p>
    public let cloudFormationStackRecords: [LightsailClientTypes.CloudFormationStackRecord]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another
    ///         <code>GetCloudFormationStackRecords</code> request and specify the next page token using the
    ///         <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        cloudFormationStackRecords: [LightsailClientTypes.CloudFormationStackRecord]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.cloudFormationStackRecords = cloudFormationStackRecords
        self.nextPageToken = nextPageToken
    }
}

struct GetCloudFormationStackRecordsOutputResponseBody: Swift.Equatable {
    public let cloudFormationStackRecords: [LightsailClientTypes.CloudFormationStackRecord]?
    public let nextPageToken: Swift.String?
}

extension GetCloudFormationStackRecordsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudFormationStackRecords
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudFormationStackRecordsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CloudFormationStackRecord?].self, forKey: .cloudFormationStackRecords)
        var cloudFormationStackRecordsDecoded0:[LightsailClientTypes.CloudFormationStackRecord]? = nil
        if let cloudFormationStackRecordsContainer = cloudFormationStackRecordsContainer {
            cloudFormationStackRecordsDecoded0 = [LightsailClientTypes.CloudFormationStackRecord]()
            for structure0 in cloudFormationStackRecordsContainer {
                if let structure0 = structure0 {
                    cloudFormationStackRecordsDecoded0?.append(structure0)
                }
            }
        }
        cloudFormationStackRecords = cloudFormationStackRecordsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetContactMethodsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContactMethodsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContactMethodsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContactMethodsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContactMethodsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContactMethodsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContactMethodsOutputError>
}

extension GetContactMethodsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContactMethodsInput(protocols: \(Swift.String(describing: protocols)))"}
}

extension GetContactMethodsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case protocols
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let protocols = protocols {
            var protocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protocols)
            for contactprotocolslist0 in protocols {
                try protocolsContainer.encode(contactprotocolslist0.rawValue)
            }
        }
    }
}

public struct GetContactMethodsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContactMethodsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContactMethodsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContactMethodsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContactMethodsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContactMethodsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContactMethodsOutputError>
}

public struct GetContactMethodsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContactMethodsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContactMethodsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContactMethodsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContactMethodsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContactMethodsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContactMethodsOutputError>
}

public struct GetContactMethodsInput: Swift.Equatable {
    /// <p>The protocols used to send notifications, such as <code>Email</code>, or <code>SMS</code>
    ///       (text messaging).</p>
    ///          <p>Specify a protocol in your request to return information about a specific contact method
    ///       protocol.</p>
    public let protocols: [LightsailClientTypes.ContactProtocol]?

    public init (
        protocols: [LightsailClientTypes.ContactProtocol]? = nil
    )
    {
        self.protocols = protocols
    }
}

struct GetContactMethodsInputBody: Swift.Equatable {
    public let protocols: [LightsailClientTypes.ContactProtocol]?
}

extension GetContactMethodsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case protocols
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContactProtocol?].self, forKey: .protocols)
        var protocolsDecoded0:[LightsailClientTypes.ContactProtocol]? = nil
        if let protocolsContainer = protocolsContainer {
            protocolsDecoded0 = [LightsailClientTypes.ContactProtocol]()
            for string0 in protocolsContainer {
                if let string0 = string0 {
                    protocolsDecoded0?.append(string0)
                }
            }
        }
        protocols = protocolsDecoded0
    }
}

extension GetContactMethodsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContactMethodsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetContactMethodsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContactMethodsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContactMethodsOutputResponse(contactMethods: \(Swift.String(describing: contactMethods)))"}
}

extension GetContactMethodsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetContactMethodsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.contactMethods = output.contactMethods
        } else {
            self.contactMethods = nil
        }
    }
}

public struct GetContactMethodsOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the contact methods.</p>
    public let contactMethods: [LightsailClientTypes.ContactMethod]?

    public init (
        contactMethods: [LightsailClientTypes.ContactMethod]? = nil
    )
    {
        self.contactMethods = contactMethods
    }
}

struct GetContactMethodsOutputResponseBody: Swift.Equatable {
    public let contactMethods: [LightsailClientTypes.ContactMethod]?
}

extension GetContactMethodsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contactMethods
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactMethodsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContactMethod?].self, forKey: .contactMethods)
        var contactMethodsDecoded0:[LightsailClientTypes.ContactMethod]? = nil
        if let contactMethodsContainer = contactMethodsContainer {
            contactMethodsDecoded0 = [LightsailClientTypes.ContactMethod]()
            for structure0 in contactMethodsContainer {
                if let structure0 = structure0 {
                    contactMethodsDecoded0?.append(structure0)
                }
            }
        }
        contactMethods = contactMethodsDecoded0
    }
}

extension GetContainerAPIMetadataInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerAPIMetadataInput()"}
}

extension GetContainerAPIMetadataInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetContainerAPIMetadataInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerAPIMetadataInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerAPIMetadataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerAPIMetadataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerAPIMetadataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerAPIMetadataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerAPIMetadataOutputError>
}

public struct GetContainerAPIMetadataInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerAPIMetadataInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerAPIMetadataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerAPIMetadataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerAPIMetadataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerAPIMetadataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerAPIMetadataOutputError>
}

public struct GetContainerAPIMetadataInput: Swift.Equatable {

    public init() {}
}

struct GetContainerAPIMetadataInputBody: Swift.Equatable {
}

extension GetContainerAPIMetadataInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContainerAPIMetadataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerAPIMetadataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetContainerAPIMetadataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerAPIMetadataOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerAPIMetadataOutputResponse(metadata: \(Swift.String(describing: metadata)))"}
}

extension GetContainerAPIMetadataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetContainerAPIMetadataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metadata = output.metadata
        } else {
            self.metadata = nil
        }
    }
}

public struct GetContainerAPIMetadataOutputResponse: Swift.Equatable {
    /// <p>Metadata about Lightsail containers, such as the current version of the Lightsail
    ///       Control (lightsailctl) plugin.</p>
    public let metadata: [[Swift.String:Swift.String]]?

    public init (
        metadata: [[Swift.String:Swift.String]]? = nil
    )
    {
        self.metadata = metadata
    }
}

struct GetContainerAPIMetadataOutputResponseBody: Swift.Equatable {
    public let metadata: [[Swift.String:Swift.String]]?
}

extension GetContainerAPIMetadataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadata
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metadataContainer = try containerValues.decodeIfPresent([[Swift.String: Swift.String?]?].self, forKey: .metadata)
        var metadataDecoded0:[[Swift.String:Swift.String]]? = nil
        if let metadataContainer = metadataContainer {
            metadataDecoded0 = [[Swift.String:Swift.String]]()
            for map0 in metadataContainer {
                var metadataContainerDecoded0: [Swift.String: Swift.String]? = nil
                if let map0 = map0 {
                    metadataContainerDecoded0 = [Swift.String: Swift.String]()
                    for (key1, string1) in map0 {
                        if let string1 = string1 {
                            metadataContainerDecoded0?[key1] = string1
                        }
                    }
                }
                if let metadataContainerDecoded0 = metadataContainerDecoded0 {
                    metadataDecoded0?.append(metadataContainerDecoded0)
                }
            }
        }
        metadata = metadataDecoded0
    }
}

extension GetContainerImagesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerImagesInput(serviceName: \(Swift.String(describing: serviceName)))"}
}

extension GetContainerImagesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetContainerImagesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerImagesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerImagesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerImagesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerImagesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerImagesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerImagesOutputError>
}

public struct GetContainerImagesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerImagesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerImagesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerImagesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerImagesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerImagesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerImagesOutputError>
}

public struct GetContainerImagesInput: Swift.Equatable {
    /// <p>The name of the container service for which to return registered container images.</p>
    public let serviceName: Swift.String?

    public init (
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

struct GetContainerImagesInputBody: Swift.Equatable {
}

extension GetContainerImagesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContainerImagesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerImagesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetContainerImagesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerImagesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerImagesOutputResponse(containerImages: \(Swift.String(describing: containerImages)))"}
}

extension GetContainerImagesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetContainerImagesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.containerImages = output.containerImages
        } else {
            self.containerImages = nil
        }
    }
}

public struct GetContainerImagesOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe container images that are registered to the container
    ///       service.</p>
    public let containerImages: [LightsailClientTypes.ContainerImage]?

    public init (
        containerImages: [LightsailClientTypes.ContainerImage]? = nil
    )
    {
        self.containerImages = containerImages
    }
}

struct GetContainerImagesOutputResponseBody: Swift.Equatable {
    public let containerImages: [LightsailClientTypes.ContainerImage]?
}

extension GetContainerImagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerImages
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerImagesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContainerImage?].self, forKey: .containerImages)
        var containerImagesDecoded0:[LightsailClientTypes.ContainerImage]? = nil
        if let containerImagesContainer = containerImagesContainer {
            containerImagesDecoded0 = [LightsailClientTypes.ContainerImage]()
            for structure0 in containerImagesContainer {
                if let structure0 = structure0 {
                    containerImagesDecoded0?.append(structure0)
                }
            }
        }
        containerImages = containerImagesDecoded0
    }
}

extension GetContainerLogInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerLogInput(containerName: \(Swift.String(describing: containerName)), endTime: \(Swift.String(describing: endTime)), filterPattern: \(Swift.String(describing: filterPattern)), pageToken: \(Swift.String(describing: pageToken)), serviceName: \(Swift.String(describing: serviceName)), startTime: \(Swift.String(describing: startTime)))"}
}

extension GetContainerLogInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetContainerLogInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerLogInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerLogInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerLogOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerLogInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerLogOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerLogOutputError>
}

public struct GetContainerLogInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerLogInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerLogInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerLogOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerLogInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerLogOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerLogOutputError>
}

public struct GetContainerLogInput: Swift.Equatable {
    /// <p>The name of the container that is either running or previously ran on the container
    ///       service for which to return a log.</p>
    public let containerName: Swift.String?
    /// <p>The end of the time interval for which to get log data.</p>
    ///
    ///          <p>Constraints:</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in the Unix time format.</p>
    ///
    ///                <p>For example, if you wish to use an end time of October 1, 2018, at 9 PM UTC, specify
    ///             <code>1538427600</code> as the end time.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>The pattern to use to filter the returned log events to a specific term.</p>
    ///
    ///          <p>The following are a few examples of filter patterns that you can specify:</p>
    ///          <ul>
    ///             <li>
    ///                <p>To return all log events, specify a filter pattern of <code>""</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To exclude log events that contain the <code>ERROR</code> term, and return all other
    ///           log events, specify a filter pattern of <code>"-ERROR"</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To return log events that contain the <code>ERROR</code> term, specify a filter
    ///           pattern of <code>"ERROR"</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To return log events that contain both the <code>ERROR</code> and
    ///             <code>Exception</code> terms, specify a filter pattern of <code>"ERROR
    ///           Exception"</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To return log events that contain the <code>ERROR</code>
    ///                   <i>or</i> the <code>Exception</code> term, specify a filter pattern of
    ///             <code>"?ERROR ?Exception"</code>.</p>
    ///             </li>
    ///          </ul>
    public let filterPattern: Swift.String?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///
    ///          <p>To get a page token, perform an initial <code>GetContainerLog</code> request. If your
    ///       results are paginated, the response will return a next page token that you can specify as the
    ///       page token in a subsequent request.</p>
    public let pageToken: Swift.String?
    /// <p>The name of the container service for which to get a container log.</p>
    public let serviceName: Swift.String?
    /// <p>The start of the time interval for which to get log data.</p>
    ///
    ///          <p>Constraints:</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in the Unix time format.</p>
    ///
    ///                <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, specify
    ///             <code>1538424000</code> as the start time.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p>
    public let startTime: ClientRuntime.Date?

    public init (
        containerName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        filterPattern: Swift.String? = nil,
        pageToken: Swift.String? = nil,
        serviceName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.containerName = containerName
        self.endTime = endTime
        self.filterPattern = filterPattern
        self.pageToken = pageToken
        self.serviceName = serviceName
        self.startTime = startTime
    }
}

struct GetContainerLogInputBody: Swift.Equatable {
}

extension GetContainerLogInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContainerLogOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerLogOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetContainerLogOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerLogOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerLogOutputResponse(logEvents: \(Swift.String(describing: logEvents)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetContainerLogOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetContainerLogOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.logEvents = output.logEvents
            self.nextPageToken = output.nextPageToken
        } else {
            self.logEvents = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetContainerLogOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the log events of a container.</p>
    public let logEvents: [LightsailClientTypes.ContainerServiceLogEvent]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///
    ///          <p>To get the next page of results, perform another <code>GetContainerLog</code> request and
    ///       specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        logEvents: [LightsailClientTypes.ContainerServiceLogEvent]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.logEvents = logEvents
        self.nextPageToken = nextPageToken
    }
}

struct GetContainerLogOutputResponseBody: Swift.Equatable {
    public let logEvents: [LightsailClientTypes.ContainerServiceLogEvent]?
    public let nextPageToken: Swift.String?
}

extension GetContainerLogOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logEvents
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logEventsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContainerServiceLogEvent?].self, forKey: .logEvents)
        var logEventsDecoded0:[LightsailClientTypes.ContainerServiceLogEvent]? = nil
        if let logEventsContainer = logEventsContainer {
            logEventsDecoded0 = [LightsailClientTypes.ContainerServiceLogEvent]()
            for structure0 in logEventsContainer {
                if let structure0 = structure0 {
                    logEventsDecoded0?.append(structure0)
                }
            }
        }
        logEvents = logEventsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetContainerServiceDeploymentsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerServiceDeploymentsInput(serviceName: \(Swift.String(describing: serviceName)))"}
}

extension GetContainerServiceDeploymentsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetContainerServiceDeploymentsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerServiceDeploymentsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerServiceDeploymentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerServiceDeploymentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerServiceDeploymentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerServiceDeploymentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerServiceDeploymentsOutputError>
}

public struct GetContainerServiceDeploymentsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerServiceDeploymentsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerServiceDeploymentsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerServiceDeploymentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerServiceDeploymentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerServiceDeploymentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerServiceDeploymentsOutputError>
}

public struct GetContainerServiceDeploymentsInput: Swift.Equatable {
    /// <p>The name of the container service for which to return deployments.</p>
    public let serviceName: Swift.String?

    public init (
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

struct GetContainerServiceDeploymentsInputBody: Swift.Equatable {
}

extension GetContainerServiceDeploymentsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContainerServiceDeploymentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerServiceDeploymentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetContainerServiceDeploymentsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerServiceDeploymentsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerServiceDeploymentsOutputResponse(deployments: \(Swift.String(describing: deployments)))"}
}

extension GetContainerServiceDeploymentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetContainerServiceDeploymentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deployments = output.deployments
        } else {
            self.deployments = nil
        }
    }
}

public struct GetContainerServiceDeploymentsOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe deployments for a container service.</p>
    public let deployments: [LightsailClientTypes.ContainerServiceDeployment]?

    public init (
        deployments: [LightsailClientTypes.ContainerServiceDeployment]? = nil
    )
    {
        self.deployments = deployments
    }
}

struct GetContainerServiceDeploymentsOutputResponseBody: Swift.Equatable {
    public let deployments: [LightsailClientTypes.ContainerServiceDeployment]?
}

extension GetContainerServiceDeploymentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deployments
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContainerServiceDeployment?].self, forKey: .deployments)
        var deploymentsDecoded0:[LightsailClientTypes.ContainerServiceDeployment]? = nil
        if let deploymentsContainer = deploymentsContainer {
            deploymentsDecoded0 = [LightsailClientTypes.ContainerServiceDeployment]()
            for structure0 in deploymentsContainer {
                if let structure0 = structure0 {
                    deploymentsDecoded0?.append(structure0)
                }
            }
        }
        deployments = deploymentsDecoded0
    }
}

extension GetContainerServiceMetricDataInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerServiceMetricDataInput(endTime: \(Swift.String(describing: endTime)), metricName: \(Swift.String(describing: metricName)), period: \(Swift.String(describing: period)), serviceName: \(Swift.String(describing: serviceName)), startTime: \(Swift.String(describing: startTime)), statistics: \(Swift.String(describing: statistics)))"}
}

extension GetContainerServiceMetricDataInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetContainerServiceMetricDataInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerServiceMetricDataInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerServiceMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerServiceMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerServiceMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerServiceMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerServiceMetricDataOutputError>
}

public struct GetContainerServiceMetricDataInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerServiceMetricDataInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerServiceMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerServiceMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerServiceMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerServiceMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerServiceMetricDataOutputError>
}

public struct GetContainerServiceMetricDataInput: Swift.Equatable {
    /// <p>The end time of the time period.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>The metric for which you want to return information.</p>
    ///
    ///          <p>Valid container service metric names are listed below, along with the most useful
    ///       statistics to include in your request, and the published unit value.</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CPUUtilization</code> - The average percentage of compute units that are
    ///           currently in use across all nodes of the container service. This metric identifies the
    ///           processing power required to run containers on each node of the container service.</p>
    ///                <p>Statistics: The most useful statistics are <code>Maximum</code> and
    ///             <code>Average</code>.</p>
    ///                <p>Unit: The published unit is <code>Percent</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MemoryUtilization</code> - The average percentage of available memory that is
    ///           currently in use across all nodes of the container service. This metric identifies the
    ///           memory required to run containers on each node of the container service.</p>
    ///                <p>Statistics: The most useful statistics are <code>Maximum</code> and
    ///             <code>Average</code>.</p>
    ///                <p>Unit: The published unit is <code>Percent</code>.</p>
    ///             </li>
    ///          </ul>
    public let metricName: LightsailClientTypes.ContainerServiceMetricName?
    /// <p>The granularity, in seconds, of the returned data points.</p>
    ///
    ///          <p>All container service metric data is available in 5-minute (300 seconds)
    ///       granularity.</p>
    public let period: Swift.Int
    /// <p>The name of the container service for which to get metric data.</p>
    public let serviceName: Swift.String?
    /// <p>The start time of the time period.</p>
    public let startTime: ClientRuntime.Date?
    /// <p>The statistic for the metric.</p>
    ///
    ///          <p>The following statistics are available:</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Minimum</code> - The lowest value observed during the specified period. Use this
    ///           value to determine low volumes of activity for your application.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Maximum</code> - The highest value observed during the specified period. Use
    ///           this value to determine high volumes of activity for your application.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Sum</code> - All values submitted for the matching metric added together. You
    ///           can use this statistic to determine the total volume of a metric.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Average</code> - The value of <code>Sum</code> / <code>SampleCount</code> during
    ///           the specified period. By comparing this statistic with the <code>Minimum</code> and
    ///             <code>Maximum</code> values, you can determine the full scope of a metric and how close
    ///           the average use is to the <code>Minimum</code> and <code>Maximum</code> values. This
    ///           comparison helps you to know when to increase or decrease your resources.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SampleCount</code> - The count, or number, of data points used for the
    ///           statistical calculation.</p>
    ///             </li>
    ///          </ul>
    public let statistics: [LightsailClientTypes.MetricStatistic]?

    public init (
        endTime: ClientRuntime.Date? = nil,
        metricName: LightsailClientTypes.ContainerServiceMetricName? = nil,
        period: Swift.Int = 0,
        serviceName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil
    )
    {
        self.endTime = endTime
        self.metricName = metricName
        self.period = period
        self.serviceName = serviceName
        self.startTime = startTime
        self.statistics = statistics
    }
}

struct GetContainerServiceMetricDataInputBody: Swift.Equatable {
}

extension GetContainerServiceMetricDataInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContainerServiceMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerServiceMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetContainerServiceMetricDataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerServiceMetricDataOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerServiceMetricDataOutputResponse(metricData: \(Swift.String(describing: metricData)), metricName: \(Swift.String(describing: metricName)))"}
}

extension GetContainerServiceMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetContainerServiceMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricData = output.metricData
            self.metricName = output.metricName
        } else {
            self.metricData = nil
            self.metricName = nil
        }
    }
}

public struct GetContainerServiceMetricDataOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the metric data returned.</p>
    public let metricData: [LightsailClientTypes.MetricDatapoint]?
    /// <p>The name of the metric returned. </p>
    public let metricName: LightsailClientTypes.ContainerServiceMetricName?

    public init (
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.ContainerServiceMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

struct GetContainerServiceMetricDataOutputResponseBody: Swift.Equatable {
    public let metricName: LightsailClientTypes.ContainerServiceMetricName?
    public let metricData: [LightsailClientTypes.MetricDatapoint]?
}

extension GetContainerServiceMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricData
        case metricName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricDataContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricDatapoint?].self, forKey: .metricData)
        var metricDataDecoded0:[LightsailClientTypes.MetricDatapoint]? = nil
        if let metricDataContainer = metricDataContainer {
            metricDataDecoded0 = [LightsailClientTypes.MetricDatapoint]()
            for structure0 in metricDataContainer {
                if let structure0 = structure0 {
                    metricDataDecoded0?.append(structure0)
                }
            }
        }
        metricData = metricDataDecoded0
    }
}

extension GetContainerServicePowersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerServicePowersInput()"}
}

extension GetContainerServicePowersInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetContainerServicePowersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerServicePowersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerServicePowersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerServicePowersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerServicePowersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerServicePowersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerServicePowersOutputError>
}

public struct GetContainerServicePowersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerServicePowersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerServicePowersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerServicePowersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerServicePowersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerServicePowersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerServicePowersOutputError>
}

public struct GetContainerServicePowersInput: Swift.Equatable {

    public init() {}
}

struct GetContainerServicePowersInputBody: Swift.Equatable {
}

extension GetContainerServicePowersInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContainerServicePowersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerServicePowersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetContainerServicePowersOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerServicePowersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerServicePowersOutputResponse(powers: \(Swift.String(describing: powers)))"}
}

extension GetContainerServicePowersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetContainerServicePowersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.powers = output.powers
        } else {
            self.powers = nil
        }
    }
}

public struct GetContainerServicePowersOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the powers that can be specified for a container
    ///       service.</p>
    public let powers: [LightsailClientTypes.ContainerServicePower]?

    public init (
        powers: [LightsailClientTypes.ContainerServicePower]? = nil
    )
    {
        self.powers = powers
    }
}

struct GetContainerServicePowersOutputResponseBody: Swift.Equatable {
    public let powers: [LightsailClientTypes.ContainerServicePower]?
}

extension GetContainerServicePowersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case powers
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let powersContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContainerServicePower?].self, forKey: .powers)
        var powersDecoded0:[LightsailClientTypes.ContainerServicePower]? = nil
        if let powersContainer = powersContainer {
            powersDecoded0 = [LightsailClientTypes.ContainerServicePower]()
            for structure0 in powersContainer {
                if let structure0 = structure0 {
                    powersDecoded0?.append(structure0)
                }
            }
        }
        powers = powersDecoded0
    }
}

extension GetContainerServicesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerServicesInput(serviceName: \(Swift.String(describing: serviceName)))"}
}

extension GetContainerServicesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetContainerServicesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerServicesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerServicesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerServicesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerServicesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerServicesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerServicesOutputError>
}

public struct GetContainerServicesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetContainerServicesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetContainerServicesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetContainerServicesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetContainerServicesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetContainerServicesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetContainerServicesOutputError>
}

public struct GetContainerServicesInput: Swift.Equatable {
    /// <p>The name of the container service for which to return information.</p>
    ///
    ///          <p>When omitted, the response includes all of your container services in the AWS Region
    ///       where the request is made.</p>
    public let serviceName: Swift.String?

    public init (
        serviceName: Swift.String? = nil
    )
    {
        self.serviceName = serviceName
    }
}

struct GetContainerServicesInputBody: Swift.Equatable {
}

extension GetContainerServicesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetContainerServicesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetContainerServicesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetContainerServicesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetContainerServicesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetContainerServicesOutputResponse(containerServices: \(Swift.String(describing: containerServices)))"}
}

extension GetContainerServicesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetContainerServicesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.containerServices = output.containerServices
        } else {
            self.containerServices = nil
        }
    }
}

public struct GetContainerServicesOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe one or more container services.</p>
    public let containerServices: [LightsailClientTypes.ContainerService]?

    public init (
        containerServices: [LightsailClientTypes.ContainerService]? = nil
    )
    {
        self.containerServices = containerServices
    }
}

struct GetContainerServicesOutputResponseBody: Swift.Equatable {
    public let containerServices: [LightsailClientTypes.ContainerService]?
}

extension GetContainerServicesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerServices
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerServicesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContainerService?].self, forKey: .containerServices)
        var containerServicesDecoded0:[LightsailClientTypes.ContainerService]? = nil
        if let containerServicesContainer = containerServicesContainer {
            containerServicesDecoded0 = [LightsailClientTypes.ContainerService]()
            for structure0 in containerServicesContainer {
                if let structure0 = structure0 {
                    containerServicesDecoded0?.append(structure0)
                }
            }
        }
        containerServices = containerServicesDecoded0
    }
}

public struct GetDiskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDiskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDiskOutputError>
}

extension GetDiskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDiskInput(diskName: \(Swift.String(describing: diskName)))"}
}

extension GetDiskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskName = diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
    }
}

public struct GetDiskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDiskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDiskOutputError>
}

public struct GetDiskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDiskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDiskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDiskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDiskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDiskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDiskOutputError>
}

public struct GetDiskInput: Swift.Equatable {
    /// <p>The name of the disk (e.g., <code>my-disk</code>).</p>
    public let diskName: Swift.String?

    public init (
        diskName: Swift.String? = nil
    )
    {
        self.diskName = diskName
    }
}

struct GetDiskInputBody: Swift.Equatable {
    public let diskName: Swift.String?
}

extension GetDiskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
    }
}

extension GetDiskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDiskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDiskOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDiskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDiskOutputResponse(disk: \(Swift.String(describing: disk)))"}
}

extension GetDiskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDiskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.disk = output.disk
        } else {
            self.disk = nil
        }
    }
}

public struct GetDiskOutputResponse: Swift.Equatable {
    /// <p>An object containing information about the disk.</p>
    public let disk: LightsailClientTypes.Disk?

    public init (
        disk: LightsailClientTypes.Disk? = nil
    )
    {
        self.disk = disk
    }
}

struct GetDiskOutputResponseBody: Swift.Equatable {
    public let disk: LightsailClientTypes.Disk?
}

extension GetDiskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disk
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Disk.self, forKey: .disk)
        disk = diskDecoded
    }
}

public struct GetDiskSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDiskSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDiskSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDiskSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDiskSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDiskSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDiskSnapshotOutputError>
}

extension GetDiskSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDiskSnapshotInput(diskSnapshotName: \(Swift.String(describing: diskSnapshotName)))"}
}

extension GetDiskSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskSnapshotName = diskSnapshotName {
            try encodeContainer.encode(diskSnapshotName, forKey: .diskSnapshotName)
        }
    }
}

public struct GetDiskSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDiskSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDiskSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDiskSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDiskSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDiskSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDiskSnapshotOutputError>
}

public struct GetDiskSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDiskSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDiskSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDiskSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDiskSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDiskSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDiskSnapshotOutputError>
}

public struct GetDiskSnapshotInput: Swift.Equatable {
    /// <p>The name of the disk snapshot (e.g., <code>my-disk-snapshot</code>).</p>
    public let diskSnapshotName: Swift.String?

    public init (
        diskSnapshotName: Swift.String? = nil
    )
    {
        self.diskSnapshotName = diskSnapshotName
    }
}

struct GetDiskSnapshotInputBody: Swift.Equatable {
    public let diskSnapshotName: Swift.String?
}

extension GetDiskSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskSnapshotName)
        diskSnapshotName = diskSnapshotNameDecoded
    }
}

extension GetDiskSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDiskSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDiskSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDiskSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDiskSnapshotOutputResponse(diskSnapshot: \(Swift.String(describing: diskSnapshot)))"}
}

extension GetDiskSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDiskSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.diskSnapshot = output.diskSnapshot
        } else {
            self.diskSnapshot = nil
        }
    }
}

public struct GetDiskSnapshotOutputResponse: Swift.Equatable {
    /// <p>An object containing information about the disk snapshot.</p>
    public let diskSnapshot: LightsailClientTypes.DiskSnapshot?

    public init (
        diskSnapshot: LightsailClientTypes.DiskSnapshot? = nil
    )
    {
        self.diskSnapshot = diskSnapshot
    }
}

struct GetDiskSnapshotOutputResponseBody: Swift.Equatable {
    public let diskSnapshot: LightsailClientTypes.DiskSnapshot?
}

extension GetDiskSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskSnapshot
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskSnapshotDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DiskSnapshot.self, forKey: .diskSnapshot)
        diskSnapshot = diskSnapshotDecoded
    }
}

public struct GetDiskSnapshotsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDiskSnapshotsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDiskSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDiskSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDiskSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDiskSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDiskSnapshotsOutputError>
}

extension GetDiskSnapshotsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDiskSnapshotsInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetDiskSnapshotsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetDiskSnapshotsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDiskSnapshotsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDiskSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDiskSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDiskSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDiskSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDiskSnapshotsOutputError>
}

public struct GetDiskSnapshotsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDiskSnapshotsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDiskSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDiskSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDiskSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDiskSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDiskSnapshotsOutputError>
}

public struct GetDiskSnapshotsInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetDiskSnapshots</code> request. If your
    ///       results are paginated, the response will return a next page token that you can specify as the
    ///       page token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetDiskSnapshotsInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetDiskSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetDiskSnapshotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDiskSnapshotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDiskSnapshotsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDiskSnapshotsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDiskSnapshotsOutputResponse(diskSnapshots: \(Swift.String(describing: diskSnapshots)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetDiskSnapshotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDiskSnapshotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.diskSnapshots = output.diskSnapshots
            self.nextPageToken = output.nextPageToken
        } else {
            self.diskSnapshots = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetDiskSnapshotsOutputResponse: Swift.Equatable {
    /// <p>An array of objects containing information about all block storage disk snapshots.</p>
    public let diskSnapshots: [LightsailClientTypes.DiskSnapshot]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetDiskSnapshots</code> request and
    ///       specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        diskSnapshots: [LightsailClientTypes.DiskSnapshot]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.diskSnapshots = diskSnapshots
        self.nextPageToken = nextPageToken
    }
}

struct GetDiskSnapshotsOutputResponseBody: Swift.Equatable {
    public let diskSnapshots: [LightsailClientTypes.DiskSnapshot]?
    public let nextPageToken: Swift.String?
}

extension GetDiskSnapshotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskSnapshots
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskSnapshotsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.DiskSnapshot?].self, forKey: .diskSnapshots)
        var diskSnapshotsDecoded0:[LightsailClientTypes.DiskSnapshot]? = nil
        if let diskSnapshotsContainer = diskSnapshotsContainer {
            diskSnapshotsDecoded0 = [LightsailClientTypes.DiskSnapshot]()
            for structure0 in diskSnapshotsContainer {
                if let structure0 = structure0 {
                    diskSnapshotsDecoded0?.append(structure0)
                }
            }
        }
        diskSnapshots = diskSnapshotsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetDisksInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDisksInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDisksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDisksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDisksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDisksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDisksOutputError>
}

extension GetDisksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDisksInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetDisksInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetDisksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDisksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDisksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDisksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDisksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDisksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDisksOutputError>
}

public struct GetDisksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDisksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDisksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDisksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDisksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDisksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDisksOutputError>
}

public struct GetDisksInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetDisks</code> request. If your results are
    ///       paginated, the response will return a next page token that you can specify as the page token
    ///       in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetDisksInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetDisksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetDisksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDisksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDisksOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDisksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDisksOutputResponse(disks: \(Swift.String(describing: disks)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetDisksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDisksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.disks = output.disks
            self.nextPageToken = output.nextPageToken
        } else {
            self.disks = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetDisksOutputResponse: Swift.Equatable {
    /// <p>An array of objects containing information about all block storage disks.</p>
    public let disks: [LightsailClientTypes.Disk]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetDisks</code> request and specify
    ///       the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        disks: [LightsailClientTypes.Disk]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.disks = disks
        self.nextPageToken = nextPageToken
    }
}

struct GetDisksOutputResponseBody: Swift.Equatable {
    public let disks: [LightsailClientTypes.Disk]?
    public let nextPageToken: Swift.String?
}

extension GetDisksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disks
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let disksContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Disk?].self, forKey: .disks)
        var disksDecoded0:[LightsailClientTypes.Disk]? = nil
        if let disksContainer = disksContainer {
            disksDecoded0 = [LightsailClientTypes.Disk]()
            for structure0 in disksContainer {
                if let structure0 = structure0 {
                    disksDecoded0?.append(structure0)
                }
            }
        }
        disks = disksDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension GetDistributionBundlesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDistributionBundlesInput()"}
}

extension GetDistributionBundlesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetDistributionBundlesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDistributionBundlesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDistributionBundlesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDistributionBundlesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDistributionBundlesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDistributionBundlesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDistributionBundlesOutputError>
}

public struct GetDistributionBundlesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDistributionBundlesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDistributionBundlesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDistributionBundlesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDistributionBundlesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDistributionBundlesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDistributionBundlesOutputError>
}

public struct GetDistributionBundlesInput: Swift.Equatable {

    public init() {}
}

struct GetDistributionBundlesInputBody: Swift.Equatable {
}

extension GetDistributionBundlesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDistributionBundlesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDistributionBundlesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDistributionBundlesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDistributionBundlesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDistributionBundlesOutputResponse(bundles: \(Swift.String(describing: bundles)))"}
}

extension GetDistributionBundlesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDistributionBundlesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bundles = output.bundles
        } else {
            self.bundles = nil
        }
    }
}

public struct GetDistributionBundlesOutputResponse: Swift.Equatable {
    /// <p>An object that describes a distribution bundle.</p>
    public let bundles: [LightsailClientTypes.DistributionBundle]?

    public init (
        bundles: [LightsailClientTypes.DistributionBundle]? = nil
    )
    {
        self.bundles = bundles
    }
}

struct GetDistributionBundlesOutputResponseBody: Swift.Equatable {
    public let bundles: [LightsailClientTypes.DistributionBundle]?
}

extension GetDistributionBundlesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundles
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundlesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.DistributionBundle?].self, forKey: .bundles)
        var bundlesDecoded0:[LightsailClientTypes.DistributionBundle]? = nil
        if let bundlesContainer = bundlesContainer {
            bundlesDecoded0 = [LightsailClientTypes.DistributionBundle]()
            for structure0 in bundlesContainer {
                if let structure0 = structure0 {
                    bundlesDecoded0?.append(structure0)
                }
            }
        }
        bundles = bundlesDecoded0
    }
}

public struct GetDistributionLatestCacheResetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDistributionLatestCacheResetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDistributionLatestCacheResetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDistributionLatestCacheResetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDistributionLatestCacheResetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDistributionLatestCacheResetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDistributionLatestCacheResetOutputError>
}

extension GetDistributionLatestCacheResetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDistributionLatestCacheResetInput(distributionName: \(Swift.String(describing: distributionName)))"}
}

extension GetDistributionLatestCacheResetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributionName = distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
    }
}

public struct GetDistributionLatestCacheResetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDistributionLatestCacheResetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDistributionLatestCacheResetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDistributionLatestCacheResetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDistributionLatestCacheResetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDistributionLatestCacheResetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDistributionLatestCacheResetOutputError>
}

public struct GetDistributionLatestCacheResetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDistributionLatestCacheResetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDistributionLatestCacheResetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDistributionLatestCacheResetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDistributionLatestCacheResetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDistributionLatestCacheResetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDistributionLatestCacheResetOutputError>
}

public struct GetDistributionLatestCacheResetInput: Swift.Equatable {
    /// <p>The name of the distribution for which to return the timestamp of the last cache
    ///       reset.</p>
    ///          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    ///       can specify.</p>
    ///          <p>When omitted, the response includes the latest cache reset timestamp of all your
    ///       distributions.</p>
    public let distributionName: Swift.String?

    public init (
        distributionName: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
    }
}

struct GetDistributionLatestCacheResetInputBody: Swift.Equatable {
    public let distributionName: Swift.String?
}

extension GetDistributionLatestCacheResetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
    }
}

extension GetDistributionLatestCacheResetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDistributionLatestCacheResetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDistributionLatestCacheResetOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDistributionLatestCacheResetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDistributionLatestCacheResetOutputResponse(createTime: \(Swift.String(describing: createTime)), status: \(Swift.String(describing: status)))"}
}

extension GetDistributionLatestCacheResetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDistributionLatestCacheResetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createTime = output.createTime
            self.status = output.status
        } else {
            self.createTime = nil
            self.status = nil
        }
    }
}

public struct GetDistributionLatestCacheResetOutputResponse: Swift.Equatable {
    /// <p>The timestamp of the last cache reset (e.g., <code>1479734909.17</code>) in Unix time
    ///       format.</p>
    public let createTime: ClientRuntime.Date?
    /// <p>The status of the last cache reset.</p>
    public let status: Swift.String?

    public init (
        createTime: ClientRuntime.Date? = nil,
        status: Swift.String? = nil
    )
    {
        self.createTime = createTime
        self.status = status
    }
}

struct GetDistributionLatestCacheResetOutputResponseBody: Swift.Equatable {
    public let status: Swift.String?
    public let createTime: ClientRuntime.Date?
}

extension GetDistributionLatestCacheResetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTime)
        createTime = createTimeDecoded
    }
}

public struct GetDistributionMetricDataInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDistributionMetricDataInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDistributionMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDistributionMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDistributionMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDistributionMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDistributionMetricDataOutputError>
}

extension GetDistributionMetricDataInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDistributionMetricDataInput(distributionName: \(Swift.String(describing: distributionName)), endTime: \(Swift.String(describing: endTime)), metricName: \(Swift.String(describing: metricName)), period: \(Swift.String(describing: period)), startTime: \(Swift.String(describing: startTime)), statistics: \(Swift.String(describing: statistics)), unit: \(Swift.String(describing: unit)))"}
}

extension GetDistributionMetricDataInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
        case endTime
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributionName = distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if period != 0 {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let statistics = statistics {
            var statisticsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statistics)
            for metricstatisticlist0 in statistics {
                try statisticsContainer.encode(metricstatisticlist0.rawValue)
            }
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }
}

public struct GetDistributionMetricDataInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDistributionMetricDataInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDistributionMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDistributionMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDistributionMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDistributionMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDistributionMetricDataOutputError>
}

public struct GetDistributionMetricDataInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDistributionMetricDataInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDistributionMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDistributionMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDistributionMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDistributionMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDistributionMetricDataOutputError>
}

public struct GetDistributionMetricDataInput: Swift.Equatable {
    /// <p>The name of the distribution for which to get metric data.</p>
    ///          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    ///       can specify.</p>
    public let distributionName: Swift.String?
    /// <p>The end of the time interval for which to get metric data.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in the Unix time format.</p>
    ///                <p>For example, if you wish to use an end time of October 1, 2018, at 9 PM UTC, specify
    ///             <code>1538427600</code> as the end time.</p>
    ///             </li>
    ///          </ul>
    ///          <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>The metric for which you want to return information.</p>
    ///          <p>Valid distribution metric names are listed below, along with the most useful
    ///         <code>statistics</code> to include in your request, and the published <code>unit</code>
    ///       value.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>Requests</code>
    ///                   </b> - The total number of viewer
    ///           requests received by your Lightsail distribution, for all HTTP methods, and for both
    ///           HTTP and HTTPS requests.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>None</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>BytesDownloaded</code>
    ///                   </b> - The number of bytes
    ///           downloaded by viewers for GET, HEAD, and OPTIONS requests.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>None</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>BytesUploaded </code>
    ///                   </b> - The number of bytes
    ///           uploaded to your origin by your Lightsail distribution, using POST and PUT
    ///           requests.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>None</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>TotalErrorRate</code>
    ///                   </b> - The percentage of all
    ///           viewer requests for which the response's HTTP status code was 4xx or 5xx.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Percent</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>4xxErrorRate</code>
    ///                   </b> - The percentage of all
    ///           viewer requests for which the response's HTTP status cod was 4xx. In these cases, the
    ///           client or client viewer may have made an error. For example, a status code of 404 (Not
    ///           Found) means that the client requested an object that could not be found.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Percent</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>5xxErrorRate</code>
    ///                   </b> - The percentage of all
    ///           viewer requests for which the response's HTTP status code was 5xx. In these cases, the
    ///           origin server did not satisfy the requests. For example, a status code of 503 (Service
    ///           Unavailable) means that the origin server is currently unavailable.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Percent</code>.</p>
    ///             </li>
    ///          </ul>
    public let metricName: LightsailClientTypes.DistributionMetricName?
    /// <p>The granularity, in seconds, for the metric data points that will be returned.</p>
    public let period: Swift.Int
    /// <p>The start of the time interval for which to get metric data.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in the Unix time format.</p>
    ///                <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, specify
    ///             <code>1538424000</code> as the start time.</p>
    ///             </li>
    ///          </ul>
    ///          <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p>
    public let startTime: ClientRuntime.Date?
    /// <p>The statistic for the metric.</p>
    ///          <p>The following statistics are available:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Minimum</code> - The lowest value observed during the specified period. Use this
    ///           value to determine low volumes of activity for your application.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Maximum</code> - The highest value observed during the specified period. Use
    ///           this value to determine high volumes of activity for your application.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Sum</code> - All values submitted for the matching metric added together. You
    ///           can use this statistic to determine the total volume of a metric.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Average</code> - The value of Sum / SampleCount during the specified period. By
    ///           comparing this statistic with the Minimum and Maximum values, you can determine the full
    ///           scope of a metric and how close the average use is to the Minimum and Maximum values. This
    ///           comparison helps you to know when to increase or decrease your resources.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SampleCount</code> - The count, or number, of data points used for the
    ///           statistical calculation.</p>
    ///             </li>
    ///          </ul>
    public let statistics: [LightsailClientTypes.MetricStatistic]?
    /// <p>The unit for the metric data request.</p>
    ///          <p>Valid units depend on the metric data being requested. For the valid units with each
    ///       available metric, see the <code>metricName</code> parameter.</p>
    public let unit: LightsailClientTypes.MetricUnit?

    public init (
        distributionName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        metricName: LightsailClientTypes.DistributionMetricName? = nil,
        period: Swift.Int = 0,
        startTime: ClientRuntime.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil,
        unit: LightsailClientTypes.MetricUnit? = nil
    )
    {
        self.distributionName = distributionName
        self.endTime = endTime
        self.metricName = metricName
        self.period = period
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

struct GetDistributionMetricDataInputBody: Swift.Equatable {
    public let distributionName: Swift.String?
    public let metricName: LightsailClientTypes.DistributionMetricName?
    public let startTime: ClientRuntime.Date?
    public let endTime: ClientRuntime.Date?
    public let period: Swift.Int
    public let unit: LightsailClientTypes.MetricUnit?
    public let statistics: [LightsailClientTypes.MetricStatistic]?
}

extension GetDistributionMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
        case endTime
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DistributionMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let periodDecoded = try containerValues.decode(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let unitDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricUnit.self, forKey: .unit)
        unit = unitDecoded
        let statisticsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricStatistic?].self, forKey: .statistics)
        var statisticsDecoded0:[LightsailClientTypes.MetricStatistic]? = nil
        if let statisticsContainer = statisticsContainer {
            statisticsDecoded0 = [LightsailClientTypes.MetricStatistic]()
            for string0 in statisticsContainer {
                if let string0 = string0 {
                    statisticsDecoded0?.append(string0)
                }
            }
        }
        statistics = statisticsDecoded0
    }
}

extension GetDistributionMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDistributionMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDistributionMetricDataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDistributionMetricDataOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDistributionMetricDataOutputResponse(metricData: \(Swift.String(describing: metricData)), metricName: \(Swift.String(describing: metricName)))"}
}

extension GetDistributionMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDistributionMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricData = output.metricData
            self.metricName = output.metricName
        } else {
            self.metricData = nil
            self.metricName = nil
        }
    }
}

public struct GetDistributionMetricDataOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the metric data returned.</p>
    public let metricData: [LightsailClientTypes.MetricDatapoint]?
    /// <p>The name of the metric returned.</p>
    public let metricName: LightsailClientTypes.DistributionMetricName?

    public init (
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.DistributionMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

struct GetDistributionMetricDataOutputResponseBody: Swift.Equatable {
    public let metricName: LightsailClientTypes.DistributionMetricName?
    public let metricData: [LightsailClientTypes.MetricDatapoint]?
}

extension GetDistributionMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricData
        case metricName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DistributionMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricDataContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricDatapoint?].self, forKey: .metricData)
        var metricDataDecoded0:[LightsailClientTypes.MetricDatapoint]? = nil
        if let metricDataContainer = metricDataContainer {
            metricDataDecoded0 = [LightsailClientTypes.MetricDatapoint]()
            for structure0 in metricDataContainer {
                if let structure0 = structure0 {
                    metricDataDecoded0?.append(structure0)
                }
            }
        }
        metricData = metricDataDecoded0
    }
}

public struct GetDistributionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDistributionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDistributionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDistributionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDistributionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDistributionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDistributionsOutputError>
}

extension GetDistributionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDistributionsInput(distributionName: \(Swift.String(describing: distributionName)), pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetDistributionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributionName = distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetDistributionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDistributionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDistributionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDistributionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDistributionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDistributionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDistributionsOutputError>
}

public struct GetDistributionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDistributionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDistributionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDistributionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDistributionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDistributionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDistributionsOutputError>
}

public struct GetDistributionsInput: Swift.Equatable {
    /// <p>The name of the distribution for which to return information.</p>
    ///          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    ///       can specify.</p>
    ///          <p>When omitted, the response includes all of your distributions in the AWS Region where
    ///       the request is made.</p>
    public let distributionName: Swift.String?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetDistributions</code> request. If your
    ///       results are paginated, the response will return a next page token that you can specify as the
    ///       page token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        distributionName: Swift.String? = nil,
        pageToken: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
        self.pageToken = pageToken
    }
}

struct GetDistributionsInputBody: Swift.Equatable {
    public let distributionName: Swift.String?
    public let pageToken: Swift.String?
}

extension GetDistributionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetDistributionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDistributionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDistributionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDistributionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDistributionsOutputResponse(distributions: \(Swift.String(describing: distributions)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetDistributionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDistributionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.distributions = output.distributions
            self.nextPageToken = output.nextPageToken
        } else {
            self.distributions = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetDistributionsOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe your distributions.</p>
    public let distributions: [LightsailClientTypes.LightsailDistribution]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetDistributions</code> request and
    ///       specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        distributions: [LightsailClientTypes.LightsailDistribution]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.distributions = distributions
        self.nextPageToken = nextPageToken
    }
}

struct GetDistributionsOutputResponseBody: Swift.Equatable {
    public let distributions: [LightsailClientTypes.LightsailDistribution]?
    public let nextPageToken: Swift.String?
}

extension GetDistributionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributions
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LightsailDistribution?].self, forKey: .distributions)
        var distributionsDecoded0:[LightsailClientTypes.LightsailDistribution]? = nil
        if let distributionsContainer = distributionsContainer {
            distributionsDecoded0 = [LightsailClientTypes.LightsailDistribution]()
            for structure0 in distributionsContainer {
                if let structure0 = structure0 {
                    distributionsDecoded0?.append(structure0)
                }
            }
        }
        distributions = distributionsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetDomainInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDomainInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDomainOutputError>
}

extension GetDomainInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDomainInput(domainName: \(Swift.String(describing: domainName)))"}
}

extension GetDomainInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

public struct GetDomainInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDomainInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDomainOutputError>
}

public struct GetDomainInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDomainInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDomainInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDomainOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDomainInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDomainOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDomainOutputError>
}

public struct GetDomainInput: Swift.Equatable {
    /// <p>The domain name for which your want to return information about.</p>
    public let domainName: Swift.String?

    public init (
        domainName: Swift.String? = nil
    )
    {
        self.domainName = domainName
    }
}

struct GetDomainInputBody: Swift.Equatable {
    public let domainName: Swift.String?
}

extension GetDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
    }
}

extension GetDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDomainOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDomainOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDomainOutputResponse(domain: \(Swift.String(describing: domain)))"}
}

extension GetDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domain = output.domain
        } else {
            self.domain = nil
        }
    }
}

public struct GetDomainOutputResponse: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about your get domain request.</p>
    public let domain: LightsailClientTypes.Domain?

    public init (
        domain: LightsailClientTypes.Domain? = nil
    )
    {
        self.domain = domain
    }
}

struct GetDomainOutputResponseBody: Swift.Equatable {
    public let domain: LightsailClientTypes.Domain?
}

extension GetDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Domain.self, forKey: .domain)
        domain = domainDecoded
    }
}

public struct GetDomainsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDomainsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDomainsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDomainsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDomainsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDomainsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDomainsOutputError>
}

extension GetDomainsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDomainsInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetDomainsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetDomainsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDomainsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDomainsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDomainsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDomainsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDomainsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDomainsOutputError>
}

public struct GetDomainsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDomainsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDomainsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDomainsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDomainsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDomainsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDomainsOutputError>
}

public struct GetDomainsInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetDomains</code> request. If your results
    ///       are paginated, the response will return a next page token that you can specify as the page
    ///       token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetDomainsInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetDomainsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetDomainsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDomainsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDomainsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDomainsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDomainsOutputResponse(domains: \(Swift.String(describing: domains)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetDomainsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDomainsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domains = output.domains
            self.nextPageToken = output.nextPageToken
        } else {
            self.domains = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetDomainsOutputResponse: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about each of the domain entries in the
    ///       user's account.</p>
    public let domains: [LightsailClientTypes.Domain]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetDomains</code> request and
    ///       specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        domains: [LightsailClientTypes.Domain]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.domains = domains
        self.nextPageToken = nextPageToken
    }
}

struct GetDomainsOutputResponseBody: Swift.Equatable {
    public let domains: [LightsailClientTypes.Domain]?
    public let nextPageToken: Swift.String?
}

extension GetDomainsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domains
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Domain?].self, forKey: .domains)
        var domainsDecoded0:[LightsailClientTypes.Domain]? = nil
        if let domainsContainer = domainsContainer {
            domainsDecoded0 = [LightsailClientTypes.Domain]()
            for structure0 in domainsContainer {
                if let structure0 = structure0 {
                    domainsDecoded0?.append(structure0)
                }
            }
        }
        domains = domainsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetExportSnapshotRecordsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetExportSnapshotRecordsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetExportSnapshotRecordsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetExportSnapshotRecordsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetExportSnapshotRecordsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetExportSnapshotRecordsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetExportSnapshotRecordsOutputError>
}

extension GetExportSnapshotRecordsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetExportSnapshotRecordsInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetExportSnapshotRecordsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetExportSnapshotRecordsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetExportSnapshotRecordsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetExportSnapshotRecordsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetExportSnapshotRecordsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetExportSnapshotRecordsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetExportSnapshotRecordsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetExportSnapshotRecordsOutputError>
}

public struct GetExportSnapshotRecordsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetExportSnapshotRecordsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetExportSnapshotRecordsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetExportSnapshotRecordsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetExportSnapshotRecordsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetExportSnapshotRecordsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetExportSnapshotRecordsOutputError>
}

public struct GetExportSnapshotRecordsInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetExportSnapshotRecords</code> request. If
    ///       your results are paginated, the response will return a next page token that you can specify as
    ///       the page token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetExportSnapshotRecordsInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetExportSnapshotRecordsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetExportSnapshotRecordsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetExportSnapshotRecordsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetExportSnapshotRecordsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetExportSnapshotRecordsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetExportSnapshotRecordsOutputResponse(exportSnapshotRecords: \(Swift.String(describing: exportSnapshotRecords)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetExportSnapshotRecordsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetExportSnapshotRecordsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.exportSnapshotRecords = output.exportSnapshotRecords
            self.nextPageToken = output.nextPageToken
        } else {
            self.exportSnapshotRecords = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetExportSnapshotRecordsOutputResponse: Swift.Equatable {
    /// <p>A list of objects describing the export snapshot records.</p>
    public let exportSnapshotRecords: [LightsailClientTypes.ExportSnapshotRecord]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetExportSnapshotRecords</code>
    ///       request and specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        exportSnapshotRecords: [LightsailClientTypes.ExportSnapshotRecord]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.exportSnapshotRecords = exportSnapshotRecords
        self.nextPageToken = nextPageToken
    }
}

struct GetExportSnapshotRecordsOutputResponseBody: Swift.Equatable {
    public let exportSnapshotRecords: [LightsailClientTypes.ExportSnapshotRecord]?
    public let nextPageToken: Swift.String?
}

extension GetExportSnapshotRecordsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportSnapshotRecords
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportSnapshotRecordsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ExportSnapshotRecord?].self, forKey: .exportSnapshotRecords)
        var exportSnapshotRecordsDecoded0:[LightsailClientTypes.ExportSnapshotRecord]? = nil
        if let exportSnapshotRecordsContainer = exportSnapshotRecordsContainer {
            exportSnapshotRecordsDecoded0 = [LightsailClientTypes.ExportSnapshotRecord]()
            for structure0 in exportSnapshotRecordsContainer {
                if let structure0 = structure0 {
                    exportSnapshotRecordsDecoded0?.append(structure0)
                }
            }
        }
        exportSnapshotRecords = exportSnapshotRecordsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetInstanceAccessDetailsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceAccessDetailsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceAccessDetailsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceAccessDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceAccessDetailsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceAccessDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceAccessDetailsOutputError>
}

extension GetInstanceAccessDetailsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstanceAccessDetailsInput(instanceName: \(Swift.String(describing: instanceName)), protocol: \(Swift.String(describing: `protocol`)))"}
}

extension GetInstanceAccessDetailsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case `protocol` = "protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
    }
}

public struct GetInstanceAccessDetailsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceAccessDetailsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceAccessDetailsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceAccessDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceAccessDetailsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceAccessDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceAccessDetailsOutputError>
}

public struct GetInstanceAccessDetailsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceAccessDetailsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceAccessDetailsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceAccessDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceAccessDetailsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceAccessDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceAccessDetailsOutputError>
}

public struct GetInstanceAccessDetailsInput: Swift.Equatable {
    /// <p>The protocol to use to connect to your instance. Defaults to <code>ssh</code>.</p>
    public let `protocol`: LightsailClientTypes.InstanceAccessProtocol?
    /// <p>The name of the instance to access.</p>
    public let instanceName: Swift.String?

    public init (
        `protocol`: LightsailClientTypes.InstanceAccessProtocol? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.`protocol` = `protocol`
        self.instanceName = instanceName
    }
}

struct GetInstanceAccessDetailsInputBody: Swift.Equatable {
    public let instanceName: Swift.String?
    public let `protocol`: LightsailClientTypes.InstanceAccessProtocol?
}

extension GetInstanceAccessDetailsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case `protocol` = "protocol"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceAccessProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}

extension GetInstanceAccessDetailsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstanceAccessDetailsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetInstanceAccessDetailsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceAccessDetailsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstanceAccessDetailsOutputResponse(accessDetails: \(Swift.String(describing: accessDetails)))"}
}

extension GetInstanceAccessDetailsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetInstanceAccessDetailsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accessDetails = output.accessDetails
        } else {
            self.accessDetails = nil
        }
    }
}

public struct GetInstanceAccessDetailsOutputResponse: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about a get instance access
    ///       request.</p>
    public let accessDetails: LightsailClientTypes.InstanceAccessDetails?

    public init (
        accessDetails: LightsailClientTypes.InstanceAccessDetails? = nil
    )
    {
        self.accessDetails = accessDetails
    }
}

struct GetInstanceAccessDetailsOutputResponseBody: Swift.Equatable {
    public let accessDetails: LightsailClientTypes.InstanceAccessDetails?
}

extension GetInstanceAccessDetailsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessDetails
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessDetailsDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceAccessDetails.self, forKey: .accessDetails)
        accessDetails = accessDetailsDecoded
    }
}

public struct GetInstanceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceOutputError>
}

extension GetInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstanceInput(instanceName: \(Swift.String(describing: instanceName)))"}
}

extension GetInstanceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

public struct GetInstanceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceOutputError>
}

public struct GetInstanceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceOutputError>
}

public struct GetInstanceInput: Swift.Equatable {
    /// <p>The name of the instance.</p>
    public let instanceName: Swift.String?

    public init (
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct GetInstanceInputBody: Swift.Equatable {
    public let instanceName: Swift.String?
}

extension GetInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

public struct GetInstanceMetricDataInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceMetricDataInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceMetricDataOutputError>
}

extension GetInstanceMetricDataInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstanceMetricDataInput(endTime: \(Swift.String(describing: endTime)), instanceName: \(Swift.String(describing: instanceName)), metricName: \(Swift.String(describing: metricName)), period: \(Swift.String(describing: period)), startTime: \(Swift.String(describing: startTime)), statistics: \(Swift.String(describing: statistics)), unit: \(Swift.String(describing: unit)))"}
}

extension GetInstanceMetricDataInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case instanceName
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if period != 0 {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let statistics = statistics {
            var statisticsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statistics)
            for metricstatisticlist0 in statistics {
                try statisticsContainer.encode(metricstatisticlist0.rawValue)
            }
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }
}

public struct GetInstanceMetricDataInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceMetricDataInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceMetricDataOutputError>
}

public struct GetInstanceMetricDataInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceMetricDataInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceMetricDataOutputError>
}

public struct GetInstanceMetricDataInput: Swift.Equatable {
    /// <p>The end time of the time period.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>The name of the instance for which you want to get metrics data.</p>
    public let instanceName: Swift.String?
    /// <p>The metric for which you want to return information.</p>
    ///          <p>Valid instance metric names are listed below, along with the most useful
    ///         <code>statistics</code> to include in your request, and the published <code>unit</code>
    ///       value.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>BurstCapacityPercentage</code>
    ///                   </b> - The percentage
    ///           of CPU performance available for your instance to burst above its baseline. Your instance
    ///           continuously accrues and consumes burst capacity. Burst capacity stops accruing when your
    ///           instance's <code>BurstCapacityPercentage</code> reaches 100%. For more information, see
    ///             <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-viewing-instance-burst-capacity">Viewing instance burst capacity in Amazon Lightsail</a>.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
    ///             <code>Average</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Percent</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>BurstCapacityTime</code>
    ///                   </b> - The available amount
    ///           of time for your instance to burst at 100% CPU utilization. Your instance continuously
    ///           accrues and consumes burst capacity. Burst capacity time stops accruing when your
    ///           instance's <code>BurstCapacityPercentage</code> metric reaches 100%.</p>
    ///                <p>Burst capacity time is consumed at the full rate only when your instance operates at
    ///           100% CPU utilization. For example, if your instance operates at 50% CPU utilization in the
    ///           burstable zone for a 5-minute period, then it consumes CPU burst capacity minutes at a 50%
    ///           rate in that period. Your instance consumed 2 minutes and 30 seconds of CPU burst capacity
    ///           minutes in the 5-minute period. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-viewing-instance-burst-capacity">Viewing instance burst capacity in Amazon Lightsail</a>.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
    ///             <code>Average</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Seconds</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>CPUUtilization</code>
    ///                   </b> - The percentage of
    ///           allocated compute units that are currently in use on the instance. This metric identifies
    ///           the processing power to run the applications on the instance. Tools in your operating
    ///           system can show a lower percentage than Lightsail when the instance is not allocated a
    ///           full processor core.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
    ///             <code>Average</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Percent</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>NetworkIn</code>
    ///                   </b> - The number of bytes received
    ///           on all network interfaces by the instance. This metric identifies the volume of incoming
    ///           network traffic to the instance. The number reported is the number of bytes received
    ///           during the period. Because this metric is reported in 5-minute intervals, divide the
    ///           reported number by 300 to find Bytes/second.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Bytes</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>NetworkOut</code>
    ///                   </b> - The number of bytes sent
    ///           out on all network interfaces by the instance. This metric identifies the volume of
    ///           outgoing network traffic from the instance. The number reported is the number of bytes
    ///           sent during the period. Because this metric is reported in 5-minute intervals, divide the
    ///           reported number by 300 to find Bytes/second.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Bytes</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>StatusCheckFailed</code>
    ///                   </b> - Reports whether the
    ///           instance passed or failed both the instance status check and the system status check. This
    ///           metric can be either 0 (passed) or 1 (failed). This metric data is available in 1-minute
    ///           (60 seconds) granularity.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>StatusCheckFailed_Instance</code>
    ///                   </b> - Reports
    ///           whether the instance passed or failed the instance status check. This metric can be either
    ///           0 (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds)
    ///           granularity.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>StatusCheckFailed_System</code>
    ///                   </b> - Reports
    ///           whether the instance passed or failed the system status check. This metric can be either 0
    ///           (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds)
    ///           granularity.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///          </ul>
    public let metricName: LightsailClientTypes.InstanceMetricName?
    /// <p>The granularity, in seconds, of the returned data points.</p>
    ///          <p>The <code>StatusCheckFailed</code>, <code>StatusCheckFailed_Instance</code>, and
    ///         <code>StatusCheckFailed_System</code> instance metric data is available in 1-minute (60
    ///       seconds) granularity. All other instance metric data is available in 5-minute (300 seconds)
    ///       granularity.</p>
    public let period: Swift.Int
    /// <p>The start time of the time period.</p>
    public let startTime: ClientRuntime.Date?
    /// <p>The statistic for the metric.</p>
    ///          <p>The following statistics are available:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Minimum</code> - The lowest value observed during the specified period. Use this
    ///           value to determine low volumes of activity for your application.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Maximum</code> - The highest value observed during the specified period. Use
    ///           this value to determine high volumes of activity for your application.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Sum</code> - All values submitted for the matching metric added together. You
    ///           can use this statistic to determine the total volume of a metric.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Average</code> - The value of Sum / SampleCount during the specified period. By
    ///           comparing this statistic with the Minimum and Maximum values, you can determine the full
    ///           scope of a metric and how close the average use is to the Minimum and Maximum values. This
    ///           comparison helps you to know when to increase or decrease your resources.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SampleCount</code> - The count, or number, of data points used for the
    ///           statistical calculation.</p>
    ///             </li>
    ///          </ul>
    public let statistics: [LightsailClientTypes.MetricStatistic]?
    /// <p>The unit for the metric data request. Valid units depend on the metric data being
    ///       requested. For the valid units to specify with each available metric, see the
    ///         <code>metricName</code> parameter.</p>
    public let unit: LightsailClientTypes.MetricUnit?

    public init (
        endTime: ClientRuntime.Date? = nil,
        instanceName: Swift.String? = nil,
        metricName: LightsailClientTypes.InstanceMetricName? = nil,
        period: Swift.Int = 0,
        startTime: ClientRuntime.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil,
        unit: LightsailClientTypes.MetricUnit? = nil
    )
    {
        self.endTime = endTime
        self.instanceName = instanceName
        self.metricName = metricName
        self.period = period
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

struct GetInstanceMetricDataInputBody: Swift.Equatable {
    public let instanceName: Swift.String?
    public let metricName: LightsailClientTypes.InstanceMetricName?
    public let period: Swift.Int
    public let startTime: ClientRuntime.Date?
    public let endTime: ClientRuntime.Date?
    public let unit: LightsailClientTypes.MetricUnit?
    public let statistics: [LightsailClientTypes.MetricStatistic]?
}

extension GetInstanceMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case instanceName
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let periodDecoded = try containerValues.decode(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let unitDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricUnit.self, forKey: .unit)
        unit = unitDecoded
        let statisticsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricStatistic?].self, forKey: .statistics)
        var statisticsDecoded0:[LightsailClientTypes.MetricStatistic]? = nil
        if let statisticsContainer = statisticsContainer {
            statisticsDecoded0 = [LightsailClientTypes.MetricStatistic]()
            for string0 in statisticsContainer {
                if let string0 = string0 {
                    statisticsDecoded0?.append(string0)
                }
            }
        }
        statistics = statisticsDecoded0
    }
}

extension GetInstanceMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstanceMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetInstanceMetricDataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceMetricDataOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstanceMetricDataOutputResponse(metricData: \(Swift.String(describing: metricData)), metricName: \(Swift.String(describing: metricName)))"}
}

extension GetInstanceMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetInstanceMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricData = output.metricData
            self.metricName = output.metricName
        } else {
            self.metricData = nil
            self.metricName = nil
        }
    }
}

public struct GetInstanceMetricDataOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the metric data returned.</p>
    public let metricData: [LightsailClientTypes.MetricDatapoint]?
    /// <p>The name of the metric returned.</p>
    public let metricName: LightsailClientTypes.InstanceMetricName?

    public init (
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.InstanceMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

struct GetInstanceMetricDataOutputResponseBody: Swift.Equatable {
    public let metricName: LightsailClientTypes.InstanceMetricName?
    public let metricData: [LightsailClientTypes.MetricDatapoint]?
}

extension GetInstanceMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricData
        case metricName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricDataContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricDatapoint?].self, forKey: .metricData)
        var metricDataDecoded0:[LightsailClientTypes.MetricDatapoint]? = nil
        if let metricDataContainer = metricDataContainer {
            metricDataDecoded0 = [LightsailClientTypes.MetricDatapoint]()
            for structure0 in metricDataContainer {
                if let structure0 = structure0 {
                    metricDataDecoded0?.append(structure0)
                }
            }
        }
        metricData = metricDataDecoded0
    }
}

extension GetInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetInstanceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstanceOutputResponse(instance: \(Swift.String(describing: instance)))"}
}

extension GetInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instance = output.instance
        } else {
            self.instance = nil
        }
    }
}

public struct GetInstanceOutputResponse: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about the specified instance.</p>
    public let instance: LightsailClientTypes.Instance?

    public init (
        instance: LightsailClientTypes.Instance? = nil
    )
    {
        self.instance = instance
    }
}

struct GetInstanceOutputResponseBody: Swift.Equatable {
    public let instance: LightsailClientTypes.Instance?
}

extension GetInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instance
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Instance.self, forKey: .instance)
        instance = instanceDecoded
    }
}

public struct GetInstancePortStatesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstancePortStatesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstancePortStatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstancePortStatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstancePortStatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstancePortStatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstancePortStatesOutputError>
}

extension GetInstancePortStatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstancePortStatesInput(instanceName: \(Swift.String(describing: instanceName)))"}
}

extension GetInstancePortStatesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

public struct GetInstancePortStatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstancePortStatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstancePortStatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstancePortStatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstancePortStatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstancePortStatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstancePortStatesOutputError>
}

public struct GetInstancePortStatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstancePortStatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstancePortStatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstancePortStatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstancePortStatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstancePortStatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstancePortStatesOutputError>
}

public struct GetInstancePortStatesInput: Swift.Equatable {
    /// <p>The name of the instance for which to return firewall port states.</p>
    public let instanceName: Swift.String?

    public init (
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct GetInstancePortStatesInputBody: Swift.Equatable {
    public let instanceName: Swift.String?
}

extension GetInstancePortStatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension GetInstancePortStatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstancePortStatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetInstancePortStatesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstancePortStatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstancePortStatesOutputResponse(portStates: \(Swift.String(describing: portStates)))"}
}

extension GetInstancePortStatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetInstancePortStatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.portStates = output.portStates
        } else {
            self.portStates = nil
        }
    }
}

public struct GetInstancePortStatesOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the firewall port states for the specified
    ///       instance.</p>
    public let portStates: [LightsailClientTypes.InstancePortState]?

    public init (
        portStates: [LightsailClientTypes.InstancePortState]? = nil
    )
    {
        self.portStates = portStates
    }
}

struct GetInstancePortStatesOutputResponseBody: Swift.Equatable {
    public let portStates: [LightsailClientTypes.InstancePortState]?
}

extension GetInstancePortStatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case portStates
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portStatesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.InstancePortState?].self, forKey: .portStates)
        var portStatesDecoded0:[LightsailClientTypes.InstancePortState]? = nil
        if let portStatesContainer = portStatesContainer {
            portStatesDecoded0 = [LightsailClientTypes.InstancePortState]()
            for structure0 in portStatesContainer {
                if let structure0 = structure0 {
                    portStatesDecoded0?.append(structure0)
                }
            }
        }
        portStates = portStatesDecoded0
    }
}

public struct GetInstanceSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceSnapshotOutputError>
}

extension GetInstanceSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstanceSnapshotInput(instanceSnapshotName: \(Swift.String(describing: instanceSnapshotName)))"}
}

extension GetInstanceSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceSnapshotName = instanceSnapshotName {
            try encodeContainer.encode(instanceSnapshotName, forKey: .instanceSnapshotName)
        }
    }
}

public struct GetInstanceSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceSnapshotOutputError>
}

public struct GetInstanceSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceSnapshotOutputError>
}

public struct GetInstanceSnapshotInput: Swift.Equatable {
    /// <p>The name of the snapshot for which you are requesting information.</p>
    public let instanceSnapshotName: Swift.String?

    public init (
        instanceSnapshotName: Swift.String? = nil
    )
    {
        self.instanceSnapshotName = instanceSnapshotName
    }
}

struct GetInstanceSnapshotInputBody: Swift.Equatable {
    public let instanceSnapshotName: Swift.String?
}

extension GetInstanceSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceSnapshotName)
        instanceSnapshotName = instanceSnapshotNameDecoded
    }
}

extension GetInstanceSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstanceSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetInstanceSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstanceSnapshotOutputResponse(instanceSnapshot: \(Swift.String(describing: instanceSnapshot)))"}
}

extension GetInstanceSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetInstanceSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceSnapshot = output.instanceSnapshot
        } else {
            self.instanceSnapshot = nil
        }
    }
}

public struct GetInstanceSnapshotOutputResponse: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about the results of your get instance
    ///       snapshot request.</p>
    public let instanceSnapshot: LightsailClientTypes.InstanceSnapshot?

    public init (
        instanceSnapshot: LightsailClientTypes.InstanceSnapshot? = nil
    )
    {
        self.instanceSnapshot = instanceSnapshot
    }
}

struct GetInstanceSnapshotOutputResponseBody: Swift.Equatable {
    public let instanceSnapshot: LightsailClientTypes.InstanceSnapshot?
}

extension GetInstanceSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSnapshot
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceSnapshotDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceSnapshot.self, forKey: .instanceSnapshot)
        instanceSnapshot = instanceSnapshotDecoded
    }
}

public struct GetInstanceSnapshotsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceSnapshotsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceSnapshotsOutputError>
}

extension GetInstanceSnapshotsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstanceSnapshotsInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetInstanceSnapshotsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetInstanceSnapshotsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceSnapshotsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceSnapshotsOutputError>
}

public struct GetInstanceSnapshotsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceSnapshotsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceSnapshotsOutputError>
}

public struct GetInstanceSnapshotsInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetInstanceSnapshots</code> request. If your
    ///       results are paginated, the response will return a next page token that you can specify as the
    ///       page token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetInstanceSnapshotsInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetInstanceSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetInstanceSnapshotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstanceSnapshotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetInstanceSnapshotsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceSnapshotsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstanceSnapshotsOutputResponse(instanceSnapshots: \(Swift.String(describing: instanceSnapshots)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetInstanceSnapshotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetInstanceSnapshotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceSnapshots = output.instanceSnapshots
            self.nextPageToken = output.nextPageToken
        } else {
            self.instanceSnapshots = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetInstanceSnapshotsOutputResponse: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about the results of your get instance
    ///       snapshots request.</p>
    public let instanceSnapshots: [LightsailClientTypes.InstanceSnapshot]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetInstanceSnapshots</code> request
    ///       and specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        instanceSnapshots: [LightsailClientTypes.InstanceSnapshot]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.instanceSnapshots = instanceSnapshots
        self.nextPageToken = nextPageToken
    }
}

struct GetInstanceSnapshotsOutputResponseBody: Swift.Equatable {
    public let instanceSnapshots: [LightsailClientTypes.InstanceSnapshot]?
    public let nextPageToken: Swift.String?
}

extension GetInstanceSnapshotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSnapshots
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceSnapshotsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.InstanceSnapshot?].self, forKey: .instanceSnapshots)
        var instanceSnapshotsDecoded0:[LightsailClientTypes.InstanceSnapshot]? = nil
        if let instanceSnapshotsContainer = instanceSnapshotsContainer {
            instanceSnapshotsDecoded0 = [LightsailClientTypes.InstanceSnapshot]()
            for structure0 in instanceSnapshotsContainer {
                if let structure0 = structure0 {
                    instanceSnapshotsDecoded0?.append(structure0)
                }
            }
        }
        instanceSnapshots = instanceSnapshotsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetInstanceStateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceStateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceStateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceStateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceStateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceStateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceStateOutputError>
}

extension GetInstanceStateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstanceStateInput(instanceName: \(Swift.String(describing: instanceName)))"}
}

extension GetInstanceStateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

public struct GetInstanceStateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceStateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceStateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceStateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceStateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceStateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceStateOutputError>
}

public struct GetInstanceStateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstanceStateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstanceStateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstanceStateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstanceStateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstanceStateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstanceStateOutputError>
}

public struct GetInstanceStateInput: Swift.Equatable {
    /// <p>The name of the instance to get state information about.</p>
    public let instanceName: Swift.String?

    public init (
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct GetInstanceStateInputBody: Swift.Equatable {
    public let instanceName: Swift.String?
}

extension GetInstanceStateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension GetInstanceStateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstanceStateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetInstanceStateOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceStateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstanceStateOutputResponse(state: \(Swift.String(describing: state)))"}
}

extension GetInstanceStateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetInstanceStateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.state = output.state
        } else {
            self.state = nil
        }
    }
}

public struct GetInstanceStateOutputResponse: Swift.Equatable {
    /// <p>The state of the instance.</p>
    public let state: LightsailClientTypes.InstanceState?

    public init (
        state: LightsailClientTypes.InstanceState? = nil
    )
    {
        self.state = state
    }
}

struct GetInstanceStateOutputResponseBody: Swift.Equatable {
    public let state: LightsailClientTypes.InstanceState?
}

extension GetInstanceStateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case state
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceState.self, forKey: .state)
        state = stateDecoded
    }
}

public struct GetInstancesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstancesOutputError>
}

extension GetInstancesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstancesInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetInstancesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetInstancesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstancesOutputError>
}

public struct GetInstancesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInstancesOutputError>
}

public struct GetInstancesInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetInstances</code> request. If your results
    ///       are paginated, the response will return a next page token that you can specify as the page
    ///       token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetInstancesInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetInstancesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstancesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInstancesOutputResponse(instances: \(Swift.String(describing: instances)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instances = output.instances
            self.nextPageToken = output.nextPageToken
        } else {
            self.instances = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetInstancesOutputResponse: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about your instances.</p>
    public let instances: [LightsailClientTypes.Instance]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetInstances</code> request and
    ///       specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        instances: [LightsailClientTypes.Instance]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.instances = instances
        self.nextPageToken = nextPageToken
    }
}

struct GetInstancesOutputResponseBody: Swift.Equatable {
    public let instances: [LightsailClientTypes.Instance]?
    public let nextPageToken: Swift.String?
}

extension GetInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instances
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Instance?].self, forKey: .instances)
        var instancesDecoded0:[LightsailClientTypes.Instance]? = nil
        if let instancesContainer = instancesContainer {
            instancesDecoded0 = [LightsailClientTypes.Instance]()
            for structure0 in instancesContainer {
                if let structure0 = structure0 {
                    instancesDecoded0?.append(structure0)
                }
            }
        }
        instances = instancesDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetKeyPairInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetKeyPairInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetKeyPairInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetKeyPairInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetKeyPairOutputError>
}

extension GetKeyPairInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetKeyPairInput(keyPairName: \(Swift.String(describing: keyPairName)))"}
}

extension GetKeyPairInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyPairName = keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
    }
}

public struct GetKeyPairInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetKeyPairInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetKeyPairInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetKeyPairInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetKeyPairOutputError>
}

public struct GetKeyPairInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetKeyPairInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetKeyPairInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetKeyPairInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetKeyPairOutputError>
}

public struct GetKeyPairInput: Swift.Equatable {
    /// <p>The name of the key pair for which you are requesting information.</p>
    public let keyPairName: Swift.String?

    public init (
        keyPairName: Swift.String? = nil
    )
    {
        self.keyPairName = keyPairName
    }
}

struct GetKeyPairInputBody: Swift.Equatable {
    public let keyPairName: Swift.String?
}

extension GetKeyPairInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
    }
}

extension GetKeyPairOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetKeyPairOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetKeyPairOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetKeyPairOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetKeyPairOutputResponse(keyPair: \(Swift.String(describing: keyPair)))"}
}

extension GetKeyPairOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetKeyPairOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyPair = output.keyPair
        } else {
            self.keyPair = nil
        }
    }
}

public struct GetKeyPairOutputResponse: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about the key pair.</p>
    public let keyPair: LightsailClientTypes.KeyPair?

    public init (
        keyPair: LightsailClientTypes.KeyPair? = nil
    )
    {
        self.keyPair = keyPair
    }
}

struct GetKeyPairOutputResponseBody: Swift.Equatable {
    public let keyPair: LightsailClientTypes.KeyPair?
}

extension GetKeyPairOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPair
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.KeyPair.self, forKey: .keyPair)
        keyPair = keyPairDecoded
    }
}

public struct GetKeyPairsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetKeyPairsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetKeyPairsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetKeyPairsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetKeyPairsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetKeyPairsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetKeyPairsOutputError>
}

extension GetKeyPairsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetKeyPairsInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetKeyPairsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetKeyPairsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetKeyPairsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetKeyPairsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetKeyPairsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetKeyPairsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetKeyPairsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetKeyPairsOutputError>
}

public struct GetKeyPairsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetKeyPairsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetKeyPairsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetKeyPairsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetKeyPairsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetKeyPairsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetKeyPairsOutputError>
}

public struct GetKeyPairsInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetKeyPairs</code> request. If your results
    ///       are paginated, the response will return a next page token that you can specify as the page
    ///       token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetKeyPairsInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetKeyPairsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetKeyPairsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetKeyPairsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetKeyPairsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetKeyPairsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetKeyPairsOutputResponse(keyPairs: \(Swift.String(describing: keyPairs)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetKeyPairsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetKeyPairsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyPairs = output.keyPairs
            self.nextPageToken = output.nextPageToken
        } else {
            self.keyPairs = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetKeyPairsOutputResponse: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about the key pairs.</p>
    public let keyPairs: [LightsailClientTypes.KeyPair]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetKeyPairs</code> request and
    ///       specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        keyPairs: [LightsailClientTypes.KeyPair]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.keyPairs = keyPairs
        self.nextPageToken = nextPageToken
    }
}

struct GetKeyPairsOutputResponseBody: Swift.Equatable {
    public let keyPairs: [LightsailClientTypes.KeyPair]?
    public let nextPageToken: Swift.String?
}

extension GetKeyPairsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairs
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.KeyPair?].self, forKey: .keyPairs)
        var keyPairsDecoded0:[LightsailClientTypes.KeyPair]? = nil
        if let keyPairsContainer = keyPairsContainer {
            keyPairsDecoded0 = [LightsailClientTypes.KeyPair]()
            for structure0 in keyPairsContainer {
                if let structure0 = structure0 {
                    keyPairsDecoded0?.append(structure0)
                }
            }
        }
        keyPairs = keyPairsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetLoadBalancerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoadBalancerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoadBalancerOutputError>
}

extension GetLoadBalancerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLoadBalancerInput(loadBalancerName: \(Swift.String(describing: loadBalancerName)))"}
}

extension GetLoadBalancerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

public struct GetLoadBalancerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoadBalancerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoadBalancerOutputError>
}

public struct GetLoadBalancerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoadBalancerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoadBalancerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoadBalancerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoadBalancerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoadBalancerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoadBalancerOutputError>
}

public struct GetLoadBalancerInput: Swift.Equatable {
    /// <p>The name of the load balancer.</p>
    public let loadBalancerName: Swift.String?

    public init (
        loadBalancerName: Swift.String? = nil
    )
    {
        self.loadBalancerName = loadBalancerName
    }
}

struct GetLoadBalancerInputBody: Swift.Equatable {
    public let loadBalancerName: Swift.String?
}

extension GetLoadBalancerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
    }
}

public struct GetLoadBalancerMetricDataInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoadBalancerMetricDataInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoadBalancerMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoadBalancerMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoadBalancerMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoadBalancerMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoadBalancerMetricDataOutputError>
}

extension GetLoadBalancerMetricDataInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLoadBalancerMetricDataInput(endTime: \(Swift.String(describing: endTime)), loadBalancerName: \(Swift.String(describing: loadBalancerName)), metricName: \(Swift.String(describing: metricName)), period: \(Swift.String(describing: period)), startTime: \(Swift.String(describing: startTime)), statistics: \(Swift.String(describing: statistics)), unit: \(Swift.String(describing: unit)))"}
}

extension GetLoadBalancerMetricDataInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case loadBalancerName
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if period != 0 {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let statistics = statistics {
            var statisticsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statistics)
            for metricstatisticlist0 in statistics {
                try statisticsContainer.encode(metricstatisticlist0.rawValue)
            }
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }
}

public struct GetLoadBalancerMetricDataInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoadBalancerMetricDataInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoadBalancerMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoadBalancerMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoadBalancerMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoadBalancerMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoadBalancerMetricDataOutputError>
}

public struct GetLoadBalancerMetricDataInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoadBalancerMetricDataInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoadBalancerMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoadBalancerMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoadBalancerMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoadBalancerMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoadBalancerMetricDataOutputError>
}

public struct GetLoadBalancerMetricDataInput: Swift.Equatable {
    /// <p>The end time of the period.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>The name of the load balancer.</p>
    public let loadBalancerName: Swift.String?
    /// <p>The metric for which you want to return information.</p>
    ///          <p>Valid load balancer metric names are listed below, along with the most useful
    ///         <code>statistics</code> to include in your request, and the published <code>unit</code>
    ///       value.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>ClientTLSNegotiationErrorCount</code>
    ///                   </b> - The
    ///           number of TLS connections initiated by the client that did not establish a session with
    ///           the load balancer due to a TLS error generated by the load balancer. Possible causes
    ///           include a mismatch of ciphers or protocols.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>HealthyHostCount</code>
    ///                   </b> - The number of target
    ///           instances that are considered healthy.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic are <code>Average</code>,
    ///             <code>Minimum</code>, and <code>Maximum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>HTTPCode_Instance_2XX_Count</code>
    ///                   </b> - The number
    ///           of HTTP 2XX response codes generated by the target instances. This does not include any
    ///           response codes generated by the load balancer.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
    ///             <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
    ///             <code>1</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>HTTPCode_Instance_3XX_Count</code>
    ///                   </b> - The number
    ///           of HTTP 3XX response codes generated by the target instances. This does not include any
    ///           response codes generated by the load balancer.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
    ///             <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
    ///             <code>1</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>HTTPCode_Instance_4XX_Count</code>
    ///                   </b> - The number
    ///           of HTTP 4XX response codes generated by the target instances. This does not include any
    ///           response codes generated by the load balancer.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
    ///             <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
    ///             <code>1</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>HTTPCode_Instance_5XX_Count</code>
    ///                   </b> - The number
    ///           of HTTP 5XX response codes generated by the target instances. This does not include any
    ///           response codes generated by the load balancer.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
    ///             <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
    ///             <code>1</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>HTTPCode_LB_4XX_Count</code>
    ///                   </b> - The number of
    ///           HTTP 4XX client error codes that originated from the load balancer. Client errors are
    ///           generated when requests are malformed or incomplete. These requests were not received by
    ///           the target instance. This count does not include response codes generated by the target
    ///           instances.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
    ///             <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
    ///             <code>1</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>HTTPCode_LB_5XX_Count</code>
    ///                   </b> - The number of
    ///           HTTP 5XX server error codes that originated from the load balancer. This does not include
    ///           any response codes generated by the target instance. This metric is reported if there are
    ///           no healthy instances attached to the load balancer, or if the request rate exceeds the
    ///           capacity of the instances (spillover) or the load balancer.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
    ///             <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
    ///             <code>1</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>InstanceResponseTime</code>
    ///                   </b> - The time elapsed,
    ///           in seconds, after the request leaves the load balancer until a response from the target
    ///           instance is received.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Seconds</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>RejectedConnectionCount</code>
    ///                   </b> - The number of
    ///           connections that were rejected because the load balancer had reached its maximum number of
    ///           connections.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>RequestCount</code>
    ///                   </b> - The number of requests
    ///           processed over IPv4. This count includes only the requests with a response generated by a
    ///           target instance of the load balancer.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
    ///             <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
    ///             <code>1</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>UnhealthyHostCount</code>
    ///                   </b> - The number of
    ///           target instances that are considered unhealthy.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic are <code>Average</code>,
    ///             <code>Minimum</code>, and <code>Maximum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///          </ul>
    public let metricName: LightsailClientTypes.LoadBalancerMetricName?
    /// <p>The granularity, in seconds, of the returned data points.</p>
    public let period: Swift.Int
    /// <p>The start time of the period.</p>
    public let startTime: ClientRuntime.Date?
    /// <p>The statistic for the metric.</p>
    ///          <p>The following statistics are available:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Minimum</code> - The lowest value observed during the specified period. Use this
    ///           value to determine low volumes of activity for your application.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Maximum</code> - The highest value observed during the specified period. Use
    ///           this value to determine high volumes of activity for your application.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Sum</code> - All values submitted for the matching metric added together. You
    ///           can use this statistic to determine the total volume of a metric.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Average</code> - The value of Sum / SampleCount during the specified period. By
    ///           comparing this statistic with the Minimum and Maximum values, you can determine the full
    ///           scope of a metric and how close the average use is to the Minimum and Maximum values. This
    ///           comparison helps you to know when to increase or decrease your resources.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SampleCount</code> - The count, or number, of data points used for the
    ///           statistical calculation.</p>
    ///             </li>
    ///          </ul>
    public let statistics: [LightsailClientTypes.MetricStatistic]?
    /// <p>The unit for the metric data request. Valid units depend on the metric data being
    ///       requested. For the valid units with each available metric, see the <code>metricName</code>
    ///       parameter.</p>
    public let unit: LightsailClientTypes.MetricUnit?

    public init (
        endTime: ClientRuntime.Date? = nil,
        loadBalancerName: Swift.String? = nil,
        metricName: LightsailClientTypes.LoadBalancerMetricName? = nil,
        period: Swift.Int = 0,
        startTime: ClientRuntime.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil,
        unit: LightsailClientTypes.MetricUnit? = nil
    )
    {
        self.endTime = endTime
        self.loadBalancerName = loadBalancerName
        self.metricName = metricName
        self.period = period
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

struct GetLoadBalancerMetricDataInputBody: Swift.Equatable {
    public let loadBalancerName: Swift.String?
    public let metricName: LightsailClientTypes.LoadBalancerMetricName?
    public let period: Swift.Int
    public let startTime: ClientRuntime.Date?
    public let endTime: ClientRuntime.Date?
    public let unit: LightsailClientTypes.MetricUnit?
    public let statistics: [LightsailClientTypes.MetricStatistic]?
}

extension GetLoadBalancerMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case loadBalancerName
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let periodDecoded = try containerValues.decode(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let unitDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricUnit.self, forKey: .unit)
        unit = unitDecoded
        let statisticsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricStatistic?].self, forKey: .statistics)
        var statisticsDecoded0:[LightsailClientTypes.MetricStatistic]? = nil
        if let statisticsContainer = statisticsContainer {
            statisticsDecoded0 = [LightsailClientTypes.MetricStatistic]()
            for string0 in statisticsContainer {
                if let string0 = string0 {
                    statisticsDecoded0?.append(string0)
                }
            }
        }
        statistics = statisticsDecoded0
    }
}

extension GetLoadBalancerMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLoadBalancerMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetLoadBalancerMetricDataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLoadBalancerMetricDataOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLoadBalancerMetricDataOutputResponse(metricData: \(Swift.String(describing: metricData)), metricName: \(Swift.String(describing: metricName)))"}
}

extension GetLoadBalancerMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetLoadBalancerMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricData = output.metricData
            self.metricName = output.metricName
        } else {
            self.metricData = nil
            self.metricName = nil
        }
    }
}

public struct GetLoadBalancerMetricDataOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the metric data returned.</p>
    public let metricData: [LightsailClientTypes.MetricDatapoint]?
    /// <p>The name of the metric returned.</p>
    public let metricName: LightsailClientTypes.LoadBalancerMetricName?

    public init (
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.LoadBalancerMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

struct GetLoadBalancerMetricDataOutputResponseBody: Swift.Equatable {
    public let metricName: LightsailClientTypes.LoadBalancerMetricName?
    public let metricData: [LightsailClientTypes.MetricDatapoint]?
}

extension GetLoadBalancerMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricData
        case metricName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricDataContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricDatapoint?].self, forKey: .metricData)
        var metricDataDecoded0:[LightsailClientTypes.MetricDatapoint]? = nil
        if let metricDataContainer = metricDataContainer {
            metricDataDecoded0 = [LightsailClientTypes.MetricDatapoint]()
            for structure0 in metricDataContainer {
                if let structure0 = structure0 {
                    metricDataDecoded0?.append(structure0)
                }
            }
        }
        metricData = metricDataDecoded0
    }
}

extension GetLoadBalancerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLoadBalancerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetLoadBalancerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLoadBalancerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLoadBalancerOutputResponse(loadBalancer: \(Swift.String(describing: loadBalancer)))"}
}

extension GetLoadBalancerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetLoadBalancerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loadBalancer = output.loadBalancer
        } else {
            self.loadBalancer = nil
        }
    }
}

public struct GetLoadBalancerOutputResponse: Swift.Equatable {
    /// <p>An object containing information about your load balancer.</p>
    public let loadBalancer: LightsailClientTypes.LoadBalancer?

    public init (
        loadBalancer: LightsailClientTypes.LoadBalancer? = nil
    )
    {
        self.loadBalancer = loadBalancer
    }
}

struct GetLoadBalancerOutputResponseBody: Swift.Equatable {
    public let loadBalancer: LightsailClientTypes.LoadBalancer?
}

extension GetLoadBalancerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancer
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancer.self, forKey: .loadBalancer)
        loadBalancer = loadBalancerDecoded
    }
}

public struct GetLoadBalancerTlsCertificatesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoadBalancerTlsCertificatesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoadBalancerTlsCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoadBalancerTlsCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoadBalancerTlsCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoadBalancerTlsCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoadBalancerTlsCertificatesOutputError>
}

extension GetLoadBalancerTlsCertificatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLoadBalancerTlsCertificatesInput(loadBalancerName: \(Swift.String(describing: loadBalancerName)))"}
}

extension GetLoadBalancerTlsCertificatesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

public struct GetLoadBalancerTlsCertificatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoadBalancerTlsCertificatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoadBalancerTlsCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoadBalancerTlsCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoadBalancerTlsCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoadBalancerTlsCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoadBalancerTlsCertificatesOutputError>
}

public struct GetLoadBalancerTlsCertificatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoadBalancerTlsCertificatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoadBalancerTlsCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoadBalancerTlsCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoadBalancerTlsCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoadBalancerTlsCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoadBalancerTlsCertificatesOutputError>
}

public struct GetLoadBalancerTlsCertificatesInput: Swift.Equatable {
    /// <p>The name of the load balancer you associated with your SSL/TLS certificate.</p>
    public let loadBalancerName: Swift.String?

    public init (
        loadBalancerName: Swift.String? = nil
    )
    {
        self.loadBalancerName = loadBalancerName
    }
}

struct GetLoadBalancerTlsCertificatesInputBody: Swift.Equatable {
    public let loadBalancerName: Swift.String?
}

extension GetLoadBalancerTlsCertificatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
    }
}

extension GetLoadBalancerTlsCertificatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLoadBalancerTlsCertificatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetLoadBalancerTlsCertificatesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLoadBalancerTlsCertificatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLoadBalancerTlsCertificatesOutputResponse(tlsCertificates: \(Swift.String(describing: tlsCertificates)))"}
}

extension GetLoadBalancerTlsCertificatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetLoadBalancerTlsCertificatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tlsCertificates = output.tlsCertificates
        } else {
            self.tlsCertificates = nil
        }
    }
}

public struct GetLoadBalancerTlsCertificatesOutputResponse: Swift.Equatable {
    /// <p>An array of LoadBalancerTlsCertificate objects describing your SSL/TLS
    ///       certificates.</p>
    public let tlsCertificates: [LightsailClientTypes.LoadBalancerTlsCertificate]?

    public init (
        tlsCertificates: [LightsailClientTypes.LoadBalancerTlsCertificate]? = nil
    )
    {
        self.tlsCertificates = tlsCertificates
    }
}

struct GetLoadBalancerTlsCertificatesOutputResponseBody: Swift.Equatable {
    public let tlsCertificates: [LightsailClientTypes.LoadBalancerTlsCertificate]?
}

extension GetLoadBalancerTlsCertificatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tlsCertificates
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tlsCertificatesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LoadBalancerTlsCertificate?].self, forKey: .tlsCertificates)
        var tlsCertificatesDecoded0:[LightsailClientTypes.LoadBalancerTlsCertificate]? = nil
        if let tlsCertificatesContainer = tlsCertificatesContainer {
            tlsCertificatesDecoded0 = [LightsailClientTypes.LoadBalancerTlsCertificate]()
            for structure0 in tlsCertificatesContainer {
                if let structure0 = structure0 {
                    tlsCertificatesDecoded0?.append(structure0)
                }
            }
        }
        tlsCertificates = tlsCertificatesDecoded0
    }
}

public struct GetLoadBalancersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoadBalancersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoadBalancersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoadBalancersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoadBalancersOutputError>
}

extension GetLoadBalancersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLoadBalancersInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetLoadBalancersInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetLoadBalancersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoadBalancersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoadBalancersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoadBalancersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoadBalancersOutputError>
}

public struct GetLoadBalancersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLoadBalancersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLoadBalancersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLoadBalancersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLoadBalancersOutputError>
}

public struct GetLoadBalancersInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetLoadBalancers</code> request. If your
    ///       results are paginated, the response will return a next page token that you can specify as the
    ///       page token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetLoadBalancersInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetLoadBalancersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetLoadBalancersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLoadBalancersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetLoadBalancersOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLoadBalancersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLoadBalancersOutputResponse(loadBalancers: \(Swift.String(describing: loadBalancers)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetLoadBalancersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetLoadBalancersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loadBalancers = output.loadBalancers
            self.nextPageToken = output.nextPageToken
        } else {
            self.loadBalancers = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetLoadBalancersOutputResponse: Swift.Equatable {
    /// <p>An array of LoadBalancer objects describing your load balancers.</p>
    public let loadBalancers: [LightsailClientTypes.LoadBalancer]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetLoadBalancers</code> request and
    ///       specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        loadBalancers: [LightsailClientTypes.LoadBalancer]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.loadBalancers = loadBalancers
        self.nextPageToken = nextPageToken
    }
}

struct GetLoadBalancersOutputResponseBody: Swift.Equatable {
    public let loadBalancers: [LightsailClientTypes.LoadBalancer]?
    public let nextPageToken: Swift.String?
}

extension GetLoadBalancersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancers
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancersContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LoadBalancer?].self, forKey: .loadBalancers)
        var loadBalancersDecoded0:[LightsailClientTypes.LoadBalancer]? = nil
        if let loadBalancersContainer = loadBalancersContainer {
            loadBalancersDecoded0 = [LightsailClientTypes.LoadBalancer]()
            for structure0 in loadBalancersContainer {
                if let structure0 = structure0 {
                    loadBalancersDecoded0?.append(structure0)
                }
            }
        }
        loadBalancers = loadBalancersDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetOperationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOperationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOperationOutputError>
}

extension GetOperationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOperationInput(operationId: \(Swift.String(describing: operationId)))"}
}

extension GetOperationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let operationId = operationId {
            try encodeContainer.encode(operationId, forKey: .operationId)
        }
    }
}

public struct GetOperationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOperationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOperationOutputError>
}

public struct GetOperationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOperationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOperationOutputError>
}

public struct GetOperationInput: Swift.Equatable {
    /// <p>A GUID used to identify the operation.</p>
    public let operationId: Swift.String?

    public init (
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

struct GetOperationInputBody: Swift.Equatable {
    public let operationId: Swift.String?
}

extension GetOperationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
    }
}

extension GetOperationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetOperationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetOperationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetOperationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOperationOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension GetOperationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetOperationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct GetOperationOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct GetOperationOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension GetOperationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

public struct GetOperationsForResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOperationsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOperationsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOperationsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOperationsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOperationsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOperationsForResourceOutputError>
}

extension GetOperationsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOperationsForResourceInput(pageToken: \(Swift.String(describing: pageToken)), resourceName: \(Swift.String(describing: resourceName)))"}
}

extension GetOperationsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
        case resourceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
    }
}

public struct GetOperationsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOperationsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOperationsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOperationsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOperationsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOperationsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOperationsForResourceOutputError>
}

public struct GetOperationsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOperationsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOperationsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOperationsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOperationsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOperationsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOperationsForResourceOutputError>
}

public struct GetOperationsForResourceInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetOperationsForResource</code> request. If
    ///       your results are paginated, the response will return a next page token that you can specify as
    ///       the page token in a subsequent request.</p>
    public let pageToken: Swift.String?
    /// <p>The name of the resource for which you are requesting information.</p>
    public let resourceName: Swift.String?

    public init (
        pageToken: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
        self.resourceName = resourceName
    }
}

struct GetOperationsForResourceInputBody: Swift.Equatable {
    public let resourceName: Swift.String?
    public let pageToken: Swift.String?
}

extension GetOperationsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
        case resourceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetOperationsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetOperationsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetOperationsForResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetOperationsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOperationsForResourceOutputResponse(nextPageCount: \(Swift.String(describing: nextPageCount)), nextPageToken: \(Swift.String(describing: nextPageToken)), operations: \(Swift.String(describing: operations)))"}
}

extension GetOperationsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetOperationsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageCount = output.nextPageCount
            self.nextPageToken = output.nextPageToken
            self.operations = output.operations
        } else {
            self.nextPageCount = nil
            self.nextPageToken = nil
            self.operations = nil
        }
    }
}

public struct GetOperationsForResourceOutputResponse: Swift.Equatable {
    /// <p>(Deprecated) Returns the number of pages of results that remain.</p>
    ///          <note>
    ///             <p>In releases prior to June 12, 2017, this parameter returned <code>null</code> by the
    ///         API. It is now deprecated, and the API returns the <code>next page token</code> parameter
    ///         instead.</p>
    ///          </note>
    @available(*, deprecated)
    public let nextPageCount: Swift.String?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetOperationsForResource</code>
    ///       request and specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        nextPageCount: Swift.String? = nil,
        nextPageToken: Swift.String? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.nextPageCount = nextPageCount
        self.nextPageToken = nextPageToken
        self.operations = operations
    }
}

struct GetOperationsForResourceOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
    public let nextPageCount: Swift.String?
    public let nextPageToken: Swift.String?
}

extension GetOperationsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageCount
        case nextPageToken
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
        let nextPageCountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageCount)
        nextPageCount = nextPageCountDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetOperationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOperationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOperationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOperationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOperationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOperationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOperationsOutputError>
}

extension GetOperationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOperationsInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetOperationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetOperationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOperationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOperationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOperationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOperationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOperationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOperationsOutputError>
}

public struct GetOperationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOperationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOperationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOperationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOperationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOperationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOperationsOutputError>
}

public struct GetOperationsInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetOperations</code> request. If your
    ///       results are paginated, the response will return a next page token that you can specify as the
    ///       page token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetOperationsInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetOperationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetOperationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetOperationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetOperationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetOperationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOperationsOutputResponse(nextPageToken: \(Swift.String(describing: nextPageToken)), operations: \(Swift.String(describing: operations)))"}
}

extension GetOperationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetOperationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.operations = output.operations
        } else {
            self.nextPageToken = nil
            self.operations = nil
        }
    }
}

public struct GetOperationsOutputResponse: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetOperations</code> request and
    ///       specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        nextPageToken: Swift.String? = nil,
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.operations = operations
    }
}

struct GetOperationsOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
    public let nextPageToken: Swift.String?
}

extension GetOperationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetRegionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRegionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRegionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRegionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRegionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRegionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRegionsOutputError>
}

extension GetRegionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRegionsInput(includeAvailabilityZones: \(Swift.String(describing: includeAvailabilityZones)), includeRelationalDatabaseAvailabilityZones: \(Swift.String(describing: includeRelationalDatabaseAvailabilityZones)))"}
}

extension GetRegionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeAvailabilityZones
        case includeRelationalDatabaseAvailabilityZones
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let includeAvailabilityZones = includeAvailabilityZones {
            try encodeContainer.encode(includeAvailabilityZones, forKey: .includeAvailabilityZones)
        }
        if let includeRelationalDatabaseAvailabilityZones = includeRelationalDatabaseAvailabilityZones {
            try encodeContainer.encode(includeRelationalDatabaseAvailabilityZones, forKey: .includeRelationalDatabaseAvailabilityZones)
        }
    }
}

public struct GetRegionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRegionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRegionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRegionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRegionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRegionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRegionsOutputError>
}

public struct GetRegionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRegionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRegionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRegionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRegionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRegionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRegionsOutputError>
}

public struct GetRegionsInput: Swift.Equatable {
    /// <p>A Boolean value indicating whether to also include Availability Zones in your get regions
    ///       request. Availability Zones are indicated with a letter: e.g., <code>us-east-2a</code>.</p>
    public let includeAvailabilityZones: Swift.Bool?
    /// <p>A Boolean value indicating whether to also include Availability Zones for databases in
    ///       your get regions request. Availability Zones are indicated with a letter (e.g.,
    ///         <code>us-east-2a</code>).</p>
    public let includeRelationalDatabaseAvailabilityZones: Swift.Bool?

    public init (
        includeAvailabilityZones: Swift.Bool? = nil,
        includeRelationalDatabaseAvailabilityZones: Swift.Bool? = nil
    )
    {
        self.includeAvailabilityZones = includeAvailabilityZones
        self.includeRelationalDatabaseAvailabilityZones = includeRelationalDatabaseAvailabilityZones
    }
}

struct GetRegionsInputBody: Swift.Equatable {
    public let includeAvailabilityZones: Swift.Bool?
    public let includeRelationalDatabaseAvailabilityZones: Swift.Bool?
}

extension GetRegionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeAvailabilityZones
        case includeRelationalDatabaseAvailabilityZones
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let includeAvailabilityZonesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeAvailabilityZones)
        includeAvailabilityZones = includeAvailabilityZonesDecoded
        let includeRelationalDatabaseAvailabilityZonesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeRelationalDatabaseAvailabilityZones)
        includeRelationalDatabaseAvailabilityZones = includeRelationalDatabaseAvailabilityZonesDecoded
    }
}

extension GetRegionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRegionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRegionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRegionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRegionsOutputResponse(regions: \(Swift.String(describing: regions)))"}
}

extension GetRegionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRegionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.regions = output.regions
        } else {
            self.regions = nil
        }
    }
}

public struct GetRegionsOutputResponse: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about your get regions request.</p>
    public let regions: [LightsailClientTypes.Region]?

    public init (
        regions: [LightsailClientTypes.Region]? = nil
    )
    {
        self.regions = regions
    }
}

struct GetRegionsOutputResponseBody: Swift.Equatable {
    public let regions: [LightsailClientTypes.Region]?
}

extension GetRegionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regions
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Region?].self, forKey: .regions)
        var regionsDecoded0:[LightsailClientTypes.Region]? = nil
        if let regionsContainer = regionsContainer {
            regionsDecoded0 = [LightsailClientTypes.Region]()
            for structure0 in regionsContainer {
                if let structure0 = structure0 {
                    regionsDecoded0?.append(structure0)
                }
            }
        }
        regions = regionsDecoded0
    }
}

public struct GetRelationalDatabaseBlueprintsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseBlueprintsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseBlueprintsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseBlueprintsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseBlueprintsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseBlueprintsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseBlueprintsOutputError>
}

extension GetRelationalDatabaseBlueprintsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseBlueprintsInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetRelationalDatabaseBlueprintsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetRelationalDatabaseBlueprintsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseBlueprintsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseBlueprintsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseBlueprintsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseBlueprintsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseBlueprintsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseBlueprintsOutputError>
}

public struct GetRelationalDatabaseBlueprintsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseBlueprintsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseBlueprintsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseBlueprintsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseBlueprintsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseBlueprintsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseBlueprintsOutputError>
}

public struct GetRelationalDatabaseBlueprintsInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetRelationalDatabaseBlueprints</code>
    ///       request. If your results are paginated, the response will return a next page token that you
    ///       can specify as the page token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetRelationalDatabaseBlueprintsInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetRelationalDatabaseBlueprintsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetRelationalDatabaseBlueprintsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseBlueprintsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRelationalDatabaseBlueprintsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseBlueprintsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseBlueprintsOutputResponse(blueprints: \(Swift.String(describing: blueprints)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetRelationalDatabaseBlueprintsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRelationalDatabaseBlueprintsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blueprints = output.blueprints
            self.nextPageToken = output.nextPageToken
        } else {
            self.blueprints = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetRelationalDatabaseBlueprintsOutputResponse: Swift.Equatable {
    /// <p>An object describing the result of your get relational database blueprints request.</p>
    public let blueprints: [LightsailClientTypes.RelationalDatabaseBlueprint]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another
    ///         <code>GetRelationalDatabaseBlueprints</code> request and specify the next page token using
    ///       the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        blueprints: [LightsailClientTypes.RelationalDatabaseBlueprint]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.blueprints = blueprints
        self.nextPageToken = nextPageToken
    }
}

struct GetRelationalDatabaseBlueprintsOutputResponseBody: Swift.Equatable {
    public let blueprints: [LightsailClientTypes.RelationalDatabaseBlueprint]?
    public let nextPageToken: Swift.String?
}

extension GetRelationalDatabaseBlueprintsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprints
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabaseBlueprint?].self, forKey: .blueprints)
        var blueprintsDecoded0:[LightsailClientTypes.RelationalDatabaseBlueprint]? = nil
        if let blueprintsContainer = blueprintsContainer {
            blueprintsDecoded0 = [LightsailClientTypes.RelationalDatabaseBlueprint]()
            for structure0 in blueprintsContainer {
                if let structure0 = structure0 {
                    blueprintsDecoded0?.append(structure0)
                }
            }
        }
        blueprints = blueprintsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetRelationalDatabaseBundlesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseBundlesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseBundlesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseBundlesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseBundlesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseBundlesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseBundlesOutputError>
}

extension GetRelationalDatabaseBundlesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseBundlesInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetRelationalDatabaseBundlesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetRelationalDatabaseBundlesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseBundlesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseBundlesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseBundlesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseBundlesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseBundlesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseBundlesOutputError>
}

public struct GetRelationalDatabaseBundlesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseBundlesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseBundlesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseBundlesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseBundlesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseBundlesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseBundlesOutputError>
}

public struct GetRelationalDatabaseBundlesInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetRelationalDatabaseBundles</code> request.
    ///       If your results are paginated, the response will return a next page token that you can specify
    ///       as the page token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetRelationalDatabaseBundlesInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetRelationalDatabaseBundlesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetRelationalDatabaseBundlesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseBundlesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRelationalDatabaseBundlesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseBundlesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseBundlesOutputResponse(bundles: \(Swift.String(describing: bundles)), nextPageToken: \(Swift.String(describing: nextPageToken)))"}
}

extension GetRelationalDatabaseBundlesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRelationalDatabaseBundlesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bundles = output.bundles
            self.nextPageToken = output.nextPageToken
        } else {
            self.bundles = nil
            self.nextPageToken = nil
        }
    }
}

public struct GetRelationalDatabaseBundlesOutputResponse: Swift.Equatable {
    /// <p>An object describing the result of your get relational database bundles request.</p>
    public let bundles: [LightsailClientTypes.RelationalDatabaseBundle]?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetRelationalDatabaseBundles</code>
    ///       request and specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?

    public init (
        bundles: [LightsailClientTypes.RelationalDatabaseBundle]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.bundles = bundles
        self.nextPageToken = nextPageToken
    }
}

struct GetRelationalDatabaseBundlesOutputResponseBody: Swift.Equatable {
    public let bundles: [LightsailClientTypes.RelationalDatabaseBundle]?
    public let nextPageToken: Swift.String?
}

extension GetRelationalDatabaseBundlesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundles
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundlesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabaseBundle?].self, forKey: .bundles)
        var bundlesDecoded0:[LightsailClientTypes.RelationalDatabaseBundle]? = nil
        if let bundlesContainer = bundlesContainer {
            bundlesDecoded0 = [LightsailClientTypes.RelationalDatabaseBundle]()
            for structure0 in bundlesContainer {
                if let structure0 = structure0 {
                    bundlesDecoded0?.append(structure0)
                }
            }
        }
        bundles = bundlesDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetRelationalDatabaseEventsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseEventsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseEventsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseEventsOutputError>
}

extension GetRelationalDatabaseEventsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseEventsInput(durationInMinutes: \(Swift.String(describing: durationInMinutes)), pageToken: \(Swift.String(describing: pageToken)), relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)))"}
}

extension GetRelationalDatabaseEventsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationInMinutes
        case pageToken
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationInMinutes = durationInMinutes {
            try encodeContainer.encode(durationInMinutes, forKey: .durationInMinutes)
        }
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

public struct GetRelationalDatabaseEventsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseEventsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseEventsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseEventsOutputError>
}

public struct GetRelationalDatabaseEventsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseEventsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseEventsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseEventsOutputError>
}

public struct GetRelationalDatabaseEventsInput: Swift.Equatable {
    /// <p>The number of minutes in the past from which to retrieve events. For example, to get all
    ///       events from the past 2 hours, enter 120.</p>
    ///          <p>Default: <code>60</code>
    ///          </p>
    ///          <p>The minimum is 1 and the maximum is 14 days (20160 minutes).</p>
    public let durationInMinutes: Swift.Int?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetRelationalDatabaseEvents</code> request.
    ///       If your results are paginated, the response will return a next page token that you can specify
    ///       as the page token in a subsequent request.</p>
    public let pageToken: Swift.String?
    /// <p>The name of the database from which to get events.</p>
    public let relationalDatabaseName: Swift.String?

    public init (
        durationInMinutes: Swift.Int? = nil,
        pageToken: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.durationInMinutes = durationInMinutes
        self.pageToken = pageToken
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct GetRelationalDatabaseEventsInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
    public let durationInMinutes: Swift.Int?
    public let pageToken: Swift.String?
}

extension GetRelationalDatabaseEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationInMinutes
        case pageToken
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let durationInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInMinutes)
        durationInMinutes = durationInMinutesDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetRelationalDatabaseEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRelationalDatabaseEventsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseEventsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseEventsOutputResponse(nextPageToken: \(Swift.String(describing: nextPageToken)), relationalDatabaseEvents: \(Swift.String(describing: relationalDatabaseEvents)))"}
}

extension GetRelationalDatabaseEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRelationalDatabaseEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.relationalDatabaseEvents = output.relationalDatabaseEvents
        } else {
            self.nextPageToken = nil
            self.relationalDatabaseEvents = nil
        }
    }
}

public struct GetRelationalDatabaseEventsOutputResponse: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetRelationalDatabaseEvents</code>
    ///       request and specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?
    /// <p>An object describing the result of your get relational database events request.</p>
    public let relationalDatabaseEvents: [LightsailClientTypes.RelationalDatabaseEvent]?

    public init (
        nextPageToken: Swift.String? = nil,
        relationalDatabaseEvents: [LightsailClientTypes.RelationalDatabaseEvent]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.relationalDatabaseEvents = relationalDatabaseEvents
    }
}

struct GetRelationalDatabaseEventsOutputResponseBody: Swift.Equatable {
    public let relationalDatabaseEvents: [LightsailClientTypes.RelationalDatabaseEvent]?
    public let nextPageToken: Swift.String?
}

extension GetRelationalDatabaseEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case relationalDatabaseEvents
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseEventsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabaseEvent?].self, forKey: .relationalDatabaseEvents)
        var relationalDatabaseEventsDecoded0:[LightsailClientTypes.RelationalDatabaseEvent]? = nil
        if let relationalDatabaseEventsContainer = relationalDatabaseEventsContainer {
            relationalDatabaseEventsDecoded0 = [LightsailClientTypes.RelationalDatabaseEvent]()
            for structure0 in relationalDatabaseEventsContainer {
                if let structure0 = structure0 {
                    relationalDatabaseEventsDecoded0?.append(structure0)
                }
            }
        }
        relationalDatabaseEvents = relationalDatabaseEventsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetRelationalDatabaseInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseOutputError>
}

extension GetRelationalDatabaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseInput(relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)))"}
}

extension GetRelationalDatabaseInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

public struct GetRelationalDatabaseInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseOutputError>
}

public struct GetRelationalDatabaseInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseOutputError>
}

public struct GetRelationalDatabaseInput: Swift.Equatable {
    /// <p>The name of the database that you are looking up.</p>
    public let relationalDatabaseName: Swift.String?

    public init (
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct GetRelationalDatabaseInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
}

extension GetRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
    }
}

public struct GetRelationalDatabaseLogEventsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseLogEventsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseLogEventsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseLogEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseLogEventsOutputError>
}

extension GetRelationalDatabaseLogEventsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseLogEventsInput(endTime: \(Swift.String(describing: endTime)), logStreamName: \(Swift.String(describing: logStreamName)), pageToken: \(Swift.String(describing: pageToken)), relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)), startFromHead: \(Swift.String(describing: startFromHead)), startTime: \(Swift.String(describing: startTime)))"}
}

extension GetRelationalDatabaseLogEventsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case logStreamName
        case pageToken
        case relationalDatabaseName
        case startFromHead
        case startTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let logStreamName = logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let startFromHead = startFromHead {
            try encodeContainer.encode(startFromHead, forKey: .startFromHead)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }
}

public struct GetRelationalDatabaseLogEventsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseLogEventsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseLogEventsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseLogEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseLogEventsOutputError>
}

public struct GetRelationalDatabaseLogEventsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseLogEventsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseLogEventsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseLogEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseLogEventsOutputError>
}

public struct GetRelationalDatabaseLogEventsInput: Swift.Equatable {
    /// <p>The end of the time interval from which to get log events.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in the Unix time format.</p>
    ///                <p>For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you
    ///           input <code>1538424000</code> as the end time.</p>
    ///
    ///             </li>
    ///          </ul>
    public let endTime: ClientRuntime.Date?
    /// <p>The name of the log stream.</p>
    ///          <p>Use the <code>get relational database log streams</code> operation to get a list of
    ///       available log streams.</p>
    public let logStreamName: Swift.String?
    /// <p>The token to advance to the next or previous page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetRelationalDatabaseLogEvents</code>
    ///       request. If your results are paginated, the response will return a next forward token and/or
    ///       next backward token that you can specify as the page token in a subsequent request.</p>
    public let pageToken: Swift.String?
    /// <p>The name of your database for which to get log events.</p>
    public let relationalDatabaseName: Swift.String?
    /// <p>Parameter to specify if the log should start from head or tail. If <code>true</code> is
    ///       specified, the log event starts from the head of the log. If <code>false</code> is specified,
    ///       the log event starts from the tail of the log.</p>
    ///          <note>
    ///             <p>For PostgreSQL, the default value of <code>false</code> is the only option
    ///         available.</p>
    ///          </note>
    public let startFromHead: Swift.Bool?
    /// <p>The start of the time interval from which to get log events.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in the Unix time format.</p>
    ///                <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you
    ///           input <code>1538424000</code> as the start time.</p>
    ///             </li>
    ///          </ul>
    public let startTime: ClientRuntime.Date?

    public init (
        endTime: ClientRuntime.Date? = nil,
        logStreamName: Swift.String? = nil,
        pageToken: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil,
        startFromHead: Swift.Bool? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.endTime = endTime
        self.logStreamName = logStreamName
        self.pageToken = pageToken
        self.relationalDatabaseName = relationalDatabaseName
        self.startFromHead = startFromHead
        self.startTime = startTime
    }
}

struct GetRelationalDatabaseLogEventsInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
    public let logStreamName: Swift.String?
    public let startTime: ClientRuntime.Date?
    public let endTime: ClientRuntime.Date?
    public let startFromHead: Swift.Bool?
    public let pageToken: Swift.String?
}

extension GetRelationalDatabaseLogEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case logStreamName
        case pageToken
        case relationalDatabaseName
        case startFromHead
        case startTime
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let startFromHeadDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .startFromHead)
        startFromHead = startFromHeadDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetRelationalDatabaseLogEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseLogEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRelationalDatabaseLogEventsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseLogEventsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseLogEventsOutputResponse(nextBackwardToken: \(Swift.String(describing: nextBackwardToken)), nextForwardToken: \(Swift.String(describing: nextForwardToken)), resourceLogEvents: \(Swift.String(describing: resourceLogEvents)))"}
}

extension GetRelationalDatabaseLogEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRelationalDatabaseLogEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextBackwardToken = output.nextBackwardToken
            self.nextForwardToken = output.nextForwardToken
            self.resourceLogEvents = output.resourceLogEvents
        } else {
            self.nextBackwardToken = nil
            self.nextForwardToken = nil
            self.resourceLogEvents = nil
        }
    }
}

public struct GetRelationalDatabaseLogEventsOutputResponse: Swift.Equatable {
    /// <p>A token used for advancing to the previous page of results from your get relational
    ///       database log events request.</p>
    public let nextBackwardToken: Swift.String?
    /// <p>A token used for advancing to the next page of results from your get relational database
    ///       log events request.</p>
    public let nextForwardToken: Swift.String?
    /// <p>An object describing the result of your get relational database log events request.</p>
    public let resourceLogEvents: [LightsailClientTypes.LogEvent]?

    public init (
        nextBackwardToken: Swift.String? = nil,
        nextForwardToken: Swift.String? = nil,
        resourceLogEvents: [LightsailClientTypes.LogEvent]? = nil
    )
    {
        self.nextBackwardToken = nextBackwardToken
        self.nextForwardToken = nextForwardToken
        self.resourceLogEvents = resourceLogEvents
    }
}

struct GetRelationalDatabaseLogEventsOutputResponseBody: Swift.Equatable {
    public let resourceLogEvents: [LightsailClientTypes.LogEvent]?
    public let nextBackwardToken: Swift.String?
    public let nextForwardToken: Swift.String?
}

extension GetRelationalDatabaseLogEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextBackwardToken
        case nextForwardToken
        case resourceLogEvents
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceLogEventsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LogEvent?].self, forKey: .resourceLogEvents)
        var resourceLogEventsDecoded0:[LightsailClientTypes.LogEvent]? = nil
        if let resourceLogEventsContainer = resourceLogEventsContainer {
            resourceLogEventsDecoded0 = [LightsailClientTypes.LogEvent]()
            for structure0 in resourceLogEventsContainer {
                if let structure0 = structure0 {
                    resourceLogEventsDecoded0?.append(structure0)
                }
            }
        }
        resourceLogEvents = resourceLogEventsDecoded0
        let nextBackwardTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextBackwardToken)
        nextBackwardToken = nextBackwardTokenDecoded
        let nextForwardTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextForwardToken)
        nextForwardToken = nextForwardTokenDecoded
    }
}

public struct GetRelationalDatabaseLogStreamsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseLogStreamsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseLogStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseLogStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseLogStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseLogStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseLogStreamsOutputError>
}

extension GetRelationalDatabaseLogStreamsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseLogStreamsInput(relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)))"}
}

extension GetRelationalDatabaseLogStreamsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

public struct GetRelationalDatabaseLogStreamsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseLogStreamsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseLogStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseLogStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseLogStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseLogStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseLogStreamsOutputError>
}

public struct GetRelationalDatabaseLogStreamsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseLogStreamsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseLogStreamsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseLogStreamsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseLogStreamsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseLogStreamsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseLogStreamsOutputError>
}

public struct GetRelationalDatabaseLogStreamsInput: Swift.Equatable {
    /// <p>The name of your database for which to get log streams.</p>
    public let relationalDatabaseName: Swift.String?

    public init (
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct GetRelationalDatabaseLogStreamsInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
}

extension GetRelationalDatabaseLogStreamsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
    }
}

extension GetRelationalDatabaseLogStreamsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseLogStreamsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRelationalDatabaseLogStreamsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseLogStreamsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseLogStreamsOutputResponse(logStreams: \(Swift.String(describing: logStreams)))"}
}

extension GetRelationalDatabaseLogStreamsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRelationalDatabaseLogStreamsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.logStreams = output.logStreams
        } else {
            self.logStreams = nil
        }
    }
}

public struct GetRelationalDatabaseLogStreamsOutputResponse: Swift.Equatable {
    /// <p>An object describing the result of your get relational database log streams
    ///       request.</p>
    public let logStreams: [Swift.String]?

    public init (
        logStreams: [Swift.String]? = nil
    )
    {
        self.logStreams = logStreams
    }
}

struct GetRelationalDatabaseLogStreamsOutputResponseBody: Swift.Equatable {
    public let logStreams: [Swift.String]?
}

extension GetRelationalDatabaseLogStreamsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logStreams
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logStreams)
        var logStreamsDecoded0:[Swift.String]? = nil
        if let logStreamsContainer = logStreamsContainer {
            logStreamsDecoded0 = [Swift.String]()
            for string0 in logStreamsContainer {
                if let string0 = string0 {
                    logStreamsDecoded0?.append(string0)
                }
            }
        }
        logStreams = logStreamsDecoded0
    }
}

public struct GetRelationalDatabaseMasterUserPasswordInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseMasterUserPasswordInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseMasterUserPasswordInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseMasterUserPasswordOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseMasterUserPasswordInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseMasterUserPasswordOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseMasterUserPasswordOutputError>
}

extension GetRelationalDatabaseMasterUserPasswordInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseMasterUserPasswordInput(passwordVersion: \(Swift.String(describing: passwordVersion)), relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)))"}
}

extension GetRelationalDatabaseMasterUserPasswordInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case passwordVersion
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let passwordVersion = passwordVersion {
            try encodeContainer.encode(passwordVersion.rawValue, forKey: .passwordVersion)
        }
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

public struct GetRelationalDatabaseMasterUserPasswordInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseMasterUserPasswordInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseMasterUserPasswordInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseMasterUserPasswordOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseMasterUserPasswordInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseMasterUserPasswordOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseMasterUserPasswordOutputError>
}

public struct GetRelationalDatabaseMasterUserPasswordInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseMasterUserPasswordInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseMasterUserPasswordInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseMasterUserPasswordOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseMasterUserPasswordInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseMasterUserPasswordOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseMasterUserPasswordOutputError>
}

public struct GetRelationalDatabaseMasterUserPasswordInput: Swift.Equatable {
    /// <p>The password version to return.</p>
    ///          <p>Specifying <code>CURRENT</code> or <code>PREVIOUS</code> returns the current or previous
    ///       passwords respectively. Specifying <code>PENDING</code> returns the newest version of the
    ///       password that will rotate to <code>CURRENT</code>. After the <code>PENDING</code> password
    ///       rotates to <code>CURRENT</code>, the <code>PENDING</code> password is no longer
    ///       available.</p>
    ///          <p>Default: <code>CURRENT</code>
    ///          </p>
    public let passwordVersion: LightsailClientTypes.RelationalDatabasePasswordVersion?
    /// <p>The name of your database for which to get the master user password.</p>
    public let relationalDatabaseName: Swift.String?

    public init (
        passwordVersion: LightsailClientTypes.RelationalDatabasePasswordVersion? = nil,
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.passwordVersion = passwordVersion
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct GetRelationalDatabaseMasterUserPasswordInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
    public let passwordVersion: LightsailClientTypes.RelationalDatabasePasswordVersion?
}

extension GetRelationalDatabaseMasterUserPasswordInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case passwordVersion
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let passwordVersionDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabasePasswordVersion.self, forKey: .passwordVersion)
        passwordVersion = passwordVersionDecoded
    }
}

extension GetRelationalDatabaseMasterUserPasswordOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseMasterUserPasswordOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRelationalDatabaseMasterUserPasswordOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseMasterUserPasswordOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseMasterUserPasswordOutputResponse(createdAt: \(Swift.String(describing: createdAt)), masterUserPassword: \(Swift.String(describing: masterUserPassword)))"}
}

extension GetRelationalDatabaseMasterUserPasswordOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRelationalDatabaseMasterUserPasswordOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.masterUserPassword = output.masterUserPassword
        } else {
            self.createdAt = nil
            self.masterUserPassword = nil
        }
    }
}

public struct GetRelationalDatabaseMasterUserPasswordOutputResponse: Swift.Equatable {
    /// <p>The timestamp when the specified version of the master user password was created.</p>
    public let createdAt: ClientRuntime.Date?
    /// <p>The master user password for the <code>password version</code> specified.</p>
    public let masterUserPassword: Swift.String?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        masterUserPassword: Swift.String? = nil
    )
    {
        self.createdAt = createdAt
        self.masterUserPassword = masterUserPassword
    }
}

struct GetRelationalDatabaseMasterUserPasswordOutputResponseBody: Swift.Equatable {
    public let masterUserPassword: Swift.String?
    public let createdAt: ClientRuntime.Date?
}

extension GetRelationalDatabaseMasterUserPasswordOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case masterUserPassword
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

public struct GetRelationalDatabaseMetricDataInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseMetricDataInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseMetricDataOutputError>
}

extension GetRelationalDatabaseMetricDataInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseMetricDataInput(endTime: \(Swift.String(describing: endTime)), metricName: \(Swift.String(describing: metricName)), period: \(Swift.String(describing: period)), relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)), startTime: \(Swift.String(describing: startTime)), statistics: \(Swift.String(describing: statistics)), unit: \(Swift.String(describing: unit)))"}
}

extension GetRelationalDatabaseMetricDataInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case metricName
        case period
        case relationalDatabaseName
        case startTime
        case statistics
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if period != 0 {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let statistics = statistics {
            var statisticsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statistics)
            for metricstatisticlist0 in statistics {
                try statisticsContainer.encode(metricstatisticlist0.rawValue)
            }
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }
}

public struct GetRelationalDatabaseMetricDataInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseMetricDataInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseMetricDataOutputError>
}

public struct GetRelationalDatabaseMetricDataInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseMetricDataInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseMetricDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseMetricDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseMetricDataOutputError>
}

public struct GetRelationalDatabaseMetricDataInput: Swift.Equatable {
    /// <p>The end of the time interval from which to get metric data.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in the Unix time format.</p>
    ///                <p>For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you
    ///           input <code>1538424000</code> as the end time.</p>
    ///
    ///             </li>
    ///          </ul>
    public let endTime: ClientRuntime.Date?
    /// <p>The metric for which you want to return information.</p>
    ///          <p>Valid relational database metric names are listed below, along with the most useful
    ///         <code>statistics</code> to include in your request, and the published <code>unit</code>
    ///       value. All relational database metric data is available in 1-minute (60 seconds)
    ///       granularity.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>CPUUtilization</code>
    ///                   </b> - The percentage of CPU
    ///           utilization currently in use on the database.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
    ///             <code>Average</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Percent</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>DatabaseConnections</code>
    ///                   </b> - The number of
    ///           database connections in use.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
    ///             <code>Sum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>DiskQueueDepth</code>
    ///                   </b> - The number of
    ///           outstanding IOs (read/write requests) that are waiting to access the disk.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>FreeStorageSpace</code>
    ///                   </b> - The amount of
    ///           available storage space.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Bytes</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>NetworkReceiveThroughput</code>
    ///                   </b> - The incoming
    ///           (Receive) network traffic on the database, including both customer database traffic and
    ///           AWS traffic used for monitoring and replication.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Bytes/Second</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>NetworkTransmitThroughput</code>
    ///                   </b> - The outgoing
    ///           (Transmit) network traffic on the database, including both customer database traffic and
    ///           AWS traffic used for monitoring and replication.</p>
    ///                <p>
    ///                   <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
    ///                <p>
    ///                   <code>Unit</code>: The published unit is <code>Bytes/Second</code>.</p>
    ///             </li>
    ///          </ul>
    public let metricName: LightsailClientTypes.RelationalDatabaseMetricName?
    /// <p>The granularity, in seconds, of the returned data points.</p>
    ///          <p>All relational database metric data is available in 1-minute (60 seconds)
    ///       granularity.</p>
    public let period: Swift.Int
    /// <p>The name of your database from which to get metric data.</p>
    public let relationalDatabaseName: Swift.String?
    /// <p>The start of the time interval from which to get metric data.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in the Unix time format.</p>
    ///                <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you
    ///           input <code>1538424000</code> as the start time.</p>
    ///
    ///             </li>
    ///          </ul>
    public let startTime: ClientRuntime.Date?
    /// <p>The statistic for the metric.</p>
    ///          <p>The following statistics are available:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Minimum</code> - The lowest value observed during the specified period. Use this
    ///           value to determine low volumes of activity for your application.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Maximum</code> - The highest value observed during the specified period. Use
    ///           this value to determine high volumes of activity for your application.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Sum</code> - All values submitted for the matching metric added together. You
    ///           can use this statistic to determine the total volume of a metric.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Average</code> - The value of Sum / SampleCount during the specified period. By
    ///           comparing this statistic with the Minimum and Maximum values, you can determine the full
    ///           scope of a metric and how close the average use is to the Minimum and Maximum values. This
    ///           comparison helps you to know when to increase or decrease your resources.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SampleCount</code> - The count, or number, of data points used for the
    ///           statistical calculation.</p>
    ///             </li>
    ///          </ul>
    public let statistics: [LightsailClientTypes.MetricStatistic]?
    /// <p>The unit for the metric data request. Valid units depend on the metric data being
    ///       requested. For the valid units with each available metric, see the <code>metricName</code>
    ///       parameter.</p>
    public let unit: LightsailClientTypes.MetricUnit?

    public init (
        endTime: ClientRuntime.Date? = nil,
        metricName: LightsailClientTypes.RelationalDatabaseMetricName? = nil,
        period: Swift.Int = 0,
        relationalDatabaseName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        statistics: [LightsailClientTypes.MetricStatistic]? = nil,
        unit: LightsailClientTypes.MetricUnit? = nil
    )
    {
        self.endTime = endTime
        self.metricName = metricName
        self.period = period
        self.relationalDatabaseName = relationalDatabaseName
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

struct GetRelationalDatabaseMetricDataInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
    public let metricName: LightsailClientTypes.RelationalDatabaseMetricName?
    public let period: Swift.Int
    public let startTime: ClientRuntime.Date?
    public let endTime: ClientRuntime.Date?
    public let unit: LightsailClientTypes.MetricUnit?
    public let statistics: [LightsailClientTypes.MetricStatistic]?
}

extension GetRelationalDatabaseMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case metricName
        case period
        case relationalDatabaseName
        case startTime
        case statistics
        case unit
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabaseMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let periodDecoded = try containerValues.decode(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let unitDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricUnit.self, forKey: .unit)
        unit = unitDecoded
        let statisticsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricStatistic?].self, forKey: .statistics)
        var statisticsDecoded0:[LightsailClientTypes.MetricStatistic]? = nil
        if let statisticsContainer = statisticsContainer {
            statisticsDecoded0 = [LightsailClientTypes.MetricStatistic]()
            for string0 in statisticsContainer {
                if let string0 = string0 {
                    statisticsDecoded0?.append(string0)
                }
            }
        }
        statistics = statisticsDecoded0
    }
}

extension GetRelationalDatabaseMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRelationalDatabaseMetricDataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseMetricDataOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseMetricDataOutputResponse(metricData: \(Swift.String(describing: metricData)), metricName: \(Swift.String(describing: metricName)))"}
}

extension GetRelationalDatabaseMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRelationalDatabaseMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricData = output.metricData
            self.metricName = output.metricName
        } else {
            self.metricData = nil
            self.metricName = nil
        }
    }
}

public struct GetRelationalDatabaseMetricDataOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the metric data returned.</p>
    public let metricData: [LightsailClientTypes.MetricDatapoint]?
    /// <p>The name of the metric returned.</p>
    public let metricName: LightsailClientTypes.RelationalDatabaseMetricName?

    public init (
        metricData: [LightsailClientTypes.MetricDatapoint]? = nil,
        metricName: LightsailClientTypes.RelationalDatabaseMetricName? = nil
    )
    {
        self.metricData = metricData
        self.metricName = metricName
    }
}

struct GetRelationalDatabaseMetricDataOutputResponseBody: Swift.Equatable {
    public let metricName: LightsailClientTypes.RelationalDatabaseMetricName?
    public let metricData: [LightsailClientTypes.MetricDatapoint]?
}

extension GetRelationalDatabaseMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricData
        case metricName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabaseMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricDataContainer = try containerValues.decodeIfPresent([LightsailClientTypes.MetricDatapoint?].self, forKey: .metricData)
        var metricDataDecoded0:[LightsailClientTypes.MetricDatapoint]? = nil
        if let metricDataContainer = metricDataContainer {
            metricDataDecoded0 = [LightsailClientTypes.MetricDatapoint]()
            for structure0 in metricDataContainer {
                if let structure0 = structure0 {
                    metricDataDecoded0?.append(structure0)
                }
            }
        }
        metricData = metricDataDecoded0
    }
}

extension GetRelationalDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRelationalDatabaseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseOutputResponse(relationalDatabase: \(Swift.String(describing: relationalDatabase)))"}
}

extension GetRelationalDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRelationalDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.relationalDatabase = output.relationalDatabase
        } else {
            self.relationalDatabase = nil
        }
    }
}

public struct GetRelationalDatabaseOutputResponse: Swift.Equatable {
    /// <p>An object describing the specified database.</p>
    public let relationalDatabase: LightsailClientTypes.RelationalDatabase?

    public init (
        relationalDatabase: LightsailClientTypes.RelationalDatabase? = nil
    )
    {
        self.relationalDatabase = relationalDatabase
    }
}

struct GetRelationalDatabaseOutputResponseBody: Swift.Equatable {
    public let relationalDatabase: LightsailClientTypes.RelationalDatabase?
}

extension GetRelationalDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabase
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabase.self, forKey: .relationalDatabase)
        relationalDatabase = relationalDatabaseDecoded
    }
}

public struct GetRelationalDatabaseParametersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseParametersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseParametersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseParametersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseParametersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseParametersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseParametersOutputError>
}

extension GetRelationalDatabaseParametersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseParametersInput(pageToken: \(Swift.String(describing: pageToken)), relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)))"}
}

extension GetRelationalDatabaseParametersInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

public struct GetRelationalDatabaseParametersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseParametersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseParametersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseParametersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseParametersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseParametersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseParametersOutputError>
}

public struct GetRelationalDatabaseParametersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseParametersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseParametersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseParametersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseParametersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseParametersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseParametersOutputError>
}

public struct GetRelationalDatabaseParametersInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetRelationalDatabaseParameters</code>
    ///       request. If your results are paginated, the response will return a next page token that you
    ///       can specify as the page token in a subsequent request.</p>
    public let pageToken: Swift.String?
    /// <p>The name of your database for which to get parameters.</p>
    public let relationalDatabaseName: Swift.String?

    public init (
        pageToken: Swift.String? = nil,
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct GetRelationalDatabaseParametersInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
    public let pageToken: Swift.String?
}

extension GetRelationalDatabaseParametersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetRelationalDatabaseParametersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseParametersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRelationalDatabaseParametersOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseParametersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseParametersOutputResponse(nextPageToken: \(Swift.String(describing: nextPageToken)), parameters: \(Swift.String(describing: parameters)))"}
}

extension GetRelationalDatabaseParametersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRelationalDatabaseParametersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.parameters = output.parameters
        } else {
            self.nextPageToken = nil
            self.parameters = nil
        }
    }
}

public struct GetRelationalDatabaseParametersOutputResponse: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another
    ///         <code>GetRelationalDatabaseParameters</code> request and specify the next page token using
    ///       the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?
    /// <p>An object describing the result of your get relational database parameters request.</p>
    public let parameters: [LightsailClientTypes.RelationalDatabaseParameter]?

    public init (
        nextPageToken: Swift.String? = nil,
        parameters: [LightsailClientTypes.RelationalDatabaseParameter]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.parameters = parameters
    }
}

struct GetRelationalDatabaseParametersOutputResponseBody: Swift.Equatable {
    public let parameters: [LightsailClientTypes.RelationalDatabaseParameter]?
    public let nextPageToken: Swift.String?
}

extension GetRelationalDatabaseParametersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case parameters
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parametersContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabaseParameter?].self, forKey: .parameters)
        var parametersDecoded0:[LightsailClientTypes.RelationalDatabaseParameter]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [LightsailClientTypes.RelationalDatabaseParameter]()
            for structure0 in parametersContainer {
                if let structure0 = structure0 {
                    parametersDecoded0?.append(structure0)
                }
            }
        }
        parameters = parametersDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetRelationalDatabaseSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseSnapshotOutputError>
}

extension GetRelationalDatabaseSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseSnapshotInput(relationalDatabaseSnapshotName: \(Swift.String(describing: relationalDatabaseSnapshotName)))"}
}

extension GetRelationalDatabaseSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseSnapshotName = relationalDatabaseSnapshotName {
            try encodeContainer.encode(relationalDatabaseSnapshotName, forKey: .relationalDatabaseSnapshotName)
        }
    }
}

public struct GetRelationalDatabaseSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseSnapshotOutputError>
}

public struct GetRelationalDatabaseSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseSnapshotOutputError>
}

public struct GetRelationalDatabaseSnapshotInput: Swift.Equatable {
    /// <p>The name of the database snapshot for which to get information.</p>
    public let relationalDatabaseSnapshotName: Swift.String?

    public init (
        relationalDatabaseSnapshotName: Swift.String? = nil
    )
    {
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
    }
}

struct GetRelationalDatabaseSnapshotInputBody: Swift.Equatable {
    public let relationalDatabaseSnapshotName: Swift.String?
}

extension GetRelationalDatabaseSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseSnapshotName)
        relationalDatabaseSnapshotName = relationalDatabaseSnapshotNameDecoded
    }
}

extension GetRelationalDatabaseSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRelationalDatabaseSnapshotOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseSnapshotOutputResponse(relationalDatabaseSnapshot: \(Swift.String(describing: relationalDatabaseSnapshot)))"}
}

extension GetRelationalDatabaseSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRelationalDatabaseSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.relationalDatabaseSnapshot = output.relationalDatabaseSnapshot
        } else {
            self.relationalDatabaseSnapshot = nil
        }
    }
}

public struct GetRelationalDatabaseSnapshotOutputResponse: Swift.Equatable {
    /// <p>An object describing the specified database snapshot.</p>
    public let relationalDatabaseSnapshot: LightsailClientTypes.RelationalDatabaseSnapshot?

    public init (
        relationalDatabaseSnapshot: LightsailClientTypes.RelationalDatabaseSnapshot? = nil
    )
    {
        self.relationalDatabaseSnapshot = relationalDatabaseSnapshot
    }
}

struct GetRelationalDatabaseSnapshotOutputResponseBody: Swift.Equatable {
    public let relationalDatabaseSnapshot: LightsailClientTypes.RelationalDatabaseSnapshot?
}

extension GetRelationalDatabaseSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseSnapshot
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseSnapshotDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabaseSnapshot.self, forKey: .relationalDatabaseSnapshot)
        relationalDatabaseSnapshot = relationalDatabaseSnapshotDecoded
    }
}

public struct GetRelationalDatabaseSnapshotsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseSnapshotsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseSnapshotsOutputError>
}

extension GetRelationalDatabaseSnapshotsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseSnapshotsInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetRelationalDatabaseSnapshotsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetRelationalDatabaseSnapshotsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseSnapshotsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseSnapshotsOutputError>
}

public struct GetRelationalDatabaseSnapshotsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabaseSnapshotsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabaseSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabaseSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabaseSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabaseSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabaseSnapshotsOutputError>
}

public struct GetRelationalDatabaseSnapshotsInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetRelationalDatabaseSnapshots</code>
    ///       request. If your results are paginated, the response will return a next page token that you
    ///       can specify as the page token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetRelationalDatabaseSnapshotsInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetRelationalDatabaseSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetRelationalDatabaseSnapshotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabaseSnapshotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRelationalDatabaseSnapshotsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabaseSnapshotsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabaseSnapshotsOutputResponse(nextPageToken: \(Swift.String(describing: nextPageToken)), relationalDatabaseSnapshots: \(Swift.String(describing: relationalDatabaseSnapshots)))"}
}

extension GetRelationalDatabaseSnapshotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRelationalDatabaseSnapshotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.relationalDatabaseSnapshots = output.relationalDatabaseSnapshots
        } else {
            self.nextPageToken = nil
            self.relationalDatabaseSnapshots = nil
        }
    }
}

public struct GetRelationalDatabaseSnapshotsOutputResponse: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another
    ///         <code>GetRelationalDatabaseSnapshots</code> request and specify the next page token using
    ///       the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?
    /// <p>An object describing the result of your get relational database snapshots request.</p>
    public let relationalDatabaseSnapshots: [LightsailClientTypes.RelationalDatabaseSnapshot]?

    public init (
        nextPageToken: Swift.String? = nil,
        relationalDatabaseSnapshots: [LightsailClientTypes.RelationalDatabaseSnapshot]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.relationalDatabaseSnapshots = relationalDatabaseSnapshots
    }
}

struct GetRelationalDatabaseSnapshotsOutputResponseBody: Swift.Equatable {
    public let relationalDatabaseSnapshots: [LightsailClientTypes.RelationalDatabaseSnapshot]?
    public let nextPageToken: Swift.String?
}

extension GetRelationalDatabaseSnapshotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case relationalDatabaseSnapshots
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseSnapshotsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabaseSnapshot?].self, forKey: .relationalDatabaseSnapshots)
        var relationalDatabaseSnapshotsDecoded0:[LightsailClientTypes.RelationalDatabaseSnapshot]? = nil
        if let relationalDatabaseSnapshotsContainer = relationalDatabaseSnapshotsContainer {
            relationalDatabaseSnapshotsDecoded0 = [LightsailClientTypes.RelationalDatabaseSnapshot]()
            for structure0 in relationalDatabaseSnapshotsContainer {
                if let structure0 = structure0 {
                    relationalDatabaseSnapshotsDecoded0?.append(structure0)
                }
            }
        }
        relationalDatabaseSnapshots = relationalDatabaseSnapshotsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetRelationalDatabasesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabasesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabasesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabasesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabasesOutputError>
}

extension GetRelationalDatabasesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabasesInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetRelationalDatabasesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetRelationalDatabasesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabasesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabasesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabasesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabasesOutputError>
}

public struct GetRelationalDatabasesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRelationalDatabasesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRelationalDatabasesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRelationalDatabasesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRelationalDatabasesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRelationalDatabasesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRelationalDatabasesOutputError>
}

public struct GetRelationalDatabasesInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetRelationalDatabases</code> request. If
    ///       your results are paginated, the response will return a next page token that you can specify as
    ///       the page token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetRelationalDatabasesInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetRelationalDatabasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetRelationalDatabasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRelationalDatabasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRelationalDatabasesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRelationalDatabasesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRelationalDatabasesOutputResponse(nextPageToken: \(Swift.String(describing: nextPageToken)), relationalDatabases: \(Swift.String(describing: relationalDatabases)))"}
}

extension GetRelationalDatabasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRelationalDatabasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.relationalDatabases = output.relationalDatabases
        } else {
            self.nextPageToken = nil
            self.relationalDatabases = nil
        }
    }
}

public struct GetRelationalDatabasesOutputResponse: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetRelationalDatabases</code>
    ///       request and specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?
    /// <p>An object describing the result of your get relational databases request.</p>
    public let relationalDatabases: [LightsailClientTypes.RelationalDatabase]?

    public init (
        nextPageToken: Swift.String? = nil,
        relationalDatabases: [LightsailClientTypes.RelationalDatabase]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.relationalDatabases = relationalDatabases
    }
}

struct GetRelationalDatabasesOutputResponseBody: Swift.Equatable {
    public let relationalDatabases: [LightsailClientTypes.RelationalDatabase]?
    public let nextPageToken: Swift.String?
}

extension GetRelationalDatabasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case relationalDatabases
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabasesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabase?].self, forKey: .relationalDatabases)
        var relationalDatabasesDecoded0:[LightsailClientTypes.RelationalDatabase]? = nil
        if let relationalDatabasesContainer = relationalDatabasesContainer {
            relationalDatabasesDecoded0 = [LightsailClientTypes.RelationalDatabase]()
            for structure0 in relationalDatabasesContainer {
                if let structure0 = structure0 {
                    relationalDatabasesDecoded0?.append(structure0)
                }
            }
        }
        relationalDatabases = relationalDatabasesDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

public struct GetStaticIpInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStaticIpInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStaticIpOutputError>
}

extension GetStaticIpInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetStaticIpInput(staticIpName: \(Swift.String(describing: staticIpName)))"}
}

extension GetStaticIpInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let staticIpName = staticIpName {
            try encodeContainer.encode(staticIpName, forKey: .staticIpName)
        }
    }
}

public struct GetStaticIpInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStaticIpInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStaticIpOutputError>
}

public struct GetStaticIpInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStaticIpInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStaticIpOutputError>
}

public struct GetStaticIpInput: Swift.Equatable {
    /// <p>The name of the static IP in Lightsail.</p>
    public let staticIpName: Swift.String?

    public init (
        staticIpName: Swift.String? = nil
    )
    {
        self.staticIpName = staticIpName
    }
}

struct GetStaticIpInputBody: Swift.Equatable {
    public let staticIpName: Swift.String?
}

extension GetStaticIpInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticIpNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .staticIpName)
        staticIpName = staticIpNameDecoded
    }
}

extension GetStaticIpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetStaticIpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetStaticIpOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetStaticIpOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetStaticIpOutputResponse(staticIp: \(Swift.String(describing: staticIp)))"}
}

extension GetStaticIpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetStaticIpOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.staticIp = output.staticIp
        } else {
            self.staticIp = nil
        }
    }
}

public struct GetStaticIpOutputResponse: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about the requested static IP.</p>
    public let staticIp: LightsailClientTypes.StaticIp?

    public init (
        staticIp: LightsailClientTypes.StaticIp? = nil
    )
    {
        self.staticIp = staticIp
    }
}

struct GetStaticIpOutputResponseBody: Swift.Equatable {
    public let staticIp: LightsailClientTypes.StaticIp?
}

extension GetStaticIpOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIp
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticIpDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.StaticIp.self, forKey: .staticIp)
        staticIp = staticIpDecoded
    }
}

public struct GetStaticIpsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStaticIpsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStaticIpsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStaticIpsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStaticIpsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStaticIpsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStaticIpsOutputError>
}

extension GetStaticIpsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetStaticIpsInput(pageToken: \(Swift.String(describing: pageToken)))"}
}

extension GetStaticIpsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pageToken = pageToken {
            try encodeContainer.encode(pageToken, forKey: .pageToken)
        }
    }
}

public struct GetStaticIpsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStaticIpsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStaticIpsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStaticIpsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStaticIpsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStaticIpsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStaticIpsOutputError>
}

public struct GetStaticIpsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStaticIpsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStaticIpsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStaticIpsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStaticIpsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStaticIpsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStaticIpsOutputError>
}

public struct GetStaticIpsInput: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>To get a page token, perform an initial <code>GetStaticIps</code> request. If your results
    ///       are paginated, the response will return a next page token that you can specify as the page
    ///       token in a subsequent request.</p>
    public let pageToken: Swift.String?

    public init (
        pageToken: Swift.String? = nil
    )
    {
        self.pageToken = pageToken
    }
}

struct GetStaticIpsInputBody: Swift.Equatable {
    public let pageToken: Swift.String?
}

extension GetStaticIpsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pageToken)
        pageToken = pageTokenDecoded
    }
}

extension GetStaticIpsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetStaticIpsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetStaticIpsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetStaticIpsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetStaticIpsOutputResponse(nextPageToken: \(Swift.String(describing: nextPageToken)), staticIps: \(Swift.String(describing: staticIps)))"}
}

extension GetStaticIpsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetStaticIpsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.staticIps = output.staticIps
        } else {
            self.nextPageToken = nil
            self.staticIps = nil
        }
    }
}

public struct GetStaticIpsOutputResponse: Swift.Equatable {
    /// <p>The token to advance to the next page of results from your request.</p>
    ///          <p>A next page token is not returned if there are no more results to display.</p>
    ///          <p>To get the next page of results, perform another <code>GetStaticIps</code> request and
    ///       specify the next page token using the <code>pageToken</code> parameter.</p>
    public let nextPageToken: Swift.String?
    /// <p>An array of key-value pairs containing information about your get static IPs
    ///       request.</p>
    public let staticIps: [LightsailClientTypes.StaticIp]?

    public init (
        nextPageToken: Swift.String? = nil,
        staticIps: [LightsailClientTypes.StaticIp]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.staticIps = staticIps
    }
}

struct GetStaticIpsOutputResponseBody: Swift.Equatable {
    public let staticIps: [LightsailClientTypes.StaticIp]?
    public let nextPageToken: Swift.String?
}

extension GetStaticIpsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case staticIps
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticIpsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.StaticIp?].self, forKey: .staticIps)
        var staticIpsDecoded0:[LightsailClientTypes.StaticIp]? = nil
        if let staticIpsContainer = staticIpsContainer {
            staticIpsDecoded0 = [LightsailClientTypes.StaticIp]()
            for structure0 in staticIpsContainer {
                if let structure0 = structure0 {
                    staticIpsDecoded0?.append(structure0)
                }
            }
        }
        staticIps = staticIpsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension LightsailClientTypes {
    public enum HeaderEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accept
        case acceptcharset
        case acceptdatetime
        case acceptencoding
        case acceptlanguage
        case authorization
        case cloudfrontforwardedproto
        case cloudfrontisdesktopviewer
        case cloudfrontismobileviewer
        case cloudfrontissmarttvviewer
        case cloudfrontistabletviewer
        case cloudfrontviewercountry
        case host
        case origin
        case referer
        case sdkUnknown(Swift.String)

        public static var allCases: [HeaderEnum] {
            return [
                .accept,
                .acceptcharset,
                .acceptdatetime,
                .acceptencoding,
                .acceptlanguage,
                .authorization,
                .cloudfrontforwardedproto,
                .cloudfrontisdesktopviewer,
                .cloudfrontismobileviewer,
                .cloudfrontissmarttvviewer,
                .cloudfrontistabletviewer,
                .cloudfrontviewercountry,
                .host,
                .origin,
                .referer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accept: return "Accept"
            case .acceptcharset: return "Accept-Charset"
            case .acceptdatetime: return "Accept-Datetime"
            case .acceptencoding: return "Accept-Encoding"
            case .acceptlanguage: return "Accept-Language"
            case .authorization: return "Authorization"
            case .cloudfrontforwardedproto: return "CloudFront-Forwarded-Proto"
            case .cloudfrontisdesktopviewer: return "CloudFront-Is-Desktop-Viewer"
            case .cloudfrontismobileviewer: return "CloudFront-Is-Mobile-Viewer"
            case .cloudfrontissmarttvviewer: return "CloudFront-Is-SmartTV-Viewer"
            case .cloudfrontistabletviewer: return "CloudFront-Is-Tablet-Viewer"
            case .cloudfrontviewercountry: return "CloudFront-Viewer-Country"
            case .host: return "Host"
            case .origin: return "Origin"
            case .referer: return "Referer"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HeaderEnum(rawValue: rawValue) ?? HeaderEnum.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.HeaderObject: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case headersAllowList
        case option
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let headersAllowList = headersAllowList {
            var headersAllowListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .headersAllowList)
            for headerforwardlist0 in headersAllowList {
                try headersAllowListContainer.encode(headerforwardlist0.rawValue)
            }
        }
        if let option = option {
            try encodeContainer.encode(option.rawValue, forKey: .option)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ForwardValues.self, forKey: .option)
        option = optionDecoded
        let headersAllowListContainer = try containerValues.decodeIfPresent([LightsailClientTypes.HeaderEnum?].self, forKey: .headersAllowList)
        var headersAllowListDecoded0:[LightsailClientTypes.HeaderEnum]? = nil
        if let headersAllowListContainer = headersAllowListContainer {
            headersAllowListDecoded0 = [LightsailClientTypes.HeaderEnum]()
            for string0 in headersAllowListContainer {
                if let string0 = string0 {
                    headersAllowListDecoded0?.append(string0)
                }
            }
        }
        headersAllowList = headersAllowListDecoded0
    }
}

extension LightsailClientTypes.HeaderObject: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HeaderObject(headersAllowList: \(Swift.String(describing: headersAllowList)), option: \(Swift.String(describing: option)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the request headers that a Lightsail distribution bases caching on.</p>
    ///          <p>For the headers that you specify, your distribution caches separate versions of the
    ///       specified content based on the header values in viewer requests. For example, suppose viewer
    ///       requests for <code>logo.jpg</code> contain a custom <code>product</code> header that has a
    ///       value of either <code>acme</code> or <code>apex</code>, and you configure your distribution to
    ///       cache your content based on values in the <code>product</code> header. Your distribution
    ///       forwards the <code>product</code> header to the origin and caches the response from the origin
    ///       once for each header value.
    ///       </p>
    public struct HeaderObject: Swift.Equatable {
        /// <p>The specific headers to forward to your distribution's origin.</p>
        public let headersAllowList: [LightsailClientTypes.HeaderEnum]?
        /// <p>The headers that you want your distribution to forward to your origin and base caching
        ///       on.</p>
        ///          <p>You can configure your distribution to do one of the following:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>all</code>
        ///                   </b> - Forward all headers to your
        ///           origin.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>none</code>
        ///                   </b> - Forward only the default
        ///           headers.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>allow-list</code>
        ///                   </b> - Forward only the headers
        ///           you specify using the <code>headersAllowList</code> parameter.</p>
        ///             </li>
        ///          </ul>
        public let option: LightsailClientTypes.ForwardValues?

        public init (
            headersAllowList: [LightsailClientTypes.HeaderEnum]? = nil,
            option: LightsailClientTypes.ForwardValues? = nil
        )
        {
            self.headersAllowList = headersAllowList
            self.option = option
        }
    }

}

extension LightsailClientTypes.HostKeyAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithm
        case fingerprintSHA1
        case fingerprintSHA256
        case notValidAfter
        case notValidBefore
        case publicKey
        case witnessedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithm = algorithm {
            try encodeContainer.encode(algorithm, forKey: .algorithm)
        }
        if let fingerprintSHA1 = fingerprintSHA1 {
            try encodeContainer.encode(fingerprintSHA1, forKey: .fingerprintSHA1)
        }
        if let fingerprintSHA256 = fingerprintSHA256 {
            try encodeContainer.encode(fingerprintSHA256, forKey: .fingerprintSHA256)
        }
        if let notValidAfter = notValidAfter {
            try encodeContainer.encode(notValidAfter.timeIntervalSince1970, forKey: .notValidAfter)
        }
        if let notValidBefore = notValidBefore {
            try encodeContainer.encode(notValidBefore.timeIntervalSince1970, forKey: .notValidBefore)
        }
        if let publicKey = publicKey {
            try encodeContainer.encode(publicKey, forKey: .publicKey)
        }
        if let witnessedAt = witnessedAt {
            try encodeContainer.encode(witnessedAt.timeIntervalSince1970, forKey: .witnessedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithm)
        algorithm = algorithmDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let witnessedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .witnessedAt)
        witnessedAt = witnessedAtDecoded
        let fingerprintSHA1Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fingerprintSHA1)
        fingerprintSHA1 = fingerprintSHA1Decoded
        let fingerprintSHA256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fingerprintSHA256)
        fingerprintSHA256 = fingerprintSHA256Decoded
        let notValidBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .notValidBefore)
        notValidBefore = notValidBeforeDecoded
        let notValidAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .notValidAfter)
        notValidAfter = notValidAfterDecoded
    }
}

extension LightsailClientTypes.HostKeyAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HostKeyAttributes(algorithm: \(Swift.String(describing: algorithm)), fingerprintSHA1: \(Swift.String(describing: fingerprintSHA1)), fingerprintSHA256: \(Swift.String(describing: fingerprintSHA256)), notValidAfter: \(Swift.String(describing: notValidAfter)), notValidBefore: \(Swift.String(describing: notValidBefore)), publicKey: \(Swift.String(describing: publicKey)), witnessedAt: \(Swift.String(describing: witnessedAt)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the public SSH host keys or the RDP certificate.</p>
    public struct HostKeyAttributes: Swift.Equatable {
        /// <p>The SSH host key algorithm or the RDP certificate format.</p>
        ///          <p>For SSH host keys, the algorithm may be <code>ssh-rsa</code>,
        ///         <code>ecdsa-sha2-nistp256</code>, <code>ssh-ed25519</code>, etc. For RDP certificates, the
        ///       algorithm is always <code>x509-cert</code>.</p>
        public let algorithm: Swift.String?
        /// <p>The SHA-1 fingerprint of the returned SSH host key or RDP certificate.</p>
        ///          <ul>
        ///             <li>
        ///                <p>Example of an SHA-1 SSH fingerprint:</p>
        ///                <p>
        ///                   <code>SHA1:1CHH6FaAaXjtFOsR/t83vf91SR0</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>Example of an SHA-1 RDP fingerprint:</p>
        ///                <p>
        ///                   <code>af:34:51:fe:09:f0:e0:da:b8:4e:56:ca:60:c2:10:ff:38:06:db:45</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let fingerprintSHA1: Swift.String?
        /// <p>The SHA-256 fingerprint of the returned SSH host key or RDP certificate.</p>
        ///          <ul>
        ///             <li>
        ///                <p>Example of an SHA-256 SSH fingerprint:</p>
        ///                <p>
        ///                   <code>SHA256:KTsMnRBh1IhD17HpdfsbzeGA4jOijm5tyXsMjKVbB8o</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>Example of an SHA-256 RDP fingerprint:</p>
        ///                <p>
        ///                   <code>03:9b:36:9f:4b:de:4e:61:70:fc:7c:c9:78:e7:d2:1a:1c:25:a8:0c:91:f6:7c:e4:d6:a0:85:c8:b4:53:99:68</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let fingerprintSHA256: Swift.String?
        /// <p>The returned RDP certificate is not valid after this point in time.</p>
        ///          <p>This value is listed only for RDP certificates.</p>
        public let notValidAfter: ClientRuntime.Date?
        /// <p>The returned RDP certificate is valid after this point in time.</p>
        ///          <p>This value is listed only for RDP certificates.</p>
        public let notValidBefore: ClientRuntime.Date?
        /// <p>The public SSH host key or the RDP certificate.</p>
        public let publicKey: Swift.String?
        /// <p>The time that the SSH host key or RDP certificate was recorded by Lightsail.</p>
        public let witnessedAt: ClientRuntime.Date?

        public init (
            algorithm: Swift.String? = nil,
            fingerprintSHA1: Swift.String? = nil,
            fingerprintSHA256: Swift.String? = nil,
            notValidAfter: ClientRuntime.Date? = nil,
            notValidBefore: ClientRuntime.Date? = nil,
            publicKey: Swift.String? = nil,
            witnessedAt: ClientRuntime.Date? = nil
        )
        {
            self.algorithm = algorithm
            self.fingerprintSHA1 = fingerprintSHA1
            self.fingerprintSHA256 = fingerprintSHA256
            self.notValidAfter = notValidAfter
            self.notValidBefore = notValidBefore
            self.publicKey = publicKey
            self.witnessedAt = witnessedAt
        }
    }

}

public struct ImportKeyPairInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ImportKeyPairInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ImportKeyPairInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ImportKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ImportKeyPairInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ImportKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ImportKeyPairOutputError>
}

extension ImportKeyPairInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportKeyPairInput(keyPairName: \(Swift.String(describing: keyPairName)), publicKeyBase64: \(Swift.String(describing: publicKeyBase64)))"}
}

extension ImportKeyPairInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairName
        case publicKeyBase64
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyPairName = keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
        if let publicKeyBase64 = publicKeyBase64 {
            try encodeContainer.encode(publicKeyBase64, forKey: .publicKeyBase64)
        }
    }
}

public struct ImportKeyPairInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ImportKeyPairInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ImportKeyPairInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ImportKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ImportKeyPairInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ImportKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ImportKeyPairOutputError>
}

public struct ImportKeyPairInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ImportKeyPairInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ImportKeyPairInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ImportKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ImportKeyPairInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ImportKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ImportKeyPairOutputError>
}

public struct ImportKeyPairInput: Swift.Equatable {
    /// <p>The name of the key pair for which you want to import the public key.</p>
    public let keyPairName: Swift.String?
    /// <p>A base64-encoded public key of the <code>ssh-rsa</code> type.</p>
    public let publicKeyBase64: Swift.String?

    public init (
        keyPairName: Swift.String? = nil,
        publicKeyBase64: Swift.String? = nil
    )
    {
        self.keyPairName = keyPairName
        self.publicKeyBase64 = publicKeyBase64
    }
}

struct ImportKeyPairInputBody: Swift.Equatable {
    public let keyPairName: Swift.String?
    public let publicKeyBase64: Swift.String?
}

extension ImportKeyPairInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPairName
        case publicKeyBase64
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
        let publicKeyBase64Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKeyBase64)
        publicKeyBase64 = publicKeyBase64Decoded
    }
}

extension ImportKeyPairOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ImportKeyPairOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ImportKeyPairOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ImportKeyPairOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportKeyPairOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension ImportKeyPairOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ImportKeyPairOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct ImportKeyPairOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct ImportKeyPairOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension ImportKeyPairOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension LightsailClientTypes.InputOrigin: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case protocolPolicy
        case regionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let protocolPolicy = protocolPolicy {
            try encodeContainer.encode(protocolPolicy.rawValue, forKey: .protocolPolicy)
        }
        if let regionName = regionName {
            try encodeContainer.encode(regionName.rawValue, forKey: .regionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RegionName.self, forKey: .regionName)
        regionName = regionNameDecoded
        let protocolPolicyDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.OriginProtocolPolicyEnum.self, forKey: .protocolPolicy)
        protocolPolicy = protocolPolicyDecoded
    }
}

extension LightsailClientTypes.InputOrigin: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InputOrigin(name: \(Swift.String(describing: name)), protocolPolicy: \(Swift.String(describing: protocolPolicy)), regionName: \(Swift.String(describing: regionName)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the origin resource of an Amazon Lightsail content delivery network (CDN)
    ///       distribution.</p>
    ///          <p>An origin can be a Lightsail instance or load balancer. A distribution pulls content
    ///       from an origin, caches it, and serves it to viewers via a worldwide network of edge
    ///       servers.</p>
    public struct InputOrigin: Swift.Equatable {
        /// <p>The name of the origin resource.</p>
        public let name: Swift.String?
        /// <p>The protocol that your Amazon Lightsail distribution uses when establishing a connection
        ///       with your origin to pull content.</p>
        public let protocolPolicy: LightsailClientTypes.OriginProtocolPolicyEnum?
        /// <p>The AWS Region name of the origin resource.</p>
        public let regionName: LightsailClientTypes.RegionName?

        public init (
            name: Swift.String? = nil,
            protocolPolicy: LightsailClientTypes.OriginProtocolPolicyEnum? = nil,
            regionName: LightsailClientTypes.RegionName? = nil
        )
        {
            self.name = name
            self.protocolPolicy = protocolPolicy
            self.regionName = regionName
        }
    }

}

extension LightsailClientTypes.Instance: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case arn
        case blueprintId
        case blueprintName
        case bundleId
        case createdAt
        case hardware
        case ipAddressType
        case ipv6Addresses
        case isStaticIp
        case location
        case name
        case networking
        case privateIpAddress
        case publicIpAddress
        case resourceType
        case sshKeyName
        case state
        case supportCode
        case tags
        case username
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addonlist0 in addOns {
                try addOnsContainer.encode(addonlist0)
            }
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let blueprintId = blueprintId {
            try encodeContainer.encode(blueprintId, forKey: .blueprintId)
        }
        if let blueprintName = blueprintName {
            try encodeContainer.encode(blueprintName, forKey: .blueprintName)
        }
        if let bundleId = bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let hardware = hardware {
            try encodeContainer.encode(hardware, forKey: .hardware)
        }
        if let ipAddressType = ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let ipv6Addresses = ipv6Addresses {
            var ipv6AddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6Addresses)
            for ipv6addresslist0 in ipv6Addresses {
                try ipv6AddressesContainer.encode(ipv6addresslist0)
            }
        }
        if let isStaticIp = isStaticIp {
            try encodeContainer.encode(isStaticIp, forKey: .isStaticIp)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networking = networking {
            try encodeContainer.encode(networking, forKey: .networking)
        }
        if let privateIpAddress = privateIpAddress {
            try encodeContainer.encode(privateIpAddress, forKey: .privateIpAddress)
        }
        if let publicIpAddress = publicIpAddress {
            try encodeContainer.encode(publicIpAddress, forKey: .publicIpAddress)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sshKeyName = sshKeyName {
            try encodeContainer.encode(sshKeyName, forKey: .sshKeyName)
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let blueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintId)
        blueprintId = blueprintIdDecoded
        let blueprintNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintName)
        blueprintName = blueprintNameDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOn?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOn]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOn]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
        let isStaticIpDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isStaticIp)
        isStaticIp = isStaticIpDecoded
        let privateIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateIpAddress)
        privateIpAddress = privateIpAddressDecoded
        let publicIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicIpAddress)
        publicIpAddress = publicIpAddressDecoded
        let ipv6AddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipv6Addresses)
        var ipv6AddressesDecoded0:[Swift.String]? = nil
        if let ipv6AddressesContainer = ipv6AddressesContainer {
            ipv6AddressesDecoded0 = [Swift.String]()
            for string0 in ipv6AddressesContainer {
                if let string0 = string0 {
                    ipv6AddressesDecoded0?.append(string0)
                }
            }
        }
        ipv6Addresses = ipv6AddressesDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let hardwareDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceHardware.self, forKey: .hardware)
        hardware = hardwareDecoded
        let networkingDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceNetworking.self, forKey: .networking)
        networking = networkingDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceState.self, forKey: .state)
        state = stateDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let sshKeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sshKeyName)
        sshKeyName = sshKeyNameDecoded
    }
}

extension LightsailClientTypes.Instance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Instance(addOns: \(Swift.String(describing: addOns)), arn: \(Swift.String(describing: arn)), blueprintId: \(Swift.String(describing: blueprintId)), blueprintName: \(Swift.String(describing: blueprintName)), bundleId: \(Swift.String(describing: bundleId)), createdAt: \(Swift.String(describing: createdAt)), hardware: \(Swift.String(describing: hardware)), ipAddressType: \(Swift.String(describing: ipAddressType)), ipv6Addresses: \(Swift.String(describing: ipv6Addresses)), isStaticIp: \(Swift.String(describing: isStaticIp)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), networking: \(Swift.String(describing: networking)), privateIpAddress: \(Swift.String(describing: privateIpAddress)), publicIpAddress: \(Swift.String(describing: publicIpAddress)), resourceType: \(Swift.String(describing: resourceType)), sshKeyName: \(Swift.String(describing: sshKeyName)), state: \(Swift.String(describing: state)), supportCode: \(Swift.String(describing: supportCode)), tags: \(Swift.String(describing: tags)), username: \(Swift.String(describing: username)))"}
}

extension LightsailClientTypes {
    /// <p>Describes an instance (a virtual private server).</p>
    public struct Instance: Swift.Equatable {
        /// <p>An array of objects representing the add-ons enabled on the instance.</p>
        public let addOns: [LightsailClientTypes.AddOn]?
        /// <p>The Amazon Resource Name (ARN) of the instance (e.g.,
        ///         <code>arn:aws:lightsail:us-east-2:123456789101:Instance/244ad76f-8aad-4741-809f-12345EXAMPLE</code>).</p>
        public let arn: Swift.String?
        /// <p>The blueprint ID (e.g., <code>os_amlinux_2016_03</code>).</p>
        public let blueprintId: Swift.String?
        /// <p>The friendly name of the blueprint (e.g., <code>Amazon Linux</code>).</p>
        public let blueprintName: Swift.String?
        /// <p>The bundle for the instance (e.g., <code>micro_1_0</code>).</p>
        public let bundleId: Swift.String?
        /// <p>The timestamp when the instance was created (e.g., <code>1479734909.17</code>) in Unix
        ///       time format.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The size of the vCPU and the amount of RAM for the instance.</p>
        public let hardware: LightsailClientTypes.InstanceHardware?
        /// <p>The IP address type of the instance.</p>
        ///
        ///          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
        ///       IPv4 and IPv6.</p>
        public let ipAddressType: LightsailClientTypes.IpAddressType?
        /// <p>The IPv6 addresses of the instance.</p>
        public let ipv6Addresses: [Swift.String]?
        /// <p>A Boolean value indicating whether this instance has a static IP assigned to it.</p>
        public let isStaticIp: Swift.Bool?
        /// <p>The region name and Availability Zone where the instance is located.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The name the user gave the instance (e.g., <code>Amazon_Linux-1GB-Ohio-1</code>).</p>
        public let name: Swift.String?
        /// <p>Information about the public ports and monthly data transfer rates for the
        ///       instance.</p>
        public let networking: LightsailClientTypes.InstanceNetworking?
        /// <p>The private IP address of the instance.</p>
        public let privateIpAddress: Swift.String?
        /// <p>The public IP address of the instance.</p>
        public let publicIpAddress: Swift.String?
        /// <p>The type of resource (usually <code>Instance</code>).</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The name of the SSH key being used to connect to the instance (e.g.,
        ///         <code>LightsailDefaultKeyPair</code>).</p>
        public let sshKeyName: Swift.String?
        /// <p>The status code and the state (e.g., <code>running</code>) for the instance.</p>
        public let state: LightsailClientTypes.InstanceState?
        /// <p>The support code. Include this code in your email to support when you have questions about
        ///       an instance or another resource in Lightsail. This code enables our support team to look up
        ///       your Lightsail information more easily.</p>
        public let supportCode: Swift.String?
        /// <p>The tag keys and optional values for the resource. For more information about tags in
        ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
        ///         Dev Guide</a>.</p>
        public let tags: [LightsailClientTypes.Tag]?
        /// <p>The user name for connecting to the instance (e.g., <code>ec2-user</code>).</p>
        public let username: Swift.String?

        public init (
            addOns: [LightsailClientTypes.AddOn]? = nil,
            arn: Swift.String? = nil,
            blueprintId: Swift.String? = nil,
            blueprintName: Swift.String? = nil,
            bundleId: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            hardware: LightsailClientTypes.InstanceHardware? = nil,
            ipAddressType: LightsailClientTypes.IpAddressType? = nil,
            ipv6Addresses: [Swift.String]? = nil,
            isStaticIp: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            networking: LightsailClientTypes.InstanceNetworking? = nil,
            privateIpAddress: Swift.String? = nil,
            publicIpAddress: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sshKeyName: Swift.String? = nil,
            state: LightsailClientTypes.InstanceState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil,
            username: Swift.String? = nil
        )
        {
            self.addOns = addOns
            self.arn = arn
            self.blueprintId = blueprintId
            self.blueprintName = blueprintName
            self.bundleId = bundleId
            self.createdAt = createdAt
            self.hardware = hardware
            self.ipAddressType = ipAddressType
            self.ipv6Addresses = ipv6Addresses
            self.isStaticIp = isStaticIp
            self.location = location
            self.name = name
            self.networking = networking
            self.privateIpAddress = privateIpAddress
            self.publicIpAddress = publicIpAddress
            self.resourceType = resourceType
            self.sshKeyName = sshKeyName
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
            self.username = username
        }
    }

}

extension LightsailClientTypes.InstanceAccessDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certKey
        case expiresAt
        case hostKeys
        case instanceName
        case ipAddress
        case password
        case passwordData
        case privateKey
        case `protocol` = "protocol"
        case username
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certKey = certKey {
            try encodeContainer.encode(certKey, forKey: .certKey)
        }
        if let expiresAt = expiresAt {
            try encodeContainer.encode(expiresAt.timeIntervalSince1970, forKey: .expiresAt)
        }
        if let hostKeys = hostKeys {
            var hostKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hostKeys)
            for hostkeyslist0 in hostKeys {
                try hostKeysContainer.encode(hostkeyslist0)
            }
        }
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let passwordData = passwordData {
            try encodeContainer.encode(passwordData, forKey: .passwordData)
        }
        if let privateKey = privateKey {
            try encodeContainer.encode(privateKey, forKey: .privateKey)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certKey)
        certKey = certKeyDecoded
        let expiresAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expiresAt)
        expiresAt = expiresAtDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let passwordDataDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PasswordData.self, forKey: .passwordData)
        passwordData = passwordDataDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceAccessProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let hostKeysContainer = try containerValues.decodeIfPresent([LightsailClientTypes.HostKeyAttributes?].self, forKey: .hostKeys)
        var hostKeysDecoded0:[LightsailClientTypes.HostKeyAttributes]? = nil
        if let hostKeysContainer = hostKeysContainer {
            hostKeysDecoded0 = [LightsailClientTypes.HostKeyAttributes]()
            for structure0 in hostKeysContainer {
                if let structure0 = structure0 {
                    hostKeysDecoded0?.append(structure0)
                }
            }
        }
        hostKeys = hostKeysDecoded0
    }
}

extension LightsailClientTypes.InstanceAccessDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceAccessDetails(certKey: \(Swift.String(describing: certKey)), expiresAt: \(Swift.String(describing: expiresAt)), hostKeys: \(Swift.String(describing: hostKeys)), instanceName: \(Swift.String(describing: instanceName)), ipAddress: \(Swift.String(describing: ipAddress)), password: \(Swift.String(describing: password)), passwordData: \(Swift.String(describing: passwordData)), privateKey: \(Swift.String(describing: privateKey)), protocol: \(Swift.String(describing: `protocol`)), username: \(Swift.String(describing: username)))"}
}

extension LightsailClientTypes {
    /// <p>The parameters for gaining temporary access to one of your Amazon Lightsail
    ///       instances.</p>
    public struct InstanceAccessDetails: Swift.Equatable {
        /// <p>The protocol for these Amazon Lightsail instance access details.</p>
        public let `protocol`: LightsailClientTypes.InstanceAccessProtocol?
        /// <p>For SSH access, the public key to use when accessing your instance For OpenSSH clients
        ///       (e.g., command line SSH), you should save this value to <code>tempkey-cert.pub</code>.</p>
        public let certKey: Swift.String?
        /// <p>For SSH access, the date on which the temporary keys expire.</p>
        public let expiresAt: ClientRuntime.Date?
        /// <p>Describes the public SSH host keys or the RDP certificate.</p>
        public let hostKeys: [LightsailClientTypes.HostKeyAttributes]?
        /// <p>The name of this Amazon Lightsail instance.</p>
        public let instanceName: Swift.String?
        /// <p>The public IP address of the Amazon Lightsail instance.</p>
        public let ipAddress: Swift.String?
        /// <p>For RDP access, the password for your Amazon Lightsail instance. Password will be an empty
        ///       string if the password for your new instance is not ready yet. When you create an instance, it
        ///       can take up to 15 minutes for the instance to be ready.</p>
        ///          <note>
        ///             <p>If you create an instance using any key pair other than the default
        ///           (<code>LightsailDefaultKeyPair</code>), <code>password</code> will always be an empty
        ///         string.</p>
        ///             <p>If you change the Administrator password on the instance, Lightsail will continue to
        ///         return the original password value. When accessing the instance using RDP, you need to
        ///         manually enter the Administrator password after changing it from the default.</p>
        ///          </note>
        public let password: Swift.String?
        /// <p>For a Windows Server-based instance, an object with the data you can use to retrieve your
        ///       password. This is only needed if <code>password</code> is empty and the instance is not new
        ///       (and therefore the password is not ready yet). When you create an instance, it can take up to
        ///       15 minutes for the instance to be ready.</p>
        public let passwordData: LightsailClientTypes.PasswordData?
        /// <p>For SSH access, the temporary private key. For OpenSSH clients (e.g., command line SSH),
        ///       you should save this value to <code>tempkey</code>).</p>
        public let privateKey: Swift.String?
        /// <p>The user name to use when logging in to the Amazon Lightsail instance.</p>
        public let username: Swift.String?

        public init (
            `protocol`: LightsailClientTypes.InstanceAccessProtocol? = nil,
            certKey: Swift.String? = nil,
            expiresAt: ClientRuntime.Date? = nil,
            hostKeys: [LightsailClientTypes.HostKeyAttributes]? = nil,
            instanceName: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            password: Swift.String? = nil,
            passwordData: LightsailClientTypes.PasswordData? = nil,
            privateKey: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.`protocol` = `protocol`
            self.certKey = certKey
            self.expiresAt = expiresAt
            self.hostKeys = hostKeys
            self.instanceName = instanceName
            self.ipAddress = ipAddress
            self.password = password
            self.passwordData = passwordData
            self.privateKey = privateKey
            self.username = username
        }
    }

}

extension LightsailClientTypes {
    public enum InstanceAccessProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rdp
        case ssh
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceAccessProtocol] {
            return [
                .rdp,
                .ssh,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rdp: return "rdp"
            case .ssh: return "ssh"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceAccessProtocol(rawValue: rawValue) ?? InstanceAccessProtocol.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.InstanceEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case instanceType
        case portInfoSource
        case sourceName
        case userData
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let portInfoSource = portInfoSource {
            try encodeContainer.encode(portInfoSource.rawValue, forKey: .portInfoSource)
        }
        if let sourceName = sourceName {
            try encodeContainer.encode(sourceName, forKey: .sourceName)
        }
        if let userData = userData {
            try encodeContainer.encode(userData, forKey: .userData)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceName)
        sourceName = sourceNameDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let portInfoSourceDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PortInfoSourceType.self, forKey: .portInfoSource)
        portInfoSource = portInfoSourceDecoded
        let userDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userData)
        userData = userDataDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
    }
}

extension LightsailClientTypes.InstanceEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceEntry(availabilityZone: \(Swift.String(describing: availabilityZone)), instanceType: \(Swift.String(describing: instanceType)), portInfoSource: \(Swift.String(describing: portInfoSource)), sourceName: \(Swift.String(describing: sourceName)), userData: \(Swift.String(describing: userData)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the Amazon Elastic Compute Cloud instance and related resources to be created using the
    ///         <code>create cloud formation stack</code> operation.</p>
    public struct InstanceEntry: Swift.Equatable {
        /// <p>The Availability Zone for the new Amazon EC2 instance.</p>
        public let availabilityZone: Swift.String?
        /// <p>The instance type (e.g., <code>t2.micro</code>) to use for the new Amazon EC2 instance.</p>
        public let instanceType: Swift.String?
        /// <p>The port configuration to use for the new Amazon EC2 instance.</p>
        ///
        ///          <p>The following configuration options are available:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>DEFAULT</code> - Use the default firewall settings from the Lightsail instance
        ///           blueprint. If this is specified, then IPv4 and IPv6 will be configured for the new
        ///           instance that is created in Amazon EC2.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>INSTANCE</code> - Use the configured firewall settings from the source
        ///           Lightsail instance. If this is specified, the new instance that is created in Amazon EC2 will
        ///           be configured to match the configuration of the source Lightsail instance. For example,
        ///           if the source instance is configured for dual-stack (IPv4 and IPv6), then IPv4 and IPv6
        ///           will be configured for the new instance that is created in Amazon EC2. If the source instance
        ///           is configured for IPv4 only, then only IPv4 will be configured for the new instance that
        ///           is created in Amazon EC2.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NONE</code> - Use the default Amazon EC2 security group. If this is specified, then
        ///           only IPv4 will be configured for the new instance that is created in Amazon EC2.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>CLOSED</code> - All ports closed. If this is specified, then only IPv4 will be
        ///           configured for the new instance that is created in Amazon EC2.</p>
        ///             </li>
        ///          </ul>
        ///          <note>
        ///             <p>If you configured <code>lightsail-connect</code> as a <code>cidrListAliases</code> on
        ///         your instance, or if you chose to allow the Lightsail browser-based SSH or RDP clients to
        ///         connect to your instance, that configuration is not carried over to your new Amazon EC2
        ///         instance.</p>
        ///          </note>
        public let portInfoSource: LightsailClientTypes.PortInfoSourceType?
        /// <p>The name of the export snapshot record, which contains the exported Lightsail instance
        ///       snapshot that will be used as the source of the new Amazon EC2 instance.</p>
        ///          <p>Use the <code>get export snapshot records</code> operation to get a list of export
        ///       snapshot records that you can use to create a CloudFormation stack.</p>
        public let sourceName: Swift.String?
        /// <p>A launch script you can create that configures a server with additional user data. For
        ///       example, you might want to run <code>apt-get -y update</code>.</p>
        ///          <note>
        ///             <p>Depending on the machine image you choose, the command to get software on your instance
        ///         varies. Amazon Linux and CentOS use <code>yum</code>, Debian and Ubuntu use
        ///           <code>apt-get</code>, and FreeBSD uses <code>pkg</code>.</p>
        ///          </note>
        public let userData: Swift.String?

        public init (
            availabilityZone: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            portInfoSource: LightsailClientTypes.PortInfoSourceType? = nil,
            sourceName: Swift.String? = nil,
            userData: Swift.String? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.portInfoSource = portInfoSource
            self.sourceName = sourceName
            self.userData = userData
        }
    }

}

extension LightsailClientTypes.InstanceHardware: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cpuCount
        case disks
        case ramSizeInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cpuCount = cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let disks = disks {
            var disksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .disks)
            for disklist0 in disks {
                try disksContainer.encode(disklist0)
            }
        }
        if let ramSizeInGb = ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cpuCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let disksContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Disk?].self, forKey: .disks)
        var disksDecoded0:[LightsailClientTypes.Disk]? = nil
        if let disksContainer = disksContainer {
            disksDecoded0 = [LightsailClientTypes.Disk]()
            for structure0 in disksContainer {
                if let structure0 = structure0 {
                    disksDecoded0?.append(structure0)
                }
            }
        }
        disks = disksDecoded0
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
    }
}

extension LightsailClientTypes.InstanceHardware: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceHardware(cpuCount: \(Swift.String(describing: cpuCount)), disks: \(Swift.String(describing: disks)), ramSizeInGb: \(Swift.String(describing: ramSizeInGb)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the hardware for the instance.</p>
    public struct InstanceHardware: Swift.Equatable {
        /// <p>The number of vCPUs the instance has.</p>
        public let cpuCount: Swift.Int?
        /// <p>The disks attached to the instance.</p>
        public let disks: [LightsailClientTypes.Disk]?
        /// <p>The amount of RAM in GB on the instance (e.g., <code>1.0</code>).</p>
        public let ramSizeInGb: Swift.Float?

        public init (
            cpuCount: Swift.Int? = nil,
            disks: [LightsailClientTypes.Disk]? = nil,
            ramSizeInGb: Swift.Float? = nil
        )
        {
            self.cpuCount = cpuCount
            self.disks = disks
            self.ramSizeInGb = ramSizeInGb
        }
    }

}

extension LightsailClientTypes {
    public enum InstanceHealthReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case instancederegistrationinprogress
        case instancefailedhealthchecks
        case instanceinvalidstate
        case instanceipunusable
        case instancenotinuse
        case instancenotregistered
        case instanceresponsecodemismatch
        case instancetimeout
        case lbinitialhealthchecking
        case lbinternalerror
        case lbregistrationinprogress
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceHealthReason] {
            return [
                .instancederegistrationinprogress,
                .instancefailedhealthchecks,
                .instanceinvalidstate,
                .instanceipunusable,
                .instancenotinuse,
                .instancenotregistered,
                .instanceresponsecodemismatch,
                .instancetimeout,
                .lbinitialhealthchecking,
                .lbinternalerror,
                .lbregistrationinprogress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .instancederegistrationinprogress: return "Instance.DeregistrationInProgress"
            case .instancefailedhealthchecks: return "Instance.FailedHealthChecks"
            case .instanceinvalidstate: return "Instance.InvalidState"
            case .instanceipunusable: return "Instance.IpUnusable"
            case .instancenotinuse: return "Instance.NotInUse"
            case .instancenotregistered: return "Instance.NotRegistered"
            case .instanceresponsecodemismatch: return "Instance.ResponseCodeMismatch"
            case .instancetimeout: return "Instance.Timeout"
            case .lbinitialhealthchecking: return "Lb.InitialHealthChecking"
            case .lbinternalerror: return "Lb.InternalError"
            case .lbregistrationinprogress: return "Lb.RegistrationInProgress"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceHealthReason(rawValue: rawValue) ?? InstanceHealthReason.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum InstanceHealthState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case draining
        case healthy
        case initial
        case unavailable
        case unhealthy
        case unused
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceHealthState] {
            return [
                .draining,
                .healthy,
                .initial,
                .unavailable,
                .unhealthy,
                .unused,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .draining: return "draining"
            case .healthy: return "healthy"
            case .initial: return "initial"
            case .unavailable: return "unavailable"
            case .unhealthy: return "unhealthy"
            case .unused: return "unused"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceHealthState(rawValue: rawValue) ?? InstanceHealthState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.InstanceHealthSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceHealth
        case instanceHealthReason
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceHealth = instanceHealth {
            try encodeContainer.encode(instanceHealth.rawValue, forKey: .instanceHealth)
        }
        if let instanceHealthReason = instanceHealthReason {
            try encodeContainer.encode(instanceHealthReason.rawValue, forKey: .instanceHealthReason)
        }
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let instanceHealthDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceHealthState.self, forKey: .instanceHealth)
        instanceHealth = instanceHealthDecoded
        let instanceHealthReasonDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceHealthReason.self, forKey: .instanceHealthReason)
        instanceHealthReason = instanceHealthReasonDecoded
    }
}

extension LightsailClientTypes.InstanceHealthSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceHealthSummary(instanceHealth: \(Swift.String(describing: instanceHealth)), instanceHealthReason: \(Swift.String(describing: instanceHealthReason)), instanceName: \(Swift.String(describing: instanceName)))"}
}

extension LightsailClientTypes {
    /// <p>Describes information about the health of the instance.</p>
    public struct InstanceHealthSummary: Swift.Equatable {
        /// <p>Describes the overall instance health. Valid values are below.</p>
        public let instanceHealth: LightsailClientTypes.InstanceHealthState?
        /// <p>More information about the instance health. If the <code>instanceHealth</code> is
        ///         <code>healthy</code>, then an <code>instanceHealthReason</code> value is not
        ///       provided.</p>
        ///          <p>If <b>
        ///                <code>instanceHealth</code>
        ///             </b> is <code>initial</code>,
        ///       the <b>
        ///                <code>instanceHealthReason</code>
        ///             </b> value can be one of the
        ///       following:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Lb.RegistrationInProgress</code>
        ///                   </b> - The target
        ///           instance is in the process of being registered with the load balancer.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Lb.InitialHealthChecking</code>
        ///                   </b> - The
        ///           Lightsail load balancer is still sending the target instance the minimum number of
        ///           health checks required to determine its health status.</p>
        ///             </li>
        ///          </ul>
        ///          <p>If <b>
        ///                <code>instanceHealth</code>
        ///             </b> is <code>unhealthy</code>,
        ///       the <b>
        ///                <code>instanceHealthReason</code>
        ///             </b> value can be one of the
        ///       following:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Instance.ResponseCodeMismatch</code>
        ///                   </b> - The
        ///           health checks did not return an expected HTTP code.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Instance.Timeout</code>
        ///                   </b> - The health check
        ///           requests timed out.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Instance.FailedHealthChecks</code>
        ///                   </b> - The health
        ///           checks failed because the connection to the target instance timed out, the target instance
        ///           response was malformed, or the target instance failed the health check for an unknown
        ///           reason.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Lb.InternalError</code>
        ///                   </b> - The health checks
        ///           failed due to an internal error.</p>
        ///             </li>
        ///          </ul>
        ///          <p>If <b>
        ///                <code>instanceHealth</code>
        ///             </b> is <code>unused</code>,
        ///       the <b>
        ///                <code>instanceHealthReason</code>
        ///             </b> value can be one of the
        ///       following:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Instance.NotRegistered</code>
        ///                   </b> - The target
        ///           instance is not registered with the target group.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Instance.NotInUse</code>
        ///                   </b> - The target group is
        ///           not used by any load balancer, or the target instance is in an Availability Zone that is
        ///           not enabled for its load balancer.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Instance.IpUnusable</code>
        ///                   </b> - The target IP
        ///           address is reserved for use by a Lightsail load balancer.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Instance.InvalidState</code>
        ///                   </b> - The target is in
        ///           the stopped or terminated state.</p>
        ///             </li>
        ///          </ul>
        ///          <p>If <b>
        ///                <code>instanceHealth</code>
        ///             </b> is <code>draining</code>,
        ///       the <b>
        ///                <code>instanceHealthReason</code>
        ///             </b> value can be one of the
        ///       following:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Instance.DeregistrationInProgress</code>
        ///                   </b> - The
        ///           target instance is in the process of being deregistered and the deregistration delay
        ///           period has not expired.</p>
        ///             </li>
        ///          </ul>
        public let instanceHealthReason: LightsailClientTypes.InstanceHealthReason?
        /// <p>The name of the Lightsail instance for which you are requesting health check
        ///       data.</p>
        public let instanceName: Swift.String?

        public init (
            instanceHealth: LightsailClientTypes.InstanceHealthState? = nil,
            instanceHealthReason: LightsailClientTypes.InstanceHealthReason? = nil,
            instanceName: Swift.String? = nil
        )
        {
            self.instanceHealth = instanceHealth
            self.instanceHealthReason = instanceHealthReason
            self.instanceName = instanceName
        }
    }

}

extension LightsailClientTypes {
    public enum InstanceMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case burstcapacitypercentage
        case burstcapacitytime
        case cpuutilization
        case networkin
        case networkout
        case statuscheckfailed
        case statuscheckfailedInstance
        case statuscheckfailedSystem
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceMetricName] {
            return [
                .burstcapacitypercentage,
                .burstcapacitytime,
                .cpuutilization,
                .networkin,
                .networkout,
                .statuscheckfailed,
                .statuscheckfailedInstance,
                .statuscheckfailedSystem,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .burstcapacitypercentage: return "BurstCapacityPercentage"
            case .burstcapacitytime: return "BurstCapacityTime"
            case .cpuutilization: return "CPUUtilization"
            case .networkin: return "NetworkIn"
            case .networkout: return "NetworkOut"
            case .statuscheckfailed: return "StatusCheckFailed"
            case .statuscheckfailedInstance: return "StatusCheckFailed_Instance"
            case .statuscheckfailedSystem: return "StatusCheckFailed_System"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceMetricName(rawValue: rawValue) ?? InstanceMetricName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.InstanceNetworking: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monthlyTransfer
        case ports
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let monthlyTransfer = monthlyTransfer {
            try encodeContainer.encode(monthlyTransfer, forKey: .monthlyTransfer)
        }
        if let ports = ports {
            var portsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ports)
            for instanceportinfolist0 in ports {
                try portsContainer.encode(instanceportinfolist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monthlyTransferDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MonthlyTransfer.self, forKey: .monthlyTransfer)
        monthlyTransfer = monthlyTransferDecoded
        let portsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.InstancePortInfo?].self, forKey: .ports)
        var portsDecoded0:[LightsailClientTypes.InstancePortInfo]? = nil
        if let portsContainer = portsContainer {
            portsDecoded0 = [LightsailClientTypes.InstancePortInfo]()
            for structure0 in portsContainer {
                if let structure0 = structure0 {
                    portsDecoded0?.append(structure0)
                }
            }
        }
        ports = portsDecoded0
    }
}

extension LightsailClientTypes.InstanceNetworking: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceNetworking(monthlyTransfer: \(Swift.String(describing: monthlyTransfer)), ports: \(Swift.String(describing: ports)))"}
}

extension LightsailClientTypes {
    /// <p>Describes monthly data transfer rates and port information for an instance.</p>
    public struct InstanceNetworking: Swift.Equatable {
        /// <p>The amount of data in GB allocated for monthly data transfers.</p>
        public let monthlyTransfer: LightsailClientTypes.MonthlyTransfer?
        /// <p>An array of key-value pairs containing information about the ports on the instance.</p>
        public let ports: [LightsailClientTypes.InstancePortInfo]?

        public init (
            monthlyTransfer: LightsailClientTypes.MonthlyTransfer? = nil,
            ports: [LightsailClientTypes.InstancePortInfo]? = nil
        )
        {
            self.monthlyTransfer = monthlyTransfer
            self.ports = ports
        }
    }

}

extension LightsailClientTypes {
    public enum InstancePlatform: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case linuxunix
        case windows
        case sdkUnknown(Swift.String)

        public static var allCases: [InstancePlatform] {
            return [
                .linuxunix,
                .windows,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .linuxunix: return "LINUX_UNIX"
            case .windows: return "WINDOWS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstancePlatform(rawValue: rawValue) ?? InstancePlatform.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.InstancePortInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessDirection
        case accessFrom
        case accessType
        case cidrListAliases
        case cidrs
        case commonName
        case fromPort
        case ipv6Cidrs
        case `protocol` = "protocol"
        case toPort
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessDirection = accessDirection {
            try encodeContainer.encode(accessDirection.rawValue, forKey: .accessDirection)
        }
        if let accessFrom = accessFrom {
            try encodeContainer.encode(accessFrom, forKey: .accessFrom)
        }
        if let accessType = accessType {
            try encodeContainer.encode(accessType.rawValue, forKey: .accessType)
        }
        if let cidrListAliases = cidrListAliases {
            var cidrListAliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrListAliases)
            for stringlist0 in cidrListAliases {
                try cidrListAliasesContainer.encode(stringlist0)
            }
        }
        if let cidrs = cidrs {
            var cidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrs)
            for stringlist0 in cidrs {
                try cidrsContainer.encode(stringlist0)
            }
        }
        if let commonName = commonName {
            try encodeContainer.encode(commonName, forKey: .commonName)
        }
        if fromPort != 0 {
            try encodeContainer.encode(fromPort, forKey: .fromPort)
        }
        if let ipv6Cidrs = ipv6Cidrs {
            var ipv6CidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6Cidrs)
            for stringlist0 in ipv6Cidrs {
                try ipv6CidrsContainer.encode(stringlist0)
            }
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if toPort != 0 {
            try encodeContainer.encode(toPort, forKey: .toPort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .fromPort)
        fromPort = fromPortDecoded
        let toPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .toPort)
        toPort = toPortDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.NetworkProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let accessFromDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessFrom)
        accessFrom = accessFromDecoded
        let accessTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PortAccessType.self, forKey: .accessType)
        accessType = accessTypeDecoded
        let commonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commonName)
        commonName = commonNameDecoded
        let accessDirectionDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AccessDirection.self, forKey: .accessDirection)
        accessDirection = accessDirectionDecoded
        let cidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrs)
        var cidrsDecoded0:[Swift.String]? = nil
        if let cidrsContainer = cidrsContainer {
            cidrsDecoded0 = [Swift.String]()
            for string0 in cidrsContainer {
                if let string0 = string0 {
                    cidrsDecoded0?.append(string0)
                }
            }
        }
        cidrs = cidrsDecoded0
        let ipv6CidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipv6Cidrs)
        var ipv6CidrsDecoded0:[Swift.String]? = nil
        if let ipv6CidrsContainer = ipv6CidrsContainer {
            ipv6CidrsDecoded0 = [Swift.String]()
            for string0 in ipv6CidrsContainer {
                if let string0 = string0 {
                    ipv6CidrsDecoded0?.append(string0)
                }
            }
        }
        ipv6Cidrs = ipv6CidrsDecoded0
        let cidrListAliasesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrListAliases)
        var cidrListAliasesDecoded0:[Swift.String]? = nil
        if let cidrListAliasesContainer = cidrListAliasesContainer {
            cidrListAliasesDecoded0 = [Swift.String]()
            for string0 in cidrListAliasesContainer {
                if let string0 = string0 {
                    cidrListAliasesDecoded0?.append(string0)
                }
            }
        }
        cidrListAliases = cidrListAliasesDecoded0
    }
}

extension LightsailClientTypes.InstancePortInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstancePortInfo(accessDirection: \(Swift.String(describing: accessDirection)), accessFrom: \(Swift.String(describing: accessFrom)), accessType: \(Swift.String(describing: accessType)), cidrListAliases: \(Swift.String(describing: cidrListAliases)), cidrs: \(Swift.String(describing: cidrs)), commonName: \(Swift.String(describing: commonName)), fromPort: \(Swift.String(describing: fromPort)), ipv6Cidrs: \(Swift.String(describing: ipv6Cidrs)), protocol: \(Swift.String(describing: `protocol`)), toPort: \(Swift.String(describing: toPort)))"}
}

extension LightsailClientTypes {
    /// <p>Describes information about ports for an Amazon Lightsail instance.</p>
    public struct InstancePortInfo: Swift.Equatable {
        /// <p>The IP protocol name.</p>
        ///          <p>The name can be one of the following:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>tcp</code> - Transmission Control Protocol (TCP) provides reliable, ordered, and
        ///           error-checked delivery of streamed data between applications running on hosts
        ///           communicating by an IP network. If you have an application that doesn't require reliable
        ///           data stream service, use UDP instead.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>all</code> - All transport layer protocol types. For more general information,
        ///           see <a href="https://en.wikipedia.org/wiki/Transport_layer">Transport layer</a> on
        ///             <i>Wikipedia</i>.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>udp</code> - With User Datagram Protocol (UDP), computer applications can send
        ///           messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior
        ///           communications are not required to set up transmission channels or data paths.
        ///           Applications that don't require reliable data stream service can use UDP, which provides a
        ///           connectionless datagram service that emphasizes reduced latency over reliability. If you
        ///           do require reliable data stream service, use TCP instead.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>icmp</code> - Internet Control Message Protocol (ICMP) is used to send error
        ///           messages and operational information indicating success or failure when communicating with
        ///           an instance. For example, an error is indicated when an instance could not be reached.
        ///           When you specify <code>icmp</code> as the <code>protocol</code>, you must specify the ICMP
        ///           type using the <code>fromPort</code> parameter, and ICMP code using the
        ///             <code>toPort</code> parameter.</p>
        ///             </li>
        ///          </ul>
        public let `protocol`: LightsailClientTypes.NetworkProtocol?
        /// <p>The access direction (<code>inbound</code> or <code>outbound</code>).</p>
        ///          <note>
        ///             <p>Lightsail currently supports only <code>inbound</code> access direction.</p>
        ///          </note>
        public let accessDirection: LightsailClientTypes.AccessDirection?
        /// <p>The location from which access is allowed. For example, <code>Anywhere (0.0.0.0/0)</code>,
        ///       or <code>Custom</code> if a specific IP address or range of IP addresses is allowed.</p>
        public let accessFrom: Swift.String?
        /// <p>The type of access (<code>Public</code> or <code>Private</code>).</p>
        public let accessType: LightsailClientTypes.PortAccessType?
        /// <p>An alias that defines access for a preconfigured range of IP addresses.</p>
        ///          <p>The only alias currently supported is <code>lightsail-connect</code>, which allows IP
        ///       addresses of the browser-based RDP/SSH client in the Lightsail console to connect to your
        ///       instance.</p>
        public let cidrListAliases: [Swift.String]?
        /// <p>The IPv4 address, or range of IPv4 addresses (in CIDR notation) that are allowed to
        ///       connect to an instance through the ports, and the protocol.</p>
        ///          <note>
        ///             <p>The <code>ipv6Cidrs</code> parameter lists the IPv6 addresses that are allowed to
        ///         connect to an instance.</p>
        ///          </note>
        ///          <p>For more information about CIDR block notation, see <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation">Classless
        ///         Inter-Domain Routing</a> on <i>Wikipedia</i>.</p>
        public let cidrs: [Swift.String]?
        /// <p>The common name of the port information.</p>
        public let commonName: Swift.String?
        /// <p>The first port in a range of open ports on an instance.</p>
        ///          <p>Allowed ports:</p>
        ///          <ul>
        ///             <li>
        ///                <p>TCP and UDP - <code>0</code> to <code>65535</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>ICMP - The ICMP type for IPv4 addresses. For example, specify <code>8</code> as the
        ///             <code>fromPort</code> (ICMP type), and <code>-1</code> as the <code>toPort</code> (ICMP
        ///           code), to enable ICMP Ping. For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages">Control Messages</a> on <i>Wikipedia</i>.</p>
        ///             </li>
        ///             <li>
        ///                <p>ICMPv6 - The ICMP type for IPv6 addresses. For example, specify <code>128</code> as
        ///           the <code>fromPort</code> (ICMPv6 type), and <code>0</code> as <code>toPort</code> (ICMPv6
        ///           code). For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6">Internet
        ///             Control Message Protocol for IPv6</a>.</p>
        ///             </li>
        ///          </ul>
        public let fromPort: Swift.Int
        /// <p>The IPv6 address, or range of IPv6 addresses (in CIDR notation) that are allowed to
        ///       connect to an instance through the ports, and the protocol. Only devices with an IPv6 address
        ///       can connect to an instance through IPv6; otherwise, IPv4 should be used.</p>
        ///          <note>
        ///             <p>The <code>cidrs</code> parameter lists the IPv4 addresses that are allowed to connect to
        ///         an instance.</p>
        ///          </note>
        ///          <p>For more information about CIDR block notation, see <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation">Classless
        ///         Inter-Domain Routing</a> on <i>Wikipedia</i>.</p>
        public let ipv6Cidrs: [Swift.String]?
        /// <p>The last port in a range of open ports on an instance.</p>
        ///          <p>Allowed ports:</p>
        ///          <ul>
        ///             <li>
        ///                <p>TCP and UDP - <code>0</code> to <code>65535</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>ICMP - The ICMP code for IPv4 addresses. For example, specify <code>8</code> as the
        ///             <code>fromPort</code> (ICMP type), and <code>-1</code> as the <code>toPort</code> (ICMP
        ///           code), to enable ICMP Ping. For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages">Control Messages</a> on <i>Wikipedia</i>.</p>
        ///             </li>
        ///             <li>
        ///                <p>ICMPv6 - The ICMP code for IPv6 addresses. For example, specify <code>128</code> as
        ///           the <code>fromPort</code> (ICMPv6 type), and <code>0</code> as <code>toPort</code> (ICMPv6
        ///           code). For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6">Internet
        ///             Control Message Protocol for IPv6</a>.</p>
        ///             </li>
        ///          </ul>
        public let toPort: Swift.Int

        public init (
            `protocol`: LightsailClientTypes.NetworkProtocol? = nil,
            accessDirection: LightsailClientTypes.AccessDirection? = nil,
            accessFrom: Swift.String? = nil,
            accessType: LightsailClientTypes.PortAccessType? = nil,
            cidrListAliases: [Swift.String]? = nil,
            cidrs: [Swift.String]? = nil,
            commonName: Swift.String? = nil,
            fromPort: Swift.Int = 0,
            ipv6Cidrs: [Swift.String]? = nil,
            toPort: Swift.Int = 0
        )
        {
            self.`protocol` = `protocol`
            self.accessDirection = accessDirection
            self.accessFrom = accessFrom
            self.accessType = accessType
            self.cidrListAliases = cidrListAliases
            self.cidrs = cidrs
            self.commonName = commonName
            self.fromPort = fromPort
            self.ipv6Cidrs = ipv6Cidrs
            self.toPort = toPort
        }
    }

}

extension LightsailClientTypes.InstancePortState: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrListAliases
        case cidrs
        case fromPort
        case ipv6Cidrs
        case `protocol` = "protocol"
        case state
        case toPort
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrListAliases = cidrListAliases {
            var cidrListAliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrListAliases)
            for stringlist0 in cidrListAliases {
                try cidrListAliasesContainer.encode(stringlist0)
            }
        }
        if let cidrs = cidrs {
            var cidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrs)
            for stringlist0 in cidrs {
                try cidrsContainer.encode(stringlist0)
            }
        }
        if fromPort != 0 {
            try encodeContainer.encode(fromPort, forKey: .fromPort)
        }
        if let ipv6Cidrs = ipv6Cidrs {
            var ipv6CidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6Cidrs)
            for stringlist0 in ipv6Cidrs {
                try ipv6CidrsContainer.encode(stringlist0)
            }
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if toPort != 0 {
            try encodeContainer.encode(toPort, forKey: .toPort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .fromPort)
        fromPort = fromPortDecoded
        let toPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .toPort)
        toPort = toPortDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.NetworkProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PortState.self, forKey: .state)
        state = stateDecoded
        let cidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrs)
        var cidrsDecoded0:[Swift.String]? = nil
        if let cidrsContainer = cidrsContainer {
            cidrsDecoded0 = [Swift.String]()
            for string0 in cidrsContainer {
                if let string0 = string0 {
                    cidrsDecoded0?.append(string0)
                }
            }
        }
        cidrs = cidrsDecoded0
        let ipv6CidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipv6Cidrs)
        var ipv6CidrsDecoded0:[Swift.String]? = nil
        if let ipv6CidrsContainer = ipv6CidrsContainer {
            ipv6CidrsDecoded0 = [Swift.String]()
            for string0 in ipv6CidrsContainer {
                if let string0 = string0 {
                    ipv6CidrsDecoded0?.append(string0)
                }
            }
        }
        ipv6Cidrs = ipv6CidrsDecoded0
        let cidrListAliasesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrListAliases)
        var cidrListAliasesDecoded0:[Swift.String]? = nil
        if let cidrListAliasesContainer = cidrListAliasesContainer {
            cidrListAliasesDecoded0 = [Swift.String]()
            for string0 in cidrListAliasesContainer {
                if let string0 = string0 {
                    cidrListAliasesDecoded0?.append(string0)
                }
            }
        }
        cidrListAliases = cidrListAliasesDecoded0
    }
}

extension LightsailClientTypes.InstancePortState: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstancePortState(cidrListAliases: \(Swift.String(describing: cidrListAliases)), cidrs: \(Swift.String(describing: cidrs)), fromPort: \(Swift.String(describing: fromPort)), ipv6Cidrs: \(Swift.String(describing: ipv6Cidrs)), protocol: \(Swift.String(describing: `protocol`)), state: \(Swift.String(describing: state)), toPort: \(Swift.String(describing: toPort)))"}
}

extension LightsailClientTypes {
    /// <p>Describes open ports on an instance, the IP addresses allowed to connect to the instance
    ///       through the ports, and the protocol.</p>
    public struct InstancePortState: Swift.Equatable {
        /// <p>The IP protocol name.</p>
        ///          <p>The name can be one of the following:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>tcp</code> - Transmission Control Protocol (TCP) provides reliable, ordered, and
        ///           error-checked delivery of streamed data between applications running on hosts
        ///           communicating by an IP network. If you have an application that doesn't require reliable
        ///           data stream service, use UDP instead.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>all</code> - All transport layer protocol types. For more general information,
        ///           see <a href="https://en.wikipedia.org/wiki/Transport_layer">Transport layer</a> on
        ///             <i>Wikipedia</i>.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>udp</code> - With User Datagram Protocol (UDP), computer applications can send
        ///           messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior
        ///           communications are not required to set up transmission channels or data paths.
        ///           Applications that don't require reliable data stream service can use UDP, which provides a
        ///           connectionless datagram service that emphasizes reduced latency over reliability. If you
        ///           do require reliable data stream service, use TCP instead.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>icmp</code> - Internet Control Message Protocol (ICMP) is used to send error
        ///           messages and operational information indicating success or failure when communicating with
        ///           an instance. For example, an error is indicated when an instance could not be reached.
        ///           When you specify <code>icmp</code> as the <code>protocol</code>, you must specify the ICMP
        ///           type using the <code>fromPort</code> parameter, and ICMP code using the
        ///             <code>toPort</code> parameter.</p>
        ///             </li>
        ///          </ul>
        public let `protocol`: LightsailClientTypes.NetworkProtocol?
        /// <p>An alias that defines access for a preconfigured range of IP addresses.</p>
        ///          <p>The only alias currently supported is <code>lightsail-connect</code>, which allows IP
        ///       addresses of the browser-based RDP/SSH client in the Lightsail console to connect to your
        ///       instance.</p>
        public let cidrListAliases: [Swift.String]?
        /// <p>The IPv4 address, or range of IPv4 addresses (in CIDR notation) that are allowed to
        ///       connect to an instance through the ports, and the protocol.</p>
        ///          <note>
        ///             <p>The <code>ipv6Cidrs</code> parameter lists the IPv6 addresses that are allowed to
        ///         connect to an instance.</p>
        ///          </note>
        ///          <p>For more information about CIDR block notation, see <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation">Classless
        ///         Inter-Domain Routing</a> on <i>Wikipedia</i>.</p>
        public let cidrs: [Swift.String]?
        /// <p>The first port in a range of open ports on an instance.</p>
        ///          <p>Allowed ports:</p>
        ///          <ul>
        ///             <li>
        ///                <p>TCP and UDP - <code>0</code> to <code>65535</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>ICMP - The ICMP type for IPv4 addresses. For example, specify <code>8</code> as the
        ///             <code>fromPort</code> (ICMP type), and <code>-1</code> as the <code>toPort</code> (ICMP
        ///           code), to enable ICMP Ping. For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages">Control Messages</a> on <i>Wikipedia</i>.</p>
        ///             </li>
        ///             <li>
        ///                <p>ICMPv6 - The ICMP type for IPv6 addresses. For example, specify <code>128</code> as
        ///           the <code>fromPort</code> (ICMPv6 type), and <code>0</code> as <code>toPort</code> (ICMPv6
        ///           code). For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6">Internet
        ///             Control Message Protocol for IPv6</a>.</p>
        ///             </li>
        ///          </ul>
        public let fromPort: Swift.Int
        /// <p>The IPv6 address, or range of IPv6 addresses (in CIDR notation) that are allowed to
        ///       connect to an instance through the ports, and the protocol. Only devices with an IPv6 address
        ///       can connect to an instance through IPv6; otherwise, IPv4 should be used.</p>
        ///          <note>
        ///             <p>The <code>cidrs</code> parameter lists the IPv4 addresses that are allowed to connect to
        ///         an instance.</p>
        ///          </note>
        ///          <p>For more information about CIDR block notation, see <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation">Classless
        ///         Inter-Domain Routing</a> on <i>Wikipedia</i>.</p>
        public let ipv6Cidrs: [Swift.String]?
        /// <p>Specifies whether the instance port is <code>open</code> or <code>closed</code>.</p>
        ///          <note>
        ///             <p>The port state for Lightsail instances is always <code>open</code>.</p>
        ///          </note>
        public let state: LightsailClientTypes.PortState?
        /// <p>The last port in a range of open ports on an instance.</p>
        ///          <p>Allowed ports:</p>
        ///          <ul>
        ///             <li>
        ///                <p>TCP and UDP - <code>0</code> to <code>65535</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>ICMP - The ICMP code for IPv4 addresses. For example, specify <code>8</code> as the
        ///             <code>fromPort</code> (ICMP type), and <code>-1</code> as the <code>toPort</code> (ICMP
        ///           code), to enable ICMP Ping. For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages">Control Messages</a> on <i>Wikipedia</i>.</p>
        ///             </li>
        ///             <li>
        ///                <p>ICMPv6 - The ICMP code for IPv6 addresses. For example, specify <code>128</code> as
        ///           the <code>fromPort</code> (ICMPv6 type), and <code>0</code> as <code>toPort</code> (ICMPv6
        ///           code). For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6">Internet
        ///             Control Message Protocol for IPv6</a>.</p>
        ///             </li>
        ///          </ul>
        public let toPort: Swift.Int

        public init (
            `protocol`: LightsailClientTypes.NetworkProtocol? = nil,
            cidrListAliases: [Swift.String]? = nil,
            cidrs: [Swift.String]? = nil,
            fromPort: Swift.Int = 0,
            ipv6Cidrs: [Swift.String]? = nil,
            state: LightsailClientTypes.PortState? = nil,
            toPort: Swift.Int = 0
        )
        {
            self.`protocol` = `protocol`
            self.cidrListAliases = cidrListAliases
            self.cidrs = cidrs
            self.fromPort = fromPort
            self.ipv6Cidrs = ipv6Cidrs
            self.state = state
            self.toPort = toPort
        }
    }

}

extension LightsailClientTypes.InstanceSnapshot: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case fromAttachedDisks
        case fromBlueprintId
        case fromBundleId
        case fromInstanceArn
        case fromInstanceName
        case isFromAutoSnapshot
        case location
        case name
        case progress
        case resourceType
        case sizeInGb
        case state
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let fromAttachedDisks = fromAttachedDisks {
            var fromAttachedDisksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fromAttachedDisks)
            for disklist0 in fromAttachedDisks {
                try fromAttachedDisksContainer.encode(disklist0)
            }
        }
        if let fromBlueprintId = fromBlueprintId {
            try encodeContainer.encode(fromBlueprintId, forKey: .fromBlueprintId)
        }
        if let fromBundleId = fromBundleId {
            try encodeContainer.encode(fromBundleId, forKey: .fromBundleId)
        }
        if let fromInstanceArn = fromInstanceArn {
            try encodeContainer.encode(fromInstanceArn, forKey: .fromInstanceArn)
        }
        if let fromInstanceName = fromInstanceName {
            try encodeContainer.encode(fromInstanceName, forKey: .fromInstanceName)
        }
        if let isFromAutoSnapshot = isFromAutoSnapshot {
            try encodeContainer.encode(isFromAutoSnapshot, forKey: .isFromAutoSnapshot)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let progress = progress {
            try encodeContainer.encode(progress, forKey: .progress)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sizeInGb = sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceSnapshotState.self, forKey: .state)
        state = stateDecoded
        let progressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .progress)
        progress = progressDecoded
        let fromAttachedDisksContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Disk?].self, forKey: .fromAttachedDisks)
        var fromAttachedDisksDecoded0:[LightsailClientTypes.Disk]? = nil
        if let fromAttachedDisksContainer = fromAttachedDisksContainer {
            fromAttachedDisksDecoded0 = [LightsailClientTypes.Disk]()
            for structure0 in fromAttachedDisksContainer {
                if let structure0 = structure0 {
                    fromAttachedDisksDecoded0?.append(structure0)
                }
            }
        }
        fromAttachedDisks = fromAttachedDisksDecoded0
        let fromInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromInstanceName)
        fromInstanceName = fromInstanceNameDecoded
        let fromInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromInstanceArn)
        fromInstanceArn = fromInstanceArnDecoded
        let fromBlueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromBlueprintId)
        fromBlueprintId = fromBlueprintIdDecoded
        let fromBundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromBundleId)
        fromBundleId = fromBundleIdDecoded
        let isFromAutoSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isFromAutoSnapshot)
        isFromAutoSnapshot = isFromAutoSnapshotDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
    }
}

extension LightsailClientTypes.InstanceSnapshot: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceSnapshot(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), fromAttachedDisks: \(Swift.String(describing: fromAttachedDisks)), fromBlueprintId: \(Swift.String(describing: fromBlueprintId)), fromBundleId: \(Swift.String(describing: fromBundleId)), fromInstanceArn: \(Swift.String(describing: fromInstanceArn)), fromInstanceName: \(Swift.String(describing: fromInstanceName)), isFromAutoSnapshot: \(Swift.String(describing: isFromAutoSnapshot)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), progress: \(Swift.String(describing: progress)), resourceType: \(Swift.String(describing: resourceType)), sizeInGb: \(Swift.String(describing: sizeInGb)), state: \(Swift.String(describing: state)), supportCode: \(Swift.String(describing: supportCode)), tags: \(Swift.String(describing: tags)))"}
}

extension LightsailClientTypes {
    /// <p>Describes an instance snapshot.</p>
    public struct InstanceSnapshot: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the snapshot (e.g.,
        ///         <code>arn:aws:lightsail:us-east-2:123456789101:InstanceSnapshot/d23b5706-3322-4d83-81e5-12345EXAMPLE</code>).</p>
        public let arn: Swift.String?
        /// <p>The timestamp when the snapshot was created (e.g., <code>1479907467.024</code>).</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>An array of disk objects containing information about all block storage disks.</p>
        public let fromAttachedDisks: [LightsailClientTypes.Disk]?
        /// <p>The blueprint ID from which you created the snapshot (e.g., <code>os_debian_8_3</code>). A
        ///       blueprint is a virtual private server (or <i>instance</i>) image used to create
        ///       instances quickly.</p>
        public let fromBlueprintId: Swift.String?
        /// <p>The bundle ID from which you created the snapshot (e.g., <code>micro_1_0</code>).</p>
        public let fromBundleId: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the instance from which the snapshot was created (e.g.,
        ///         <code>arn:aws:lightsail:us-east-2:123456789101:Instance/64b8404c-ccb1-430b-8daf-12345EXAMPLE</code>).</p>
        public let fromInstanceArn: Swift.String?
        /// <p>The instance from which the snapshot was created.</p>
        public let fromInstanceName: Swift.String?
        /// <p>A Boolean value indicating whether the snapshot was created from an automatic
        ///       snapshot.</p>
        public let isFromAutoSnapshot: Swift.Bool?
        /// <p>The region name and Availability Zone where you created the snapshot.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The name of the snapshot.</p>
        public let name: Swift.String?
        /// <p>The progress of the snapshot.</p>
        ///          <note>
        ///             <p>This is populated only for disk snapshots, and is <code>null</code> for instance
        ///         snapshots.</p>
        ///          </note>
        public let progress: Swift.String?
        /// <p>The type of resource (usually <code>InstanceSnapshot</code>).</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The size in GB of the SSD.</p>
        public let sizeInGb: Swift.Int?
        /// <p>The state the snapshot is in.</p>
        public let state: LightsailClientTypes.InstanceSnapshotState?
        /// <p>The support code. Include this code in your email to support when you have questions about
        ///       an instance or another resource in Lightsail. This code enables our support team to look up
        ///       your Lightsail information more easily.</p>
        public let supportCode: Swift.String?
        /// <p>The tag keys and optional values for the resource. For more information about tags in
        ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
        ///         Dev Guide</a>.</p>
        public let tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            fromAttachedDisks: [LightsailClientTypes.Disk]? = nil,
            fromBlueprintId: Swift.String? = nil,
            fromBundleId: Swift.String? = nil,
            fromInstanceArn: Swift.String? = nil,
            fromInstanceName: Swift.String? = nil,
            isFromAutoSnapshot: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            progress: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sizeInGb: Swift.Int? = nil,
            state: LightsailClientTypes.InstanceSnapshotState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.fromAttachedDisks = fromAttachedDisks
            self.fromBlueprintId = fromBlueprintId
            self.fromBundleId = fromBundleId
            self.fromInstanceArn = fromInstanceArn
            self.fromInstanceName = fromInstanceName
            self.isFromAutoSnapshot = isFromAutoSnapshot
            self.location = location
            self.name = name
            self.progress = progress
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.InstanceSnapshotInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromBlueprintId
        case fromBundleId
        case fromDiskInfo
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fromBlueprintId = fromBlueprintId {
            try encodeContainer.encode(fromBlueprintId, forKey: .fromBlueprintId)
        }
        if let fromBundleId = fromBundleId {
            try encodeContainer.encode(fromBundleId, forKey: .fromBundleId)
        }
        if let fromDiskInfo = fromDiskInfo {
            var fromDiskInfoContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fromDiskInfo)
            for diskinfolist0 in fromDiskInfo {
                try fromDiskInfoContainer.encode(diskinfolist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromBundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromBundleId)
        fromBundleId = fromBundleIdDecoded
        let fromBlueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromBlueprintId)
        fromBlueprintId = fromBlueprintIdDecoded
        let fromDiskInfoContainer = try containerValues.decodeIfPresent([LightsailClientTypes.DiskInfo?].self, forKey: .fromDiskInfo)
        var fromDiskInfoDecoded0:[LightsailClientTypes.DiskInfo]? = nil
        if let fromDiskInfoContainer = fromDiskInfoContainer {
            fromDiskInfoDecoded0 = [LightsailClientTypes.DiskInfo]()
            for structure0 in fromDiskInfoContainer {
                if let structure0 = structure0 {
                    fromDiskInfoDecoded0?.append(structure0)
                }
            }
        }
        fromDiskInfo = fromDiskInfoDecoded0
    }
}

extension LightsailClientTypes.InstanceSnapshotInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceSnapshotInfo(fromBlueprintId: \(Swift.String(describing: fromBlueprintId)), fromBundleId: \(Swift.String(describing: fromBundleId)), fromDiskInfo: \(Swift.String(describing: fromDiskInfo)))"}
}

extension LightsailClientTypes {
    /// <p>Describes an instance snapshot.</p>
    public struct InstanceSnapshotInfo: Swift.Equatable {
        /// <p>The blueprint ID from which the source instance (e.g., <code>os_debian_8_3</code>).</p>
        public let fromBlueprintId: Swift.String?
        /// <p>The bundle ID from which the source instance was created (e.g.,
        ///       <code>micro_1_0</code>).</p>
        public let fromBundleId: Swift.String?
        /// <p>A list of objects describing the disks that were attached to the source instance.</p>
        public let fromDiskInfo: [LightsailClientTypes.DiskInfo]?

        public init (
            fromBlueprintId: Swift.String? = nil,
            fromBundleId: Swift.String? = nil,
            fromDiskInfo: [LightsailClientTypes.DiskInfo]? = nil
        )
        {
            self.fromBlueprintId = fromBlueprintId
            self.fromBundleId = fromBundleId
            self.fromDiskInfo = fromDiskInfo
        }
    }

}

extension LightsailClientTypes {
    public enum InstanceSnapshotState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case error
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceSnapshotState] {
            return [
                .available,
                .error,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "available"
            case .error: return "error"
            case .pending: return "pending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceSnapshotState(rawValue: rawValue) ?? InstanceSnapshotState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.InstanceState: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .code)
        code = codeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension LightsailClientTypes.InstanceState: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceState(code: \(Swift.String(describing: code)), name: \(Swift.String(describing: name)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the virtual private server (or <i>instance</i>) status.</p>
    public struct InstanceState: Swift.Equatable {
        /// <p>The status code for the instance.</p>
        public let code: Swift.Int?
        /// <p>The state of the instance (e.g., <code>running</code> or <code>pending</code>).</p>
        public let name: Swift.String?

        public init (
            code: Swift.Int? = nil,
            name: Swift.String? = nil
        )
        {
            self.code = code
            self.name = name
        }
    }

}

extension InvalidInputException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidInputException(code: \(Swift.String(describing: code)), docs: \(Swift.String(describing: docs)), message: \(Swift.String(describing: message)), tip: \(Swift.String(describing: tip)))"}
}

extension InvalidInputException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidInputExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.docs = output.docs
            self.message = output.message
            self.tip = output.tip
        } else {
            self.code = nil
            self.docs = nil
            self.message = nil
            self.tip = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Lightsail throws this exception when user input does not conform to the validation rules
///       of an input field.</p>
///          <note>
///             <p>Domain and distribution APIs are only available in the N. Virginia
///           (<code>us-east-1</code>) AWS Region. Please set your AWS Region configuration to
///           <code>us-east-1</code> to create, view, or edit these resources.</p>
///          </note>
public struct InvalidInputException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var docs: Swift.String?
    public var message: Swift.String?
    public var tip: Swift.String?

    public init (
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.code = code
        self.docs = docs
        self.message = message
        self.tip = tip
    }
}

struct InvalidInputExceptionBody: Swift.Equatable {
    public let code: Swift.String?
    public let docs: Swift.String?
    public let message: Swift.String?
    public let tip: Swift.String?
}

extension InvalidInputExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case docs
        case message
        case tip
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let docsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .docs)
        docs = docsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tip)
        tip = tipDecoded
    }
}

extension LightsailClientTypes {
    public enum IpAddressType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dualstack
        case ipv4
        case sdkUnknown(Swift.String)

        public static var allCases: [IpAddressType] {
            return [
                .dualstack,
                .ipv4,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dualstack: return "dualstack"
            case .ipv4: return "ipv4"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IpAddressType(rawValue: rawValue) ?? IpAddressType.sdkUnknown(rawValue)
        }
    }
}

extension IsVpcPeeredInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IsVpcPeeredInput()"}
}

extension IsVpcPeeredInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct IsVpcPeeredInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "IsVpcPeeredInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<IsVpcPeeredInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<IsVpcPeeredOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<IsVpcPeeredInput>
    public typealias MOutput = ClientRuntime.OperationOutput<IsVpcPeeredOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<IsVpcPeeredOutputError>
}

public struct IsVpcPeeredInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "IsVpcPeeredInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<IsVpcPeeredInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<IsVpcPeeredOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<IsVpcPeeredInput>
    public typealias MOutput = ClientRuntime.OperationOutput<IsVpcPeeredOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<IsVpcPeeredOutputError>
}

public struct IsVpcPeeredInput: Swift.Equatable {

    public init() {}
}

struct IsVpcPeeredInputBody: Swift.Equatable {
}

extension IsVpcPeeredInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IsVpcPeeredOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension IsVpcPeeredOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum IsVpcPeeredOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension IsVpcPeeredOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IsVpcPeeredOutputResponse(isPeered: \(Swift.String(describing: isPeered)))"}
}

extension IsVpcPeeredOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: IsVpcPeeredOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isPeered = output.isPeered
        } else {
            self.isPeered = nil
        }
    }
}

public struct IsVpcPeeredOutputResponse: Swift.Equatable {
    /// <p>Returns <code>true</code> if the Lightsail VPC is peered; otherwise,
    ///       <code>false</code>.</p>
    public let isPeered: Swift.Bool?

    public init (
        isPeered: Swift.Bool? = nil
    )
    {
        self.isPeered = isPeered
    }
}

struct IsVpcPeeredOutputResponseBody: Swift.Equatable {
    public let isPeered: Swift.Bool?
}

extension IsVpcPeeredOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isPeered
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isPeeredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isPeered)
        isPeered = isPeeredDecoded
    }
}

extension LightsailClientTypes.KeyPair: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case fingerprint
        case location
        case name
        case resourceType
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let fingerprint = fingerprint {
            try encodeContainer.encode(fingerprint, forKey: .fingerprint)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let fingerprintDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fingerprint)
        fingerprint = fingerprintDecoded
    }
}

extension LightsailClientTypes.KeyPair: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KeyPair(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), fingerprint: \(Swift.String(describing: fingerprint)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), resourceType: \(Swift.String(describing: resourceType)), supportCode: \(Swift.String(describing: supportCode)), tags: \(Swift.String(describing: tags)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the SSH key pair.</p>
    public struct KeyPair: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the key pair (e.g.,
        ///         <code>arn:aws:lightsail:us-east-2:123456789101:KeyPair/05859e3d-331d-48ba-9034-12345EXAMPLE</code>).</p>
        public let arn: Swift.String?
        /// <p>The timestamp when the key pair was created (e.g., <code>1479816991.349</code>).</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The RSA fingerprint of the key pair.</p>
        public let fingerprint: Swift.String?
        /// <p>The region name and Availability Zone where the key pair was created.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The friendly name of the SSH key pair.</p>
        public let name: Swift.String?
        /// <p>The resource type (usually <code>KeyPair</code>).</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The support code. Include this code in your email to support when you have questions about
        ///       an instance or another resource in Lightsail. This code enables our support team to look up
        ///       your Lightsail information more easily.</p>
        public let supportCode: Swift.String?
        /// <p>The tag keys and optional values for the resource. For more information about tags in
        ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
        ///         Dev Guide</a>.</p>
        public let tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            fingerprint: Swift.String? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.fingerprint = fingerprint
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.LightsailDistribution: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ableToUpdateBundle
        case alternativeDomainNames
        case arn
        case bundleId
        case cacheBehaviorSettings
        case cacheBehaviors
        case certificateName
        case createdAt
        case defaultCacheBehavior
        case domainName
        case ipAddressType
        case isEnabled
        case location
        case name
        case origin
        case originPublicDNS
        case resourceType
        case status
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ableToUpdateBundle = ableToUpdateBundle {
            try encodeContainer.encode(ableToUpdateBundle, forKey: .ableToUpdateBundle)
        }
        if let alternativeDomainNames = alternativeDomainNames {
            var alternativeDomainNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alternativeDomainNames)
            for stringlist0 in alternativeDomainNames {
                try alternativeDomainNamesContainer.encode(stringlist0)
            }
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let bundleId = bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let cacheBehaviorSettings = cacheBehaviorSettings {
            try encodeContainer.encode(cacheBehaviorSettings, forKey: .cacheBehaviorSettings)
        }
        if let cacheBehaviors = cacheBehaviors {
            var cacheBehaviorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cacheBehaviors)
            for cachebehaviorlist0 in cacheBehaviors {
                try cacheBehaviorsContainer.encode(cachebehaviorlist0)
            }
        }
        if let certificateName = certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let defaultCacheBehavior = defaultCacheBehavior {
            try encodeContainer.encode(defaultCacheBehavior, forKey: .defaultCacheBehavior)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let ipAddressType = ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let isEnabled = isEnabled {
            try encodeContainer.encode(isEnabled, forKey: .isEnabled)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let origin = origin {
            try encodeContainer.encode(origin, forKey: .origin)
        }
        if let originPublicDNS = originPublicDNS {
            try encodeContainer.encode(originPublicDNS, forKey: .originPublicDNS)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let alternativeDomainNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .alternativeDomainNames)
        var alternativeDomainNamesDecoded0:[Swift.String]? = nil
        if let alternativeDomainNamesContainer = alternativeDomainNamesContainer {
            alternativeDomainNamesDecoded0 = [Swift.String]()
            for string0 in alternativeDomainNamesContainer {
                if let string0 = string0 {
                    alternativeDomainNamesDecoded0?.append(string0)
                }
            }
        }
        alternativeDomainNames = alternativeDomainNamesDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let isEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isEnabled)
        isEnabled = isEnabledDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let originDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Origin.self, forKey: .origin)
        origin = originDecoded
        let originPublicDNSDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originPublicDNS)
        originPublicDNS = originPublicDNSDecoded
        let defaultCacheBehaviorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CacheBehavior.self, forKey: .defaultCacheBehavior)
        defaultCacheBehavior = defaultCacheBehaviorDecoded
        let cacheBehaviorSettingsDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CacheSettings.self, forKey: .cacheBehaviorSettings)
        cacheBehaviorSettings = cacheBehaviorSettingsDecoded
        let cacheBehaviorsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CacheBehaviorPerPath?].self, forKey: .cacheBehaviors)
        var cacheBehaviorsDecoded0:[LightsailClientTypes.CacheBehaviorPerPath]? = nil
        if let cacheBehaviorsContainer = cacheBehaviorsContainer {
            cacheBehaviorsDecoded0 = [LightsailClientTypes.CacheBehaviorPerPath]()
            for structure0 in cacheBehaviorsContainer {
                if let structure0 = structure0 {
                    cacheBehaviorsDecoded0?.append(structure0)
                }
            }
        }
        cacheBehaviors = cacheBehaviorsDecoded0
        let ableToUpdateBundleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ableToUpdateBundle)
        ableToUpdateBundle = ableToUpdateBundleDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension LightsailClientTypes.LightsailDistribution: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LightsailDistribution(ableToUpdateBundle: \(Swift.String(describing: ableToUpdateBundle)), alternativeDomainNames: \(Swift.String(describing: alternativeDomainNames)), arn: \(Swift.String(describing: arn)), bundleId: \(Swift.String(describing: bundleId)), cacheBehaviorSettings: \(Swift.String(describing: cacheBehaviorSettings)), cacheBehaviors: \(Swift.String(describing: cacheBehaviors)), certificateName: \(Swift.String(describing: certificateName)), createdAt: \(Swift.String(describing: createdAt)), defaultCacheBehavior: \(Swift.String(describing: defaultCacheBehavior)), domainName: \(Swift.String(describing: domainName)), ipAddressType: \(Swift.String(describing: ipAddressType)), isEnabled: \(Swift.String(describing: isEnabled)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), origin: \(Swift.String(describing: origin)), originPublicDNS: \(Swift.String(describing: originPublicDNS)), resourceType: \(Swift.String(describing: resourceType)), status: \(Swift.String(describing: status)), supportCode: \(Swift.String(describing: supportCode)), tags: \(Swift.String(describing: tags)))"}
}

extension LightsailClientTypes {
    /// <p>Describes an Amazon Lightsail content delivery network (CDN) distribution.</p>
    public struct LightsailDistribution: Swift.Equatable {
        /// <p>Indicates whether the bundle that is currently applied to your distribution, specified
        ///       using the <code>distributionName</code> parameter, can be changed to another bundle.</p>
        ///          <p>Use the <code>UpdateDistributionBundle</code> action to change your distribution's
        ///       bundle.</p>
        public let ableToUpdateBundle: Swift.Bool?
        /// <p>The alternate domain names of the distribution.</p>
        public let alternativeDomainNames: [Swift.String]?
        /// <p>The Amazon Resource Name (ARN) of the distribution.</p>
        public let arn: Swift.String?
        /// <p>The ID of the bundle currently applied to the distribution.</p>
        public let bundleId: Swift.String?
        /// <p>An object that describes the cache behavior settings of the distribution.</p>
        public let cacheBehaviorSettings: LightsailClientTypes.CacheSettings?
        /// <p>An array of objects that describe the per-path cache behavior of the distribution.</p>
        public let cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]?
        /// <p>The name of the SSL/TLS certificate attached to the distribution, if any.</p>
        public let certificateName: Swift.String?
        /// <p>The timestamp when the distribution was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>An object that describes the default cache behavior of the distribution.</p>
        public let defaultCacheBehavior: LightsailClientTypes.CacheBehavior?
        /// <p>The domain name of the distribution.</p>
        public let domainName: Swift.String?
        /// <p>The IP address type of the distribution.</p>
        ///
        ///          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
        ///       IPv4 and IPv6.</p>
        public let ipAddressType: LightsailClientTypes.IpAddressType?
        /// <p>Indicates whether the distribution is enabled.</p>
        public let isEnabled: Swift.Bool?
        /// <p>An object that describes the location of the distribution, such as the AWS Region and
        ///       Availability Zone.</p>
        ///          <note>
        ///             <p>Lightsail distributions are global resources that can reference an origin in any AWS
        ///         Region, and distribute its content globally. However, all distributions are located in the
        ///           <code>us-east-1</code> Region.</p>
        ///          </note>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The name of the distribution.</p>
        public let name: Swift.String?
        /// <p>An object that describes the origin resource of the distribution, such as a Lightsail
        ///       instance or load balancer.</p>
        ///          <p>The distribution pulls, caches, and serves content from the origin.</p>
        public let origin: LightsailClientTypes.Origin?
        /// <p>The public DNS of the origin.</p>
        public let originPublicDNS: Swift.String?
        /// <p>The Lightsail resource type (e.g., <code>Distribution</code>).</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The status of the distribution.</p>
        public let status: Swift.String?
        /// <p>The support code. Include this code in your email to support when you have questions about
        ///       your Lightsail distribution. This code enables our support team to look up your Lightsail
        ///       information more easily.</p>
        public let supportCode: Swift.String?
        /// <p>The tag keys and optional values for the resource. For more information about tags in
        ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
        ///         Dev Guide</a>.</p>
        public let tags: [LightsailClientTypes.Tag]?

        public init (
            ableToUpdateBundle: Swift.Bool? = nil,
            alternativeDomainNames: [Swift.String]? = nil,
            arn: Swift.String? = nil,
            bundleId: Swift.String? = nil,
            cacheBehaviorSettings: LightsailClientTypes.CacheSettings? = nil,
            cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]? = nil,
            certificateName: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            defaultCacheBehavior: LightsailClientTypes.CacheBehavior? = nil,
            domainName: Swift.String? = nil,
            ipAddressType: LightsailClientTypes.IpAddressType? = nil,
            isEnabled: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            origin: LightsailClientTypes.Origin? = nil,
            originPublicDNS: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            status: Swift.String? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.ableToUpdateBundle = ableToUpdateBundle
            self.alternativeDomainNames = alternativeDomainNames
            self.arn = arn
            self.bundleId = bundleId
            self.cacheBehaviorSettings = cacheBehaviorSettings
            self.cacheBehaviors = cacheBehaviors
            self.certificateName = certificateName
            self.createdAt = createdAt
            self.defaultCacheBehavior = defaultCacheBehavior
            self.domainName = domainName
            self.ipAddressType = ipAddressType
            self.isEnabled = isEnabled
            self.location = location
            self.name = name
            self.origin = origin
            self.originPublicDNS = originPublicDNS
            self.resourceType = resourceType
            self.status = status
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.LoadBalancer: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case configurationOptions
        case createdAt
        case dnsName
        case healthCheckPath
        case instanceHealthSummary
        case instancePort
        case ipAddressType
        case location
        case name
        case `protocol` = "protocol"
        case publicPorts
        case resourceType
        case state
        case supportCode
        case tags
        case tlsCertificateSummaries
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let configurationOptions = configurationOptions {
            var configurationOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .configurationOptions)
            for (dictKey0, loadbalancerconfigurationoptions0) in configurationOptions {
                try configurationOptionsContainer.encode(loadbalancerconfigurationoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let dnsName = dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let healthCheckPath = healthCheckPath {
            try encodeContainer.encode(healthCheckPath, forKey: .healthCheckPath)
        }
        if let instanceHealthSummary = instanceHealthSummary {
            var instanceHealthSummaryContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceHealthSummary)
            for instancehealthsummarylist0 in instanceHealthSummary {
                try instanceHealthSummaryContainer.encode(instancehealthsummarylist0)
            }
        }
        if let instancePort = instancePort {
            try encodeContainer.encode(instancePort, forKey: .instancePort)
        }
        if let ipAddressType = ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let publicPorts = publicPorts {
            var publicPortsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicPorts)
            for portlist0 in publicPorts {
                try publicPortsContainer.encode(portlist0)
            }
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let tlsCertificateSummaries = tlsCertificateSummaries {
            var tlsCertificateSummariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tlsCertificateSummaries)
            for loadbalancertlscertificatesummarylist0 in tlsCertificateSummaries {
                try tlsCertificateSummariesContainer.encode(loadbalancertlscertificatesummarylist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerState.self, forKey: .state)
        state = stateDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let publicPortsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .publicPorts)
        var publicPortsDecoded0:[Swift.Int]? = nil
        if let publicPortsContainer = publicPortsContainer {
            publicPortsDecoded0 = [Swift.Int]()
            for integer0 in publicPortsContainer {
                if let integer0 = integer0 {
                    publicPortsDecoded0?.append(integer0)
                }
            }
        }
        publicPorts = publicPortsDecoded0
        let healthCheckPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckPath)
        healthCheckPath = healthCheckPathDecoded
        let instancePortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancePort)
        instancePort = instancePortDecoded
        let instanceHealthSummaryContainer = try containerValues.decodeIfPresent([LightsailClientTypes.InstanceHealthSummary?].self, forKey: .instanceHealthSummary)
        var instanceHealthSummaryDecoded0:[LightsailClientTypes.InstanceHealthSummary]? = nil
        if let instanceHealthSummaryContainer = instanceHealthSummaryContainer {
            instanceHealthSummaryDecoded0 = [LightsailClientTypes.InstanceHealthSummary]()
            for structure0 in instanceHealthSummaryContainer {
                if let structure0 = structure0 {
                    instanceHealthSummaryDecoded0?.append(structure0)
                }
            }
        }
        instanceHealthSummary = instanceHealthSummaryDecoded0
        let tlsCertificateSummariesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LoadBalancerTlsCertificateSummary?].self, forKey: .tlsCertificateSummaries)
        var tlsCertificateSummariesDecoded0:[LightsailClientTypes.LoadBalancerTlsCertificateSummary]? = nil
        if let tlsCertificateSummariesContainer = tlsCertificateSummariesContainer {
            tlsCertificateSummariesDecoded0 = [LightsailClientTypes.LoadBalancerTlsCertificateSummary]()
            for structure0 in tlsCertificateSummariesContainer {
                if let structure0 = structure0 {
                    tlsCertificateSummariesDecoded0?.append(structure0)
                }
            }
        }
        tlsCertificateSummaries = tlsCertificateSummariesDecoded0
        let configurationOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .configurationOptions)
        var configurationOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let configurationOptionsContainer = configurationOptionsContainer {
            configurationOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in configurationOptionsContainer {
                if let string0 = string0 {
                    configurationOptionsDecoded0?[key0] = string0
                }
            }
        }
        configurationOptions = configurationOptionsDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
    }
}

extension LightsailClientTypes.LoadBalancer: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoadBalancer(arn: \(Swift.String(describing: arn)), configurationOptions: \(Swift.String(describing: configurationOptions)), createdAt: \(Swift.String(describing: createdAt)), dnsName: \(Swift.String(describing: dnsName)), healthCheckPath: \(Swift.String(describing: healthCheckPath)), instanceHealthSummary: \(Swift.String(describing: instanceHealthSummary)), instancePort: \(Swift.String(describing: instancePort)), ipAddressType: \(Swift.String(describing: ipAddressType)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), protocol: \(Swift.String(describing: `protocol`)), publicPorts: \(Swift.String(describing: publicPorts)), resourceType: \(Swift.String(describing: resourceType)), state: \(Swift.String(describing: state)), supportCode: \(Swift.String(describing: supportCode)), tags: \(Swift.String(describing: tags)), tlsCertificateSummaries: \(Swift.String(describing: tlsCertificateSummaries)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the Lightsail load balancer.</p>
    public struct LoadBalancer: Swift.Equatable {
        /// <p>The protocol you have enabled for your load balancer. Valid values are below.</p>
        ///          <p>You can't just have <code>HTTP_HTTPS</code>, but you can have just
        ///       <code>HTTP</code>.</p>
        public let `protocol`: LightsailClientTypes.LoadBalancerProtocol?
        /// <p>The Amazon Resource Name (ARN) of the load balancer.</p>
        public let arn: Swift.String?
        /// <p>A string to string map of the configuration options for your load balancer. Valid values
        ///       are listed below.</p>
        public let configurationOptions: [Swift.String:Swift.String]?
        /// <p>The date when your load balancer was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The DNS name of your Lightsail load balancer.</p>
        public let dnsName: Swift.String?
        /// <p>The path you specified to perform your health checks. If no path is specified, the load
        ///       balancer tries to make a request to the default (root) page.</p>
        public let healthCheckPath: Swift.String?
        /// <p>An array of InstanceHealthSummary objects describing the health of the load
        ///       balancer.</p>
        public let instanceHealthSummary: [LightsailClientTypes.InstanceHealthSummary]?
        /// <p>The port where the load balancer will direct traffic to your Lightsail instances. For
        ///       HTTP traffic, it's port 80. For HTTPS traffic, it's port 443.</p>
        public let instancePort: Swift.Int?
        /// <p>The IP address type of the load balancer.</p>
        ///
        ///          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
        ///       IPv4 and IPv6.</p>
        public let ipAddressType: LightsailClientTypes.IpAddressType?
        /// <p>The AWS Region where your load balancer was created (e.g., <code>us-east-2a</code>).
        ///       Lightsail automatically creates your load balancer across Availability Zones.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The name of the load balancer (e.g., <code>my-load-balancer</code>).</p>
        public let name: Swift.String?
        /// <p>An array of public port settings for your load balancer. For HTTP, use port 80. For HTTPS,
        ///       use port 443.</p>
        public let publicPorts: [Swift.Int]?
        /// <p>The resource type (e.g., <code>LoadBalancer</code>.</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The status of your load balancer. Valid values are below.</p>
        public let state: LightsailClientTypes.LoadBalancerState?
        /// <p>The support code. Include this code in your email to support when you have questions about
        ///       your Lightsail load balancer. This code enables our support team to look up your Lightsail
        ///       information more easily.</p>
        public let supportCode: Swift.String?
        /// <p>The tag keys and optional values for the resource. For more information about tags in
        ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
        ///         Dev Guide</a>.</p>
        public let tags: [LightsailClientTypes.Tag]?
        /// <p>An array of LoadBalancerTlsCertificateSummary objects that provide additional information
        ///       about the SSL/TLS certificates. For example, if <code>true</code>, the certificate is attached
        ///       to the load balancer.</p>
        public let tlsCertificateSummaries: [LightsailClientTypes.LoadBalancerTlsCertificateSummary]?

        public init (
            `protocol`: LightsailClientTypes.LoadBalancerProtocol? = nil,
            arn: Swift.String? = nil,
            configurationOptions: [Swift.String:Swift.String]? = nil,
            createdAt: ClientRuntime.Date? = nil,
            dnsName: Swift.String? = nil,
            healthCheckPath: Swift.String? = nil,
            instanceHealthSummary: [LightsailClientTypes.InstanceHealthSummary]? = nil,
            instancePort: Swift.Int? = nil,
            ipAddressType: LightsailClientTypes.IpAddressType? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            publicPorts: [Swift.Int]? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            state: LightsailClientTypes.LoadBalancerState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil,
            tlsCertificateSummaries: [LightsailClientTypes.LoadBalancerTlsCertificateSummary]? = nil
        )
        {
            self.`protocol` = `protocol`
            self.arn = arn
            self.configurationOptions = configurationOptions
            self.createdAt = createdAt
            self.dnsName = dnsName
            self.healthCheckPath = healthCheckPath
            self.instanceHealthSummary = instanceHealthSummary
            self.instancePort = instancePort
            self.ipAddressType = ipAddressType
            self.location = location
            self.name = name
            self.publicPorts = publicPorts
            self.resourceType = resourceType
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
            self.tlsCertificateSummaries = tlsCertificateSummaries
        }
    }

}

extension LightsailClientTypes {
    public enum LoadBalancerAttributeName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case healthcheckpath
        case sessionstickinessenabled
        case sessionstickinessLbCookiedurationseconds
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerAttributeName] {
            return [
                .healthcheckpath,
                .sessionstickinessenabled,
                .sessionstickinessLbCookiedurationseconds,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .healthcheckpath: return "HealthCheckPath"
            case .sessionstickinessenabled: return "SessionStickinessEnabled"
            case .sessionstickinessLbCookiedurationseconds: return "SessionStickiness_LB_CookieDurationSeconds"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerAttributeName(rawValue: rawValue) ?? LoadBalancerAttributeName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum LoadBalancerMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case clienttlsnegotiationerrorcount
        case httpcodeInstance2xxCount
        case httpcodeInstance3xxCount
        case httpcodeInstance4xxCount
        case httpcodeInstance5xxCount
        case httpcodeLb4xxCount
        case httpcodeLb5xxCount
        case healthyhostcount
        case instanceresponsetime
        case rejectedconnectioncount
        case requestcount
        case unhealthyhostcount
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerMetricName] {
            return [
                .clienttlsnegotiationerrorcount,
                .httpcodeInstance2xxCount,
                .httpcodeInstance3xxCount,
                .httpcodeInstance4xxCount,
                .httpcodeInstance5xxCount,
                .httpcodeLb4xxCount,
                .httpcodeLb5xxCount,
                .healthyhostcount,
                .instanceresponsetime,
                .rejectedconnectioncount,
                .requestcount,
                .unhealthyhostcount,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .clienttlsnegotiationerrorcount: return "ClientTLSNegotiationErrorCount"
            case .httpcodeInstance2xxCount: return "HTTPCode_Instance_2XX_Count"
            case .httpcodeInstance3xxCount: return "HTTPCode_Instance_3XX_Count"
            case .httpcodeInstance4xxCount: return "HTTPCode_Instance_4XX_Count"
            case .httpcodeInstance5xxCount: return "HTTPCode_Instance_5XX_Count"
            case .httpcodeLb4xxCount: return "HTTPCode_LB_4XX_Count"
            case .httpcodeLb5xxCount: return "HTTPCode_LB_5XX_Count"
            case .healthyhostcount: return "HealthyHostCount"
            case .instanceresponsetime: return "InstanceResponseTime"
            case .rejectedconnectioncount: return "RejectedConnectionCount"
            case .requestcount: return "RequestCount"
            case .unhealthyhostcount: return "UnhealthyHostCount"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerMetricName(rawValue: rawValue) ?? LoadBalancerMetricName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum LoadBalancerProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case http
        case httpHttps
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerProtocol] {
            return [
                .http,
                .httpHttps,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .http: return "HTTP"
            case .httpHttps: return "HTTP_HTTPS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerProtocol(rawValue: rawValue) ?? LoadBalancerProtocol.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum LoadBalancerState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case activeimpaired
        case failed
        case provisioning
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerState] {
            return [
                .active,
                .activeimpaired,
                .failed,
                .provisioning,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "active"
            case .activeimpaired: return "active_impaired"
            case .failed: return "failed"
            case .provisioning: return "provisioning"
            case .unknown: return "unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerState(rawValue: rawValue) ?? LoadBalancerState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case domainName
        case domainValidationRecords
        case failureReason
        case isAttached
        case issuedAt
        case issuer
        case keyAlgorithm
        case loadBalancerName
        case location
        case name
        case notAfter
        case notBefore
        case renewalSummary
        case resourceType
        case revocationReason
        case revokedAt
        case serial
        case signatureAlgorithm
        case status
        case subject
        case subjectAlternativeNames
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainValidationRecords = domainValidationRecords {
            var domainValidationRecordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationRecords)
            for loadbalancertlscertificatedomainvalidationrecordlist0 in domainValidationRecords {
                try domainValidationRecordsContainer.encode(loadbalancertlscertificatedomainvalidationrecordlist0)
            }
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason.rawValue, forKey: .failureReason)
        }
        if let isAttached = isAttached {
            try encodeContainer.encode(isAttached, forKey: .isAttached)
        }
        if let issuedAt = issuedAt {
            try encodeContainer.encode(issuedAt.timeIntervalSince1970, forKey: .issuedAt)
        }
        if let issuer = issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
        if let keyAlgorithm = keyAlgorithm {
            try encodeContainer.encode(keyAlgorithm, forKey: .keyAlgorithm)
        }
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notAfter = notAfter {
            try encodeContainer.encode(notAfter.timeIntervalSince1970, forKey: .notAfter)
        }
        if let notBefore = notBefore {
            try encodeContainer.encode(notBefore.timeIntervalSince1970, forKey: .notBefore)
        }
        if let renewalSummary = renewalSummary {
            try encodeContainer.encode(renewalSummary, forKey: .renewalSummary)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let revocationReason = revocationReason {
            try encodeContainer.encode(revocationReason.rawValue, forKey: .revocationReason)
        }
        if let revokedAt = revokedAt {
            try encodeContainer.encode(revokedAt.timeIntervalSince1970, forKey: .revokedAt)
        }
        if let serial = serial {
            try encodeContainer.encode(serial, forKey: .serial)
        }
        if let signatureAlgorithm = signatureAlgorithm {
            try encodeContainer.encode(signatureAlgorithm, forKey: .signatureAlgorithm)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let subject = subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let subjectAlternativeNames = subjectAlternativeNames {
            var subjectAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subjectAlternativeNames)
            for stringlist0 in subjectAlternativeNames {
                try subjectAlternativeNamesContainer.encode(stringlist0)
            }
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let isAttachedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isAttached)
        isAttached = isAttachedDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateStatus.self, forKey: .status)
        status = statusDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let domainValidationRecordsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord?].self, forKey: .domainValidationRecords)
        var domainValidationRecordsDecoded0:[LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord]? = nil
        if let domainValidationRecordsContainer = domainValidationRecordsContainer {
            domainValidationRecordsDecoded0 = [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord]()
            for structure0 in domainValidationRecordsContainer {
                if let structure0 = structure0 {
                    domainValidationRecordsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationRecords = domainValidationRecordsDecoded0
        let failureReasonDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateFailureReason.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let issuedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .issuedAt)
        issuedAt = issuedAtDecoded
        let issuerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuer)
        issuer = issuerDecoded
        let keyAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyAlgorithm)
        keyAlgorithm = keyAlgorithmDecoded
        let notAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .notAfter)
        notAfter = notAfterDecoded
        let notBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .notBefore)
        notBefore = notBeforeDecoded
        let renewalSummaryDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary.self, forKey: .renewalSummary)
        renewalSummary = renewalSummaryDecoded
        let revocationReasonDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateRevocationReason.self, forKey: .revocationReason)
        revocationReason = revocationReasonDecoded
        let revokedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .revokedAt)
        revokedAt = revokedAtDecoded
        let serialDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serial)
        serial = serialDecoded
        let signatureAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signatureAlgorithm)
        signatureAlgorithm = signatureAlgorithmDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let subjectAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subjectAlternativeNames)
        var subjectAlternativeNamesDecoded0:[Swift.String]? = nil
        if let subjectAlternativeNamesContainer = subjectAlternativeNamesContainer {
            subjectAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in subjectAlternativeNamesContainer {
                if let string0 = string0 {
                    subjectAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        subjectAlternativeNames = subjectAlternativeNamesDecoded0
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoadBalancerTlsCertificate(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), domainName: \(Swift.String(describing: domainName)), domainValidationRecords: \(Swift.String(describing: domainValidationRecords)), failureReason: \(Swift.String(describing: failureReason)), isAttached: \(Swift.String(describing: isAttached)), issuedAt: \(Swift.String(describing: issuedAt)), issuer: \(Swift.String(describing: issuer)), keyAlgorithm: \(Swift.String(describing: keyAlgorithm)), loadBalancerName: \(Swift.String(describing: loadBalancerName)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), notAfter: \(Swift.String(describing: notAfter)), notBefore: \(Swift.String(describing: notBefore)), renewalSummary: \(Swift.String(describing: renewalSummary)), resourceType: \(Swift.String(describing: resourceType)), revocationReason: \(Swift.String(describing: revocationReason)), revokedAt: \(Swift.String(describing: revokedAt)), serial: \(Swift.String(describing: serial)), signatureAlgorithm: \(Swift.String(describing: signatureAlgorithm)), status: \(Swift.String(describing: status)), subject: \(Swift.String(describing: subject)), subjectAlternativeNames: \(Swift.String(describing: subjectAlternativeNames)), supportCode: \(Swift.String(describing: supportCode)), tags: \(Swift.String(describing: tags)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a load balancer SSL/TLS certificate.</p>
    ///          <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p>
    public struct LoadBalancerTlsCertificate: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the SSL/TLS certificate.</p>
        public let arn: Swift.String?
        /// <p>The time when you created your SSL/TLS certificate.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The domain name for your SSL/TLS certificate.</p>
        public let domainName: Swift.String?
        /// <p>An array of LoadBalancerTlsCertificateDomainValidationRecord objects describing the
        ///       records.</p>
        public let domainValidationRecords: [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord]?
        /// <p>The validation failure reason, if any, of the certificate.</p>
        ///
        ///          <p>The following failure reasons are possible:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>NO_AVAILABLE_CONTACTS</code>
        ///                   </b> - This failure
        ///           applies to email validation, which is not available for Lightsail certificates.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>ADDITIONAL_VERIFICATION_REQUIRED</code>
        ///                   </b> -
        ///           Lightsail requires additional information to process this certificate request. This can
        ///           happen as a fraud-protection measure, such as when the domain ranks within the Alexa top
        ///           1000 websites. To provide the required information, use the <a href="https://console.aws.amazon.com/support/home">AWS Support Center</a> to contact
        ///           AWS Support.</p>
        ///                <note>
        ///                   <p>You cannot request a certificate for Amazon-owned domain names such as those ending
        ///             in amazonaws.com, cloudfront.net, or elasticbeanstalk.com.</p>
        ///                </note>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>DOMAIN_NOT_ALLOWED</code>
        ///                   </b> - One or more of the
        ///           domain names in the certificate request was reported as an unsafe domain by <a href="https://www.virustotal.com/gui/home/url">VirusTotal</a>. To correct the
        ///           problem, search for your domain name on the <a href="https://www.virustotal.com/gui/home/url">VirusTotal</a> website. If your domain
        ///           is reported as suspicious, see <a href="https://developers.google.com/web/fundamentals/security/hacked">Google Help for
        ///             Hacked Websites</a> to learn what you can do.</p>
        ///                <p>If you believe that the result is a false positive, notify the organization that is
        ///           reporting the domain. VirusTotal is an aggregate of several antivirus and URL scanners and
        ///           cannot remove your domain from a block list itself. After you correct the problem and the
        ///           VirusTotal registry has been updated, request a new certificate.</p>
        ///                <p>If you see this error and your domain is not included in the VirusTotal list, visit
        ///           the <a href="https://console.aws.amazon.com/support/home">AWS Support Center</a>
        ///           and create a case.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>INVALID_PUBLIC_DOMAIN</code>
        ///                   </b> - One or more of
        ///           the domain names in the certificate request is not valid. Typically, this is because a
        ///           domain name in the request is not a valid top-level domain. Try to request a certificate
        ///           again, correcting any spelling errors or typos that were in the failed request, and ensure
        ///           that all domain names in the request are for valid top-level domains. For example, you
        ///           cannot request a certificate for <code>example.invalidpublicdomain</code> because
        ///             <code>invalidpublicdomain</code> is not a valid top-level domain.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>OTHER</code>
        ///                   </b> - Typically, this failure occurs
        ///           when there is a typographical error in one or more of the domain names in the certificate
        ///           request. Try to request a certificate again, correcting any spelling errors or typos that
        ///           were in the failed request. </p>
        ///             </li>
        ///          </ul>
        public let failureReason: LightsailClientTypes.LoadBalancerTlsCertificateFailureReason?
        /// <p>When <code>true</code>, the SSL/TLS certificate is attached to the Lightsail load
        ///       balancer.</p>
        public let isAttached: Swift.Bool?
        /// <p>The time when the SSL/TLS certificate was issued.</p>
        public let issuedAt: ClientRuntime.Date?
        /// <p>The issuer of the certificate.</p>
        public let issuer: Swift.String?
        /// <p>The algorithm used to generate the key pair (the public and private key).</p>
        public let keyAlgorithm: Swift.String?
        /// <p>The load balancer name where your SSL/TLS certificate is attached.</p>
        public let loadBalancerName: Swift.String?
        /// <p>The AWS Region and Availability Zone where you created your certificate.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The name of the SSL/TLS certificate (e.g., <code>my-certificate</code>).</p>
        public let name: Swift.String?
        /// <p>The timestamp when the SSL/TLS certificate expires.</p>
        public let notAfter: ClientRuntime.Date?
        /// <p>The timestamp when the SSL/TLS certificate is first valid.</p>
        public let notBefore: ClientRuntime.Date?
        /// <p>An object that describes the status of the certificate renewal managed by
        ///       Lightsail.</p>
        public let renewalSummary: LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary?
        /// <p>The resource type (e.g., <code>LoadBalancerTlsCertificate</code>).</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Instance</code>
        ///                   </b> - A Lightsail instance (a
        ///           virtual private server)</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>StaticIp</code>
        ///                   </b> - A static IP address</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>KeyPair</code>
        ///                   </b> - The key pair used to connect
        ///           to a Lightsail instance</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>InstanceSnapshot</code>
        ///                   </b> - A Lightsail
        ///           instance snapshot</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Domain</code>
        ///                   </b> - A DNS zone</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>PeeredVpc</code>
        ///                   </b> - A peered VPC</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>LoadBalancer</code>
        ///                   </b> - A Lightsail load
        ///           balancer</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>LoadBalancerTlsCertificate</code>
        ///                   </b> - An SSL/TLS
        ///           certificate associated with a Lightsail load balancer</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Disk</code>
        ///                   </b> - A Lightsail block storage
        ///           disk</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>DiskSnapshot</code>
        ///                   </b> - A block storage disk
        ///           snapshot</p>
        ///             </li>
        ///          </ul>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The reason the certificate was revoked. This value is present only when the certificate
        ///       status is <code>REVOKED</code>.</p>
        public let revocationReason: LightsailClientTypes.LoadBalancerTlsCertificateRevocationReason?
        /// <p>The timestamp when the certificate was revoked. This value is present only when the
        ///       certificate status is <code>REVOKED</code>.</p>
        public let revokedAt: ClientRuntime.Date?
        /// <p>The serial number of the certificate.</p>
        public let serial: Swift.String?
        /// <p>The algorithm that was used to sign the certificate.</p>
        public let signatureAlgorithm: Swift.String?
        /// <p>The validation status of the SSL/TLS certificate. Valid values are below.</p>
        public let status: LightsailClientTypes.LoadBalancerTlsCertificateStatus?
        /// <p>The name of the entity that is associated with the public key contained in the
        ///       certificate.</p>
        public let subject: Swift.String?
        /// <p>An array of strings that specify the alternate domains (e.g., <code>example2.com</code>)
        ///       and subdomains (e.g., <code>blog.example.com</code>) for the certificate.</p>
        public let subjectAlternativeNames: [Swift.String]?
        /// <p>The support code. Include this code in your email to support when you have questions about
        ///       your Lightsail load balancer or SSL/TLS certificate. This code enables our support team to
        ///       look up your Lightsail information more easily.</p>
        public let supportCode: Swift.String?
        /// <p>The tag keys and optional values for the resource. For more information about tags in
        ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
        ///         Dev Guide</a>.</p>
        public let tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            domainName: Swift.String? = nil,
            domainValidationRecords: [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord]? = nil,
            failureReason: LightsailClientTypes.LoadBalancerTlsCertificateFailureReason? = nil,
            isAttached: Swift.Bool? = nil,
            issuedAt: ClientRuntime.Date? = nil,
            issuer: Swift.String? = nil,
            keyAlgorithm: Swift.String? = nil,
            loadBalancerName: Swift.String? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            notAfter: ClientRuntime.Date? = nil,
            notBefore: ClientRuntime.Date? = nil,
            renewalSummary: LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            revocationReason: LightsailClientTypes.LoadBalancerTlsCertificateRevocationReason? = nil,
            revokedAt: ClientRuntime.Date? = nil,
            serial: Swift.String? = nil,
            signatureAlgorithm: Swift.String? = nil,
            status: LightsailClientTypes.LoadBalancerTlsCertificateStatus? = nil,
            subject: Swift.String? = nil,
            subjectAlternativeNames: [Swift.String]? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.domainName = domainName
            self.domainValidationRecords = domainValidationRecords
            self.failureReason = failureReason
            self.isAttached = isAttached
            self.issuedAt = issuedAt
            self.issuer = issuer
            self.keyAlgorithm = keyAlgorithm
            self.loadBalancerName = loadBalancerName
            self.location = location
            self.name = name
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.renewalSummary = renewalSummary
            self.resourceType = resourceType
            self.revocationReason = revocationReason
            self.revokedAt = revokedAt
            self.serial = serial
            self.signatureAlgorithm = signatureAlgorithm
            self.status = status
            self.subject = subject
            self.subjectAlternativeNames = subjectAlternativeNames
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes {
    public enum LoadBalancerTlsCertificateDomainStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pendingvalidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateDomainStatus] {
            return [
                .failed,
                .pendingvalidation,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pendingvalidation: return "PENDING_VALIDATION"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerTlsCertificateDomainStatus(rawValue: rawValue) ?? LoadBalancerTlsCertificateDomainStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
        case validationStatus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let validationStatus = validationStatus {
            try encodeContainer.encode(validationStatus.rawValue, forKey: .validationStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let validationStatusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus.self, forKey: .validationStatus)
        validationStatus = validationStatusDecoded
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoadBalancerTlsCertificateDomainValidationOption(domainName: \(Swift.String(describing: domainName)), validationStatus: \(Swift.String(describing: validationStatus)))"}
}

extension LightsailClientTypes {
    /// <p>Contains information about the domain names on an SSL/TLS certificate that you will use to
    ///       validate domain ownership.</p>
    public struct LoadBalancerTlsCertificateDomainValidationOption: Swift.Equatable {
        /// <p>The fully qualified domain name in the certificate request.</p>
        public let domainName: Swift.String?
        /// <p>The status of the domain validation. Valid values are listed below.</p>
        public let validationStatus: LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus?

        public init (
            domainName: Swift.String? = nil,
            validationStatus: LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus? = nil
        )
        {
            self.domainName = domainName
            self.validationStatus = validationStatus
        }
    }

}

extension LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName
        case name
        case type
        case validationStatus
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let validationStatus = validationStatus {
            try encodeContainer.encode(validationStatus.rawValue, forKey: .validationStatus)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let validationStatusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus.self, forKey: .validationStatus)
        validationStatus = validationStatusDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoadBalancerTlsCertificateDomainValidationRecord(domainName: \(Swift.String(describing: domainName)), name: \(Swift.String(describing: name)), type: \(Swift.String(describing: type)), validationStatus: \(Swift.String(describing: validationStatus)), value: \(Swift.String(describing: value)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the validation record of each domain name in the SSL/TLS certificate.</p>
    public struct LoadBalancerTlsCertificateDomainValidationRecord: Swift.Equatable {
        /// <p>The domain name against which your SSL/TLS certificate was validated.</p>
        public let domainName: Swift.String?
        /// <p>A fully qualified domain name in the certificate. For example,
        ///       <code>example.com</code>.</p>
        public let name: Swift.String?
        /// <p>The type of validation record. For example, <code>CNAME</code> for domain
        ///       validation.</p>
        public let type: Swift.String?
        /// <p>The validation status. Valid values are listed below.</p>
        public let validationStatus: LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus?
        /// <p>The value for that type.</p>
        public let value: Swift.String?

        public init (
            domainName: Swift.String? = nil,
            name: Swift.String? = nil,
            type: Swift.String? = nil,
            validationStatus: LightsailClientTypes.LoadBalancerTlsCertificateDomainStatus? = nil,
            value: Swift.String? = nil
        )
        {
            self.domainName = domainName
            self.name = name
            self.type = type
            self.validationStatus = validationStatus
            self.value = value
        }
    }

}

extension LightsailClientTypes {
    public enum LoadBalancerTlsCertificateFailureReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case additionalverificationrequired
        case domainnotallowed
        case invalidpublicdomain
        case noavailablecontacts
        case other
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateFailureReason] {
            return [
                .additionalverificationrequired,
                .domainnotallowed,
                .invalidpublicdomain,
                .noavailablecontacts,
                .other,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .additionalverificationrequired: return "ADDITIONAL_VERIFICATION_REQUIRED"
            case .domainnotallowed: return "DOMAIN_NOT_ALLOWED"
            case .invalidpublicdomain: return "INVALID_PUBLIC_DOMAIN"
            case .noavailablecontacts: return "NO_AVAILABLE_CONTACTS"
            case .other: return "OTHER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerTlsCertificateFailureReason(rawValue: rawValue) ?? LoadBalancerTlsCertificateFailureReason.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum LoadBalancerTlsCertificateRenewalStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pendingautorenewal
        case pendingvalidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateRenewalStatus] {
            return [
                .failed,
                .pendingautorenewal,
                .pendingvalidation,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pendingautorenewal: return "PENDING_AUTO_RENEWAL"
            case .pendingvalidation: return "PENDING_VALIDATION"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerTlsCertificateRenewalStatus(rawValue: rawValue) ?? LoadBalancerTlsCertificateRenewalStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainValidationOptions
        case renewalStatus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainValidationOptions = domainValidationOptions {
            var domainValidationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationOptions)
            for loadbalancertlscertificatedomainvalidationoptionlist0 in domainValidationOptions {
                try domainValidationOptionsContainer.encode(loadbalancertlscertificatedomainvalidationoptionlist0)
            }
        }
        if let renewalStatus = renewalStatus {
            try encodeContainer.encode(renewalStatus.rawValue, forKey: .renewalStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let renewalStatusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerTlsCertificateRenewalStatus.self, forKey: .renewalStatus)
        renewalStatus = renewalStatusDecoded
        let domainValidationOptionsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption?].self, forKey: .domainValidationOptions)
        var domainValidationOptionsDecoded0:[LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption]? = nil
        if let domainValidationOptionsContainer = domainValidationOptionsContainer {
            domainValidationOptionsDecoded0 = [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption]()
            for structure0 in domainValidationOptionsContainer {
                if let structure0 = structure0 {
                    domainValidationOptionsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationOptions = domainValidationOptionsDecoded0
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoadBalancerTlsCertificateRenewalSummary(domainValidationOptions: \(Swift.String(describing: domainValidationOptions)), renewalStatus: \(Swift.String(describing: renewalStatus)))"}
}

extension LightsailClientTypes {
    /// <p>Contains information about the status of Lightsail's managed renewal for the
    ///       certificate.</p>
    ///          <p>The renewal status of the certificate.</p>
    ///          <p>The following renewal status are possible:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>PendingAutoRenewal</code>
    ///                   </b> - Lightsail is
    ///           attempting to automatically validate the domain names in the certificate. No further
    ///           action is required. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>PendingValidation</code>
    ///                   </b> - Lightsail couldn't
    ///           automatically validate one or more domain names in the certificate. You must take action
    ///           to validate these domain names or the certificate won't be renewed. If you used DNS
    ///           validation, check to make sure your certificate's domain validation records exist in your
    ///           domain's DNS, and that your certificate remains in use.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>Success</code>
    ///                   </b> - All domain names in the
    ///           certificate are validated, and Lightsail renewed the certificate. No further action is
    ///           required. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>Failed</code>
    ///                   </b> - One or more domain names were
    ///           not validated before the certificate expired, and Lightsail did not renew the
    ///           certificate. You can request a new certificate using the <code>CreateCertificate</code>
    ///           action.</p>
    ///             </li>
    ///          </ul>
    public struct LoadBalancerTlsCertificateRenewalSummary: Swift.Equatable {
        /// <p>Contains information about the validation of each domain name in the certificate, as it
        ///       pertains to Lightsail's managed renewal. This is different from the initial validation that
        ///       occurs as a result of the RequestCertificate request.</p>
        public let domainValidationOptions: [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption]?
        /// <p>The renewal status of the certificate.</p>
        ///          <p>The following renewal status are possible:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>PendingAutoRenewal</code>
        ///                   </b> - Lightsail is
        ///           attempting to automatically validate the domain names of the certificate. No further
        ///           action is required. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>PendingValidation</code>
        ///                   </b> - Lightsail couldn't
        ///           automatically validate one or more domain names of the certificate. You must take action
        ///           to validate these domain names or the certificate won't be renewed. Check to make sure
        ///           your certificate's domain validation records exist in your domain's DNS, and that your
        ///           certificate remains in use.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Success</code>
        ///                   </b> - All domain names in the
        ///           certificate are validated, and Lightsail renewed the certificate. No further action is
        ///           required. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Failed</code>
        ///                   </b> - One or more domain names were
        ///           not validated before the certificate expired, and Lightsail did not renew the
        ///           certificate. You can request a new certificate using the <code>CreateCertificate</code>
        ///           action.</p>
        ///             </li>
        ///          </ul>
        public let renewalStatus: LightsailClientTypes.LoadBalancerTlsCertificateRenewalStatus?

        public init (
            domainValidationOptions: [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationOption]? = nil,
            renewalStatus: LightsailClientTypes.LoadBalancerTlsCertificateRenewalStatus? = nil
        )
        {
            self.domainValidationOptions = domainValidationOptions
            self.renewalStatus = renewalStatus
        }
    }

}

extension LightsailClientTypes {
    public enum LoadBalancerTlsCertificateRevocationReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aacompromise
        case affiliationchanged
        case cacompromise
        case certificatehold
        case cessationofoperation
        case keycompromise
        case privilegewithdrawn
        case removefromcrl
        case superceded
        case unspecified
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateRevocationReason] {
            return [
                .aacompromise,
                .affiliationchanged,
                .cacompromise,
                .certificatehold,
                .cessationofoperation,
                .keycompromise,
                .privilegewithdrawn,
                .removefromcrl,
                .superceded,
                .unspecified,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aacompromise: return "A_A_COMPROMISE"
            case .affiliationchanged: return "AFFILIATION_CHANGED"
            case .cacompromise: return "CA_COMPROMISE"
            case .certificatehold: return "CERTIFICATE_HOLD"
            case .cessationofoperation: return "CESSATION_OF_OPERATION"
            case .keycompromise: return "KEY_COMPROMISE"
            case .privilegewithdrawn: return "PRIVILEGE_WITHDRAWN"
            case .removefromcrl: return "REMOVE_FROM_CRL"
            case .superceded: return "SUPERCEDED"
            case .unspecified: return "UNSPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerTlsCertificateRevocationReason(rawValue: rawValue) ?? LoadBalancerTlsCertificateRevocationReason.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum LoadBalancerTlsCertificateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case expired
        case failed
        case inactive
        case issued
        case pendingvalidation
        case revoked
        case unknown
        case validationtimedout
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadBalancerTlsCertificateStatus] {
            return [
                .expired,
                .failed,
                .inactive,
                .issued,
                .pendingvalidation,
                .revoked,
                .unknown,
                .validationtimedout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .expired: return "EXPIRED"
            case .failed: return "FAILED"
            case .inactive: return "INACTIVE"
            case .issued: return "ISSUED"
            case .pendingvalidation: return "PENDING_VALIDATION"
            case .revoked: return "REVOKED"
            case .unknown: return "UNKNOWN"
            case .validationtimedout: return "VALIDATION_TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadBalancerTlsCertificateStatus(rawValue: rawValue) ?? LoadBalancerTlsCertificateStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isAttached
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let isAttached = isAttached {
            try encodeContainer.encode(isAttached, forKey: .isAttached)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let isAttachedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isAttached)
        isAttached = isAttachedDecoded
    }
}

extension LightsailClientTypes.LoadBalancerTlsCertificateSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoadBalancerTlsCertificateSummary(isAttached: \(Swift.String(describing: isAttached)), name: \(Swift.String(describing: name)))"}
}

extension LightsailClientTypes {
    /// <p>Provides a summary of SSL/TLS certificate metadata.</p>
    public struct LoadBalancerTlsCertificateSummary: Swift.Equatable {
        /// <p>When <code>true</code>, the SSL/TLS certificate is attached to the Lightsail load
        ///       balancer.</p>
        public let isAttached: Swift.Bool?
        /// <p>The name of the SSL/TLS certificate.</p>
        public let name: Swift.String?

        public init (
            isAttached: Swift.Bool? = nil,
            name: Swift.String? = nil
        )
        {
            self.isAttached = isAttached
            self.name = name
        }
    }

}

extension LightsailClientTypes.LogEvent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LightsailClientTypes.LogEvent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LogEvent(createdAt: \(Swift.String(describing: createdAt)), message: \(Swift.String(describing: message)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a database log event.</p>
    public struct LogEvent: Swift.Equatable {
        /// <p>The timestamp when the database log event was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The message of the database log event.</p>
        public let message: Swift.String?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            message: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.message = message
        }
    }

}

extension LightsailClientTypes.MetricDatapoint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case average
        case maximum
        case minimum
        case sampleCount
        case sum
        case timestamp
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let average = average {
            try encodeContainer.encode(average, forKey: .average)
        }
        if let maximum = maximum {
            try encodeContainer.encode(maximum, forKey: .maximum)
        }
        if let minimum = minimum {
            try encodeContainer.encode(minimum, forKey: .minimum)
        }
        if let sampleCount = sampleCount {
            try encodeContainer.encode(sampleCount, forKey: .sampleCount)
        }
        if let sum = sum {
            try encodeContainer.encode(sum, forKey: .sum)
        }
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp.timeIntervalSince1970, forKey: .timestamp)
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let averageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .average)
        average = averageDecoded
        let maximumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maximum)
        maximum = maximumDecoded
        let minimumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .minimum)
        minimum = minimumDecoded
        let sampleCountDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sampleCount)
        sampleCount = sampleCountDecoded
        let sumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sum)
        sum = sumDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let unitDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension LightsailClientTypes.MetricDatapoint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricDatapoint(average: \(Swift.String(describing: average)), maximum: \(Swift.String(describing: maximum)), minimum: \(Swift.String(describing: minimum)), sampleCount: \(Swift.String(describing: sampleCount)), sum: \(Swift.String(describing: sum)), timestamp: \(Swift.String(describing: timestamp)), unit: \(Swift.String(describing: unit)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the metric data point.</p>
    public struct MetricDatapoint: Swift.Equatable {
        /// <p>The average.</p>
        public let average: Swift.Double?
        /// <p>The maximum.</p>
        public let maximum: Swift.Double?
        /// <p>The minimum.</p>
        public let minimum: Swift.Double?
        /// <p>The sample count.</p>
        public let sampleCount: Swift.Double?
        /// <p>The sum.</p>
        public let sum: Swift.Double?
        /// <p>The timestamp (e.g., <code>1479816991.349</code>).</p>
        public let timestamp: ClientRuntime.Date?
        /// <p>The unit. </p>
        public let unit: LightsailClientTypes.MetricUnit?

        public init (
            average: Swift.Double? = nil,
            maximum: Swift.Double? = nil,
            minimum: Swift.Double? = nil,
            sampleCount: Swift.Double? = nil,
            sum: Swift.Double? = nil,
            timestamp: ClientRuntime.Date? = nil,
            unit: LightsailClientTypes.MetricUnit? = nil
        )
        {
            self.average = average
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
            self.timestamp = timestamp
            self.unit = unit
        }
    }

}

extension LightsailClientTypes {
    public enum MetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case burstcapacitypercentage
        case burstcapacitytime
        case cpuutilization
        case clienttlsnegotiationerrorcount
        case databaseconnections
        case diskqueuedepth
        case freestoragespace
        case httpcodeInstance2xxCount
        case httpcodeInstance3xxCount
        case httpcodeInstance4xxCount
        case httpcodeInstance5xxCount
        case httpcodeLb4xxCount
        case httpcodeLb5xxCount
        case healthyhostcount
        case instanceresponsetime
        case networkin
        case networkout
        case networkreceivethroughput
        case networktransmitthroughput
        case rejectedconnectioncount
        case requestcount
        case statuscheckfailed
        case statuscheckfailedInstance
        case statuscheckfailedSystem
        case unhealthyhostcount
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricName] {
            return [
                .burstcapacitypercentage,
                .burstcapacitytime,
                .cpuutilization,
                .clienttlsnegotiationerrorcount,
                .databaseconnections,
                .diskqueuedepth,
                .freestoragespace,
                .httpcodeInstance2xxCount,
                .httpcodeInstance3xxCount,
                .httpcodeInstance4xxCount,
                .httpcodeInstance5xxCount,
                .httpcodeLb4xxCount,
                .httpcodeLb5xxCount,
                .healthyhostcount,
                .instanceresponsetime,
                .networkin,
                .networkout,
                .networkreceivethroughput,
                .networktransmitthroughput,
                .rejectedconnectioncount,
                .requestcount,
                .statuscheckfailed,
                .statuscheckfailedInstance,
                .statuscheckfailedSystem,
                .unhealthyhostcount,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .burstcapacitypercentage: return "BurstCapacityPercentage"
            case .burstcapacitytime: return "BurstCapacityTime"
            case .cpuutilization: return "CPUUtilization"
            case .clienttlsnegotiationerrorcount: return "ClientTLSNegotiationErrorCount"
            case .databaseconnections: return "DatabaseConnections"
            case .diskqueuedepth: return "DiskQueueDepth"
            case .freestoragespace: return "FreeStorageSpace"
            case .httpcodeInstance2xxCount: return "HTTPCode_Instance_2XX_Count"
            case .httpcodeInstance3xxCount: return "HTTPCode_Instance_3XX_Count"
            case .httpcodeInstance4xxCount: return "HTTPCode_Instance_4XX_Count"
            case .httpcodeInstance5xxCount: return "HTTPCode_Instance_5XX_Count"
            case .httpcodeLb4xxCount: return "HTTPCode_LB_4XX_Count"
            case .httpcodeLb5xxCount: return "HTTPCode_LB_5XX_Count"
            case .healthyhostcount: return "HealthyHostCount"
            case .instanceresponsetime: return "InstanceResponseTime"
            case .networkin: return "NetworkIn"
            case .networkout: return "NetworkOut"
            case .networkreceivethroughput: return "NetworkReceiveThroughput"
            case .networktransmitthroughput: return "NetworkTransmitThroughput"
            case .rejectedconnectioncount: return "RejectedConnectionCount"
            case .requestcount: return "RequestCount"
            case .statuscheckfailed: return "StatusCheckFailed"
            case .statuscheckfailedInstance: return "StatusCheckFailed_Instance"
            case .statuscheckfailedSystem: return "StatusCheckFailed_System"
            case .unhealthyhostcount: return "UnhealthyHostCount"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricName(rawValue: rawValue) ?? MetricName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum MetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case samplecount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStatistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .samplecount,
                .sum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .samplecount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricStatistic(rawValue: rawValue) ?? MetricStatistic.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum MetricUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bits
        case bitssecond
        case bytes
        case bytessecond
        case count
        case countsecond
        case gigabits
        case gigabitssecond
        case gigabytes
        case gigabytessecond
        case kilobits
        case kilobitssecond
        case kilobytes
        case kilobytessecond
        case megabits
        case megabitssecond
        case megabytes
        case megabytessecond
        case microseconds
        case milliseconds
        case `none`
        case percent
        case seconds
        case terabits
        case terabitssecond
        case terabytes
        case terabytessecond
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricUnit] {
            return [
                .bits,
                .bitssecond,
                .bytes,
                .bytessecond,
                .count,
                .countsecond,
                .gigabits,
                .gigabitssecond,
                .gigabytes,
                .gigabytessecond,
                .kilobits,
                .kilobitssecond,
                .kilobytes,
                .kilobytessecond,
                .megabits,
                .megabitssecond,
                .megabytes,
                .megabytessecond,
                .microseconds,
                .milliseconds,
                .none,
                .percent,
                .seconds,
                .terabits,
                .terabitssecond,
                .terabytes,
                .terabytessecond,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bits: return "Bits"
            case .bitssecond: return "Bits/Second"
            case .bytes: return "Bytes"
            case .bytessecond: return "Bytes/Second"
            case .count: return "Count"
            case .countsecond: return "Count/Second"
            case .gigabits: return "Gigabits"
            case .gigabitssecond: return "Gigabits/Second"
            case .gigabytes: return "Gigabytes"
            case .gigabytessecond: return "Gigabytes/Second"
            case .kilobits: return "Kilobits"
            case .kilobitssecond: return "Kilobits/Second"
            case .kilobytes: return "Kilobytes"
            case .kilobytessecond: return "Kilobytes/Second"
            case .megabits: return "Megabits"
            case .megabitssecond: return "Megabits/Second"
            case .megabytes: return "Megabytes"
            case .megabytessecond: return "Megabytes/Second"
            case .microseconds: return "Microseconds"
            case .milliseconds: return "Milliseconds"
            case .none: return "None"
            case .percent: return "Percent"
            case .seconds: return "Seconds"
            case .terabits: return "Terabits"
            case .terabitssecond: return "Terabits/Second"
            case .terabytes: return "Terabytes"
            case .terabytessecond: return "Terabytes/Second"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricUnit(rawValue: rawValue) ?? MetricUnit.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.MonitoredResourceInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case name
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension LightsailClientTypes.MonitoredResourceInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MonitoredResourceInfo(arn: \(Swift.String(describing: arn)), name: \(Swift.String(describing: name)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension LightsailClientTypes {
    /// <p>Describes resource being monitored by an alarm.</p>
    ///          <p>An alarm is a way to monitor your Amazon Lightsail resource metrics. For more information,
    ///       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
    ///         in Amazon Lightsail</a>.</p>
    public struct MonitoredResourceInfo: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the resource being monitored.</p>
        public let arn: Swift.String?
        /// <p>The name of the Lightsail resource being monitored.</p>
        public let name: Swift.String?
        /// <p>The Lightsail resource type of the resource being monitored.</p>
        ///          <p>Instances, load balancers, and relational databases are the only Lightsail resources
        ///       that can currently be monitored by alarms.</p>
        public let resourceType: LightsailClientTypes.ResourceType?

        public init (
            arn: Swift.String? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil
        )
        {
            self.arn = arn
            self.name = name
            self.resourceType = resourceType
        }
    }

}

extension LightsailClientTypes.MonthlyTransfer: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gbPerMonthAllocated
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gbPerMonthAllocated = gbPerMonthAllocated {
            try encodeContainer.encode(gbPerMonthAllocated, forKey: .gbPerMonthAllocated)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gbPerMonthAllocatedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gbPerMonthAllocated)
        gbPerMonthAllocated = gbPerMonthAllocatedDecoded
    }
}

extension LightsailClientTypes.MonthlyTransfer: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MonthlyTransfer(gbPerMonthAllocated: \(Swift.String(describing: gbPerMonthAllocated)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the monthly data transfer in and out of your virtual private server (or
    ///         <i>instance</i>).</p>
    public struct MonthlyTransfer: Swift.Equatable {
        /// <p>The amount allocated per month (in GB).</p>
        public let gbPerMonthAllocated: Swift.Int?

        public init (
            gbPerMonthAllocated: Swift.Int? = nil
        )
        {
            self.gbPerMonthAllocated = gbPerMonthAllocated
        }
    }

}

extension LightsailClientTypes {
    public enum NetworkProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case icmp
        case tcp
        case udp
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkProtocol] {
            return [
                .all,
                .icmp,
                .tcp,
                .udp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "all"
            case .icmp: return "icmp"
            case .tcp: return "tcp"
            case .udp: return "udp"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NetworkProtocol(rawValue: rawValue) ?? NetworkProtocol.sdkUnknown(rawValue)
        }
    }
}

extension NotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotFoundException(code: \(Swift.String(describing: code)), docs: \(Swift.String(describing: docs)), message: \(Swift.String(describing: message)), tip: \(Swift.String(describing: tip)))"}
}

extension NotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.docs = output.docs
            self.message = output.message
            self.tip = output.tip
        } else {
            self.code = nil
            self.docs = nil
            self.message = nil
            self.tip = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Lightsail throws this exception when it cannot find a resource.</p>
public struct NotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var docs: Swift.String?
    public var message: Swift.String?
    public var tip: Swift.String?

    public init (
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.code = code
        self.docs = docs
        self.message = message
        self.tip = tip
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    public let code: Swift.String?
    public let docs: Swift.String?
    public let message: Swift.String?
    public let tip: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case docs
        case message
        case tip
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let docsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .docs)
        docs = docsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tip)
        tip = tipDecoded
    }
}

public struct OpenInstancePublicPortsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "OpenInstancePublicPortsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<OpenInstancePublicPortsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<OpenInstancePublicPortsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<OpenInstancePublicPortsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<OpenInstancePublicPortsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<OpenInstancePublicPortsOutputError>
}

extension OpenInstancePublicPortsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OpenInstancePublicPortsInput(instanceName: \(Swift.String(describing: instanceName)), portInfo: \(Swift.String(describing: portInfo)))"}
}

extension OpenInstancePublicPortsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case portInfo
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let portInfo = portInfo {
            try encodeContainer.encode(portInfo, forKey: .portInfo)
        }
    }
}

public struct OpenInstancePublicPortsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "OpenInstancePublicPortsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<OpenInstancePublicPortsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<OpenInstancePublicPortsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<OpenInstancePublicPortsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<OpenInstancePublicPortsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<OpenInstancePublicPortsOutputError>
}

public struct OpenInstancePublicPortsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "OpenInstancePublicPortsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<OpenInstancePublicPortsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<OpenInstancePublicPortsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<OpenInstancePublicPortsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<OpenInstancePublicPortsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<OpenInstancePublicPortsOutputError>
}

public struct OpenInstancePublicPortsInput: Swift.Equatable {
    /// <p>The name of the instance for which to open ports.</p>
    public let instanceName: Swift.String?
    /// <p>An object to describe the ports to open for the specified instance.</p>
    public let portInfo: LightsailClientTypes.PortInfo?

    public init (
        instanceName: Swift.String? = nil,
        portInfo: LightsailClientTypes.PortInfo? = nil
    )
    {
        self.instanceName = instanceName
        self.portInfo = portInfo
    }
}

struct OpenInstancePublicPortsInputBody: Swift.Equatable {
    public let portInfo: LightsailClientTypes.PortInfo?
    public let instanceName: Swift.String?
}

extension OpenInstancePublicPortsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case portInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portInfoDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PortInfo.self, forKey: .portInfo)
        portInfo = portInfoDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension OpenInstancePublicPortsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension OpenInstancePublicPortsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum OpenInstancePublicPortsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension OpenInstancePublicPortsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OpenInstancePublicPortsOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension OpenInstancePublicPortsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: OpenInstancePublicPortsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct OpenInstancePublicPortsOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct OpenInstancePublicPortsOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension OpenInstancePublicPortsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension LightsailClientTypes.Operation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case errorCode
        case errorDetails
        case id
        case isTerminal
        case location
        case operationDetails
        case operationType
        case resourceName
        case resourceType
        case status
        case statusChangedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorDetails = errorDetails {
            try encodeContainer.encode(errorDetails, forKey: .errorDetails)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isTerminal = isTerminal {
            try encodeContainer.encode(isTerminal, forKey: .isTerminal)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let operationDetails = operationDetails {
            try encodeContainer.encode(operationDetails, forKey: .operationDetails)
        }
        if let operationType = operationType {
            try encodeContainer.encode(operationType.rawValue, forKey: .operationType)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusChangedAt = statusChangedAt {
            try encodeContainer.encode(statusChangedAt.timeIntervalSince1970, forKey: .statusChangedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let isTerminalDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTerminal)
        isTerminal = isTerminalDecoded
        let operationDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationDetails)
        operationDetails = operationDetailsDecoded
        let operationTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.OperationType.self, forKey: .operationType)
        operationType = operationTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.OperationStatus.self, forKey: .status)
        status = statusDecoded
        let statusChangedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .statusChangedAt)
        statusChangedAt = statusChangedAtDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}

extension LightsailClientTypes.Operation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Operation(createdAt: \(Swift.String(describing: createdAt)), errorCode: \(Swift.String(describing: errorCode)), errorDetails: \(Swift.String(describing: errorDetails)), id: \(Swift.String(describing: id)), isTerminal: \(Swift.String(describing: isTerminal)), location: \(Swift.String(describing: location)), operationDetails: \(Swift.String(describing: operationDetails)), operationType: \(Swift.String(describing: operationType)), resourceName: \(Swift.String(describing: resourceName)), resourceType: \(Swift.String(describing: resourceType)), status: \(Swift.String(describing: status)), statusChangedAt: \(Swift.String(describing: statusChangedAt)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the API operation.</p>
    public struct Operation: Swift.Equatable {
        /// <p>The timestamp when the operation was initialized (e.g.,
        ///       <code>1479816991.349</code>).</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The error code.</p>
        public let errorCode: Swift.String?
        /// <p>The error details.</p>
        public let errorDetails: Swift.String?
        /// <p>The ID of the operation.</p>
        public let id: Swift.String?
        /// <p>A Boolean value indicating whether the operation is terminal.</p>
        public let isTerminal: Swift.Bool?
        /// <p>The AWS Region and Availability Zone.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>Details about the operation (e.g., <code>Debian-1GB-Ohio-1</code>).</p>
        public let operationDetails: Swift.String?
        /// <p>The type of operation. </p>
        public let operationType: LightsailClientTypes.OperationType?
        /// <p>The resource name.</p>
        public let resourceName: Swift.String?
        /// <p>The resource type. </p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The status of the operation. </p>
        public let status: LightsailClientTypes.OperationStatus?
        /// <p>The timestamp when the status was changed (e.g., <code>1479816991.349</code>).</p>
        public let statusChangedAt: ClientRuntime.Date?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            errorCode: Swift.String? = nil,
            errorDetails: Swift.String? = nil,
            id: Swift.String? = nil,
            isTerminal: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            operationDetails: Swift.String? = nil,
            operationType: LightsailClientTypes.OperationType? = nil,
            resourceName: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            status: LightsailClientTypes.OperationStatus? = nil,
            statusChangedAt: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.errorCode = errorCode
            self.errorDetails = errorDetails
            self.id = id
            self.isTerminal = isTerminal
            self.location = location
            self.operationDetails = operationDetails
            self.operationType = operationType
            self.resourceName = resourceName
            self.resourceType = resourceType
            self.status = status
            self.statusChangedAt = statusChangedAt
        }
    }

}

extension OperationFailureException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OperationFailureException(code: \(Swift.String(describing: code)), docs: \(Swift.String(describing: docs)), message: \(Swift.String(describing: message)), tip: \(Swift.String(describing: tip)))"}
}

extension OperationFailureException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: OperationFailureExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.docs = output.docs
            self.message = output.message
            self.tip = output.tip
        } else {
            self.code = nil
            self.docs = nil
            self.message = nil
            self.tip = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Lightsail throws this exception when an operation fails to execute.</p>
public struct OperationFailureException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var docs: Swift.String?
    public var message: Swift.String?
    public var tip: Swift.String?

    public init (
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.code = code
        self.docs = docs
        self.message = message
        self.tip = tip
    }
}

struct OperationFailureExceptionBody: Swift.Equatable {
    public let code: Swift.String?
    public let docs: Swift.String?
    public let message: Swift.String?
    public let tip: Swift.String?
}

extension OperationFailureExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case docs
        case message
        case tip
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let docsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .docs)
        docs = docsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tip)
        tip = tipDecoded
    }
}

extension LightsailClientTypes {
    public enum OperationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case notstarted
        case started
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationStatus] {
            return [
                .completed,
                .failed,
                .notstarted,
                .started,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .notstarted: return "NotStarted"
            case .started: return "Started"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperationStatus(rawValue: rawValue) ?? OperationStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum OperationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allocatestaticip
        case attachcertificatetodistribution
        case attachdisk
        case attachinstancestoloadbalancer
        case attachloadbalancertlscertificate
        case attachstaticip
        case closeinstancepublicports
        case createcertificate
        case createcontactmethod
        case createcontainerservice
        case createcontainerservicedeployment
        case createcontainerserviceregistrylogin
        case createdisk
        case creatediskfromsnapshot
        case createdisksnapshot
        case createdistribution
        case createdomain
        case createinstance
        case createinstancesnapshot
        case createinstancesfromsnapshot
        case createloadbalancer
        case createloadbalancertlscertificate
        case createrelationaldatabase
        case createrelationaldatabasefromsnapshot
        case createrelationaldatabasesnapshot
        case deletealarm
        case deletecertificate
        case deletecontactmethod
        case deletecontainerimage
        case deletecontainerservice
        case deletedisk
        case deletedisksnapshot
        case deletedistribution
        case deletedomain
        case deletedomainentry
        case deleteinstance
        case deleteinstancesnapshot
        case deleteknownhostkeys
        case deleteloadbalancer
        case deleteloadbalancertlscertificate
        case deleterelationaldatabase
        case deleterelationaldatabasesnapshot
        case detachcertificatefromdistribution
        case detachdisk
        case detachinstancesfromloadbalancer
        case detachstaticip
        case disableaddon
        case enableaddon
        case getalarms
        case getcontactmethods
        case openinstancepublicports
        case putalarm
        case putinstancepublicports
        case rebootinstance
        case rebootrelationaldatabase
        case registercontainerimage
        case releasestaticip
        case resetdistributioncache
        case sendcontactmethodverification
        case setipaddresstype
        case startinstance
        case startrelationaldatabase
        case stopinstance
        case stoprelationaldatabase
        case testalarm
        case updatecontainerservice
        case updatedistribution
        case updatedistributionbundle
        case updatedomainentry
        case updateloadbalancerattribute
        case updaterelationaldatabase
        case updaterelationaldatabaseparameters
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationType] {
            return [
                .allocatestaticip,
                .attachcertificatetodistribution,
                .attachdisk,
                .attachinstancestoloadbalancer,
                .attachloadbalancertlscertificate,
                .attachstaticip,
                .closeinstancepublicports,
                .createcertificate,
                .createcontactmethod,
                .createcontainerservice,
                .createcontainerservicedeployment,
                .createcontainerserviceregistrylogin,
                .createdisk,
                .creatediskfromsnapshot,
                .createdisksnapshot,
                .createdistribution,
                .createdomain,
                .createinstance,
                .createinstancesnapshot,
                .createinstancesfromsnapshot,
                .createloadbalancer,
                .createloadbalancertlscertificate,
                .createrelationaldatabase,
                .createrelationaldatabasefromsnapshot,
                .createrelationaldatabasesnapshot,
                .deletealarm,
                .deletecertificate,
                .deletecontactmethod,
                .deletecontainerimage,
                .deletecontainerservice,
                .deletedisk,
                .deletedisksnapshot,
                .deletedistribution,
                .deletedomain,
                .deletedomainentry,
                .deleteinstance,
                .deleteinstancesnapshot,
                .deleteknownhostkeys,
                .deleteloadbalancer,
                .deleteloadbalancertlscertificate,
                .deleterelationaldatabase,
                .deleterelationaldatabasesnapshot,
                .detachcertificatefromdistribution,
                .detachdisk,
                .detachinstancesfromloadbalancer,
                .detachstaticip,
                .disableaddon,
                .enableaddon,
                .getalarms,
                .getcontactmethods,
                .openinstancepublicports,
                .putalarm,
                .putinstancepublicports,
                .rebootinstance,
                .rebootrelationaldatabase,
                .registercontainerimage,
                .releasestaticip,
                .resetdistributioncache,
                .sendcontactmethodverification,
                .setipaddresstype,
                .startinstance,
                .startrelationaldatabase,
                .stopinstance,
                .stoprelationaldatabase,
                .testalarm,
                .updatecontainerservice,
                .updatedistribution,
                .updatedistributionbundle,
                .updatedomainentry,
                .updateloadbalancerattribute,
                .updaterelationaldatabase,
                .updaterelationaldatabaseparameters,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allocatestaticip: return "AllocateStaticIp"
            case .attachcertificatetodistribution: return "AttachCertificateToDistribution"
            case .attachdisk: return "AttachDisk"
            case .attachinstancestoloadbalancer: return "AttachInstancesToLoadBalancer"
            case .attachloadbalancertlscertificate: return "AttachLoadBalancerTlsCertificate"
            case .attachstaticip: return "AttachStaticIp"
            case .closeinstancepublicports: return "CloseInstancePublicPorts"
            case .createcertificate: return "CreateCertificate"
            case .createcontactmethod: return "CreateContactMethod"
            case .createcontainerservice: return "CreateContainerService"
            case .createcontainerservicedeployment: return "CreateContainerServiceDeployment"
            case .createcontainerserviceregistrylogin: return "CreateContainerServiceRegistryLogin"
            case .createdisk: return "CreateDisk"
            case .creatediskfromsnapshot: return "CreateDiskFromSnapshot"
            case .createdisksnapshot: return "CreateDiskSnapshot"
            case .createdistribution: return "CreateDistribution"
            case .createdomain: return "CreateDomain"
            case .createinstance: return "CreateInstance"
            case .createinstancesnapshot: return "CreateInstanceSnapshot"
            case .createinstancesfromsnapshot: return "CreateInstancesFromSnapshot"
            case .createloadbalancer: return "CreateLoadBalancer"
            case .createloadbalancertlscertificate: return "CreateLoadBalancerTlsCertificate"
            case .createrelationaldatabase: return "CreateRelationalDatabase"
            case .createrelationaldatabasefromsnapshot: return "CreateRelationalDatabaseFromSnapshot"
            case .createrelationaldatabasesnapshot: return "CreateRelationalDatabaseSnapshot"
            case .deletealarm: return "DeleteAlarm"
            case .deletecertificate: return "DeleteCertificate"
            case .deletecontactmethod: return "DeleteContactMethod"
            case .deletecontainerimage: return "DeleteContainerImage"
            case .deletecontainerservice: return "DeleteContainerService"
            case .deletedisk: return "DeleteDisk"
            case .deletedisksnapshot: return "DeleteDiskSnapshot"
            case .deletedistribution: return "DeleteDistribution"
            case .deletedomain: return "DeleteDomain"
            case .deletedomainentry: return "DeleteDomainEntry"
            case .deleteinstance: return "DeleteInstance"
            case .deleteinstancesnapshot: return "DeleteInstanceSnapshot"
            case .deleteknownhostkeys: return "DeleteKnownHostKeys"
            case .deleteloadbalancer: return "DeleteLoadBalancer"
            case .deleteloadbalancertlscertificate: return "DeleteLoadBalancerTlsCertificate"
            case .deleterelationaldatabase: return "DeleteRelationalDatabase"
            case .deleterelationaldatabasesnapshot: return "DeleteRelationalDatabaseSnapshot"
            case .detachcertificatefromdistribution: return "DetachCertificateFromDistribution"
            case .detachdisk: return "DetachDisk"
            case .detachinstancesfromloadbalancer: return "DetachInstancesFromLoadBalancer"
            case .detachstaticip: return "DetachStaticIp"
            case .disableaddon: return "DisableAddOn"
            case .enableaddon: return "EnableAddOn"
            case .getalarms: return "GetAlarms"
            case .getcontactmethods: return "GetContactMethods"
            case .openinstancepublicports: return "OpenInstancePublicPorts"
            case .putalarm: return "PutAlarm"
            case .putinstancepublicports: return "PutInstancePublicPorts"
            case .rebootinstance: return "RebootInstance"
            case .rebootrelationaldatabase: return "RebootRelationalDatabase"
            case .registercontainerimage: return "RegisterContainerImage"
            case .releasestaticip: return "ReleaseStaticIp"
            case .resetdistributioncache: return "ResetDistributionCache"
            case .sendcontactmethodverification: return "SendContactMethodVerification"
            case .setipaddresstype: return "SetIpAddressType"
            case .startinstance: return "StartInstance"
            case .startrelationaldatabase: return "StartRelationalDatabase"
            case .stopinstance: return "StopInstance"
            case .stoprelationaldatabase: return "StopRelationalDatabase"
            case .testalarm: return "TestAlarm"
            case .updatecontainerservice: return "UpdateContainerService"
            case .updatedistribution: return "UpdateDistribution"
            case .updatedistributionbundle: return "UpdateDistributionBundle"
            case .updatedomainentry: return "UpdateDomainEntry"
            case .updateloadbalancerattribute: return "UpdateLoadBalancerAttribute"
            case .updaterelationaldatabase: return "UpdateRelationalDatabase"
            case .updaterelationaldatabaseparameters: return "UpdateRelationalDatabaseParameters"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperationType(rawValue: rawValue) ?? OperationType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.Origin: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case protocolPolicy
        case regionName
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let protocolPolicy = protocolPolicy {
            try encodeContainer.encode(protocolPolicy.rawValue, forKey: .protocolPolicy)
        }
        if let regionName = regionName {
            try encodeContainer.encode(regionName.rawValue, forKey: .regionName)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RegionName.self, forKey: .regionName)
        regionName = regionNameDecoded
        let protocolPolicyDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.OriginProtocolPolicyEnum.self, forKey: .protocolPolicy)
        protocolPolicy = protocolPolicyDecoded
    }
}

extension LightsailClientTypes.Origin: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Origin(name: \(Swift.String(describing: name)), protocolPolicy: \(Swift.String(describing: protocolPolicy)), regionName: \(Swift.String(describing: regionName)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the origin resource of an Amazon Lightsail content delivery network (CDN)
    ///       distribution.</p>
    ///          <p>An origin can be a Lightsail instance or load balancer. A distribution pulls content
    ///       from an origin, caches it, and serves it to viewers via a worldwide network of edge
    ///       servers.</p>
    public struct Origin: Swift.Equatable {
        /// <p>The name of the origin resource.</p>
        public let name: Swift.String?
        /// <p>The protocol that your Amazon Lightsail distribution uses when establishing a connection
        ///       with your origin to pull content.</p>
        public let protocolPolicy: LightsailClientTypes.OriginProtocolPolicyEnum?
        /// <p>The AWS Region name of the origin resource.</p>
        public let regionName: LightsailClientTypes.RegionName?
        /// <p>The resource type of the origin resource (e.g., <i>Instance</i>).</p>
        public let resourceType: LightsailClientTypes.ResourceType?

        public init (
            name: Swift.String? = nil,
            protocolPolicy: LightsailClientTypes.OriginProtocolPolicyEnum? = nil,
            regionName: LightsailClientTypes.RegionName? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil
        )
        {
            self.name = name
            self.protocolPolicy = protocolPolicy
            self.regionName = regionName
            self.resourceType = resourceType
        }
    }

}

extension LightsailClientTypes {
    public enum OriginProtocolPolicyEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case httponly
        case httpsonly
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginProtocolPolicyEnum] {
            return [
                .httponly,
                .httpsonly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .httponly: return "http-only"
            case .httpsonly: return "https-only"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OriginProtocolPolicyEnum(rawValue: rawValue) ?? OriginProtocolPolicyEnum.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.PasswordData: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ciphertext
        case keyPairName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ciphertext = ciphertext {
            try encodeContainer.encode(ciphertext, forKey: .ciphertext)
        }
        if let keyPairName = keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ciphertextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ciphertext)
        ciphertext = ciphertextDecoded
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
    }
}

extension LightsailClientTypes.PasswordData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PasswordData(ciphertext: \(Swift.String(describing: ciphertext)), keyPairName: \(Swift.String(describing: keyPairName)))"}
}

extension LightsailClientTypes {
    /// <p>The password data for the Windows Server-based instance, including the ciphertext and the
    ///       key pair name.</p>
    public struct PasswordData: Swift.Equatable {
        /// <p>The encrypted password. Ciphertext will be an empty string if access to your new instance
        ///       is not ready yet. When you create an instance, it can take up to 15 minutes for the instance
        ///       to be ready.</p>
        ///          <note>
        ///             <p>If you use the default key pair (<code>LightsailDefaultKeyPair</code>), the decrypted
        ///         password will be available in the password field.</p>
        ///             <p>If you are using a custom key pair, you need to use your own means of decryption.</p>
        ///             <p>If you change the Administrator password on the instance, Lightsail will continue to
        ///         return the original ciphertext value. When accessing the instance using RDP, you need to
        ///         manually enter the Administrator password after changing it from the default.</p>
        ///          </note>
        public let ciphertext: Swift.String?
        /// <p>The name of the key pair that you used when creating your instance. If no key pair name
        ///       was specified when creating the instance, Lightsail uses the default key pair
        ///         (<code>LightsailDefaultKeyPair</code>).</p>
        ///          <p>If you are using a custom key pair, you need to use your own means of decrypting your
        ///       password using the <code>ciphertext</code>. Lightsail creates the ciphertext by encrypting
        ///       your password with the public key part of this key pair.</p>
        public let keyPairName: Swift.String?

        public init (
            ciphertext: Swift.String? = nil,
            keyPairName: Swift.String? = nil
        )
        {
            self.ciphertext = ciphertext
            self.keyPairName = keyPairName
        }
    }

}

extension PeerVpcInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PeerVpcInput()"}
}

extension PeerVpcInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct PeerVpcInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PeerVpcInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PeerVpcInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PeerVpcOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PeerVpcInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PeerVpcOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PeerVpcOutputError>
}

public struct PeerVpcInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PeerVpcInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PeerVpcInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PeerVpcOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PeerVpcInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PeerVpcOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PeerVpcOutputError>
}

public struct PeerVpcInput: Swift.Equatable {

    public init() {}
}

struct PeerVpcInputBody: Swift.Equatable {
}

extension PeerVpcInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension PeerVpcOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PeerVpcOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PeerVpcOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PeerVpcOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PeerVpcOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension PeerVpcOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PeerVpcOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct PeerVpcOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct PeerVpcOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension PeerVpcOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension LightsailClientTypes.PendingMaintenanceAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case currentApplyDate
        case description
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let currentApplyDate = currentApplyDate {
            try encodeContainer.encode(currentApplyDate.timeIntervalSince1970, forKey: .currentApplyDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .action)
        action = actionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let currentApplyDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .currentApplyDate)
        currentApplyDate = currentApplyDateDecoded
    }
}

extension LightsailClientTypes.PendingMaintenanceAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PendingMaintenanceAction(action: \(Swift.String(describing: action)), currentApplyDate: \(Swift.String(describing: currentApplyDate)), description: \(Swift.String(describing: description)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a pending database maintenance action.</p>
    public struct PendingMaintenanceAction: Swift.Equatable {
        /// <p>The type of pending database maintenance action.</p>
        public let action: Swift.String?
        /// <p>The effective date of the pending database maintenance action.</p>
        public let currentApplyDate: ClientRuntime.Date?
        /// <p>Additional detail about the pending database maintenance action.</p>
        public let description: Swift.String?

        public init (
            action: Swift.String? = nil,
            currentApplyDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil
        )
        {
            self.action = action
            self.currentApplyDate = currentApplyDate
            self.description = description
        }
    }

}

extension LightsailClientTypes.PendingModifiedRelationalDatabaseValues: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupRetentionEnabled
        case engineVersion
        case masterUserPassword
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupRetentionEnabled = backupRetentionEnabled {
            try encodeContainer.encode(backupRetentionEnabled, forKey: .backupRetentionEnabled)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let masterUserPassword = masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let backupRetentionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .backupRetentionEnabled)
        backupRetentionEnabled = backupRetentionEnabledDecoded
    }
}

extension LightsailClientTypes.PendingModifiedRelationalDatabaseValues: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PendingModifiedRelationalDatabaseValues(backupRetentionEnabled: \(Swift.String(describing: backupRetentionEnabled)), engineVersion: \(Swift.String(describing: engineVersion)), masterUserPassword: \(Swift.String(describing: masterUserPassword)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a pending database value modification.</p>
    public struct PendingModifiedRelationalDatabaseValues: Swift.Equatable {
        /// <p>A Boolean value indicating whether automated backup retention is enabled.</p>
        public let backupRetentionEnabled: Swift.Bool?
        /// <p>The database engine version.</p>
        public let engineVersion: Swift.String?
        /// <p>The password for the master user of the database.</p>
        public let masterUserPassword: Swift.String?

        public init (
            backupRetentionEnabled: Swift.Bool? = nil,
            engineVersion: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil
        )
        {
            self.backupRetentionEnabled = backupRetentionEnabled
            self.engineVersion = engineVersion
            self.masterUserPassword = masterUserPassword
        }
    }

}

extension LightsailClientTypes {
    public enum PortAccessType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `private`
        case `public`
        case sdkUnknown(Swift.String)

        public static var allCases: [PortAccessType] {
            return [
                .private,
                .public,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .private: return "Private"
            case .public: return "Public"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PortAccessType(rawValue: rawValue) ?? PortAccessType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.PortInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrListAliases
        case cidrs
        case fromPort
        case ipv6Cidrs
        case `protocol` = "protocol"
        case toPort
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrListAliases = cidrListAliases {
            var cidrListAliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrListAliases)
            for stringlist0 in cidrListAliases {
                try cidrListAliasesContainer.encode(stringlist0)
            }
        }
        if let cidrs = cidrs {
            var cidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrs)
            for stringlist0 in cidrs {
                try cidrsContainer.encode(stringlist0)
            }
        }
        if fromPort != 0 {
            try encodeContainer.encode(fromPort, forKey: .fromPort)
        }
        if let ipv6Cidrs = ipv6Cidrs {
            var ipv6CidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6Cidrs)
            for stringlist0 in ipv6Cidrs {
                try ipv6CidrsContainer.encode(stringlist0)
            }
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if toPort != 0 {
            try encodeContainer.encode(toPort, forKey: .toPort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .fromPort)
        fromPort = fromPortDecoded
        let toPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .toPort)
        toPort = toPortDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.NetworkProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let cidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrs)
        var cidrsDecoded0:[Swift.String]? = nil
        if let cidrsContainer = cidrsContainer {
            cidrsDecoded0 = [Swift.String]()
            for string0 in cidrsContainer {
                if let string0 = string0 {
                    cidrsDecoded0?.append(string0)
                }
            }
        }
        cidrs = cidrsDecoded0
        let ipv6CidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipv6Cidrs)
        var ipv6CidrsDecoded0:[Swift.String]? = nil
        if let ipv6CidrsContainer = ipv6CidrsContainer {
            ipv6CidrsDecoded0 = [Swift.String]()
            for string0 in ipv6CidrsContainer {
                if let string0 = string0 {
                    ipv6CidrsDecoded0?.append(string0)
                }
            }
        }
        ipv6Cidrs = ipv6CidrsDecoded0
        let cidrListAliasesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrListAliases)
        var cidrListAliasesDecoded0:[Swift.String]? = nil
        if let cidrListAliasesContainer = cidrListAliasesContainer {
            cidrListAliasesDecoded0 = [Swift.String]()
            for string0 in cidrListAliasesContainer {
                if let string0 = string0 {
                    cidrListAliasesDecoded0?.append(string0)
                }
            }
        }
        cidrListAliases = cidrListAliasesDecoded0
    }
}

extension LightsailClientTypes.PortInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PortInfo(cidrListAliases: \(Swift.String(describing: cidrListAliases)), cidrs: \(Swift.String(describing: cidrs)), fromPort: \(Swift.String(describing: fromPort)), ipv6Cidrs: \(Swift.String(describing: ipv6Cidrs)), protocol: \(Swift.String(describing: `protocol`)), toPort: \(Swift.String(describing: toPort)))"}
}

extension LightsailClientTypes {
    /// <p>Describes ports to open on an instance, the IP addresses allowed to connect to the
    ///       instance through the ports, and the protocol.</p>
    public struct PortInfo: Swift.Equatable {
        /// <p>The IP protocol name.</p>
        ///          <p>The name can be one of the following:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>tcp</code> - Transmission Control Protocol (TCP) provides reliable, ordered, and
        ///           error-checked delivery of streamed data between applications running on hosts
        ///           communicating by an IP network. If you have an application that doesn't require reliable
        ///           data stream service, use UDP instead.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>all</code> - All transport layer protocol types. For more general information,
        ///           see <a href="https://en.wikipedia.org/wiki/Transport_layer">Transport layer</a> on
        ///             <i>Wikipedia</i>.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>udp</code> - With User Datagram Protocol (UDP), computer applications can send
        ///           messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior
        ///           communications are not required to set up transmission channels or data paths.
        ///           Applications that don't require reliable data stream service can use UDP, which provides a
        ///           connectionless datagram service that emphasizes reduced latency over reliability. If you
        ///           do require reliable data stream service, use TCP instead.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>icmp</code> - Internet Control Message Protocol (ICMP) is used to send error
        ///           messages and operational information indicating success or failure when communicating with
        ///           an instance. For example, an error is indicated when an instance could not be reached.
        ///           When you specify <code>icmp</code> as the <code>protocol</code>, you must specify the ICMP
        ///           type using the <code>fromPort</code> parameter, and ICMP code using the
        ///             <code>toPort</code> parameter.</p>
        ///             </li>
        ///          </ul>
        public let `protocol`: LightsailClientTypes.NetworkProtocol?
        /// <p>An alias that defines access for a preconfigured range of IP addresses.</p>
        ///          <p>The only alias currently supported is <code>lightsail-connect</code>, which allows IP
        ///       addresses of the browser-based RDP/SSH client in the Lightsail console to connect to your
        ///       instance.</p>
        public let cidrListAliases: [Swift.String]?
        /// <p>The IPv4 address, or range of IPv4 addresses (in CIDR notation) that are allowed to
        ///       connect to an instance through the ports, and the protocol.</p>
        ///          <note>
        ///             <p>The <code>ipv6Cidrs</code> parameter lists the IPv6 addresses that are allowed to
        ///         connect to an instance.</p>
        ///          </note>
        ///          <p>Examples:</p>
        ///          <ul>
        ///             <li>
        ///                <p>To allow the IP address <code>192.0.2.44</code>, specify <code>192.0.2.44</code> or
        ///             <code>192.0.2.44/32</code>. </p>
        ///             </li>
        ///             <li>
        ///                <p>To allow the IP addresses <code>192.0.2.0</code> to <code>192.0.2.255</code>, specify
        ///             <code>192.0.2.0/24</code>.</p>
        ///             </li>
        ///          </ul>
        ///          <p>For more information about CIDR block notation, see <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation">Classless
        ///         Inter-Domain Routing</a> on <i>Wikipedia</i>.</p>
        public let cidrs: [Swift.String]?
        /// <p>The first port in a range of open ports on an instance.</p>
        ///          <p>Allowed ports:</p>
        ///          <ul>
        ///             <li>
        ///                <p>TCP and UDP - <code>0</code> to <code>65535</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>ICMP - The ICMP type for IPv4 addresses. For example, specify <code>8</code> as the
        ///             <code>fromPort</code> (ICMP type), and <code>-1</code> as the <code>toPort</code> (ICMP
        ///           code), to enable ICMP Ping. For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages">Control Messages</a> on <i>Wikipedia</i>.</p>
        ///             </li>
        ///             <li>
        ///                <p>ICMPv6 - The ICMP type for IPv6 addresses. For example, specify <code>128</code> as
        ///           the <code>fromPort</code> (ICMPv6 type), and <code>0</code> as <code>toPort</code> (ICMPv6
        ///           code). For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6">Internet
        ///             Control Message Protocol for IPv6</a>.</p>
        ///             </li>
        ///          </ul>
        public let fromPort: Swift.Int
        /// <p>The IPv6 address, or range of IPv6 addresses (in CIDR notation) that are allowed to
        ///       connect to an instance through the ports, and the protocol. Only devices with an IPv6 address
        ///       can connect to an instance through IPv6; otherwise, IPv4 should be used.</p>
        ///          <note>
        ///             <p>The <code>cidrs</code> parameter lists the IPv4 addresses that are allowed to connect to
        ///         an instance.</p>
        ///          </note>
        ///          <p>For more information about CIDR block notation, see <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation">Classless
        ///         Inter-Domain Routing</a> on <i>Wikipedia</i>.</p>
        public let ipv6Cidrs: [Swift.String]?
        /// <p>The last port in a range of open ports on an instance.</p>
        ///          <p>Allowed ports:</p>
        ///          <ul>
        ///             <li>
        ///                <p>TCP and UDP - <code>0</code> to <code>65535</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>ICMP - The ICMP code for IPv4 addresses. For example, specify <code>8</code> as the
        ///             <code>fromPort</code> (ICMP type), and <code>-1</code> as the <code>toPort</code> (ICMP
        ///           code), to enable ICMP Ping. For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages">Control Messages</a> on <i>Wikipedia</i>.</p>
        ///             </li>
        ///             <li>
        ///                <p>ICMPv6 - The ICMP code for IPv6 addresses. For example, specify <code>128</code> as
        ///           the <code>fromPort</code> (ICMPv6 type), and <code>0</code> as <code>toPort</code> (ICMPv6
        ///           code). For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6">Internet
        ///             Control Message Protocol for IPv6</a>.</p>
        ///             </li>
        ///          </ul>
        public let toPort: Swift.Int

        public init (
            `protocol`: LightsailClientTypes.NetworkProtocol? = nil,
            cidrListAliases: [Swift.String]? = nil,
            cidrs: [Swift.String]? = nil,
            fromPort: Swift.Int = 0,
            ipv6Cidrs: [Swift.String]? = nil,
            toPort: Swift.Int = 0
        )
        {
            self.`protocol` = `protocol`
            self.cidrListAliases = cidrListAliases
            self.cidrs = cidrs
            self.fromPort = fromPort
            self.ipv6Cidrs = ipv6Cidrs
            self.toPort = toPort
        }
    }

}

extension LightsailClientTypes {
    public enum PortInfoSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case closed
        case `default`
        case instance
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [PortInfoSourceType] {
            return [
                .closed,
                .default,
                .instance,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .closed: return "CLOSED"
            case .default: return "DEFAULT"
            case .instance: return "INSTANCE"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PortInfoSourceType(rawValue: rawValue) ?? PortInfoSourceType.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes {
    public enum PortState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case closed
        case `open`
        case sdkUnknown(Swift.String)

        public static var allCases: [PortState] {
            return [
                .closed,
                .open,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .closed: return "closed"
            case .open: return "open"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PortState(rawValue: rawValue) ?? PortState.sdkUnknown(rawValue)
        }
    }
}

public struct PutAlarmInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAlarmInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAlarmOutputError>
}

extension PutAlarmInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAlarmInput(alarmName: \(Swift.String(describing: alarmName)), comparisonOperator: \(Swift.String(describing: comparisonOperator)), contactProtocols: \(Swift.String(describing: contactProtocols)), datapointsToAlarm: \(Swift.String(describing: datapointsToAlarm)), evaluationPeriods: \(Swift.String(describing: evaluationPeriods)), metricName: \(Swift.String(describing: metricName)), monitoredResourceName: \(Swift.String(describing: monitoredResourceName)), notificationEnabled: \(Swift.String(describing: notificationEnabled)), notificationTriggers: \(Swift.String(describing: notificationTriggers)), threshold: \(Swift.String(describing: threshold)), treatMissingData: \(Swift.String(describing: treatMissingData)))"}
}

extension PutAlarmInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
        case comparisonOperator
        case contactProtocols
        case datapointsToAlarm
        case evaluationPeriods
        case metricName
        case monitoredResourceName
        case notificationEnabled
        case notificationTriggers
        case threshold
        case treatMissingData
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmName = alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let contactProtocols = contactProtocols {
            var contactProtocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contactProtocols)
            for contactprotocolslist0 in contactProtocols {
                try contactProtocolsContainer.encode(contactprotocolslist0.rawValue)
            }
        }
        if let datapointsToAlarm = datapointsToAlarm {
            try encodeContainer.encode(datapointsToAlarm, forKey: .datapointsToAlarm)
        }
        if let evaluationPeriods = evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let monitoredResourceName = monitoredResourceName {
            try encodeContainer.encode(monitoredResourceName, forKey: .monitoredResourceName)
        }
        if let notificationEnabled = notificationEnabled {
            try encodeContainer.encode(notificationEnabled, forKey: .notificationEnabled)
        }
        if let notificationTriggers = notificationTriggers {
            var notificationTriggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notificationTriggers)
            for notificationtriggerlist0 in notificationTriggers {
                try notificationTriggersContainer.encode(notificationtriggerlist0.rawValue)
            }
        }
        if let threshold = threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let treatMissingData = treatMissingData {
            try encodeContainer.encode(treatMissingData.rawValue, forKey: .treatMissingData)
        }
    }
}

public struct PutAlarmInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAlarmInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAlarmOutputError>
}

public struct PutAlarmInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAlarmInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAlarmOutputError>
}

public struct PutAlarmInput: Swift.Equatable {
    /// <p>The name for the alarm. Specify the name of an existing alarm to update, and overwrite the
    ///       previous configuration of the alarm.</p>
    public let alarmName: Swift.String?
    /// <p>The arithmetic operation to use when comparing the specified statistic to the threshold.
    ///       The specified statistic value is used as the first operand.</p>
    public let comparisonOperator: LightsailClientTypes.ComparisonOperator?
    /// <p>The contact protocols to use for the alarm, such as <code>Email</code>, <code>SMS</code>
    ///       (text messaging), or both.</p>
    ///          <p>A notification is sent via the specified contact protocol if notifications are enabled for
    ///       the alarm, and when the alarm is triggered.</p>
    ///          <p>A notification is not sent if a contact protocol is not specified, if the specified
    ///       contact protocol is not configured in the AWS Region, or if notifications are not enabled
    ///       for the alarm using the <code>notificationEnabled</code> paramater.</p>
    ///          <p>Use the <code>CreateContactMethod</code> action to configure a contact protocol in an
    ///       AWS Region.</p>
    public let contactProtocols: [LightsailClientTypes.ContactProtocol]?
    /// <p>The number of data points that must be not within the specified threshold to trigger the
    ///       alarm. If you are setting an "M out of N" alarm, this value (<code>datapointsToAlarm</code>)
    ///       is the M.</p>
    public let datapointsToAlarm: Swift.Int?
    /// <p>The number of most recent periods over which data is compared to the specified threshold.
    ///       If you are setting an "M out of N" alarm, this value (<code>evaluationPeriods</code>) is the
    ///       N.</p>
    ///          <p>If you are setting an alarm that requires that a number of consecutive data points be
    ///       breaching to trigger the alarm, this value specifies the rolling period of time in which data
    ///       points are evaluated.</p>
    ///          <p>Each evaluation period is five minutes long. For example, specify an evaluation period of
    ///       24 to evaluate a metric over a rolling period of two hours.</p>
    ///          <p>You can specify a minimum valuation period of 1 (5 minutes), and a maximum evaluation
    ///       period of 288 (24 hours).</p>
    public let evaluationPeriods: Swift.Int?
    /// <p>The name of the metric to associate with the alarm.</p>
    ///          <p>You can configure up to two alarms per metric.</p>
    ///          <p>The following metrics are available for each resource type:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Instances</b>: <code>BurstCapacityPercentage</code>,
    ///             <code>BurstCapacityTime</code>, <code>CPUUtilization</code>, <code>NetworkIn</code>,
    ///             <code>NetworkOut</code>, <code>StatusCheckFailed</code>,
    ///             <code>StatusCheckFailed_Instance</code>, and
    ///           <code>StatusCheckFailed_System</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Load balancers</b>:
    ///             <code>ClientTLSNegotiationErrorCount</code>, <code>HealthyHostCount</code>,
    ///             <code>UnhealthyHostCount</code>, <code>HTTPCode_LB_4XX_Count</code>,
    ///             <code>HTTPCode_LB_5XX_Count</code>, <code>HTTPCode_Instance_2XX_Count</code>,
    ///             <code>HTTPCode_Instance_3XX_Count</code>, <code>HTTPCode_Instance_4XX_Count</code>,
    ///             <code>HTTPCode_Instance_5XX_Count</code>, <code>InstanceResponseTime</code>,
    ///             <code>RejectedConnectionCount</code>, and <code>RequestCount</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Relational databases</b>: <code>CPUUtilization</code>,
    ///             <code>DatabaseConnections</code>, <code>DiskQueueDepth</code>,
    ///             <code>FreeStorageSpace</code>, <code>NetworkReceiveThroughput</code>, and
    ///             <code>NetworkTransmitThroughput</code>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information about these metrics, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-resource-health-metrics#available-metrics">Metrics available in Lightsail</a>.</p>
    public let metricName: LightsailClientTypes.MetricName?
    /// <p>The name of the Lightsail resource that will be monitored.</p>
    ///          <p>Instances, load balancers, and relational databases are the only Lightsail resources
    ///       that can currently be monitored by alarms.</p>
    public let monitoredResourceName: Swift.String?
    /// <p>Indicates whether the alarm is enabled.</p>
    ///          <p>Notifications are enabled by default if you don't specify this parameter.</p>
    public let notificationEnabled: Swift.Bool?
    /// <p>The alarm states that trigger a notification.</p>
    ///          <p>An alarm has the following possible states:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ALARM</code> - The metric is outside of the defined threshold.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INSUFFICIENT_DATA</code> - The alarm has just started, the metric is not
    ///           available, or not enough data is available for the metric to determine the alarm
    ///           state.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>OK</code> - The metric is within the defined threshold.</p>
    ///             </li>
    ///          </ul>
    ///          <p>When you specify a notification trigger, the <code>ALARM</code> state must be specified.
    ///       The <code>INSUFFICIENT_DATA</code> and <code>OK</code> states can be specified in addition to
    ///       the <code>ALARM</code> state.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you specify <code>OK</code> as an alarm trigger, a notification is sent when the
    ///           alarm switches from an <code>ALARM</code> or <code>INSUFFICIENT_DATA</code> alarm state to
    ///           an <code>OK</code> state. This can be thought of as an <i>all clear</i>
    ///           alarm notification.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you specify <code>INSUFFICIENT_DATA</code> as the alarm trigger, a notification is
    ///           sent when the alarm switches from an <code>OK</code> or <code>ALARM</code> alarm state to
    ///           an <code>INSUFFICIENT_DATA</code> state.</p>
    ///             </li>
    ///          </ul>
    ///          <p>The notification trigger defaults to <code>ALARM</code> if you don't specify this
    ///       parameter.</p>
    public let notificationTriggers: [LightsailClientTypes.AlarmState]?
    /// <p>The value against which the specified statistic is compared.</p>
    public let threshold: Swift.Double?
    /// <p>Sets how this alarm will handle missing data points.</p>
    ///          <p>An alarm can treat missing data in the following ways:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>breaching</code> - Assume the missing data is not within the threshold. Missing
    ///           data counts towards the number of times the metric is not within the threshold.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>notBreaching</code> - Assume the missing data is within the threshold. Missing
    ///           data does not count towards the number of times the metric is not within the
    ///           threshold.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ignore</code> - Ignore the missing data. Maintains the current alarm
    ///           state.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>missing</code> - Missing data is treated as missing.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If <code>treatMissingData</code> is not specified, the default behavior of
    ///         <code>missing</code> is used.</p>
    public let treatMissingData: LightsailClientTypes.TreatMissingData?

    public init (
        alarmName: Swift.String? = nil,
        comparisonOperator: LightsailClientTypes.ComparisonOperator? = nil,
        contactProtocols: [LightsailClientTypes.ContactProtocol]? = nil,
        datapointsToAlarm: Swift.Int? = nil,
        evaluationPeriods: Swift.Int? = nil,
        metricName: LightsailClientTypes.MetricName? = nil,
        monitoredResourceName: Swift.String? = nil,
        notificationEnabled: Swift.Bool? = nil,
        notificationTriggers: [LightsailClientTypes.AlarmState]? = nil,
        threshold: Swift.Double? = nil,
        treatMissingData: LightsailClientTypes.TreatMissingData? = nil
    )
    {
        self.alarmName = alarmName
        self.comparisonOperator = comparisonOperator
        self.contactProtocols = contactProtocols
        self.datapointsToAlarm = datapointsToAlarm
        self.evaluationPeriods = evaluationPeriods
        self.metricName = metricName
        self.monitoredResourceName = monitoredResourceName
        self.notificationEnabled = notificationEnabled
        self.notificationTriggers = notificationTriggers
        self.threshold = threshold
        self.treatMissingData = treatMissingData
    }
}

struct PutAlarmInputBody: Swift.Equatable {
    public let alarmName: Swift.String?
    public let metricName: LightsailClientTypes.MetricName?
    public let monitoredResourceName: Swift.String?
    public let comparisonOperator: LightsailClientTypes.ComparisonOperator?
    public let threshold: Swift.Double?
    public let evaluationPeriods: Swift.Int?
    public let datapointsToAlarm: Swift.Int?
    public let treatMissingData: LightsailClientTypes.TreatMissingData?
    public let contactProtocols: [LightsailClientTypes.ContactProtocol]?
    public let notificationTriggers: [LightsailClientTypes.AlarmState]?
    public let notificationEnabled: Swift.Bool?
}

extension PutAlarmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
        case comparisonOperator
        case contactProtocols
        case datapointsToAlarm
        case evaluationPeriods
        case metricName
        case monitoredResourceName
        case notificationEnabled
        case notificationTriggers
        case threshold
        case treatMissingData
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let monitoredResourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoredResourceName)
        monitoredResourceName = monitoredResourceNameDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let datapointsToAlarmDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .datapointsToAlarm)
        datapointsToAlarm = datapointsToAlarmDecoded
        let treatMissingDataDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.TreatMissingData.self, forKey: .treatMissingData)
        treatMissingData = treatMissingDataDecoded
        let contactProtocolsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ContactProtocol?].self, forKey: .contactProtocols)
        var contactProtocolsDecoded0:[LightsailClientTypes.ContactProtocol]? = nil
        if let contactProtocolsContainer = contactProtocolsContainer {
            contactProtocolsDecoded0 = [LightsailClientTypes.ContactProtocol]()
            for string0 in contactProtocolsContainer {
                if let string0 = string0 {
                    contactProtocolsDecoded0?.append(string0)
                }
            }
        }
        contactProtocols = contactProtocolsDecoded0
        let notificationTriggersContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AlarmState?].self, forKey: .notificationTriggers)
        var notificationTriggersDecoded0:[LightsailClientTypes.AlarmState]? = nil
        if let notificationTriggersContainer = notificationTriggersContainer {
            notificationTriggersDecoded0 = [LightsailClientTypes.AlarmState]()
            for string0 in notificationTriggersContainer {
                if let string0 = string0 {
                    notificationTriggersDecoded0?.append(string0)
                }
            }
        }
        notificationTriggers = notificationTriggersDecoded0
        let notificationEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .notificationEnabled)
        notificationEnabled = notificationEnabledDecoded
    }
}

extension PutAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutAlarmOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAlarmOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAlarmOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension PutAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutAlarmOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct PutAlarmOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct PutAlarmOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension PutAlarmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct PutInstancePublicPortsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutInstancePublicPortsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutInstancePublicPortsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutInstancePublicPortsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutInstancePublicPortsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutInstancePublicPortsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutInstancePublicPortsOutputError>
}

extension PutInstancePublicPortsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutInstancePublicPortsInput(instanceName: \(Swift.String(describing: instanceName)), portInfos: \(Swift.String(describing: portInfos)))"}
}

extension PutInstancePublicPortsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case portInfos
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let portInfos = portInfos {
            var portInfosContainer = encodeContainer.nestedUnkeyedContainer(forKey: .portInfos)
            for portinfolist0 in portInfos {
                try portInfosContainer.encode(portinfolist0)
            }
        }
    }
}

public struct PutInstancePublicPortsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutInstancePublicPortsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutInstancePublicPortsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutInstancePublicPortsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutInstancePublicPortsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutInstancePublicPortsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutInstancePublicPortsOutputError>
}

public struct PutInstancePublicPortsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutInstancePublicPortsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutInstancePublicPortsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutInstancePublicPortsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutInstancePublicPortsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutInstancePublicPortsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutInstancePublicPortsOutputError>
}

public struct PutInstancePublicPortsInput: Swift.Equatable {
    /// <p>The name of the instance for which to open ports.</p>
    public let instanceName: Swift.String?
    /// <p>An array of objects to describe the ports to open for the specified instance.</p>
    public let portInfos: [LightsailClientTypes.PortInfo]?

    public init (
        instanceName: Swift.String? = nil,
        portInfos: [LightsailClientTypes.PortInfo]? = nil
    )
    {
        self.instanceName = instanceName
        self.portInfos = portInfos
    }
}

struct PutInstancePublicPortsInputBody: Swift.Equatable {
    public let portInfos: [LightsailClientTypes.PortInfo]?
    public let instanceName: Swift.String?
}

extension PutInstancePublicPortsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
        case portInfos
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portInfosContainer = try containerValues.decodeIfPresent([LightsailClientTypes.PortInfo?].self, forKey: .portInfos)
        var portInfosDecoded0:[LightsailClientTypes.PortInfo]? = nil
        if let portInfosContainer = portInfosContainer {
            portInfosDecoded0 = [LightsailClientTypes.PortInfo]()
            for structure0 in portInfosContainer {
                if let structure0 = structure0 {
                    portInfosDecoded0?.append(structure0)
                }
            }
        }
        portInfos = portInfosDecoded0
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension PutInstancePublicPortsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutInstancePublicPortsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutInstancePublicPortsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutInstancePublicPortsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutInstancePublicPortsOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension PutInstancePublicPortsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutInstancePublicPortsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct PutInstancePublicPortsOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct PutInstancePublicPortsOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension PutInstancePublicPortsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension LightsailClientTypes.QueryStringObject: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case option
        case queryStringsAllowList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let option = option {
            try encodeContainer.encode(option, forKey: .option)
        }
        if let queryStringsAllowList = queryStringsAllowList {
            var queryStringsAllowListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queryStringsAllowList)
            for stringlist0 in queryStringsAllowList {
                try queryStringsAllowListContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .option)
        option = optionDecoded
        let queryStringsAllowListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .queryStringsAllowList)
        var queryStringsAllowListDecoded0:[Swift.String]? = nil
        if let queryStringsAllowListContainer = queryStringsAllowListContainer {
            queryStringsAllowListDecoded0 = [Swift.String]()
            for string0 in queryStringsAllowListContainer {
                if let string0 = string0 {
                    queryStringsAllowListDecoded0?.append(string0)
                }
            }
        }
        queryStringsAllowList = queryStringsAllowListDecoded0
    }
}

extension LightsailClientTypes.QueryStringObject: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QueryStringObject(option: \(Swift.String(describing: option)), queryStringsAllowList: \(Swift.String(describing: queryStringsAllowList)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the query string parameters that an Amazon Lightsail content delivery network
    ///       (CDN) distribution to bases caching on.</p>
    ///          <p>For the query strings that you specify, your distribution caches separate versions of the
    ///       specified content based on the query string values in viewer
    ///       requests.</p>
    public struct QueryStringObject: Swift.Equatable {
        /// <p>Indicates whether the distribution forwards and caches based on query strings.</p>
        public let option: Swift.Bool?
        /// <p>The specific query strings that the distribution forwards to the origin.</p>
        ///          <p>Your distribution will cache content based on the specified query strings.</p>
        ///          <p>If the <code>option</code> parameter is true, then your distribution forwards all query
        ///       strings, regardless of what you specify using the <code>queryStringsAllowList</code>
        ///       parameter.</p>
        public let queryStringsAllowList: [Swift.String]?

        public init (
            option: Swift.Bool? = nil,
            queryStringsAllowList: [Swift.String]? = nil
        )
        {
            self.option = option
            self.queryStringsAllowList = queryStringsAllowList
        }
    }

}

public struct RebootInstanceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RebootInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RebootInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RebootInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RebootInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RebootInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RebootInstanceOutputError>
}

extension RebootInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RebootInstanceInput(instanceName: \(Swift.String(describing: instanceName)))"}
}

extension RebootInstanceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

public struct RebootInstanceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RebootInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RebootInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RebootInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RebootInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RebootInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RebootInstanceOutputError>
}

public struct RebootInstanceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RebootInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RebootInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RebootInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RebootInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RebootInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RebootInstanceOutputError>
}

public struct RebootInstanceInput: Swift.Equatable {
    /// <p>The name of the instance to reboot.</p>
    public let instanceName: Swift.String?

    public init (
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct RebootInstanceInputBody: Swift.Equatable {
    public let instanceName: Swift.String?
}

extension RebootInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension RebootInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RebootInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RebootInstanceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RebootInstanceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RebootInstanceOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension RebootInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RebootInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct RebootInstanceOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct RebootInstanceOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension RebootInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct RebootRelationalDatabaseInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RebootRelationalDatabaseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RebootRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RebootRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RebootRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RebootRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RebootRelationalDatabaseOutputError>
}

extension RebootRelationalDatabaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RebootRelationalDatabaseInput(relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)))"}
}

extension RebootRelationalDatabaseInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

public struct RebootRelationalDatabaseInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RebootRelationalDatabaseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RebootRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RebootRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RebootRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RebootRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RebootRelationalDatabaseOutputError>
}

public struct RebootRelationalDatabaseInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RebootRelationalDatabaseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RebootRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RebootRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RebootRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RebootRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RebootRelationalDatabaseOutputError>
}

public struct RebootRelationalDatabaseInput: Swift.Equatable {
    /// <p>The name of your database to reboot.</p>
    public let relationalDatabaseName: Swift.String?

    public init (
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct RebootRelationalDatabaseInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
}

extension RebootRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
    }
}

extension RebootRelationalDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RebootRelationalDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RebootRelationalDatabaseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RebootRelationalDatabaseOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RebootRelationalDatabaseOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension RebootRelationalDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RebootRelationalDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct RebootRelationalDatabaseOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct RebootRelationalDatabaseOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension RebootRelationalDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes {
    public enum RecordState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case started
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [RecordState] {
            return [
                .failed,
                .started,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .started: return "Started"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecordState(rawValue: rawValue) ?? RecordState.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.Region: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones
        case continentCode
        case description
        case displayName
        case name
        case relationalDatabaseAvailabilityZones
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for availabilityzonelist0 in availabilityZones {
                try availabilityZonesContainer.encode(availabilityzonelist0)
            }
        }
        if let continentCode = continentCode {
            try encodeContainer.encode(continentCode, forKey: .continentCode)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let relationalDatabaseAvailabilityZones = relationalDatabaseAvailabilityZones {
            var relationalDatabaseAvailabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relationalDatabaseAvailabilityZones)
            for availabilityzonelist0 in relationalDatabaseAvailabilityZones {
                try relationalDatabaseAvailabilityZonesContainer.encode(availabilityzonelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let continentCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continentCode)
        continentCode = continentCodeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RegionName.self, forKey: .name)
        name = nameDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AvailabilityZone?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[LightsailClientTypes.AvailabilityZone]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [LightsailClientTypes.AvailabilityZone]()
            for structure0 in availabilityZonesContainer {
                if let structure0 = structure0 {
                    availabilityZonesDecoded0?.append(structure0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let relationalDatabaseAvailabilityZonesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AvailabilityZone?].self, forKey: .relationalDatabaseAvailabilityZones)
        var relationalDatabaseAvailabilityZonesDecoded0:[LightsailClientTypes.AvailabilityZone]? = nil
        if let relationalDatabaseAvailabilityZonesContainer = relationalDatabaseAvailabilityZonesContainer {
            relationalDatabaseAvailabilityZonesDecoded0 = [LightsailClientTypes.AvailabilityZone]()
            for structure0 in relationalDatabaseAvailabilityZonesContainer {
                if let structure0 = structure0 {
                    relationalDatabaseAvailabilityZonesDecoded0?.append(structure0)
                }
            }
        }
        relationalDatabaseAvailabilityZones = relationalDatabaseAvailabilityZonesDecoded0
    }
}

extension LightsailClientTypes.Region: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Region(availabilityZones: \(Swift.String(describing: availabilityZones)), continentCode: \(Swift.String(describing: continentCode)), description: \(Swift.String(describing: description)), displayName: \(Swift.String(describing: displayName)), name: \(Swift.String(describing: name)), relationalDatabaseAvailabilityZones: \(Swift.String(describing: relationalDatabaseAvailabilityZones)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the AWS Region.</p>
    public struct Region: Swift.Equatable {
        /// <p>The Availability Zones. Follows the format <code>us-east-2a</code>
        ///       (case-sensitive).</p>
        public let availabilityZones: [LightsailClientTypes.AvailabilityZone]?
        /// <p>The continent code (e.g., <code>NA</code>, meaning North America).</p>
        public let continentCode: Swift.String?
        /// <p>The description of the AWS Region (e.g., <code>This region is recommended to serve users
        ///         in the eastern United States and eastern Canada</code>).</p>
        public let description: Swift.String?
        /// <p>The display name (e.g., <code>Ohio</code>).</p>
        public let displayName: Swift.String?
        /// <p>The region name (e.g., <code>us-east-2</code>).</p>
        public let name: LightsailClientTypes.RegionName?
        /// <p>The Availability Zones for databases. Follows the format <code>us-east-2a</code>
        ///       (case-sensitive).</p>
        public let relationalDatabaseAvailabilityZones: [LightsailClientTypes.AvailabilityZone]?

        public init (
            availabilityZones: [LightsailClientTypes.AvailabilityZone]? = nil,
            continentCode: Swift.String? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            name: LightsailClientTypes.RegionName? = nil,
            relationalDatabaseAvailabilityZones: [LightsailClientTypes.AvailabilityZone]? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.continentCode = continentCode
            self.description = description
            self.displayName = displayName
            self.name = name
            self.relationalDatabaseAvailabilityZones = relationalDatabaseAvailabilityZones
        }
    }

}

extension LightsailClientTypes {
    public enum RegionName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case apNortheast1
        case apNortheast2
        case apSoutheast1
        case apSoutheast2
        case apSouth1
        case caCentral1
        case euCentral1
        case euWest1
        case euWest2
        case euWest3
        case usEast1
        case usEast2
        case usWest1
        case usWest2
        case sdkUnknown(Swift.String)

        public static var allCases: [RegionName] {
            return [
                .apNortheast1,
                .apNortheast2,
                .apSoutheast1,
                .apSoutheast2,
                .apSouth1,
                .caCentral1,
                .euCentral1,
                .euWest1,
                .euWest2,
                .euWest3,
                .usEast1,
                .usEast2,
                .usWest1,
                .usWest2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .apNortheast1: return "ap-northeast-1"
            case .apNortheast2: return "ap-northeast-2"
            case .apSoutheast1: return "ap-southeast-1"
            case .apSoutheast2: return "ap-southeast-2"
            case .apSouth1: return "ap-south-1"
            case .caCentral1: return "ca-central-1"
            case .euCentral1: return "eu-central-1"
            case .euWest1: return "eu-west-1"
            case .euWest2: return "eu-west-2"
            case .euWest3: return "eu-west-3"
            case .usEast1: return "us-east-1"
            case .usEast2: return "us-east-2"
            case .usWest1: return "us-west-1"
            case .usWest2: return "us-west-2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegionName(rawValue: rawValue) ?? RegionName.sdkUnknown(rawValue)
        }
    }
}

public struct RegisterContainerImageInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterContainerImageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterContainerImageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterContainerImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterContainerImageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterContainerImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterContainerImageOutputError>
}

extension RegisterContainerImageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterContainerImageInput(digest: \(Swift.String(describing: digest)), label: \(Swift.String(describing: label)), serviceName: \(Swift.String(describing: serviceName)))"}
}

extension RegisterContainerImageInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case digest
        case label
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let digest = digest {
            try encodeContainer.encode(digest, forKey: .digest)
        }
        if let label = label {
            try encodeContainer.encode(label, forKey: .label)
        }
    }
}

public struct RegisterContainerImageInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterContainerImageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterContainerImageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterContainerImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterContainerImageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterContainerImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterContainerImageOutputError>
}

public struct RegisterContainerImageInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterContainerImageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterContainerImageInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterContainerImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterContainerImageInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterContainerImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterContainerImageOutputError>
}

public struct RegisterContainerImageInput: Swift.Equatable {
    /// <p>The digest of the container image to be registered.</p>
    public let digest: Swift.String?
    /// <p>The label for the container image when it's registered to the container service.</p>
    ///
    ///          <p>Use a descriptive label that you can use to track the different versions of your
    ///       registered container images.</p>
    ///
    ///          <p>Use the <code>GetContainerImages</code> action to return the container images registered
    ///       to a Lightsail container service. The label is the <code><imagelabel></code> portion
    ///       of the following image name example:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>:container-service-1.<imagelabel>.1</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>If the name of your container service is <code>mycontainerservice</code>, and the label
    ///       that you specify is <code>mystaticwebsite</code>, then the name of the registered container
    ///       image will be <code>:mycontainerservice.mystaticwebsite.1</code>.</p>
    ///
    ///          <p>The number at the end of these image name examples represents the version of the
    ///       registered container image. If you push and register another container image to the same
    ///       Lightsail container service, with the same label, then the version number for the new
    ///       registered container image will be <code>2</code>. If you push and register another container
    ///       image, the version number will be <code>3</code>, and so on.</p>
    public let label: Swift.String?
    /// <p>The name of the container service for which to register a container image.</p>
    public let serviceName: Swift.String?

    public init (
        digest: Swift.String? = nil,
        label: Swift.String? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.digest = digest
        self.label = label
        self.serviceName = serviceName
    }
}

struct RegisterContainerImageInputBody: Swift.Equatable {
    public let label: Swift.String?
    public let digest: Swift.String?
}

extension RegisterContainerImageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case digest
        case label
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        let digestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .digest)
        digest = digestDecoded
    }
}

extension RegisterContainerImageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterContainerImageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterContainerImageOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterContainerImageOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterContainerImageOutputResponse(containerImage: \(Swift.String(describing: containerImage)))"}
}

extension RegisterContainerImageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RegisterContainerImageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.containerImage = output.containerImage
        } else {
            self.containerImage = nil
        }
    }
}

public struct RegisterContainerImageOutputResponse: Swift.Equatable {
    /// <p>Describes a container image that is registered to an Amazon Lightsail container
    ///       service.</p>
    public let containerImage: LightsailClientTypes.ContainerImage?

    public init (
        containerImage: LightsailClientTypes.ContainerImage? = nil
    )
    {
        self.containerImage = containerImage
    }
}

struct RegisterContainerImageOutputResponseBody: Swift.Equatable {
    public let containerImage: LightsailClientTypes.ContainerImage?
}

extension RegisterContainerImageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerImage
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerImageDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerImage.self, forKey: .containerImage)
        containerImage = containerImageDecoded
    }
}

extension LightsailClientTypes.RelationalDatabase: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case backupRetentionEnabled
        case caCertificateIdentifier
        case createdAt
        case engine
        case engineVersion
        case hardware
        case latestRestorableTime
        case location
        case masterDatabaseName
        case masterEndpoint
        case masterUsername
        case name
        case parameterApplyStatus
        case pendingMaintenanceActions
        case pendingModifiedValues
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseBlueprintId
        case relationalDatabaseBundleId
        case resourceType
        case secondaryAvailabilityZone
        case state
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let backupRetentionEnabled = backupRetentionEnabled {
            try encodeContainer.encode(backupRetentionEnabled, forKey: .backupRetentionEnabled)
        }
        if let caCertificateIdentifier = caCertificateIdentifier {
            try encodeContainer.encode(caCertificateIdentifier, forKey: .caCertificateIdentifier)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let engine = engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let hardware = hardware {
            try encodeContainer.encode(hardware, forKey: .hardware)
        }
        if let latestRestorableTime = latestRestorableTime {
            try encodeContainer.encode(latestRestorableTime.timeIntervalSince1970, forKey: .latestRestorableTime)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let masterDatabaseName = masterDatabaseName {
            try encodeContainer.encode(masterDatabaseName, forKey: .masterDatabaseName)
        }
        if let masterEndpoint = masterEndpoint {
            try encodeContainer.encode(masterEndpoint, forKey: .masterEndpoint)
        }
        if let masterUsername = masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parameterApplyStatus = parameterApplyStatus {
            try encodeContainer.encode(parameterApplyStatus, forKey: .parameterApplyStatus)
        }
        if let pendingMaintenanceActions = pendingMaintenanceActions {
            var pendingMaintenanceActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pendingMaintenanceActions)
            for pendingmaintenanceactionlist0 in pendingMaintenanceActions {
                try pendingMaintenanceActionsContainer.encode(pendingmaintenanceactionlist0)
            }
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try encodeContainer.encode(pendingModifiedValues, forKey: .pendingModifiedValues)
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try encodeContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let publiclyAccessible = publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let relationalDatabaseBlueprintId = relationalDatabaseBlueprintId {
            try encodeContainer.encode(relationalDatabaseBlueprintId, forKey: .relationalDatabaseBlueprintId)
        }
        if let relationalDatabaseBundleId = relationalDatabaseBundleId {
            try encodeContainer.encode(relationalDatabaseBundleId, forKey: .relationalDatabaseBundleId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let secondaryAvailabilityZone = secondaryAvailabilityZone {
            try encodeContainer.encode(secondaryAvailabilityZone, forKey: .secondaryAvailabilityZone)
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let relationalDatabaseBlueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseBlueprintId)
        relationalDatabaseBlueprintId = relationalDatabaseBlueprintIdDecoded
        let relationalDatabaseBundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseBundleId)
        relationalDatabaseBundleId = relationalDatabaseBundleIdDecoded
        let masterDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterDatabaseName)
        masterDatabaseName = masterDatabaseNameDecoded
        let hardwareDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabaseHardware.self, forKey: .hardware)
        hardware = hardwareDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let secondaryAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secondaryAvailabilityZone)
        secondaryAvailabilityZone = secondaryAvailabilityZoneDecoded
        let backupRetentionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .backupRetentionEnabled)
        backupRetentionEnabled = backupRetentionEnabledDecoded
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PendingModifiedRelationalDatabaseValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let latestRestorableTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .latestRestorableTime)
        latestRestorableTime = latestRestorableTimeDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let parameterApplyStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterApplyStatus)
        parameterApplyStatus = parameterApplyStatusDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let masterEndpointDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabaseEndpoint.self, forKey: .masterEndpoint)
        masterEndpoint = masterEndpointDecoded
        let pendingMaintenanceActionsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.PendingMaintenanceAction?].self, forKey: .pendingMaintenanceActions)
        var pendingMaintenanceActionsDecoded0:[LightsailClientTypes.PendingMaintenanceAction]? = nil
        if let pendingMaintenanceActionsContainer = pendingMaintenanceActionsContainer {
            pendingMaintenanceActionsDecoded0 = [LightsailClientTypes.PendingMaintenanceAction]()
            for structure0 in pendingMaintenanceActionsContainer {
                if let structure0 = structure0 {
                    pendingMaintenanceActionsDecoded0?.append(structure0)
                }
            }
        }
        pendingMaintenanceActions = pendingMaintenanceActionsDecoded0
        let caCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caCertificateIdentifier)
        caCertificateIdentifier = caCertificateIdentifierDecoded
    }
}

extension LightsailClientTypes.RelationalDatabase: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RelationalDatabase(arn: \(Swift.String(describing: arn)), backupRetentionEnabled: \(Swift.String(describing: backupRetentionEnabled)), caCertificateIdentifier: \(Swift.String(describing: caCertificateIdentifier)), createdAt: \(Swift.String(describing: createdAt)), engine: \(Swift.String(describing: engine)), engineVersion: \(Swift.String(describing: engineVersion)), hardware: \(Swift.String(describing: hardware)), latestRestorableTime: \(Swift.String(describing: latestRestorableTime)), location: \(Swift.String(describing: location)), masterDatabaseName: \(Swift.String(describing: masterDatabaseName)), masterEndpoint: \(Swift.String(describing: masterEndpoint)), masterUsername: \(Swift.String(describing: masterUsername)), name: \(Swift.String(describing: name)), parameterApplyStatus: \(Swift.String(describing: parameterApplyStatus)), pendingMaintenanceActions: \(Swift.String(describing: pendingMaintenanceActions)), pendingModifiedValues: \(Swift.String(describing: pendingModifiedValues)), preferredBackupWindow: \(Swift.String(describing: preferredBackupWindow)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), relationalDatabaseBlueprintId: \(Swift.String(describing: relationalDatabaseBlueprintId)), relationalDatabaseBundleId: \(Swift.String(describing: relationalDatabaseBundleId)), resourceType: \(Swift.String(describing: resourceType)), secondaryAvailabilityZone: \(Swift.String(describing: secondaryAvailabilityZone)), state: \(Swift.String(describing: state)), supportCode: \(Swift.String(describing: supportCode)), tags: \(Swift.String(describing: tags)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a database.</p>
    public struct RelationalDatabase: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the database.</p>
        public let arn: Swift.String?
        /// <p>A Boolean value indicating whether automated backup retention is enabled for the
        ///       database.</p>
        public let backupRetentionEnabled: Swift.Bool?
        /// <p>The certificate associated with the database.</p>
        public let caCertificateIdentifier: Swift.String?
        /// <p>The timestamp when the database was created. Formatted in Unix time.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The database software (for example, <code>MySQL</code>).</p>
        public let engine: Swift.String?
        /// <p>The database engine version (for example, <code>5.7.23</code>).</p>
        public let engineVersion: Swift.String?
        /// <p>Describes the hardware of the database.</p>
        public let hardware: LightsailClientTypes.RelationalDatabaseHardware?
        /// <p>The latest point in time to which the database can be restored. Formatted in Unix
        ///       time.</p>
        public let latestRestorableTime: ClientRuntime.Date?
        /// <p>The Region name and Availability Zone where the database is located.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The name of the master database created when the Lightsail database resource is
        ///       created.</p>
        public let masterDatabaseName: Swift.String?
        /// <p>The master endpoint for the database.</p>
        public let masterEndpoint: LightsailClientTypes.RelationalDatabaseEndpoint?
        /// <p>The master user name of the database.</p>
        public let masterUsername: Swift.String?
        /// <p>The unique name of the database resource in Lightsail.</p>
        public let name: Swift.String?
        /// <p>The status of parameter updates for the database.</p>
        public let parameterApplyStatus: Swift.String?
        /// <p>Describes the pending maintenance actions for the database.</p>
        public let pendingMaintenanceActions: [LightsailClientTypes.PendingMaintenanceAction]?
        /// <p>Describes pending database value modifications.</p>
        public let pendingModifiedValues: LightsailClientTypes.PendingModifiedRelationalDatabaseValues?
        /// <p>The daily time range during which automated backups are created for the database (for
        ///       example, <code>16:00-16:30</code>).</p>
        public let preferredBackupWindow: Swift.String?
        /// <p>The weekly time range during which system maintenance can occur on the database.</p>
        ///          <p>In the format <code>ddd:hh24:mi-ddd:hh24:mi</code>. For example,
        ///         <code>Tue:17:00-Tue:17:30</code>.</p>
        public let preferredMaintenanceWindow: Swift.String?
        /// <p>A Boolean value indicating whether the database is publicly accessible.</p>
        public let publiclyAccessible: Swift.Bool?
        /// <p>The blueprint ID for the database. A blueprint describes the major engine version of a
        ///       database.</p>
        public let relationalDatabaseBlueprintId: Swift.String?
        /// <p>The bundle ID for the database. A bundle describes the performance specifications for your
        ///       database.</p>
        public let relationalDatabaseBundleId: Swift.String?
        /// <p>The Lightsail resource type for the database (for example,
        ///         <code>RelationalDatabase</code>).</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>Describes the secondary Availability Zone of a high availability database.</p>
        ///          <p>The secondary database is used for failover support of a high availability
        ///       database.</p>
        public let secondaryAvailabilityZone: Swift.String?
        /// <p>Describes the current state of the database.</p>
        public let state: Swift.String?
        /// <p>The support code for the database. Include this code in your email to support when you
        ///       have questions about a database in Lightsail. This code enables our support team to look up
        ///       your Lightsail information more easily.</p>
        public let supportCode: Swift.String?
        /// <p>The tag keys and optional values for the resource. For more information about tags in
        ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
        ///         Dev Guide</a>.</p>
        public let tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            backupRetentionEnabled: Swift.Bool? = nil,
            caCertificateIdentifier: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            hardware: LightsailClientTypes.RelationalDatabaseHardware? = nil,
            latestRestorableTime: ClientRuntime.Date? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            masterDatabaseName: Swift.String? = nil,
            masterEndpoint: LightsailClientTypes.RelationalDatabaseEndpoint? = nil,
            masterUsername: Swift.String? = nil,
            name: Swift.String? = nil,
            parameterApplyStatus: Swift.String? = nil,
            pendingMaintenanceActions: [LightsailClientTypes.PendingMaintenanceAction]? = nil,
            pendingModifiedValues: LightsailClientTypes.PendingModifiedRelationalDatabaseValues? = nil,
            preferredBackupWindow: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            publiclyAccessible: Swift.Bool? = nil,
            relationalDatabaseBlueprintId: Swift.String? = nil,
            relationalDatabaseBundleId: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            secondaryAvailabilityZone: Swift.String? = nil,
            state: Swift.String? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.backupRetentionEnabled = backupRetentionEnabled
            self.caCertificateIdentifier = caCertificateIdentifier
            self.createdAt = createdAt
            self.engine = engine
            self.engineVersion = engineVersion
            self.hardware = hardware
            self.latestRestorableTime = latestRestorableTime
            self.location = location
            self.masterDatabaseName = masterDatabaseName
            self.masterEndpoint = masterEndpoint
            self.masterUsername = masterUsername
            self.name = name
            self.parameterApplyStatus = parameterApplyStatus
            self.pendingMaintenanceActions = pendingMaintenanceActions
            self.pendingModifiedValues = pendingModifiedValues
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.publiclyAccessible = publiclyAccessible
            self.relationalDatabaseBlueprintId = relationalDatabaseBlueprintId
            self.relationalDatabaseBundleId = relationalDatabaseBundleId
            self.resourceType = resourceType
            self.secondaryAvailabilityZone = secondaryAvailabilityZone
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

extension LightsailClientTypes.RelationalDatabaseBlueprint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintId
        case engine
        case engineDescription
        case engineVersion
        case engineVersionDescription
        case isEngineDefault
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintId = blueprintId {
            try encodeContainer.encode(blueprintId, forKey: .blueprintId)
        }
        if let engine = engine {
            try encodeContainer.encode(engine.rawValue, forKey: .engine)
        }
        if let engineDescription = engineDescription {
            try encodeContainer.encode(engineDescription, forKey: .engineDescription)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let engineVersionDescription = engineVersionDescription {
            try encodeContainer.encode(engineVersionDescription, forKey: .engineVersionDescription)
        }
        if let isEngineDefault = isEngineDefault {
            try encodeContainer.encode(isEngineDefault, forKey: .isEngineDefault)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintId)
        blueprintId = blueprintIdDecoded
        let engineDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RelationalDatabaseEngine.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let engineDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineDescription)
        engineDescription = engineDescriptionDecoded
        let engineVersionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersionDescription)
        engineVersionDescription = engineVersionDescriptionDecoded
        let isEngineDefaultDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isEngineDefault)
        isEngineDefault = isEngineDefaultDecoded
    }
}

extension LightsailClientTypes.RelationalDatabaseBlueprint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RelationalDatabaseBlueprint(blueprintId: \(Swift.String(describing: blueprintId)), engine: \(Swift.String(describing: engine)), engineDescription: \(Swift.String(describing: engineDescription)), engineVersion: \(Swift.String(describing: engineVersion)), engineVersionDescription: \(Swift.String(describing: engineVersionDescription)), isEngineDefault: \(Swift.String(describing: isEngineDefault)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a database image, or blueprint. A blueprint describes the major engine version
    ///       of a database.</p>
    public struct RelationalDatabaseBlueprint: Swift.Equatable {
        /// <p>The ID for the database blueprint.</p>
        public let blueprintId: Swift.String?
        /// <p>The database software of the database blueprint (for example, <code>MySQL</code>).</p>
        public let engine: LightsailClientTypes.RelationalDatabaseEngine?
        /// <p>The description of the database engine for the database blueprint.</p>
        public let engineDescription: Swift.String?
        /// <p>The database engine version for the database blueprint (for example,
        ///       <code>5.7.23</code>).</p>
        public let engineVersion: Swift.String?
        /// <p>The description of the database engine version for the database blueprint.</p>
        public let engineVersionDescription: Swift.String?
        /// <p>A Boolean value indicating whether the engine version is the default for the database
        ///       blueprint.</p>
        public let isEngineDefault: Swift.Bool?

        public init (
            blueprintId: Swift.String? = nil,
            engine: LightsailClientTypes.RelationalDatabaseEngine? = nil,
            engineDescription: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            engineVersionDescription: Swift.String? = nil,
            isEngineDefault: Swift.Bool? = nil
        )
        {
            self.blueprintId = blueprintId
            self.engine = engine
            self.engineDescription = engineDescription
            self.engineVersion = engineVersion
            self.engineVersionDescription = engineVersionDescription
            self.isEngineDefault = isEngineDefault
        }
    }

}

extension LightsailClientTypes.RelationalDatabaseBundle: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case cpuCount
        case diskSizeInGb
        case isActive
        case isEncrypted
        case name
        case price
        case ramSizeInGb
        case transferPerMonthInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let cpuCount = cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let diskSizeInGb = diskSizeInGb {
            try encodeContainer.encode(diskSizeInGb, forKey: .diskSizeInGb)
        }
        if let isActive = isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let isEncrypted = isEncrypted {
            try encodeContainer.encode(isEncrypted, forKey: .isEncrypted)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let price = price {
            try encodeContainer.encode(price, forKey: .price)
        }
        if let ramSizeInGb = ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
        if let transferPerMonthInGb = transferPerMonthInGb {
            try encodeContainer.encode(transferPerMonthInGb, forKey: .transferPerMonthInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let priceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .price)
        price = priceDecoded
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
        let diskSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .diskSizeInGb)
        diskSizeInGb = diskSizeInGbDecoded
        let transferPerMonthInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transferPerMonthInGb)
        transferPerMonthInGb = transferPerMonthInGbDecoded
        let cpuCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let isEncryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isEncrypted)
        isEncrypted = isEncryptedDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
    }
}

extension LightsailClientTypes.RelationalDatabaseBundle: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RelationalDatabaseBundle(bundleId: \(Swift.String(describing: bundleId)), cpuCount: \(Swift.String(describing: cpuCount)), diskSizeInGb: \(Swift.String(describing: diskSizeInGb)), isActive: \(Swift.String(describing: isActive)), isEncrypted: \(Swift.String(describing: isEncrypted)), name: \(Swift.String(describing: name)), price: \(Swift.String(describing: price)), ramSizeInGb: \(Swift.String(describing: ramSizeInGb)), transferPerMonthInGb: \(Swift.String(describing: transferPerMonthInGb)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a database bundle. A bundle describes the performance specifications of the
    ///       database.</p>
    public struct RelationalDatabaseBundle: Swift.Equatable {
        /// <p>The ID for the database bundle.</p>
        public let bundleId: Swift.String?
        /// <p>The number of virtual CPUs (vCPUs) for the database bundle.</p>
        public let cpuCount: Swift.Int?
        /// <p>The size of the disk for the database bundle.</p>
        public let diskSizeInGb: Swift.Int?
        /// <p>A Boolean value indicating whether the database bundle is active.</p>
        public let isActive: Swift.Bool?
        /// <p>A Boolean value indicating whether the database bundle is encrypted.</p>
        public let isEncrypted: Swift.Bool?
        /// <p>The name for the database bundle.</p>
        public let name: Swift.String?
        /// <p>The cost of the database bundle in US currency.</p>
        public let price: Swift.Float?
        /// <p>The amount of RAM in GB (for example, <code>2.0</code>) for the database bundle.</p>
        public let ramSizeInGb: Swift.Float?
        /// <p>The data transfer rate per month in GB for the database bundle.</p>
        public let transferPerMonthInGb: Swift.Int?

        public init (
            bundleId: Swift.String? = nil,
            cpuCount: Swift.Int? = nil,
            diskSizeInGb: Swift.Int? = nil,
            isActive: Swift.Bool? = nil,
            isEncrypted: Swift.Bool? = nil,
            name: Swift.String? = nil,
            price: Swift.Float? = nil,
            ramSizeInGb: Swift.Float? = nil,
            transferPerMonthInGb: Swift.Int? = nil
        )
        {
            self.bundleId = bundleId
            self.cpuCount = cpuCount
            self.diskSizeInGb = diskSizeInGb
            self.isActive = isActive
            self.isEncrypted = isEncrypted
            self.name = name
            self.price = price
            self.ramSizeInGb = ramSizeInGb
            self.transferPerMonthInGb = transferPerMonthInGb
        }
    }

}

extension LightsailClientTypes.RelationalDatabaseEndpoint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address
        case port
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
    }
}

extension LightsailClientTypes.RelationalDatabaseEndpoint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RelationalDatabaseEndpoint(address: \(Swift.String(describing: address)), port: \(Swift.String(describing: port)))"}
}

extension LightsailClientTypes {
    /// <p>Describes an endpoint for a database.</p>
    public struct RelationalDatabaseEndpoint: Swift.Equatable {
        /// <p>Specifies the DNS address of the database.</p>
        public let address: Swift.String?
        /// <p>Specifies the port that the database is listening on.</p>
        public let port: Swift.Int?

        public init (
            address: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.address = address
            self.port = port
        }
    }

}

extension LightsailClientTypes {
    public enum RelationalDatabaseEngine: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mysql
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationalDatabaseEngine] {
            return [
                .mysql,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mysql: return "mysql"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RelationalDatabaseEngine(rawValue: rawValue) ?? RelationalDatabaseEngine.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.RelationalDatabaseEvent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case eventCategories
        case message
        case resource
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let eventCategories = eventCategories {
            var eventCategoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventCategories)
            for stringlist0 in eventCategories {
                try eventCategoriesContainer.encode(stringlist0)
            }
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let resource = resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let eventCategoriesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .eventCategories)
        var eventCategoriesDecoded0:[Swift.String]? = nil
        if let eventCategoriesContainer = eventCategoriesContainer {
            eventCategoriesDecoded0 = [Swift.String]()
            for string0 in eventCategoriesContainer {
                if let string0 = string0 {
                    eventCategoriesDecoded0?.append(string0)
                }
            }
        }
        eventCategories = eventCategoriesDecoded0
    }
}

extension LightsailClientTypes.RelationalDatabaseEvent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RelationalDatabaseEvent(createdAt: \(Swift.String(describing: createdAt)), eventCategories: \(Swift.String(describing: eventCategories)), message: \(Swift.String(describing: message)), resource: \(Swift.String(describing: resource)))"}
}

extension LightsailClientTypes {
    /// <p>Describes an event for a database.</p>
    public struct RelationalDatabaseEvent: Swift.Equatable {
        /// <p>The timestamp when the database event was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The category that the database event belongs to.</p>
        public let eventCategories: [Swift.String]?
        /// <p>The message of the database event.</p>
        public let message: Swift.String?
        /// <p>The database that the database event relates to.</p>
        public let resource: Swift.String?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            eventCategories: [Swift.String]? = nil,
            message: Swift.String? = nil,
            resource: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.eventCategories = eventCategories
            self.message = message
            self.resource = resource
        }
    }

}

extension LightsailClientTypes.RelationalDatabaseHardware: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cpuCount
        case diskSizeInGb
        case ramSizeInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cpuCount = cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let diskSizeInGb = diskSizeInGb {
            try encodeContainer.encode(diskSizeInGb, forKey: .diskSizeInGb)
        }
        if let ramSizeInGb = ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cpuCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let diskSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .diskSizeInGb)
        diskSizeInGb = diskSizeInGbDecoded
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
    }
}

extension LightsailClientTypes.RelationalDatabaseHardware: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RelationalDatabaseHardware(cpuCount: \(Swift.String(describing: cpuCount)), diskSizeInGb: \(Swift.String(describing: diskSizeInGb)), ramSizeInGb: \(Swift.String(describing: ramSizeInGb)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the hardware of a database.</p>
    public struct RelationalDatabaseHardware: Swift.Equatable {
        /// <p>The number of vCPUs for the database.</p>
        public let cpuCount: Swift.Int?
        /// <p>The size of the disk for the database.</p>
        public let diskSizeInGb: Swift.Int?
        /// <p>The amount of RAM in GB for the database.</p>
        public let ramSizeInGb: Swift.Float?

        public init (
            cpuCount: Swift.Int? = nil,
            diskSizeInGb: Swift.Int? = nil,
            ramSizeInGb: Swift.Float? = nil
        )
        {
            self.cpuCount = cpuCount
            self.diskSizeInGb = diskSizeInGb
            self.ramSizeInGb = ramSizeInGb
        }
    }

}

extension LightsailClientTypes {
    public enum RelationalDatabaseMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cpuutilization
        case databaseconnections
        case diskqueuedepth
        case freestoragespace
        case networkreceivethroughput
        case networktransmitthroughput
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationalDatabaseMetricName] {
            return [
                .cpuutilization,
                .databaseconnections,
                .diskqueuedepth,
                .freestoragespace,
                .networkreceivethroughput,
                .networktransmitthroughput,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cpuutilization: return "CPUUtilization"
            case .databaseconnections: return "DatabaseConnections"
            case .diskqueuedepth: return "DiskQueueDepth"
            case .freestoragespace: return "FreeStorageSpace"
            case .networkreceivethroughput: return "NetworkReceiveThroughput"
            case .networktransmitthroughput: return "NetworkTransmitThroughput"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RelationalDatabaseMetricName(rawValue: rawValue) ?? RelationalDatabaseMetricName.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.RelationalDatabaseParameter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValues
        case applyMethod
        case applyType
        case dataType
        case description
        case isModifiable
        case parameterName
        case parameterValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedValues = allowedValues {
            try encodeContainer.encode(allowedValues, forKey: .allowedValues)
        }
        if let applyMethod = applyMethod {
            try encodeContainer.encode(applyMethod, forKey: .applyMethod)
        }
        if let applyType = applyType {
            try encodeContainer.encode(applyType, forKey: .applyType)
        }
        if let dataType = dataType {
            try encodeContainer.encode(dataType, forKey: .dataType)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let isModifiable = isModifiable {
            try encodeContainer.encode(isModifiable, forKey: .isModifiable)
        }
        if let parameterName = parameterName {
            try encodeContainer.encode(parameterName, forKey: .parameterName)
        }
        if let parameterValue = parameterValue {
            try encodeContainer.encode(parameterValue, forKey: .parameterValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedValuesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allowedValues)
        allowedValues = allowedValuesDecoded
        let applyMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applyMethod)
        applyMethod = applyMethodDecoded
        let applyTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applyType)
        applyType = applyTypeDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataType)
        dataType = dataTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let isModifiableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isModifiable)
        isModifiable = isModifiableDecoded
        let parameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let parameterValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterValue)
        parameterValue = parameterValueDecoded
    }
}

extension LightsailClientTypes.RelationalDatabaseParameter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RelationalDatabaseParameter(allowedValues: \(Swift.String(describing: allowedValues)), applyMethod: \(Swift.String(describing: applyMethod)), applyType: \(Swift.String(describing: applyType)), dataType: \(Swift.String(describing: dataType)), description: \(Swift.String(describing: description)), isModifiable: \(Swift.String(describing: isModifiable)), parameterName: \(Swift.String(describing: parameterName)), parameterValue: \(Swift.String(describing: parameterValue)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the parameters of a database.</p>
    public struct RelationalDatabaseParameter: Swift.Equatable {
        /// <p>Specifies the valid range of values for the parameter.</p>
        public let allowedValues: Swift.String?
        /// <p>Indicates when parameter updates are applied.</p>
        ///          <p>Can be <code>immediate</code> or <code>pending-reboot</code>.</p>
        public let applyMethod: Swift.String?
        /// <p>Specifies the engine-specific parameter type.</p>
        public let applyType: Swift.String?
        /// <p>Specifies the valid data type for the parameter.</p>
        public let dataType: Swift.String?
        /// <p>Provides a description of the parameter.</p>
        public let description: Swift.String?
        /// <p>A Boolean value indicating whether the parameter can be modified.</p>
        public let isModifiable: Swift.Bool?
        /// <p>Specifies the name of the parameter.</p>
        public let parameterName: Swift.String?
        /// <p>Specifies the value of the parameter.</p>
        public let parameterValue: Swift.String?

        public init (
            allowedValues: Swift.String? = nil,
            applyMethod: Swift.String? = nil,
            applyType: Swift.String? = nil,
            dataType: Swift.String? = nil,
            description: Swift.String? = nil,
            isModifiable: Swift.Bool? = nil,
            parameterName: Swift.String? = nil,
            parameterValue: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.applyMethod = applyMethod
            self.applyType = applyType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }
    }

}

extension LightsailClientTypes {
    public enum RelationalDatabasePasswordVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case current
        case pending
        case previous
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationalDatabasePasswordVersion] {
            return [
                .current,
                .pending,
                .previous,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .current: return "CURRENT"
            case .pending: return "PENDING"
            case .previous: return "PREVIOUS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RelationalDatabasePasswordVersion(rawValue: rawValue) ?? RelationalDatabasePasswordVersion.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.RelationalDatabaseSnapshot: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case engine
        case engineVersion
        case fromRelationalDatabaseArn
        case fromRelationalDatabaseBlueprintId
        case fromRelationalDatabaseBundleId
        case fromRelationalDatabaseName
        case location
        case name
        case resourceType
        case sizeInGb
        case state
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let engine = engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let fromRelationalDatabaseArn = fromRelationalDatabaseArn {
            try encodeContainer.encode(fromRelationalDatabaseArn, forKey: .fromRelationalDatabaseArn)
        }
        if let fromRelationalDatabaseBlueprintId = fromRelationalDatabaseBlueprintId {
            try encodeContainer.encode(fromRelationalDatabaseBlueprintId, forKey: .fromRelationalDatabaseBlueprintId)
        }
        if let fromRelationalDatabaseBundleId = fromRelationalDatabaseBundleId {
            try encodeContainer.encode(fromRelationalDatabaseBundleId, forKey: .fromRelationalDatabaseBundleId)
        }
        if let fromRelationalDatabaseName = fromRelationalDatabaseName {
            try encodeContainer.encode(fromRelationalDatabaseName, forKey: .fromRelationalDatabaseName)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sizeInGb = sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let fromRelationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromRelationalDatabaseName)
        fromRelationalDatabaseName = fromRelationalDatabaseNameDecoded
        let fromRelationalDatabaseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromRelationalDatabaseArn)
        fromRelationalDatabaseArn = fromRelationalDatabaseArnDecoded
        let fromRelationalDatabaseBundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromRelationalDatabaseBundleId)
        fromRelationalDatabaseBundleId = fromRelationalDatabaseBundleIdDecoded
        let fromRelationalDatabaseBlueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromRelationalDatabaseBlueprintId)
        fromRelationalDatabaseBlueprintId = fromRelationalDatabaseBlueprintIdDecoded
    }
}

extension LightsailClientTypes.RelationalDatabaseSnapshot: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RelationalDatabaseSnapshot(arn: \(Swift.String(describing: arn)), createdAt: \(Swift.String(describing: createdAt)), engine: \(Swift.String(describing: engine)), engineVersion: \(Swift.String(describing: engineVersion)), fromRelationalDatabaseArn: \(Swift.String(describing: fromRelationalDatabaseArn)), fromRelationalDatabaseBlueprintId: \(Swift.String(describing: fromRelationalDatabaseBlueprintId)), fromRelationalDatabaseBundleId: \(Swift.String(describing: fromRelationalDatabaseBundleId)), fromRelationalDatabaseName: \(Swift.String(describing: fromRelationalDatabaseName)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), resourceType: \(Swift.String(describing: resourceType)), sizeInGb: \(Swift.String(describing: sizeInGb)), state: \(Swift.String(describing: state)), supportCode: \(Swift.String(describing: supportCode)), tags: \(Swift.String(describing: tags)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a database snapshot.</p>
    public struct RelationalDatabaseSnapshot: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the database snapshot.</p>
        public let arn: Swift.String?
        /// <p>The timestamp when the database snapshot was created.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The software of the database snapshot (for example, <code>MySQL</code>)</p>
        public let engine: Swift.String?
        /// <p>The database engine version for the database snapshot (for example,
        ///       <code>5.7.23</code>).</p>
        public let engineVersion: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the database from which the database snapshot was
        ///       created.</p>
        public let fromRelationalDatabaseArn: Swift.String?
        /// <p>The blueprint ID of the database from which the database snapshot was created. A blueprint
        ///       describes the major engine version of a database.</p>
        public let fromRelationalDatabaseBlueprintId: Swift.String?
        /// <p>The bundle ID of the database from which the database snapshot was created.</p>
        public let fromRelationalDatabaseBundleId: Swift.String?
        /// <p>The name of the source database from which the database snapshot was created.</p>
        public let fromRelationalDatabaseName: Swift.String?
        /// <p>The Region name and Availability Zone where the database snapshot is located.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The name of the database snapshot.</p>
        public let name: Swift.String?
        /// <p>The Lightsail resource type.</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The size of the disk in GB (for example, <code>32</code>) for the database
        ///       snapshot.</p>
        public let sizeInGb: Swift.Int?
        /// <p>The state of the database snapshot.</p>
        public let state: Swift.String?
        /// <p>The support code for the database snapshot. Include this code in your email to support
        ///       when you have questions about a database snapshot in Lightsail. This code enables our
        ///       support team to look up your Lightsail information more easily.</p>
        public let supportCode: Swift.String?
        /// <p>The tag keys and optional values for the resource. For more information about tags in
        ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
        ///         Dev Guide</a>.</p>
        public let tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            fromRelationalDatabaseArn: Swift.String? = nil,
            fromRelationalDatabaseBlueprintId: Swift.String? = nil,
            fromRelationalDatabaseBundleId: Swift.String? = nil,
            fromRelationalDatabaseName: Swift.String? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            sizeInGb: Swift.Int? = nil,
            state: Swift.String? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.engine = engine
            self.engineVersion = engineVersion
            self.fromRelationalDatabaseArn = fromRelationalDatabaseArn
            self.fromRelationalDatabaseBlueprintId = fromRelationalDatabaseBlueprintId
            self.fromRelationalDatabaseBundleId = fromRelationalDatabaseBundleId
            self.fromRelationalDatabaseName = fromRelationalDatabaseName
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}

public struct ReleaseStaticIpInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReleaseStaticIpInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReleaseStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReleaseStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReleaseStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReleaseStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReleaseStaticIpOutputError>
}

extension ReleaseStaticIpInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReleaseStaticIpInput(staticIpName: \(Swift.String(describing: staticIpName)))"}
}

extension ReleaseStaticIpInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let staticIpName = staticIpName {
            try encodeContainer.encode(staticIpName, forKey: .staticIpName)
        }
    }
}

public struct ReleaseStaticIpInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReleaseStaticIpInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReleaseStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReleaseStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReleaseStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReleaseStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReleaseStaticIpOutputError>
}

public struct ReleaseStaticIpInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReleaseStaticIpInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReleaseStaticIpInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReleaseStaticIpOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReleaseStaticIpInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReleaseStaticIpOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReleaseStaticIpOutputError>
}

public struct ReleaseStaticIpInput: Swift.Equatable {
    /// <p>The name of the static IP to delete.</p>
    public let staticIpName: Swift.String?

    public init (
        staticIpName: Swift.String? = nil
    )
    {
        self.staticIpName = staticIpName
    }
}

struct ReleaseStaticIpInputBody: Swift.Equatable {
    public let staticIpName: Swift.String?
}

extension ReleaseStaticIpInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case staticIpName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let staticIpNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .staticIpName)
        staticIpName = staticIpNameDecoded
    }
}

extension ReleaseStaticIpOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ReleaseStaticIpOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ReleaseStaticIpOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ReleaseStaticIpOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReleaseStaticIpOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension ReleaseStaticIpOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ReleaseStaticIpOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct ReleaseStaticIpOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct ReleaseStaticIpOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension ReleaseStaticIpOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes {
    public enum RenewalStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pendingautorenewal
        case pendingvalidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [RenewalStatus] {
            return [
                .failed,
                .pendingautorenewal,
                .pendingvalidation,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .pendingautorenewal: return "PendingAutoRenewal"
            case .pendingvalidation: return "PendingValidation"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RenewalStatus(rawValue: rawValue) ?? RenewalStatus.sdkUnknown(rawValue)
        }
    }
}

extension LightsailClientTypes.RenewalSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainValidationRecords
        case renewalStatus
        case renewalStatusReason
        case updatedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainValidationRecords = domainValidationRecords {
            var domainValidationRecordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationRecords)
            for domainvalidationrecordlist0 in domainValidationRecords {
                try domainValidationRecordsContainer.encode(domainvalidationrecordlist0)
            }
        }
        if let renewalStatus = renewalStatus {
            try encodeContainer.encode(renewalStatus.rawValue, forKey: .renewalStatus)
        }
        if let renewalStatusReason = renewalStatusReason {
            try encodeContainer.encode(renewalStatusReason, forKey: .renewalStatusReason)
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainValidationRecordsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.DomainValidationRecord?].self, forKey: .domainValidationRecords)
        var domainValidationRecordsDecoded0:[LightsailClientTypes.DomainValidationRecord]? = nil
        if let domainValidationRecordsContainer = domainValidationRecordsContainer {
            domainValidationRecordsDecoded0 = [LightsailClientTypes.DomainValidationRecord]()
            for structure0 in domainValidationRecordsContainer {
                if let structure0 = structure0 {
                    domainValidationRecordsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationRecords = domainValidationRecordsDecoded0
        let renewalStatusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RenewalStatus.self, forKey: .renewalStatus)
        renewalStatus = renewalStatusDecoded
        let renewalStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .renewalStatusReason)
        renewalStatusReason = renewalStatusReasonDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension LightsailClientTypes.RenewalSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RenewalSummary(domainValidationRecords: \(Swift.String(describing: domainValidationRecords)), renewalStatus: \(Swift.String(describing: renewalStatus)), renewalStatusReason: \(Swift.String(describing: renewalStatusReason)), updatedAt: \(Swift.String(describing: updatedAt)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the status of a SSL/TLS certificate renewal managed by Amazon Lightsail.</p>
    public struct RenewalSummary: Swift.Equatable {
        /// <p>An array of objects that describe the domain validation records of the certificate.</p>
        public let domainValidationRecords: [LightsailClientTypes.DomainValidationRecord]?
        /// <p>The renewal status of the certificate.</p>
        ///          <p>The following renewal status are possible:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>PendingAutoRenewal</code>
        ///                   </b> - Lightsail is
        ///           attempting to automatically validate the domain names of the certificate. No further
        ///           action is required. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>PendingValidation</code>
        ///                   </b> - Lightsail couldn't
        ///           automatically validate one or more domain names of the certificate. You must take action
        ///           to validate these domain names or the certificate won't be renewed. Check to make sure
        ///           your certificate's domain validation records exist in your domain's DNS, and that your
        ///           certificate remains in use.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Success</code>
        ///                   </b> - All domain names in the
        ///           certificate are validated, and Lightsail renewed the certificate. No further action is
        ///           required. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>
        ///                      <code>Failed</code>
        ///                   </b> - One or more domain names were
        ///           not validated before the certificate expired, and Lightsail did not renew the
        ///           certificate. You can request a new certificate using the <code>CreateCertificate</code>
        ///           action.</p>
        ///             </li>
        ///          </ul>
        public let renewalStatus: LightsailClientTypes.RenewalStatus?
        /// <p>The reason for the renewal status of the certificate.</p>
        public let renewalStatusReason: Swift.String?
        /// <p>The timestamp when the certificate was last updated.</p>
        public let updatedAt: ClientRuntime.Date?

        public init (
            domainValidationRecords: [LightsailClientTypes.DomainValidationRecord]? = nil,
            renewalStatus: LightsailClientTypes.RenewalStatus? = nil,
            renewalStatusReason: Swift.String? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.domainValidationRecords = domainValidationRecords
            self.renewalStatus = renewalStatus
            self.renewalStatusReason = renewalStatusReason
            self.updatedAt = updatedAt
        }
    }

}

public struct ResetDistributionCacheInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResetDistributionCacheInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResetDistributionCacheInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResetDistributionCacheOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResetDistributionCacheInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResetDistributionCacheOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResetDistributionCacheOutputError>
}

extension ResetDistributionCacheInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResetDistributionCacheInput(distributionName: \(Swift.String(describing: distributionName)))"}
}

extension ResetDistributionCacheInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let distributionName = distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
    }
}

public struct ResetDistributionCacheInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResetDistributionCacheInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResetDistributionCacheInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResetDistributionCacheOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResetDistributionCacheInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResetDistributionCacheOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResetDistributionCacheOutputError>
}

public struct ResetDistributionCacheInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResetDistributionCacheInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResetDistributionCacheInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResetDistributionCacheOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResetDistributionCacheInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResetDistributionCacheOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResetDistributionCacheOutputError>
}

public struct ResetDistributionCacheInput: Swift.Equatable {
    /// <p>The name of the distribution for which to reset cache.</p>
    ///          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    ///       can specify.</p>
    public let distributionName: Swift.String?

    public init (
        distributionName: Swift.String? = nil
    )
    {
        self.distributionName = distributionName
    }
}

struct ResetDistributionCacheInputBody: Swift.Equatable {
    public let distributionName: Swift.String?
}

extension ResetDistributionCacheInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case distributionName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
    }
}

extension ResetDistributionCacheOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ResetDistributionCacheOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ResetDistributionCacheOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResetDistributionCacheOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResetDistributionCacheOutputResponse(createTime: \(Swift.String(describing: createTime)), operation: \(Swift.String(describing: operation)), status: \(Swift.String(describing: status)))"}
}

extension ResetDistributionCacheOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResetDistributionCacheOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createTime = output.createTime
            self.operation = output.operation
            self.status = output.status
        } else {
            self.createTime = nil
            self.operation = nil
            self.status = nil
        }
    }
}

public struct ResetDistributionCacheOutputResponse: Swift.Equatable {
    /// <p>The timestamp of the reset cache request (e.g., <code>1479734909.17</code>) in Unix time
    ///       format.</p>
    public let createTime: ClientRuntime.Date?
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?
    /// <p>The status of the reset cache request.</p>
    public let status: Swift.String?

    public init (
        createTime: ClientRuntime.Date? = nil,
        operation: LightsailClientTypes.Operation? = nil,
        status: Swift.String? = nil
    )
    {
        self.createTime = createTime
        self.operation = operation
        self.status = status
    }
}

struct ResetDistributionCacheOutputResponseBody: Swift.Equatable {
    public let status: Swift.String?
    public let createTime: ClientRuntime.Date?
    public let operation: LightsailClientTypes.Operation?
}

extension ResetDistributionCacheOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime
        case operation
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension LightsailClientTypes.ResourceLocation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case regionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let regionName = regionName {
            try encodeContainer.encode(regionName.rawValue, forKey: .regionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RegionName.self, forKey: .regionName)
        regionName = regionNameDecoded
    }
}

extension LightsailClientTypes.ResourceLocation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceLocation(availabilityZone: \(Swift.String(describing: availabilityZone)), regionName: \(Swift.String(describing: regionName)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the resource location.</p>
    public struct ResourceLocation: Swift.Equatable {
        /// <p>The Availability Zone. Follows the format <code>us-east-2a</code> (case-sensitive).</p>
        public let availabilityZone: Swift.String?
        /// <p>The AWS Region name.</p>
        public let regionName: LightsailClientTypes.RegionName?

        public init (
            availabilityZone: Swift.String? = nil,
            regionName: LightsailClientTypes.RegionName? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.regionName = regionName
        }
    }

}

extension LightsailClientTypes.ResourceRecord: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case type
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension LightsailClientTypes.ResourceRecord: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceRecord(name: \(Swift.String(describing: name)), type: \(Swift.String(describing: type)), value: \(Swift.String(describing: value)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the domain name system (DNS) records to add to your domain's DNS to validate it
    ///       for an Amazon Lightsail certificate.</p>
    public struct ResourceRecord: Swift.Equatable {
        /// <p>The name of the record.</p>
        public let name: Swift.String?
        /// <p>The DNS record type.</p>
        public let type: Swift.String?
        /// <p>The value for the DNS record.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            type: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
            self.value = value
        }
    }

}

extension LightsailClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alarm
        case certificate
        case cloudformationstackrecord
        case contactmethod
        case containerservice
        case disk
        case disksnapshot
        case distribution
        case domain
        case exportsnapshotrecord
        case instance
        case instancesnapshot
        case keypair
        case loadbalancer
        case loadbalancertlscertificate
        case peeredvpc
        case relationaldatabase
        case relationaldatabasesnapshot
        case staticip
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .alarm,
                .certificate,
                .cloudformationstackrecord,
                .contactmethod,
                .containerservice,
                .disk,
                .disksnapshot,
                .distribution,
                .domain,
                .exportsnapshotrecord,
                .instance,
                .instancesnapshot,
                .keypair,
                .loadbalancer,
                .loadbalancertlscertificate,
                .peeredvpc,
                .relationaldatabase,
                .relationaldatabasesnapshot,
                .staticip,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alarm: return "Alarm"
            case .certificate: return "Certificate"
            case .cloudformationstackrecord: return "CloudFormationStackRecord"
            case .contactmethod: return "ContactMethod"
            case .containerservice: return "ContainerService"
            case .disk: return "Disk"
            case .disksnapshot: return "DiskSnapshot"
            case .distribution: return "Distribution"
            case .domain: return "Domain"
            case .exportsnapshotrecord: return "ExportSnapshotRecord"
            case .instance: return "Instance"
            case .instancesnapshot: return "InstanceSnapshot"
            case .keypair: return "KeyPair"
            case .loadbalancer: return "LoadBalancer"
            case .loadbalancertlscertificate: return "LoadBalancerTlsCertificate"
            case .peeredvpc: return "PeeredVpc"
            case .relationaldatabase: return "RelationalDatabase"
            case .relationaldatabasesnapshot: return "RelationalDatabaseSnapshot"
            case .staticip: return "StaticIp"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

public struct SendContactMethodVerificationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendContactMethodVerificationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendContactMethodVerificationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendContactMethodVerificationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendContactMethodVerificationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendContactMethodVerificationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendContactMethodVerificationOutputError>
}

extension SendContactMethodVerificationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendContactMethodVerificationInput(protocol: \(Swift.String(describing: `protocol`)))"}
}

extension SendContactMethodVerificationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `protocol` = "protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
    }
}

public struct SendContactMethodVerificationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendContactMethodVerificationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendContactMethodVerificationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendContactMethodVerificationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendContactMethodVerificationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendContactMethodVerificationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendContactMethodVerificationOutputError>
}

public struct SendContactMethodVerificationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SendContactMethodVerificationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SendContactMethodVerificationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SendContactMethodVerificationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SendContactMethodVerificationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SendContactMethodVerificationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SendContactMethodVerificationOutputError>
}

public struct SendContactMethodVerificationInput: Swift.Equatable {
    /// <p>The protocol to verify, such as <code>Email</code> or <code>SMS</code> (text
    ///       messaging).</p>
    public let `protocol`: LightsailClientTypes.ContactMethodVerificationProtocol?

    public init (
        `protocol`: LightsailClientTypes.ContactMethodVerificationProtocol? = nil
    )
    {
        self.`protocol` = `protocol`
    }
}

struct SendContactMethodVerificationInputBody: Swift.Equatable {
    public let `protocol`: LightsailClientTypes.ContactMethodVerificationProtocol?
}

extension SendContactMethodVerificationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `protocol` = "protocol"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContactMethodVerificationProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}

extension SendContactMethodVerificationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendContactMethodVerificationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SendContactMethodVerificationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendContactMethodVerificationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendContactMethodVerificationOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension SendContactMethodVerificationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SendContactMethodVerificationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct SendContactMethodVerificationOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct SendContactMethodVerificationOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension SendContactMethodVerificationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension ServiceException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceException(code: \(Swift.String(describing: code)), docs: \(Swift.String(describing: docs)), message: \(Swift.String(describing: message)), tip: \(Swift.String(describing: tip)))"}
}

extension ServiceException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ServiceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.docs = output.docs
            self.message = output.message
            self.tip = output.tip
        } else {
            self.code = nil
            self.docs = nil
            self.message = nil
            self.tip = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A general service exception.</p>
public struct ServiceException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var code: Swift.String?
    public var docs: Swift.String?
    public var message: Swift.String?
    public var tip: Swift.String?

    public init (
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.code = code
        self.docs = docs
        self.message = message
        self.tip = tip
    }
}

struct ServiceExceptionBody: Swift.Equatable {
    public let code: Swift.String?
    public let docs: Swift.String?
    public let message: Swift.String?
    public let tip: Swift.String?
}

extension ServiceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case docs
        case message
        case tip
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let docsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .docs)
        docs = docsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tip)
        tip = tipDecoded
    }
}

public struct SetIpAddressTypeInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIpAddressTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIpAddressTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIpAddressTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIpAddressTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIpAddressTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIpAddressTypeOutputError>
}

extension SetIpAddressTypeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetIpAddressTypeInput(ipAddressType: \(Swift.String(describing: ipAddressType)), resourceName: \(Swift.String(describing: resourceName)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension SetIpAddressTypeInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipAddressType
        case resourceName
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ipAddressType = ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }
}

public struct SetIpAddressTypeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIpAddressTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIpAddressTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIpAddressTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIpAddressTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIpAddressTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIpAddressTypeOutputError>
}

public struct SetIpAddressTypeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetIpAddressTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetIpAddressTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetIpAddressTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetIpAddressTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetIpAddressTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetIpAddressTypeOutputError>
}

public struct SetIpAddressTypeInput: Swift.Equatable {
    /// <p>The IP address type to set for the specified resource.</p>
    ///
    ///          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
    ///       IPv4 and IPv6.</p>
    public let ipAddressType: LightsailClientTypes.IpAddressType?
    /// <p>The name of the resource for which to set the IP address type.</p>
    public let resourceName: Swift.String?
    /// <p>The resource type.</p>
    ///          <p>The possible values are <code>Distribution</code>, <code>Instance</code>, and
    ///         <code>LoadBalancer</code>.</p>
    ///          <note>
    ///             <p>Distribution-related APIs are available only in the N. Virginia (<code>us-east-1</code>)
    ///         AWS Region. Set your AWS Region configuration to <code>us-east-1</code> to create, view,
    ///         or edit distributions.</p>
    ///          </note>
    public let resourceType: LightsailClientTypes.ResourceType?

    public init (
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        resourceName: Swift.String? = nil,
        resourceType: LightsailClientTypes.ResourceType? = nil
    )
    {
        self.ipAddressType = ipAddressType
        self.resourceName = resourceName
        self.resourceType = resourceType
    }
}

struct SetIpAddressTypeInputBody: Swift.Equatable {
    public let resourceType: LightsailClientTypes.ResourceType?
    public let resourceName: Swift.String?
    public let ipAddressType: LightsailClientTypes.IpAddressType?
}

extension SetIpAddressTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipAddressType
        case resourceName
        case resourceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
    }
}

extension SetIpAddressTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetIpAddressTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetIpAddressTypeOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetIpAddressTypeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetIpAddressTypeOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension SetIpAddressTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SetIpAddressTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct SetIpAddressTypeOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct SetIpAddressTypeOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension SetIpAddressTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct StartInstanceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartInstanceOutputError>
}

extension StartInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartInstanceInput(instanceName: \(Swift.String(describing: instanceName)))"}
}

extension StartInstanceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

public struct StartInstanceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartInstanceOutputError>
}

public struct StartInstanceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartInstanceOutputError>
}

public struct StartInstanceInput: Swift.Equatable {
    /// <p>The name of the instance (a virtual private server) to start.</p>
    public let instanceName: Swift.String?

    public init (
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct StartInstanceInputBody: Swift.Equatable {
    public let instanceName: Swift.String?
}

extension StartInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension StartInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartInstanceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartInstanceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartInstanceOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension StartInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct StartInstanceOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct StartInstanceOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension StartInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct StartRelationalDatabaseInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartRelationalDatabaseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartRelationalDatabaseOutputError>
}

extension StartRelationalDatabaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartRelationalDatabaseInput(relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)))"}
}

extension StartRelationalDatabaseInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

public struct StartRelationalDatabaseInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartRelationalDatabaseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartRelationalDatabaseOutputError>
}

public struct StartRelationalDatabaseInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartRelationalDatabaseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartRelationalDatabaseOutputError>
}

public struct StartRelationalDatabaseInput: Swift.Equatable {
    /// <p>The name of your database to start.</p>
    public let relationalDatabaseName: Swift.String?

    public init (
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct StartRelationalDatabaseInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
}

extension StartRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
    }
}

extension StartRelationalDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartRelationalDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartRelationalDatabaseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartRelationalDatabaseOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartRelationalDatabaseOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension StartRelationalDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartRelationalDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct StartRelationalDatabaseOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct StartRelationalDatabaseOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension StartRelationalDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes.StaticIp: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case attachedTo
        case createdAt
        case ipAddress
        case isAttached
        case location
        case name
        case resourceType
        case supportCode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let attachedTo = attachedTo {
            try encodeContainer.encode(attachedTo, forKey: .attachedTo)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let isAttached = isAttached {
            try encodeContainer.encode(isAttached, forKey: .isAttached)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let attachedToDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachedTo)
        attachedTo = attachedToDecoded
        let isAttachedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isAttached)
        isAttached = isAttachedDecoded
    }
}

extension LightsailClientTypes.StaticIp: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StaticIp(arn: \(Swift.String(describing: arn)), attachedTo: \(Swift.String(describing: attachedTo)), createdAt: \(Swift.String(describing: createdAt)), ipAddress: \(Swift.String(describing: ipAddress)), isAttached: \(Swift.String(describing: isAttached)), location: \(Swift.String(describing: location)), name: \(Swift.String(describing: name)), resourceType: \(Swift.String(describing: resourceType)), supportCode: \(Swift.String(describing: supportCode)))"}
}

extension LightsailClientTypes {
    /// <p>Describes the static IP.</p>
    public struct StaticIp: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the static IP (e.g.,
        ///         <code>arn:aws:lightsail:us-east-2:123456789101:StaticIp/9cbb4a9e-f8e3-4dfe-b57e-12345EXAMPLE</code>).</p>
        public let arn: Swift.String?
        /// <p>The instance where the static IP is attached (e.g.,
        ///       <code>Amazon_Linux-1GB-Ohio-1</code>).</p>
        public let attachedTo: Swift.String?
        /// <p>The timestamp when the static IP was created (e.g., <code>1479735304.222</code>).</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The static IP address.</p>
        public let ipAddress: Swift.String?
        /// <p>A Boolean value indicating whether the static IP is attached.</p>
        public let isAttached: Swift.Bool?
        /// <p>The region and Availability Zone where the static IP was created.</p>
        public let location: LightsailClientTypes.ResourceLocation?
        /// <p>The name of the static IP (e.g., <code>StaticIP-Ohio-EXAMPLE</code>).</p>
        public let name: Swift.String?
        /// <p>The resource type (usually <code>StaticIp</code>).</p>
        public let resourceType: LightsailClientTypes.ResourceType?
        /// <p>The support code. Include this code in your email to support when you have questions about
        ///       an instance or another resource in Lightsail. This code enables our support team to look up
        ///       your Lightsail information more easily.</p>
        public let supportCode: Swift.String?

        public init (
            arn: Swift.String? = nil,
            attachedTo: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            ipAddress: Swift.String? = nil,
            isAttached: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            supportCode: Swift.String? = nil
        )
        {
            self.arn = arn
            self.attachedTo = attachedTo
            self.createdAt = createdAt
            self.ipAddress = ipAddress
            self.isAttached = isAttached
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.supportCode = supportCode
        }
    }

}

public struct StopInstanceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopInstanceOutputError>
}

extension StopInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopInstanceInput(force: \(Swift.String(describing: force)), instanceName: \(Swift.String(describing: instanceName)))"}
}

extension StopInstanceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case force
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let force = force {
            try encodeContainer.encode(force, forKey: .force)
        }
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

public struct StopInstanceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopInstanceOutputError>
}

public struct StopInstanceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopInstanceOutputError>
}

public struct StopInstanceInput: Swift.Equatable {
    /// <p>When set to <code>True</code>, forces a Lightsail instance that is stuck in a
    ///         <code>stopping</code> state to stop.</p>
    ///          <important>
    ///             <p>Only use the <code>force</code> parameter if your instance is stuck in the
    ///           <code>stopping</code> state. In any other state, your instance should stop normally
    ///         without adding this parameter to your API request.</p>
    ///          </important>
    public let force: Swift.Bool?
    /// <p>The name of the instance (a virtual private server) to stop.</p>
    public let instanceName: Swift.String?

    public init (
        force: Swift.Bool? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.force = force
        self.instanceName = instanceName
    }
}

struct StopInstanceInputBody: Swift.Equatable {
    public let instanceName: Swift.String?
    public let force: Swift.Bool?
}

extension StopInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case force
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let forceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .force)
        force = forceDecoded
    }
}

extension StopInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopInstanceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopInstanceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopInstanceOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension StopInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StopInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct StopInstanceOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct StopInstanceOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension StopInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct StopRelationalDatabaseInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopRelationalDatabaseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopRelationalDatabaseOutputError>
}

extension StopRelationalDatabaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopRelationalDatabaseInput(relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)), relationalDatabaseSnapshotName: \(Swift.String(describing: relationalDatabaseSnapshotName)))"}
}

extension StopRelationalDatabaseInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let relationalDatabaseSnapshotName = relationalDatabaseSnapshotName {
            try encodeContainer.encode(relationalDatabaseSnapshotName, forKey: .relationalDatabaseSnapshotName)
        }
    }
}

public struct StopRelationalDatabaseInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopRelationalDatabaseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopRelationalDatabaseOutputError>
}

public struct StopRelationalDatabaseInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopRelationalDatabaseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopRelationalDatabaseOutputError>
}

public struct StopRelationalDatabaseInput: Swift.Equatable {
    /// <p>The name of your database to stop.</p>
    public let relationalDatabaseName: Swift.String?
    /// <p>The name of your new database snapshot to be created before stopping your database.</p>
    public let relationalDatabaseSnapshotName: Swift.String?

    public init (
        relationalDatabaseName: Swift.String? = nil,
        relationalDatabaseSnapshotName: Swift.String? = nil
    )
    {
        self.relationalDatabaseName = relationalDatabaseName
        self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
    }
}

struct StopRelationalDatabaseInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
    public let relationalDatabaseSnapshotName: Swift.String?
}

extension StopRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let relationalDatabaseSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseSnapshotName)
        relationalDatabaseSnapshotName = relationalDatabaseSnapshotNameDecoded
    }
}

extension StopRelationalDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopRelationalDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopRelationalDatabaseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopRelationalDatabaseOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopRelationalDatabaseOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension StopRelationalDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StopRelationalDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct StopRelationalDatabaseOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct StopRelationalDatabaseOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension StopRelationalDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension LightsailClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension LightsailClientTypes {
    /// <p>Describes a tag key and optional value assigned to an Amazon Lightsail resource.</p>
    ///          <p>For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
    ///         Dev Guide</a>.</p>
    public struct Tag: Swift.Equatable {
        /// <p>The key of the tag.</p>
        ///          <p>Constraints: Tag keys accept a maximum of 128 letters, numbers, spaces in UTF-8, or the
        ///       following characters: + - = . _ : / @</p>
        public let key: Swift.String?
        /// <p>The value of the tag.</p>
        ///          <p>Constraints: Tag values accept a maximum of 256 letters, numbers, spaces in UTF-8, or the
        ///       following characters: + - = . _ : / @</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), resourceName: \(Swift.String(describing: resourceName)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case resourceName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource to which you want to add a tag.</p>
    public let resourceArn: Swift.String?
    /// <p>The name of the resource to which you are adding tags.</p>
    public let resourceName: Swift.String?
    /// <p>The tag key and optional value.</p>
    public let tags: [LightsailClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        resourceName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.resourceName = resourceName
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let resourceName: Swift.String?
    public let resourceArn: Swift.String?
    public let tags: [LightsailClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case resourceName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TagResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct TagResourceOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension TagResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct TestAlarmInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestAlarmInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestAlarmOutputError>
}

extension TestAlarmInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestAlarmInput(alarmName: \(Swift.String(describing: alarmName)), state: \(Swift.String(describing: state)))"}
}

extension TestAlarmInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmName = alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }
}

public struct TestAlarmInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestAlarmInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestAlarmOutputError>
}

public struct TestAlarmInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestAlarmInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestAlarmInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestAlarmInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestAlarmOutputError>
}

public struct TestAlarmInput: Swift.Equatable {
    /// <p>The name of the alarm to test.</p>
    public let alarmName: Swift.String?
    /// <p>The alarm state to test.</p>
    ///          <p>An alarm has the following possible states that can be tested:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ALARM</code> - The metric is outside of the defined threshold.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INSUFFICIENT_DATA</code> - The alarm has just started, the metric is not
    ///           available, or not enough data is available for the metric to determine the alarm
    ///           state.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>OK</code> - The metric is within the defined threshold.</p>
    ///             </li>
    ///          </ul>
    public let state: LightsailClientTypes.AlarmState?

    public init (
        alarmName: Swift.String? = nil,
        state: LightsailClientTypes.AlarmState? = nil
    )
    {
        self.alarmName = alarmName
        self.state = state
    }
}

struct TestAlarmInputBody: Swift.Equatable {
    public let alarmName: Swift.String?
    public let state: LightsailClientTypes.AlarmState?
}

extension TestAlarmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
        case state
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AlarmState.self, forKey: .state)
        state = stateDecoded
    }
}

extension TestAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TestAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TestAlarmOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TestAlarmOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestAlarmOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension TestAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TestAlarmOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct TestAlarmOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct TestAlarmOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension TestAlarmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

extension LightsailClientTypes {
    public enum TreatMissingData: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case breaching
        case ignore
        case missing
        case notbreaching
        case sdkUnknown(Swift.String)

        public static var allCases: [TreatMissingData] {
            return [
                .breaching,
                .ignore,
                .missing,
                .notbreaching,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .breaching: return "breaching"
            case .ignore: return "ignore"
            case .missing: return "missing"
            case .notbreaching: return "notBreaching"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TreatMissingData(rawValue: rawValue) ?? TreatMissingData.sdkUnknown(rawValue)
        }
    }
}

extension UnauthenticatedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UnauthenticatedException(code: \(Swift.String(describing: code)), docs: \(Swift.String(describing: docs)), message: \(Swift.String(describing: message)), tip: \(Swift.String(describing: tip)))"}
}

extension UnauthenticatedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UnauthenticatedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.docs = output.docs
            self.message = output.message
            self.tip = output.tip
        } else {
            self.code = nil
            self.docs = nil
            self.message = nil
            self.tip = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Lightsail throws this exception when the user has not been authenticated.</p>
public struct UnauthenticatedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var docs: Swift.String?
    public var message: Swift.String?
    public var tip: Swift.String?

    public init (
        code: Swift.String? = nil,
        docs: Swift.String? = nil,
        message: Swift.String? = nil,
        tip: Swift.String? = nil
    )
    {
        self.code = code
        self.docs = docs
        self.message = message
        self.tip = tip
    }
}

struct UnauthenticatedExceptionBody: Swift.Equatable {
    public let code: Swift.String?
    public let docs: Swift.String?
    public let message: Swift.String?
    public let tip: Swift.String?
}

extension UnauthenticatedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case docs
        case message
        case tip
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let docsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .docs)
        docs = docsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let tipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tip)
        tip = tipDecoded
    }
}

extension UnpeerVpcInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UnpeerVpcInput()"}
}

extension UnpeerVpcInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct UnpeerVpcInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UnpeerVpcInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UnpeerVpcInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UnpeerVpcOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UnpeerVpcInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UnpeerVpcOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UnpeerVpcOutputError>
}

public struct UnpeerVpcInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UnpeerVpcInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UnpeerVpcInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UnpeerVpcOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UnpeerVpcInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UnpeerVpcOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UnpeerVpcOutputError>
}

public struct UnpeerVpcInput: Swift.Equatable {

    public init() {}
}

struct UnpeerVpcInputBody: Swift.Equatable {
}

extension UnpeerVpcInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UnpeerVpcOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UnpeerVpcOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UnpeerVpcOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UnpeerVpcOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UnpeerVpcOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension UnpeerVpcOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UnpeerVpcOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct UnpeerVpcOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct UnpeerVpcOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension UnpeerVpcOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

public struct UntagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), resourceName: \(Swift.String(describing: resourceName)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case resourceName
        case tagKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource from which you want to remove a tag.</p>
    public let resourceArn: Swift.String?
    /// <p>The name of the resource from which you are removing a tag.</p>
    public let resourceName: Swift.String?
    /// <p>The tag keys to delete from the specified resource.</p>
    public let tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        resourceName: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.resourceName = resourceName
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    public let resourceName: Swift.String?
    public let resourceArn: Swift.String?
    public let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case resourceName
        case tagKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UntagResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension UntagResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct UpdateContainerServiceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContainerServiceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContainerServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContainerServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContainerServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContainerServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContainerServiceOutputError>
}

extension UpdateContainerServiceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateContainerServiceInput(isDisabled: \(Swift.String(describing: isDisabled)), power: \(Swift.String(describing: power)), publicDomainNames: \(Swift.String(describing: publicDomainNames)), scale: \(Swift.String(describing: scale)), serviceName: \(Swift.String(describing: serviceName)))"}
}

extension UpdateContainerServiceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isDisabled
        case power
        case publicDomainNames
        case scale
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let isDisabled = isDisabled {
            try encodeContainer.encode(isDisabled, forKey: .isDisabled)
        }
        if let power = power {
            try encodeContainer.encode(power.rawValue, forKey: .power)
        }
        if let publicDomainNames = publicDomainNames {
            var publicDomainNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .publicDomainNames)
            for (dictKey0, containerservicepublicdomains0) in publicDomainNames {
                try publicDomainNamesContainer.encode(containerservicepublicdomains0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let scale = scale {
            try encodeContainer.encode(scale, forKey: .scale)
        }
    }
}

public struct UpdateContainerServiceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContainerServiceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContainerServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContainerServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContainerServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContainerServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContainerServiceOutputError>
}

public struct UpdateContainerServiceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateContainerServiceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateContainerServiceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateContainerServiceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateContainerServiceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateContainerServiceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateContainerServiceOutputError>
}

public struct UpdateContainerServiceInput: Swift.Equatable {
    /// <p>A Boolean value to indicate whether the container service is disabled.</p>
    public let isDisabled: Swift.Bool?
    /// <p>The power for the container service.</p>
    ///
    ///          <p>The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the
    ///       container service. The <code>power</code> and <code>scale</code> of a container service makes
    ///       up its configured capacity. To determine the monthly price of your container service, multiply
    ///       the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of
    ///       the service.</p>
    ///
    ///          <p>Use the <code>GetContainerServicePowers</code> action to view the specifications of each
    ///       power option.</p>
    public let power: LightsailClientTypes.ContainerServicePowerName?
    /// <p>The public domain names to use with the container service, such as
    ///         <code>example.com</code> and <code>www.example.com</code>.</p>
    ///
    ///          <p>You can specify up to four public domain names for a container service. The domain names
    ///       that you specify are used when you create a deployment with a container configured as the
    ///       public endpoint of your container service.</p>
    ///
    ///          <p>If you don't specify public domain names, then you can use the default domain of the
    ///       container service.</p>
    ///
    ///          <important>
    ///             <p>You must create and validate an SSL/TLS certificate before you can use public domain
    ///         names with your container service. Use the <code>CreateCertificate</code> action to create a
    ///         certificate for the public domain names you want to use with your container service.</p>
    ///          </important>
    ///
    ///          <p>You can specify public domain names using a string to array map as shown in the example
    ///       later on this page.</p>
    public let publicDomainNames: [Swift.String:[Swift.String]]?
    /// <p>The scale for the container service.</p>
    ///
    ///          <p>The scale specifies the allocated compute nodes of the container service. The
    ///         <code>power</code> and <code>scale</code> of a container service makes up its configured
    ///       capacity. To determine the monthly price of your container service, multiply the base price of
    ///       the <code>power</code> with the <code>scale</code> (the number of nodes) of the
    ///       service.</p>
    public let scale: Swift.Int?
    /// <p>The name of the container service to update.</p>
    public let serviceName: Swift.String?

    public init (
        isDisabled: Swift.Bool? = nil,
        power: LightsailClientTypes.ContainerServicePowerName? = nil,
        publicDomainNames: [Swift.String:[Swift.String]]? = nil,
        scale: Swift.Int? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.isDisabled = isDisabled
        self.power = power
        self.publicDomainNames = publicDomainNames
        self.scale = scale
        self.serviceName = serviceName
    }
}

struct UpdateContainerServiceInputBody: Swift.Equatable {
    public let power: LightsailClientTypes.ContainerServicePowerName?
    public let scale: Swift.Int?
    public let isDisabled: Swift.Bool?
    public let publicDomainNames: [Swift.String:[Swift.String]]?
}

extension UpdateContainerServiceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isDisabled
        case power
        case publicDomainNames
        case scale
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let powerDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServicePowerName.self, forKey: .power)
        power = powerDecoded
        let scaleDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scale)
        scale = scaleDecoded
        let isDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDisabled)
        isDisabled = isDisabledDecoded
        let publicDomainNamesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .publicDomainNames)
        var publicDomainNamesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let publicDomainNamesContainer = publicDomainNamesContainer {
            publicDomainNamesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, containerservicepublicdomainslist0) in publicDomainNamesContainer {
                var containerservicepublicdomainslist0Decoded0: [Swift.String]? = nil
                if let containerservicepublicdomainslist0 = containerservicepublicdomainslist0 {
                    containerservicepublicdomainslist0Decoded0 = [Swift.String]()
                    for string1 in containerservicepublicdomainslist0 {
                        if let string1 = string1 {
                            containerservicepublicdomainslist0Decoded0?.append(string1)
                        }
                    }
                }
                publicDomainNamesDecoded0?[key0] = containerservicepublicdomainslist0Decoded0
            }
        }
        publicDomainNames = publicDomainNamesDecoded0
    }
}

extension UpdateContainerServiceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateContainerServiceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateContainerServiceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateContainerServiceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateContainerServiceOutputResponse(containerService: \(Swift.String(describing: containerService)))"}
}

extension UpdateContainerServiceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateContainerServiceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.containerService = output.containerService
        } else {
            self.containerService = nil
        }
    }
}

public struct UpdateContainerServiceOutputResponse: Swift.Equatable {
    /// <p>An object that describes a container service.</p>
    public let containerService: LightsailClientTypes.ContainerService?

    public init (
        containerService: LightsailClientTypes.ContainerService? = nil
    )
    {
        self.containerService = containerService
    }
}

struct UpdateContainerServiceOutputResponseBody: Swift.Equatable {
    public let containerService: LightsailClientTypes.ContainerService?
}

extension UpdateContainerServiceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerService
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerServiceDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerService.self, forKey: .containerService)
        containerService = containerServiceDecoded
    }
}

public struct UpdateDistributionBundleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDistributionBundleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDistributionBundleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDistributionBundleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDistributionBundleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDistributionBundleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDistributionBundleOutputError>
}

extension UpdateDistributionBundleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDistributionBundleInput(bundleId: \(Swift.String(describing: bundleId)), distributionName: \(Swift.String(describing: distributionName)))"}
}

extension UpdateDistributionBundleInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case distributionName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let distributionName = distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
    }
}

public struct UpdateDistributionBundleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDistributionBundleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDistributionBundleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDistributionBundleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDistributionBundleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDistributionBundleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDistributionBundleOutputError>
}

public struct UpdateDistributionBundleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDistributionBundleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDistributionBundleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDistributionBundleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDistributionBundleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDistributionBundleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDistributionBundleOutputError>
}

public struct UpdateDistributionBundleInput: Swift.Equatable {
    /// <p>The bundle ID of the new bundle to apply to your distribution.</p>
    ///          <p>Use the <code>GetDistributionBundles</code> action to get a list of distribution bundle
    ///       IDs that you can specify.</p>
    public let bundleId: Swift.String?
    /// <p>The name of the distribution for which to update the bundle.</p>
    ///          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    ///       can specify.</p>
    public let distributionName: Swift.String?

    public init (
        bundleId: Swift.String? = nil,
        distributionName: Swift.String? = nil
    )
    {
        self.bundleId = bundleId
        self.distributionName = distributionName
    }
}

struct UpdateDistributionBundleInputBody: Swift.Equatable {
    public let distributionName: Swift.String?
    public let bundleId: Swift.String?
}

extension UpdateDistributionBundleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case distributionName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
    }
}

extension UpdateDistributionBundleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDistributionBundleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDistributionBundleOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDistributionBundleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDistributionBundleOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension UpdateDistributionBundleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateDistributionBundleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct UpdateDistributionBundleOutputResponse: Swift.Equatable {
    /// <p>Describes the API operation.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct UpdateDistributionBundleOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension UpdateDistributionBundleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

public struct UpdateDistributionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDistributionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDistributionOutputError>
}

extension UpdateDistributionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDistributionInput(cacheBehaviorSettings: \(Swift.String(describing: cacheBehaviorSettings)), cacheBehaviors: \(Swift.String(describing: cacheBehaviors)), defaultCacheBehavior: \(Swift.String(describing: defaultCacheBehavior)), distributionName: \(Swift.String(describing: distributionName)), isEnabled: \(Swift.String(describing: isEnabled)), origin: \(Swift.String(describing: origin)))"}
}

extension UpdateDistributionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheBehaviorSettings
        case cacheBehaviors
        case defaultCacheBehavior
        case distributionName
        case isEnabled
        case origin
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cacheBehaviorSettings = cacheBehaviorSettings {
            try encodeContainer.encode(cacheBehaviorSettings, forKey: .cacheBehaviorSettings)
        }
        if let cacheBehaviors = cacheBehaviors {
            var cacheBehaviorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cacheBehaviors)
            for cachebehaviorlist0 in cacheBehaviors {
                try cacheBehaviorsContainer.encode(cachebehaviorlist0)
            }
        }
        if let defaultCacheBehavior = defaultCacheBehavior {
            try encodeContainer.encode(defaultCacheBehavior, forKey: .defaultCacheBehavior)
        }
        if let distributionName = distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
        if let isEnabled = isEnabled {
            try encodeContainer.encode(isEnabled, forKey: .isEnabled)
        }
        if let origin = origin {
            try encodeContainer.encode(origin, forKey: .origin)
        }
    }
}

public struct UpdateDistributionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDistributionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDistributionOutputError>
}

public struct UpdateDistributionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDistributionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDistributionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDistributionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDistributionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDistributionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDistributionOutputError>
}

public struct UpdateDistributionInput: Swift.Equatable {
    /// <p>An object that describes the cache behavior settings for the distribution.</p>
    ///          <note>
    ///             <p>The <code>cacheBehaviorSettings</code> specified in your
    ///           <code>UpdateDistributionRequest</code> will replace your distribution's existing
    ///         settings.</p>
    ///          </note>
    public let cacheBehaviorSettings: LightsailClientTypes.CacheSettings?
    /// <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    public let cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]?
    /// <p>An object that describes the default cache behavior for the distribution.</p>
    public let defaultCacheBehavior: LightsailClientTypes.CacheBehavior?
    /// <p>The name of the distribution to update.</p>
    ///          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
    ///       can specify.</p>
    public let distributionName: Swift.String?
    /// <p>Indicates whether to enable the distribution.</p>
    public let isEnabled: Swift.Bool?
    /// <p>An object that describes the origin resource for the distribution, such as a Lightsail
    ///       instance or load balancer.</p>
    ///          <p>The distribution pulls, caches, and serves content from the origin.</p>
    public let origin: LightsailClientTypes.InputOrigin?

    public init (
        cacheBehaviorSettings: LightsailClientTypes.CacheSettings? = nil,
        cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]? = nil,
        defaultCacheBehavior: LightsailClientTypes.CacheBehavior? = nil,
        distributionName: Swift.String? = nil,
        isEnabled: Swift.Bool? = nil,
        origin: LightsailClientTypes.InputOrigin? = nil
    )
    {
        self.cacheBehaviorSettings = cacheBehaviorSettings
        self.cacheBehaviors = cacheBehaviors
        self.defaultCacheBehavior = defaultCacheBehavior
        self.distributionName = distributionName
        self.isEnabled = isEnabled
        self.origin = origin
    }
}

struct UpdateDistributionInputBody: Swift.Equatable {
    public let distributionName: Swift.String?
    public let origin: LightsailClientTypes.InputOrigin?
    public let defaultCacheBehavior: LightsailClientTypes.CacheBehavior?
    public let cacheBehaviorSettings: LightsailClientTypes.CacheSettings?
    public let cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]?
    public let isEnabled: Swift.Bool?
}

extension UpdateDistributionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheBehaviorSettings
        case cacheBehaviors
        case defaultCacheBehavior
        case distributionName
        case isEnabled
        case origin
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
        let originDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InputOrigin.self, forKey: .origin)
        origin = originDecoded
        let defaultCacheBehaviorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CacheBehavior.self, forKey: .defaultCacheBehavior)
        defaultCacheBehavior = defaultCacheBehaviorDecoded
        let cacheBehaviorSettingsDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CacheSettings.self, forKey: .cacheBehaviorSettings)
        cacheBehaviorSettings = cacheBehaviorSettingsDecoded
        let cacheBehaviorsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CacheBehaviorPerPath?].self, forKey: .cacheBehaviors)
        var cacheBehaviorsDecoded0:[LightsailClientTypes.CacheBehaviorPerPath]? = nil
        if let cacheBehaviorsContainer = cacheBehaviorsContainer {
            cacheBehaviorsDecoded0 = [LightsailClientTypes.CacheBehaviorPerPath]()
            for structure0 in cacheBehaviorsContainer {
                if let structure0 = structure0 {
                    cacheBehaviorsDecoded0?.append(structure0)
                }
            }
        }
        cacheBehaviors = cacheBehaviorsDecoded0
        let isEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isEnabled)
        isEnabled = isEnabledDecoded
    }
}

extension UpdateDistributionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDistributionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDistributionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDistributionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDistributionOutputResponse(operation: \(Swift.String(describing: operation)))"}
}

extension UpdateDistributionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateDistributionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operation = output.operation
        } else {
            self.operation = nil
        }
    }
}

public struct UpdateDistributionOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operation: LightsailClientTypes.Operation?

    public init (
        operation: LightsailClientTypes.Operation? = nil
    )
    {
        self.operation = operation
    }
}

struct UpdateDistributionOutputResponseBody: Swift.Equatable {
    public let operation: LightsailClientTypes.Operation?
}

extension UpdateDistributionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
    }
}

public struct UpdateDomainEntryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDomainEntryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDomainEntryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDomainEntryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDomainEntryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDomainEntryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDomainEntryOutputError>
}

extension UpdateDomainEntryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDomainEntryInput(domainEntry: \(Swift.String(describing: domainEntry)), domainName: \(Swift.String(describing: domainName)))"}
}

extension UpdateDomainEntryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainEntry
        case domainName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainEntry = domainEntry {
            try encodeContainer.encode(domainEntry, forKey: .domainEntry)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }
}

public struct UpdateDomainEntryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDomainEntryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDomainEntryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDomainEntryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDomainEntryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDomainEntryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDomainEntryOutputError>
}

public struct UpdateDomainEntryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateDomainEntryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateDomainEntryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateDomainEntryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateDomainEntryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateDomainEntryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateDomainEntryOutputError>
}

public struct UpdateDomainEntryInput: Swift.Equatable {
    /// <p>An array of key-value pairs containing information about the domain entry.</p>
    public let domainEntry: LightsailClientTypes.DomainEntry?
    /// <p>The name of the domain recordset to update.</p>
    public let domainName: Swift.String?

    public init (
        domainEntry: LightsailClientTypes.DomainEntry? = nil,
        domainName: Swift.String? = nil
    )
    {
        self.domainEntry = domainEntry
        self.domainName = domainName
    }
}

struct UpdateDomainEntryInputBody: Swift.Equatable {
    public let domainName: Swift.String?
    public let domainEntry: LightsailClientTypes.DomainEntry?
}

extension UpdateDomainEntryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainEntry
        case domainName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let domainEntryDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.DomainEntry.self, forKey: .domainEntry)
        domainEntry = domainEntryDecoded
    }
}

extension UpdateDomainEntryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDomainEntryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDomainEntryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDomainEntryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateDomainEntryOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension UpdateDomainEntryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateDomainEntryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct UpdateDomainEntryOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct UpdateDomainEntryOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension UpdateDomainEntryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct UpdateLoadBalancerAttributeInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLoadBalancerAttributeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLoadBalancerAttributeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLoadBalancerAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLoadBalancerAttributeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLoadBalancerAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLoadBalancerAttributeOutputError>
}

extension UpdateLoadBalancerAttributeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLoadBalancerAttributeInput(attributeName: \(Swift.String(describing: attributeName)), attributeValue: \(Swift.String(describing: attributeValue)), loadBalancerName: \(Swift.String(describing: loadBalancerName)))"}
}

extension UpdateLoadBalancerAttributeInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName
        case attributeValue
        case loadBalancerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = attributeName {
            try encodeContainer.encode(attributeName.rawValue, forKey: .attributeName)
        }
        if let attributeValue = attributeValue {
            try encodeContainer.encode(attributeValue, forKey: .attributeValue)
        }
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
    }
}

public struct UpdateLoadBalancerAttributeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLoadBalancerAttributeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLoadBalancerAttributeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLoadBalancerAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLoadBalancerAttributeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLoadBalancerAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLoadBalancerAttributeOutputError>
}

public struct UpdateLoadBalancerAttributeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateLoadBalancerAttributeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateLoadBalancerAttributeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateLoadBalancerAttributeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateLoadBalancerAttributeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateLoadBalancerAttributeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateLoadBalancerAttributeOutputError>
}

public struct UpdateLoadBalancerAttributeInput: Swift.Equatable {
    /// <p>The name of the attribute you want to update. Valid values are below.</p>
    public let attributeName: LightsailClientTypes.LoadBalancerAttributeName?
    /// <p>The value that you want to specify for the attribute name.</p>
    public let attributeValue: Swift.String?
    /// <p>The name of the load balancer that you want to modify (e.g.,
    ///       <code>my-load-balancer</code>.</p>
    public let loadBalancerName: Swift.String?

    public init (
        attributeName: LightsailClientTypes.LoadBalancerAttributeName? = nil,
        attributeValue: Swift.String? = nil,
        loadBalancerName: Swift.String? = nil
    )
    {
        self.attributeName = attributeName
        self.attributeValue = attributeValue
        self.loadBalancerName = loadBalancerName
    }
}

struct UpdateLoadBalancerAttributeInputBody: Swift.Equatable {
    public let loadBalancerName: Swift.String?
    public let attributeName: LightsailClientTypes.LoadBalancerAttributeName?
    public let attributeValue: Swift.String?
}

extension UpdateLoadBalancerAttributeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName
        case attributeValue
        case loadBalancerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let attributeNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.LoadBalancerAttributeName.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let attributeValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeValue)
        attributeValue = attributeValueDecoded
    }
}

extension UpdateLoadBalancerAttributeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateLoadBalancerAttributeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateLoadBalancerAttributeOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateLoadBalancerAttributeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLoadBalancerAttributeOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension UpdateLoadBalancerAttributeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateLoadBalancerAttributeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct UpdateLoadBalancerAttributeOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct UpdateLoadBalancerAttributeOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension UpdateLoadBalancerAttributeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct UpdateRelationalDatabaseInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRelationalDatabaseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRelationalDatabaseOutputError>
}

extension UpdateRelationalDatabaseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRelationalDatabaseInput(applyImmediately: \(Swift.String(describing: applyImmediately)), caCertificateIdentifier: \(Swift.String(describing: caCertificateIdentifier)), disableBackupRetention: \(Swift.String(describing: disableBackupRetention)), enableBackupRetention: \(Swift.String(describing: enableBackupRetention)), masterUserPassword: \(Swift.String(describing: masterUserPassword)), preferredBackupWindow: \(Swift.String(describing: preferredBackupWindow)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)), rotateMasterUserPassword: \(Swift.String(describing: rotateMasterUserPassword)))"}
}

extension UpdateRelationalDatabaseInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyImmediately
        case caCertificateIdentifier
        case disableBackupRetention
        case enableBackupRetention
        case masterUserPassword
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseName
        case rotateMasterUserPassword
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applyImmediately = applyImmediately {
            try encodeContainer.encode(applyImmediately, forKey: .applyImmediately)
        }
        if let caCertificateIdentifier = caCertificateIdentifier {
            try encodeContainer.encode(caCertificateIdentifier, forKey: .caCertificateIdentifier)
        }
        if let disableBackupRetention = disableBackupRetention {
            try encodeContainer.encode(disableBackupRetention, forKey: .disableBackupRetention)
        }
        if let enableBackupRetention = enableBackupRetention {
            try encodeContainer.encode(enableBackupRetention, forKey: .enableBackupRetention)
        }
        if let masterUserPassword = masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try encodeContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let publiclyAccessible = publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let rotateMasterUserPassword = rotateMasterUserPassword {
            try encodeContainer.encode(rotateMasterUserPassword, forKey: .rotateMasterUserPassword)
        }
    }
}

public struct UpdateRelationalDatabaseInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRelationalDatabaseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRelationalDatabaseOutputError>
}

public struct UpdateRelationalDatabaseInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRelationalDatabaseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRelationalDatabaseInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRelationalDatabaseInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRelationalDatabaseOutputError>
}

public struct UpdateRelationalDatabaseInput: Swift.Equatable {
    /// <p>When <code>true</code>, applies changes immediately. When <code>false</code>, applies
    ///       changes during the preferred maintenance window. Some changes may cause an outage.</p>
    ///          <p>Default: <code>false</code>
    ///          </p>
    public let applyImmediately: Swift.Bool?
    /// <p>Indicates the certificate that needs to be associated with the database.</p>
    public let caCertificateIdentifier: Swift.String?
    /// <p>When <code>true</code>, disables automated backup retention for your database.</p>
    ///          <p>Disabling backup retention deletes all automated database backups. Before disabling this,
    ///       you may want to create a snapshot of your database using the <code>create relational database
    ///         snapshot</code> operation.</p>
    ///          <p>Updates are applied during the next maintenance window because this can result in an
    ///       outage.</p>
    public let disableBackupRetention: Swift.Bool?
    /// <p>When <code>true</code>, enables automated backup retention for your database.</p>
    ///          <p>Updates are applied during the next maintenance window because this can result in an
    ///       outage.</p>
    public let enableBackupRetention: Swift.Bool?
    /// <p>The password for the master user. The password can include any printable ASCII character
    ///       except "/", """, or "@".</p>
    ///          <p>My<b>SQL</b>
    ///          </p>
    ///          <p>Constraints: Must contain from 8 to 41 characters.</p>
    ///          <p>
    ///             <b>PostgreSQL</b>
    ///          </p>
    ///          <p>Constraints: Must contain from 8 to 128 characters.</p>
    public let masterUserPassword: Swift.String?
    /// <p>The daily time range during which automated backups are created for your database if
    ///       automated backups are enabled.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must be in the <code>hh24:mi-hh24:mi</code> format.</p>
    ///                <p>Example: <code>16:00-16:30</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Must not conflict with the preferred maintenance window.</p>
    ///             </li>
    ///             <li>
    ///                <p>Must be at least 30 minutes.</p>
    ///             </li>
    ///          </ul>
    public let preferredBackupWindow: Swift.String?
    /// <p>The weekly time range during which system maintenance can occur on your database.</p>
    ///          <p>The default is a 30-minute window selected at random from an 8-hour block of time for each
    ///       AWS Region, occurring on a random day of the week.</p>
    ///          <p>Constraints:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.</p>
    ///             </li>
    ///             <li>
    ///                <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    ///             </li>
    ///             <li>
    ///                <p>Must be at least 30 minutes.</p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Example: <code>Tue:17:00-Tue:17:30</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let preferredMaintenanceWindow: Swift.String?
    /// <p>Specifies the accessibility options for your database. A value of <code>true</code>
    ///       specifies a database that is available to resources outside of your Lightsail account. A
    ///       value of <code>false</code> specifies a database that is available only to your Lightsail
    ///       resources in the same region as your database.</p>
    public let publiclyAccessible: Swift.Bool?
    /// <p>The name of your Lightsail database resource to update.</p>
    public let relationalDatabaseName: Swift.String?
    /// <p>When <code>true</code>, the master user password is changed to a new strong password
    ///       generated by Lightsail.</p>
    ///          <p>Use the <code>get relational database master user password</code> operation to get the new
    ///       password.</p>
    public let rotateMasterUserPassword: Swift.Bool?

    public init (
        applyImmediately: Swift.Bool? = nil,
        caCertificateIdentifier: Swift.String? = nil,
        disableBackupRetention: Swift.Bool? = nil,
        enableBackupRetention: Swift.Bool? = nil,
        masterUserPassword: Swift.String? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        relationalDatabaseName: Swift.String? = nil,
        rotateMasterUserPassword: Swift.Bool? = nil
    )
    {
        self.applyImmediately = applyImmediately
        self.caCertificateIdentifier = caCertificateIdentifier
        self.disableBackupRetention = disableBackupRetention
        self.enableBackupRetention = enableBackupRetention
        self.masterUserPassword = masterUserPassword
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.relationalDatabaseName = relationalDatabaseName
        self.rotateMasterUserPassword = rotateMasterUserPassword
    }
}

struct UpdateRelationalDatabaseInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
    public let masterUserPassword: Swift.String?
    public let rotateMasterUserPassword: Swift.Bool?
    public let preferredBackupWindow: Swift.String?
    public let preferredMaintenanceWindow: Swift.String?
    public let enableBackupRetention: Swift.Bool?
    public let disableBackupRetention: Swift.Bool?
    public let publiclyAccessible: Swift.Bool?
    public let applyImmediately: Swift.Bool?
    public let caCertificateIdentifier: Swift.String?
}

extension UpdateRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyImmediately
        case caCertificateIdentifier
        case disableBackupRetention
        case enableBackupRetention
        case masterUserPassword
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseName
        case rotateMasterUserPassword
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let rotateMasterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .rotateMasterUserPassword)
        rotateMasterUserPassword = rotateMasterUserPasswordDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let enableBackupRetentionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableBackupRetention)
        enableBackupRetention = enableBackupRetentionDecoded
        let disableBackupRetentionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableBackupRetention)
        disableBackupRetention = disableBackupRetentionDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let applyImmediatelyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .applyImmediately)
        applyImmediately = applyImmediatelyDecoded
        let caCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caCertificateIdentifier)
        caCertificateIdentifier = caCertificateIdentifierDecoded
    }
}

extension UpdateRelationalDatabaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRelationalDatabaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRelationalDatabaseOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRelationalDatabaseOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRelationalDatabaseOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension UpdateRelationalDatabaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateRelationalDatabaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct UpdateRelationalDatabaseOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct UpdateRelationalDatabaseOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension UpdateRelationalDatabaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}

public struct UpdateRelationalDatabaseParametersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRelationalDatabaseParametersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRelationalDatabaseParametersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRelationalDatabaseParametersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRelationalDatabaseParametersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRelationalDatabaseParametersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRelationalDatabaseParametersOutputError>
}

extension UpdateRelationalDatabaseParametersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRelationalDatabaseParametersInput(parameters: \(Swift.String(describing: parameters)), relationalDatabaseName: \(Swift.String(describing: relationalDatabaseName)))"}
}

extension UpdateRelationalDatabaseParametersInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameters
        case relationalDatabaseName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for relationaldatabaseparameterlist0 in parameters {
                try parametersContainer.encode(relationaldatabaseparameterlist0)
            }
        }
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
    }
}

public struct UpdateRelationalDatabaseParametersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRelationalDatabaseParametersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRelationalDatabaseParametersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRelationalDatabaseParametersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRelationalDatabaseParametersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRelationalDatabaseParametersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRelationalDatabaseParametersOutputError>
}

public struct UpdateRelationalDatabaseParametersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRelationalDatabaseParametersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRelationalDatabaseParametersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRelationalDatabaseParametersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRelationalDatabaseParametersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRelationalDatabaseParametersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRelationalDatabaseParametersOutputError>
}

public struct UpdateRelationalDatabaseParametersInput: Swift.Equatable {
    /// <p>The database parameters to update.</p>
    public let parameters: [LightsailClientTypes.RelationalDatabaseParameter]?
    /// <p>The name of your database for which to update parameters.</p>
    public let relationalDatabaseName: Swift.String?

    public init (
        parameters: [LightsailClientTypes.RelationalDatabaseParameter]? = nil,
        relationalDatabaseName: Swift.String? = nil
    )
    {
        self.parameters = parameters
        self.relationalDatabaseName = relationalDatabaseName
    }
}

struct UpdateRelationalDatabaseParametersInputBody: Swift.Equatable {
    public let relationalDatabaseName: Swift.String?
    public let parameters: [LightsailClientTypes.RelationalDatabaseParameter]?
}

extension UpdateRelationalDatabaseParametersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameters
        case relationalDatabaseName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let parametersContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabaseParameter?].self, forKey: .parameters)
        var parametersDecoded0:[LightsailClientTypes.RelationalDatabaseParameter]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [LightsailClientTypes.RelationalDatabaseParameter]()
            for structure0 in parametersContainer {
                if let structure0 = structure0 {
                    parametersDecoded0?.append(structure0)
                }
            }
        }
        parameters = parametersDecoded0
    }
}

extension UpdateRelationalDatabaseParametersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRelationalDatabaseParametersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "AccountSetupInProgressException" : self = .accountSetupInProgressException(try AccountSetupInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationFailureException" : self = .operationFailureException(try OperationFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthenticatedException" : self = .unauthenticatedException(try UnauthenticatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRelationalDatabaseParametersOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case accountSetupInProgressException(AccountSetupInProgressException)
    case invalidInputException(InvalidInputException)
    case notFoundException(NotFoundException)
    case operationFailureException(OperationFailureException)
    case serviceException(ServiceException)
    case unauthenticatedException(UnauthenticatedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRelationalDatabaseParametersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRelationalDatabaseParametersOutputResponse(operations: \(Swift.String(describing: operations)))"}
}

extension UpdateRelationalDatabaseParametersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateRelationalDatabaseParametersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operations = output.operations
        } else {
            self.operations = nil
        }
    }
}

public struct UpdateRelationalDatabaseParametersOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe the result of the action, such as the status of the
    ///       request, the timestamp of the request, and the resources affected by the request.</p>
    public let operations: [LightsailClientTypes.Operation]?

    public init (
        operations: [LightsailClientTypes.Operation]? = nil
    )
    {
        self.operations = operations
    }
}

struct UpdateRelationalDatabaseParametersOutputResponseBody: Swift.Equatable {
    public let operations: [LightsailClientTypes.Operation]?
}

extension UpdateRelationalDatabaseParametersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Operation?].self, forKey: .operations)
        var operationsDecoded0:[LightsailClientTypes.Operation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [LightsailClientTypes.Operation]()
            for structure0 in operationsContainer {
                if let structure0 = structure0 {
                    operationsDecoded0?.append(structure0)
                }
            }
        }
        operations = operationsDecoded0
    }
}
