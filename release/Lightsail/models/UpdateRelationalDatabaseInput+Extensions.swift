// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateRelationalDatabaseInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateRelationalDatabaseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateRelationalDatabaseInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateRelationalDatabaseInput>
    public typealias MOutput = OperationOutput<UpdateRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateRelationalDatabaseOutputError>
}

public struct UpdateRelationalDatabaseInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateRelationalDatabaseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateRelationalDatabaseInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateRelationalDatabaseInput>
    public typealias MOutput = OperationOutput<UpdateRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateRelationalDatabaseOutputError>
}

public struct UpdateRelationalDatabaseInputBodyMiddleware: Middleware {
    public let id: String = "UpdateRelationalDatabaseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateRelationalDatabaseInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateRelationalDatabaseInput>
    public typealias MOutput = OperationOutput<UpdateRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateRelationalDatabaseOutputError>
}

extension UpdateRelationalDatabaseInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applyImmediately
        case caCertificateIdentifier
        case disableBackupRetention
        case enableBackupRetention
        case masterUserPassword
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseName
        case rotateMasterUserPassword
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applyImmediately = applyImmediately {
            try encodeContainer.encode(applyImmediately, forKey: .applyImmediately)
        }
        if let caCertificateIdentifier = caCertificateIdentifier {
            try encodeContainer.encode(caCertificateIdentifier, forKey: .caCertificateIdentifier)
        }
        if let disableBackupRetention = disableBackupRetention {
            try encodeContainer.encode(disableBackupRetention, forKey: .disableBackupRetention)
        }
        if let enableBackupRetention = enableBackupRetention {
            try encodeContainer.encode(enableBackupRetention, forKey: .enableBackupRetention)
        }
        if let masterUserPassword = masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try encodeContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let publiclyAccessible = publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let rotateMasterUserPassword = rotateMasterUserPassword {
            try encodeContainer.encode(rotateMasterUserPassword, forKey: .rotateMasterUserPassword)
        }
    }
}
