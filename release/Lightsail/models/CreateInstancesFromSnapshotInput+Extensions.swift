// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateInstancesFromSnapshotInputHeadersMiddleware: Middleware {
    public let id: String = "CreateInstancesFromSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInstancesFromSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInstancesFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInstancesFromSnapshotInput>
    public typealias MOutput = OperationOutput<CreateInstancesFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInstancesFromSnapshotOutputError>
}

public struct CreateInstancesFromSnapshotInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateInstancesFromSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInstancesFromSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInstancesFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInstancesFromSnapshotInput>
    public typealias MOutput = OperationOutput<CreateInstancesFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInstancesFromSnapshotOutputError>
}

public struct CreateInstancesFromSnapshotInputBodyMiddleware: Middleware {
    public let id: String = "CreateInstancesFromSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInstancesFromSnapshotInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInstancesFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInstancesFromSnapshotInput>
    public typealias MOutput = OperationOutput<CreateInstancesFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInstancesFromSnapshotOutputError>
}

extension CreateInstancesFromSnapshotInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addOns
        case attachedDiskMapping
        case availabilityZone
        case bundleId
        case instanceNames
        case instanceSnapshotName
        case ipAddressType
        case keyPairName
        case restoreDate
        case sourceInstanceName
        case tags
        case useLatestRestorableAutoSnapshot
        case userData
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addonrequestlist0 in addOns {
                try addOnsContainer.encode(addonrequestlist0)
            }
        }
        if let attachedDiskMapping = attachedDiskMapping {
            var attachedDiskMappingContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .attachedDiskMapping)
            for (dictKey0, attacheddiskmap0) in attachedDiskMapping {
                try attachedDiskMappingContainer.encode(attacheddiskmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let bundleId = bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for stringlist0 in instanceNames {
                try instanceNamesContainer.encode(stringlist0)
            }
        }
        if let instanceSnapshotName = instanceSnapshotName {
            try encodeContainer.encode(instanceSnapshotName, forKey: .instanceSnapshotName)
        }
        if let ipAddressType = ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let keyPairName = keyPairName {
            try encodeContainer.encode(keyPairName, forKey: .keyPairName)
        }
        if let restoreDate = restoreDate {
            try encodeContainer.encode(restoreDate, forKey: .restoreDate)
        }
        if let sourceInstanceName = sourceInstanceName {
            try encodeContainer.encode(sourceInstanceName, forKey: .sourceInstanceName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot {
            try encodeContainer.encode(useLatestRestorableAutoSnapshot, forKey: .useLatestRestorableAutoSnapshot)
        }
        if let userData = userData {
            try encodeContainer.encode(userData, forKey: .userData)
        }
    }
}
