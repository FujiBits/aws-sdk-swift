// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetLoadBalancerMetricDataInputHeadersMiddleware: Middleware {
    public let id: String = "GetLoadBalancerMetricDataInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetLoadBalancerMetricDataInput>,
                  next: H) -> Swift.Result<OperationOutput<GetLoadBalancerMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetLoadBalancerMetricDataInput>
    public typealias MOutput = OperationOutput<GetLoadBalancerMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetLoadBalancerMetricDataOutputError>
}

public struct GetLoadBalancerMetricDataInputQueryItemMiddleware: Middleware {
    public let id: String = "GetLoadBalancerMetricDataInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetLoadBalancerMetricDataInput>,
                  next: H) -> Swift.Result<OperationOutput<GetLoadBalancerMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetLoadBalancerMetricDataInput>
    public typealias MOutput = OperationOutput<GetLoadBalancerMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetLoadBalancerMetricDataOutputError>
}

public struct GetLoadBalancerMetricDataInputBodyMiddleware: Middleware {
    public let id: String = "GetLoadBalancerMetricDataInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetLoadBalancerMetricDataInput>,
                  next: H) -> Swift.Result<OperationOutput<GetLoadBalancerMetricDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetLoadBalancerMetricDataInput>
    public typealias MOutput = OperationOutput<GetLoadBalancerMetricDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetLoadBalancerMetricDataOutputError>
}

extension GetLoadBalancerMetricDataInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endTime
        case loadBalancerName
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if period != 0 {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let statistics = statistics {
            var statisticsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statistics)
            for metricstatisticlist0 in statistics {
                try statisticsContainer.encode(metricstatisticlist0.rawValue)
            }
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }
}
