// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDistributionsOutputResponseBody: Equatable {
    public let distributions: [LightsailDistribution]?
    public let nextPageToken: String?
}

extension GetDistributionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case distributions
        case nextPageToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionsContainer = try containerValues.decodeIfPresent([LightsailDistribution?].self, forKey: .distributions)
        var distributionsDecoded0:[LightsailDistribution]? = nil
        if let distributionsContainer = distributionsContainer {
            distributionsDecoded0 = [LightsailDistribution]()
            for structure0 in distributionsContainer {
                if let structure0 = structure0 {
                    distributionsDecoded0?.append(structure0)
                }
            }
        }
        distributions = distributionsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}
