// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutAlarmInputHeadersMiddleware: Middleware {
    public let id: String = "PutAlarmInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutAlarmInput>,
                  next: H) -> Swift.Result<OperationOutput<PutAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutAlarmInput>
    public typealias MOutput = OperationOutput<PutAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutAlarmOutputError>
}

public struct PutAlarmInputQueryItemMiddleware: Middleware {
    public let id: String = "PutAlarmInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutAlarmInput>,
                  next: H) -> Swift.Result<OperationOutput<PutAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutAlarmInput>
    public typealias MOutput = OperationOutput<PutAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutAlarmOutputError>
}

public struct PutAlarmInputBodyMiddleware: Middleware {
    public let id: String = "PutAlarmInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutAlarmInput>,
                  next: H) -> Swift.Result<OperationOutput<PutAlarmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutAlarmInput>
    public typealias MOutput = OperationOutput<PutAlarmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutAlarmOutputError>
}

extension PutAlarmInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarmName
        case comparisonOperator
        case contactProtocols
        case datapointsToAlarm
        case evaluationPeriods
        case metricName
        case monitoredResourceName
        case notificationEnabled
        case notificationTriggers
        case threshold
        case treatMissingData
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmName = alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let contactProtocols = contactProtocols {
            var contactProtocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contactProtocols)
            for contactprotocolslist0 in contactProtocols {
                try contactProtocolsContainer.encode(contactprotocolslist0.rawValue)
            }
        }
        if let datapointsToAlarm = datapointsToAlarm {
            try encodeContainer.encode(datapointsToAlarm, forKey: .datapointsToAlarm)
        }
        if let evaluationPeriods = evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let monitoredResourceName = monitoredResourceName {
            try encodeContainer.encode(monitoredResourceName, forKey: .monitoredResourceName)
        }
        if let notificationEnabled = notificationEnabled {
            try encodeContainer.encode(notificationEnabled, forKey: .notificationEnabled)
        }
        if let notificationTriggers = notificationTriggers {
            var notificationTriggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notificationTriggers)
            for notificationtriggerlist0 in notificationTriggers {
                try notificationTriggersContainer.encode(notificationtriggerlist0.rawValue)
            }
        }
        if let threshold = threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let treatMissingData = treatMissingData {
            try encodeContainer.encode(treatMissingData.rawValue, forKey: .treatMissingData)
        }
    }
}
