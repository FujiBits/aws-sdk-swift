// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateRelationalDatabaseInputHeadersMiddleware: Middleware {
    public let id: String = "CreateRelationalDatabaseInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRelationalDatabaseInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRelationalDatabaseInput>
    public typealias MOutput = OperationOutput<CreateRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRelationalDatabaseOutputError>
}

public struct CreateRelationalDatabaseInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateRelationalDatabaseInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRelationalDatabaseInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRelationalDatabaseInput>
    public typealias MOutput = OperationOutput<CreateRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRelationalDatabaseOutputError>
}

public struct CreateRelationalDatabaseInputBodyMiddleware: Middleware {
    public let id: String = "CreateRelationalDatabaseInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateRelationalDatabaseInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateRelationalDatabaseOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateRelationalDatabaseInput>
    public typealias MOutput = OperationOutput<CreateRelationalDatabaseOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateRelationalDatabaseOutputError>
}

extension CreateRelationalDatabaseInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone
        case masterDatabaseName
        case masterUserPassword
        case masterUsername
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseBlueprintId
        case relationalDatabaseBundleId
        case relationalDatabaseName
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let masterDatabaseName = masterDatabaseName {
            try encodeContainer.encode(masterDatabaseName, forKey: .masterDatabaseName)
        }
        if let masterUserPassword = masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
        if let masterUsername = masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try encodeContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let publiclyAccessible = publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let relationalDatabaseBlueprintId = relationalDatabaseBlueprintId {
            try encodeContainer.encode(relationalDatabaseBlueprintId, forKey: .relationalDatabaseBlueprintId)
        }
        if let relationalDatabaseBundleId = relationalDatabaseBundleId {
            try encodeContainer.encode(relationalDatabaseBundleId, forKey: .relationalDatabaseBundleId)
        }
        if let relationalDatabaseName = relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
